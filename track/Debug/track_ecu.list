
track_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800f0a8  0800f0a8  0001f0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5dc  0800f5dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5dc  0800f5dc  0001f5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5e4  0800f5e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5e4  0800f5e4  0001f5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5e8  0800f5e8  0001f5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00006754  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20006938  20006938  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027559  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006629  00000000  00000000  0004776d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df0  00000000  00000000  0004dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b98  00000000  00000000  0004fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b5de  00000000  00000000  00051720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000250c6  00000000  00000000  0007ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef3f1  00000000  00000000  000a1dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001911b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e08  00000000  00000000  00191208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f090 	.word	0x0800f090

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800f090 	.word	0x0800f090

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>:

#include "main.h"

class GPIOWriteController {
public:
	explicit GPIOWriteController(GPIO_TypeDef *port, uint16_t pin) :
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	809a      	strh	r2, [r3, #4]
	}
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_ZN19GPIOWriteController3setEv>:
	void set() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_SET);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	889b      	ldrh	r3, [r3, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	f003 fd78 	bl	8004a1c <HAL_GPIO_WritePin>
	}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	}
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
		return m_value;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	881b      	ldrh	r3, [r3, #0]
	}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	807b      	strh	r3, [r7, #2]
		m_value = value;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	801a      	strh	r2, [r3, #0]
	}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4798      	blx	r3
    }
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf0c      	ite	eq
 8001016:	2301      	moveq	r3, #1
 8001018:	2300      	movne	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffd4 	bl	8000fe0 <_ZNSt14_Function_baseD1Ev>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 8001042:	b5b0      	push	{r4, r5, r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	240f      	movs	r4, #15
 800104e:	461d      	mov	r5, r3
 8001050:	2c00      	cmp	r4, #0
 8001052:	db05      	blt.n	8001060 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 8001054:	4628      	mov	r0, r5
 8001056:	f000 faad 	bl	80015b4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800105a:	3510      	adds	r5, #16
 800105c:	3c01      	subs	r4, #1
 800105e:	e7f7      	b.n	8001050 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bdb0      	pop	{r4, r5, r7, pc}

08001072 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00a      	beq.n	8001096 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429c      	cmp	r4, r3
 800108a:	d004      	beq.n	8001096 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800108c:	3c10      	subs	r4, #16
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff ffca 	bl	8001028 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8001094:	e7f7      	b.n	8001086 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}

080010a0 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4801      	ldr	r0, [pc, #4]	; (80010ac <__tcf_0+0xc>)
 80010a6:	f7ff ffe4 	bl	8001072 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000200 	.word	0x20000200

080010b0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f3bf 8f5b 	dmb	ish
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf0c      	ite	eq
 80010c6:	2301      	moveq	r3, #1
 80010c8:	2300      	movne	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80010d2:	f00b f989 	bl	800c3e8 <__cxa_guard_acquire>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d008      	beq.n	80010f8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 80010e8:	f7ff ffab 	bl	8001042 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 80010ee:	f00b f9b2 	bl	800c456 <atexit>
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80010f4:	f00b f984 	bl	800c400 <__cxa_guard_release>
		return instance;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000304 	.word	0x20000304
 8001104:	20000200 	.word	0x20000200
 8001108:	080010a1 	.word	0x080010a1

0800110c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800111c:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001124:	1c59      	adds	r1, r3, #1
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fa4a 	bl	80015ce <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 800113a:	68fb      	ldr	r3, [r7, #12]
	}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	18d0      	adds	r0, r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f000 fa33 	bl	80015ce <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fa44 	bl	8001604 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	switch (module) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <_ZL17AdcModuleToHandle9AdcModule+0x16>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d002      	beq.n	80011ae <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 80011a8:	e003      	b.n	80011b2 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 80011ac:	e004      	b.n	80011b8 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 80011b0:	e002      	b.n	80011b8 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 80011b2:	f001 fa03 	bl	80025bc <Error_Handler>
		return nullptr;
 80011b6:	2300      	movs	r3, #0
	}
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000348 	.word	0x20000348
 80011c4:	20000390 	.word	0x20000390

080011c8 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d104      	bne.n	80011e8 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f909 	bl	80013fa <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff ffca 	bl	8001194 <_ZL17AdcModuleToHandle9AdcModule>
 8001200:	4602      	mov	r2, r0
					)) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69da      	ldr	r2, [r3, #28]
					)) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685c      	ldr	r4, [r3, #4]
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8001216:	429c      	cmp	r4, r3
 8001218:	d801      	bhi.n	800121e <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 800121a:	0063      	lsls	r3, r4, #1
 800121c:	e001      	b.n	8001222 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	4618      	mov	r0, r3
 8001224:	f00b f8ef 	bl	800c406 <_Znaj>
 8001228:	4603      	mov	r3, r0
 800122a:	461e      	mov	r6, r3
 800122c:	4635      	mov	r5, r6
 800122e:	1e63      	subs	r3, r4, #1
 8001230:	461c      	mov	r4, r3
 8001232:	2c00      	cmp	r4, #0
 8001234:	db05      	blt.n	8001242 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8001236:	4628      	mov	r0, r5
 8001238:	f7ff fe7c 	bl	8000f34 <_ZN10AdcChannelC1Ev>
 800123c:	3502      	adds	r5, #2
 800123e:	3c01      	subs	r4, #1
 8001240:	e7f7      	b.n	8001232 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d801      	bhi.n	8001254 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	e001      	b.n	8001258 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	4618      	mov	r0, r3
 800125a:	f00b f8d4 	bl	800c406 <_Znaj>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
					)) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800126c:	f7ff ff20 	bl	80010b0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8001270:	4604      	mov	r4, r0
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f9dc 	bl	8001638 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4619      	mov	r1, r3
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff ff40 	bl	800110c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 800128c:	4602      	mov	r2, r0
					)) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fec6 	bl	8001028 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2001      	movs	r0, #1
 80012a2:	f007 fdd8 	bl	8008e56 <osSemaphoreNew>
 80012a6:	4602      	mov	r2, r0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80012be:	461a      	mov	r2, r3
 80012c0:	f001 fe22 	bl	8002f08 <HAL_ADC_Start_DMA>
		update();
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f854 	bl	8001372 <_ZN19AdcModuleController6updateEv>
	}
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	3ffffffc 	.word	0x3ffffffc

080012d8 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 80012e0:	f7ff fee6 	bl	80010b0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f7ff ff29 	bl	8001144 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 fecc 	bl	8009094 <osSemaphoreGetCount>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fe27 	bl	8008f68 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <_ZN19AdcModuleControllerD1Ev+0x54>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4618      	mov	r0, r3
 8001328:	f00b f85c 	bl	800c3e4 <_ZdaPv>
		delete[] m_buffer;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <_ZN19AdcModuleControllerD1Ev+0x66>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f00b f853 	bl	800c3e4 <_ZdaPv>
	}
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d301      	bcc.n	8001360 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 800135c:	f001 f92e 	bl	80025bc <Error_Handler>
		}
		return m_channels + rank;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
	}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_ZN19AdcModuleController6updateEv>:

	void update() {
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f04f 31ff 	mov.w	r1, #4294967295
 8001382:	4618      	mov	r0, r3
 8001384:	f007 fdf0 	bl	8008f68 <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	d211      	bcs.n	80013ba <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	18d0      	adds	r0, r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fdd8 	bl	8000f62 <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e7e8      	b.n	800138c <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80013cc:	461a      	mov	r2, r3
 80013ce:	f001 fd9b 	bl	8002f08 <HAL_ADC_Start_DMA>
	}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7c1b      	ldrb	r3, [r3, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d103      	bne.n	80013f2 <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffc1 	bl	8001372 <_ZN19AdcModuleController6updateEv>
 80013f0:	e000      	b.n	80013f4 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 80013f2:	bf00      	nop
	}
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	4618      	mov	r0, r3
 800140e:	f007 fdfd 	bl	800900c <osSemaphoreRelease>
	}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	switch(module){
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d004      	beq.n	8001438 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800142e:	e007      	b.n	8001440 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8001430:	f000 f934 	bl	800169c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8001434:	4603      	mov	r3, r0
 8001436:	e008      	b.n	800144a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8001438:	f000 f966 	bl	8001708 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 800143c:	4603      	mov	r3, r0
 800143e:	e004      	b.n	800144a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 8001440:	f001 f8bc 	bl	80025bc <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8001444:	f000 f92a 	bl	800169c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8001448:	4603      	mov	r3, r0
	}
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN20AdcChannelControllerC1E9AdcModulej>:

class AdcChannelController {
public:
	AdcChannelController() : m_module(nullptr), m_channel(nullptr){
	}
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
			m_module(&_getChannelAdcModuleControllerRuntime(module)),
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f7ff ffdb 	bl	800141a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8001464:	4602      	mov	r2, r0
			m_channel(m_module->getChannelByRank(rank)) {
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff69 	bl	8001348 <_ZN19AdcModuleController16getChannelByRankEj>
 8001476:	4602      	mov	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
	}
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
		m_module->weakUpdate();
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffa1 	bl	80013da <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fd54 	bl	8000f4a <_ZN10AdcChannel3getEv>
 80014a2:	4603      	mov	r3, r0
	}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZN14PressureSensorC1E9AdcModulet>:
#include "AdcChannelController.hpp"

class PressureSensor {
public:

	explicit PressureSensor(AdcModule module, uint16_t rank) : m_adcChannel(module, rank){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffc6 	bl	8001452 <_ZN20AdcChannelControllerC1E9AdcModulej>

	}
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN14PressureSensor3getEv>:

	float get(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_adcChannel.get();
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ffd3 	bl	8001486 <_ZN20AdcChannelController3getEv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	817b      	strh	r3, [r7, #10]
		float pressure = c1 * avalue + c2;
 80014e4:	897b      	ldrh	r3, [r7, #10]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001540 <_ZN14PressureSensor3getEv+0x70>
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80014fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014fe:	edc7 7a03 	vstr	s15, [r7, #12]
		if(pressure < messageLowerLimit){
 8001502:	edd7 7a03 	vldr	s15, [r7, #12]
 8001506:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001544 <_ZN14PressureSensor3getEv+0x74>
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d501      	bpl.n	8001518 <_ZN14PressureSensor3getEv+0x48>
			pressure = messageLowerLimit;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <_ZN14PressureSensor3getEv+0x78>)
 8001516:	60fb      	str	r3, [r7, #12]
		}
		if(pressure > messageUpperLimit){
 8001518:	edd7 7a03 	vldr	s15, [r7, #12]
 800151c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800154c <_ZN14PressureSensor3getEv+0x7c>
 8001520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	dd01      	ble.n	800152e <_ZN14PressureSensor3getEv+0x5e>
			pressure = messageUpperLimit;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <_ZN14PressureSensor3getEv+0x80>)
 800152c:	60fb      	str	r3, [r7, #12]
		}
		return pressure;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	ee07 3a90 	vmov	s15, r3
	}
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	3bb00b01 	.word	0x3bb00b01
 8001544:	bff33333 	.word	0xbff33333
 8001548:	bff33333 	.word	0xbff33333
 800154c:	418f3333 	.word	0x418f3333
 8001550:	418f3333 	.word	0x418f3333

08001554 <main_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void main_entry(void *argv) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	GPIOWriteController piston(VALVE_GPIO_Port, VALVE_Pin);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001564:	4911      	ldr	r1, [pc, #68]	; (80015ac <main_entry+0x58>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fcc0 	bl	8000eec <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>
	PressureSensor pressure(ADC_MODULE2, 0);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff99 	bl	80014ac <_ZN14PressureSensorC1E9AdcModulet>
	piston.set();
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fcc8 	bl	8000f14 <_ZN19GPIOWriteController3setEv>
	while(true){
		float bar = pressure.get();
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ffa1 	bl	80014d0 <_ZN14PressureSensor3getEv>
 800158e:	ed87 0a07 	vstr	s0, [r7, #28]
		printf("pressure = %f\n",bar);
 8001592:	69f8      	ldr	r0, [r7, #28]
 8001594:	f7fe ffd8 	bl	8000548 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <main_entry+0x5c>)
 800159e:	f007 fac5 	bl	8008b2c <printf_>
		osDelay(1000);
 80015a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a6:	f007 fc3b 	bl	8008e20 <osDelay>
	}
 80015aa:	e7eb      	b.n	8001584 <main_entry+0x30>
 80015ac:	40020000 	.word	0x40020000
 80015b0:	0800f0a8 	.word	0x0800f0a8

080015b4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fd00 	bl	8000fc4 <_ZNSt14_Function_baseC1Ev>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	6839      	ldr	r1, [r7, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f8c0 	bl	8001764 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8dc 	bl	80017a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fd17 	bl	8001028 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 80015fa:	687b      	ldr	r3, [r7, #4]
      }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
      {
	if (_M_manager)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	4798      	blx	r3
	    _M_manager = nullptr;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
	  }
	return *this;
 800162e:	687b      	ldr	r3, [r7, #4]
      }
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fcbd 	bl	8000fc4 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 800164a:	463b      	mov	r3, r7
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f8d7 	bl	8001800 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00f      	beq.n	8001678 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001658:	687c      	ldr	r4, [r7, #4]
 800165a:	463b      	mov	r3, r7
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f8da 	bl	8001816 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8001662:	4603      	mov	r3, r0
 8001664:	4619      	mov	r1, r3
 8001666:	4620      	mov	r0, r4
 8001668:	f000 f8e0 	bl	800182c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 8001670:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 8001676:	609a      	str	r2, [r3, #8]
	  }
      }
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	08001851 	.word	0x08001851
 8001688:	0800187b 	.word	0x0800187b

0800168c <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
 8001690:	4801      	ldr	r0, [pc, #4]	; (8001698 <__tcf_1+0xc>)
 8001692:	f7ff fe21 	bl	80012d8 <_ZN19AdcModuleControllerD1Ev>
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000308 	.word	0x20000308

0800169c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f3bf 8f5b 	dmb	ish
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d014      	beq.n	80016e6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 80016be:	f00a fe93 	bl	800c3e8 <__cxa_guard_acquire>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 80016d2:	2100      	movs	r1, #0
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 80016d6:	f7ff fd8b 	bl	80011f0 <_ZN19AdcModuleControllerC1E9AdcModule>
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 80016dc:	f00a febb 	bl	800c456 <atexit>
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 80016e2:	f00a fe8d 	bl	800c400 <__cxa_guard_release>
	return instance;
 80016e6:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000324 	.word	0x20000324
 80016f0:	20000308 	.word	0x20000308
 80016f4:	0800168d 	.word	0x0800168d

080016f8 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4801      	ldr	r0, [pc, #4]	; (8001704 <__tcf_2+0xc>)
 80016fe:	f7ff fdeb 	bl	80012d8 <_ZN19AdcModuleControllerD1Ev>
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000328 	.word	0x20000328

08001708 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	f3bf 8f5b 	dmb	ish
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d014      	beq.n	8001752 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800172a:	f00a fe5d 	bl	800c3e8 <__cxa_guard_acquire>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800173e:	2101      	movs	r1, #1
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 8001742:	f7ff fd55 	bl	80011f0 <_ZN19AdcModuleControllerC1E9AdcModule>
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 8001748:	f00a fe85 	bl	800c456 <atexit>
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800174e:	f00a fe57 	bl	800c400 <__cxa_guard_release>
	return instance;
 8001752:	4b02      	ldr	r3, [pc, #8]	; (800175c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000344 	.word	0x20000344
 800175c:	20000328 	.word	0x20000328
 8001760:	080016f9 	.word	0x080016f9

08001764 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc27 	bl	8000fc4 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f000 f89e 	bl	80018b8 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00d      	beq.n	800179e <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	2202      	movs	r2, #2
 800178c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609a      	str	r2, [r3, #8]
    }
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f898 	bl	80018ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f103 0208 	add.w	r2, r3, #8
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3308      	adds	r3, #8
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f000 f8c1 	bl	8001952 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f103 020c 	add.w	r2, r3, #12
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	330c      	adds	r3, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f000 f8e2 	bl	80019a6 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	  { return true; }
 8001808:	2301      	movs	r3, #1
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8001836:	6838      	ldr	r0, [r7, #0]
 8001838:	f7ff ffed 	bl	8001816 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800183c:	4603      	mov	r3, r0
 800183e:	4622      	mov	r2, r4
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8ce 	bl	80019e4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8db 	bl	8001a16 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8001860:	4604      	mov	r4, r0
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7ff ffc1 	bl	80017ea <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f000 f8e3 	bl	8001a38 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8001872:	bf00      	nop
      }
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}

0800187a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800187a:	b590      	push	{r4, r7, lr}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	4613      	mov	r3, r2
 8001886:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d109      	bne.n	80018a2 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f8e8 	bl	8001a64 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8001894:	4604      	mov	r4, r0
 8001896:	68b8      	ldr	r0, [r7, #8]
 8001898:	f000 f8bd 	bl	8001a16 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800189c:	4603      	mov	r3, r0
 800189e:	6023      	str	r3, [r4, #0]
	    break;
 80018a0:	e005      	b.n	80018ae <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f8e7 	bl	8001a7c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 80018ae:	2300      	movs	r3, #0
      }
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb9f 	bl	8001006 <_ZNKSt14_Function_base8_M_emptyEv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffed 	bl	80018d8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80018fe:	4602      	mov	r2, r0
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001908:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f7ff ffe3 	bl	80018d8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001912:	4602      	mov	r2, r0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ffd8 	bl	80018d8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001928:	4602      	mov	r2, r0
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001930:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffed 	bl	800193c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001962:	4603      	mov	r3, r0
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f7ff ffe7 	bl	800193c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800196e:	4603      	mov	r3, r0
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ffde 	bl	800193c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001980:	4603      	mov	r3, r0
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	601a      	str	r2, [r3, #0]
    }
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffed 	bl	8001990 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80019b6:	4603      	mov	r3, r0
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f7ff ffe7 	bl	8001990 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80019c2:	4603      	mov	r3, r0
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ffde 	bl	8001990 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80019d4:	4603      	mov	r3, r0
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	601a      	str	r2, [r3, #0]
    }
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f7ff ff10 	bl	8001816 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80019f6:	4604      	mov	r4, r0
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff facd 	bl	8000f98 <_ZNSt9_Any_data9_M_accessEv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	2004      	movs	r0, #4
 8001a04:	f7ff fabc 	bl	8000f80 <_ZnwjPv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}

08001a16 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f857 	bl	8001ad2 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8001a24:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f85f 	bl	8001aea <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	bf00      	nop
	}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f85c 	bl	8001b00 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	6838      	ldr	r0, [r7, #0]
 8001a4c:	f7ff fecd 	bl	80017ea <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4621      	mov	r1, r4
 8001a56:	4628      	mov	r0, r5
 8001a58:	f000 f85d 	bl	8001b16 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bdb0      	pop	{r4, r5, r7, pc}

08001a64 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fa93 	bl	8000f98 <_ZNSt9_Any_data9_M_accessEv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d016      	beq.n	8001abe <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	dc19      	bgt.n	8001ac8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d002      	beq.n	8001a9e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d00a      	beq.n	8001ab2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8001a9c:	e014      	b.n	8001ac8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ffe0 	bl	8001a64 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	68b8      	ldr	r0, [r7, #8]
 8001aa8:	f7ff ffb5 	bl	8001a16 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8001aac:	4603      	mov	r3, r0
 8001aae:	6023      	str	r3, [r4, #0]
	      break;
 8001ab0:	e00a      	b.n	8001ac8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8001ab2:	462a      	mov	r2, r5
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f844 	bl	8001b44 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8001abc:	e004      	b.n	8001ac8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8001abe:	4621      	mov	r1, r4
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f858 	bl	8001b76 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001ac6:	bf00      	nop
	  return false;
 8001ac8:	2300      	movs	r3, #0
	}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}

08001ad2 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fa67 	bl	8000fae <_ZNKSt9_Any_data9_M_accessEv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	7338      	strb	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001b22:	68b8      	ldr	r0, [r7, #8]
 8001b24:	f7ff ffec 	bl	8001b00 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8001b28:	4604      	mov	r4, r0
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fe5d 	bl	80017ea <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8001b30:	4603      	mov	r3, r0
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	4620      	mov	r0, r4
 8001b38:	f7ff fb46 	bl	80011c8 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}

08001b44 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f7ff ffbe 	bl	8001ad2 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8001b56:	4604      	mov	r4, r0
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fa1d 	bl	8000f98 <_ZNSt9_Any_data9_M_accessEv>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4619      	mov	r1, r3
 8001b62:	2004      	movs	r0, #4
 8001b64:	f7ff fa0c 	bl	8000f80 <_ZnwjPv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	6013      	str	r3, [r2, #0]
	}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}

08001b76 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f804 	bl	8001b8e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff f9fe 	bl	8000f98 <_ZNSt9_Any_data9_M_accessEv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bbc:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <MX_ADC1_Init+0xfc>)
 8001bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc8:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bda:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bea:	4a2f      	ldr	r2, [pc, #188]	; (8001ca8 <MX_ADC1_Init+0x100>)
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c08:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001c0a:	f001 f939 	bl	8002e80 <HAL_ADC_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c14:	f000 fcd2 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c18:	230a      	movs	r3, #10
 8001c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c20:	2307      	movs	r3, #7
 8001c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001c2a:	f001 fa87 	bl	800313c <HAL_ADC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c34:	f000 fcc2 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001c40:	2305      	movs	r3, #5
 8001c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001c4a:	f001 fa77 	bl	800313c <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001c54:	f000 fcb2 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c60:	2307      	movs	r3, #7
 8001c62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001c6a:	f001 fa67 	bl	800313c <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001c74:	f000 fca2 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001c78:	2311      	movs	r3, #17
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001c80:	2305      	movs	r3, #5
 8001c82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_ADC1_Init+0xf8>)
 8001c8a:	f001 fa57 	bl	800313c <HAL_ADC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001c94:	f000 fc92 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000348 	.word	0x20000348
 8001ca4:	40012000 	.word	0x40012000
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cc0:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <MX_ADC2_Init+0x9c>)
 8001cc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <MX_ADC2_Init+0xa0>)
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001d0e:	f001 f8b7 	bl	8002e80 <HAL_ADC_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001d18:	f000 fc50 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001d24:	2302      	movs	r3, #2
 8001d26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_ADC2_Init+0x98>)
 8001d2e:	f001 fa05 	bl	800313c <HAL_ADC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001d38:	f000 fc40 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000390 	.word	0x20000390
 8001d48:	40012100 	.word	0x40012100
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6b      	ldr	r2, [pc, #428]	; (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d157      	bne.n	8001e22 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a62      	ldr	r2, [pc, #392]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8001daa:	2305      	movs	r3, #5
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4859      	ldr	r0, [pc, #356]	; (8001f24 <HAL_ADC_MspInit+0x1d4>)
 8001dbe:	f002 fc91 	bl	80046e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001dc4:	4a59      	ldr	r2, [pc, #356]	; (8001f2c <HAL_ADC_MspInit+0x1dc>)
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dc8:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001dec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e04:	4848      	ldr	r0, [pc, #288]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001e06:	f002 f86b 	bl	8003ee0 <HAL_DMA_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001e10:	f000 fbd4 	bl	80025bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1a:	4a43      	ldr	r2, [pc, #268]	; (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001e20:	e077      	b.n	8001f12 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <HAL_ADC_MspInit+0x1e0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d172      	bne.n	8001f12 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8001e80:	2305      	movs	r3, #5
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e84:	2303      	movs	r3, #3
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	4824      	ldr	r0, [pc, #144]	; (8001f24 <HAL_ADC_MspInit+0x1d4>)
 8001e94:	f002 fc26 	bl	80046e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PRESSURE_0_Pin;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PRESSURE_0_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4822      	ldr	r0, [pc, #136]	; (8001f34 <HAL_ADC_MspInit+0x1e4>)
 8001eac:	f002 fc1a 	bl	80046e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <HAL_ADC_MspInit+0x1ec>)
 8001eb4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eee:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001ef8:	f001 fff2 	bl	8003ee0 <HAL_DMA_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8001f02:	f000 fb5b 	bl	80025bc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_ADC_MspInit+0x1e8>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f12:	bf00      	nop
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	200003d8 	.word	0x200003d8
 8001f2c:	40026410 	.word	0x40026410
 8001f30:	40012100 	.word	0x40012100
 8001f34:	40020000 	.word	0x40020000
 8001f38:	20000438 	.word	0x20000438
 8001f3c:	40026440 	.word	0x40026440

08001f40 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <MX_CAN1_Init+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f5e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001f62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f6a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f92:	f001 fb73 	bl	800367c <HAL_CAN_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001f9c:	f000 fb0e 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000498 	.word	0x20000498
 8001fa8:	40006400 	.word	0x40006400

08001fac <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <MX_CAN2_Init+0x68>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fb8:	2203      	movs	r2, #3
 8001fba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fca:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001fce:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fd6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_CAN2_Init+0x64>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_CAN2_Init+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_CAN2_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <MX_CAN2_Init+0x64>)
 8001ffe:	f001 fb3d 	bl	800367c <HAL_CAN_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002008:	f000 fad8 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200004c0 	.word	0x200004c0
 8002014:	40006800 	.word	0x40006800

08002018 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_CAN_MspInit+0x168>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d145      	bne.n	80020c6 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_CAN_MspInit+0x16c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	4a50      	ldr	r2, [pc, #320]	; (8002184 <HAL_CAN_MspInit+0x16c>)
 8002042:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002044:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_CAN_MspInit+0x16c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10d      	bne.n	8002068 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_CAN_MspInit+0x170>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_CAN_MspInit+0x170>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a45      	ldr	r2, [pc, #276]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_CAN_MspInit+0x170>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002084:	2303      	movs	r3, #3
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002094:	2309      	movs	r3, #9
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	483b      	ldr	r0, [pc, #236]	; (800218c <HAL_CAN_MspInit+0x174>)
 80020a0:	f002 fb20 	bl	80046e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2105      	movs	r1, #5
 80020a8:	2014      	movs	r0, #20
 80020aa:	f001 fed3 	bl	8003e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020ae:	2014      	movs	r0, #20
 80020b0:	f001 feec 	bl	8003e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2105      	movs	r1, #5
 80020b8:	2015      	movs	r0, #21
 80020ba:	f001 fecb 	bl	8003e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80020be:	2015      	movs	r0, #21
 80020c0:	f001 fee4 	bl	8003e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80020c4:	e057      	b.n	8002176 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_CAN_MspInit+0x178>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d152      	bne.n	8002176 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_CAN_MspInit+0x170>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <HAL_CAN_MspInit+0x170>)
 80020da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_CAN_MspInit+0x170>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_CAN_MspInit+0x16c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_CAN_MspInit+0x16c>)
 80020f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_CAN_MspInit+0x16c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10d      	bne.n	800211a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_CAN_MspInit+0x170>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_CAN_MspInit+0x170>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002136:	2360      	movs	r3, #96	; 0x60
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002146:	2309      	movs	r3, #9
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4810      	ldr	r0, [pc, #64]	; (8002194 <HAL_CAN_MspInit+0x17c>)
 8002152:	f002 fac7 	bl	80046e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2105      	movs	r1, #5
 800215a:	2040      	movs	r0, #64	; 0x40
 800215c:	f001 fe7a 	bl	8003e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002160:	2040      	movs	r0, #64	; 0x40
 8002162:	f001 fe93 	bl	8003e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2105      	movs	r1, #5
 800216a:	2041      	movs	r0, #65	; 0x41
 800216c:	f001 fe72 	bl	8003e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002170:	2041      	movs	r0, #65	; 0x41
 8002172:	f001 fe8b 	bl	8003e8c <HAL_NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3730      	adds	r7, #48	; 0x30
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40006400 	.word	0x40006400
 8002184:	200004e8 	.word	0x200004e8
 8002188:	40023800 	.word	0x40023800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40006800 	.word	0x40006800
 8002194:	40020400 	.word	0x40020400

08002198 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_CRC_Init+0x20>)
 800219e:	4a07      	ldr	r2, [pc, #28]	; (80021bc <MX_CRC_Init+0x24>)
 80021a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <MX_CRC_Init+0x20>)
 80021a4:	f001 fe80 	bl	8003ea8 <HAL_CRC_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80021ae:	f000 fa05 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200004ec 	.word	0x200004ec
 80021bc:	40023000 	.word	0x40023000

080021c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_CRC_MspInit+0x3c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10d      	bne.n	80021ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_CRC_MspInit+0x40>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_CRC_MspInit+0x40>)
 80021dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_CRC_MspInit+0x40>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023000 	.word	0x40023000
 8002200:	40023800 	.word	0x40023800

08002204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_DMA_Init+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <MX_DMA_Init+0x88>)
 8002214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_DMA_Init+0x88>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <MX_DMA_Init+0x88>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <MX_DMA_Init+0x88>)
 8002230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_DMA_Init+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	2010      	movs	r0, #16
 8002248:	f001 fe04 	bl	8003e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800224c:	2010      	movs	r0, #16
 800224e:	f001 fe1d 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2105      	movs	r1, #5
 8002256:	2011      	movs	r0, #17
 8002258:	f001 fdfc 	bl	8003e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800225c:	2011      	movs	r0, #17
 800225e:	f001 fe15 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2105      	movs	r1, #5
 8002266:	2038      	movs	r0, #56	; 0x38
 8002268:	f001 fdf4 	bl	8003e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800226c:	2038      	movs	r0, #56	; 0x38
 800226e:	f001 fe0d 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2105      	movs	r1, #5
 8002276:	203a      	movs	r0, #58	; 0x3a
 8002278:	f001 fdec 	bl	8003e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800227c:	203a      	movs	r0, #58	; 0x3a
 800227e:	f001 fe05 	bl	8003e8c <HAL_NVIC_EnableIRQ>

}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <MX_FREERTOS_Init+0x38>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2010      	movs	r0, #16
 80022de:	f006 fef9 	bl	80090d4 <osMessageQueueNew>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <MX_FREERTOS_Init+0x3c>)
 80022e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <MX_FREERTOS_Init+0x40>)
 80022ea:	2100      	movs	r1, #0
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <MX_FREERTOS_Init+0x44>)
 80022ee:	f006 fd05 	bl	8008cfc <osThreadNew>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a09      	ldr	r2, [pc, #36]	; (800231c <MX_FREERTOS_Init+0x48>)
 80022f6:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <MX_FREERTOS_Init+0x4c>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <MX_FREERTOS_Init+0x50>)
 80022fe:	f006 fcfd 	bl	8008cfc <osThreadNew>
 8002302:	4603      	mov	r3, r0
 8002304:	4a08      	ldr	r2, [pc, #32]	; (8002328 <MX_FREERTOS_Init+0x54>)
 8002306:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	0800f178 	.word	0x0800f178
 8002310:	200007bc 	.word	0x200007bc
 8002314:	0800f130 	.word	0x0800f130
 8002318:	0800232d 	.word	0x0800232d
 800231c:	200004f4 	.word	0x200004f4
 8002320:	0800f154 	.word	0x0800f154
 8002324:	08001555 	.word	0x08001555
 8002328:	200007b8 	.word	0x200007b8

0800232c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002334:	2001      	movs	r0, #1
 8002336:	f006 fd73 	bl	8008e20 <osDelay>
 800233a:	e7fb      	b.n	8002334 <StartDefaultTask+0x8>

0800233c <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b45      	ldr	r3, [pc, #276]	; (800246c <MX_GPIO_Init+0x130>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a44      	ldr	r2, [pc, #272]	; (800246c <MX_GPIO_Init+0x130>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b42      	ldr	r3, [pc, #264]	; (800246c <MX_GPIO_Init+0x130>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <MX_GPIO_Init+0x130>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <MX_GPIO_Init+0x130>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <MX_GPIO_Init+0x130>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <MX_GPIO_Init+0x130>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a36      	ldr	r2, [pc, #216]	; (800246c <MX_GPIO_Init+0x130>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <MX_GPIO_Init+0x130>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <MX_GPIO_Init+0x130>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a2f      	ldr	r2, [pc, #188]	; (800246c <MX_GPIO_Init+0x130>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <MX_GPIO_Init+0x130>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <MX_GPIO_Init+0x130>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a28      	ldr	r2, [pc, #160]	; (800246c <MX_GPIO_Init+0x130>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <MX_GPIO_Init+0x130>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|DOUT2_Pin, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	f640 0102 	movw	r1, #2050	; 0x802
 80023e4:	4822      	ldr	r0, [pc, #136]	; (8002470 <MX_GPIO_Init+0x134>)
 80023e6:	f002 fb19 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_RESET);
 80023ea:	2200      	movs	r2, #0
 80023ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f0:	4820      	ldr	r0, [pc, #128]	; (8002474 <MX_GPIO_Init+0x138>)
 80023f2:	f002 fb13 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80023f6:	2305      	movs	r3, #5
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fa:	2303      	movs	r3, #3
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	481b      	ldr	r0, [pc, #108]	; (8002478 <MX_GPIO_Init+0x13c>)
 800240a:	f002 f96b 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|DOUT2_Pin;
 800240e:	f640 0302 	movw	r3, #2050	; 0x802
 8002412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4812      	ldr	r0, [pc, #72]	; (8002470 <MX_GPIO_Init+0x134>)
 8002428:	f002 f95c 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VALVE_Pin;
 800242c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VALVE_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <MX_GPIO_Init+0x138>)
 8002446:	f002 f94d 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 800244a:	2318      	movs	r3, #24
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_GPIO_Init+0x140>)
 800245e:	f002 f941 	bl	80046e4 <HAL_GPIO_Init>

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40020400 	.word	0x40020400
 8002474:	40020000 	.word	0x40020000
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002484:	f000 fcba 	bl	8002dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002488:	f000 f81c 	bl	80024c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248c:	f7ff ff56 	bl	800233c <MX_GPIO_Init>
  MX_DMA_Init();
 8002490:	f7ff feb8 	bl	8002204 <MX_DMA_Init>
  MX_ADC1_Init();
 8002494:	f7ff fb88 	bl	8001ba8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002498:	f7ff fd52 	bl	8001f40 <MX_CAN1_Init>
  MX_CAN2_Init();
 800249c:	f7ff fd86 	bl	8001fac <MX_CAN2_Init>
  MX_CRC_Init();
 80024a0:	f7ff fe7a 	bl	8002198 <MX_CRC_Init>
  MX_RNG_Init();
 80024a4:	f000 f890 	bl	80025c8 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80024a8:	f000 fb9e 	bl	8002be8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80024ac:	f000 fab4 	bl	8002a18 <MX_TIM4_Init>
  MX_ADC2_Init();
 80024b0:	f7ff fbfc 	bl	8001cac <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80024b4:	f006 fbd8 	bl	8008c68 <osKernelInitialize>
  MX_FREERTOS_Init();
 80024b8:	f7ff ff0c 	bl	80022d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80024bc:	f006 fbf8 	bl	8008cb0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <main+0x40>
	...

080024c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b094      	sub	sp, #80	; 0x50
 80024c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	2230      	movs	r2, #48	; 0x30
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00a f908 	bl	800c6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <SystemClock_Config+0xcc>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <SystemClock_Config+0xcc>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6413      	str	r3, [r2, #64]	; 0x40
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <SystemClock_Config+0xcc>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <SystemClock_Config+0xd0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a21      	ldr	r2, [pc, #132]	; (8002594 <SystemClock_Config+0xd0>)
 800250e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <SystemClock_Config+0xd0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002520:	2301      	movs	r3, #1
 8002522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252a:	2302      	movs	r3, #2
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800252e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002534:	2308      	movs	r3, #8
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002538:	23a8      	movs	r3, #168	; 0xa8
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800253c:	2302      	movs	r3, #2
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002540:	2307      	movs	r3, #7
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002544:	f107 0320 	add.w	r3, r7, #32
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fa81 	bl	8004a50 <HAL_RCC_OscConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002554:	f000 f832 	bl	80025bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002558:	230f      	movs	r3, #15
 800255a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255c:	2302      	movs	r3, #2
 800255e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002564:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	2105      	movs	r1, #5
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fce2 	bl	8004f40 <HAL_RCC_ClockConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002582:	f000 f81b 	bl	80025bc <Error_Handler>
  }
}
 8002586:	bf00      	nop
 8002588:	3750      	adds	r7, #80	; 0x50
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000

08002598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025aa:	f000 fc49 	bl	8002e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000

080025bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c0:	b672      	cpsid	i
}
 80025c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <Error_Handler+0x8>
	...

080025c8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_RNG_Init+0x20>)
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <MX_RNG_Init+0x24>)
 80025d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_RNG_Init+0x20>)
 80025d4:	f002 ff04 	bl	80053e0 <HAL_RNG_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80025de:	f7ff ffed 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200007c0 	.word	0x200007c0
 80025ec:	50060800 	.word	0x50060800

080025f0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	; (800262c <HAL_RNG_MspInit+0x3c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10d      	bne.n	800261e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RNG_MspInit+0x40>)
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RNG_MspInit+0x40>)
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	6353      	str	r3, [r2, #52]	; 0x34
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RNG_MspInit+0x40>)
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	50060800 	.word	0x50060800
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_MspInit+0x54>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_MspInit+0x54>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_MspInit+0x54>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_MspInit+0x54>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_MspInit+0x54>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_MspInit+0x54>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	210f      	movs	r1, #15
 8002676:	f06f 0001 	mvn.w	r0, #1
 800267a:	f001 fbeb 	bl	8003e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_InitTick+0xd4>)
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <HAL_InitTick+0xd4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6453      	str	r3, [r2, #68]	; 0x44
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_InitTick+0xd4>)
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026b8:	f107 020c 	add.w	r2, r7, #12
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fe5a 	bl	800537c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026c8:	f002 fe44 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	4a23      	ldr	r2, [pc, #140]	; (8002764 <HAL_InitTick+0xd8>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	3b01      	subs	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <HAL_InitTick+0xdc>)
 80026e2:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_InitTick+0xe0>)
 80026e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_InitTick+0xdc>)
 80026e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026ee:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_InitTick+0xdc>)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_InitTick+0xdc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_InitTick+0xdc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_InitTick+0xdc>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002706:	4818      	ldr	r0, [pc, #96]	; (8002768 <HAL_InitTick+0xdc>)
 8002708:	f002 fe94 	bl	8005434 <HAL_TIM_Base_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11b      	bne.n	8002752 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <HAL_InitTick+0xdc>)
 800271c:	f002 feda 	bl	80054d4 <HAL_TIM_Base_Start_IT>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800272a:	2b00      	cmp	r3, #0
 800272c:	d111      	bne.n	8002752 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800272e:	2019      	movs	r0, #25
 8002730:	f001 fbac 	bl	8003e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	d808      	bhi.n	800274c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800273a:	2200      	movs	r2, #0
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	2019      	movs	r0, #25
 8002740:	f001 fb88 	bl	8003e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_InitTick+0xe4>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e002      	b.n	8002752 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002756:	4618      	mov	r0, r3
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	431bde83 	.word	0x431bde83
 8002768:	200007d0 	.word	0x200007d0
 800276c:	40010000 	.word	0x40010000
 8002770:	20000004 	.word	0x20000004

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x4>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <DMA1_Stream5_IRQHandler+0x10>)
 80027a6:	f001 fd33 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000908 	.word	0x20000908

080027b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <DMA1_Stream6_IRQHandler+0x10>)
 80027ba:	f001 fd29 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200008a8 	.word	0x200008a8

080027c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <CAN1_RX0_IRQHandler+0x10>)
 80027ce:	f001 f850 	bl	8003872 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000498 	.word	0x20000498

080027dc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <CAN1_RX1_IRQHandler+0x10>)
 80027e2:	f001 f846 	bl	8003872 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000498 	.word	0x20000498

080027f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027f6:	f002 ff36 	bl	8005666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200007d0 	.word	0x200007d0

08002804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <USART2_IRQHandler+0x10>)
 800280a:	f003 fdaf 	bl	800636c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000864 	.word	0x20000864

08002818 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <DMA2_Stream0_IRQHandler+0x10>)
 800281e:	f001 fcf7 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200003d8 	.word	0x200003d8

0800282c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <DMA2_Stream2_IRQHandler+0x10>)
 8002832:	f001 fced 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000438 	.word	0x20000438

08002840 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <CAN2_RX0_IRQHandler+0x10>)
 8002846:	f001 f814 	bl	8003872 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200004c0 	.word	0x200004c0

08002854 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002858:	4802      	ldr	r0, [pc, #8]	; (8002864 <CAN2_RX1_IRQHandler+0x10>)
 800285a:	f001 f80a 	bl	8003872 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200004c0 	.word	0x200004c0

08002868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return 1;
 800286c:	2301      	movs	r3, #1
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_kill>:

int _kill(int pid, int sig)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002882:	f009 fdef 	bl	800c464 <__errno>
 8002886:	4603      	mov	r3, r0
 8002888:	2216      	movs	r2, #22
 800288a:	601a      	str	r2, [r3, #0]
  return -1;
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_exit>:

void _exit (int status)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ffe7 	bl	8002878 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028aa:	e7fe      	b.n	80028aa <_exit+0x12>

080028ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e00a      	b.n	80028d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028be:	f3af 8000 	nop.w
 80028c2:	4601      	mov	r1, r0
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	60ba      	str	r2, [r7, #8]
 80028ca:	b2ca      	uxtb	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dbf0      	blt.n	80028be <_read+0x12>
  }

  return len;
 80028dc:	687b      	ldr	r3, [r7, #4]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e009      	b.n	800290c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	dbf1      	blt.n	80028f8 <_write+0x12>
  }
  return len;
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_close>:

int _close(int file)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002946:	605a      	str	r2, [r3, #4]
  return 0;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_isatty>:

int _isatty(int file)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <_sbrk+0x5c>)
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <_sbrk+0x60>)
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <_sbrk+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <_sbrk+0x64>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <_sbrk+0x68>)
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d207      	bcs.n	80029c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b8:	f009 fd54 	bl	800c464 <__errno>
 80029bc:	4603      	mov	r3, r0
 80029be:	220c      	movs	r2, #12
 80029c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e009      	b.n	80029dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <_sbrk+0x64>)
 80029d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20020000 	.word	0x20020000
 80029e8:	00000800 	.word	0x00000800
 80029ec:	20000818 	.word	0x20000818
 80029f0:	20006938 	.word	0x20006938

080029f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <SystemInit+0x20>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <SystemInit+0x20>)
 8002a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a48:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a4a:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <MX_TIM4_Init+0x114>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a50:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a5e:	22fe      	movs	r2, #254	; 0xfe
 8002a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a6e:	482e      	ldr	r0, [pc, #184]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a70:	f002 fce0 	bl	8005434 <HAL_TIM_Base_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002a7a:	f7ff fd9f 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4827      	ldr	r0, [pc, #156]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a8c:	f002 ffb6 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002a96:	f7ff fd91 	bl	80025bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a9a:	4823      	ldr	r0, [pc, #140]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002a9c:	f002 fd8a 	bl	80055b4 <HAL_TIM_PWM_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002aa6:	f7ff fd89 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	481b      	ldr	r0, [pc, #108]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002aba:	f003 fb79 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002ac4:	f7ff fd7a 	bl	80025bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac8:	2360      	movs	r3, #96	; 0x60
 8002aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2200      	movs	r2, #0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4812      	ldr	r0, [pc, #72]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002ae0:	f002 feca 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002aea:	f7ff fd67 	bl	80025bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2204      	movs	r2, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002af6:	f002 febf 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002b00:	f7ff fd5c 	bl	80025bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2208      	movs	r2, #8
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002b0c:	f002 feb4 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002b16:	f7ff fd51 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b1a:	4803      	ldr	r0, [pc, #12]	; (8002b28 <MX_TIM4_Init+0x110>)
 8002b1c:	f000 f82a 	bl	8002b74 <HAL_TIM_MspPostInit>

}
 8002b20:	bf00      	nop
 8002b22:	3738      	adds	r7, #56	; 0x38
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000081c 	.word	0x2000081c
 8002b2c:	40000800 	.word	0x40000800

08002b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_TIM_Base_MspInit+0x3c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10d      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_TIM_Base_MspInit+0x40>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_TIM_Base_MspInit+0x40>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_TIM_Base_MspInit+0x40>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_TIM_MspPostInit+0x68>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11e      	bne.n	8002bd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_TIM_MspPostInit+0x6c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8002bb2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <HAL_TIM_MspPostInit+0x70>)
 8002bd0:	f001 fd88 	bl	80046e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020c00 	.word	0x40020c00

08002be8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <MX_USART2_UART_Init+0x4c>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002bf4:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <MX_USART2_UART_Init+0x50>)
 8002bf6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002c0c:	220c      	movs	r2, #12
 8002c0e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <MX_USART2_UART_Init+0x48>)
 8002c1e:	f003 fb57 	bl	80062d0 <HAL_UART_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002c28:	f7ff fcc8 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000864 	.word	0x20000864
 8002c34:	40004400 	.word	0x40004400
 8002c38:	001e8480 	.word	0x001e8480

08002c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4c      	ldr	r2, [pc, #304]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f040 8091 	bne.w	8002d82 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a49      	ldr	r2, [pc, #292]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8002c98:	2360      	movs	r3, #96	; 0x60
 8002c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4838      	ldr	r0, [pc, #224]	; (8002d94 <HAL_UART_MspInit+0x158>)
 8002cb4:	f001 fd16 	bl	80046e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cba:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <HAL_UART_MspInit+0x160>)
 8002cbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cc4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cec:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002cf8:	4827      	ldr	r0, [pc, #156]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002cfa:	f001 f8f1 	bl	8003ee0 <HAL_DMA_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d04:	f7ff fc5a 	bl	80025bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d16:	4a23      	ldr	r2, [pc, #140]	; (8002da4 <HAL_UART_MspInit+0x168>)
 8002d18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d48:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d56:	4812      	ldr	r0, [pc, #72]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d58:	f001 f8c2 	bl	8003ee0 <HAL_DMA_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002d62:	f7ff fc2b 	bl	80025bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2105      	movs	r1, #5
 8002d76:	2026      	movs	r0, #38	; 0x26
 8002d78:	f001 f86c 	bl	8003e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d7c:	2026      	movs	r0, #38	; 0x26
 8002d7e:	f001 f885 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d82:	bf00      	nop
 8002d84:	3728      	adds	r7, #40	; 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40004400 	.word	0x40004400
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	200008a8 	.word	0x200008a8
 8002d9c:	400260a0 	.word	0x400260a0
 8002da0:	20000908 	.word	0x20000908
 8002da4:	40026088 	.word	0x40026088

08002da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dae:	490e      	ldr	r1, [pc, #56]	; (8002de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db4:	e002      	b.n	8002dbc <LoopCopyDataInit>

08002db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dba:	3304      	adds	r3, #4

08002dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc0:	d3f9      	bcc.n	8002db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc4:	4c0b      	ldr	r4, [pc, #44]	; (8002df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc8:	e001      	b.n	8002dce <LoopFillZerobss>

08002dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dcc:	3204      	adds	r2, #4

08002dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd0:	d3fb      	bcc.n	8002dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd2:	f7ff fe0f 	bl	80029f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f009 fc41 	bl	800c65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dda:	f7ff fb51 	bl	8002480 <main>
  bx  lr    
 8002dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002dec:	0800f5ec 	.word	0x0800f5ec
  ldr r2, =_sbss
 8002df0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002df4:	20006938 	.word	0x20006938

08002df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC_IRQHandler>
	...

08002dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <HAL_Init+0x40>)
 8002e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_Init+0x40>)
 8002e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_Init+0x40>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f001 f80a 	bl	8003e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7ff fc2e 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e30:	f7ff fc00 	bl	8002634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00

08002e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x20>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x24>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_IncTick+0x24>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000008 	.word	0x20000008
 8002e64:	20000968 	.word	0x20000968

08002e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_GetTick+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000968 	.word	0x20000968

08002e80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e033      	b.n	8002efe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe ff56 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec6:	f023 0302 	bic.w	r3, r3, #2
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa54 	bl	8003380 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
 8002eee:	e001      	b.n	8002ef4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Start_DMA+0x1e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0e9      	b.n	80030fa <HAL_ADC_Start_DMA+0x1f2>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d018      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4c:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_ADC_Start_DMA+0x1fc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <HAL_ADC_Start_DMA+0x200>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9a      	lsrs	r2, r3, #18
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7c:	d107      	bne.n	8002f8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 80a1 	bne.w	80030e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fdc:	d106      	bne.n	8002fec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f023 0206 	bic.w	r2, r3, #6
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
 8002fea:	e002      	b.n	8002ff2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_ADC_Start_DMA+0x204>)
 8002ffc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4a43      	ldr	r2, [pc, #268]	; (8003110 <HAL_ADC_Start_DMA+0x208>)
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a42      	ldr	r2, [pc, #264]	; (8003114 <HAL_ADC_Start_DMA+0x20c>)
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	4a41      	ldr	r2, [pc, #260]	; (8003118 <HAL_ADC_Start_DMA+0x210>)
 8003014:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800301e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800302e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	334c      	adds	r3, #76	; 0x4c
 800304a:	4619      	mov	r1, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f000 fff4 	bl	800403c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12a      	bne.n	80030b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2d      	ldr	r2, [pc, #180]	; (800311c <HAL_ADC_Start_DMA+0x214>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d015      	beq.n	8003096 <HAL_ADC_Start_DMA+0x18e>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <HAL_ADC_Start_DMA+0x218>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d105      	bne.n	8003080 <HAL_ADC_Start_DMA+0x178>
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_ADC_Start_DMA+0x204>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_ADC_Start_DMA+0x21c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d136      	bne.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_ADC_Start_DMA+0x204>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d130      	bne.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d129      	bne.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e020      	b.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_ADC_Start_DMA+0x214>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d11b      	bne.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d114      	bne.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	e00b      	b.n	80030f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0210 	orr.w	r2, r3, #16
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000
 8003108:	431bde83 	.word	0x431bde83
 800310c:	40012300 	.word	0x40012300
 8003110:	08003579 	.word	0x08003579
 8003114:	08003633 	.word	0x08003633
 8003118:	0800364f 	.word	0x0800364f
 800311c:	40012000 	.word	0x40012000
 8003120:	40012100 	.word	0x40012100
 8003124:	40012200 	.word	0x40012200

08003128 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1c>
 8003154:	2302      	movs	r3, #2
 8003156:	e105      	b.n	8003364 <HAL_ADC_ConfigChannel+0x228>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d925      	bls.n	80031b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68d9      	ldr	r1, [r3, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	3b1e      	subs	r3, #30
 800317e:	2207      	movs	r2, #7
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43da      	mvns	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	400a      	ands	r2, r1
 800318c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68d9      	ldr	r1, [r3, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	4603      	mov	r3, r0
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4403      	add	r3, r0
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	e022      	b.n	80031fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	2207      	movs	r2, #7
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	400a      	ands	r2, r1
 80031d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4403      	add	r3, r0
 80031f0:	409a      	lsls	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d824      	bhi.n	800324c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b05      	subs	r3, #5
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	400a      	ands	r2, r1
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b05      	subs	r3, #5
 800323e:	fa00 f203 	lsl.w	r2, r0, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	635a      	str	r2, [r3, #52]	; 0x34
 800324a:	e04c      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d824      	bhi.n	800329e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	3b23      	subs	r3, #35	; 0x23
 8003266:	221f      	movs	r2, #31
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43da      	mvns	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	400a      	ands	r2, r1
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	3b23      	subs	r3, #35	; 0x23
 8003290:	fa00 f203 	lsl.w	r2, r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
 800329c:	e023      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b41      	subs	r3, #65	; 0x41
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b41      	subs	r3, #65	; 0x41
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e6:	4b22      	ldr	r3, [pc, #136]	; (8003370 <HAL_ADC_ConfigChannel+0x234>)
 80032e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_ADC_ConfigChannel+0x238>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1cc>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_ADC_ConfigChannel+0x238>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d123      	bne.n	800335a <HAL_ADC_ConfigChannel+0x21e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d003      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x1e6>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b11      	cmp	r3, #17
 8003320:	d11b      	bne.n	800335a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d111      	bne.n	800335a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_ADC_ConfigChannel+0x23c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a10      	ldr	r2, [pc, #64]	; (800337c <HAL_ADC_ConfigChannel+0x240>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9a      	lsrs	r2, r3, #18
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800334c:	e002      	b.n	8003354 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012300 	.word	0x40012300
 8003374:	40012000 	.word	0x40012000
 8003378:	20000000 	.word	0x20000000
 800337c:	431bde83 	.word	0x431bde83

08003380 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003388:	4b79      	ldr	r3, [pc, #484]	; (8003570 <ADC_Init+0x1f0>)
 800338a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	4a58      	ldr	r2, [pc, #352]	; (8003574 <ADC_Init+0x1f4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003426:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	e00f      	b.n	800347e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800346c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800347c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0202 	bic.w	r2, r2, #2
 800348c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	005a      	lsls	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	3b01      	subs	r3, #1
 80034d8:	035a      	lsls	r2, r3, #13
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	e007      	b.n	80034f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	3b01      	subs	r3, #1
 8003510:	051a      	lsls	r2, r3, #20
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003536:	025a      	lsls	r2, r3, #9
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6899      	ldr	r1, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	029a      	lsls	r2, r3, #10
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40012300 	.word	0x40012300
 8003574:	0f000001 	.word	0x0f000001

08003578 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d13c      	bne.n	800360c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d12b      	bne.n	8003604 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d127      	bne.n	8003604 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d119      	bne.n	8003604 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0220 	bic.w	r2, r2, #32
 80035de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f003 fd94 	bl	8007132 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800360a:	e00e      	b.n	800362a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fd85 	bl	8003128 <HAL_ADC_ErrorCallback>
}
 800361e:	e004      	b.n	800362a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f003 fe24 	bl	800728e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2240      	movs	r2, #64	; 0x40
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff fd5a 	bl	8003128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0ed      	b.n	800386a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fcbc 	bl	8002018 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b0:	f7ff fbda 	bl	8002e68 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036b6:	e012      	b.n	80036de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036b8:	f7ff fbd6 	bl	8002e68 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b0a      	cmp	r3, #10
 80036c4:	d90b      	bls.n	80036de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0c5      	b.n	800386a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0e5      	beq.n	80036b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0202 	bic.w	r2, r2, #2
 80036fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036fc:	f7ff fbb4 	bl	8002e68 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003702:	e012      	b.n	800372a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003704:	f7ff fbb0 	bl	8002e68 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d90b      	bls.n	800372a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2205      	movs	r2, #5
 8003722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e09f      	b.n	800386a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7e1b      	ldrb	r3, [r3, #24]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d108      	bne.n	8003752 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e007      	b.n	8003762 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7e5b      	ldrb	r3, [r3, #25]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e007      	b.n	800378c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e9b      	ldrb	r3, [r3, #26]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d108      	bne.n	80037a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0220 	bic.w	r2, r2, #32
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7edb      	ldrb	r3, [r3, #27]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0210 	bic.w	r2, r2, #16
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e007      	b.n	80037e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0210 	orr.w	r2, r2, #16
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7f1b      	ldrb	r3, [r3, #28]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e007      	b.n	800380a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0208 	bic.w	r2, r2, #8
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7f5b      	ldrb	r3, [r3, #29]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d108      	bne.n	8003824 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0204 	orr.w	r2, r2, #4
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b08a      	sub	sp, #40	; 0x28
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d07c      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d023      	beq.n	800390a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f983 	bl	8003be0 <HAL_CAN_TxMailbox0CompleteCallback>
 80038da:	e016      	b.n	800390a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	e00c      	b.n	800390a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e002      	b.n	800390a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f989 	bl	8003c1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d024      	beq.n	800395e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800391c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f963 	bl	8003bf4 <HAL_CAN_TxMailbox1CompleteCallback>
 800392e:	e016      	b.n	800395e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	e00c      	b.n	800395e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	e002      	b.n	800395e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f969 	bl	8003c30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d024      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003970:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f943 	bl	8003c08 <HAL_CAN_TxMailbox2CompleteCallback>
 8003982:	e016      	b.n	80039b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	e00c      	b.n	80039b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e002      	b.n	80039b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f949 	bl	8003c44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00c      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2210      	movs	r2, #16
 80039d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2208      	movs	r2, #8
 80039f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f93a 	bl	8003c6c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f921 	bl	8003c58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f91c 	bl	8003c94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f903 	bl	8003c80 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2210      	movs	r2, #16
 8003a94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f906 	bl	8003ca8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d006      	beq.n	8003abe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8ff 	bl	8003cbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d07b      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d072      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d043      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03e      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b40:	2b60      	cmp	r3, #96	; 0x60
 8003b42:	d02b      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x32a>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d82e      	bhi.n	8003ba6 <HAL_CAN_IRQHandler+0x334>
 8003b48:	2b50      	cmp	r3, #80	; 0x50
 8003b4a:	d022      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x320>
 8003b4c:	2b50      	cmp	r3, #80	; 0x50
 8003b4e:	d82a      	bhi.n	8003ba6 <HAL_CAN_IRQHandler+0x334>
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d019      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x316>
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d826      	bhi.n	8003ba6 <HAL_CAN_IRQHandler+0x334>
 8003b58:	2b30      	cmp	r3, #48	; 0x30
 8003b5a:	d010      	beq.n	8003b7e <HAL_CAN_IRQHandler+0x30c>
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	d822      	bhi.n	8003ba6 <HAL_CAN_IRQHandler+0x334>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d002      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x2f8>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d005      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b68:	e01d      	b.n	8003ba6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f043 0308 	orr.w	r3, r3, #8
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b72:	e019      	b.n	8003ba8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	f043 0310 	orr.w	r3, r3, #16
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b7c:	e014      	b.n	8003ba8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f043 0320 	orr.w	r3, r3, #32
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b86:	e00f      	b.n	8003ba8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b90:	e00a      	b.n	8003ba8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ba6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bb6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f87c 	bl	8003cd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d16:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	60d3      	str	r3, [r2, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <__NVIC_GetPriorityGrouping+0x18>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0307 	and.w	r3, r3, #7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	db0b      	blt.n	8003d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4907      	ldr	r1, [pc, #28]	; (8003d80 <__NVIC_EnableIRQ+0x38>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2001      	movs	r0, #1
 8003d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
         );
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff4c 	bl	8003ce4 <__NVIC_SetPriorityGrouping>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e66:	f7ff ff61 	bl	8003d2c <__NVIC_GetPriorityGrouping>
 8003e6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f7ff ffb1 	bl	8003dd8 <NVIC_EncodePriority>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff80 	bl	8003d84 <__NVIC_SetPriority>
}
 8003e84:	bf00      	nop
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff54 	bl	8003d48 <__NVIC_EnableIRQ>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00e      	b.n	8003ed8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	795b      	ldrb	r3, [r3, #5]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe f978 	bl	80021c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003eec:	f7fe ffbc 	bl	8002e68 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e099      	b.n	8004030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1c:	e00f      	b.n	8003f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f1e:	f7fe ffa3 	bl	8002e68 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d908      	bls.n	8003f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2203      	movs	r2, #3
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e078      	b.n	8004030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e8      	bne.n	8003f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4b38      	ldr	r3, [pc, #224]	; (8004038 <HAL_DMA_Init+0x158>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d107      	bne.n	8003fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d117      	bne.n	8004002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb01 	bl	80045ec <DMA_CheckFifoParam>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ffe:	2301      	movs	r3, #1
 8004000:	e016      	b.n	8004030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fab8 	bl	8004580 <DMA_CalcBaseAndBitshift>
 8004010:	4603      	mov	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	223f      	movs	r2, #63	; 0x3f
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	f010803f 	.word	0xf010803f

0800403c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Start_IT+0x26>
 800405e:	2302      	movs	r3, #2
 8004060:	e040      	b.n	80040e4 <HAL_DMA_Start_IT+0xa8>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d12f      	bne.n	80040d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa4a 	bl	8004524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	223f      	movs	r2, #63	; 0x3f
 8004096:	409a      	lsls	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0216 	orr.w	r2, r2, #22
 80040aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e005      	b.n	80040e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040de:	2302      	movs	r3, #2
 80040e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040fa:	f7fe feb5 	bl	8002e68 <HAL_GetTick>
 80040fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d008      	beq.n	800411e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2280      	movs	r2, #128	; 0x80
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e052      	b.n	80041c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0216 	bic.w	r2, r2, #22
 800412c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_DMA_Abort+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0208 	bic.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416e:	e013      	b.n	8004198 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004170:	f7fe fe7a 	bl	8002e68 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b05      	cmp	r3, #5
 800417c:	d90c      	bls.n	8004198 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2203      	movs	r2, #3
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e015      	b.n	80041c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e4      	bne.n	8004170 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	223f      	movs	r2, #63	; 0x3f
 80041ac:	409a      	lsls	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d004      	beq.n	80041ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00c      	b.n	8004204 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2205      	movs	r2, #5
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800421c:	4b8e      	ldr	r3, [pc, #568]	; (8004458 <HAL_DMA_IRQHandler+0x248>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a8e      	ldr	r2, [pc, #568]	; (800445c <HAL_DMA_IRQHandler+0x24c>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	0a9b      	lsrs	r3, r3, #10
 8004228:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	2208      	movs	r2, #8
 800423c:	409a      	lsls	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01a      	beq.n	800427c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	2208      	movs	r2, #8
 800426a:	409a      	lsls	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	2201      	movs	r2, #1
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f043 0202 	orr.w	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	2204      	movs	r2, #4
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	2204      	movs	r2, #4
 80042d6:	409a      	lsls	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	2210      	movs	r2, #16
 80042ee:	409a      	lsls	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d043      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d03c      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	2210      	movs	r2, #16
 800430c:	409a      	lsls	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d018      	beq.n	8004352 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d024      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
 800433e:	e01f      	b.n	8004380 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
 8004350:	e016      	b.n	8004380 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0208 	bic.w	r2, r2, #8
 800436e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	2220      	movs	r2, #32
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 808f 	beq.w	80044b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8087 	beq.w	80044b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	2220      	movs	r2, #32
 80043a8:	409a      	lsls	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d136      	bne.n	8004428 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0216 	bic.w	r2, r2, #22
 80043c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_DMA_IRQHandler+0x1da>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0208 	bic.w	r2, r2, #8
 80043f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	223f      	movs	r2, #63	; 0x3f
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	2b00      	cmp	r3, #0
 800441c:	d07e      	beq.n	800451c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
        }
        return;
 8004426:	e079      	b.n	800451c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01d      	beq.n	8004472 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	2b00      	cmp	r3, #0
 800444a:	d031      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
 8004454:	e02c      	b.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
 8004456:	bf00      	nop
 8004458:	20000000 	.word	0x20000000
 800445c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e01e      	b.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0210 	bic.w	r2, r2, #16
 800448e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d032      	beq.n	800451e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d022      	beq.n	800450a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2205      	movs	r2, #5
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3301      	adds	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d307      	bcc.n	80044f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <HAL_DMA_IRQHandler+0x2cc>
 80044f6:	e000      	b.n	80044fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
 800451a:	e000      	b.n	800451e <HAL_DMA_IRQHandler+0x30e>
        return;
 800451c:	bf00      	nop
    }
  }
}
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d108      	bne.n	8004564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004562:	e007      	b.n	8004574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	3b10      	subs	r3, #16
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <DMA_CalcBaseAndBitshift+0x68>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d909      	bls.n	80045c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	659a      	str	r2, [r3, #88]	; 0x58
 80045c0:	e007      	b.n	80045d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	aaaaaaab 	.word	0xaaaaaaab
 80045e8:	0800f1a8 	.word	0x0800f1a8

080045ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11f      	bne.n	8004646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d856      	bhi.n	80046ba <DMA_CheckFifoParam+0xce>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <DMA_CheckFifoParam+0x28>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	08004637 	.word	0x08004637
 800461c:	08004625 	.word	0x08004625
 8004620:	080046bb 	.word	0x080046bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d046      	beq.n	80046be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004634:	e043      	b.n	80046be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800463e:	d140      	bne.n	80046c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004644:	e03d      	b.n	80046c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464e:	d121      	bne.n	8004694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d837      	bhi.n	80046c6 <DMA_CheckFifoParam+0xda>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <DMA_CheckFifoParam+0x70>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	0800466d 	.word	0x0800466d
 8004660:	08004673 	.word	0x08004673
 8004664:	0800466d 	.word	0x0800466d
 8004668:	08004685 	.word	0x08004685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e030      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d025      	beq.n	80046ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004682:	e022      	b.n	80046ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800468c:	d11f      	bne.n	80046ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004692:	e01c      	b.n	80046ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d903      	bls.n	80046a2 <DMA_CheckFifoParam+0xb6>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d003      	beq.n	80046a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046a0:	e018      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
      break;
 80046a6:	e015      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e00b      	b.n	80046d2 <DMA_CheckFifoParam+0xe6>
      break;
 80046ba:	bf00      	nop
 80046bc:	e00a      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e008      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
 80046c4:	e006      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
 80046c8:	e004      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <DMA_CheckFifoParam+0xe8>
      break;
 80046d2:	bf00      	nop
    }
  } 
  
  return status; 
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop

080046e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	e16b      	b.n	80049d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	f040 815a 	bne.w	80049d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d005      	beq.n	8004736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004732:	2b02      	cmp	r3, #2
 8004734:	d130      	bne.n	8004798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	2203      	movs	r2, #3
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800476c:	2201      	movs	r2, #1
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 0201 	and.w	r2, r3, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d017      	beq.n	80047d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d123      	bne.n	8004828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	08da      	lsrs	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3208      	adds	r2, #8
 80047e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	220f      	movs	r2, #15
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	08da      	lsrs	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3208      	adds	r2, #8
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0203 	and.w	r2, r3, #3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80b4 	beq.w	80049d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4b60      	ldr	r3, [pc, #384]	; (80049f0 <HAL_GPIO_Init+0x30c>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	4a5f      	ldr	r2, [pc, #380]	; (80049f0 <HAL_GPIO_Init+0x30c>)
 8004874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004878:	6453      	str	r3, [r2, #68]	; 0x44
 800487a:	4b5d      	ldr	r3, [pc, #372]	; (80049f0 <HAL_GPIO_Init+0x30c>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004886:	4a5b      	ldr	r2, [pc, #364]	; (80049f4 <HAL_GPIO_Init+0x310>)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	3302      	adds	r3, #2
 800488e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	220f      	movs	r2, #15
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4013      	ands	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a52      	ldr	r2, [pc, #328]	; (80049f8 <HAL_GPIO_Init+0x314>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02b      	beq.n	800490a <HAL_GPIO_Init+0x226>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a51      	ldr	r2, [pc, #324]	; (80049fc <HAL_GPIO_Init+0x318>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d025      	beq.n	8004906 <HAL_GPIO_Init+0x222>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a50      	ldr	r2, [pc, #320]	; (8004a00 <HAL_GPIO_Init+0x31c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <HAL_GPIO_Init+0x21e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4f      	ldr	r2, [pc, #316]	; (8004a04 <HAL_GPIO_Init+0x320>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d019      	beq.n	80048fe <HAL_GPIO_Init+0x21a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4e      	ldr	r2, [pc, #312]	; (8004a08 <HAL_GPIO_Init+0x324>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_GPIO_Init+0x216>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4d      	ldr	r2, [pc, #308]	; (8004a0c <HAL_GPIO_Init+0x328>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00d      	beq.n	80048f6 <HAL_GPIO_Init+0x212>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4c      	ldr	r2, [pc, #304]	; (8004a10 <HAL_GPIO_Init+0x32c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <HAL_GPIO_Init+0x20e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4b      	ldr	r2, [pc, #300]	; (8004a14 <HAL_GPIO_Init+0x330>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_GPIO_Init+0x20a>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e00e      	b.n	800490c <HAL_GPIO_Init+0x228>
 80048ee:	2308      	movs	r3, #8
 80048f0:	e00c      	b.n	800490c <HAL_GPIO_Init+0x228>
 80048f2:	2306      	movs	r3, #6
 80048f4:	e00a      	b.n	800490c <HAL_GPIO_Init+0x228>
 80048f6:	2305      	movs	r3, #5
 80048f8:	e008      	b.n	800490c <HAL_GPIO_Init+0x228>
 80048fa:	2304      	movs	r3, #4
 80048fc:	e006      	b.n	800490c <HAL_GPIO_Init+0x228>
 80048fe:	2303      	movs	r3, #3
 8004900:	e004      	b.n	800490c <HAL_GPIO_Init+0x228>
 8004902:	2302      	movs	r3, #2
 8004904:	e002      	b.n	800490c <HAL_GPIO_Init+0x228>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_GPIO_Init+0x228>
 800490a:	2300      	movs	r3, #0
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f002 0203 	and.w	r2, r2, #3
 8004912:	0092      	lsls	r2, r2, #2
 8004914:	4093      	lsls	r3, r2
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800491c:	4935      	ldr	r1, [pc, #212]	; (80049f4 <HAL_GPIO_Init+0x310>)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	3302      	adds	r3, #2
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_GPIO_Init+0x334>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494e:	4a32      	ldr	r2, [pc, #200]	; (8004a18 <HAL_GPIO_Init+0x334>)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004954:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <HAL_GPIO_Init+0x334>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004978:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <HAL_GPIO_Init+0x334>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_GPIO_Init+0x334>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049a2:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_GPIO_Init+0x334>)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a8:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <HAL_GPIO_Init+0x334>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049cc:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <HAL_GPIO_Init+0x334>)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	f67f ae90 	bls.w	8004700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3724      	adds	r7, #36	; 0x24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40013800 	.word	0x40013800
 80049f8:	40020000 	.word	0x40020000
 80049fc:	40020400 	.word	0x40020400
 8004a00:	40020800 	.word	0x40020800
 8004a04:	40020c00 	.word	0x40020c00
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40021400 	.word	0x40021400
 8004a10:	40021800 	.word	0x40021800
 8004a14:	40021c00 	.word	0x40021c00
 8004a18:	40013c00 	.word	0x40013c00

08004a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a2c:	787b      	ldrb	r3, [r7, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e267      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6e:	4b88      	ldr	r3, [pc, #544]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4b85      	ldr	r3, [pc, #532]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b82      	ldr	r3, [pc, #520]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b7e      	ldr	r3, [pc, #504]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e242      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x74>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b70      	ldr	r3, [pc, #448]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6f      	ldr	r2, [pc, #444]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6c      	ldr	r2, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	4b69      	ldr	r3, [pc, #420]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a68      	ldr	r2, [pc, #416]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b66      	ldr	r3, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a65      	ldr	r2, [pc, #404]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fe f9ae 	bl	8002e68 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fe f9aa 	bl	8002e68 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e207      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe f99a 	bl	8002e68 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe f996 	bl	8002e68 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1f3      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b44      	ldr	r3, [pc, #272]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1c7      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4937      	ldr	r1, [pc, #220]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCC_OscConfig+0x244>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f94f 	bl	8002e68 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe f94b 	bl	8002e68 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1a8      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4925      	ldr	r1, [pc, #148]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCC_OscConfig+0x244>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe f92e 	bl	8002e68 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe f92a 	bl	8002e68 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e187      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d036      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0x248>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fe f90e 	bl	8002e68 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fe f90a 	bl	8002e68 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e167      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x200>
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x248>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fe f8f7 	bl	8002e68 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe f8f3 	bl	8002e68 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d907      	bls.n	8004c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e150      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	42470000 	.word	0x42470000
 8004c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ea      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b81      	ldr	r3, [pc, #516]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b7d      	ldr	r3, [pc, #500]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a7c      	ldr	r2, [pc, #496]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd6:	4b7a      	ldr	r3, [pc, #488]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b77      	ldr	r3, [pc, #476]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b74      	ldr	r3, [pc, #464]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a73      	ldr	r2, [pc, #460]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fe f8b3 	bl	8002e68 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fe f8af 	bl	8002e68 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e10c      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2ea>
 8004d2c:	4b64      	ldr	r3, [pc, #400]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a63      	ldr	r2, [pc, #396]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x324>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x30c>
 8004d42:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a5e      	ldr	r2, [pc, #376]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a5b      	ldr	r2, [pc, #364]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x324>
 8004d5c:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	4a57      	ldr	r2, [pc, #348]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70
 8004d68:	4b55      	ldr	r3, [pc, #340]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	4a54      	ldr	r2, [pc, #336]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fe f874 	bl	8002e68 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fe f870 	bl	8002e68 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0cb      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCC_OscConfig+0x334>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da8:	f7fe f85e 	bl	8002e68 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fe f85a 	bl	8002e68 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0b5      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	4a38      	ldr	r2, [pc, #224]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80a1 	beq.w	8004f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dee:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d05c      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d141      	bne.n	8004e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fe f82e 	bl	8002e68 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fe f82a 	bl	8002e68 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e087      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	491b      	ldr	r1, [pc, #108]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fe f803 	bl	8002e68 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fd ffff 	bl	8002e68 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e05c      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x416>
 8004e84:	e054      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd ffec 	bl	8002e68 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd ffe8 	bl	8002e68 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e045      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x444>
 8004eb2:	e03d      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e038      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCC_OscConfig+0x4ec>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d121      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d11a      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d111      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	3b01      	subs	r3, #1
 8004f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800

08004f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0cc      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d90c      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b65      	ldr	r3, [pc, #404]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0b8      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a58      	ldr	r2, [pc, #352]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fac:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a52      	ldr	r2, [pc, #328]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b50      	ldr	r3, [pc, #320]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	494d      	ldr	r1, [pc, #308]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d044      	beq.n	8005060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d119      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e07f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e06f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e067      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501e:	4b37      	ldr	r3, [pc, #220]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 0203 	bic.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4934      	ldr	r1, [pc, #208]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005030:	f7fd ff1a 	bl	8002e68 <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	e00a      	b.n	800504e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005038:	f7fd ff16 	bl	8002e68 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	; 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e04f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 020c 	and.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	429a      	cmp	r2, r3
 800505e:	d1eb      	bne.n	8005038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20c      	bcs.n	8005088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e032      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4916      	ldr	r1, [pc, #88]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	490e      	ldr	r1, [pc, #56]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050c6:	f000 f821 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	490a      	ldr	r1, [pc, #40]	; (8005100 <HAL_RCC_ClockConfig+0x1c0>)
 80050d8:	5ccb      	ldrb	r3, [r1, r3]
 80050da:	fa22 f303 	lsr.w	r3, r2, r3
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fad0 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023c00 	.word	0x40023c00
 80050fc:	40023800 	.word	0x40023800
 8005100:	0800f190 	.word	0x0800f190
 8005104:	20000000 	.word	0x20000000
 8005108:	20000004 	.word	0x20000004

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005110:	b094      	sub	sp, #80	; 0x50
 8005112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	647b      	str	r3, [r7, #68]	; 0x44
 8005118:	2300      	movs	r3, #0
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	2300      	movs	r3, #0
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005124:	4b79      	ldr	r3, [pc, #484]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b08      	cmp	r3, #8
 800512e:	d00d      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x40>
 8005130:	2b08      	cmp	r3, #8
 8005132:	f200 80e1 	bhi.w	80052f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x34>
 800513a:	2b04      	cmp	r3, #4
 800513c:	d003      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x3a>
 800513e:	e0db      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b73      	ldr	r3, [pc, #460]	; (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005144:	e0db      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005146:	4b72      	ldr	r3, [pc, #456]	; (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 8005148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800514a:	e0d8      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800514c:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005156:	4b6d      	ldr	r3, [pc, #436]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d063      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	2200      	movs	r2, #0
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
 800516c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005174:	633b      	str	r3, [r7, #48]	; 0x30
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	0159      	lsls	r1, r3, #5
 800518c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005190:	0150      	lsls	r0, r2, #5
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4621      	mov	r1, r4
 8005198:	1a51      	subs	r1, r2, r1
 800519a:	6139      	str	r1, [r7, #16]
 800519c:	4629      	mov	r1, r5
 800519e:	eb63 0301 	sbc.w	r3, r3, r1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b0:	4659      	mov	r1, fp
 80051b2:	018b      	lsls	r3, r1, #6
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ba:	4651      	mov	r1, sl
 80051bc:	018a      	lsls	r2, r1, #6
 80051be:	4651      	mov	r1, sl
 80051c0:	ebb2 0801 	subs.w	r8, r2, r1
 80051c4:	4659      	mov	r1, fp
 80051c6:	eb63 0901 	sbc.w	r9, r3, r1
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051de:	4690      	mov	r8, r2
 80051e0:	4699      	mov	r9, r3
 80051e2:	4623      	mov	r3, r4
 80051e4:	eb18 0303 	adds.w	r3, r8, r3
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	462b      	mov	r3, r5
 80051ec:	eb49 0303 	adc.w	r3, r9, r3
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051fe:	4629      	mov	r1, r5
 8005200:	028b      	lsls	r3, r1, #10
 8005202:	4621      	mov	r1, r4
 8005204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005208:	4621      	mov	r1, r4
 800520a:	028a      	lsls	r2, r1, #10
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	2200      	movs	r2, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
 8005216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800521c:	f7fb fce4 	bl	8000be8 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	e058      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b38      	ldr	r3, [pc, #224]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	2200      	movs	r2, #0
 8005232:	4618      	mov	r0, r3
 8005234:	4611      	mov	r1, r2
 8005236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800523a:	623b      	str	r3, [r7, #32]
 800523c:	2300      	movs	r3, #0
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
 8005240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0159      	lsls	r1, r3, #5
 8005252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005256:	0150      	lsls	r0, r2, #5
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4641      	mov	r1, r8
 800525e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb63 0b01 	sbc.w	fp, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800527c:	ebb2 040a 	subs.w	r4, r2, sl
 8005280:	eb63 050b 	sbc.w	r5, r3, fp
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	00eb      	lsls	r3, r5, #3
 800528e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005292:	00e2      	lsls	r2, r4, #3
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
 8005298:	4643      	mov	r3, r8
 800529a:	18e3      	adds	r3, r4, r3
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	464b      	mov	r3, r9
 80052a0:	eb45 0303 	adc.w	r3, r5, r3
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052b2:	4629      	mov	r1, r5
 80052b4:	028b      	lsls	r3, r1, #10
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052bc:	4621      	mov	r1, r4
 80052be:	028a      	lsls	r2, r1, #10
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	61fa      	str	r2, [r7, #28]
 80052cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d0:	f7fb fc8a 	bl	8000be8 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	3301      	adds	r3, #1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052f6:	e002      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005300:	4618      	mov	r0, r3
 8005302:	3750      	adds	r7, #80	; 0x50
 8005304:	46bd      	mov	sp, r7
 8005306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	00f42400 	.word	0x00f42400

08005314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000000 	.word	0x20000000

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	; (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	0800f1a0 	.word	0x0800f1a0

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005358:	f7ff ffdc 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0b5b      	lsrs	r3, r3, #13
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800f1a0 	.word	0x0800f1a0

0800537c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	220f      	movs	r2, #15
 800538a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_RCC_GetClockConfig+0x5c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0203 	and.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <HAL_RCC_GetClockConfig+0x5c>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <HAL_RCC_GetClockConfig+0x5c>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_GetClockConfig+0x5c>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	08db      	lsrs	r3, r3, #3
 80053b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <HAL_RCC_GetClockConfig+0x60>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0207 	and.w	r2, r3, #7
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40023c00 	.word	0x40023c00

080053e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e01c      	b.n	800542c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	795b      	ldrb	r3, [r3, #5]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fd f8f4 	bl	80025f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0204 	orr.w	r2, r2, #4
 800541c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e041      	b.n	80054ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fd fb68 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f000 fbb2 	bl	8005bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d001      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e04e      	b.n	800558a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_TIM_Base_Start_IT+0xc4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d01d      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_TIM_Base_Start_IT+0xc8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a19      	ldr	r2, [pc, #100]	; (80055ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x80>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d111      	bne.n	8005578 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b06      	cmp	r3, #6
 8005564:	d010      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	e007      	b.n	8005588 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40010400 	.word	0x40010400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40001800 	.word	0x40001800

080055b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e041      	b.n	800564a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f839 	bl	8005652 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 faf2 	bl	8005bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d122      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d11b      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f06f 0202 	mvn.w	r2, #2
 8005692:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fa78 	bl	8005b9e <HAL_TIM_IC_CaptureCallback>
 80056ae:	e005      	b.n	80056bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa6a 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa7b 	bl	8005bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d122      	bne.n	8005716 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d11b      	bne.n	8005716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f06f 0204 	mvn.w	r2, #4
 80056e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fa4e 	bl	8005b9e <HAL_TIM_IC_CaptureCallback>
 8005702:	e005      	b.n	8005710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa40 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa51 	bl	8005bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b08      	cmp	r3, #8
 8005722:	d122      	bne.n	800576a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b08      	cmp	r3, #8
 8005730:	d11b      	bne.n	800576a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0208 	mvn.w	r2, #8
 800573a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fa24 	bl	8005b9e <HAL_TIM_IC_CaptureCallback>
 8005756:	e005      	b.n	8005764 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa16 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa27 	bl	8005bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b10      	cmp	r3, #16
 8005776:	d122      	bne.n	80057be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b10      	cmp	r3, #16
 8005784:	d11b      	bne.n	80057be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f06f 0210 	mvn.w	r2, #16
 800578e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2208      	movs	r2, #8
 8005794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f9fa 	bl	8005b9e <HAL_TIM_IC_CaptureCallback>
 80057aa:	e005      	b.n	80057b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f9ec 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9fd 	bl	8005bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d10e      	bne.n	80057ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0201 	mvn.w	r2, #1
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fc fed7 	bl	8002598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d10e      	bne.n	8005816 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d107      	bne.n	8005816 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fd53 	bl	80062bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d10e      	bne.n	8005842 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d107      	bne.n	8005842 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f9c2 	bl	8005bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b20      	cmp	r3, #32
 800584e:	d10e      	bne.n	800586e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d107      	bne.n	800586e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0220 	mvn.w	r2, #32
 8005866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fd1d 	bl	80062a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005892:	2302      	movs	r3, #2
 8005894:	e0ae      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	f200 809f 	bhi.w	80059e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080059e5 	.word	0x080059e5
 80058b4:	080059e5 	.word	0x080059e5
 80058b8:	080059e5 	.word	0x080059e5
 80058bc:	08005921 	.word	0x08005921
 80058c0:	080059e5 	.word	0x080059e5
 80058c4:	080059e5 	.word	0x080059e5
 80058c8:	080059e5 	.word	0x080059e5
 80058cc:	08005963 	.word	0x08005963
 80058d0:	080059e5 	.word	0x080059e5
 80058d4:	080059e5 	.word	0x080059e5
 80058d8:	080059e5 	.word	0x080059e5
 80058dc:	080059a3 	.word	0x080059a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fa18 	bl	8005d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	619a      	str	r2, [r3, #24]
      break;
 800591e:	e064      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa68 	bl	8005dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	619a      	str	r2, [r3, #24]
      break;
 8005960:	e043      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fabd 	bl	8005ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0208 	orr.w	r2, r2, #8
 800597c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0204 	bic.w	r2, r2, #4
 800598c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69d9      	ldr	r1, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	61da      	str	r2, [r3, #28]
      break;
 80059a0:	e023      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fb11 	bl	8005fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	021a      	lsls	r2, r3, #8
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	61da      	str	r2, [r3, #28]
      break;
 80059e2:	e002      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	75fb      	strb	r3, [r7, #23]
      break;
 80059e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_ConfigClockSource+0x1c>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0b4      	b.n	8005b82 <HAL_TIM_ConfigClockSource+0x186>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a50:	d03e      	beq.n	8005ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a56:	f200 8087 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	f000 8086 	beq.w	8005b6e <HAL_TIM_ConfigClockSource+0x172>
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d87f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d01a      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d87b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d050      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x11a>
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d877      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d03c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a7c:	2b50      	cmp	r3, #80	; 0x50
 8005a7e:	d873      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d058      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x13a>
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d86f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d064      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d86b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d060      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d867      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d05a      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	e062      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6899      	ldr	r1, [r3, #8]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f000 fb5d 	bl	8006170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
      break;
 8005ace:	e04f      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f000 fb46 	bl	8006170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af2:	609a      	str	r2, [r3, #8]
      break;
 8005af4:	e03c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 faba 	bl	800607c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2150      	movs	r1, #80	; 0x50
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fb13 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005b14:	e02c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fad9 	bl	80060da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2160      	movs	r1, #96	; 0x60
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fb03 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005b34:	e01c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 fa9a 	bl	800607c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 faf3 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 faea 	bl	800613a <TIM_ITRx_SetConfig>
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a40      	ldr	r2, [pc, #256]	; (8005cf0 <TIM_Base_SetConfig+0x114>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfa:	d00f      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3d      	ldr	r2, [pc, #244]	; (8005cf4 <TIM_Base_SetConfig+0x118>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3c      	ldr	r2, [pc, #240]	; (8005cf8 <TIM_Base_SetConfig+0x11c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3b      	ldr	r2, [pc, #236]	; (8005cfc <TIM_Base_SetConfig+0x120>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3a      	ldr	r2, [pc, #232]	; (8005d00 <TIM_Base_SetConfig+0x124>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d108      	bne.n	8005c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2f      	ldr	r2, [pc, #188]	; (8005cf0 <TIM_Base_SetConfig+0x114>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d02b      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d027      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <TIM_Base_SetConfig+0x118>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d023      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2b      	ldr	r2, [pc, #172]	; (8005cf8 <TIM_Base_SetConfig+0x11c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01f      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <TIM_Base_SetConfig+0x120>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01b      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a29      	ldr	r2, [pc, #164]	; (8005d00 <TIM_Base_SetConfig+0x124>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d017      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <TIM_Base_SetConfig+0x128>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a27      	ldr	r2, [pc, #156]	; (8005d08 <TIM_Base_SetConfig+0x12c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00f      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <TIM_Base_SetConfig+0x130>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a25      	ldr	r2, [pc, #148]	; (8005d10 <TIM_Base_SetConfig+0x134>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a24      	ldr	r2, [pc, #144]	; (8005d14 <TIM_Base_SetConfig+0x138>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a23      	ldr	r2, [pc, #140]	; (8005d18 <TIM_Base_SetConfig+0x13c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <TIM_Base_SetConfig+0x114>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0xf8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <TIM_Base_SetConfig+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d103      	bne.n	8005cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	615a      	str	r2, [r3, #20]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	40001800 	.word	0x40001800
 8005d14:	40001c00 	.word	0x40001c00
 8005d18:	40002000 	.word	0x40002000

08005d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f023 0201 	bic.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 0302 	bic.w	r3, r3, #2
 8005d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a20      	ldr	r2, [pc, #128]	; (8005df4 <TIM_OC1_SetConfig+0xd8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC1_SetConfig+0x64>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1f      	ldr	r2, [pc, #124]	; (8005df8 <TIM_OC1_SetConfig+0xdc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10c      	bne.n	8005d9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0308 	bic.w	r3, r3, #8
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <TIM_OC1_SetConfig+0xd8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC1_SetConfig+0x8e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <TIM_OC1_SetConfig+0xdc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010400 	.word	0x40010400

08005dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f023 0210 	bic.w	r2, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0320 	bic.w	r3, r3, #32
 8005e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <TIM_OC2_SetConfig+0xe4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC2_SetConfig+0x68>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <TIM_OC2_SetConfig+0xe8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10d      	bne.n	8005e80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <TIM_OC2_SetConfig+0xe4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC2_SetConfig+0x94>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <TIM_OC2_SetConfig+0xe8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d113      	bne.n	8005eb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010400 	.word	0x40010400

08005ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a21      	ldr	r2, [pc, #132]	; (8005fc8 <TIM_OC3_SetConfig+0xe0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_OC3_SetConfig+0x66>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a20      	ldr	r2, [pc, #128]	; (8005fcc <TIM_OC3_SetConfig+0xe4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d10d      	bne.n	8005f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <TIM_OC3_SetConfig+0xe0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_OC3_SetConfig+0x92>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <TIM_OC3_SetConfig+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d113      	bne.n	8005fa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400

08005fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800601a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	031b      	lsls	r3, r3, #12
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a12      	ldr	r2, [pc, #72]	; (8006074 <TIM_OC4_SetConfig+0xa4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_OC4_SetConfig+0x68>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a11      	ldr	r2, [pc, #68]	; (8006078 <TIM_OC4_SetConfig+0xa8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d109      	bne.n	800604c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800603e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	019b      	lsls	r3, r3, #6
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40010000 	.word	0x40010000
 8006078:	40010400 	.word	0x40010400

0800607c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0201 	bic.w	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f023 030a 	bic.w	r3, r3, #10
 80060b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0210 	bic.w	r2, r3, #16
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	031b      	lsls	r3, r3, #12
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	f043 0307 	orr.w	r3, r3, #7
 800615c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	021a      	lsls	r2, r3, #8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	431a      	orrs	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4313      	orrs	r3, r2
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	609a      	str	r2, [r3, #8]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e05a      	b.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a21      	ldr	r2, [pc, #132]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006214:	d01d      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d018      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a17      	ldr	r2, [pc, #92]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10c      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40010000 	.word	0x40010000
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40010400 	.word	0x40010400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40001800 	.word	0x40001800

080062a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e03f      	b.n	8006362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fc fca0 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc7b 	bl	8006c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695a      	ldr	r2, [r3, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b0ba      	sub	sp, #232	; 0xe8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006392:	2300      	movs	r3, #0
 8006394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006398:	2300      	movs	r3, #0
 800639a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80063aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10f      	bne.n	80063d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <HAL_UART_IRQHandler+0x66>
 80063be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fb65 	bl	8006a9a <UART_Receive_IT>
      return;
 80063d0:	e256      	b.n	8006880 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80de 	beq.w	8006598 <HAL_UART_IRQHandler+0x22c>
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80d1 	beq.w	8006598 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_UART_IRQHandler+0xae>
 8006402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <HAL_UART_IRQHandler+0xd2>
 8006426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f043 0202 	orr.w	r2, r3, #2
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <HAL_UART_IRQHandler+0xf6>
 800644a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f043 0204 	orr.w	r2, r3, #4
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d011      	beq.n	8006492 <HAL_UART_IRQHandler+0x126>
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800647a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f043 0208 	orr.w	r2, r3, #8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 81ed 	beq.w	8006876 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800649c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <HAL_UART_IRQHandler+0x14e>
 80064a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 faf0 	bl	8006a9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <HAL_UART_IRQHandler+0x17a>
 80064de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d04f      	beq.n	8006586 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9f8 	bl	80068dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d141      	bne.n	800657e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3314      	adds	r3, #20
 8006522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006526:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800652a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800653e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1d9      	bne.n	80064fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	2b00      	cmp	r3, #0
 800654c:	d013      	beq.n	8006576 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	4a7d      	ldr	r2, [pc, #500]	; (8006748 <HAL_UART_IRQHandler+0x3dc>)
 8006554:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fe36 	bl	80041cc <HAL_DMA_Abort_IT>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e00e      	b.n	8006594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f99a 	bl	80068b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	e00a      	b.n	8006594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f996 	bl	80068b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	e006      	b.n	8006594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f992 	bl	80068b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006592:	e170      	b.n	8006876 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	bf00      	nop
    return;
 8006596:	e16e      	b.n	8006876 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	2b01      	cmp	r3, #1
 800659e:	f040 814a 	bne.w	8006836 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8143 	beq.w	8006836 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 813c 	beq.w	8006836 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065be:	2300      	movs	r3, #0
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	f040 80b4 	bne.w	800674c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8140 	beq.w	800687a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006602:	429a      	cmp	r2, r3
 8006604:	f080 8139 	bcs.w	800687a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800660e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661a:	f000 8088 	beq.w	800672e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800663c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800664a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800664e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1d9      	bne.n	800661e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3314      	adds	r3, #20
 8006670:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800667a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800668e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006692:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006696:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e1      	bne.n	800666a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3314      	adds	r3, #20
 80066ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e3      	bne.n	80066a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fe:	f023 0310 	bic.w	r3, r3, #16
 8006702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006710:	65ba      	str	r2, [r7, #88]	; 0x58
 8006712:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800671e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e3      	bne.n	80066ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	4618      	mov	r0, r3
 800672a:	f7fd fcdf 	bl	80040ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006736:	b29b      	uxth	r3, r3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	b29b      	uxth	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f8c0 	bl	80068c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006744:	e099      	b.n	800687a <HAL_UART_IRQHandler+0x50e>
 8006746:	bf00      	nop
 8006748:	080069a3 	.word	0x080069a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006754:	b29b      	uxth	r3, r3
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 808b 	beq.w	800687e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8086 	beq.w	800687e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006796:	647a      	str	r2, [r7, #68]	; 0x44
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800679c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e3      	bne.n	8006772 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	623b      	str	r3, [r7, #32]
   return(result);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067ce:	633a      	str	r2, [r7, #48]	; 0x30
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e3      	bne.n	80067aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0310 	bic.w	r3, r3, #16
 8006806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006814:	61fa      	str	r2, [r7, #28]
 8006816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	69b9      	ldr	r1, [r7, #24]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	617b      	str	r3, [r7, #20]
   return(result);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e3      	bne.n	80067f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f848 	bl	80068c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006834:	e023      	b.n	800687e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <HAL_UART_IRQHandler+0x4ea>
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8bb 	bl	80069ca <UART_Transmit_IT>
    return;
 8006854:	e014      	b.n	8006880 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <HAL_UART_IRQHandler+0x514>
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d008      	beq.n	8006880 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8fb 	bl	8006a6a <UART_EndTransmit_IT>
    return;
 8006874:	e004      	b.n	8006880 <HAL_UART_IRQHandler+0x514>
    return;
 8006876:	bf00      	nop
 8006878:	e002      	b.n	8006880 <HAL_UART_IRQHandler+0x514>
      return;
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <HAL_UART_IRQHandler+0x514>
      return;
 800687e:	bf00      	nop
  }
}
 8006880:	37e8      	adds	r7, #232	; 0xe8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop

08006888 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b095      	sub	sp, #84	; 0x54
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006904:	643a      	str	r2, [r7, #64]	; 0x40
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800690a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e5      	bne.n	80068e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3314      	adds	r3, #20
 800691e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	61fb      	str	r3, [r7, #28]
   return(result);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3314      	adds	r3, #20
 8006936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800693e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	2b01      	cmp	r3, #1
 8006952:	d119      	bne.n	8006988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	60bb      	str	r3, [r7, #8]
   return(result);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f023 0310 	bic.w	r3, r3, #16
 800696a:	647b      	str	r3, [r7, #68]	; 0x44
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006974:	61ba      	str	r2, [r7, #24]
 8006976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6979      	ldr	r1, [r7, #20]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	613b      	str	r3, [r7, #16]
   return(result);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006996:	bf00      	nop
 8006998:	3754      	adds	r7, #84	; 0x54
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff ff77 	bl	80068b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b21      	cmp	r3, #33	; 0x21
 80069dc:	d13e      	bne.n	8006a5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e6:	d114      	bne.n	8006a12 <UART_Transmit_IT+0x48>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d110      	bne.n	8006a12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	621a      	str	r2, [r3, #32]
 8006a10:	e008      	b.n	8006a24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	1c59      	adds	r1, r3, #1
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6211      	str	r1, [r2, #32]
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4619      	mov	r1, r3
 8006a32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10f      	bne.n	8006a58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fefc 	bl	8006888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b08c      	sub	sp, #48	; 0x30
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b22      	cmp	r3, #34	; 0x22
 8006aac:	f040 80ab 	bne.w	8006c06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab8:	d117      	bne.n	8006aea <UART_Receive_IT+0x50>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d113      	bne.n	8006aea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	1c9a      	adds	r2, r3, #2
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae8:	e026      	b.n	8006b38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d007      	beq.n	8006b0e <UART_Receive_IT+0x74>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <UART_Receive_IT+0x82>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e008      	b.n	8006b2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4619      	mov	r1, r3
 8006b46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d15a      	bne.n	8006c02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0220 	bic.w	r2, r2, #32
 8006b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d135      	bne.n	8006bf8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f023 0310 	bic.w	r3, r3, #16
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	623a      	str	r2, [r7, #32]
 8006bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	69f9      	ldr	r1, [r7, #28]
 8006bb8:	6a3a      	ldr	r2, [r7, #32]
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e5      	bne.n	8006b92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d10a      	bne.n	8006bea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff fe67 	bl	80068c4 <HAL_UARTEx_RxEventCallback>
 8006bf6:	e002      	b.n	8006bfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fe4f 	bl	800689c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e002      	b.n	8006c08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c06:	2302      	movs	r3, #2
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3730      	adds	r7, #48	; 0x30
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c14:	b0c0      	sub	sp, #256	; 0x100
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	68d9      	ldr	r1, [r3, #12]
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	ea40 0301 	orr.w	r3, r0, r1
 8006c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c68:	f021 010c 	bic.w	r1, r1, #12
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c76:	430b      	orrs	r3, r1
 8006c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	6999      	ldr	r1, [r3, #24]
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	ea40 0301 	orr.w	r3, r0, r1
 8006c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b8f      	ldr	r3, [pc, #572]	; (8006edc <UART_SetConfig+0x2cc>)
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d005      	beq.n	8006cb0 <UART_SetConfig+0xa0>
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b8d      	ldr	r3, [pc, #564]	; (8006ee0 <UART_SetConfig+0x2d0>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d104      	bne.n	8006cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb0:	f7fe fb50 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cb8:	e003      	b.n	8006cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cba:	f7fe fb37 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8006cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ccc:	f040 810c 	bne.w	8006ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	1891      	adds	r1, r2, r2
 8006ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cea:	415b      	adcs	r3, r3
 8006cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	eb12 0801 	adds.w	r8, r2, r1
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	eb43 0901 	adc.w	r9, r3, r1
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d12:	4690      	mov	r8, r2
 8006d14:	4699      	mov	r9, r3
 8006d16:	4623      	mov	r3, r4
 8006d18:	eb18 0303 	adds.w	r3, r8, r3
 8006d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d20:	462b      	mov	r3, r5
 8006d22:	eb49 0303 	adc.w	r3, r9, r3
 8006d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d3e:	460b      	mov	r3, r1
 8006d40:	18db      	adds	r3, r3, r3
 8006d42:	653b      	str	r3, [r7, #80]	; 0x50
 8006d44:	4613      	mov	r3, r2
 8006d46:	eb42 0303 	adc.w	r3, r2, r3
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d54:	f7f9 ff48 	bl	8000be8 <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4b61      	ldr	r3, [pc, #388]	; (8006ee4 <UART_SetConfig+0x2d4>)
 8006d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	011c      	lsls	r4, r3, #4
 8006d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	1891      	adds	r1, r2, r2
 8006d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d80:	415b      	adcs	r3, r3
 8006d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d88:	4641      	mov	r1, r8
 8006d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d8e:	4649      	mov	r1, r9
 8006d90:	eb43 0b01 	adc.w	fp, r3, r1
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006da8:	4692      	mov	sl, r2
 8006daa:	469b      	mov	fp, r3
 8006dac:	4643      	mov	r3, r8
 8006dae:	eb1a 0303 	adds.w	r3, sl, r3
 8006db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006db6:	464b      	mov	r3, r9
 8006db8:	eb4b 0303 	adc.w	r3, fp, r3
 8006dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	18db      	adds	r3, r3, r3
 8006dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dda:	4613      	mov	r3, r2
 8006ddc:	eb42 0303 	adc.w	r3, r2, r3
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
 8006de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dea:	f7f9 fefd 	bl	8000be8 <__aeabi_uldivmod>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	4b3b      	ldr	r3, [pc, #236]	; (8006ee4 <UART_SetConfig+0x2d4>)
 8006df6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2264      	movs	r2, #100	; 0x64
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
 8006e02:	1acb      	subs	r3, r1, r3
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <UART_SetConfig+0x2d4>)
 8006e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e18:	441c      	add	r4, r3
 8006e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	1891      	adds	r1, r2, r2
 8006e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e34:	415b      	adcs	r3, r3
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	1851      	adds	r1, r2, r1
 8006e40:	6339      	str	r1, [r7, #48]	; 0x30
 8006e42:	4649      	mov	r1, r9
 8006e44:	414b      	adcs	r3, r1
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e54:	4659      	mov	r1, fp
 8006e56:	00cb      	lsls	r3, r1, #3
 8006e58:	4651      	mov	r1, sl
 8006e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e5e:	4651      	mov	r1, sl
 8006e60:	00ca      	lsls	r2, r1, #3
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	4642      	mov	r2, r8
 8006e6a:	189b      	adds	r3, r3, r2
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e70:	464b      	mov	r3, r9
 8006e72:	460a      	mov	r2, r1
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e90:	460b      	mov	r3, r1
 8006e92:	18db      	adds	r3, r3, r3
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e96:	4613      	mov	r3, r2
 8006e98:	eb42 0303 	adc.w	r3, r2, r3
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ea6:	f7f9 fe9f 	bl	8000be8 <__aeabi_uldivmod>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <UART_SetConfig+0x2d4>)
 8006eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	2164      	movs	r1, #100	; 0x64
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	3332      	adds	r3, #50	; 0x32
 8006ec2:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <UART_SetConfig+0x2d4>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f003 0207 	and.w	r2, r3, #7
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4422      	add	r2, r4
 8006ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ed8:	e105      	b.n	80070e6 <UART_SetConfig+0x4d6>
 8006eda:	bf00      	nop
 8006edc:	40011000 	.word	0x40011000
 8006ee0:	40011400 	.word	0x40011400
 8006ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006efa:	4642      	mov	r2, r8
 8006efc:	464b      	mov	r3, r9
 8006efe:	1891      	adds	r1, r2, r2
 8006f00:	6239      	str	r1, [r7, #32]
 8006f02:	415b      	adcs	r3, r3
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	1854      	adds	r4, r2, r1
 8006f0e:	4649      	mov	r1, r9
 8006f10:	eb43 0501 	adc.w	r5, r3, r1
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	00eb      	lsls	r3, r5, #3
 8006f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f22:	00e2      	lsls	r2, r4, #3
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	4643      	mov	r3, r8
 8006f2a:	18e3      	adds	r3, r4, r3
 8006f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f30:	464b      	mov	r3, r9
 8006f32:	eb45 0303 	adc.w	r3, r5, r3
 8006f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f56:	4629      	mov	r1, r5
 8006f58:	008b      	lsls	r3, r1, #2
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f60:	4621      	mov	r1, r4
 8006f62:	008a      	lsls	r2, r1, #2
 8006f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f68:	f7f9 fe3e 	bl	8000be8 <__aeabi_uldivmod>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4b60      	ldr	r3, [pc, #384]	; (80070f4 <UART_SetConfig+0x4e4>)
 8006f72:	fba3 2302 	umull	r2, r3, r3, r2
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	011c      	lsls	r4, r3, #4
 8006f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	1891      	adds	r1, r2, r2
 8006f92:	61b9      	str	r1, [r7, #24]
 8006f94:	415b      	adcs	r3, r3
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	1851      	adds	r1, r2, r1
 8006fa0:	6139      	str	r1, [r7, #16]
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	414b      	adcs	r3, r1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	00cb      	lsls	r3, r1, #3
 8006fb8:	4651      	mov	r1, sl
 8006fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	00ca      	lsls	r2, r1, #3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4642      	mov	r2, r8
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	008b      	lsls	r3, r1, #2
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ffe:	4641      	mov	r1, r8
 8007000:	008a      	lsls	r2, r1, #2
 8007002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007006:	f7f9 fdef 	bl	8000be8 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <UART_SetConfig+0x4e4>)
 8007010:	fba3 1302 	umull	r1, r3, r3, r2
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	2164      	movs	r1, #100	; 0x64
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	3332      	adds	r3, #50	; 0x32
 8007022:	4a34      	ldr	r2, [pc, #208]	; (80070f4 <UART_SetConfig+0x4e4>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702e:	441c      	add	r4, r3
 8007030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007034:	2200      	movs	r2, #0
 8007036:	673b      	str	r3, [r7, #112]	; 0x70
 8007038:	677a      	str	r2, [r7, #116]	; 0x74
 800703a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800703e:	4642      	mov	r2, r8
 8007040:	464b      	mov	r3, r9
 8007042:	1891      	adds	r1, r2, r2
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	415b      	adcs	r3, r3
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800704e:	4641      	mov	r1, r8
 8007050:	1851      	adds	r1, r2, r1
 8007052:	6039      	str	r1, [r7, #0]
 8007054:	4649      	mov	r1, r9
 8007056:	414b      	adcs	r3, r1
 8007058:	607b      	str	r3, [r7, #4]
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007066:	4659      	mov	r1, fp
 8007068:	00cb      	lsls	r3, r1, #3
 800706a:	4651      	mov	r1, sl
 800706c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007070:	4651      	mov	r1, sl
 8007072:	00ca      	lsls	r2, r1, #3
 8007074:	4610      	mov	r0, r2
 8007076:	4619      	mov	r1, r3
 8007078:	4603      	mov	r3, r0
 800707a:	4642      	mov	r2, r8
 800707c:	189b      	adds	r3, r3, r2
 800707e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007080:	464b      	mov	r3, r9
 8007082:	460a      	mov	r2, r1
 8007084:	eb42 0303 	adc.w	r3, r2, r3
 8007088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	663b      	str	r3, [r7, #96]	; 0x60
 8007094:	667a      	str	r2, [r7, #100]	; 0x64
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070a2:	4649      	mov	r1, r9
 80070a4:	008b      	lsls	r3, r1, #2
 80070a6:	4641      	mov	r1, r8
 80070a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ac:	4641      	mov	r1, r8
 80070ae:	008a      	lsls	r2, r1, #2
 80070b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070b4:	f7f9 fd98 	bl	8000be8 <__aeabi_uldivmod>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <UART_SetConfig+0x4e4>)
 80070be:	fba3 1302 	umull	r1, r3, r3, r2
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	2164      	movs	r1, #100	; 0x64
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	3332      	adds	r3, #50	; 0x32
 80070d0:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <UART_SetConfig+0x4e4>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4422      	add	r2, r4
 80070e4:	609a      	str	r2, [r3, #8]
}
 80070e6:	bf00      	nop
 80070e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070ec:	46bd      	mov	sp, r7
 80070ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070f2:	bf00      	nop
 80070f4:	51eb851f 	.word	0x51eb851f

080070f8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	429a      	cmp	r2, r3
 8007110:	d20b      	bcs.n	800712a <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4413      	add	r3, r2
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f817 	bl	8007150 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e7ed      	b.n	8007106 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800713a:	f7f9 ffb9 	bl	80010b0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800713e:	4603      	mov	r3, r0
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ffd8 	bl	80070f8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8007150:	b5b0      	push	{r4, r5, r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4618      	mov	r0, r3
 800715e:	f7f9 ff52 	bl	8001006 <_ZNKSt14_Function_base8_M_emptyEv>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 8007168:	f005 f94f 	bl	800c40a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68dc      	ldr	r4, [r3, #12]
 8007170:	687d      	ldr	r5, [r7, #4]
 8007172:	463b      	mov	r3, r7
 8007174:	4618      	mov	r0, r3
 8007176:	f7fa fb38 	bl	80017ea <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800717a:	4603      	mov	r3, r0
 800717c:	4619      	mov	r1, r3
 800717e:	4628      	mov	r0, r5
 8007180:	47a0      	blx	r4
 8007182:	bf00      	nop
    }
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bdb0      	pop	{r4, r5, r7, pc}

0800718a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800718a:	b5b0      	push	{r4, r5, r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	240f      	movs	r4, #15
 8007196:	461d      	mov	r5, r3
 8007198:	2c00      	cmp	r4, #0
 800719a:	db05      	blt.n	80071a8 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800719c:	4628      	mov	r0, r5
 800719e:	f7fa fa09 	bl	80015b4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80071a2:	3510      	adds	r5, #16
 80071a4:	3c01      	subs	r4, #1
 80071a6:	e7f7      	b.n	8007198 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bdb0      	pop	{r4, r5, r7, pc}

080071ba <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 80071ba:	b590      	push	{r4, r7, lr}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	429c      	cmp	r4, r3
 80071d2:	d004      	beq.n	80071de <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80071d4:	3c10      	subs	r4, #16
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7f9 ff26 	bl	8001028 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80071dc:	e7f7      	b.n	80071ce <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd90      	pop	{r4, r7, pc}

080071e8 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	4801      	ldr	r0, [pc, #4]	; (80071f4 <__tcf_0+0xc>)
 80071ee:	f7ff ffe4 	bl	80071ba <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	2000096c 	.word	0x2000096c

080071f8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 80071fc:	4b12      	ldr	r3, [pc, #72]	; (8007248 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f3bf 8f5b 	dmb	ish
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	bf0c      	ite	eq
 800720e:	2301      	moveq	r3, #1
 8007210:	2300      	movne	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d013      	beq.n	8007240 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8007218:	480b      	ldr	r0, [pc, #44]	; (8007248 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800721a:	f005 f8e5 	bl	800c3e8 <__cxa_guard_acquire>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800722e:	4807      	ldr	r0, [pc, #28]	; (800724c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 8007230:	f7ff ffab 	bl	800718a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 8007234:	4806      	ldr	r0, [pc, #24]	; (8007250 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 8007236:	f005 f90e 	bl	800c456 <atexit>
 800723a:	4803      	ldr	r0, [pc, #12]	; (8007248 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800723c:	f005 f8e0 	bl	800c400 <__cxa_guard_release>
		return instance;
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8007242:	4618      	mov	r0, r3
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000a70 	.word	0x20000a70
 800724c:	2000096c 	.word	0x2000096c
 8007250:	080071e9 	.word	0x080071e9

08007254 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	429a      	cmp	r2, r3
 800726c:	d20b      	bcs.n	8007286 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff69 	bl	8007150 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e7ed      	b.n	8007262 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 8007296:	f7ff ffaf 	bl	80071f8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800729a:	4603      	mov	r3, r0
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ffd8 	bl	8007254 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80072bc:	bf00      	nop
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 fc70 	bl	8008bc6 <_putchar>
  }
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <_ZL10_strnlen_sPKcj+0x24>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	603a      	str	r2, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <_ZL10_strnlen_sPKcj+0x24>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <_ZL10_strnlen_sPKcj+0x26>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <_ZL10_strnlen_sPKcj+0x32>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e7ed      	b.n	80072fc <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	1ad3      	subs	r3, r2, r3
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	4603      	mov	r3, r0
 800733a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	2b2f      	cmp	r3, #47	; 0x2f
 8007340:	d904      	bls.n	800734c <_ZL9_is_digitc+0x1a>
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	2b39      	cmp	r3, #57	; 0x39
 8007346:	d801      	bhi.n	800734c <_ZL9_is_digitc+0x1a>
 8007348:	2301      	movs	r3, #1
 800734a:	e000      	b.n	800734e <_ZL9_is_digitc+0x1c>
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff ffe0 	bl	8007332 <_ZL9_is_digitc>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00f      	beq.n	8007398 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	4618      	mov	r0, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	1c59      	adds	r1, r3, #1
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4403      	add	r3, r0
 8007392:	3b30      	subs	r3, #48	; 0x30
 8007394:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007396:	e7e6      	b.n	8007366 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80073a2:	b590      	push	{r4, r7, lr}
 80073a4:	b087      	sub	sp, #28
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d116      	bne.n	80073ec <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d111      	bne.n	80073ec <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d20b      	bcs.n	80073ec <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	1c53      	adds	r3, r2, #1
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	68fc      	ldr	r4, [r7, #12]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	2020      	movs	r0, #32
 80073e2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	3301      	adds	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e7ef      	b.n	80073cc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00e      	beq.n	8007410 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	3b01      	subs	r3, #1
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	4413      	add	r3, r2
 80073fe:	7818      	ldrb	r0, [r3, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	1c53      	adds	r3, r2, #1
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	68fc      	ldr	r4, [r7, #12]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	47a0      	blx	r4
  while (len) {
 800740e:	e7ed      	b.n	80073ec <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	429a      	cmp	r2, r3
 8007424:	d908      	bls.n	8007438 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	1c53      	adds	r3, r2, #1
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	68fc      	ldr	r4, [r7, #12]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	2020      	movs	r0, #32
 8007434:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8007436:	e7f0      	b.n	800741a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 8007438:	687b      	ldr	r3, [r7, #4]
}
 800743a:	4618      	mov	r0, r3
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	bd90      	pop	{r4, r7, pc}

08007442 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b088      	sub	sp, #32
 8007446:	af04      	add	r7, sp, #16
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d136      	bne.n	80074c8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d010      	beq.n	8007482 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800746a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	f003 030c 	and.w	r3, r3, #12
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	3b01      	subs	r3, #1
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	429a      	cmp	r2, r3
 8007488:	d20a      	bcs.n	80074a0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b1f      	cmp	r3, #31
 800748e:	d807      	bhi.n	80074a0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	61fa      	str	r2, [r7, #28]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4413      	add	r3, r2
 800749a:	2230      	movs	r2, #48	; 0x30
 800749c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800749e:	e7f0      	b.n	8007482 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d20a      	bcs.n	80074c8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	2b1f      	cmp	r3, #31
 80074b6:	d807      	bhi.n	80074c8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	61fa      	str	r2, [r7, #28]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4413      	add	r3, r2
 80074c2:	2230      	movs	r2, #48	; 0x30
 80074c4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80074c6:	e7eb      	b.n	80074a0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d058      	beq.n	8007584 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d116      	bne.n	800750a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d013      	beq.n	800750a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d003      	beq.n	80074f2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d10b      	bne.n	800750a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b10      	cmp	r3, #16
 8007502:	d102      	bne.n	800750a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3b01      	subs	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	2b10      	cmp	r3, #16
 800750e:	d10f      	bne.n	8007530 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b1f      	cmp	r3, #31
 800751e:	d807      	bhi.n	8007530 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	61fa      	str	r2, [r7, #28]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4413      	add	r3, r2
 800752a:	2278      	movs	r2, #120	; 0x78
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	e01f      	b.n	8007570 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	2b10      	cmp	r3, #16
 8007534:	d10f      	bne.n	8007556 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b1f      	cmp	r3, #31
 8007544:	d807      	bhi.n	8007556 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	61fa      	str	r2, [r7, #28]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	4413      	add	r3, r2
 8007550:	2258      	movs	r2, #88	; 0x58
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	e00c      	b.n	8007570 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	2b02      	cmp	r3, #2
 800755a:	d109      	bne.n	8007570 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b1f      	cmp	r3, #31
 8007560:	d806      	bhi.n	8007570 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	61fa      	str	r2, [r7, #28]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4413      	add	r3, r2
 800756c:	2262      	movs	r2, #98	; 0x62
 800756e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b1f      	cmp	r3, #31
 8007574:	d806      	bhi.n	8007584 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	61fa      	str	r2, [r7, #28]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	4413      	add	r3, r2
 8007580:	2230      	movs	r2, #48	; 0x30
 8007582:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b1f      	cmp	r3, #31
 8007588:	d824      	bhi.n	80075d4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800758a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	61fa      	str	r2, [r7, #28]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	4413      	add	r3, r2
 800759c:	222d      	movs	r2, #45	; 0x2d
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e018      	b.n	80075d4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	61fa      	str	r2, [r7, #28]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4413      	add	r3, r2
 80075b6:	222b      	movs	r2, #43	; 0x2b
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	e00b      	b.n	80075d4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d006      	beq.n	80075d4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	61fa      	str	r2, [r7, #28]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4413      	add	r3, r2
 80075d0:	2220      	movs	r2, #32
 80075d2:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	9302      	str	r3, [sp, #8]
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7ff fed9 	bl	80073a2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 80075f0:	4603      	mov	r3, r0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b096      	sub	sp, #88	; 0x58
 80075fe:	af08      	add	r7, sp, #32
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800760c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 8007612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007614:	f023 0310 	bic.w	r3, r3, #16
 8007618:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800761a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 8007624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d033      	beq.n	8007692 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800762a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007632:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007634:	fb01 f202 	mul.w	r2, r1, r2
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800763e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007642:	2b09      	cmp	r3, #9
 8007644:	d804      	bhi.n	8007650 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8007646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800764a:	3330      	adds	r3, #48	; 0x30
 800764c:	b2da      	uxtb	r2, r3
 800764e:	e00d      	b.n	800766c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 8007650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800765a:	2241      	movs	r2, #65	; 0x41
 800765c:	e000      	b.n	8007660 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800765e:	2261      	movs	r2, #97	; 0x61
 8007660:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007664:	4413      	add	r3, r2
 8007666:	b2db      	uxtb	r3, r3
 8007668:	3b0a      	subs	r3, #10
 800766a:	b2da      	uxtb	r2, r3
 800766c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766e:	1c59      	adds	r1, r3, #1
 8007670:	6379      	str	r1, [r7, #52]	; 0x34
 8007672:	3338      	adds	r3, #56	; 0x38
 8007674:	443b      	add	r3, r7
 8007676:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800767a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800767c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007682:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	2b1f      	cmp	r3, #31
 800768e:	d800      	bhi.n	8007692 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 8007690:	e7cb      	b.n	800762a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8007692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007694:	9306      	str	r3, [sp, #24]
 8007696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80076a6:	9302      	str	r3, [sp, #8]
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	f107 0310 	add.w	r3, r7, #16
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fec2 	bl	8007442 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 80076be:	4603      	mov	r3, r0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3738      	adds	r7, #56	; 0x38
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b096      	sub	sp, #88	; 0x58
 80076cc:	af08      	add	r7, sp, #32
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80076da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076de:	4313      	orrs	r3, r2
 80076e0:	d103      	bne.n	80076ea <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 80076e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e4:	f023 0310 	bic.w	r3, r3, #16
 80076e8:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80076ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 80076f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076f8:	4313      	orrs	r3, r2
 80076fa:	d038      	beq.n	800776e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 80076fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007704:	f7f9 fa70 	bl	8000be8 <__aeabi_uldivmod>
 8007708:	4613      	mov	r3, r2
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800770e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007712:	2b09      	cmp	r3, #9
 8007714:	d804      	bhi.n	8007720 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8007716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800771a:	3330      	adds	r3, #48	; 0x30
 800771c:	b2da      	uxtb	r2, r3
 800771e:	e00d      	b.n	800773c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 8007720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800772a:	2241      	movs	r2, #65	; 0x41
 800772c:	e000      	b.n	8007730 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800772e:	2261      	movs	r2, #97	; 0x61
 8007730:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007734:	4413      	add	r3, r2
 8007736:	b2db      	uxtb	r3, r3
 8007738:	3b0a      	subs	r3, #10
 800773a:	b2da      	uxtb	r2, r3
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	1c59      	adds	r1, r3, #1
 8007740:	6379      	str	r1, [r7, #52]	; 0x34
 8007742:	3338      	adds	r3, #56	; 0x38
 8007744:	443b      	add	r3, r7
 8007746:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800774a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800774e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007752:	f7f9 fa49 	bl	8000be8 <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800775e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007762:	4313      	orrs	r3, r2
 8007764:	d003      	beq.n	800776e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007768:	2b1f      	cmp	r3, #31
 800776a:	d800      	bhi.n	800776e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800776c:	e7c6      	b.n	80076fc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800776e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007772:	9206      	str	r2, [sp, #24]
 8007774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007776:	9205      	str	r2, [sp, #20]
 8007778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800777a:	9204      	str	r2, [sp, #16]
 800777c:	9303      	str	r3, [sp, #12]
 800777e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	f107 0310 	add.w	r3, r7, #16
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff fe54 	bl	8007442 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800779a:	4603      	mov	r3, r0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3738      	adds	r7, #56	; 0x38
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	0000      	movs	r0, r0
	...

080077a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b09d      	sub	sp, #116	; 0x74
 80077ac:	af04      	add	r7, sp, #16
 80077ae:	6178      	str	r0, [r7, #20]
 80077b0:	6139      	str	r1, [r7, #16]
 80077b2:	60fa      	str	r2, [r7, #12]
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80077ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d2:	f7f9 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10f      	bne.n	80077fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80077dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	2303      	movs	r3, #3
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	4ba7      	ldr	r3, [pc, #668]	; (8007a88 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	6939      	ldr	r1, [r7, #16]
 80077f2:	6978      	ldr	r0, [r7, #20]
 80077f4:	f7ff fdd5 	bl	80073a2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 80077f8:	4603      	mov	r3, r0
 80077fa:	e230      	b.n	8007c5e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 80077fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007800:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8007804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007808:	f7f9 f968 	bl	8000adc <__aeabi_dcmplt>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00f      	beq.n	8007832 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8007812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007818:	9302      	str	r3, [sp, #8]
 800781a:	2304      	movs	r3, #4
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	4b9b      	ldr	r3, [pc, #620]	; (8007a8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	6939      	ldr	r1, [r7, #16]
 8007828:	6978      	ldr	r0, [r7, #20]
 800782a:	f7ff fdba 	bl	80073a2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800782e:	4603      	mov	r3, r0
 8007830:	e215      	b.n	8007c5e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 8007832:	f04f 32ff 	mov.w	r2, #4294967295
 8007836:	4b96      	ldr	r3, [pc, #600]	; (8007a90 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8007838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800783c:	f7f9 f96c 	bl	8000b18 <__aeabi_dcmpgt>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01d      	beq.n	8007882 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8007846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8007850:	4b90      	ldr	r3, [pc, #576]	; (8007a94 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8007852:	e000      	b.n	8007856 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8007854:	4b90      	ldr	r3, [pc, #576]	; (8007a98 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8007856:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007858:	f002 0204 	and.w	r2, r2, #4
 800785c:	2a00      	cmp	r2, #0
 800785e:	d001      	beq.n	8007864 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8007860:	2204      	movs	r2, #4
 8007862:	e000      	b.n	8007866 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8007864:	2203      	movs	r2, #3
 8007866:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007868:	9103      	str	r1, [sp, #12]
 800786a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800786c:	9102      	str	r1, [sp, #8]
 800786e:	9201      	str	r2, [sp, #4]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	6939      	ldr	r1, [r7, #16]
 8007878:	6978      	ldr	r0, [r7, #20]
 800787a:	f7ff fd92 	bl	80073a2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800787e:	4603      	mov	r3, r0
 8007880:	e1ed      	b.n	8007c5e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8007882:	a37d      	add	r3, pc, #500	; (adr r3, 8007a78 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800788c:	f7f9 f944 	bl	8000b18 <__aeabi_dcmpgt>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8007896:	a37a      	add	r3, pc, #488	; (adr r3, 8007a80 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a0:	f7f9 f91c 	bl	8000adc <__aeabi_dcmplt>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00f      	beq.n	80078ca <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80078aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	ed97 0b00 	vldr	d0, [r7]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	6939      	ldr	r1, [r7, #16]
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	f000 f9d5 	bl	8007c70 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 80078c6:	4603      	mov	r3, r0
 80078c8:	e1c9      	b.n	8007c5e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80078ca:	2300      	movs	r3, #0
 80078cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078dc:	f7f9 f8fe 	bl	8000adc <__aeabi_dcmplt>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00e      	beq.n	8007904 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80078ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f0:	f04f 0000 	mov.w	r0, #0
 80078f4:	f04f 0100 	mov.w	r1, #0
 80078f8:	f7f8 fcc6 	bl	8000288 <__aeabi_dsub>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8007904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800790e:	2306      	movs	r3, #6
 8007910:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8007912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007914:	2b1f      	cmp	r3, #31
 8007916:	d80e      	bhi.n	8007936 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 8007918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800791a:	2b09      	cmp	r3, #9
 800791c:	d90b      	bls.n	8007936 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800791e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007924:	3360      	adds	r3, #96	; 0x60
 8007926:	443b      	add	r3, r7
 8007928:	2230      	movs	r2, #48	; 0x30
 800792a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800792e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007930:	3b01      	subs	r3, #1
 8007932:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8007934:	e7ed      	b.n	8007912 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 8007936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800793a:	f7f9 f90d 	bl	8000b58 <__aeabi_d2iz>
 800793e:	4603      	mov	r3, r0
 8007940:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8007942:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007944:	f7f8 fdee 	bl	8000524 <__aeabi_i2d>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007950:	f7f8 fc9a 	bl	8000288 <__aeabi_dsub>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4610      	mov	r0, r2
 800795a:	4619      	mov	r1, r3
 800795c:	4a4f      	ldr	r2, [pc, #316]	; (8007a9c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800795e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4413      	add	r3, r2
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f7f8 fe46 	bl	80005f8 <__aeabi_dmul>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8007974:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007978:	f7f9 f916 	bl	8000ba8 <__aeabi_d2uiz>
 800797c:	4603      	mov	r3, r0
 800797e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8007980:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007982:	f7f8 fdbf 	bl	8000504 <__aeabi_ui2d>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800798e:	f7f8 fc7b 	bl	8000288 <__aeabi_dsub>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	4b40      	ldr	r3, [pc, #256]	; (8007aa0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 80079a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079a4:	f7f9 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d016      	beq.n	80079dc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 80079ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b0:	3301      	adds	r3, #1
 80079b2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80079b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80079b6:	f7f8 fda5 	bl	8000504 <__aeabi_ui2d>
 80079ba:	4a38      	ldr	r2, [pc, #224]	; (8007a9c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 80079bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	4413      	add	r3, r2
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f9 f89d 	bl	8000b04 <__aeabi_dcmpge>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01a      	beq.n	8007a06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80079d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d6:	3301      	adds	r3, #1
 80079d8:	657b      	str	r3, [r7, #84]	; 0x54
 80079da:	e014      	b.n	8007a06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	4b2f      	ldr	r3, [pc, #188]	; (8007aa0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 80079e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079e6:	f7f9 f879 	bl	8000adc <__aeabi_dcmplt>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80079f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d004      	beq.n	8007a00 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 80079f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8007a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a02:	3301      	adds	r3, #1
 8007a04:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8007a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d14b      	bne.n	8007aa4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 8007a0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a0e:	f7f8 fd89 	bl	8000524 <__aeabi_i2d>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a1a:	f7f8 fc35 	bl	8000288 <__aeabi_dsub>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8007a26:	2301      	movs	r3, #1
 8007a28:	461c      	mov	r4, r3
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	4b1c      	ldr	r3, [pc, #112]	; (8007aa0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8007a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a34:	f7f9 f852 	bl	8000adc <__aeabi_dcmplt>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	461c      	mov	r4, r3
 8007a42:	b2e3      	uxtb	r3, r4
 8007a44:	f083 0301 	eor.w	r3, r3, #1
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d109      	bne.n	8007a62 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8007a54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a58:	f7f9 f85e 	bl	8000b18 <__aeabi_dcmpgt>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d06d      	beq.n	8007b3e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8007a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d068      	beq.n	8007b3e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8007a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6e:	3301      	adds	r3, #1
 8007a70:	657b      	str	r3, [r7, #84]	; 0x54
 8007a72:	e064      	b.n	8007b3e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8007a74:	f3af 8000 	nop.w
 8007a78:	00000000 	.word	0x00000000
 8007a7c:	41cdcd65 	.word	0x41cdcd65
 8007a80:	00000000 	.word	0x00000000
 8007a84:	c1cdcd65 	.word	0xc1cdcd65
 8007a88:	0800f0d8 	.word	0x0800f0d8
 8007a8c:	0800f0dc 	.word	0x0800f0dc
 8007a90:	7fefffff 	.word	0x7fefffff
 8007a94:	0800f0e4 	.word	0x0800f0e4
 8007a98:	0800f0ec 	.word	0x0800f0ec
 8007a9c:	0800f1b0 	.word	0x0800f1b0
 8007aa0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8007aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aaa:	2b1f      	cmp	r3, #31
 8007aac:	d826      	bhi.n	8007afc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 8007aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8007ab4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ab6:	4b6c      	ldr	r3, [pc, #432]	; (8007c68 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8007ab8:	fba3 2301 	umull	r2, r3, r3, r1
 8007abc:	08da      	lsrs	r2, r3, #3
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	1aca      	subs	r2, r1, r3
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	65f9      	str	r1, [r7, #92]	; 0x5c
 8007ad0:	3230      	adds	r2, #48	; 0x30
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	3360      	adds	r3, #96	; 0x60
 8007ad6:	443b      	add	r3, r7
 8007ad8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8007adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ade:	4a62      	ldr	r2, [pc, #392]	; (8007c68 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8007ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae4:	08db      	lsrs	r3, r3, #3
 8007ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf0c      	ite	eq
 8007aee:	2301      	moveq	r3, #1
 8007af0:	2300      	movne	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d100      	bne.n	8007afa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007af8:	e7d6      	b.n	8007aa8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 8007afa:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8007afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afe:	2b1f      	cmp	r3, #31
 8007b00:	d806      	bhi.n	8007b10 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8007b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 8007b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007b1c:	3360      	adds	r3, #96	; 0x60
 8007b1e:	443b      	add	r3, r7
 8007b20:	2230      	movs	r2, #48	; 0x30
 8007b22:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8007b26:	e7e9      	b.n	8007afc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2a:	2b1f      	cmp	r3, #31
 8007b2c:	d807      	bhi.n	8007b3e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 8007b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007b34:	3360      	adds	r3, #96	; 0x60
 8007b36:	443b      	add	r3, r7
 8007b38:	222e      	movs	r2, #46	; 0x2e
 8007b3a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b40:	2b1f      	cmp	r3, #31
 8007b42:	d827      	bhi.n	8007b94 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 8007b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b46:	4b49      	ldr	r3, [pc, #292]	; (8007c6c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8007b48:	fb83 1302 	smull	r1, r3, r3, r2
 8007b4c:	1099      	asrs	r1, r3, #2
 8007b4e:	17d3      	asrs	r3, r2, #31
 8007b50:	1ac9      	subs	r1, r1, r3
 8007b52:	460b      	mov	r3, r1
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	1ad1      	subs	r1, r2, r3
 8007b5c:	b2ca      	uxtb	r2, r1
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b60:	1c59      	adds	r1, r3, #1
 8007b62:	65f9      	str	r1, [r7, #92]	; 0x5c
 8007b64:	3230      	adds	r2, #48	; 0x30
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	3360      	adds	r3, #96	; 0x60
 8007b6a:	443b      	add	r3, r7
 8007b6c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8007b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b72:	4a3e      	ldr	r2, [pc, #248]	; (8007c6c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8007b74:	fb82 1203 	smull	r1, r2, r2, r3
 8007b78:	1092      	asrs	r2, r2, #2
 8007b7a:	17db      	asrs	r3, r3, #31
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf0c      	ite	eq
 8007b86:	2301      	moveq	r3, #1
 8007b88:	2300      	movne	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d100      	bne.n	8007b92 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007b90:	e7d5      	b.n	8007b3e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 8007b92:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8007b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d123      	bne.n	8007be6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8007b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01e      	beq.n	8007be6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8007ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 8007bae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 8007bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb8:	f003 030c 	and.w	r3, r3, #12
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 8007bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8007bc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d20b      	bcs.n	8007be6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8007bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd0:	2b1f      	cmp	r3, #31
 8007bd2:	d808      	bhi.n	8007be6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 8007bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007bda:	3360      	adds	r3, #96	; 0x60
 8007bdc:	443b      	add	r3, r7
 8007bde:	2230      	movs	r2, #48	; 0x30
 8007be0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8007be4:	e7ef      	b.n	8007bc6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007be8:	2b1f      	cmp	r3, #31
 8007bea:	d827      	bhi.n	8007c3c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 8007bec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 8007bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007bfa:	3360      	adds	r3, #96	; 0x60
 8007bfc:	443b      	add	r3, r7
 8007bfe:	222d      	movs	r2, #45	; 0x2d
 8007c00:	f803 2c48 	strb.w	r2, [r3, #-72]
 8007c04:	e01a      	b.n	8007c3c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 8007c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8007c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007c16:	3360      	adds	r3, #96	; 0x60
 8007c18:	443b      	add	r3, r7
 8007c1a:	222b      	movs	r2, #43	; 0x2b
 8007c1c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8007c20:	e00c      	b.n	8007c3c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 8007c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 8007c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007c32:	3360      	adds	r3, #96	; 0x60
 8007c34:	443b      	add	r3, r7
 8007c36:	2220      	movs	r2, #32
 8007c38:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8007c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3e:	9303      	str	r3, [sp, #12]
 8007c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	f107 0318 	add.w	r3, r7, #24
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	6939      	ldr	r1, [r7, #16]
 8007c54:	6978      	ldr	r0, [r7, #20]
 8007c56:	f7ff fba4 	bl	80073a2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	bf00      	nop
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3764      	adds	r7, #100	; 0x64
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd90      	pop	{r4, r7, pc}
 8007c66:	bf00      	nop
 8007c68:	cccccccd 	.word	0xcccccccd
 8007c6c:	66666667 	.word	0x66666667

08007c70 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	b09f      	sub	sp, #124	; 0x7c
 8007c76:	af06      	add	r7, sp, #24
 8007c78:	6278      	str	r0, [r7, #36]	; 0x24
 8007c7a:	6239      	str	r1, [r7, #32]
 8007c7c:	61fa      	str	r2, [r7, #28]
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8007c84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c8c:	f7f8 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d014      	beq.n	8007cc0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	4bc1      	ldr	r3, [pc, #772]	; (8007fa0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 8007c9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ca0:	f7f8 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8007caa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cae:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8007cb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cb6:	f7f8 ff11 	bl	8000adc <__aeabi_dcmplt>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d012      	beq.n	8007ce6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8007cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	ed97 0b04 	vldr	d0, [r7, #16]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	6a39      	ldr	r1, [r7, #32]
 8007cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cde:	f7ff fd63 	bl	80077a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	e23f      	b.n	8008166 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	461e      	mov	r6, r3
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cf6:	f7f8 fef1 	bl	8000adc <__aeabi_dcmplt>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 8007d00:	2300      	movs	r3, #0
 8007d02:	461e      	mov	r6, r3
 8007d04:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8007d08:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	ed97 7b00 	vldr	d7, [r7]
 8007d20:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8007d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8007d30:	2306      	movs	r3, #6
 8007d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8007d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8007d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	0d0a      	lsrs	r2, r1, #20
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4613      	mov	r3, r2
 8007d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8007d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d5e:	4690      	mov	r8, r2
 8007d60:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8007d64:	4644      	mov	r4, r8
 8007d66:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8007d6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d6e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8007d72:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007d74:	f7f8 fbd6 	bl	8000524 <__aeabi_i2d>
 8007d78:	a37d      	add	r3, pc, #500	; (adr r3, 8007f70 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fc3b 	bl	80005f8 <__aeabi_dmul>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	a37b      	add	r3, pc, #492	; (adr r3, 8007f78 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fa7c 	bl	800028c <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	4b7f      	ldr	r3, [pc, #508]	; (8007fa4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 8007da6:	f7f8 fa6f 	bl	8000288 <__aeabi_dsub>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4610      	mov	r0, r2
 8007db0:	4619      	mov	r1, r3
 8007db2:	a373      	add	r3, pc, #460	; (adr r3, 8007f80 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 fa62 	bl	800028c <__adddf3>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f7f8 fec2 	bl	8000b58 <__aeabi_d2iz>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8007dd8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007dda:	f7f8 fba3 	bl	8000524 <__aeabi_i2d>
 8007dde:	a36a      	add	r3, pc, #424	; (adr r3, 8007f88 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f7f8 fc08 	bl	80005f8 <__aeabi_dmul>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4610      	mov	r0, r2
 8007dee:	4619      	mov	r1, r3
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	4b6c      	ldr	r3, [pc, #432]	; (8007fa8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 8007df6:	f7f8 fa49 	bl	800028c <__adddf3>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7f8 fea9 	bl	8000b58 <__aeabi_d2iz>
 8007e06:	4603      	mov	r3, r0
 8007e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8007e0a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007e0c:	f7f8 fb8a 	bl	8000524 <__aeabi_i2d>
 8007e10:	a35f      	add	r3, pc, #380	; (adr r3, 8007f90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f7f8 fbef 	bl	80005f8 <__aeabi_dmul>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4614      	mov	r4, r2
 8007e20:	461d      	mov	r5, r3
 8007e22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007e24:	f7f8 fb7e 	bl	8000524 <__aeabi_i2d>
 8007e28:	a35b      	add	r3, pc, #364	; (adr r3, 8007f98 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fbe3 	bl	80005f8 <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fa25 	bl	8000288 <__aeabi_dsub>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8007e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e4e:	f7f8 fbd3 	bl	80005f8 <__aeabi_dmul>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8007e60:	17da      	asrs	r2, r3, #31
 8007e62:	469a      	mov	sl, r3
 8007e64:	4693      	mov	fp, r2
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8007e72:	2200      	movs	r2, #0
 8007e74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8007e78:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007e7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	f7f8 fa02 	bl	800028c <__adddf3>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4690      	mov	r8, r2
 8007e8e:	4699      	mov	r9, r3
 8007e90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e94:	f04f 0000 	mov.w	r0, #0
 8007e98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007e9c:	f7f8 f9f4 	bl	8000288 <__aeabi_dsub>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4692      	mov	sl, r2
 8007ea6:	469b      	mov	fp, r3
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 8007eae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007eb2:	f7f8 fccb 	bl	800084c <__aeabi_ddiv>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4610      	mov	r0, r2
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	4b3b      	ldr	r3, [pc, #236]	; (8007fb0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8007ec4:	f7f8 f9e2 	bl	800028c <__adddf3>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007ed0:	f7f8 fcbc 	bl	800084c <__aeabi_ddiv>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4619      	mov	r1, r3
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	4b34      	ldr	r3, [pc, #208]	; (8007fb4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 8007ee2:	f7f8 f9d3 	bl	800028c <__adddf3>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007eee:	f7f8 fcad 	bl	800084c <__aeabi_ddiv>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	4659      	mov	r1, fp
 8007efa:	f7f8 f9c7 	bl	800028c <__adddf3>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4640      	mov	r0, r8
 8007f04:	4649      	mov	r1, r9
 8007f06:	f7f8 fca1 	bl	800084c <__aeabi_ddiv>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4619      	mov	r1, r3
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 8007f18:	f7f8 f9b8 	bl	800028c <__adddf3>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4620      	mov	r0, r4
 8007f22:	4629      	mov	r1, r5
 8007f24:	f7f8 fb68 	bl	80005f8 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8007f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f38:	f7f8 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 8007f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f44:	3b01      	subs	r3, #1
 8007f46:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8007f48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8007f52:	f7f8 fc7b 	bl	800084c <__aeabi_ddiv>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8007f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f60:	2b63      	cmp	r3, #99	; 0x63
 8007f62:	dc2b      	bgt.n	8007fbc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8007f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f66:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007f6a:	db27      	blt.n	8007fbc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	e026      	b.n	8007fbe <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	8b60c8b3 	.word	0x8b60c8b3
 8007f7c:	3fc68a28 	.word	0x3fc68a28
 8007f80:	636f4361 	.word	0x636f4361
 8007f84:	3fd287a7 	.word	0x3fd287a7
 8007f88:	0979a371 	.word	0x0979a371
 8007f8c:	400a934f 	.word	0x400a934f
 8007f90:	bbb55516 	.word	0xbbb55516
 8007f94:	40026bb1 	.word	0x40026bb1
 8007f98:	fefa39ef 	.word	0xfefa39ef
 8007f9c:	3fe62e42 	.word	0x3fe62e42
 8007fa0:	7fefffff 	.word	0x7fefffff
 8007fa4:	3ff80000 	.word	0x3ff80000
 8007fa8:	3fe00000 	.word	0x3fe00000
 8007fac:	402c0000 	.word	0x402c0000
 8007fb0:	40240000 	.word	0x40240000
 8007fb4:	40180000 	.word	0x40180000
 8007fb8:	3ff00000 	.word	0x3ff00000
 8007fbc:	2305      	movs	r3, #5
 8007fbe:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8007fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d03d      	beq.n	8008048 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8007fcc:	a368      	add	r3, pc, #416	; (adr r3, 8008170 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fd6:	f7f8 fd95 	bl	8000b04 <__aeabi_dcmpge>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d024      	beq.n	800802a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 8007fe0:	a365      	add	r3, pc, #404	; (adr r3, 8008178 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fea:	f7f8 fd77 	bl	8000adc <__aeabi_dcmplt>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01a      	beq.n	800802a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 8007ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	da07      	bge.n	800800e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8007ffe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800800c:	e002      	b.n	8008014 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8008014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800801c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008028:	e00e      	b.n	8008048 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800802a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 8008032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800803e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008042:	3b01      	subs	r3, #1
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8008048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800804c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800804e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008054:	429a      	cmp	r2, r3
 8008056:	d904      	bls.n	8008062 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8008058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800805a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	657b      	str	r3, [r7, #84]	; 0x54
 8008060:	e001      	b.n	8008066 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8008066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 8008072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800807c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 8008082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008086:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800808a:	f7f8 fbdf 	bl	800084c <__aeabi_ddiv>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800809a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e003      	b.n	80080b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 80080b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80080b4:	ed87 7b02 	vstr	d7, [r7, #8]
 80080b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080c0:	9302      	str	r3, [sp, #8]
 80080c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	ed97 0b02 	vldr	d0, [r7, #8]
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	6a39      	ldr	r1, [r7, #32]
 80080d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080d8:	f7ff fb66 	bl	80077a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 80080dc:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80080de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d03f      	beq.n	8008164 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80080e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 80080f0:	2045      	movs	r0, #69	; 0x45
 80080f2:	e000      	b.n	80080f6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 80080f4:	2065      	movs	r0, #101	; 0x65
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	1c53      	adds	r3, r2, #1
 80080fa:	61fb      	str	r3, [r7, #28]
 80080fc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6a39      	ldr	r1, [r7, #32]
 8008102:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8008104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfb8      	it	lt
 800810a:	425b      	neglt	r3, r3
 800810c:	4618      	mov	r0, r3
 800810e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008110:	0fdb      	lsrs	r3, r3, #31
 8008112:	b2db      	uxtb	r3, r3
 8008114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008116:	3a01      	subs	r2, #1
 8008118:	2105      	movs	r1, #5
 800811a:	9105      	str	r1, [sp, #20]
 800811c:	9204      	str	r2, [sp, #16]
 800811e:	2200      	movs	r2, #0
 8008120:	9203      	str	r2, [sp, #12]
 8008122:	220a      	movs	r2, #10
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	9000      	str	r0, [sp, #0]
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	6a39      	ldr	r1, [r7, #32]
 8008130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008132:	f7ff fa62 	bl	80075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8008136:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8008138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800814e:	429a      	cmp	r2, r3
 8008150:	d908      	bls.n	8008164 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	1c53      	adds	r3, r2, #1
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	6a39      	ldr	r1, [r7, #32]
 800815e:	2020      	movs	r0, #32
 8008160:	47a0      	blx	r4
 8008162:	e7ef      	b.n	8008144 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 8008164:	69fb      	ldr	r3, [r7, #28]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3764      	adds	r7, #100	; 0x64
 800816a:	46bd      	mov	sp, r7
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	eb1c432d 	.word	0xeb1c432d
 8008174:	3f1a36e2 	.word	0x3f1a36e2
 8008178:	00000000 	.word	0x00000000
 800817c:	412e8480 	.word	0x412e8480

08008180 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	b0a1      	sub	sp, #132	; 0x84
 8008186:	af0a      	add	r7, sp, #40	; 0x28
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800819a:	4ba5      	ldr	r3, [pc, #660]	; (8008430 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800819c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 84ae 	beq.w	8008b04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b25      	cmp	r3, #37	; 0x25
 80081ae:	d00d      	beq.n	80081cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	7818      	ldrb	r0, [r3, #0]
 80081b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081b6:	1c53      	adds	r3, r2, #1
 80081b8:	647b      	str	r3, [r7, #68]	; 0x44
 80081ba:	68fe      	ldr	r6, [r7, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	47b0      	blx	r6
      format++;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	603b      	str	r3, [r7, #0]
      continue;
 80081c8:	f000 bc9a 	b.w	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	3b20      	subs	r3, #32
 80081dc:	2b10      	cmp	r3, #16
 80081de:	d857      	bhi.n	8008290 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	08008269 	.word	0x08008269
 80081ec:	08008291 	.word	0x08008291
 80081f0:	08008291 	.word	0x08008291
 80081f4:	0800827d 	.word	0x0800827d
 80081f8:	08008291 	.word	0x08008291
 80081fc:	08008291 	.word	0x08008291
 8008200:	08008291 	.word	0x08008291
 8008204:	08008291 	.word	0x08008291
 8008208:	08008291 	.word	0x08008291
 800820c:	08008291 	.word	0x08008291
 8008210:	08008291 	.word	0x08008291
 8008214:	08008255 	.word	0x08008255
 8008218:	08008291 	.word	0x08008291
 800821c:	08008241 	.word	0x08008241
 8008220:	08008291 	.word	0x08008291
 8008224:	08008291 	.word	0x08008291
 8008228:	0800822d 	.word	0x0800822d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800822c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	3301      	adds	r3, #1
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	2301      	movs	r3, #1
 800823c:	64bb      	str	r3, [r7, #72]	; 0x48
 800823e:	e02a      	b.n	8008296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8008240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008242:	f043 0302 	orr.w	r3, r3, #2
 8008246:	657b      	str	r3, [r7, #84]	; 0x54
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	603b      	str	r3, [r7, #0]
 800824e:	2301      	movs	r3, #1
 8008250:	64bb      	str	r3, [r7, #72]	; 0x48
 8008252:	e020      	b.n	8008296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8008254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008256:	f043 0304 	orr.w	r3, r3, #4
 800825a:	657b      	str	r3, [r7, #84]	; 0x54
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	603b      	str	r3, [r7, #0]
 8008262:	2301      	movs	r3, #1
 8008264:	64bb      	str	r3, [r7, #72]	; 0x48
 8008266:	e016      	b.n	8008296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8008268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800826a:	f043 0308 	orr.w	r3, r3, #8
 800826e:	657b      	str	r3, [r7, #84]	; 0x54
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	2301      	movs	r3, #1
 8008278:	64bb      	str	r3, [r7, #72]	; 0x48
 800827a:	e00c      	b.n	8008296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800827c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800827e:	f043 0310 	orr.w	r3, r3, #16
 8008282:	657b      	str	r3, [r7, #84]	; 0x54
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	3301      	adds	r3, #1
 8008288:	603b      	str	r3, [r7, #0]
 800828a:	2301      	movs	r3, #1
 800828c:	64bb      	str	r3, [r7, #72]	; 0x48
 800828e:	e002      	b.n	8008296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 8008290:	2300      	movs	r3, #0
 8008292:	64bb      	str	r3, [r7, #72]	; 0x48
 8008294:	bf00      	nop
      }
    } while (n);
 8008296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008298:	2b00      	cmp	r3, #0
 800829a:	d000      	beq.n	800829e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800829c:	e79b      	b.n	80081d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff f843 	bl	8007332 <_ZL9_is_digitc>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 80082b2:	463b      	mov	r3, r7
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff f850 	bl	800735a <_ZL5_atoiPPKc>
 80082ba:	6538      	str	r0, [r7, #80]	; 0x50
 80082bc:	e01a      	b.n	80082f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b2a      	cmp	r3, #42	; 0x2a
 80082c4:	d116      	bne.n	80082f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 80082c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082ca:	1d1a      	adds	r2, r3, #4
 80082cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da07      	bge.n	80082ea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 80082da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082dc:	f043 0302 	orr.w	r3, r3, #2
 80082e0:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	425b      	negs	r3, r3
 80082e6:	653b      	str	r3, [r7, #80]	; 0x50
 80082e8:	e001      	b.n	80082ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b2e      	cmp	r3, #46	; 0x2e
 80082fe:	d126      	bne.n	800834e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 8008300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008306:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	3301      	adds	r3, #1
 800830c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff f80d 	bl	8007332 <_ZL9_is_digitc>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800831e:	463b      	mov	r3, r7
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff f81a 	bl	800735a <_ZL5_atoiPPKc>
 8008326:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008328:	e011      	b.n	800834e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b2a      	cmp	r3, #42	; 0x2a
 8008330:	d10d      	bne.n	800834e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 8008332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008336:	1d1a      	adds	r2, r3, #4
 8008338:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008346:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	3301      	adds	r3, #1
 800834c:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	3b68      	subs	r3, #104	; 0x68
 8008354:	2b12      	cmp	r3, #18
 8008356:	d867      	bhi.n	8008428 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 8008358:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	080083d3 	.word	0x080083d3
 8008364:	08008429 	.word	0x08008429
 8008368:	08008409 	.word	0x08008409
 800836c:	08008429 	.word	0x08008429
 8008370:	080083ad 	.word	0x080083ad
 8008374:	08008429 	.word	0x08008429
 8008378:	08008429 	.word	0x08008429
 800837c:	08008429 	.word	0x08008429
 8008380:	08008429 	.word	0x08008429
 8008384:	08008429 	.word	0x08008429
 8008388:	08008429 	.word	0x08008429
 800838c:	08008429 	.word	0x08008429
 8008390:	080083f9 	.word	0x080083f9
 8008394:	08008429 	.word	0x08008429
 8008398:	08008429 	.word	0x08008429
 800839c:	08008429 	.word	0x08008429
 80083a0:	08008429 	.word	0x08008429
 80083a4:	08008429 	.word	0x08008429
 80083a8:	08008419 	.word	0x08008419
      case 'l' :
        flags |= FLAGS_LONG;
 80083ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b6c      	cmp	r3, #108	; 0x6c
 80083c0:	d134      	bne.n	800842c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 80083c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083c8:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	3301      	adds	r3, #1
 80083ce:	603b      	str	r3, [r7, #0]
        }
        break;
 80083d0:	e02c      	b.n	800842c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 80083d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d8:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b68      	cmp	r3, #104	; 0x68
 80083e6:	d125      	bne.n	8008434 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 80083e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ee:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	603b      	str	r3, [r7, #0]
        }
        break;
 80083f6:	e01d      	b.n	8008434 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80083f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083fe:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	3301      	adds	r3, #1
 8008404:	603b      	str	r3, [r7, #0]
        break;
 8008406:	e016      	b.n	8008436 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800840a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800840e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	603b      	str	r3, [r7, #0]
        break;
 8008416:	e00e      	b.n	8008436 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800841a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800841e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	603b      	str	r3, [r7, #0]
        break;
 8008426:	e006      	b.n	8008436 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 8008428:	bf00      	nop
 800842a:	e004      	b.n	8008436 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800842c:	bf00      	nop
 800842e:	e002      	b.n	8008436 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 8008430:	080072ad 	.word	0x080072ad
        break;
 8008434:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	3b25      	subs	r3, #37	; 0x25
 800843c:	2b53      	cmp	r3, #83	; 0x53
 800843e:	f200 8352 	bhi.w	8008ae6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 8008442:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	08008acf 	.word	0x08008acf
 800844c:	08008ae7 	.word	0x08008ae7
 8008450:	08008ae7 	.word	0x08008ae7
 8008454:	08008ae7 	.word	0x08008ae7
 8008458:	08008ae7 	.word	0x08008ae7
 800845c:	08008ae7 	.word	0x08008ae7
 8008460:	08008ae7 	.word	0x08008ae7
 8008464:	08008ae7 	.word	0x08008ae7
 8008468:	08008ae7 	.word	0x08008ae7
 800846c:	08008ae7 	.word	0x08008ae7
 8008470:	08008ae7 	.word	0x08008ae7
 8008474:	08008ae7 	.word	0x08008ae7
 8008478:	08008ae7 	.word	0x08008ae7
 800847c:	08008ae7 	.word	0x08008ae7
 8008480:	08008ae7 	.word	0x08008ae7
 8008484:	08008ae7 	.word	0x08008ae7
 8008488:	08008ae7 	.word	0x08008ae7
 800848c:	08008ae7 	.word	0x08008ae7
 8008490:	08008ae7 	.word	0x08008ae7
 8008494:	08008ae7 	.word	0x08008ae7
 8008498:	08008ae7 	.word	0x08008ae7
 800849c:	08008ae7 	.word	0x08008ae7
 80084a0:	08008ae7 	.word	0x08008ae7
 80084a4:	08008ae7 	.word	0x08008ae7
 80084a8:	08008ae7 	.word	0x08008ae7
 80084ac:	08008ae7 	.word	0x08008ae7
 80084b0:	08008ae7 	.word	0x08008ae7
 80084b4:	08008ae7 	.word	0x08008ae7
 80084b8:	08008ae7 	.word	0x08008ae7
 80084bc:	08008ae7 	.word	0x08008ae7
 80084c0:	08008ae7 	.word	0x08008ae7
 80084c4:	08008ae7 	.word	0x08008ae7
 80084c8:	0800889d 	.word	0x0800889d
 80084cc:	0800884d 	.word	0x0800884d
 80084d0:	0800889d 	.word	0x0800889d
 80084d4:	08008ae7 	.word	0x08008ae7
 80084d8:	08008ae7 	.word	0x08008ae7
 80084dc:	08008ae7 	.word	0x08008ae7
 80084e0:	08008ae7 	.word	0x08008ae7
 80084e4:	08008ae7 	.word	0x08008ae7
 80084e8:	08008ae7 	.word	0x08008ae7
 80084ec:	08008ae7 	.word	0x08008ae7
 80084f0:	08008ae7 	.word	0x08008ae7
 80084f4:	08008ae7 	.word	0x08008ae7
 80084f8:	08008ae7 	.word	0x08008ae7
 80084fc:	08008ae7 	.word	0x08008ae7
 8008500:	08008ae7 	.word	0x08008ae7
 8008504:	08008ae7 	.word	0x08008ae7
 8008508:	08008ae7 	.word	0x08008ae7
 800850c:	08008ae7 	.word	0x08008ae7
 8008510:	08008ae7 	.word	0x08008ae7
 8008514:	08008599 	.word	0x08008599
 8008518:	08008ae7 	.word	0x08008ae7
 800851c:	08008ae7 	.word	0x08008ae7
 8008520:	08008ae7 	.word	0x08008ae7
 8008524:	08008ae7 	.word	0x08008ae7
 8008528:	08008ae7 	.word	0x08008ae7
 800852c:	08008ae7 	.word	0x08008ae7
 8008530:	08008ae7 	.word	0x08008ae7
 8008534:	08008ae7 	.word	0x08008ae7
 8008538:	08008ae7 	.word	0x08008ae7
 800853c:	08008599 	.word	0x08008599
 8008540:	0800890d 	.word	0x0800890d
 8008544:	08008599 	.word	0x08008599
 8008548:	0800889d 	.word	0x0800889d
 800854c:	0800884d 	.word	0x0800884d
 8008550:	0800889d 	.word	0x0800889d
 8008554:	08008ae7 	.word	0x08008ae7
 8008558:	08008599 	.word	0x08008599
 800855c:	08008ae7 	.word	0x08008ae7
 8008560:	08008ae7 	.word	0x08008ae7
 8008564:	08008ae7 	.word	0x08008ae7
 8008568:	08008ae7 	.word	0x08008ae7
 800856c:	08008ae7 	.word	0x08008ae7
 8008570:	08008599 	.word	0x08008599
 8008574:	08008a83 	.word	0x08008a83
 8008578:	08008ae7 	.word	0x08008ae7
 800857c:	08008ae7 	.word	0x08008ae7
 8008580:	08008999 	.word	0x08008999
 8008584:	08008ae7 	.word	0x08008ae7
 8008588:	08008599 	.word	0x08008599
 800858c:	08008ae7 	.word	0x08008ae7
 8008590:	08008ae7 	.word	0x08008ae7
 8008594:	08008599 	.word	0x08008599
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b78      	cmp	r3, #120	; 0x78
 800859e:	d003      	beq.n	80085a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b58      	cmp	r3, #88	; 0x58
 80085a6:	d102      	bne.n	80085ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 80085a8:	2310      	movs	r3, #16
 80085aa:	643b      	str	r3, [r7, #64]	; 0x40
 80085ac:	e013      	b.n	80085d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b6f      	cmp	r3, #111	; 0x6f
 80085b4:	d102      	bne.n	80085bc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 80085b6:	2308      	movs	r3, #8
 80085b8:	643b      	str	r3, [r7, #64]	; 0x40
 80085ba:	e00c      	b.n	80085d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b62      	cmp	r3, #98	; 0x62
 80085c2:	d102      	bne.n	80085ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 80085c4:	2302      	movs	r3, #2
 80085c6:	643b      	str	r3, [r7, #64]	; 0x40
 80085c8:	e005      	b.n	80085d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 80085ca:	230a      	movs	r3, #10
 80085cc:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80085ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d0:	f023 0310 	bic.w	r3, r3, #16
 80085d4:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b58      	cmp	r3, #88	; 0x58
 80085dc:	d103      	bne.n	80085e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 80085de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e0:	f043 0320 	orr.w	r3, r3, #32
 80085e4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b69      	cmp	r3, #105	; 0x69
 80085ec:	d007      	beq.n	80085fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b64      	cmp	r3, #100	; 0x64
 80085f4:	d003      	beq.n	80085fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80085f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f8:	f023 030c 	bic.w	r3, r3, #12
 80085fc:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80085fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 8008608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860a:	f023 0301 	bic.w	r3, r3, #1
 800860e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b69      	cmp	r3, #105	; 0x69
 8008616:	d004      	beq.n	8008622 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b64      	cmp	r3, #100	; 0x64
 800861e:	f040 8097 	bne.w	8008750 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8008622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008628:	2b00      	cmp	r3, #0
 800862a:	d030      	beq.n	800868e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800862c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008630:	3307      	adds	r3, #7
 8008632:	f023 0307 	bic.w	r3, r3, #7
 8008636:	f103 0208 	add.w	r2, r3, #8
 800863a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008646:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	da05      	bge.n	800865a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800864e:	2100      	movs	r1, #0
 8008650:	4254      	negs	r4, r2
 8008652:	eb61 0503 	sbc.w	r5, r1, r3
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	0fc9      	lsrs	r1, r1, #31
 800865e:	b2c9      	uxtb	r1, r1
 8008660:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008662:	2600      	movs	r6, #0
 8008664:	4680      	mov	r8, r0
 8008666:	46b1      	mov	r9, r6
 8008668:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800866a:	9008      	str	r0, [sp, #32]
 800866c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800866e:	9007      	str	r0, [sp, #28]
 8008670:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008672:	9006      	str	r0, [sp, #24]
 8008674:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008678:	9102      	str	r1, [sp, #8]
 800867a:	e9cd 2300 	strd	r2, r3, [sp]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff f81f 	bl	80076c8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800868a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800868c:	e0da      	b.n	8008844 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800868e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008694:	2b00      	cmp	r3, #0
 8008696:	d020      	beq.n	80086da <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 8008698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bfb8      	it	lt
 80086ac:	425b      	neglt	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	0fdb      	lsrs	r3, r3, #31
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086b8:	9205      	str	r2, [sp, #20]
 80086ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086bc:	9204      	str	r2, [sp, #16]
 80086be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c0:	9203      	str	r2, [sp, #12]
 80086c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086c4:	9202      	str	r2, [sp, #8]
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	9100      	str	r1, [sp, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7fe ff92 	bl	80075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80086d6:	6478      	str	r0, [r7, #68]	; 0x44
          }
 80086d8:	e0b4      	b.n	8008844 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80086da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 80086e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	e012      	b.n	800871a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 80086f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 80086fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008702:	1d1a      	adds	r2, r3, #4
 8008704:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	b21b      	sxth	r3, r3
 800870c:	e005      	b.n	800871a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800870e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008712:	1d1a      	adds	r2, r3, #4
 8008714:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfb8      	it	lt
 8008722:	425b      	neglt	r3, r3
 8008724:	4619      	mov	r1, r3
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	0fdb      	lsrs	r3, r3, #31
 800872a:	b2db      	uxtb	r3, r3
 800872c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800872e:	9205      	str	r2, [sp, #20]
 8008730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008732:	9204      	str	r2, [sp, #16]
 8008734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008736:	9203      	str	r2, [sp, #12]
 8008738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800873a:	9202      	str	r2, [sp, #8]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	9100      	str	r1, [sp, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7fe ff57 	bl	80075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800874c:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800874e:	e079      	b.n	8008844 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8008750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008756:	2b00      	cmp	r3, #0
 8008758:	d022      	beq.n	80087a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800875a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800875e:	3307      	adds	r3, #7
 8008760:	f023 0307 	bic.w	r3, r3, #7
 8008764:	f103 0208 	add.w	r2, r3, #8
 8008768:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008772:	2000      	movs	r0, #0
 8008774:	468a      	mov	sl, r1
 8008776:	4683      	mov	fp, r0
 8008778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800877a:	9108      	str	r1, [sp, #32]
 800877c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800877e:	9107      	str	r1, [sp, #28]
 8008780:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008782:	9106      	str	r1, [sp, #24]
 8008784:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8008788:	2100      	movs	r1, #0
 800878a:	9102      	str	r1, [sp, #8]
 800878c:	e9cd 2300 	strd	r2, r3, [sp]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7fe ff96 	bl	80076c8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800879c:	6478      	str	r0, [r7, #68]	; 0x44
 800879e:	e051      	b.n	8008844 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80087a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d018      	beq.n	80087dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80087aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087b8:	9205      	str	r2, [sp, #20]
 80087ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087bc:	9204      	str	r2, [sp, #16]
 80087be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087c0:	9203      	str	r2, [sp, #12]
 80087c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087c4:	9202      	str	r2, [sp, #8]
 80087c6:	2200      	movs	r2, #0
 80087c8:	9201      	str	r2, [sp, #4]
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7fe ff11 	bl	80075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80087d8:	6478      	str	r0, [r7, #68]	; 0x44
 80087da:	e033      	b.n	8008844 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80087dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 80087e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087ea:	1d1a      	adds	r2, r3, #4
 80087ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	e012      	b.n	800881c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 80087f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 8008800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	e005      	b.n	800881c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8008810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008814:	1d1a      	adds	r2, r3, #4
 8008816:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800881e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008820:	9305      	str	r3, [sp, #20]
 8008822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	9303      	str	r3, [sp, #12]
 800882a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882c:	9302      	str	r3, [sp, #8]
 800882e:	2300      	movs	r3, #0
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7fe fedc 	bl	80075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8008842:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	603b      	str	r3, [r7, #0]
        break;
 800884a:	e159      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b46      	cmp	r3, #70	; 0x46
 8008852:	d103      	bne.n	800885c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 8008854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008856:	f043 0320 	orr.w	r3, r3, #32
 800885a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800885c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008860:	3307      	adds	r3, #7
 8008862:	f023 0307 	bic.w	r3, r3, #7
 8008866:	f103 0208 	add.w	r2, r3, #8
 800886a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800886e:	ed93 7b00 	vldr	d7, [r3]
 8008872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008874:	9302      	str	r3, [sp, #8]
 8008876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	eeb0 0a47 	vmov.f32	s0, s14
 8008882:	eef0 0a67 	vmov.f32	s1, s15
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7fe ff8b 	bl	80077a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8008892:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	603b      	str	r3, [r7, #0]
        break;
 800889a:	e131      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b67      	cmp	r3, #103	; 0x67
 80088a2:	d003      	beq.n	80088ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b47      	cmp	r3, #71	; 0x47
 80088aa:	d103      	bne.n	80088b4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 80088ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80088b2:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b45      	cmp	r3, #69	; 0x45
 80088ba:	d003      	beq.n	80088c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b47      	cmp	r3, #71	; 0x47
 80088c2:	d103      	bne.n	80088cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 80088c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c6:	f043 0320 	orr.w	r3, r3, #32
 80088ca:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80088cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088d0:	3307      	adds	r3, #7
 80088d2:	f023 0307 	bic.w	r3, r3, #7
 80088d6:	f103 0208 	add.w	r2, r3, #8
 80088da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088de:	ed93 7b00 	vldr	d7, [r3]
 80088e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e4:	9302      	str	r3, [sp, #8]
 80088e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	eeb0 0a47 	vmov.f32	s0, s14
 80088f2:	eef0 0a67 	vmov.f32	s1, s15
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff f9b7 	bl	8007c70 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8008902:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	603b      	str	r3, [r7, #0]
        break;
 800890a:	e0f9      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800890c:	2301      	movs	r3, #1
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8008910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d113      	bne.n	8008942 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800891a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008922:	429a      	cmp	r2, r3
 8008924:	bf8c      	ite	hi
 8008926:	2301      	movhi	r3, #1
 8008928:	2300      	movls	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8008930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008932:	1c53      	adds	r3, r2, #1
 8008934:	647b      	str	r3, [r7, #68]	; 0x44
 8008936:	68fe      	ldr	r6, [r7, #12]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	2020      	movs	r0, #32
 800893e:	47b0      	blx	r6
          while (l++ < width) {
 8008940:	e7eb      	b.n	800891a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8008942:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008946:	1d1a      	adds	r2, r3, #4
 8008948:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	b2d8      	uxtb	r0, r3
 8008950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008952:	1c53      	adds	r3, r2, #1
 8008954:	647b      	str	r3, [r7, #68]	; 0x44
 8008956:	68fe      	ldr	r6, [r7, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800895e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d013      	beq.n	8008990 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8008968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800896e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008970:	429a      	cmp	r2, r3
 8008972:	bf8c      	ite	hi
 8008974:	2301      	movhi	r3, #1
 8008976:	2300      	movls	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800897e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008980:	1c53      	adds	r3, r2, #1
 8008982:	647b      	str	r3, [r7, #68]	; 0x44
 8008984:	68fe      	ldr	r6, [r7, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	2020      	movs	r0, #32
 800898c:	47b0      	blx	r6
          while (l++ < width) {
 800898e:	e7eb      	b.n	8008968 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	3301      	adds	r3, #1
 8008994:	603b      	str	r3, [r7, #0]
        break;
 8008996:	e0b3      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8008998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800899c:	1d1a      	adds	r2, r3, #4
 800899e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80089a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	e001      	b.n	80089b4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	4619      	mov	r1, r3
 80089b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089b8:	f7fe fc99 	bl	80072ee <_ZL10_strnlen_sPKcj>
 80089bc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80089be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d007      	beq.n	80089d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 80089c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d201      	bcs.n	80089d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	e000      	b.n	80089d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80089d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d113      	bne.n	8008a0a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	637a      	str	r2, [r7, #52]	; 0x34
 80089e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ea:	429a      	cmp	r2, r3
 80089ec:	bf8c      	ite	hi
 80089ee:	2301      	movhi	r3, #1
 80089f0:	2300      	movls	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d008      	beq.n	8008a0a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 80089f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fa:	1c53      	adds	r3, r2, #1
 80089fc:	647b      	str	r3, [r7, #68]	; 0x44
 80089fe:	68fe      	ldr	r6, [r7, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	2020      	movs	r0, #32
 8008a06:	47b0      	blx	r6
          while (l++ < width) {
 8008a08:	e7eb      	b.n	80089e2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8008a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8008a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1e:	1e5a      	subs	r2, r3, #1
 8008a20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a36:	7818      	ldrb	r0, [r3, #0]
 8008a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a3a:	1c53      	adds	r3, r2, #1
 8008a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a3e:	68fe      	ldr	r6, [r7, #12]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008a46:	e7e0      	b.n	8008a0a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8008a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d013      	beq.n	8008a7a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	637a      	str	r2, [r7, #52]	; 0x34
 8008a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	bf8c      	ite	hi
 8008a5e:	2301      	movhi	r3, #1
 8008a60:	2300      	movls	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d008      	beq.n	8008a7a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8008a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a6a:	1c53      	adds	r3, r2, #1
 8008a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a6e:	68fe      	ldr	r6, [r7, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	2020      	movs	r0, #32
 8008a76:	47b0      	blx	r6
          while (l++ < width) {
 8008a78:	e7eb      	b.n	8008a52 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	603b      	str	r3, [r7, #0]
        break;
 8008a80:	e03e      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8008a82:	2308      	movs	r3, #8
 8008a84:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8008a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a88:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8008a8c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8008a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a98:	1d1a      	adds	r2, r3, #4
 8008a9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	2310      	movs	r3, #16
 8008ab0:	9302      	str	r3, [sp, #8]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	9200      	str	r2, [sp, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7fe fd9b 	bl	80075fa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8008ac4:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	603b      	str	r3, [r7, #0]
        break;
 8008acc:	e018      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8008ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ad0:	1c53      	adds	r3, r2, #1
 8008ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad4:	68fe      	ldr	r6, [r7, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	2025      	movs	r0, #37	; 0x25
 8008adc:	47b0      	blx	r6
        format++;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	603b      	str	r3, [r7, #0]
        break;
 8008ae4:	e00c      	b.n	8008b00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	7818      	ldrb	r0, [r3, #0]
 8008aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aec:	1c53      	adds	r3, r2, #1
 8008aee:	647b      	str	r3, [r7, #68]	; 0x44
 8008af0:	68fe      	ldr	r6, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	47b0      	blx	r6
        format++;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	603b      	str	r3, [r7, #0]
        break;
 8008afe:	bf00      	nop
  while (*format)
 8008b00:	f7ff bb4d 	b.w	800819e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8008b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	1e5a      	subs	r2, r3, #1
 8008b10:	e000      	b.n	8008b14 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8008b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b14:	68fc      	ldr	r4, [r7, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8008b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	375c      	adds	r7, #92	; 0x5c
 8008b24:	46bd      	mov	sp, r7
 8008b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2a:	bf00      	nop

08008b2c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8008b2c:	b40f      	push	{r0, r1, r2, r3}
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b086      	sub	sp, #24
 8008b32:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8008b34:	f107 031c 	add.w	r3, r7, #28
 8008b38:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8008b3a:	1d39      	adds	r1, r7, #4
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f04f 32ff 	mov.w	r2, #4294967295
 8008b46:	4806      	ldr	r0, [pc, #24]	; (8008b60 <printf_+0x34>)
 8008b48:	f7ff fb1a 	bl	8008180 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8008b4c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b5a:	b004      	add	sp, #16
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	080072c9 	.word	0x080072c9

08008b64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008b6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008b70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8008b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008b80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8008b84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <ITM_SendChar+0x2c>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <ITM_SendChar+0x2e>
 8008b90:	2300      	movs	r3, #0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d010      	beq.n	8008bb8 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8008b96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <ITM_SendChar+0x4a>
    {
      __NOP();
 8008baa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8008bac:	e7f3      	b.n	8008b96 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8008bae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	b2d2      	uxtb	r2, r2
 8008bb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8008bb8:	687b      	ldr	r3, [r7, #4]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	4603      	mov	r3, r0
 8008bce:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ffc6 	bl	8008b64 <ITM_SendChar>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <__NVIC_SetPriority>:
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	db0a      	blt.n	8008c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	490c      	ldr	r1, [pc, #48]	; (8008c2c <__NVIC_SetPriority+0x4c>)
 8008bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bfe:	0112      	lsls	r2, r2, #4
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	440b      	add	r3, r1
 8008c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c08:	e00a      	b.n	8008c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	4908      	ldr	r1, [pc, #32]	; (8008c30 <__NVIC_SetPriority+0x50>)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	3b04      	subs	r3, #4
 8008c18:	0112      	lsls	r2, r2, #4
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	761a      	strb	r2, [r3, #24]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	e000e100 	.word	0xe000e100
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <SysTick_Handler+0x1c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c3c:	f002 fa6a 	bl	800b114 <xTaskGetSchedulerState>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d001      	beq.n	8008c4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c46:	f003 f94f 	bl	800bee8 <xPortSysTickHandler>
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000e010 	.word	0xe000e010

08008c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f06f 0004 	mvn.w	r0, #4
 8008c5e:	f7ff ffbf 	bl	8008be0 <__NVIC_SetPriority>
#endif
}
 8008c62:	bf00      	nop
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6e:	f3ef 8305 	mrs	r3, IPSR
 8008c72:	603b      	str	r3, [r7, #0]
  return(result);
 8008c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c7a:	f06f 0305 	mvn.w	r3, #5
 8008c7e:	607b      	str	r3, [r7, #4]
 8008c80:	e00c      	b.n	8008c9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c82:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <osKernelInitialize+0x44>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c8a:	4b08      	ldr	r3, [pc, #32]	; (8008cac <osKernelInitialize+0x44>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e002      	b.n	8008c9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c9c:	687b      	ldr	r3, [r7, #4]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000a74 	.word	0x20000a74

08008cb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb6:	f3ef 8305 	mrs	r3, IPSR
 8008cba:	603b      	str	r3, [r7, #0]
  return(result);
 8008cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cc2:	f06f 0305 	mvn.w	r3, #5
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	e010      	b.n	8008cec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cca:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <osKernelStart+0x48>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d109      	bne.n	8008ce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cd2:	f7ff ffbf 	bl	8008c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cd6:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <osKernelStart+0x48>)
 8008cd8:	2202      	movs	r2, #2
 8008cda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cdc:	f001 fd90 	bl	800a800 <vTaskStartScheduler>
      stat = osOK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	e002      	b.n	8008cec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cec:	687b      	ldr	r3, [r7, #4]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20000a74 	.word	0x20000a74

08008cfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08e      	sub	sp, #56	; 0x38
 8008d00:	af04      	add	r7, sp, #16
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d0c:	f3ef 8305 	mrs	r3, IPSR
 8008d10:	617b      	str	r3, [r7, #20]
  return(result);
 8008d12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d17e      	bne.n	8008e16 <osThreadNew+0x11a>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d07b      	beq.n	8008e16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d1e:	2380      	movs	r3, #128	; 0x80
 8008d20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d22:	2318      	movs	r3, #24
 8008d24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d045      	beq.n	8008dc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <osThreadNew+0x48>
        name = attr->name;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <osThreadNew+0x6e>
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2b38      	cmp	r3, #56	; 0x38
 8008d5c:	d805      	bhi.n	8008d6a <osThreadNew+0x6e>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <osThreadNew+0x72>
        return (NULL);
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e054      	b.n	8008e18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	089b      	lsrs	r3, r3, #2
 8008d7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00e      	beq.n	8008da4 <osThreadNew+0xa8>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	2bbf      	cmp	r3, #191	; 0xbf
 8008d8c:	d90a      	bls.n	8008da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d006      	beq.n	8008da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <osThreadNew+0xa8>
        mem = 1;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	e010      	b.n	8008dc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10c      	bne.n	8008dc6 <osThreadNew+0xca>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d108      	bne.n	8008dc6 <osThreadNew+0xca>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d104      	bne.n	8008dc6 <osThreadNew+0xca>
          mem = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61bb      	str	r3, [r7, #24]
 8008dc0:	e001      	b.n	8008dc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d110      	bne.n	8008dee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dd4:	9202      	str	r2, [sp, #8]
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6a3a      	ldr	r2, [r7, #32]
 8008de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f001 fb1c 	bl	800a420 <xTaskCreateStatic>
 8008de8:	4603      	mov	r3, r0
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	e013      	b.n	8008e16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d110      	bne.n	8008e16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	f107 0310 	add.w	r3, r7, #16
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f001 fb67 	bl	800a4da <xTaskCreate>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d001      	beq.n	8008e16 <osThreadNew+0x11a>
            hTask = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e16:	693b      	ldr	r3, [r7, #16]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3728      	adds	r7, #40	; 0x28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e28:	f3ef 8305 	mrs	r3, IPSR
 8008e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <osDelay+0x1c>
    stat = osErrorISR;
 8008e34:	f06f 0305 	mvn.w	r3, #5
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e007      	b.n	8008e4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fca6 	bl	800a798 <vTaskDelay>
    }
  }

  return (stat);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b08a      	sub	sp, #40	; 0x28
 8008e5a:	af02      	add	r7, sp, #8
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e66:	f3ef 8305 	mrs	r3, IPSR
 8008e6a:	613b      	str	r3, [r7, #16]
  return(result);
 8008e6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d175      	bne.n	8008f5e <osSemaphoreNew+0x108>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d072      	beq.n	8008f5e <osSemaphoreNew+0x108>
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d86e      	bhi.n	8008f5e <osSemaphoreNew+0x108>
    mem = -1;
 8008e80:	f04f 33ff 	mov.w	r3, #4294967295
 8008e84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d015      	beq.n	8008eb8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <osSemaphoreNew+0x4c>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	2b4f      	cmp	r3, #79	; 0x4f
 8008e9a:	d902      	bls.n	8008ea2 <osSemaphoreNew+0x4c>
        mem = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	e00c      	b.n	8008ebc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d108      	bne.n	8008ebc <osSemaphoreNew+0x66>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <osSemaphoreNew+0x66>
          mem = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	e001      	b.n	8008ebc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d04c      	beq.n	8008f5e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d128      	bne.n	8008f1c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d10a      	bne.n	8008ee6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	9200      	str	r2, [sp, #0]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2100      	movs	r1, #0
 8008edc:	2001      	movs	r0, #1
 8008ede:	f000 fabd 	bl	800945c <xQueueGenericCreateStatic>
 8008ee2:	61f8      	str	r0, [r7, #28]
 8008ee4:	e005      	b.n	8008ef2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008ee6:	2203      	movs	r2, #3
 8008ee8:	2100      	movs	r1, #0
 8008eea:	2001      	movs	r0, #1
 8008eec:	f000 fb2e 	bl	800954c <xQueueGenericCreate>
 8008ef0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d022      	beq.n	8008f3e <osSemaphoreNew+0xe8>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d01f      	beq.n	8008f3e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008efe:	2300      	movs	r3, #0
 8008f00:	2200      	movs	r2, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	69f8      	ldr	r0, [r7, #28]
 8008f06:	f000 fbe9 	bl	80096dc <xQueueGenericSend>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d016      	beq.n	8008f3e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008f10:	69f8      	ldr	r0, [r7, #28]
 8008f12:	f001 f8b1 	bl	800a078 <vQueueDelete>
            hSemaphore = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	e010      	b.n	8008f3e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d108      	bne.n	8008f34 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fb6b 	bl	8009606 <xQueueCreateCountingSemaphoreStatic>
 8008f30:	61f8      	str	r0, [r7, #28]
 8008f32:	e004      	b.n	8008f3e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fb9c 	bl	8009674 <xQueueCreateCountingSemaphore>
 8008f3c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00c      	beq.n	8008f5e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e001      	b.n	8008f56 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	69f8      	ldr	r0, [r7, #28]
 8008f5a:	f001 f9d9 	bl	800a310 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008f5e:	69fb      	ldr	r3, [r7, #28]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3720      	adds	r7, #32
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008f80:	f06f 0303 	mvn.w	r3, #3
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e039      	b.n	8008ffc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f88:	f3ef 8305 	mrs	r3, IPSR
 8008f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d022      	beq.n	8008fda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008f9a:	f06f 0303 	mvn.w	r3, #3
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e02c      	b.n	8008ffc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008fa6:	f107 0308 	add.w	r3, r7, #8
 8008faa:	461a      	mov	r2, r3
 8008fac:	2100      	movs	r1, #0
 8008fae:	6938      	ldr	r0, [r7, #16]
 8008fb0:	f000 ffa6 	bl	8009f00 <xQueueReceiveFromISR>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d003      	beq.n	8008fc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008fba:	f06f 0302 	mvn.w	r3, #2
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e01c      	b.n	8008ffc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d019      	beq.n	8008ffc <osSemaphoreAcquire+0x94>
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <osSemaphoreAcquire+0xa0>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	e010      	b.n	8008ffc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6938      	ldr	r0, [r7, #16]
 8008fde:	f000 fe83 	bl	8009ce8 <xQueueSemaphoreTake>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d009      	beq.n	8008ffc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008fee:	f06f 0301 	mvn.w	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	e002      	b.n	8008ffc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008ff6:	f06f 0302 	mvn.w	r3, #2
 8008ffa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008ffc:	697b      	ldr	r3, [r7, #20]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009022:	f06f 0303 	mvn.w	r3, #3
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	e02c      	b.n	8009084 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902a:	f3ef 8305 	mrs	r3, IPSR
 800902e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009030:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01a      	beq.n	800906c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800903a:	f107 0308 	add.w	r3, r7, #8
 800903e:	4619      	mov	r1, r3
 8009040:	6938      	ldr	r0, [r7, #16]
 8009042:	f000 fce4 	bl	8009a0e <xQueueGiveFromISR>
 8009046:	4603      	mov	r3, r0
 8009048:	2b01      	cmp	r3, #1
 800904a:	d003      	beq.n	8009054 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800904c:	f06f 0302 	mvn.w	r3, #2
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	e017      	b.n	8009084 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d014      	beq.n	8009084 <osSemaphoreRelease+0x78>
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <osSemaphoreRelease+0x84>)
 800905c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	e00b      	b.n	8009084 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800906c:	2300      	movs	r3, #0
 800906e:	2200      	movs	r2, #0
 8009070:	2100      	movs	r1, #0
 8009072:	6938      	ldr	r0, [r7, #16]
 8009074:	f000 fb32 	bl	80096dc <xQueueGenericSend>
 8009078:	4603      	mov	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d002      	beq.n	8009084 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800907e:	f06f 0302 	mvn.w	r3, #2
 8009082:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009084:	697b      	ldr	r3, [r7, #20]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <osSemaphoreGetCount+0x18>
    count = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	e00e      	b.n	80090ca <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ac:	f3ef 8305 	mrs	r3, IPSR
 80090b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80090b8:	6938      	ldr	r0, [r7, #16]
 80090ba:	f000 ffbf 	bl	800a03c <uxQueueMessagesWaitingFromISR>
 80090be:	6178      	str	r0, [r7, #20]
 80090c0:	e003      	b.n	80090ca <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	f000 ff9c 	bl	800a000 <uxQueueMessagesWaiting>
 80090c8:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80090ca:	697b      	ldr	r3, [r7, #20]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08a      	sub	sp, #40	; 0x28
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e4:	f3ef 8305 	mrs	r3, IPSR
 80090e8:	613b      	str	r3, [r7, #16]
  return(result);
 80090ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d15f      	bne.n	80091b0 <osMessageQueueNew+0xdc>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d05c      	beq.n	80091b0 <osMessageQueueNew+0xdc>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d059      	beq.n	80091b0 <osMessageQueueNew+0xdc>
    mem = -1;
 80090fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009100:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d029      	beq.n	800915c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d012      	beq.n	8009136 <osMessageQueueNew+0x62>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	2b4f      	cmp	r3, #79	; 0x4f
 8009116:	d90e      	bls.n	8009136 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	695a      	ldr	r2, [r3, #20]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <osMessageQueueNew+0x62>
        mem = 1;
 8009130:	2301      	movs	r3, #1
 8009132:	61bb      	str	r3, [r7, #24]
 8009134:	e014      	b.n	8009160 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d110      	bne.n	8009160 <osMessageQueueNew+0x8c>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10c      	bne.n	8009160 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800914a:	2b00      	cmp	r3, #0
 800914c:	d108      	bne.n	8009160 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <osMessageQueueNew+0x8c>
          mem = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	61bb      	str	r3, [r7, #24]
 800915a:	e001      	b.n	8009160 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d10b      	bne.n	800917e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	2100      	movs	r1, #0
 8009170:	9100      	str	r1, [sp, #0]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f971 	bl	800945c <xQueueGenericCreateStatic>
 800917a:	61f8      	str	r0, [r7, #28]
 800917c:	e008      	b.n	8009190 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009184:	2200      	movs	r2, #0
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 f9df 	bl	800954c <xQueueGenericCreate>
 800918e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00c      	beq.n	80091b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	e001      	b.n	80091a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80091a8:	6979      	ldr	r1, [r7, #20]
 80091aa:	69f8      	ldr	r0, [r7, #28]
 80091ac:	f001 f8b0 	bl	800a310 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80091b0:	69fb      	ldr	r3, [r7, #28]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4a07      	ldr	r2, [pc, #28]	; (80091e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80091cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	4a06      	ldr	r2, [pc, #24]	; (80091ec <vApplicationGetIdleTaskMemory+0x30>)
 80091d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2280      	movs	r2, #128	; 0x80
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20000a78 	.word	0x20000a78
 80091ec:	20000b38 	.word	0x20000b38

080091f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4a07      	ldr	r2, [pc, #28]	; (800921c <vApplicationGetTimerTaskMemory+0x2c>)
 8009200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	4a06      	ldr	r2, [pc, #24]	; (8009220 <vApplicationGetTimerTaskMemory+0x30>)
 8009206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800920e:	601a      	str	r2, [r3, #0]
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	20000d38 	.word	0x20000d38
 8009220:	20000df8 	.word	0x20000df8

08009224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f103 0208 	add.w	r2, r3, #8
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f04f 32ff 	mov.w	r2, #4294967295
 800923c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f103 0208 	add.w	r2, r3, #8
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f103 0208 	add.w	r2, r3, #8
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	601a      	str	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d103      	bne.n	80092e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	e00c      	b.n	8009300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3308      	adds	r3, #8
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	e002      	b.n	80092f4 <vListInsert+0x2e>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d2f6      	bcs.n	80092ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	601a      	str	r2, [r3, #0]
}
 800932c:	bf00      	nop
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	6892      	ldr	r2, [r2, #8]
 800934e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6852      	ldr	r2, [r2, #4]
 8009358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d103      	bne.n	800936c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	1e5a      	subs	r2, r3, #1
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80093b6:	f002 fd05 	bl	800bdc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	68f9      	ldr	r1, [r7, #12]
 80093c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093c6:	fb01 f303 	mul.w	r3, r1, r3
 80093ca:	441a      	add	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	3b01      	subs	r3, #1
 80093e8:	68f9      	ldr	r1, [r7, #12]
 80093ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	441a      	add	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	22ff      	movs	r2, #255	; 0xff
 80093fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	22ff      	movs	r2, #255	; 0xff
 8009402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d114      	bne.n	8009436 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01a      	beq.n	800944a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3310      	adds	r3, #16
 8009418:	4618      	mov	r0, r3
 800941a:	f001 fcb9 	bl	800ad90 <xTaskRemoveFromEventList>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d012      	beq.n	800944a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <xQueueGenericReset+0xcc>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	e009      	b.n	800944a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3310      	adds	r3, #16
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fef2 	bl	8009224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3324      	adds	r3, #36	; 0x24
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff feed 	bl	8009224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800944a:	f002 fceb 	bl	800be24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800944e:	2301      	movs	r3, #1
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08e      	sub	sp, #56	; 0x38
 8009460:	af02      	add	r7, sp, #8
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <xQueueGenericCreateStatic+0x52>
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <xQueueGenericCreateStatic+0x56>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <xQueueGenericCreateStatic+0x58>
 80094b2:	2300      	movs	r3, #0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	623b      	str	r3, [r7, #32]
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <xQueueGenericCreateStatic+0x7e>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <xQueueGenericCreateStatic+0x82>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueGenericCreateStatic+0x84>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	61fb      	str	r3, [r7, #28]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094fa:	2350      	movs	r3, #80	; 0x50
 80094fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b50      	cmp	r3, #80	; 0x50
 8009502:	d00a      	beq.n	800951a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	61bb      	str	r3, [r7, #24]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800951a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00d      	beq.n	8009542 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800952e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	4613      	mov	r3, r2
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f83f 	bl	80095c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009544:	4618      	mov	r0, r3
 8009546:	3730      	adds	r7, #48	; 0x30
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08a      	sub	sp, #40	; 0x28
 8009550:	af02      	add	r7, sp, #8
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	4613      	mov	r3, r2
 8009558:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	fb02 f303 	mul.w	r3, r2, r3
 800957e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	3350      	adds	r3, #80	; 0x50
 8009584:	4618      	mov	r0, r3
 8009586:	f002 fd3f 	bl	800c008 <pvPortMalloc>
 800958a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	3350      	adds	r3, #80	; 0x50
 800959a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095a4:	79fa      	ldrb	r2, [r7, #7]
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	4613      	mov	r3, r2
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f805 	bl	80095c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095b6:	69bb      	ldr	r3, [r7, #24]
	}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3720      	adds	r7, #32
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d103      	bne.n	80095dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	e002      	b.n	80095e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095ee:	2101      	movs	r1, #1
 80095f0:	69b8      	ldr	r0, [r7, #24]
 80095f2:	f7ff fecb 	bl	800938c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	78fa      	ldrb	r2, [r7, #3]
 80095fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009606:	b580      	push	{r7, lr}
 8009608:	b08a      	sub	sp, #40	; 0x28
 800960a:	af02      	add	r7, sp, #8
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	61bb      	str	r3, [r7, #24]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	429a      	cmp	r2, r3
 8009634:	d90a      	bls.n	800964c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	617b      	str	r3, [r7, #20]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800964c:	2302      	movs	r3, #2
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	2100      	movs	r1, #0
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff ff00 	bl	800945c <xQueueGenericCreateStatic>
 800965c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800966a:	69fb      	ldr	r3, [r7, #28]
	}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	613b      	str	r3, [r7, #16]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d90a      	bls.n	80096b8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60fb      	str	r3, [r7, #12]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096b8:	2202      	movs	r2, #2
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff45 	bl	800954c <xQueueGenericCreate>
 80096c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80096d0:	697b      	ldr	r3, [r7, #20]
	}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08e      	sub	sp, #56	; 0x38
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096ea:	2300      	movs	r3, #0
 80096ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <xQueueGenericSend+0x32>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <xQueueGenericSend+0x40>
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <xQueueGenericSend+0x44>
 800971c:	2301      	movs	r3, #1
 800971e:	e000      	b.n	8009722 <xQueueGenericSend+0x46>
 8009720:	2300      	movs	r3, #0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <xQueueGenericSend+0x60>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d103      	bne.n	800974a <xQueueGenericSend+0x6e>
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <xQueueGenericSend+0x72>
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <xQueueGenericSend+0x74>
 800974e:	2300      	movs	r3, #0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <xQueueGenericSend+0x8e>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	623b      	str	r3, [r7, #32]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800976a:	f001 fcd3 	bl	800b114 <xTaskGetSchedulerState>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <xQueueGenericSend+0x9e>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <xQueueGenericSend+0xa2>
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <xQueueGenericSend+0xa4>
 800977e:	2300      	movs	r3, #0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueGenericSend+0xbe>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	61fb      	str	r3, [r7, #28]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800979a:	f002 fb13 	bl	800bdc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d302      	bcc.n	80097b0 <xQueueGenericSend+0xd4>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d129      	bne.n	8009804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b6:	f000 fc9a 	bl	800a0ee <prvCopyDataToQueue>
 80097ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d010      	beq.n	80097e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	3324      	adds	r3, #36	; 0x24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f001 fae1 	bl	800ad90 <xTaskRemoveFromEventList>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d013      	beq.n	80097fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097d4:	4b3f      	ldr	r3, [pc, #252]	; (80098d4 <xQueueGenericSend+0x1f8>)
 80097d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	e00a      	b.n	80097fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d007      	beq.n	80097fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097ec:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <xQueueGenericSend+0x1f8>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097fc:	f002 fb12 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 8009800:	2301      	movs	r3, #1
 8009802:	e063      	b.n	80098cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d103      	bne.n	8009812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800980a:	f002 fb0b 	bl	800be24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800980e:	2300      	movs	r3, #0
 8009810:	e05c      	b.n	80098cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009814:	2b00      	cmp	r3, #0
 8009816:	d106      	bne.n	8009826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009818:	f107 0314 	add.w	r3, r7, #20
 800981c:	4618      	mov	r0, r3
 800981e:	f001 fb1b 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009822:	2301      	movs	r3, #1
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009826:	f002 fafd 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800982a:	f001 f85b 	bl	800a8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800982e:	f002 fac9 	bl	800bdc4 <vPortEnterCritical>
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009838:	b25b      	sxtb	r3, r3
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d103      	bne.n	8009848 <xQueueGenericSend+0x16c>
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800984e:	b25b      	sxtb	r3, r3
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009854:	d103      	bne.n	800985e <xQueueGenericSend+0x182>
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800985e:	f002 fae1 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009862:	1d3a      	adds	r2, r7, #4
 8009864:	f107 0314 	add.w	r3, r7, #20
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f001 fb0a 	bl	800ae84 <xTaskCheckForTimeOut>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d124      	bne.n	80098c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009878:	f000 fd31 	bl	800a2de <prvIsQueueFull>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d018      	beq.n	80098b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	3310      	adds	r3, #16
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	4611      	mov	r1, r2
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fa30 	bl	800acf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009892:	f000 fcbc 	bl	800a20e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009896:	f001 f833 	bl	800a900 <xTaskResumeAll>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	f47f af7c 	bne.w	800979a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098a2:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <xQueueGenericSend+0x1f8>)
 80098a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	e772      	b.n	800979a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098b6:	f000 fcaa 	bl	800a20e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098ba:	f001 f821 	bl	800a900 <xTaskResumeAll>
 80098be:	e76c      	b.n	800979a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098c2:	f000 fca4 	bl	800a20e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098c6:	f001 f81b 	bl	800a900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3738      	adds	r7, #56	; 0x38
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	e000ed04 	.word	0xe000ed04

080098d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b090      	sub	sp, #64	; 0x40
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <xQueueGenericSendFromISR+0x3c>
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <xQueueGenericSendFromISR+0x40>
 8009914:	2301      	movs	r3, #1
 8009916:	e000      	b.n	800991a <xQueueGenericSendFromISR+0x42>
 8009918:	2300      	movs	r3, #0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009930:	bf00      	nop
 8009932:	e7fe      	b.n	8009932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d103      	bne.n	8009942 <xQueueGenericSendFromISR+0x6a>
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <xQueueGenericSendFromISR+0x6e>
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <xQueueGenericSendFromISR+0x70>
 8009946:	2300      	movs	r3, #0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	623b      	str	r3, [r7, #32]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009962:	f002 fb11 	bl	800bf88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009966:	f3ef 8211 	mrs	r2, BASEPRI
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	61fa      	str	r2, [r7, #28]
 800997c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800997e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998a:	429a      	cmp	r2, r3
 800998c:	d302      	bcc.n	8009994 <xQueueGenericSendFromISR+0xbc>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d12f      	bne.n	80099f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	68b9      	ldr	r1, [r7, #8]
 80099a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099aa:	f000 fba0 	bl	800a0ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d112      	bne.n	80099de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d016      	beq.n	80099ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	3324      	adds	r3, #36	; 0x24
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 f9e3 	bl	800ad90 <xTaskRemoveFromEventList>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00e      	beq.n	80099ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	e007      	b.n	80099ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099e2:	3301      	adds	r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	b25a      	sxtb	r2, r3
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099ee:	2301      	movs	r3, #1
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099f2:	e001      	b.n	80099f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3740      	adds	r7, #64	; 0x40
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b08e      	sub	sp, #56	; 0x38
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	623b      	str	r3, [r7, #32]
}
 8009a34:	bf00      	nop
 8009a36:	e7fe      	b.n	8009a36 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00a      	beq.n	8009a56 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	61fb      	str	r3, [r7, #28]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d103      	bne.n	8009a66 <xQueueGiveFromISR+0x58>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <xQueueGiveFromISR+0x5c>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <xQueueGiveFromISR+0x5e>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	61bb      	str	r3, [r7, #24]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a86:	f002 fa7f 	bl	800bf88 <vPortValidateInterruptPriority>
	__asm volatile
 8009a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	617a      	str	r2, [r7, #20]
 8009aa0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009aa2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d22b      	bcs.n	8009b0e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d112      	bne.n	8009af8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d016      	beq.n	8009b08 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	3324      	adds	r3, #36	; 0x24
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 f956 	bl	800ad90 <xTaskRemoveFromEventList>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00e      	beq.n	8009b08 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00b      	beq.n	8009b08 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2201      	movs	r2, #1
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	e007      	b.n	8009b08 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009afc:	3301      	adds	r3, #1
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	b25a      	sxtb	r2, r3
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0c:	e001      	b.n	8009b12 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f383 8811 	msr	BASEPRI, r3
}
 8009b1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3738      	adds	r7, #56	; 0x38
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08c      	sub	sp, #48	; 0x30
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <xQueueReceive+0x30>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	623b      	str	r3, [r7, #32]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d103      	bne.n	8009b66 <xQueueReceive+0x3e>
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <xQueueReceive+0x42>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e000      	b.n	8009b6c <xQueueReceive+0x44>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <xQueueReceive+0x5e>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	61fb      	str	r3, [r7, #28]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b86:	f001 fac5 	bl	800b114 <xTaskGetSchedulerState>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <xQueueReceive+0x6e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <xQueueReceive+0x72>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e000      	b.n	8009b9c <xQueueReceive+0x74>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <xQueueReceive+0x8e>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	61bb      	str	r3, [r7, #24]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bb6:	f002 f905 	bl	800bdc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01f      	beq.n	8009c06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bca:	f000 fafa 	bl	800a1c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1e5a      	subs	r2, r3, #1
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00f      	beq.n	8009bfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	3310      	adds	r3, #16
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 f8d4 	bl	800ad90 <xTaskRemoveFromEventList>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bee:	4b3d      	ldr	r3, [pc, #244]	; (8009ce4 <xQueueReceive+0x1bc>)
 8009bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bfe:	f002 f911 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e069      	b.n	8009cda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d103      	bne.n	8009c14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c0c:	f002 f90a 	bl	800be24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c10:	2300      	movs	r3, #0
 8009c12:	e062      	b.n	8009cda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c1a:	f107 0310 	add.w	r3, r7, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 f91a 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c28:	f002 f8fc 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c2c:	f000 fe5a 	bl	800a8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c30:	f002 f8c8 	bl	800bdc4 <vPortEnterCritical>
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d103      	bne.n	8009c4a <xQueueReceive+0x122>
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c50:	b25b      	sxtb	r3, r3
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d103      	bne.n	8009c60 <xQueueReceive+0x138>
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c60:	f002 f8e0 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c64:	1d3a      	adds	r2, r7, #4
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 f909 	bl	800ae84 <xTaskCheckForTimeOut>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d123      	bne.n	8009cc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7a:	f000 fb1a 	bl	800a2b2 <prvIsQueueEmpty>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d017      	beq.n	8009cb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	3324      	adds	r3, #36	; 0x24
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 f82f 	bl	800acf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c94:	f000 fabb 	bl	800a20e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c98:	f000 fe32 	bl	800a900 <xTaskResumeAll>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d189      	bne.n	8009bb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <xQueueReceive+0x1bc>)
 8009ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	e780      	b.n	8009bb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb6:	f000 faaa 	bl	800a20e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cba:	f000 fe21 	bl	800a900 <xTaskResumeAll>
 8009cbe:	e77a      	b.n	8009bb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f000 faa4 	bl	800a20e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cc6:	f000 fe1b 	bl	800a900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ccc:	f000 faf1 	bl	800a2b2 <prvIsQueueEmpty>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f af6f 	beq.w	8009bb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3730      	adds	r7, #48	; 0x30
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08e      	sub	sp, #56	; 0x38
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	623b      	str	r3, [r7, #32]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	61fb      	str	r3, [r7, #28]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d38:	f001 f9ec 	bl	800b114 <xTaskGetSchedulerState>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d102      	bne.n	8009d48 <xQueueSemaphoreTake+0x60>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <xQueueSemaphoreTake+0x64>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e000      	b.n	8009d4e <xQueueSemaphoreTake+0x66>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	61bb      	str	r3, [r7, #24]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d68:	f002 f82c 	bl	800bdc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d024      	beq.n	8009dc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	1e5a      	subs	r2, r3, #1
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d88:	f001 fb3a 	bl	800b400 <pvTaskIncrementMutexHeldCount>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00f      	beq.n	8009dba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	3310      	adds	r3, #16
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fff6 	bl	800ad90 <xTaskRemoveFromEventList>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009daa:	4b54      	ldr	r3, [pc, #336]	; (8009efc <xQueueSemaphoreTake+0x214>)
 8009dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dba:	f002 f833 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e097      	b.n	8009ef2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d111      	bne.n	8009dec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	617b      	str	r3, [r7, #20]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009de4:	f002 f81e 	bl	800be24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009de8:	2300      	movs	r3, #0
 8009dea:	e082      	b.n	8009ef2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 f82e 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e00:	f002 f810 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e04:	f000 fd6e 	bl	800a8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e08:	f001 ffdc 	bl	800bdc4 <vPortEnterCritical>
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e12:	b25b      	sxtb	r3, r3
 8009e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e18:	d103      	bne.n	8009e22 <xQueueSemaphoreTake+0x13a>
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d103      	bne.n	8009e38 <xQueueSemaphoreTake+0x150>
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e38:	f001 fff4 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e3c:	463a      	mov	r2, r7
 8009e3e:	f107 030c 	add.w	r3, r7, #12
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f001 f81d 	bl	800ae84 <xTaskCheckForTimeOut>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d132      	bne.n	8009eb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e52:	f000 fa2e 	bl	800a2b2 <prvIsQueueEmpty>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d026      	beq.n	8009eaa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e64:	f001 ffae 	bl	800bdc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 f96f 	bl	800b150 <xTaskPriorityInherit>
 8009e72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e74:	f001 ffd6 	bl	800be24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	3324      	adds	r3, #36	; 0x24
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 ff35 	bl	800acf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e88:	f000 f9c1 	bl	800a20e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e8c:	f000 fd38 	bl	800a900 <xTaskResumeAll>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f47f af68 	bne.w	8009d68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009e98:	4b18      	ldr	r3, [pc, #96]	; (8009efc <xQueueSemaphoreTake+0x214>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	e75e      	b.n	8009d68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eac:	f000 f9af 	bl	800a20e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009eb0:	f000 fd26 	bl	800a900 <xTaskResumeAll>
 8009eb4:	e758      	b.n	8009d68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb8:	f000 f9a9 	bl	800a20e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ebc:	f000 fd20 	bl	800a900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ec2:	f000 f9f6 	bl	800a2b2 <prvIsQueueEmpty>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f43f af4d 	beq.w	8009d68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00d      	beq.n	8009ef0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009ed4:	f001 ff76 	bl	800bdc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eda:	f000 f8f0 	bl	800a0be <prvGetDisinheritPriorityAfterTimeout>
 8009ede:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fa08 	bl	800b2fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009eec:	f001 ff9a 	bl	800be24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3738      	adds	r7, #56	; 0x38
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	e000ed04 	.word	0xe000ed04

08009f00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08e      	sub	sp, #56	; 0x38
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	623b      	str	r3, [r7, #32]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <xQueueReceiveFromISR+0x3a>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <xQueueReceiveFromISR+0x3e>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <xQueueReceiveFromISR+0x40>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	61fb      	str	r3, [r7, #28]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f5a:	f002 f815 	bl	800bf88 <vPortValidateInterruptPriority>
	__asm volatile
 8009f5e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	61ba      	str	r2, [r7, #24]
 8009f74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d02f      	beq.n	8009fe6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f90:	68b9      	ldr	r1, [r7, #8]
 8009f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f94:	f000 f915 	bl	800a1c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	1e5a      	subs	r2, r3, #1
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009fa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa8:	d112      	bne.n	8009fd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d016      	beq.n	8009fe0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	3310      	adds	r3, #16
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 feea 	bl	800ad90 <xTaskRemoveFromEventList>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00e      	beq.n	8009fe0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e007      	b.n	8009fe0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	b25a      	sxtb	r2, r3
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe4:	e001      	b.n	8009fea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f383 8811 	msr	BASEPRI, r3
}
 8009ff4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3738      	adds	r7, #56	; 0x38
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10a      	bne.n	800a024 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	60bb      	str	r3, [r7, #8]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a024:	f001 fece 	bl	800bdc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a02e:	f001 fef9 	bl	800be24 <vPortExitCritical>

	return uxReturn;
 800a032:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60fb      	str	r3, [r7, #12]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a06a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a06c:	4618      	mov	r0, r3
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10a      	bne.n	800a0a0 <vQueueDelete+0x28>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	60bb      	str	r3, [r7, #8]
}
 800a09c:	bf00      	nop
 800a09e:	e7fe      	b.n	800a09e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f95f 	bl	800a364 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d102      	bne.n	800a0b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f002 f879 	bl	800c1a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d006      	beq.n	800a0dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e001      	b.n	800a0e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
	}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b086      	sub	sp, #24
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a102:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10d      	bne.n	800a128 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d14d      	bne.n	800a1b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 f881 	bl	800b220 <xTaskPriorityDisinherit>
 800a11e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	609a      	str	r2, [r3, #8]
 800a126:	e043      	b.n	800a1b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d119      	bne.n	800a162 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6858      	ldr	r0, [r3, #4]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	461a      	mov	r2, r3
 800a138:	68b9      	ldr	r1, [r7, #8]
 800a13a:	f002 fac7 	bl	800c6cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	441a      	add	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	429a      	cmp	r2, r3
 800a156:	d32b      	bcc.n	800a1b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	605a      	str	r2, [r3, #4]
 800a160:	e026      	b.n	800a1b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68d8      	ldr	r0, [r3, #12]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	461a      	mov	r2, r3
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	f002 faad 	bl	800c6cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	68da      	ldr	r2, [r3, #12]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	425b      	negs	r3, r3
 800a17c:	441a      	add	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d207      	bcs.n	800a19e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	425b      	negs	r3, r3
 800a198:	441a      	add	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d105      	bne.n	800a1b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1b8:	697b      	ldr	r3, [r7, #20]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d018      	beq.n	800a206 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	441a      	add	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d303      	bcc.n	800a1f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68d9      	ldr	r1, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	461a      	mov	r2, r3
 800a200:	6838      	ldr	r0, [r7, #0]
 800a202:	f002 fa63 	bl	800c6cc <memcpy>
	}
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a216:	f001 fdd5 	bl	800bdc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a220:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a222:	e011      	b.n	800a248 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d012      	beq.n	800a252 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3324      	adds	r3, #36	; 0x24
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fdad 	bl	800ad90 <xTaskRemoveFromEventList>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a23c:	f000 fe84 	bl	800af48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	3b01      	subs	r3, #1
 800a244:	b2db      	uxtb	r3, r3
 800a246:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dce9      	bgt.n	800a224 <prvUnlockQueue+0x16>
 800a250:	e000      	b.n	800a254 <prvUnlockQueue+0x46>
					break;
 800a252:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	22ff      	movs	r2, #255	; 0xff
 800a258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a25c:	f001 fde2 	bl	800be24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a260:	f001 fdb0 	bl	800bdc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a26a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a26c:	e011      	b.n	800a292 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d012      	beq.n	800a29c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3310      	adds	r3, #16
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fd88 	bl	800ad90 <xTaskRemoveFromEventList>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a286:	f000 fe5f 	bl	800af48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a296:	2b00      	cmp	r3, #0
 800a298:	dce9      	bgt.n	800a26e <prvUnlockQueue+0x60>
 800a29a:	e000      	b.n	800a29e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a29c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	22ff      	movs	r2, #255	; 0xff
 800a2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2a6:	f001 fdbd 	bl	800be24 <vPortExitCritical>
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2ba:	f001 fd83 	bl	800bdc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	e001      	b.n	800a2d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2d0:	f001 fda8 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2e6:	f001 fd6d 	bl	800bdc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d102      	bne.n	800a2fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	60fb      	str	r3, [r7, #12]
 800a2fa:	e001      	b.n	800a300 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a300:	f001 fd90 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800a304:	68fb      	ldr	r3, [r7, #12]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	e014      	b.n	800a34a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a320:	4a0f      	ldr	r2, [pc, #60]	; (800a360 <vQueueAddToRegistry+0x50>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a32c:	490c      	ldr	r1, [pc, #48]	; (800a360 <vQueueAddToRegistry+0x50>)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a336:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <vQueueAddToRegistry+0x50>)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4413      	add	r3, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a342:	e006      	b.n	800a352 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b07      	cmp	r3, #7
 800a34e:	d9e7      	bls.n	800a320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	200011f8 	.word	0x200011f8

0800a364 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a36c:	2300      	movs	r3, #0
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e016      	b.n	800a3a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a372:	4a10      	ldr	r2, [pc, #64]	; (800a3b4 <vQueueUnregisterQueue+0x50>)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	4413      	add	r3, r2
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d10b      	bne.n	800a39a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a382:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <vQueueUnregisterQueue+0x50>)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2100      	movs	r1, #0
 800a388:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a38c:	4a09      	ldr	r2, [pc, #36]	; (800a3b4 <vQueueUnregisterQueue+0x50>)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	4413      	add	r3, r2
 800a394:	2200      	movs	r2, #0
 800a396:	605a      	str	r2, [r3, #4]
				break;
 800a398:	e006      	b.n	800a3a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3301      	adds	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b07      	cmp	r3, #7
 800a3a4:	d9e5      	bls.n	800a372 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	200011f8 	.word	0x200011f8

0800a3b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3c8:	f001 fcfc 	bl	800bdc4 <vPortEnterCritical>
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d2:	b25b      	sxtb	r3, r3
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d103      	bne.n	800a3e2 <vQueueWaitForMessageRestricted+0x2a>
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3e8:	b25b      	sxtb	r3, r3
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d103      	bne.n	800a3f8 <vQueueWaitForMessageRestricted+0x40>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3f8:	f001 fd14 	bl	800be24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fc93 	bl	800ad38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a412:	6978      	ldr	r0, [r7, #20]
 800a414:	f7ff fefb 	bl	800a20e <prvUnlockQueue>
	}
 800a418:	bf00      	nop
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08e      	sub	sp, #56	; 0x38
 800a424:	af04      	add	r7, sp, #16
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	623b      	str	r3, [r7, #32]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xTaskCreateStatic+0x46>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	61fb      	str	r3, [r7, #28]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a466:	23c0      	movs	r3, #192	; 0xc0
 800a468:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2bc0      	cmp	r3, #192	; 0xc0
 800a46e:	d00a      	beq.n	800a486 <xTaskCreateStatic+0x66>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61bb      	str	r3, [r7, #24]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a486:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d01e      	beq.n	800a4cc <xTaskCreateStatic+0xac>
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01b      	beq.n	800a4cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a49c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	f107 0314 	add.w	r3, r7, #20
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68b9      	ldr	r1, [r7, #8]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f850 	bl	800a564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4c6:	f000 f8f7 	bl	800a6b8 <prvAddNewTaskToReadyList>
 800a4ca:	e001      	b.n	800a4d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4d0:	697b      	ldr	r3, [r7, #20]
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3728      	adds	r7, #40	; 0x28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b08c      	sub	sp, #48	; 0x30
 800a4de:	af04      	add	r7, sp, #16
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	603b      	str	r3, [r7, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4ea:	88fb      	ldrh	r3, [r7, #6]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f001 fd8a 	bl	800c008 <pvPortMalloc>
 800a4f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00e      	beq.n	800a51a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4fc:	20c0      	movs	r0, #192	; 0xc0
 800a4fe:	f001 fd83 	bl	800c008 <pvPortMalloc>
 800a502:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	631a      	str	r2, [r3, #48]	; 0x30
 800a510:	e005      	b.n	800a51e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	f001 fe48 	bl	800c1a8 <vPortFree>
 800a518:	e001      	b.n	800a51e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d017      	beq.n	800a554 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a52c:	88fa      	ldrh	r2, [r7, #6]
 800a52e:	2300      	movs	r3, #0
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f80e 	bl	800a564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a548:	69f8      	ldr	r0, [r7, #28]
 800a54a:	f000 f8b5 	bl	800a6b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a54e:	2301      	movs	r3, #1
 800a550:	61bb      	str	r3, [r7, #24]
 800a552:	e002      	b.n	800a55a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a55a:	69bb      	ldr	r3, [r7, #24]
	}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	461a      	mov	r2, r3
 800a57c:	21a5      	movs	r1, #165	; 0xa5
 800a57e:	f002 f8b3 	bl	800c6e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a58c:	3b01      	subs	r3, #1
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	f023 0307 	bic.w	r3, r3, #7
 800a59a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	617b      	str	r3, [r7, #20]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01f      	beq.n	800a602 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61fb      	str	r3, [r7, #28]
 800a5c6:	e012      	b.n	800a5ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	7819      	ldrb	r1, [r3, #0]
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3334      	adds	r3, #52	; 0x34
 800a5d8:	460a      	mov	r2, r1
 800a5da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d006      	beq.n	800a5f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	2b0f      	cmp	r3, #15
 800a5f2:	d9e9      	bls.n	800a5c8 <prvInitialiseNewTask+0x64>
 800a5f4:	e000      	b.n	800a5f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a5f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a600:	e003      	b.n	800a60a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	2b37      	cmp	r3, #55	; 0x37
 800a60e:	d901      	bls.n	800a614 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a610:	2337      	movs	r3, #55	; 0x37
 800a612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	2200      	movs	r2, #0
 800a624:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	3304      	adds	r3, #4
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fe1a 	bl	8009264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	3318      	adds	r3, #24
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe fe15 	bl	8009264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	2200      	movs	r2, #0
 800a654:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	2200      	movs	r2, #0
 800a65a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	2200      	movs	r2, #0
 800a662:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	3358      	adds	r3, #88	; 0x58
 800a66a:	2260      	movs	r2, #96	; 0x60
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f002 f83a 	bl	800c6e8 <memset>
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	4a0d      	ldr	r2, [pc, #52]	; (800a6ac <prvInitialiseNewTask+0x148>)
 800a678:	65da      	str	r2, [r3, #92]	; 0x5c
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	4a0c      	ldr	r2, [pc, #48]	; (800a6b0 <prvInitialiseNewTask+0x14c>)
 800a67e:	661a      	str	r2, [r3, #96]	; 0x60
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	4a0c      	ldr	r2, [pc, #48]	; (800a6b4 <prvInitialiseNewTask+0x150>)
 800a684:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	68f9      	ldr	r1, [r7, #12]
 800a68a:	69b8      	ldr	r0, [r7, #24]
 800a68c:	f001 fa6e 	bl	800bb6c <pxPortInitialiseStack>
 800a690:	4602      	mov	r2, r0
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a2:	bf00      	nop
 800a6a4:	3720      	adds	r7, #32
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800f220 	.word	0x0800f220
 800a6b0:	0800f240 	.word	0x0800f240
 800a6b4:	0800f200 	.word	0x0800f200

0800a6b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6c0:	f001 fb80 	bl	800bdc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6c4:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <prvAddNewTaskToReadyList+0xc4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	4a2c      	ldr	r2, [pc, #176]	; (800a77c <prvAddNewTaskToReadyList+0xc4>)
 800a6cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6ce:	4b2c      	ldr	r3, [pc, #176]	; (800a780 <prvAddNewTaskToReadyList+0xc8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d109      	bne.n	800a6ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6d6:	4a2a      	ldr	r2, [pc, #168]	; (800a780 <prvAddNewTaskToReadyList+0xc8>)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6dc:	4b27      	ldr	r3, [pc, #156]	; (800a77c <prvAddNewTaskToReadyList+0xc4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d110      	bne.n	800a706 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6e4:	f000 fc54 	bl	800af90 <prvInitialiseTaskLists>
 800a6e8:	e00d      	b.n	800a706 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ea:	4b26      	ldr	r3, [pc, #152]	; (800a784 <prvAddNewTaskToReadyList+0xcc>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d109      	bne.n	800a706 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6f2:	4b23      	ldr	r3, [pc, #140]	; (800a780 <prvAddNewTaskToReadyList+0xc8>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d802      	bhi.n	800a706 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a700:	4a1f      	ldr	r2, [pc, #124]	; (800a780 <prvAddNewTaskToReadyList+0xc8>)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a706:	4b20      	ldr	r3, [pc, #128]	; (800a788 <prvAddNewTaskToReadyList+0xd0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	4a1e      	ldr	r2, [pc, #120]	; (800a788 <prvAddNewTaskToReadyList+0xd0>)
 800a70e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a710:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <prvAddNewTaskToReadyList+0xd0>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <prvAddNewTaskToReadyList+0xd4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d903      	bls.n	800a72c <prvAddNewTaskToReadyList+0x74>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	4a18      	ldr	r2, [pc, #96]	; (800a78c <prvAddNewTaskToReadyList+0xd4>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4a15      	ldr	r2, [pc, #84]	; (800a790 <prvAddNewTaskToReadyList+0xd8>)
 800a73a:	441a      	add	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fe fd9b 	bl	800927e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a748:	f001 fb6c 	bl	800be24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <prvAddNewTaskToReadyList+0xcc>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00e      	beq.n	800a772 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a754:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <prvAddNewTaskToReadyList+0xc8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75e:	429a      	cmp	r2, r3
 800a760:	d207      	bcs.n	800a772 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a762:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <prvAddNewTaskToReadyList+0xdc>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	2000170c 	.word	0x2000170c
 800a780:	20001238 	.word	0x20001238
 800a784:	20001718 	.word	0x20001718
 800a788:	20001728 	.word	0x20001728
 800a78c:	20001714 	.word	0x20001714
 800a790:	2000123c 	.word	0x2000123c
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7aa:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <vTaskDelay+0x60>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <vTaskDelay+0x30>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60bb      	str	r3, [r7, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7c8:	f000 f88c 	bl	800a8e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fe2a 	bl	800b428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7d4:	f000 f894 	bl	800a900 <xTaskResumeAll>
 800a7d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d107      	bne.n	800a7f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7e0:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <vTaskDelay+0x64>)
 800a7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7f0:	bf00      	nop
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20001734 	.word	0x20001734
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08a      	sub	sp, #40	; 0x28
 800a804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a80e:	463a      	mov	r2, r7
 800a810:	1d39      	adds	r1, r7, #4
 800a812:	f107 0308 	add.w	r3, r7, #8
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fcd0 	bl	80091bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	9202      	str	r2, [sp, #8]
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	2300      	movs	r3, #0
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	2300      	movs	r3, #0
 800a82c:	460a      	mov	r2, r1
 800a82e:	4925      	ldr	r1, [pc, #148]	; (800a8c4 <vTaskStartScheduler+0xc4>)
 800a830:	4825      	ldr	r0, [pc, #148]	; (800a8c8 <vTaskStartScheduler+0xc8>)
 800a832:	f7ff fdf5 	bl	800a420 <xTaskCreateStatic>
 800a836:	4603      	mov	r3, r0
 800a838:	4a24      	ldr	r2, [pc, #144]	; (800a8cc <vTaskStartScheduler+0xcc>)
 800a83a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a83c:	4b23      	ldr	r3, [pc, #140]	; (800a8cc <vTaskStartScheduler+0xcc>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a844:	2301      	movs	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e001      	b.n	800a84e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d102      	bne.n	800a85a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a854:	f000 fe3c 	bl	800b4d0 <xTimerCreateTimerTask>
 800a858:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d11d      	bne.n	800a89c <vTaskStartScheduler+0x9c>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a874:	4b16      	ldr	r3, [pc, #88]	; (800a8d0 <vTaskStartScheduler+0xd0>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3358      	adds	r3, #88	; 0x58
 800a87a:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <vTaskStartScheduler+0xd4>)
 800a87c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a87e:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <vTaskStartScheduler+0xd8>)
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a886:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <vTaskStartScheduler+0xdc>)
 800a888:	2201      	movs	r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a88c:	4b14      	ldr	r3, [pc, #80]	; (800a8e0 <vTaskStartScheduler+0xe0>)
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a892:	f7f7 fcfd 	bl	8002290 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a896:	f001 f9f3 	bl	800bc80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a89a:	e00e      	b.n	800a8ba <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a2:	d10a      	bne.n	800a8ba <vTaskStartScheduler+0xba>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	60fb      	str	r3, [r7, #12]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <vTaskStartScheduler+0xb8>
}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800f0f0 	.word	0x0800f0f0
 800a8c8:	0800af61 	.word	0x0800af61
 800a8cc:	20001730 	.word	0x20001730
 800a8d0:	20001238 	.word	0x20001238
 800a8d4:	20000010 	.word	0x20000010
 800a8d8:	2000172c 	.word	0x2000172c
 800a8dc:	20001718 	.word	0x20001718
 800a8e0:	20001710 	.word	0x20001710

0800a8e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <vTaskSuspendAll+0x18>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a03      	ldr	r2, [pc, #12]	; (800a8fc <vTaskSuspendAll+0x18>)
 800a8f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8f2:	bf00      	nop
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	20001734 	.word	0x20001734

0800a900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a90e:	4b42      	ldr	r3, [pc, #264]	; (800aa18 <xTaskResumeAll+0x118>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10a      	bne.n	800a92c <xTaskResumeAll+0x2c>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	603b      	str	r3, [r7, #0]
}
 800a928:	bf00      	nop
 800a92a:	e7fe      	b.n	800a92a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a92c:	f001 fa4a 	bl	800bdc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a930:	4b39      	ldr	r3, [pc, #228]	; (800aa18 <xTaskResumeAll+0x118>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3b01      	subs	r3, #1
 800a936:	4a38      	ldr	r2, [pc, #224]	; (800aa18 <xTaskResumeAll+0x118>)
 800a938:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a93a:	4b37      	ldr	r3, [pc, #220]	; (800aa18 <xTaskResumeAll+0x118>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d162      	bne.n	800aa08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a942:	4b36      	ldr	r3, [pc, #216]	; (800aa1c <xTaskResumeAll+0x11c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d05e      	beq.n	800aa08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a94a:	e02f      	b.n	800a9ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a94c:	4b34      	ldr	r3, [pc, #208]	; (800aa20 <xTaskResumeAll+0x120>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3318      	adds	r3, #24
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe fced 	bl	8009338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3304      	adds	r3, #4
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fce8 	bl	8009338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	4b2d      	ldr	r3, [pc, #180]	; (800aa24 <xTaskResumeAll+0x124>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d903      	bls.n	800a97c <xTaskResumeAll+0x7c>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	4a2a      	ldr	r2, [pc, #168]	; (800aa24 <xTaskResumeAll+0x124>)
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4a27      	ldr	r2, [pc, #156]	; (800aa28 <xTaskResumeAll+0x128>)
 800a98a:	441a      	add	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7fe fc73 	bl	800927e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99c:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <xTaskResumeAll+0x12c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d302      	bcc.n	800a9ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9a6:	4b22      	ldr	r3, [pc, #136]	; (800aa30 <xTaskResumeAll+0x130>)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9ac:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <xTaskResumeAll+0x120>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1cb      	bne.n	800a94c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9ba:	f000 fb8b 	bl	800b0d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <xTaskResumeAll+0x134>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d010      	beq.n	800a9ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9ca:	f000 f847 	bl	800aa5c <xTaskIncrementTick>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <xTaskResumeAll+0x130>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f1      	bne.n	800a9ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9e6:	4b13      	ldr	r3, [pc, #76]	; (800aa34 <xTaskResumeAll+0x134>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9ec:	4b10      	ldr	r3, [pc, #64]	; (800aa30 <xTaskResumeAll+0x130>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d009      	beq.n	800aa08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <xTaskResumeAll+0x138>)
 800a9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa08:	f001 fa0c 	bl	800be24 <vPortExitCritical>

	return xAlreadyYielded;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20001734 	.word	0x20001734
 800aa1c:	2000170c 	.word	0x2000170c
 800aa20:	200016cc 	.word	0x200016cc
 800aa24:	20001714 	.word	0x20001714
 800aa28:	2000123c 	.word	0x2000123c
 800aa2c:	20001238 	.word	0x20001238
 800aa30:	20001720 	.word	0x20001720
 800aa34:	2000171c 	.word	0x2000171c
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <xTaskGetTickCount+0x1c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa48:	687b      	ldr	r3, [r7, #4]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	20001710 	.word	0x20001710

0800aa5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa66:	4b4f      	ldr	r3, [pc, #316]	; (800aba4 <xTaskIncrementTick+0x148>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 808f 	bne.w	800ab8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa70:	4b4d      	ldr	r3, [pc, #308]	; (800aba8 <xTaskIncrementTick+0x14c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa78:	4a4b      	ldr	r2, [pc, #300]	; (800aba8 <xTaskIncrementTick+0x14c>)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d120      	bne.n	800aac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa84:	4b49      	ldr	r3, [pc, #292]	; (800abac <xTaskIncrementTick+0x150>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	603b      	str	r3, [r7, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <xTaskIncrementTick+0x46>
 800aaa4:	4b41      	ldr	r3, [pc, #260]	; (800abac <xTaskIncrementTick+0x150>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	4b41      	ldr	r3, [pc, #260]	; (800abb0 <xTaskIncrementTick+0x154>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a3f      	ldr	r2, [pc, #252]	; (800abac <xTaskIncrementTick+0x150>)
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	4a3f      	ldr	r2, [pc, #252]	; (800abb0 <xTaskIncrementTick+0x154>)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	4b3e      	ldr	r3, [pc, #248]	; (800abb4 <xTaskIncrementTick+0x158>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3301      	adds	r3, #1
 800aabe:	4a3d      	ldr	r2, [pc, #244]	; (800abb4 <xTaskIncrementTick+0x158>)
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	f000 fb07 	bl	800b0d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aac6:	4b3c      	ldr	r3, [pc, #240]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d349      	bcc.n	800ab64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad0:	4b36      	ldr	r3, [pc, #216]	; (800abac <xTaskIncrementTick+0x150>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d104      	bne.n	800aae4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aada:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	601a      	str	r2, [r3, #0]
					break;
 800aae2:	e03f      	b.n	800ab64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae4:	4b31      	ldr	r3, [pc, #196]	; (800abac <xTaskIncrementTick+0x150>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d203      	bcs.n	800ab04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aafc:	4a2e      	ldr	r2, [pc, #184]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab02:	e02f      	b.n	800ab64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe fc15 	bl	8009338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d004      	beq.n	800ab20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	3318      	adds	r3, #24
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fc0c 	bl	8009338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab24:	4b25      	ldr	r3, [pc, #148]	; (800abbc <xTaskIncrementTick+0x160>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d903      	bls.n	800ab34 <xTaskIncrementTick+0xd8>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	4a22      	ldr	r2, [pc, #136]	; (800abbc <xTaskIncrementTick+0x160>)
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <xTaskIncrementTick+0x164>)
 800ab42:	441a      	add	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fe fb97 	bl	800927e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <xTaskIncrementTick+0x168>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d3b8      	bcc.n	800aad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab62:	e7b5      	b.n	800aad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab64:	4b17      	ldr	r3, [pc, #92]	; (800abc4 <xTaskIncrementTick+0x168>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4915      	ldr	r1, [pc, #84]	; (800abc0 <xTaskIncrementTick+0x164>)
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d901      	bls.n	800ab80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab80:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <xTaskIncrementTick+0x16c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d007      	beq.n	800ab98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e004      	b.n	800ab98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <xTaskIncrementTick+0x170>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a0d      	ldr	r2, [pc, #52]	; (800abcc <xTaskIncrementTick+0x170>)
 800ab96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab98:	697b      	ldr	r3, [r7, #20]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20001734 	.word	0x20001734
 800aba8:	20001710 	.word	0x20001710
 800abac:	200016c4 	.word	0x200016c4
 800abb0:	200016c8 	.word	0x200016c8
 800abb4:	20001724 	.word	0x20001724
 800abb8:	2000172c 	.word	0x2000172c
 800abbc:	20001714 	.word	0x20001714
 800abc0:	2000123c 	.word	0x2000123c
 800abc4:	20001238 	.word	0x20001238
 800abc8:	20001720 	.word	0x20001720
 800abcc:	2000171c 	.word	0x2000171c

0800abd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abd6:	4b3e      	ldr	r3, [pc, #248]	; (800acd0 <vTaskSwitchContext+0x100>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abde:	4b3d      	ldr	r3, [pc, #244]	; (800acd4 <vTaskSwitchContext+0x104>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abe4:	e070      	b.n	800acc8 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800abe6:	4b3b      	ldr	r3, [pc, #236]	; (800acd4 <vTaskSwitchContext+0x104>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800abec:	f7f7 fb57 	bl	800229e <getRunTimeCounterValue>
 800abf0:	4603      	mov	r3, r0
 800abf2:	4a39      	ldr	r2, [pc, #228]	; (800acd8 <vTaskSwitchContext+0x108>)
 800abf4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800abf6:	4b38      	ldr	r3, [pc, #224]	; (800acd8 <vTaskSwitchContext+0x108>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	4b38      	ldr	r3, [pc, #224]	; (800acdc <vTaskSwitchContext+0x10c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d909      	bls.n	800ac16 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ac02:	4b37      	ldr	r3, [pc, #220]	; (800ace0 <vTaskSwitchContext+0x110>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac08:	4a33      	ldr	r2, [pc, #204]	; (800acd8 <vTaskSwitchContext+0x108>)
 800ac0a:	6810      	ldr	r0, [r2, #0]
 800ac0c:	4a33      	ldr	r2, [pc, #204]	; (800acdc <vTaskSwitchContext+0x10c>)
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	1a82      	subs	r2, r0, r2
 800ac12:	440a      	add	r2, r1
 800ac14:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ac16:	4b30      	ldr	r3, [pc, #192]	; (800acd8 <vTaskSwitchContext+0x108>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a30      	ldr	r2, [pc, #192]	; (800acdc <vTaskSwitchContext+0x10c>)
 800ac1c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ac1e:	4b30      	ldr	r3, [pc, #192]	; (800ace0 <vTaskSwitchContext+0x110>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	4b2e      	ldr	r3, [pc, #184]	; (800ace0 <vTaskSwitchContext+0x110>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d808      	bhi.n	800ac40 <vTaskSwitchContext+0x70>
 800ac2e:	4b2c      	ldr	r3, [pc, #176]	; (800ace0 <vTaskSwitchContext+0x110>)
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	4b2b      	ldr	r3, [pc, #172]	; (800ace0 <vTaskSwitchContext+0x110>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3334      	adds	r3, #52	; 0x34
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7f7 fb37 	bl	80022ae <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac40:	4b28      	ldr	r3, [pc, #160]	; (800ace4 <vTaskSwitchContext+0x114>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e010      	b.n	800ac6a <vTaskSwitchContext+0x9a>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <vTaskSwitchContext+0x94>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	607b      	str	r3, [r7, #4]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <vTaskSwitchContext+0x92>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	491f      	ldr	r1, [pc, #124]	; (800ace8 <vTaskSwitchContext+0x118>)
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0e4      	beq.n	800ac48 <vTaskSwitchContext+0x78>
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4a17      	ldr	r2, [pc, #92]	; (800ace8 <vTaskSwitchContext+0x118>)
 800ac8a:	4413      	add	r3, r2
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d104      	bne.n	800acae <vTaskSwitchContext+0xde>
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	605a      	str	r2, [r3, #4]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	4a0a      	ldr	r2, [pc, #40]	; (800ace0 <vTaskSwitchContext+0x110>)
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	4a0a      	ldr	r2, [pc, #40]	; (800ace4 <vTaskSwitchContext+0x114>)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acbe:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <vTaskSwitchContext+0x110>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3358      	adds	r3, #88	; 0x58
 800acc4:	4a09      	ldr	r2, [pc, #36]	; (800acec <vTaskSwitchContext+0x11c>)
 800acc6:	6013      	str	r3, [r2, #0]
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20001734 	.word	0x20001734
 800acd4:	20001720 	.word	0x20001720
 800acd8:	2000173c 	.word	0x2000173c
 800acdc:	20001738 	.word	0x20001738
 800ace0:	20001238 	.word	0x20001238
 800ace4:	20001714 	.word	0x20001714
 800ace8:	2000123c 	.word	0x2000123c
 800acec:	20000010 	.word	0x20000010

0800acf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad16:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <vTaskPlaceOnEventList+0x44>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3318      	adds	r3, #24
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7fe fad1 	bl	80092c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad24:	2101      	movs	r1, #1
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f000 fb7e 	bl	800b428 <prvAddCurrentTaskToDelayedList>
}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20001238 	.word	0x20001238

0800ad38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	617b      	str	r3, [r7, #20]
}
 800ad5c:	bf00      	nop
 800ad5e:	e7fe      	b.n	800ad5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad60:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <vTaskPlaceOnEventListRestricted+0x54>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3318      	adds	r3, #24
 800ad66:	4619      	mov	r1, r3
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fe fa88 	bl	800927e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295
 800ad78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	68b8      	ldr	r0, [r7, #8]
 800ad7e:	f000 fb53 	bl	800b428 <prvAddCurrentTaskToDelayedList>
	}
 800ad82:	bf00      	nop
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20001238 	.word	0x20001238

0800ad90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60fb      	str	r3, [r7, #12]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	3318      	adds	r3, #24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fab9 	bl	8009338 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc6:	4b1e      	ldr	r3, [pc, #120]	; (800ae40 <xTaskRemoveFromEventList+0xb0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11d      	bne.n	800ae0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	3304      	adds	r3, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fab0 	bl	8009338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800addc:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <xTaskRemoveFromEventList+0xb4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d903      	bls.n	800adec <xTaskRemoveFromEventList+0x5c>
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	4a16      	ldr	r2, [pc, #88]	; (800ae44 <xTaskRemoveFromEventList+0xb4>)
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <xTaskRemoveFromEventList+0xb8>)
 800adfa:	441a      	add	r2, r3
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fe fa3b 	bl	800927e <vListInsertEnd>
 800ae08:	e005      	b.n	800ae16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	3318      	adds	r3, #24
 800ae0e:	4619      	mov	r1, r3
 800ae10:	480e      	ldr	r0, [pc, #56]	; (800ae4c <xTaskRemoveFromEventList+0xbc>)
 800ae12:	f7fe fa34 	bl	800927e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <xTaskRemoveFromEventList+0xc0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d905      	bls.n	800ae30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae24:	2301      	movs	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <xTaskRemoveFromEventList+0xc4>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e001      	b.n	800ae34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae34:	697b      	ldr	r3, [r7, #20]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20001734 	.word	0x20001734
 800ae44:	20001714 	.word	0x20001714
 800ae48:	2000123c 	.word	0x2000123c
 800ae4c:	200016cc 	.word	0x200016cc
 800ae50:	20001238 	.word	0x20001238
 800ae54:	20001720 	.word	0x20001720

0800ae58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae60:	4b06      	ldr	r3, [pc, #24]	; (800ae7c <vTaskInternalSetTimeOutState+0x24>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <vTaskInternalSetTimeOutState+0x28>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	605a      	str	r2, [r3, #4]
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20001724 	.word	0x20001724
 800ae80:	20001710 	.word	0x20001710

0800ae84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	613b      	str	r3, [r7, #16]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10a      	bne.n	800aec6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	60fb      	str	r3, [r7, #12]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aec6:	f000 ff7d 	bl	800bdc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeca:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <xTaskCheckForTimeOut+0xbc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee2:	d102      	bne.n	800aeea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	e023      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b15      	ldr	r3, [pc, #84]	; (800af44 <xTaskCheckForTimeOut+0xc0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d007      	beq.n	800af06 <xTaskCheckForTimeOut+0x82>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d302      	bcc.n	800af06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e015      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d20b      	bcs.n	800af28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff9b 	bl	800ae58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	e004      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af2e:	2301      	movs	r3, #1
 800af30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af32:	f000 ff77 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20001710 	.word	0x20001710
 800af44:	20001724 	.word	0x20001724

0800af48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af4c:	4b03      	ldr	r3, [pc, #12]	; (800af5c <vTaskMissedYield+0x14>)
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20001720 	.word	0x20001720

0800af60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af68:	f000 f852 	bl	800b010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <prvIdleTask+0x28>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d9f9      	bls.n	800af68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <prvIdleTask+0x2c>)
 800af76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af84:	e7f0      	b.n	800af68 <prvIdleTask+0x8>
 800af86:	bf00      	nop
 800af88:	2000123c 	.word	0x2000123c
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
 800af9a:	e00c      	b.n	800afb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4a12      	ldr	r2, [pc, #72]	; (800aff0 <prvInitialiseTaskLists+0x60>)
 800afa8:	4413      	add	r3, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe f93a 	bl	8009224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3301      	adds	r3, #1
 800afb4:	607b      	str	r3, [r7, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b37      	cmp	r3, #55	; 0x37
 800afba:	d9ef      	bls.n	800af9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afbc:	480d      	ldr	r0, [pc, #52]	; (800aff4 <prvInitialiseTaskLists+0x64>)
 800afbe:	f7fe f931 	bl	8009224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afc2:	480d      	ldr	r0, [pc, #52]	; (800aff8 <prvInitialiseTaskLists+0x68>)
 800afc4:	f7fe f92e 	bl	8009224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afc8:	480c      	ldr	r0, [pc, #48]	; (800affc <prvInitialiseTaskLists+0x6c>)
 800afca:	f7fe f92b 	bl	8009224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afce:	480c      	ldr	r0, [pc, #48]	; (800b000 <prvInitialiseTaskLists+0x70>)
 800afd0:	f7fe f928 	bl	8009224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afd4:	480b      	ldr	r0, [pc, #44]	; (800b004 <prvInitialiseTaskLists+0x74>)
 800afd6:	f7fe f925 	bl	8009224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afda:	4b0b      	ldr	r3, [pc, #44]	; (800b008 <prvInitialiseTaskLists+0x78>)
 800afdc:	4a05      	ldr	r2, [pc, #20]	; (800aff4 <prvInitialiseTaskLists+0x64>)
 800afde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <prvInitialiseTaskLists+0x7c>)
 800afe2:	4a05      	ldr	r2, [pc, #20]	; (800aff8 <prvInitialiseTaskLists+0x68>)
 800afe4:	601a      	str	r2, [r3, #0]
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	2000123c 	.word	0x2000123c
 800aff4:	2000169c 	.word	0x2000169c
 800aff8:	200016b0 	.word	0x200016b0
 800affc:	200016cc 	.word	0x200016cc
 800b000:	200016e0 	.word	0x200016e0
 800b004:	200016f8 	.word	0x200016f8
 800b008:	200016c4 	.word	0x200016c4
 800b00c:	200016c8 	.word	0x200016c8

0800b010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b016:	e019      	b.n	800b04c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b018:	f000 fed4 	bl	800bdc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b10      	ldr	r3, [pc, #64]	; (800b060 <prvCheckTasksWaitingTermination+0x50>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3304      	adds	r3, #4
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe f985 	bl	8009338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b02e:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <prvCheckTasksWaitingTermination+0x54>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3b01      	subs	r3, #1
 800b034:	4a0b      	ldr	r2, [pc, #44]	; (800b064 <prvCheckTasksWaitingTermination+0x54>)
 800b036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b042:	f000 feef 	bl	800be24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f810 	bl	800b06c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e1      	bne.n	800b018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200016e0 	.word	0x200016e0
 800b064:	2000170c 	.word	0x2000170c
 800b068:	200016f4 	.word	0x200016f4

0800b06c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3358      	adds	r3, #88	; 0x58
 800b078:	4618      	mov	r0, r3
 800b07a:	f002 f895 	bl	800d1a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b084:	2b00      	cmp	r3, #0
 800b086:	d108      	bne.n	800b09a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 f88b 	bl	800c1a8 <vPortFree>
				vPortFree( pxTCB );
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 f888 	bl	800c1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b098:	e018      	b.n	800b0cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d103      	bne.n	800b0ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f87f 	bl	800c1a8 <vPortFree>
	}
 800b0aa:	e00f      	b.n	800b0cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d00a      	beq.n	800b0cc <prvDeleteTCB+0x60>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60fb      	str	r3, [r7, #12]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <prvDeleteTCB+0x5e>
	}
 800b0cc:	bf00      	nop
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0da:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0ec:	e008      	b.n	800b100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0fe:	6013      	str	r3, [r2, #0]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	200016c4 	.word	0x200016c4
 800b110:	2000172c 	.word	0x2000172c

0800b114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <xTaskGetSchedulerState+0x34>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b122:	2301      	movs	r3, #1
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	e008      	b.n	800b13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b128:	4b08      	ldr	r3, [pc, #32]	; (800b14c <xTaskGetSchedulerState+0x38>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b130:	2302      	movs	r3, #2
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e001      	b.n	800b13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b13a:	687b      	ldr	r3, [r7, #4]
	}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	20001718 	.word	0x20001718
 800b14c:	20001734 	.word	0x20001734

0800b150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d051      	beq.n	800b20a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16a:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	429a      	cmp	r2, r3
 800b172:	d241      	bcs.n	800b1f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	db06      	blt.n	800b18a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b17c:	4b25      	ldr	r3, [pc, #148]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	6959      	ldr	r1, [r3, #20]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <xTaskPriorityInherit+0xc8>)
 800b19c:	4413      	add	r3, r2
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d122      	bne.n	800b1e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe f8c6 	bl	8009338 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1ac:	4b19      	ldr	r3, [pc, #100]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ba:	4b18      	ldr	r3, [pc, #96]	; (800b21c <xTaskPriorityInherit+0xcc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d903      	bls.n	800b1ca <xTaskPriorityInherit+0x7a>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	4a15      	ldr	r2, [pc, #84]	; (800b21c <xTaskPriorityInherit+0xcc>)
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4a10      	ldr	r2, [pc, #64]	; (800b218 <xTaskPriorityInherit+0xc8>)
 800b1d8:	441a      	add	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7fe f84c 	bl	800927e <vListInsertEnd>
 800b1e6:	e004      	b.n	800b1f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	e008      	b.n	800b20a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1fc:	4b05      	ldr	r3, [pc, #20]	; (800b214 <xTaskPriorityInherit+0xc4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b202:	429a      	cmp	r2, r3
 800b204:	d201      	bcs.n	800b20a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b20a:	68fb      	ldr	r3, [r7, #12]
	}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20001238 	.word	0x20001238
 800b218:	2000123c 	.word	0x2000123c
 800b21c:	20001714 	.word	0x20001714

0800b220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d056      	beq.n	800b2e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b236:	4b2e      	ldr	r3, [pc, #184]	; (800b2f0 <xTaskPriorityDisinherit+0xd0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d00a      	beq.n	800b256 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	60fb      	str	r3, [r7, #12]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60bb      	str	r3, [r7, #8]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b278:	1e5a      	subs	r2, r3, #1
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b286:	429a      	cmp	r2, r3
 800b288:	d02c      	beq.n	800b2e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d128      	bne.n	800b2e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3304      	adds	r3, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe f84e 	bl	8009338 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b4:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <xTaskPriorityDisinherit+0xd4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d903      	bls.n	800b2c4 <xTaskPriorityDisinherit+0xa4>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a0c      	ldr	r2, [pc, #48]	; (800b2f4 <xTaskPriorityDisinherit+0xd4>)
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4a09      	ldr	r2, [pc, #36]	; (800b2f8 <xTaskPriorityDisinherit+0xd8>)
 800b2d2:	441a      	add	r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7fd ffcf 	bl	800927e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2e4:	697b      	ldr	r3, [r7, #20]
	}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20001238 	.word	0x20001238
 800b2f4:	20001714 	.word	0x20001714
 800b2f8:	2000123c 	.word	0x2000123c

0800b2fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b30a:	2301      	movs	r3, #1
 800b30c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d06a      	beq.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10a      	bne.n	800b332 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60fb      	str	r3, [r7, #12]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d902      	bls.n	800b342 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	e002      	b.n	800b348 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b346:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d04b      	beq.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d146      	bne.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b35c:	4b25      	ldr	r3, [pc, #148]	; (800b3f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	69ba      	ldr	r2, [r7, #24]
 800b362:	429a      	cmp	r2, r3
 800b364:	d10a      	bne.n	800b37c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	60bb      	str	r3, [r7, #8]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	db04      	blt.n	800b39a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	6959      	ldr	r1, [r3, #20]
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4a13      	ldr	r2, [pc, #76]	; (800b3f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4299      	cmp	r1, r3
 800b3ae:	d11c      	bne.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fd ffbf 	bl	8009338 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d903      	bls.n	800b3ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	; (800b3fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4a07      	ldr	r2, [pc, #28]	; (800b3f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3dc:	441a      	add	r2, r3
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	f7fd ff4a 	bl	800927e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3ea:	bf00      	nop
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20001238 	.word	0x20001238
 800b3f8:	2000123c 	.word	0x2000123c
 800b3fc:	20001714 	.word	0x20001714

0800b400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b404:	4b07      	ldr	r3, [pc, #28]	; (800b424 <pvTaskIncrementMutexHeldCount+0x24>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <pvTaskIncrementMutexHeldCount+0x24>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b412:	3201      	adds	r2, #1
 800b414:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b416:	4b03      	ldr	r3, [pc, #12]	; (800b424 <pvTaskIncrementMutexHeldCount+0x24>)
 800b418:	681b      	ldr	r3, [r3, #0]
	}
 800b41a:	4618      	mov	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	20001238 	.word	0x20001238

0800b428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b432:	4b21      	ldr	r3, [pc, #132]	; (800b4b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b438:	4b20      	ldr	r3, [pc, #128]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fd ff7a 	bl	8009338 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44a:	d10a      	bne.n	800b462 <prvAddCurrentTaskToDelayedList+0x3a>
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b452:	4b1a      	ldr	r3, [pc, #104]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4819      	ldr	r0, [pc, #100]	; (800b4c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b45c:	f7fd ff0f 	bl	800927e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b460:	e026      	b.n	800b4b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4413      	add	r3, r2
 800b468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b46a:	4b14      	ldr	r3, [pc, #80]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d209      	bcs.n	800b48e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3304      	adds	r3, #4
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	f7fd ff1d 	bl	80092c6 <vListInsert>
}
 800b48c:	e010      	b.n	800b4b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b48e:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7fd ff13 	bl	80092c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d202      	bcs.n	800b4b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4aa:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	6013      	str	r3, [r2, #0]
}
 800b4b0:	bf00      	nop
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20001710 	.word	0x20001710
 800b4bc:	20001238 	.word	0x20001238
 800b4c0:	200016f8 	.word	0x200016f8
 800b4c4:	200016c8 	.word	0x200016c8
 800b4c8:	200016c4 	.word	0x200016c4
 800b4cc:	2000172c 	.word	0x2000172c

0800b4d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	; 0x28
 800b4d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b4da:	f000 fb07 	bl	800baec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b4de:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <xTimerCreateTimerTask+0x80>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d021      	beq.n	800b52a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4ee:	1d3a      	adds	r2, r7, #4
 800b4f0:	f107 0108 	add.w	r1, r7, #8
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fd fe79 	bl	80091f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	9202      	str	r2, [sp, #8]
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	2302      	movs	r3, #2
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2300      	movs	r3, #0
 800b50e:	460a      	mov	r2, r1
 800b510:	4910      	ldr	r1, [pc, #64]	; (800b554 <xTimerCreateTimerTask+0x84>)
 800b512:	4811      	ldr	r0, [pc, #68]	; (800b558 <xTimerCreateTimerTask+0x88>)
 800b514:	f7fe ff84 	bl	800a420 <xTaskCreateStatic>
 800b518:	4603      	mov	r3, r0
 800b51a:	4a10      	ldr	r2, [pc, #64]	; (800b55c <xTimerCreateTimerTask+0x8c>)
 800b51c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <xTimerCreateTimerTask+0x8c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b526:	2301      	movs	r3, #1
 800b528:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10a      	bne.n	800b546 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
}
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b546:	697b      	ldr	r3, [r7, #20]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20001770 	.word	0x20001770
 800b554:	0800f120 	.word	0x0800f120
 800b558:	0800b695 	.word	0x0800b695
 800b55c:	20001774 	.word	0x20001774

0800b560 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08a      	sub	sp, #40	; 0x28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b56e:	2300      	movs	r3, #0
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10a      	bne.n	800b58e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	623b      	str	r3, [r7, #32]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b58e:	4b1a      	ldr	r3, [pc, #104]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d02a      	beq.n	800b5ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b05      	cmp	r3, #5
 800b5a6:	dc18      	bgt.n	800b5da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5a8:	f7ff fdb4 	bl	800b114 <xTaskGetSchedulerState>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d109      	bne.n	800b5c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5b2:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	f107 0110 	add.w	r1, r7, #16
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5be:	f7fe f88d 	bl	80096dc <xQueueGenericSend>
 800b5c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b5c4:	e012      	b.n	800b5ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b5c6:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f107 0110 	add.w	r1, r7, #16
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7fe f883 	bl	80096dc <xQueueGenericSend>
 800b5d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b5d8:	e008      	b.n	800b5ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5da:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <xTimerGenericCommand+0x98>)
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f107 0110 	add.w	r1, r7, #16
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	f7fe f977 	bl	80098d8 <xQueueGenericSendFromISR>
 800b5ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3728      	adds	r7, #40	; 0x28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20001770 	.word	0x20001770

0800b5fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af02      	add	r7, sp, #8
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b606:	4b22      	ldr	r3, [pc, #136]	; (800b690 <prvProcessExpiredTimer+0x94>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	3304      	adds	r3, #4
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd fe8f 	bl	8009338 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	d022      	beq.n	800b66e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	699a      	ldr	r2, [r3, #24]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	18d1      	adds	r1, r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	6978      	ldr	r0, [r7, #20]
 800b636:	f000 f8d1 	bl	800b7dc <prvInsertTimerInActiveList>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01f      	beq.n	800b680 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b640:	2300      	movs	r3, #0
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	2100      	movs	r1, #0
 800b64a:	6978      	ldr	r0, [r7, #20]
 800b64c:	f7ff ff88 	bl	800b560 <xTimerGenericCommand>
 800b650:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d113      	bne.n	800b680 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	60fb      	str	r3, [r7, #12]
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b674:	f023 0301 	bic.w	r3, r3, #1
 800b678:	b2da      	uxtb	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	6978      	ldr	r0, [r7, #20]
 800b686:	4798      	blx	r3
}
 800b688:	bf00      	nop
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20001768 	.word	0x20001768

0800b694 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f857 	bl	800b754 <prvGetNextExpireTime>
 800b6a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f803 	bl	800b6b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6b2:	f000 f8d5 	bl	800b860 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6b6:	e7f1      	b.n	800b69c <prvTimerTask+0x8>

0800b6b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b6c2:	f7ff f90f 	bl	800a8e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f866 	bl	800b79c <prvSampleTimeNow>
 800b6d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d130      	bne.n	800b73a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <prvProcessTimerOrBlockTask+0x3c>
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d806      	bhi.n	800b6f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b6e6:	f7ff f90b 	bl	800a900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff ff85 	bl	800b5fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b6f2:	e024      	b.n	800b73e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d008      	beq.n	800b70c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6fa:	4b13      	ldr	r3, [pc, #76]	; (800b748 <prvProcessTimerOrBlockTask+0x90>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <prvProcessTimerOrBlockTask+0x50>
 800b704:	2301      	movs	r3, #1
 800b706:	e000      	b.n	800b70a <prvProcessTimerOrBlockTask+0x52>
 800b708:	2300      	movs	r3, #0
 800b70a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b70c:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <prvProcessTimerOrBlockTask+0x94>)
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4619      	mov	r1, r3
 800b71a:	f7fe fe4d 	bl	800a3b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b71e:	f7ff f8ef 	bl	800a900 <xTaskResumeAll>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <prvProcessTimerOrBlockTask+0x98>)
 800b72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	f3bf 8f6f 	isb	sy
}
 800b738:	e001      	b.n	800b73e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b73a:	f7ff f8e1 	bl	800a900 <xTaskResumeAll>
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	2000176c 	.word	0x2000176c
 800b74c:	20001770 	.word	0x20001770
 800b750:	e000ed04 	.word	0xe000ed04

0800b754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b75c:	4b0e      	ldr	r3, [pc, #56]	; (800b798 <prvGetNextExpireTime+0x44>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <prvGetNextExpireTime+0x16>
 800b766:	2201      	movs	r2, #1
 800b768:	e000      	b.n	800b76c <prvGetNextExpireTime+0x18>
 800b76a:	2200      	movs	r2, #0
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d105      	bne.n	800b784 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <prvGetNextExpireTime+0x44>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e001      	b.n	800b788 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b788:	68fb      	ldr	r3, [r7, #12]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	20001768 	.word	0x20001768

0800b79c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7a4:	f7ff f94a 	bl	800aa3c <xTaskGetTickCount>
 800b7a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <prvSampleTimeNow+0x3c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d205      	bcs.n	800b7c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7b4:	f000 f936 	bl	800ba24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	e002      	b.n	800b7c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b7c6:	4a04      	ldr	r2, [pc, #16]	; (800b7d8 <prvSampleTimeNow+0x3c>)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20001778 	.word	0x20001778

0800b7dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d812      	bhi.n	800b828 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d302      	bcc.n	800b816 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	e01b      	b.n	800b84e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b816:	4b10      	ldr	r3, [pc, #64]	; (800b858 <prvInsertTimerInActiveList+0x7c>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7fd fd50 	bl	80092c6 <vListInsert>
 800b826:	e012      	b.n	800b84e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d206      	bcs.n	800b83e <prvInsertTimerInActiveList+0x62>
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d302      	bcc.n	800b83e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b838:	2301      	movs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e007      	b.n	800b84e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b83e:	4b07      	ldr	r3, [pc, #28]	; (800b85c <prvInsertTimerInActiveList+0x80>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fd fd3c 	bl	80092c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b84e:	697b      	ldr	r3, [r7, #20]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	2000176c 	.word	0x2000176c
 800b85c:	20001768 	.word	0x20001768

0800b860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08e      	sub	sp, #56	; 0x38
 800b864:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b866:	e0ca      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da18      	bge.n	800b8a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b86e:	1d3b      	adds	r3, r7, #4
 800b870:	3304      	adds	r3, #4
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10a      	bne.n	800b890 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	61fb      	str	r3, [r7, #28]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b896:	6850      	ldr	r0, [r2, #4]
 800b898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89a:	6892      	ldr	r2, [r2, #8]
 800b89c:	4611      	mov	r1, r2
 800b89e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f2c0 80aa 	blt.w	800b9fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d004      	beq.n	800b8be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fd fd3d 	bl	8009338 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8be:	463b      	mov	r3, r7
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff ff6b 	bl	800b79c <prvSampleTimeNow>
 800b8c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	f200 8097 	bhi.w	800b9fe <prvProcessReceivedCommands+0x19e>
 800b8d0:	a201      	add	r2, pc, #4	; (adr r2, 800b8d8 <prvProcessReceivedCommands+0x78>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b901 	.word	0x0800b901
 800b8dc:	0800b901 	.word	0x0800b901
 800b8e0:	0800b901 	.word	0x0800b901
 800b8e4:	0800b975 	.word	0x0800b975
 800b8e8:	0800b989 	.word	0x0800b989
 800b8ec:	0800b9d3 	.word	0x0800b9d3
 800b8f0:	0800b901 	.word	0x0800b901
 800b8f4:	0800b901 	.word	0x0800b901
 800b8f8:	0800b975 	.word	0x0800b975
 800b8fc:	0800b989 	.word	0x0800b989
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	18d1      	adds	r1, r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b920:	f7ff ff5c 	bl	800b7dc <prvInsertTimerInActiveList>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d069      	beq.n	800b9fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b930:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d05e      	beq.n	800b9fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	441a      	add	r2, r3
 800b948:	2300      	movs	r3, #0
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	2300      	movs	r3, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b952:	f7ff fe05 	bl	800b560 <xTimerGenericCommand>
 800b956:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d14f      	bne.n	800b9fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	61bb      	str	r3, [r7, #24]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97a:	f023 0301 	bic.w	r3, r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b986:	e03a      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	b2da      	uxtb	r2, r3
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10a      	bne.n	800b9be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	617b      	str	r3, [r7, #20]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	699a      	ldr	r2, [r3, #24]
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	18d1      	adds	r1, r2, r3
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9cc:	f7ff ff06 	bl	800b7dc <prvInsertTimerInActiveList>
					break;
 800b9d0:	e015      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e2:	f000 fbe1 	bl	800c1a8 <vPortFree>
 800b9e6:	e00a      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ee:	f023 0301 	bic.w	r3, r3, #1
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9fa:	e000      	b.n	800b9fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9fe:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <prvProcessReceivedCommands+0x1c0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	1d39      	adds	r1, r7, #4
 800ba04:	2200      	movs	r2, #0
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe f88e 	bl	8009b28 <xQueueReceive>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f47f af2a 	bne.w	800b868 <prvProcessReceivedCommands+0x8>
	}
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3730      	adds	r7, #48	; 0x30
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20001770 	.word	0x20001770

0800ba24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba2a:	e048      	b.n	800babe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba2c:	4b2d      	ldr	r3, [pc, #180]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba36:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fd fc77 	bl	8009338 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba58:	f003 0304 	and.w	r3, r3, #4
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d02e      	beq.n	800babe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4413      	add	r3, r2
 800ba68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d90e      	bls.n	800ba90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba7e:	4b19      	ldr	r3, [pc, #100]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	f7fd fc1c 	bl	80092c6 <vListInsert>
 800ba8e:	e016      	b.n	800babe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba90:	2300      	movs	r3, #0
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	2300      	movs	r3, #0
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	2100      	movs	r1, #0
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fd60 	bl	800b560 <xTimerGenericCommand>
 800baa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10a      	bne.n	800babe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	603b      	str	r3, [r7, #0]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1b1      	bne.n	800ba2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bace:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <prvSwitchTimerLists+0xc4>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a04      	ldr	r2, [pc, #16]	; (800bae4 <prvSwitchTimerLists+0xc0>)
 800bad4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bad6:	4a04      	ldr	r2, [pc, #16]	; (800bae8 <prvSwitchTimerLists+0xc4>)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	6013      	str	r3, [r2, #0]
}
 800badc:	bf00      	nop
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20001768 	.word	0x20001768
 800bae8:	2000176c 	.word	0x2000176c

0800baec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800baf2:	f000 f967 	bl	800bdc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800baf6:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d120      	bne.n	800bb40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bafe:	4814      	ldr	r0, [pc, #80]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb00:	f7fd fb90 	bl	8009224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb04:	4813      	ldr	r0, [pc, #76]	; (800bb54 <prvCheckForValidListAndQueue+0x68>)
 800bb06:	f7fd fb8d 	bl	8009224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb0a:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <prvCheckForValidListAndQueue+0x6c>)
 800bb0c:	4a10      	ldr	r2, [pc, #64]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb10:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <prvCheckForValidListAndQueue+0x70>)
 800bb12:	4a10      	ldr	r2, [pc, #64]	; (800bb54 <prvCheckForValidListAndQueue+0x68>)
 800bb14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb16:	2300      	movs	r3, #0
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <prvCheckForValidListAndQueue+0x74>)
 800bb1c:	4a11      	ldr	r2, [pc, #68]	; (800bb64 <prvCheckForValidListAndQueue+0x78>)
 800bb1e:	2110      	movs	r1, #16
 800bb20:	200a      	movs	r0, #10
 800bb22:	f7fd fc9b 	bl	800945c <xQueueGenericCreateStatic>
 800bb26:	4603      	mov	r3, r0
 800bb28:	4a08      	ldr	r2, [pc, #32]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800bb2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb2c:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <prvCheckForValidListAndQueue+0x60>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	490b      	ldr	r1, [pc, #44]	; (800bb68 <prvCheckForValidListAndQueue+0x7c>)
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe fbe8 	bl	800a310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb40:	f000 f970 	bl	800be24 <vPortExitCritical>
}
 800bb44:	bf00      	nop
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20001770 	.word	0x20001770
 800bb50:	20001740 	.word	0x20001740
 800bb54:	20001754 	.word	0x20001754
 800bb58:	20001768 	.word	0x20001768
 800bb5c:	2000176c 	.word	0x2000176c
 800bb60:	2000181c 	.word	0x2000181c
 800bb64:	2000177c 	.word	0x2000177c
 800bb68:	0800f128 	.word	0x0800f128

0800bb6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3b04      	subs	r3, #4
 800bb7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3b04      	subs	r3, #4
 800bb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	f023 0201 	bic.w	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3b04      	subs	r3, #4
 800bb9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb9c:	4a0c      	ldr	r2, [pc, #48]	; (800bbd0 <pxPortInitialiseStack+0x64>)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3b14      	subs	r3, #20
 800bba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f06f 0202 	mvn.w	r2, #2
 800bbba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3b20      	subs	r3, #32
 800bbc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	0800bbd5 	.word	0x0800bbd5

0800bbd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbde:	4b12      	ldr	r3, [pc, #72]	; (800bc28 <prvTaskExitError+0x54>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	d00a      	beq.n	800bbfe <prvTaskExitError+0x2a>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60fb      	str	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <prvTaskExitError+0x28>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	60bb      	str	r3, [r7, #8]
}
 800bc10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc12:	bf00      	nop
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0fc      	beq.n	800bc14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	2000000c 	.word	0x2000000c
 800bc2c:	00000000 	.word	0x00000000

0800bc30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <pxCurrentTCBConst2>)
 800bc32:	6819      	ldr	r1, [r3, #0]
 800bc34:	6808      	ldr	r0, [r1, #0]
 800bc36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	f380 8809 	msr	PSP, r0
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8811 	msr	BASEPRI, r0
 800bc4a:	4770      	bx	lr
 800bc4c:	f3af 8000 	nop.w

0800bc50 <pxCurrentTCBConst2>:
 800bc50:	20001238 	.word	0x20001238
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc58:	4808      	ldr	r0, [pc, #32]	; (800bc7c <prvPortStartFirstTask+0x24>)
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	6800      	ldr	r0, [r0, #0]
 800bc5e:	f380 8808 	msr	MSP, r0
 800bc62:	f04f 0000 	mov.w	r0, #0
 800bc66:	f380 8814 	msr	CONTROL, r0
 800bc6a:	b662      	cpsie	i
 800bc6c:	b661      	cpsie	f
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	df00      	svc	0
 800bc78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc7a:	bf00      	nop
 800bc7c:	e000ed08 	.word	0xe000ed08

0800bc80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc86:	4b46      	ldr	r3, [pc, #280]	; (800bda0 <xPortStartScheduler+0x120>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a46      	ldr	r2, [pc, #280]	; (800bda4 <xPortStartScheduler+0x124>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10a      	bne.n	800bca6 <xPortStartScheduler+0x26>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	613b      	str	r3, [r7, #16]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bca6:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <xPortStartScheduler+0x120>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a3f      	ldr	r2, [pc, #252]	; (800bda8 <xPortStartScheduler+0x128>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d10a      	bne.n	800bcc6 <xPortStartScheduler+0x46>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	60fb      	str	r3, [r7, #12]
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcc6:	4b39      	ldr	r3, [pc, #228]	; (800bdac <xPortStartScheduler+0x12c>)
 800bcc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	22ff      	movs	r2, #255	; 0xff
 800bcd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	4b31      	ldr	r3, [pc, #196]	; (800bdb0 <xPortStartScheduler+0x130>)
 800bcec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcee:	4b31      	ldr	r3, [pc, #196]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcf4:	e009      	b.n	800bd0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bcf6:	4b2f      	ldr	r3, [pc, #188]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	4a2d      	ldr	r2, [pc, #180]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bcfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd0a:	78fb      	ldrb	r3, [r7, #3]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd12:	2b80      	cmp	r3, #128	; 0x80
 800bd14:	d0ef      	beq.n	800bcf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd16:	4b27      	ldr	r3, [pc, #156]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f1c3 0307 	rsb	r3, r3, #7
 800bd1e:	2b04      	cmp	r3, #4
 800bd20:	d00a      	beq.n	800bd38 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	60bb      	str	r3, [r7, #8]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	021b      	lsls	r3, r3, #8
 800bd3e:	4a1d      	ldr	r2, [pc, #116]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd42:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd4a:	4a1a      	ldr	r2, [pc, #104]	; (800bdb4 <xPortStartScheduler+0x134>)
 800bd4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd56:	4b18      	ldr	r3, [pc, #96]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a17      	ldr	r2, [pc, #92]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd62:	4b15      	ldr	r3, [pc, #84]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a14      	ldr	r2, [pc, #80]	; (800bdb8 <xPortStartScheduler+0x138>)
 800bd68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd6e:	f000 f8dd 	bl	800bf2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <xPortStartScheduler+0x13c>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd78:	f000 f8fc 	bl	800bf74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd7c:	4b10      	ldr	r3, [pc, #64]	; (800bdc0 <xPortStartScheduler+0x140>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a0f      	ldr	r2, [pc, #60]	; (800bdc0 <xPortStartScheduler+0x140>)
 800bd82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd88:	f7ff ff66 	bl	800bc58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd8c:	f7fe ff20 	bl	800abd0 <vTaskSwitchContext>
	prvTaskExitError();
 800bd90:	f7ff ff20 	bl	800bbd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	e000ed00 	.word	0xe000ed00
 800bda4:	410fc271 	.word	0x410fc271
 800bda8:	410fc270 	.word	0x410fc270
 800bdac:	e000e400 	.word	0xe000e400
 800bdb0:	2000186c 	.word	0x2000186c
 800bdb4:	20001870 	.word	0x20001870
 800bdb8:	e000ed20 	.word	0xe000ed20
 800bdbc:	2000000c 	.word	0x2000000c
 800bdc0:	e000ef34 	.word	0xe000ef34

0800bdc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	607b      	str	r3, [r7, #4]
}
 800bddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdde:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <vPortEnterCritical+0x58>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	4a0d      	ldr	r2, [pc, #52]	; (800be1c <vPortEnterCritical+0x58>)
 800bde6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bde8:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <vPortEnterCritical+0x58>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10f      	bne.n	800be10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <vPortEnterCritical+0x5c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00a      	beq.n	800be10 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	603b      	str	r3, [r7, #0]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <vPortEnterCritical+0x4a>
	}
}
 800be10:	bf00      	nop
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	2000000c 	.word	0x2000000c
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be2a:	4b12      	ldr	r3, [pc, #72]	; (800be74 <vPortExitCritical+0x50>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <vPortExitCritical+0x24>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	607b      	str	r3, [r7, #4]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <vPortExitCritical+0x50>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	4a09      	ldr	r2, [pc, #36]	; (800be74 <vPortExitCritical+0x50>)
 800be50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <vPortExitCritical+0x50>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <vPortExitCritical+0x42>
 800be5a:	2300      	movs	r3, #0
 800be5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	f383 8811 	msr	BASEPRI, r3
}
 800be64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be66:	bf00      	nop
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	2000000c 	.word	0x2000000c
	...

0800be80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be80:	f3ef 8009 	mrs	r0, PSP
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	4b15      	ldr	r3, [pc, #84]	; (800bee0 <pxCurrentTCBConst>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	f01e 0f10 	tst.w	lr, #16
 800be90:	bf08      	it	eq
 800be92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9a:	6010      	str	r0, [r2, #0]
 800be9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bea4:	f380 8811 	msr	BASEPRI, r0
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f7fe fe8e 	bl	800abd0 <vTaskSwitchContext>
 800beb4:	f04f 0000 	mov.w	r0, #0
 800beb8:	f380 8811 	msr	BASEPRI, r0
 800bebc:	bc09      	pop	{r0, r3}
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	6808      	ldr	r0, [r1, #0]
 800bec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec6:	f01e 0f10 	tst.w	lr, #16
 800beca:	bf08      	it	eq
 800becc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bed0:	f380 8809 	msr	PSP, r0
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	f3af 8000 	nop.w

0800bee0 <pxCurrentTCBConst>:
 800bee0:	20001238 	.word	0x20001238
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop

0800bee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	607b      	str	r3, [r7, #4]
}
 800bf00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf02:	f7fe fdab 	bl	800aa5c <xTaskIncrementTick>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <xPortSysTickHandler+0x40>)
 800bf0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	2300      	movs	r3, #0
 800bf16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f383 8811 	msr	BASEPRI, r3
}
 800bf1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	e000ed04 	.word	0xe000ed04

0800bf2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf30:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <vPortSetupTimerInterrupt+0x34>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf36:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <vPortSetupTimerInterrupt+0x38>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <vPortSetupTimerInterrupt+0x3c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <vPortSetupTimerInterrupt+0x40>)
 800bf42:	fba2 2303 	umull	r2, r3, r2, r3
 800bf46:	099b      	lsrs	r3, r3, #6
 800bf48:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <vPortSetupTimerInterrupt+0x44>)
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf4e:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <vPortSetupTimerInterrupt+0x34>)
 800bf50:	2207      	movs	r2, #7
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	e000e010 	.word	0xe000e010
 800bf64:	e000e018 	.word	0xe000e018
 800bf68:	20000000 	.word	0x20000000
 800bf6c:	10624dd3 	.word	0x10624dd3
 800bf70:	e000e014 	.word	0xe000e014

0800bf74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf84 <vPortEnableVFP+0x10>
 800bf78:	6801      	ldr	r1, [r0, #0]
 800bf7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf7e:	6001      	str	r1, [r0, #0]
 800bf80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf82:	bf00      	nop
 800bf84:	e000ed88 	.word	0xe000ed88

0800bf88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf8e:	f3ef 8305 	mrs	r3, IPSR
 800bf92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b0f      	cmp	r3, #15
 800bf98:	d914      	bls.n	800bfc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf9a:	4a17      	ldr	r2, [pc, #92]	; (800bff8 <vPortValidateInterruptPriority+0x70>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfa4:	4b15      	ldr	r3, [pc, #84]	; (800bffc <vPortValidateInterruptPriority+0x74>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	7afa      	ldrb	r2, [r7, #11]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d20a      	bcs.n	800bfc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	607b      	str	r3, [r7, #4]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfc4:	4b0e      	ldr	r3, [pc, #56]	; (800c000 <vPortValidateInterruptPriority+0x78>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <vPortValidateInterruptPriority+0x7c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d90a      	bls.n	800bfea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	603b      	str	r3, [r7, #0]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <vPortValidateInterruptPriority+0x60>
	}
 800bfea:	bf00      	nop
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	e000e3f0 	.word	0xe000e3f0
 800bffc:	2000186c 	.word	0x2000186c
 800c000:	e000ed0c 	.word	0xe000ed0c
 800c004:	20001870 	.word	0x20001870

0800c008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c014:	f7fe fc66 	bl	800a8e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c018:	4b5d      	ldr	r3, [pc, #372]	; (800c190 <pvPortMalloc+0x188>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c020:	f000 f924 	bl	800c26c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c024:	4b5b      	ldr	r3, [pc, #364]	; (800c194 <pvPortMalloc+0x18c>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4013      	ands	r3, r2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 8093 	bne.w	800c158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01d      	beq.n	800c074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c038:	2208      	movs	r2, #8
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4413      	add	r3, r2
 800c03e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b00      	cmp	r3, #0
 800c048:	d014      	beq.n	800c074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f023 0307 	bic.w	r3, r3, #7
 800c050:	3308      	adds	r3, #8
 800c052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00a      	beq.n	800c074 <pvPortMalloc+0x6c>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	617b      	str	r3, [r7, #20]
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d06e      	beq.n	800c158 <pvPortMalloc+0x150>
 800c07a:	4b47      	ldr	r3, [pc, #284]	; (800c198 <pvPortMalloc+0x190>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	429a      	cmp	r2, r3
 800c082:	d869      	bhi.n	800c158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c084:	4b45      	ldr	r3, [pc, #276]	; (800c19c <pvPortMalloc+0x194>)
 800c086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c088:	4b44      	ldr	r3, [pc, #272]	; (800c19c <pvPortMalloc+0x194>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c08e:	e004      	b.n	800c09a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d903      	bls.n	800c0ac <pvPortMalloc+0xa4>
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1f1      	bne.n	800c090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0ac:	4b38      	ldr	r3, [pc, #224]	; (800c190 <pvPortMalloc+0x188>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d050      	beq.n	800c158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2208      	movs	r2, #8
 800c0bc:	4413      	add	r3, r2
 800c0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	1ad2      	subs	r2, r2, r3
 800c0d0:	2308      	movs	r3, #8
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d91f      	bls.n	800c118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4413      	add	r3, r2
 800c0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <pvPortMalloc+0xf8>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	613b      	str	r3, [r7, #16]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	1ad2      	subs	r2, r2, r3
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c112:	69b8      	ldr	r0, [r7, #24]
 800c114:	f000 f90c 	bl	800c330 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c118:	4b1f      	ldr	r3, [pc, #124]	; (800c198 <pvPortMalloc+0x190>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	4a1d      	ldr	r2, [pc, #116]	; (800c198 <pvPortMalloc+0x190>)
 800c124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c126:	4b1c      	ldr	r3, [pc, #112]	; (800c198 <pvPortMalloc+0x190>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	4b1d      	ldr	r3, [pc, #116]	; (800c1a0 <pvPortMalloc+0x198>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d203      	bcs.n	800c13a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c132:	4b19      	ldr	r3, [pc, #100]	; (800c198 <pvPortMalloc+0x190>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a1a      	ldr	r2, [pc, #104]	; (800c1a0 <pvPortMalloc+0x198>)
 800c138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	4b15      	ldr	r3, [pc, #84]	; (800c194 <pvPortMalloc+0x18c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	431a      	orrs	r2, r3
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c14e:	4b15      	ldr	r3, [pc, #84]	; (800c1a4 <pvPortMalloc+0x19c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3301      	adds	r3, #1
 800c154:	4a13      	ldr	r2, [pc, #76]	; (800c1a4 <pvPortMalloc+0x19c>)
 800c156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c158:	f7fe fbd2 	bl	800a900 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c162:	f7f6 f8af 	bl	80022c4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	f003 0307 	and.w	r3, r3, #7
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00a      	beq.n	800c186 <pvPortMalloc+0x17e>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <pvPortMalloc+0x17c>
	return pvReturn;
 800c186:	69fb      	ldr	r3, [r7, #28]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3728      	adds	r7, #40	; 0x28
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	2000687c 	.word	0x2000687c
 800c194:	20006890 	.word	0x20006890
 800c198:	20006880 	.word	0x20006880
 800c19c:	20006874 	.word	0x20006874
 800c1a0:	20006884 	.word	0x20006884
 800c1a4:	20006888 	.word	0x20006888

0800c1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d04d      	beq.n	800c256 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1ba:	2308      	movs	r3, #8
 800c1bc:	425b      	negs	r3, r3
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	4b24      	ldr	r3, [pc, #144]	; (800c260 <vPortFree+0xb8>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10a      	bne.n	800c1ec <vPortFree+0x44>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	60fb      	str	r3, [r7, #12]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00a      	beq.n	800c20a <vPortFree+0x62>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	60bb      	str	r3, [r7, #8]
}
 800c206:	bf00      	nop
 800c208:	e7fe      	b.n	800c208 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	4b14      	ldr	r3, [pc, #80]	; (800c260 <vPortFree+0xb8>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4013      	ands	r3, r2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d01e      	beq.n	800c256 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d11a      	bne.n	800c256 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	4b0e      	ldr	r3, [pc, #56]	; (800c260 <vPortFree+0xb8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	43db      	mvns	r3, r3
 800c22a:	401a      	ands	r2, r3
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c230:	f7fe fb58 	bl	800a8e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <vPortFree+0xbc>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4413      	add	r3, r2
 800c23e:	4a09      	ldr	r2, [pc, #36]	; (800c264 <vPortFree+0xbc>)
 800c240:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c242:	6938      	ldr	r0, [r7, #16]
 800c244:	f000 f874 	bl	800c330 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c248:	4b07      	ldr	r3, [pc, #28]	; (800c268 <vPortFree+0xc0>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	3301      	adds	r3, #1
 800c24e:	4a06      	ldr	r2, [pc, #24]	; (800c268 <vPortFree+0xc0>)
 800c250:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c252:	f7fe fb55 	bl	800a900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c256:	bf00      	nop
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20006890 	.word	0x20006890
 800c264:	20006880 	.word	0x20006880
 800c268:	2000688c 	.word	0x2000688c

0800c26c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c272:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800c276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c278:	4b27      	ldr	r3, [pc, #156]	; (800c318 <prvHeapInit+0xac>)
 800c27a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f003 0307 	and.w	r3, r3, #7
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00c      	beq.n	800c2a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3307      	adds	r3, #7
 800c28a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 0307 	bic.w	r3, r3, #7
 800c292:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	4a1f      	ldr	r2, [pc, #124]	; (800c318 <prvHeapInit+0xac>)
 800c29c:	4413      	add	r3, r2
 800c29e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2a4:	4a1d      	ldr	r2, [pc, #116]	; (800c31c <prvHeapInit+0xb0>)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2aa:	4b1c      	ldr	r3, [pc, #112]	; (800c31c <prvHeapInit+0xb0>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2b8:	2208      	movs	r2, #8
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	1a9b      	subs	r3, r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0307 	bic.w	r3, r3, #7
 800c2c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	4a15      	ldr	r2, [pc, #84]	; (800c320 <prvHeapInit+0xb4>)
 800c2cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2ce:	4b14      	ldr	r3, [pc, #80]	; (800c320 <prvHeapInit+0xb4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2d6:	4b12      	ldr	r3, [pc, #72]	; (800c320 <prvHeapInit+0xb4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	1ad2      	subs	r2, r2, r3
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2ec:	4b0c      	ldr	r3, [pc, #48]	; (800c320 <prvHeapInit+0xb4>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a0a      	ldr	r2, [pc, #40]	; (800c324 <prvHeapInit+0xb8>)
 800c2fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4a09      	ldr	r2, [pc, #36]	; (800c328 <prvHeapInit+0xbc>)
 800c302:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c304:	4b09      	ldr	r3, [pc, #36]	; (800c32c <prvHeapInit+0xc0>)
 800c306:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c30a:	601a      	str	r2, [r3, #0]
}
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	20001874 	.word	0x20001874
 800c31c:	20006874 	.word	0x20006874
 800c320:	2000687c 	.word	0x2000687c
 800c324:	20006884 	.word	0x20006884
 800c328:	20006880 	.word	0x20006880
 800c32c:	20006890 	.word	0x20006890

0800c330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c338:	4b28      	ldr	r3, [pc, #160]	; (800c3dc <prvInsertBlockIntoFreeList+0xac>)
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	e002      	b.n	800c344 <prvInsertBlockIntoFreeList+0x14>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d8f7      	bhi.n	800c33e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	4413      	add	r3, r2
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d108      	bne.n	800c372 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	441a      	add	r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	441a      	add	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d118      	bne.n	800c3b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	4b15      	ldr	r3, [pc, #84]	; (800c3e0 <prvInsertBlockIntoFreeList+0xb0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d00d      	beq.n	800c3ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	441a      	add	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	e008      	b.n	800c3c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3ae:	4b0c      	ldr	r3, [pc, #48]	; (800c3e0 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	e003      	b.n	800c3c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d002      	beq.n	800c3ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3ce:	bf00      	nop
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	20006874 	.word	0x20006874
 800c3e0:	2000687c 	.word	0x2000687c

0800c3e4 <_ZdaPv>:
 800c3e4:	f000 b814 	b.w	800c410 <_ZdlPv>

0800c3e8 <__cxa_guard_acquire>:
 800c3e8:	6803      	ldr	r3, [r0, #0]
 800c3ea:	07db      	lsls	r3, r3, #31
 800c3ec:	d406      	bmi.n	800c3fc <__cxa_guard_acquire+0x14>
 800c3ee:	7843      	ldrb	r3, [r0, #1]
 800c3f0:	b103      	cbz	r3, 800c3f4 <__cxa_guard_acquire+0xc>
 800c3f2:	deff      	udf	#255	; 0xff
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	7043      	strb	r3, [r0, #1]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	4770      	bx	lr
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	4770      	bx	lr

0800c400 <__cxa_guard_release>:
 800c400:	2301      	movs	r3, #1
 800c402:	6003      	str	r3, [r0, #0]
 800c404:	4770      	bx	lr

0800c406 <_Znaj>:
 800c406:	f000 b805 	b.w	800c414 <_Znwj>

0800c40a <_ZSt25__throw_bad_function_callv>:
 800c40a:	b508      	push	{r3, lr}
 800c40c:	f000 f81c 	bl	800c448 <abort>

0800c410 <_ZdlPv>:
 800c410:	f000 b954 	b.w	800c6bc <free>

0800c414 <_Znwj>:
 800c414:	2801      	cmp	r0, #1
 800c416:	bf38      	it	cc
 800c418:	2001      	movcc	r0, #1
 800c41a:	b510      	push	{r4, lr}
 800c41c:	4604      	mov	r4, r0
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 f944 	bl	800c6ac <malloc>
 800c424:	b930      	cbnz	r0, 800c434 <_Znwj+0x20>
 800c426:	f000 f807 	bl	800c438 <_ZSt15get_new_handlerv>
 800c42a:	b908      	cbnz	r0, 800c430 <_Znwj+0x1c>
 800c42c:	f000 f80c 	bl	800c448 <abort>
 800c430:	4780      	blx	r0
 800c432:	e7f4      	b.n	800c41e <_Znwj+0xa>
 800c434:	bd10      	pop	{r4, pc}
	...

0800c438 <_ZSt15get_new_handlerv>:
 800c438:	4b02      	ldr	r3, [pc, #8]	; (800c444 <_ZSt15get_new_handlerv+0xc>)
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	f3bf 8f5b 	dmb	ish
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20006894 	.word	0x20006894

0800c448 <abort>:
 800c448:	b508      	push	{r3, lr}
 800c44a:	2006      	movs	r0, #6
 800c44c:	f000 ff40 	bl	800d2d0 <raise>
 800c450:	2001      	movs	r0, #1
 800c452:	f7f6 fa21 	bl	8002898 <_exit>

0800c456 <atexit>:
 800c456:	2300      	movs	r3, #0
 800c458:	4601      	mov	r1, r0
 800c45a:	461a      	mov	r2, r3
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 bfa9 	b.w	800d3b4 <__register_exitproc>
	...

0800c464 <__errno>:
 800c464:	4b01      	ldr	r3, [pc, #4]	; (800c46c <__errno+0x8>)
 800c466:	6818      	ldr	r0, [r3, #0]
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	20000010 	.word	0x20000010

0800c470 <std>:
 800c470:	2300      	movs	r3, #0
 800c472:	b510      	push	{r4, lr}
 800c474:	4604      	mov	r4, r0
 800c476:	e9c0 3300 	strd	r3, r3, [r0]
 800c47a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c47e:	6083      	str	r3, [r0, #8]
 800c480:	8181      	strh	r1, [r0, #12]
 800c482:	6643      	str	r3, [r0, #100]	; 0x64
 800c484:	81c2      	strh	r2, [r0, #14]
 800c486:	6183      	str	r3, [r0, #24]
 800c488:	4619      	mov	r1, r3
 800c48a:	2208      	movs	r2, #8
 800c48c:	305c      	adds	r0, #92	; 0x5c
 800c48e:	f000 f92b 	bl	800c6e8 <memset>
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <std+0x38>)
 800c494:	6263      	str	r3, [r4, #36]	; 0x24
 800c496:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <std+0x3c>)
 800c498:	62a3      	str	r3, [r4, #40]	; 0x28
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <std+0x40>)
 800c49c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c49e:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <std+0x44>)
 800c4a0:	6224      	str	r4, [r4, #32]
 800c4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800d309 	.word	0x0800d309
 800c4ac:	0800d32b 	.word	0x0800d32b
 800c4b0:	0800d363 	.word	0x0800d363
 800c4b4:	0800d387 	.word	0x0800d387

0800c4b8 <_cleanup_r>:
 800c4b8:	4901      	ldr	r1, [pc, #4]	; (800c4c0 <_cleanup_r+0x8>)
 800c4ba:	f000 b8af 	b.w	800c61c <_fwalk_reent>
 800c4be:	bf00      	nop
 800c4c0:	0800e299 	.word	0x0800e299

0800c4c4 <__sfmoreglue>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	2268      	movs	r2, #104	; 0x68
 800c4c8:	1e4d      	subs	r5, r1, #1
 800c4ca:	4355      	muls	r5, r2
 800c4cc:	460e      	mov	r6, r1
 800c4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4d2:	f000 f97d 	bl	800c7d0 <_malloc_r>
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	b140      	cbz	r0, 800c4ec <__sfmoreglue+0x28>
 800c4da:	2100      	movs	r1, #0
 800c4dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c4e0:	300c      	adds	r0, #12
 800c4e2:	60a0      	str	r0, [r4, #8]
 800c4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4e8:	f000 f8fe 	bl	800c6e8 <memset>
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}

0800c4f0 <__sfp_lock_acquire>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	; (800c4f8 <__sfp_lock_acquire+0x8>)
 800c4f2:	f000 b8d8 	b.w	800c6a6 <__retarget_lock_acquire_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	2000689a 	.word	0x2000689a

0800c4fc <__sfp_lock_release>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	; (800c504 <__sfp_lock_release+0x8>)
 800c4fe:	f000 b8d4 	b.w	800c6aa <__retarget_lock_release_recursive>
 800c502:	bf00      	nop
 800c504:	2000689a 	.word	0x2000689a

0800c508 <__sinit_lock_acquire>:
 800c508:	4801      	ldr	r0, [pc, #4]	; (800c510 <__sinit_lock_acquire+0x8>)
 800c50a:	f000 b8cc 	b.w	800c6a6 <__retarget_lock_acquire_recursive>
 800c50e:	bf00      	nop
 800c510:	2000689b 	.word	0x2000689b

0800c514 <__sinit_lock_release>:
 800c514:	4801      	ldr	r0, [pc, #4]	; (800c51c <__sinit_lock_release+0x8>)
 800c516:	f000 b8c8 	b.w	800c6aa <__retarget_lock_release_recursive>
 800c51a:	bf00      	nop
 800c51c:	2000689b 	.word	0x2000689b

0800c520 <__sinit>:
 800c520:	b510      	push	{r4, lr}
 800c522:	4604      	mov	r4, r0
 800c524:	f7ff fff0 	bl	800c508 <__sinit_lock_acquire>
 800c528:	69a3      	ldr	r3, [r4, #24]
 800c52a:	b11b      	cbz	r3, 800c534 <__sinit+0x14>
 800c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c530:	f7ff bff0 	b.w	800c514 <__sinit_lock_release>
 800c534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c538:	6523      	str	r3, [r4, #80]	; 0x50
 800c53a:	4b13      	ldr	r3, [pc, #76]	; (800c588 <__sinit+0x68>)
 800c53c:	4a13      	ldr	r2, [pc, #76]	; (800c58c <__sinit+0x6c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	62a2      	str	r2, [r4, #40]	; 0x28
 800c542:	42a3      	cmp	r3, r4
 800c544:	bf04      	itt	eq
 800c546:	2301      	moveq	r3, #1
 800c548:	61a3      	streq	r3, [r4, #24]
 800c54a:	4620      	mov	r0, r4
 800c54c:	f000 f820 	bl	800c590 <__sfp>
 800c550:	6060      	str	r0, [r4, #4]
 800c552:	4620      	mov	r0, r4
 800c554:	f000 f81c 	bl	800c590 <__sfp>
 800c558:	60a0      	str	r0, [r4, #8]
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 f818 	bl	800c590 <__sfp>
 800c560:	2200      	movs	r2, #0
 800c562:	60e0      	str	r0, [r4, #12]
 800c564:	2104      	movs	r1, #4
 800c566:	6860      	ldr	r0, [r4, #4]
 800c568:	f7ff ff82 	bl	800c470 <std>
 800c56c:	68a0      	ldr	r0, [r4, #8]
 800c56e:	2201      	movs	r2, #1
 800c570:	2109      	movs	r1, #9
 800c572:	f7ff ff7d 	bl	800c470 <std>
 800c576:	68e0      	ldr	r0, [r4, #12]
 800c578:	2202      	movs	r2, #2
 800c57a:	2112      	movs	r1, #18
 800c57c:	f7ff ff78 	bl	800c470 <std>
 800c580:	2301      	movs	r3, #1
 800c582:	61a3      	str	r3, [r4, #24]
 800c584:	e7d2      	b.n	800c52c <__sinit+0xc>
 800c586:	bf00      	nop
 800c588:	0800f260 	.word	0x0800f260
 800c58c:	0800c4b9 	.word	0x0800c4b9

0800c590 <__sfp>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	4607      	mov	r7, r0
 800c594:	f7ff ffac 	bl	800c4f0 <__sfp_lock_acquire>
 800c598:	4b1e      	ldr	r3, [pc, #120]	; (800c614 <__sfp+0x84>)
 800c59a:	681e      	ldr	r6, [r3, #0]
 800c59c:	69b3      	ldr	r3, [r6, #24]
 800c59e:	b913      	cbnz	r3, 800c5a6 <__sfp+0x16>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7ff ffbd 	bl	800c520 <__sinit>
 800c5a6:	3648      	adds	r6, #72	; 0x48
 800c5a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	d503      	bpl.n	800c5b8 <__sfp+0x28>
 800c5b0:	6833      	ldr	r3, [r6, #0]
 800c5b2:	b30b      	cbz	r3, 800c5f8 <__sfp+0x68>
 800c5b4:	6836      	ldr	r6, [r6, #0]
 800c5b6:	e7f7      	b.n	800c5a8 <__sfp+0x18>
 800c5b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5bc:	b9d5      	cbnz	r5, 800c5f4 <__sfp+0x64>
 800c5be:	4b16      	ldr	r3, [pc, #88]	; (800c618 <__sfp+0x88>)
 800c5c0:	60e3      	str	r3, [r4, #12]
 800c5c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c5c8:	f000 f86c 	bl	800c6a4 <__retarget_lock_init_recursive>
 800c5cc:	f7ff ff96 	bl	800c4fc <__sfp_lock_release>
 800c5d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5d8:	6025      	str	r5, [r4, #0]
 800c5da:	61a5      	str	r5, [r4, #24]
 800c5dc:	2208      	movs	r2, #8
 800c5de:	4629      	mov	r1, r5
 800c5e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5e4:	f000 f880 	bl	800c6e8 <memset>
 800c5e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f4:	3468      	adds	r4, #104	; 0x68
 800c5f6:	e7d9      	b.n	800c5ac <__sfp+0x1c>
 800c5f8:	2104      	movs	r1, #4
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f7ff ff62 	bl	800c4c4 <__sfmoreglue>
 800c600:	4604      	mov	r4, r0
 800c602:	6030      	str	r0, [r6, #0]
 800c604:	2800      	cmp	r0, #0
 800c606:	d1d5      	bne.n	800c5b4 <__sfp+0x24>
 800c608:	f7ff ff78 	bl	800c4fc <__sfp_lock_release>
 800c60c:	230c      	movs	r3, #12
 800c60e:	603b      	str	r3, [r7, #0]
 800c610:	e7ee      	b.n	800c5f0 <__sfp+0x60>
 800c612:	bf00      	nop
 800c614:	0800f260 	.word	0x0800f260
 800c618:	ffff0001 	.word	0xffff0001

0800c61c <_fwalk_reent>:
 800c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c620:	4606      	mov	r6, r0
 800c622:	4688      	mov	r8, r1
 800c624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c628:	2700      	movs	r7, #0
 800c62a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c62e:	f1b9 0901 	subs.w	r9, r9, #1
 800c632:	d505      	bpl.n	800c640 <_fwalk_reent+0x24>
 800c634:	6824      	ldr	r4, [r4, #0]
 800c636:	2c00      	cmp	r4, #0
 800c638:	d1f7      	bne.n	800c62a <_fwalk_reent+0xe>
 800c63a:	4638      	mov	r0, r7
 800c63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c640:	89ab      	ldrh	r3, [r5, #12]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d907      	bls.n	800c656 <_fwalk_reent+0x3a>
 800c646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c64a:	3301      	adds	r3, #1
 800c64c:	d003      	beq.n	800c656 <_fwalk_reent+0x3a>
 800c64e:	4629      	mov	r1, r5
 800c650:	4630      	mov	r0, r6
 800c652:	47c0      	blx	r8
 800c654:	4307      	orrs	r7, r0
 800c656:	3568      	adds	r5, #104	; 0x68
 800c658:	e7e9      	b.n	800c62e <_fwalk_reent+0x12>
	...

0800c65c <__libc_init_array>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	4d0d      	ldr	r5, [pc, #52]	; (800c694 <__libc_init_array+0x38>)
 800c660:	4c0d      	ldr	r4, [pc, #52]	; (800c698 <__libc_init_array+0x3c>)
 800c662:	1b64      	subs	r4, r4, r5
 800c664:	10a4      	asrs	r4, r4, #2
 800c666:	2600      	movs	r6, #0
 800c668:	42a6      	cmp	r6, r4
 800c66a:	d109      	bne.n	800c680 <__libc_init_array+0x24>
 800c66c:	4d0b      	ldr	r5, [pc, #44]	; (800c69c <__libc_init_array+0x40>)
 800c66e:	4c0c      	ldr	r4, [pc, #48]	; (800c6a0 <__libc_init_array+0x44>)
 800c670:	f002 fd0e 	bl	800f090 <_init>
 800c674:	1b64      	subs	r4, r4, r5
 800c676:	10a4      	asrs	r4, r4, #2
 800c678:	2600      	movs	r6, #0
 800c67a:	42a6      	cmp	r6, r4
 800c67c:	d105      	bne.n	800c68a <__libc_init_array+0x2e>
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	f855 3b04 	ldr.w	r3, [r5], #4
 800c684:	4798      	blx	r3
 800c686:	3601      	adds	r6, #1
 800c688:	e7ee      	b.n	800c668 <__libc_init_array+0xc>
 800c68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68e:	4798      	blx	r3
 800c690:	3601      	adds	r6, #1
 800c692:	e7f2      	b.n	800c67a <__libc_init_array+0x1e>
 800c694:	0800f5e4 	.word	0x0800f5e4
 800c698:	0800f5e4 	.word	0x0800f5e4
 800c69c:	0800f5e4 	.word	0x0800f5e4
 800c6a0:	0800f5e8 	.word	0x0800f5e8

0800c6a4 <__retarget_lock_init_recursive>:
 800c6a4:	4770      	bx	lr

0800c6a6 <__retarget_lock_acquire_recursive>:
 800c6a6:	4770      	bx	lr

0800c6a8 <__retarget_lock_release>:
 800c6a8:	4770      	bx	lr

0800c6aa <__retarget_lock_release_recursive>:
 800c6aa:	4770      	bx	lr

0800c6ac <malloc>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <malloc+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f000 b88d 	b.w	800c7d0 <_malloc_r>
 800c6b6:	bf00      	nop
 800c6b8:	20000010 	.word	0x20000010

0800c6bc <free>:
 800c6bc:	4b02      	ldr	r3, [pc, #8]	; (800c6c8 <free+0xc>)
 800c6be:	4601      	mov	r1, r0
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f000 b819 	b.w	800c6f8 <_free_r>
 800c6c6:	bf00      	nop
 800c6c8:	20000010 	.word	0x20000010

0800c6cc <memcpy>:
 800c6cc:	440a      	add	r2, r1
 800c6ce:	4291      	cmp	r1, r2
 800c6d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6d4:	d100      	bne.n	800c6d8 <memcpy+0xc>
 800c6d6:	4770      	bx	lr
 800c6d8:	b510      	push	{r4, lr}
 800c6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6e2:	4291      	cmp	r1, r2
 800c6e4:	d1f9      	bne.n	800c6da <memcpy+0xe>
 800c6e6:	bd10      	pop	{r4, pc}

0800c6e8 <memset>:
 800c6e8:	4402      	add	r2, r0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d100      	bne.n	800c6f2 <memset+0xa>
 800c6f0:	4770      	bx	lr
 800c6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6f6:	e7f9      	b.n	800c6ec <memset+0x4>

0800c6f8 <_free_r>:
 800c6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	d044      	beq.n	800c788 <_free_r+0x90>
 800c6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c702:	9001      	str	r0, [sp, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	f1a1 0404 	sub.w	r4, r1, #4
 800c70a:	bfb8      	it	lt
 800c70c:	18e4      	addlt	r4, r4, r3
 800c70e:	f001 fe15 	bl	800e33c <__malloc_lock>
 800c712:	4a1e      	ldr	r2, [pc, #120]	; (800c78c <_free_r+0x94>)
 800c714:	9801      	ldr	r0, [sp, #4]
 800c716:	6813      	ldr	r3, [r2, #0]
 800c718:	b933      	cbnz	r3, 800c728 <_free_r+0x30>
 800c71a:	6063      	str	r3, [r4, #4]
 800c71c:	6014      	str	r4, [r2, #0]
 800c71e:	b003      	add	sp, #12
 800c720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c724:	f001 be10 	b.w	800e348 <__malloc_unlock>
 800c728:	42a3      	cmp	r3, r4
 800c72a:	d908      	bls.n	800c73e <_free_r+0x46>
 800c72c:	6825      	ldr	r5, [r4, #0]
 800c72e:	1961      	adds	r1, r4, r5
 800c730:	428b      	cmp	r3, r1
 800c732:	bf01      	itttt	eq
 800c734:	6819      	ldreq	r1, [r3, #0]
 800c736:	685b      	ldreq	r3, [r3, #4]
 800c738:	1949      	addeq	r1, r1, r5
 800c73a:	6021      	streq	r1, [r4, #0]
 800c73c:	e7ed      	b.n	800c71a <_free_r+0x22>
 800c73e:	461a      	mov	r2, r3
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	b10b      	cbz	r3, 800c748 <_free_r+0x50>
 800c744:	42a3      	cmp	r3, r4
 800c746:	d9fa      	bls.n	800c73e <_free_r+0x46>
 800c748:	6811      	ldr	r1, [r2, #0]
 800c74a:	1855      	adds	r5, r2, r1
 800c74c:	42a5      	cmp	r5, r4
 800c74e:	d10b      	bne.n	800c768 <_free_r+0x70>
 800c750:	6824      	ldr	r4, [r4, #0]
 800c752:	4421      	add	r1, r4
 800c754:	1854      	adds	r4, r2, r1
 800c756:	42a3      	cmp	r3, r4
 800c758:	6011      	str	r1, [r2, #0]
 800c75a:	d1e0      	bne.n	800c71e <_free_r+0x26>
 800c75c:	681c      	ldr	r4, [r3, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	6053      	str	r3, [r2, #4]
 800c762:	4421      	add	r1, r4
 800c764:	6011      	str	r1, [r2, #0]
 800c766:	e7da      	b.n	800c71e <_free_r+0x26>
 800c768:	d902      	bls.n	800c770 <_free_r+0x78>
 800c76a:	230c      	movs	r3, #12
 800c76c:	6003      	str	r3, [r0, #0]
 800c76e:	e7d6      	b.n	800c71e <_free_r+0x26>
 800c770:	6825      	ldr	r5, [r4, #0]
 800c772:	1961      	adds	r1, r4, r5
 800c774:	428b      	cmp	r3, r1
 800c776:	bf04      	itt	eq
 800c778:	6819      	ldreq	r1, [r3, #0]
 800c77a:	685b      	ldreq	r3, [r3, #4]
 800c77c:	6063      	str	r3, [r4, #4]
 800c77e:	bf04      	itt	eq
 800c780:	1949      	addeq	r1, r1, r5
 800c782:	6021      	streq	r1, [r4, #0]
 800c784:	6054      	str	r4, [r2, #4]
 800c786:	e7ca      	b.n	800c71e <_free_r+0x26>
 800c788:	b003      	add	sp, #12
 800c78a:	bd30      	pop	{r4, r5, pc}
 800c78c:	2000689c 	.word	0x2000689c

0800c790 <sbrk_aligned>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	4e0e      	ldr	r6, [pc, #56]	; (800c7cc <sbrk_aligned+0x3c>)
 800c794:	460c      	mov	r4, r1
 800c796:	6831      	ldr	r1, [r6, #0]
 800c798:	4605      	mov	r5, r0
 800c79a:	b911      	cbnz	r1, 800c7a2 <sbrk_aligned+0x12>
 800c79c:	f000 fd60 	bl	800d260 <_sbrk_r>
 800c7a0:	6030      	str	r0, [r6, #0]
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 fd5b 	bl	800d260 <_sbrk_r>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	d00a      	beq.n	800c7c4 <sbrk_aligned+0x34>
 800c7ae:	1cc4      	adds	r4, r0, #3
 800c7b0:	f024 0403 	bic.w	r4, r4, #3
 800c7b4:	42a0      	cmp	r0, r4
 800c7b6:	d007      	beq.n	800c7c8 <sbrk_aligned+0x38>
 800c7b8:	1a21      	subs	r1, r4, r0
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f000 fd50 	bl	800d260 <_sbrk_r>
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	d101      	bne.n	800c7c8 <sbrk_aligned+0x38>
 800c7c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	200068a0 	.word	0x200068a0

0800c7d0 <_malloc_r>:
 800c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d4:	1ccd      	adds	r5, r1, #3
 800c7d6:	f025 0503 	bic.w	r5, r5, #3
 800c7da:	3508      	adds	r5, #8
 800c7dc:	2d0c      	cmp	r5, #12
 800c7de:	bf38      	it	cc
 800c7e0:	250c      	movcc	r5, #12
 800c7e2:	2d00      	cmp	r5, #0
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	db01      	blt.n	800c7ec <_malloc_r+0x1c>
 800c7e8:	42a9      	cmp	r1, r5
 800c7ea:	d905      	bls.n	800c7f8 <_malloc_r+0x28>
 800c7ec:	230c      	movs	r3, #12
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f8:	4e2e      	ldr	r6, [pc, #184]	; (800c8b4 <_malloc_r+0xe4>)
 800c7fa:	f001 fd9f 	bl	800e33c <__malloc_lock>
 800c7fe:	6833      	ldr	r3, [r6, #0]
 800c800:	461c      	mov	r4, r3
 800c802:	bb34      	cbnz	r4, 800c852 <_malloc_r+0x82>
 800c804:	4629      	mov	r1, r5
 800c806:	4638      	mov	r0, r7
 800c808:	f7ff ffc2 	bl	800c790 <sbrk_aligned>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	4604      	mov	r4, r0
 800c810:	d14d      	bne.n	800c8ae <_malloc_r+0xde>
 800c812:	6834      	ldr	r4, [r6, #0]
 800c814:	4626      	mov	r6, r4
 800c816:	2e00      	cmp	r6, #0
 800c818:	d140      	bne.n	800c89c <_malloc_r+0xcc>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	4631      	mov	r1, r6
 800c81e:	4638      	mov	r0, r7
 800c820:	eb04 0803 	add.w	r8, r4, r3
 800c824:	f000 fd1c 	bl	800d260 <_sbrk_r>
 800c828:	4580      	cmp	r8, r0
 800c82a:	d13a      	bne.n	800c8a2 <_malloc_r+0xd2>
 800c82c:	6821      	ldr	r1, [r4, #0]
 800c82e:	3503      	adds	r5, #3
 800c830:	1a6d      	subs	r5, r5, r1
 800c832:	f025 0503 	bic.w	r5, r5, #3
 800c836:	3508      	adds	r5, #8
 800c838:	2d0c      	cmp	r5, #12
 800c83a:	bf38      	it	cc
 800c83c:	250c      	movcc	r5, #12
 800c83e:	4629      	mov	r1, r5
 800c840:	4638      	mov	r0, r7
 800c842:	f7ff ffa5 	bl	800c790 <sbrk_aligned>
 800c846:	3001      	adds	r0, #1
 800c848:	d02b      	beq.n	800c8a2 <_malloc_r+0xd2>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	442b      	add	r3, r5
 800c84e:	6023      	str	r3, [r4, #0]
 800c850:	e00e      	b.n	800c870 <_malloc_r+0xa0>
 800c852:	6822      	ldr	r2, [r4, #0]
 800c854:	1b52      	subs	r2, r2, r5
 800c856:	d41e      	bmi.n	800c896 <_malloc_r+0xc6>
 800c858:	2a0b      	cmp	r2, #11
 800c85a:	d916      	bls.n	800c88a <_malloc_r+0xba>
 800c85c:	1961      	adds	r1, r4, r5
 800c85e:	42a3      	cmp	r3, r4
 800c860:	6025      	str	r5, [r4, #0]
 800c862:	bf18      	it	ne
 800c864:	6059      	strne	r1, [r3, #4]
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	bf08      	it	eq
 800c86a:	6031      	streq	r1, [r6, #0]
 800c86c:	5162      	str	r2, [r4, r5]
 800c86e:	604b      	str	r3, [r1, #4]
 800c870:	4638      	mov	r0, r7
 800c872:	f104 060b 	add.w	r6, r4, #11
 800c876:	f001 fd67 	bl	800e348 <__malloc_unlock>
 800c87a:	f026 0607 	bic.w	r6, r6, #7
 800c87e:	1d23      	adds	r3, r4, #4
 800c880:	1af2      	subs	r2, r6, r3
 800c882:	d0b6      	beq.n	800c7f2 <_malloc_r+0x22>
 800c884:	1b9b      	subs	r3, r3, r6
 800c886:	50a3      	str	r3, [r4, r2]
 800c888:	e7b3      	b.n	800c7f2 <_malloc_r+0x22>
 800c88a:	6862      	ldr	r2, [r4, #4]
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	bf0c      	ite	eq
 800c890:	6032      	streq	r2, [r6, #0]
 800c892:	605a      	strne	r2, [r3, #4]
 800c894:	e7ec      	b.n	800c870 <_malloc_r+0xa0>
 800c896:	4623      	mov	r3, r4
 800c898:	6864      	ldr	r4, [r4, #4]
 800c89a:	e7b2      	b.n	800c802 <_malloc_r+0x32>
 800c89c:	4634      	mov	r4, r6
 800c89e:	6876      	ldr	r6, [r6, #4]
 800c8a0:	e7b9      	b.n	800c816 <_malloc_r+0x46>
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	603b      	str	r3, [r7, #0]
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	f001 fd4e 	bl	800e348 <__malloc_unlock>
 800c8ac:	e7a1      	b.n	800c7f2 <_malloc_r+0x22>
 800c8ae:	6025      	str	r5, [r4, #0]
 800c8b0:	e7de      	b.n	800c870 <_malloc_r+0xa0>
 800c8b2:	bf00      	nop
 800c8b4:	2000689c 	.word	0x2000689c

0800c8b8 <__cvt>:
 800c8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8bc:	ec55 4b10 	vmov	r4, r5, d0
 800c8c0:	2d00      	cmp	r5, #0
 800c8c2:	460e      	mov	r6, r1
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	462b      	mov	r3, r5
 800c8c8:	bfbb      	ittet	lt
 800c8ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c8ce:	461d      	movlt	r5, r3
 800c8d0:	2300      	movge	r3, #0
 800c8d2:	232d      	movlt	r3, #45	; 0x2d
 800c8d4:	700b      	strb	r3, [r1, #0]
 800c8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8dc:	4691      	mov	r9, r2
 800c8de:	f023 0820 	bic.w	r8, r3, #32
 800c8e2:	bfbc      	itt	lt
 800c8e4:	4622      	movlt	r2, r4
 800c8e6:	4614      	movlt	r4, r2
 800c8e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8ec:	d005      	beq.n	800c8fa <__cvt+0x42>
 800c8ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c8f2:	d100      	bne.n	800c8f6 <__cvt+0x3e>
 800c8f4:	3601      	adds	r6, #1
 800c8f6:	2102      	movs	r1, #2
 800c8f8:	e000      	b.n	800c8fc <__cvt+0x44>
 800c8fa:	2103      	movs	r1, #3
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	ab02      	add	r3, sp, #8
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	ec45 4b10 	vmov	d0, r4, r5
 800c908:	4653      	mov	r3, sl
 800c90a:	4632      	mov	r2, r6
 800c90c:	f000 fe50 	bl	800d5b0 <_dtoa_r>
 800c910:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c914:	4607      	mov	r7, r0
 800c916:	d102      	bne.n	800c91e <__cvt+0x66>
 800c918:	f019 0f01 	tst.w	r9, #1
 800c91c:	d022      	beq.n	800c964 <__cvt+0xac>
 800c91e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c922:	eb07 0906 	add.w	r9, r7, r6
 800c926:	d110      	bne.n	800c94a <__cvt+0x92>
 800c928:	783b      	ldrb	r3, [r7, #0]
 800c92a:	2b30      	cmp	r3, #48	; 0x30
 800c92c:	d10a      	bne.n	800c944 <__cvt+0x8c>
 800c92e:	2200      	movs	r2, #0
 800c930:	2300      	movs	r3, #0
 800c932:	4620      	mov	r0, r4
 800c934:	4629      	mov	r1, r5
 800c936:	f7f4 f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c93a:	b918      	cbnz	r0, 800c944 <__cvt+0x8c>
 800c93c:	f1c6 0601 	rsb	r6, r6, #1
 800c940:	f8ca 6000 	str.w	r6, [sl]
 800c944:	f8da 3000 	ldr.w	r3, [sl]
 800c948:	4499      	add	r9, r3
 800c94a:	2200      	movs	r2, #0
 800c94c:	2300      	movs	r3, #0
 800c94e:	4620      	mov	r0, r4
 800c950:	4629      	mov	r1, r5
 800c952:	f7f4 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c956:	b108      	cbz	r0, 800c95c <__cvt+0xa4>
 800c958:	f8cd 900c 	str.w	r9, [sp, #12]
 800c95c:	2230      	movs	r2, #48	; 0x30
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	454b      	cmp	r3, r9
 800c962:	d307      	bcc.n	800c974 <__cvt+0xbc>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c968:	1bdb      	subs	r3, r3, r7
 800c96a:	4638      	mov	r0, r7
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	b004      	add	sp, #16
 800c970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c974:	1c59      	adds	r1, r3, #1
 800c976:	9103      	str	r1, [sp, #12]
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	e7f0      	b.n	800c95e <__cvt+0xa6>

0800c97c <__exponent>:
 800c97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c97e:	4603      	mov	r3, r0
 800c980:	2900      	cmp	r1, #0
 800c982:	bfb8      	it	lt
 800c984:	4249      	neglt	r1, r1
 800c986:	f803 2b02 	strb.w	r2, [r3], #2
 800c98a:	bfb4      	ite	lt
 800c98c:	222d      	movlt	r2, #45	; 0x2d
 800c98e:	222b      	movge	r2, #43	; 0x2b
 800c990:	2909      	cmp	r1, #9
 800c992:	7042      	strb	r2, [r0, #1]
 800c994:	dd2a      	ble.n	800c9ec <__exponent+0x70>
 800c996:	f10d 0407 	add.w	r4, sp, #7
 800c99a:	46a4      	mov	ip, r4
 800c99c:	270a      	movs	r7, #10
 800c99e:	46a6      	mov	lr, r4
 800c9a0:	460a      	mov	r2, r1
 800c9a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c9a6:	fb07 1516 	mls	r5, r7, r6, r1
 800c9aa:	3530      	adds	r5, #48	; 0x30
 800c9ac:	2a63      	cmp	r2, #99	; 0x63
 800c9ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800c9b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	dcf1      	bgt.n	800c99e <__exponent+0x22>
 800c9ba:	3130      	adds	r1, #48	; 0x30
 800c9bc:	f1ae 0502 	sub.w	r5, lr, #2
 800c9c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9c4:	1c44      	adds	r4, r0, #1
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	4561      	cmp	r1, ip
 800c9ca:	d30a      	bcc.n	800c9e2 <__exponent+0x66>
 800c9cc:	f10d 0209 	add.w	r2, sp, #9
 800c9d0:	eba2 020e 	sub.w	r2, r2, lr
 800c9d4:	4565      	cmp	r5, ip
 800c9d6:	bf88      	it	hi
 800c9d8:	2200      	movhi	r2, #0
 800c9da:	4413      	add	r3, r2
 800c9dc:	1a18      	subs	r0, r3, r0
 800c9de:	b003      	add	sp, #12
 800c9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c9ea:	e7ed      	b.n	800c9c8 <__exponent+0x4c>
 800c9ec:	2330      	movs	r3, #48	; 0x30
 800c9ee:	3130      	adds	r1, #48	; 0x30
 800c9f0:	7083      	strb	r3, [r0, #2]
 800c9f2:	70c1      	strb	r1, [r0, #3]
 800c9f4:	1d03      	adds	r3, r0, #4
 800c9f6:	e7f1      	b.n	800c9dc <__exponent+0x60>

0800c9f8 <_printf_float>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	ed2d 8b02 	vpush	{d8}
 800ca00:	b08d      	sub	sp, #52	; 0x34
 800ca02:	460c      	mov	r4, r1
 800ca04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca08:	4616      	mov	r6, r2
 800ca0a:	461f      	mov	r7, r3
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	f001 fc7f 	bl	800e310 <_localeconv_r>
 800ca12:	f8d0 a000 	ldr.w	sl, [r0]
 800ca16:	4650      	mov	r0, sl
 800ca18:	f7f3 fbda 	bl	80001d0 <strlen>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	9305      	str	r3, [sp, #20]
 800ca24:	f8d8 3000 	ldr.w	r3, [r8]
 800ca28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca2c:	3307      	adds	r3, #7
 800ca2e:	f023 0307 	bic.w	r3, r3, #7
 800ca32:	f103 0208 	add.w	r2, r3, #8
 800ca36:	f8c8 2000 	str.w	r2, [r8]
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca4a:	9307      	str	r3, [sp, #28]
 800ca4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca50:	ee08 0a10 	vmov	s16, r0
 800ca54:	4b9f      	ldr	r3, [pc, #636]	; (800ccd4 <_printf_float+0x2dc>)
 800ca56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5e:	f7f4 f865 	bl	8000b2c <__aeabi_dcmpun>
 800ca62:	bb88      	cbnz	r0, 800cac8 <_printf_float+0xd0>
 800ca64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca68:	4b9a      	ldr	r3, [pc, #616]	; (800ccd4 <_printf_float+0x2dc>)
 800ca6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6e:	f7f4 f83f 	bl	8000af0 <__aeabi_dcmple>
 800ca72:	bb48      	cbnz	r0, 800cac8 <_printf_float+0xd0>
 800ca74:	2200      	movs	r2, #0
 800ca76:	2300      	movs	r3, #0
 800ca78:	4640      	mov	r0, r8
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	f7f4 f82e 	bl	8000adc <__aeabi_dcmplt>
 800ca80:	b110      	cbz	r0, 800ca88 <_printf_float+0x90>
 800ca82:	232d      	movs	r3, #45	; 0x2d
 800ca84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca88:	4b93      	ldr	r3, [pc, #588]	; (800ccd8 <_printf_float+0x2e0>)
 800ca8a:	4894      	ldr	r0, [pc, #592]	; (800ccdc <_printf_float+0x2e4>)
 800ca8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca90:	bf94      	ite	ls
 800ca92:	4698      	movls	r8, r3
 800ca94:	4680      	movhi	r8, r0
 800ca96:	2303      	movs	r3, #3
 800ca98:	6123      	str	r3, [r4, #16]
 800ca9a:	9b05      	ldr	r3, [sp, #20]
 800ca9c:	f023 0204 	bic.w	r2, r3, #4
 800caa0:	6022      	str	r2, [r4, #0]
 800caa2:	f04f 0900 	mov.w	r9, #0
 800caa6:	9700      	str	r7, [sp, #0]
 800caa8:	4633      	mov	r3, r6
 800caaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800caac:	4621      	mov	r1, r4
 800caae:	4628      	mov	r0, r5
 800cab0:	f000 f9d8 	bl	800ce64 <_printf_common>
 800cab4:	3001      	adds	r0, #1
 800cab6:	f040 8090 	bne.w	800cbda <_printf_float+0x1e2>
 800caba:	f04f 30ff 	mov.w	r0, #4294967295
 800cabe:	b00d      	add	sp, #52	; 0x34
 800cac0:	ecbd 8b02 	vpop	{d8}
 800cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac8:	4642      	mov	r2, r8
 800caca:	464b      	mov	r3, r9
 800cacc:	4640      	mov	r0, r8
 800cace:	4649      	mov	r1, r9
 800cad0:	f7f4 f82c 	bl	8000b2c <__aeabi_dcmpun>
 800cad4:	b140      	cbz	r0, 800cae8 <_printf_float+0xf0>
 800cad6:	464b      	mov	r3, r9
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bfbc      	itt	lt
 800cadc:	232d      	movlt	r3, #45	; 0x2d
 800cade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cae2:	487f      	ldr	r0, [pc, #508]	; (800cce0 <_printf_float+0x2e8>)
 800cae4:	4b7f      	ldr	r3, [pc, #508]	; (800cce4 <_printf_float+0x2ec>)
 800cae6:	e7d1      	b.n	800ca8c <_printf_float+0x94>
 800cae8:	6863      	ldr	r3, [r4, #4]
 800caea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800caee:	9206      	str	r2, [sp, #24]
 800caf0:	1c5a      	adds	r2, r3, #1
 800caf2:	d13f      	bne.n	800cb74 <_printf_float+0x17c>
 800caf4:	2306      	movs	r3, #6
 800caf6:	6063      	str	r3, [r4, #4]
 800caf8:	9b05      	ldr	r3, [sp, #20]
 800cafa:	6861      	ldr	r1, [r4, #4]
 800cafc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb00:	2300      	movs	r3, #0
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	ab0a      	add	r3, sp, #40	; 0x28
 800cb06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb0a:	ab09      	add	r3, sp, #36	; 0x24
 800cb0c:	ec49 8b10 	vmov	d0, r8, r9
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	6022      	str	r2, [r4, #0]
 800cb14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f7ff fecd 	bl	800c8b8 <__cvt>
 800cb1e:	9b06      	ldr	r3, [sp, #24]
 800cb20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb22:	2b47      	cmp	r3, #71	; 0x47
 800cb24:	4680      	mov	r8, r0
 800cb26:	d108      	bne.n	800cb3a <_printf_float+0x142>
 800cb28:	1cc8      	adds	r0, r1, #3
 800cb2a:	db02      	blt.n	800cb32 <_printf_float+0x13a>
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	4299      	cmp	r1, r3
 800cb30:	dd41      	ble.n	800cbb6 <_printf_float+0x1be>
 800cb32:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb36:	fa5f fb8b 	uxtb.w	fp, fp
 800cb3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb3e:	d820      	bhi.n	800cb82 <_printf_float+0x18a>
 800cb40:	3901      	subs	r1, #1
 800cb42:	465a      	mov	r2, fp
 800cb44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb48:	9109      	str	r1, [sp, #36]	; 0x24
 800cb4a:	f7ff ff17 	bl	800c97c <__exponent>
 800cb4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb50:	1813      	adds	r3, r2, r0
 800cb52:	2a01      	cmp	r2, #1
 800cb54:	4681      	mov	r9, r0
 800cb56:	6123      	str	r3, [r4, #16]
 800cb58:	dc02      	bgt.n	800cb60 <_printf_float+0x168>
 800cb5a:	6822      	ldr	r2, [r4, #0]
 800cb5c:	07d2      	lsls	r2, r2, #31
 800cb5e:	d501      	bpl.n	800cb64 <_printf_float+0x16c>
 800cb60:	3301      	adds	r3, #1
 800cb62:	6123      	str	r3, [r4, #16]
 800cb64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d09c      	beq.n	800caa6 <_printf_float+0xae>
 800cb6c:	232d      	movs	r3, #45	; 0x2d
 800cb6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb72:	e798      	b.n	800caa6 <_printf_float+0xae>
 800cb74:	9a06      	ldr	r2, [sp, #24]
 800cb76:	2a47      	cmp	r2, #71	; 0x47
 800cb78:	d1be      	bne.n	800caf8 <_printf_float+0x100>
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1bc      	bne.n	800caf8 <_printf_float+0x100>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e7b9      	b.n	800caf6 <_printf_float+0xfe>
 800cb82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb86:	d118      	bne.n	800cbba <_printf_float+0x1c2>
 800cb88:	2900      	cmp	r1, #0
 800cb8a:	6863      	ldr	r3, [r4, #4]
 800cb8c:	dd0b      	ble.n	800cba6 <_printf_float+0x1ae>
 800cb8e:	6121      	str	r1, [r4, #16]
 800cb90:	b913      	cbnz	r3, 800cb98 <_printf_float+0x1a0>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	07d0      	lsls	r0, r2, #31
 800cb96:	d502      	bpl.n	800cb9e <_printf_float+0x1a6>
 800cb98:	3301      	adds	r3, #1
 800cb9a:	440b      	add	r3, r1
 800cb9c:	6123      	str	r3, [r4, #16]
 800cb9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cba0:	f04f 0900 	mov.w	r9, #0
 800cba4:	e7de      	b.n	800cb64 <_printf_float+0x16c>
 800cba6:	b913      	cbnz	r3, 800cbae <_printf_float+0x1b6>
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	07d2      	lsls	r2, r2, #31
 800cbac:	d501      	bpl.n	800cbb2 <_printf_float+0x1ba>
 800cbae:	3302      	adds	r3, #2
 800cbb0:	e7f4      	b.n	800cb9c <_printf_float+0x1a4>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e7f2      	b.n	800cb9c <_printf_float+0x1a4>
 800cbb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cbba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbbc:	4299      	cmp	r1, r3
 800cbbe:	db05      	blt.n	800cbcc <_printf_float+0x1d4>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	6121      	str	r1, [r4, #16]
 800cbc4:	07d8      	lsls	r0, r3, #31
 800cbc6:	d5ea      	bpl.n	800cb9e <_printf_float+0x1a6>
 800cbc8:	1c4b      	adds	r3, r1, #1
 800cbca:	e7e7      	b.n	800cb9c <_printf_float+0x1a4>
 800cbcc:	2900      	cmp	r1, #0
 800cbce:	bfd4      	ite	le
 800cbd0:	f1c1 0202 	rsble	r2, r1, #2
 800cbd4:	2201      	movgt	r2, #1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	e7e0      	b.n	800cb9c <_printf_float+0x1a4>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	055a      	lsls	r2, r3, #21
 800cbde:	d407      	bmi.n	800cbf0 <_printf_float+0x1f8>
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	4642      	mov	r2, r8
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	47b8      	blx	r7
 800cbea:	3001      	adds	r0, #1
 800cbec:	d12c      	bne.n	800cc48 <_printf_float+0x250>
 800cbee:	e764      	b.n	800caba <_printf_float+0xc2>
 800cbf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cbf4:	f240 80e0 	bls.w	800cdb8 <_printf_float+0x3c0>
 800cbf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f7f3 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d034      	beq.n	800cc72 <_printf_float+0x27a>
 800cc08:	4a37      	ldr	r2, [pc, #220]	; (800cce8 <_printf_float+0x2f0>)
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47b8      	blx	r7
 800cc12:	3001      	adds	r0, #1
 800cc14:	f43f af51 	beq.w	800caba <_printf_float+0xc2>
 800cc18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	db02      	blt.n	800cc26 <_printf_float+0x22e>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	07d8      	lsls	r0, r3, #31
 800cc24:	d510      	bpl.n	800cc48 <_printf_float+0x250>
 800cc26:	ee18 3a10 	vmov	r3, s16
 800cc2a:	4652      	mov	r2, sl
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	f43f af41 	beq.w	800caba <_printf_float+0xc2>
 800cc38:	f04f 0800 	mov.w	r8, #0
 800cc3c:	f104 091a 	add.w	r9, r4, #26
 800cc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc42:	3b01      	subs	r3, #1
 800cc44:	4543      	cmp	r3, r8
 800cc46:	dc09      	bgt.n	800cc5c <_printf_float+0x264>
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	079b      	lsls	r3, r3, #30
 800cc4c:	f100 8105 	bmi.w	800ce5a <_printf_float+0x462>
 800cc50:	68e0      	ldr	r0, [r4, #12]
 800cc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc54:	4298      	cmp	r0, r3
 800cc56:	bfb8      	it	lt
 800cc58:	4618      	movlt	r0, r3
 800cc5a:	e730      	b.n	800cabe <_printf_float+0xc6>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	464a      	mov	r2, r9
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	47b8      	blx	r7
 800cc66:	3001      	adds	r0, #1
 800cc68:	f43f af27 	beq.w	800caba <_printf_float+0xc2>
 800cc6c:	f108 0801 	add.w	r8, r8, #1
 800cc70:	e7e6      	b.n	800cc40 <_printf_float+0x248>
 800cc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dc39      	bgt.n	800ccec <_printf_float+0x2f4>
 800cc78:	4a1b      	ldr	r2, [pc, #108]	; (800cce8 <_printf_float+0x2f0>)
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4628      	mov	r0, r5
 800cc80:	47b8      	blx	r7
 800cc82:	3001      	adds	r0, #1
 800cc84:	f43f af19 	beq.w	800caba <_printf_float+0xc2>
 800cc88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	d102      	bne.n	800cc96 <_printf_float+0x29e>
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	07d9      	lsls	r1, r3, #31
 800cc94:	d5d8      	bpl.n	800cc48 <_printf_float+0x250>
 800cc96:	ee18 3a10 	vmov	r3, s16
 800cc9a:	4652      	mov	r2, sl
 800cc9c:	4631      	mov	r1, r6
 800cc9e:	4628      	mov	r0, r5
 800cca0:	47b8      	blx	r7
 800cca2:	3001      	adds	r0, #1
 800cca4:	f43f af09 	beq.w	800caba <_printf_float+0xc2>
 800cca8:	f04f 0900 	mov.w	r9, #0
 800ccac:	f104 0a1a 	add.w	sl, r4, #26
 800ccb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb2:	425b      	negs	r3, r3
 800ccb4:	454b      	cmp	r3, r9
 800ccb6:	dc01      	bgt.n	800ccbc <_printf_float+0x2c4>
 800ccb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccba:	e792      	b.n	800cbe2 <_printf_float+0x1ea>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	4652      	mov	r2, sl
 800ccc0:	4631      	mov	r1, r6
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	47b8      	blx	r7
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	f43f aef7 	beq.w	800caba <_printf_float+0xc2>
 800cccc:	f109 0901 	add.w	r9, r9, #1
 800ccd0:	e7ee      	b.n	800ccb0 <_printf_float+0x2b8>
 800ccd2:	bf00      	nop
 800ccd4:	7fefffff 	.word	0x7fefffff
 800ccd8:	0800f264 	.word	0x0800f264
 800ccdc:	0800f268 	.word	0x0800f268
 800cce0:	0800f270 	.word	0x0800f270
 800cce4:	0800f26c 	.word	0x0800f26c
 800cce8:	0800f274 	.word	0x0800f274
 800ccec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	bfa8      	it	ge
 800ccf4:	461a      	movge	r2, r3
 800ccf6:	2a00      	cmp	r2, #0
 800ccf8:	4691      	mov	r9, r2
 800ccfa:	dc37      	bgt.n	800cd6c <_printf_float+0x374>
 800ccfc:	f04f 0b00 	mov.w	fp, #0
 800cd00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd04:	f104 021a 	add.w	r2, r4, #26
 800cd08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd0a:	9305      	str	r3, [sp, #20]
 800cd0c:	eba3 0309 	sub.w	r3, r3, r9
 800cd10:	455b      	cmp	r3, fp
 800cd12:	dc33      	bgt.n	800cd7c <_printf_float+0x384>
 800cd14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	db3b      	blt.n	800cd94 <_printf_float+0x39c>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	07da      	lsls	r2, r3, #31
 800cd20:	d438      	bmi.n	800cd94 <_printf_float+0x39c>
 800cd22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd24:	9a05      	ldr	r2, [sp, #20]
 800cd26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd28:	1a9a      	subs	r2, r3, r2
 800cd2a:	eba3 0901 	sub.w	r9, r3, r1
 800cd2e:	4591      	cmp	r9, r2
 800cd30:	bfa8      	it	ge
 800cd32:	4691      	movge	r9, r2
 800cd34:	f1b9 0f00 	cmp.w	r9, #0
 800cd38:	dc35      	bgt.n	800cda6 <_printf_float+0x3ae>
 800cd3a:	f04f 0800 	mov.w	r8, #0
 800cd3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd42:	f104 0a1a 	add.w	sl, r4, #26
 800cd46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd4a:	1a9b      	subs	r3, r3, r2
 800cd4c:	eba3 0309 	sub.w	r3, r3, r9
 800cd50:	4543      	cmp	r3, r8
 800cd52:	f77f af79 	ble.w	800cc48 <_printf_float+0x250>
 800cd56:	2301      	movs	r3, #1
 800cd58:	4652      	mov	r2, sl
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	47b8      	blx	r7
 800cd60:	3001      	adds	r0, #1
 800cd62:	f43f aeaa 	beq.w	800caba <_printf_float+0xc2>
 800cd66:	f108 0801 	add.w	r8, r8, #1
 800cd6a:	e7ec      	b.n	800cd46 <_printf_float+0x34e>
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	4631      	mov	r1, r6
 800cd70:	4642      	mov	r2, r8
 800cd72:	4628      	mov	r0, r5
 800cd74:	47b8      	blx	r7
 800cd76:	3001      	adds	r0, #1
 800cd78:	d1c0      	bne.n	800ccfc <_printf_float+0x304>
 800cd7a:	e69e      	b.n	800caba <_printf_float+0xc2>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4628      	mov	r0, r5
 800cd82:	9205      	str	r2, [sp, #20]
 800cd84:	47b8      	blx	r7
 800cd86:	3001      	adds	r0, #1
 800cd88:	f43f ae97 	beq.w	800caba <_printf_float+0xc2>
 800cd8c:	9a05      	ldr	r2, [sp, #20]
 800cd8e:	f10b 0b01 	add.w	fp, fp, #1
 800cd92:	e7b9      	b.n	800cd08 <_printf_float+0x310>
 800cd94:	ee18 3a10 	vmov	r3, s16
 800cd98:	4652      	mov	r2, sl
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	d1be      	bne.n	800cd22 <_printf_float+0x32a>
 800cda4:	e689      	b.n	800caba <_printf_float+0xc2>
 800cda6:	9a05      	ldr	r2, [sp, #20]
 800cda8:	464b      	mov	r3, r9
 800cdaa:	4442      	add	r2, r8
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	47b8      	blx	r7
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d1c1      	bne.n	800cd3a <_printf_float+0x342>
 800cdb6:	e680      	b.n	800caba <_printf_float+0xc2>
 800cdb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdba:	2a01      	cmp	r2, #1
 800cdbc:	dc01      	bgt.n	800cdc2 <_printf_float+0x3ca>
 800cdbe:	07db      	lsls	r3, r3, #31
 800cdc0:	d538      	bpl.n	800ce34 <_printf_float+0x43c>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	4642      	mov	r2, r8
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f ae74 	beq.w	800caba <_printf_float+0xc2>
 800cdd2:	ee18 3a10 	vmov	r3, s16
 800cdd6:	4652      	mov	r2, sl
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	f43f ae6b 	beq.w	800caba <_printf_float+0xc2>
 800cde4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cde8:	2200      	movs	r2, #0
 800cdea:	2300      	movs	r3, #0
 800cdec:	f7f3 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdf0:	b9d8      	cbnz	r0, 800ce2a <_printf_float+0x432>
 800cdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf4:	f108 0201 	add.w	r2, r8, #1
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	47b8      	blx	r7
 800ce00:	3001      	adds	r0, #1
 800ce02:	d10e      	bne.n	800ce22 <_printf_float+0x42a>
 800ce04:	e659      	b.n	800caba <_printf_float+0xc2>
 800ce06:	2301      	movs	r3, #1
 800ce08:	4652      	mov	r2, sl
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	f43f ae52 	beq.w	800caba <_printf_float+0xc2>
 800ce16:	f108 0801 	add.w	r8, r8, #1
 800ce1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	4543      	cmp	r3, r8
 800ce20:	dcf1      	bgt.n	800ce06 <_printf_float+0x40e>
 800ce22:	464b      	mov	r3, r9
 800ce24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce28:	e6dc      	b.n	800cbe4 <_printf_float+0x1ec>
 800ce2a:	f04f 0800 	mov.w	r8, #0
 800ce2e:	f104 0a1a 	add.w	sl, r4, #26
 800ce32:	e7f2      	b.n	800ce1a <_printf_float+0x422>
 800ce34:	2301      	movs	r3, #1
 800ce36:	4642      	mov	r2, r8
 800ce38:	e7df      	b.n	800cdfa <_printf_float+0x402>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	f43f ae38 	beq.w	800caba <_printf_float+0xc2>
 800ce4a:	f108 0801 	add.w	r8, r8, #1
 800ce4e:	68e3      	ldr	r3, [r4, #12]
 800ce50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce52:	1a5b      	subs	r3, r3, r1
 800ce54:	4543      	cmp	r3, r8
 800ce56:	dcf0      	bgt.n	800ce3a <_printf_float+0x442>
 800ce58:	e6fa      	b.n	800cc50 <_printf_float+0x258>
 800ce5a:	f04f 0800 	mov.w	r8, #0
 800ce5e:	f104 0919 	add.w	r9, r4, #25
 800ce62:	e7f4      	b.n	800ce4e <_printf_float+0x456>

0800ce64 <_printf_common>:
 800ce64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce68:	4616      	mov	r6, r2
 800ce6a:	4699      	mov	r9, r3
 800ce6c:	688a      	ldr	r2, [r1, #8]
 800ce6e:	690b      	ldr	r3, [r1, #16]
 800ce70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	bfb8      	it	lt
 800ce78:	4613      	movlt	r3, r2
 800ce7a:	6033      	str	r3, [r6, #0]
 800ce7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce80:	4607      	mov	r7, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	b10a      	cbz	r2, 800ce8a <_printf_common+0x26>
 800ce86:	3301      	adds	r3, #1
 800ce88:	6033      	str	r3, [r6, #0]
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	0699      	lsls	r1, r3, #26
 800ce8e:	bf42      	ittt	mi
 800ce90:	6833      	ldrmi	r3, [r6, #0]
 800ce92:	3302      	addmi	r3, #2
 800ce94:	6033      	strmi	r3, [r6, #0]
 800ce96:	6825      	ldr	r5, [r4, #0]
 800ce98:	f015 0506 	ands.w	r5, r5, #6
 800ce9c:	d106      	bne.n	800ceac <_printf_common+0x48>
 800ce9e:	f104 0a19 	add.w	sl, r4, #25
 800cea2:	68e3      	ldr	r3, [r4, #12]
 800cea4:	6832      	ldr	r2, [r6, #0]
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	42ab      	cmp	r3, r5
 800ceaa:	dc26      	bgt.n	800cefa <_printf_common+0x96>
 800ceac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ceb0:	1e13      	subs	r3, r2, #0
 800ceb2:	6822      	ldr	r2, [r4, #0]
 800ceb4:	bf18      	it	ne
 800ceb6:	2301      	movne	r3, #1
 800ceb8:	0692      	lsls	r2, r2, #26
 800ceba:	d42b      	bmi.n	800cf14 <_printf_common+0xb0>
 800cebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cec0:	4649      	mov	r1, r9
 800cec2:	4638      	mov	r0, r7
 800cec4:	47c0      	blx	r8
 800cec6:	3001      	adds	r0, #1
 800cec8:	d01e      	beq.n	800cf08 <_printf_common+0xa4>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	68e5      	ldr	r5, [r4, #12]
 800cece:	6832      	ldr	r2, [r6, #0]
 800ced0:	f003 0306 	and.w	r3, r3, #6
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	bf08      	it	eq
 800ced8:	1aad      	subeq	r5, r5, r2
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	6922      	ldr	r2, [r4, #16]
 800cede:	bf0c      	ite	eq
 800cee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cee4:	2500      	movne	r5, #0
 800cee6:	4293      	cmp	r3, r2
 800cee8:	bfc4      	itt	gt
 800ceea:	1a9b      	subgt	r3, r3, r2
 800ceec:	18ed      	addgt	r5, r5, r3
 800ceee:	2600      	movs	r6, #0
 800cef0:	341a      	adds	r4, #26
 800cef2:	42b5      	cmp	r5, r6
 800cef4:	d11a      	bne.n	800cf2c <_printf_common+0xc8>
 800cef6:	2000      	movs	r0, #0
 800cef8:	e008      	b.n	800cf0c <_printf_common+0xa8>
 800cefa:	2301      	movs	r3, #1
 800cefc:	4652      	mov	r2, sl
 800cefe:	4649      	mov	r1, r9
 800cf00:	4638      	mov	r0, r7
 800cf02:	47c0      	blx	r8
 800cf04:	3001      	adds	r0, #1
 800cf06:	d103      	bne.n	800cf10 <_printf_common+0xac>
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf10:	3501      	adds	r5, #1
 800cf12:	e7c6      	b.n	800cea2 <_printf_common+0x3e>
 800cf14:	18e1      	adds	r1, r4, r3
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	2030      	movs	r0, #48	; 0x30
 800cf1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf1e:	4422      	add	r2, r4
 800cf20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf28:	3302      	adds	r3, #2
 800cf2a:	e7c7      	b.n	800cebc <_printf_common+0x58>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	4622      	mov	r2, r4
 800cf30:	4649      	mov	r1, r9
 800cf32:	4638      	mov	r0, r7
 800cf34:	47c0      	blx	r8
 800cf36:	3001      	adds	r0, #1
 800cf38:	d0e6      	beq.n	800cf08 <_printf_common+0xa4>
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	e7d9      	b.n	800cef2 <_printf_common+0x8e>
	...

0800cf40 <_printf_i>:
 800cf40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf44:	7e0f      	ldrb	r7, [r1, #24]
 800cf46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf48:	2f78      	cmp	r7, #120	; 0x78
 800cf4a:	4691      	mov	r9, r2
 800cf4c:	4680      	mov	r8, r0
 800cf4e:	460c      	mov	r4, r1
 800cf50:	469a      	mov	sl, r3
 800cf52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf56:	d807      	bhi.n	800cf68 <_printf_i+0x28>
 800cf58:	2f62      	cmp	r7, #98	; 0x62
 800cf5a:	d80a      	bhi.n	800cf72 <_printf_i+0x32>
 800cf5c:	2f00      	cmp	r7, #0
 800cf5e:	f000 80d8 	beq.w	800d112 <_printf_i+0x1d2>
 800cf62:	2f58      	cmp	r7, #88	; 0x58
 800cf64:	f000 80a3 	beq.w	800d0ae <_printf_i+0x16e>
 800cf68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf70:	e03a      	b.n	800cfe8 <_printf_i+0xa8>
 800cf72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf76:	2b15      	cmp	r3, #21
 800cf78:	d8f6      	bhi.n	800cf68 <_printf_i+0x28>
 800cf7a:	a101      	add	r1, pc, #4	; (adr r1, 800cf80 <_printf_i+0x40>)
 800cf7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf80:	0800cfd9 	.word	0x0800cfd9
 800cf84:	0800cfed 	.word	0x0800cfed
 800cf88:	0800cf69 	.word	0x0800cf69
 800cf8c:	0800cf69 	.word	0x0800cf69
 800cf90:	0800cf69 	.word	0x0800cf69
 800cf94:	0800cf69 	.word	0x0800cf69
 800cf98:	0800cfed 	.word	0x0800cfed
 800cf9c:	0800cf69 	.word	0x0800cf69
 800cfa0:	0800cf69 	.word	0x0800cf69
 800cfa4:	0800cf69 	.word	0x0800cf69
 800cfa8:	0800cf69 	.word	0x0800cf69
 800cfac:	0800d0f9 	.word	0x0800d0f9
 800cfb0:	0800d01d 	.word	0x0800d01d
 800cfb4:	0800d0db 	.word	0x0800d0db
 800cfb8:	0800cf69 	.word	0x0800cf69
 800cfbc:	0800cf69 	.word	0x0800cf69
 800cfc0:	0800d11b 	.word	0x0800d11b
 800cfc4:	0800cf69 	.word	0x0800cf69
 800cfc8:	0800d01d 	.word	0x0800d01d
 800cfcc:	0800cf69 	.word	0x0800cf69
 800cfd0:	0800cf69 	.word	0x0800cf69
 800cfd4:	0800d0e3 	.word	0x0800d0e3
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	1d1a      	adds	r2, r3, #4
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	602a      	str	r2, [r5, #0]
 800cfe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e0a3      	b.n	800d134 <_printf_i+0x1f4>
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	6829      	ldr	r1, [r5, #0]
 800cff0:	0606      	lsls	r6, r0, #24
 800cff2:	f101 0304 	add.w	r3, r1, #4
 800cff6:	d50a      	bpl.n	800d00e <_printf_i+0xce>
 800cff8:	680e      	ldr	r6, [r1, #0]
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	2e00      	cmp	r6, #0
 800cffe:	da03      	bge.n	800d008 <_printf_i+0xc8>
 800d000:	232d      	movs	r3, #45	; 0x2d
 800d002:	4276      	negs	r6, r6
 800d004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d008:	485e      	ldr	r0, [pc, #376]	; (800d184 <_printf_i+0x244>)
 800d00a:	230a      	movs	r3, #10
 800d00c:	e019      	b.n	800d042 <_printf_i+0x102>
 800d00e:	680e      	ldr	r6, [r1, #0]
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d016:	bf18      	it	ne
 800d018:	b236      	sxthne	r6, r6
 800d01a:	e7ef      	b.n	800cffc <_printf_i+0xbc>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	6820      	ldr	r0, [r4, #0]
 800d020:	1d19      	adds	r1, r3, #4
 800d022:	6029      	str	r1, [r5, #0]
 800d024:	0601      	lsls	r1, r0, #24
 800d026:	d501      	bpl.n	800d02c <_printf_i+0xec>
 800d028:	681e      	ldr	r6, [r3, #0]
 800d02a:	e002      	b.n	800d032 <_printf_i+0xf2>
 800d02c:	0646      	lsls	r6, r0, #25
 800d02e:	d5fb      	bpl.n	800d028 <_printf_i+0xe8>
 800d030:	881e      	ldrh	r6, [r3, #0]
 800d032:	4854      	ldr	r0, [pc, #336]	; (800d184 <_printf_i+0x244>)
 800d034:	2f6f      	cmp	r7, #111	; 0x6f
 800d036:	bf0c      	ite	eq
 800d038:	2308      	moveq	r3, #8
 800d03a:	230a      	movne	r3, #10
 800d03c:	2100      	movs	r1, #0
 800d03e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d042:	6865      	ldr	r5, [r4, #4]
 800d044:	60a5      	str	r5, [r4, #8]
 800d046:	2d00      	cmp	r5, #0
 800d048:	bfa2      	ittt	ge
 800d04a:	6821      	ldrge	r1, [r4, #0]
 800d04c:	f021 0104 	bicge.w	r1, r1, #4
 800d050:	6021      	strge	r1, [r4, #0]
 800d052:	b90e      	cbnz	r6, 800d058 <_printf_i+0x118>
 800d054:	2d00      	cmp	r5, #0
 800d056:	d04d      	beq.n	800d0f4 <_printf_i+0x1b4>
 800d058:	4615      	mov	r5, r2
 800d05a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d05e:	fb03 6711 	mls	r7, r3, r1, r6
 800d062:	5dc7      	ldrb	r7, [r0, r7]
 800d064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d068:	4637      	mov	r7, r6
 800d06a:	42bb      	cmp	r3, r7
 800d06c:	460e      	mov	r6, r1
 800d06e:	d9f4      	bls.n	800d05a <_printf_i+0x11a>
 800d070:	2b08      	cmp	r3, #8
 800d072:	d10b      	bne.n	800d08c <_printf_i+0x14c>
 800d074:	6823      	ldr	r3, [r4, #0]
 800d076:	07de      	lsls	r6, r3, #31
 800d078:	d508      	bpl.n	800d08c <_printf_i+0x14c>
 800d07a:	6923      	ldr	r3, [r4, #16]
 800d07c:	6861      	ldr	r1, [r4, #4]
 800d07e:	4299      	cmp	r1, r3
 800d080:	bfde      	ittt	le
 800d082:	2330      	movle	r3, #48	; 0x30
 800d084:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d08c:	1b52      	subs	r2, r2, r5
 800d08e:	6122      	str	r2, [r4, #16]
 800d090:	f8cd a000 	str.w	sl, [sp]
 800d094:	464b      	mov	r3, r9
 800d096:	aa03      	add	r2, sp, #12
 800d098:	4621      	mov	r1, r4
 800d09a:	4640      	mov	r0, r8
 800d09c:	f7ff fee2 	bl	800ce64 <_printf_common>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	d14c      	bne.n	800d13e <_printf_i+0x1fe>
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	b004      	add	sp, #16
 800d0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ae:	4835      	ldr	r0, [pc, #212]	; (800d184 <_printf_i+0x244>)
 800d0b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0b4:	6829      	ldr	r1, [r5, #0]
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0bc:	6029      	str	r1, [r5, #0]
 800d0be:	061d      	lsls	r5, r3, #24
 800d0c0:	d514      	bpl.n	800d0ec <_printf_i+0x1ac>
 800d0c2:	07df      	lsls	r7, r3, #31
 800d0c4:	bf44      	itt	mi
 800d0c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d0ca:	6023      	strmi	r3, [r4, #0]
 800d0cc:	b91e      	cbnz	r6, 800d0d6 <_printf_i+0x196>
 800d0ce:	6823      	ldr	r3, [r4, #0]
 800d0d0:	f023 0320 	bic.w	r3, r3, #32
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	2310      	movs	r3, #16
 800d0d8:	e7b0      	b.n	800d03c <_printf_i+0xfc>
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	f043 0320 	orr.w	r3, r3, #32
 800d0e0:	6023      	str	r3, [r4, #0]
 800d0e2:	2378      	movs	r3, #120	; 0x78
 800d0e4:	4828      	ldr	r0, [pc, #160]	; (800d188 <_printf_i+0x248>)
 800d0e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d0ea:	e7e3      	b.n	800d0b4 <_printf_i+0x174>
 800d0ec:	0659      	lsls	r1, r3, #25
 800d0ee:	bf48      	it	mi
 800d0f0:	b2b6      	uxthmi	r6, r6
 800d0f2:	e7e6      	b.n	800d0c2 <_printf_i+0x182>
 800d0f4:	4615      	mov	r5, r2
 800d0f6:	e7bb      	b.n	800d070 <_printf_i+0x130>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	6826      	ldr	r6, [r4, #0]
 800d0fc:	6961      	ldr	r1, [r4, #20]
 800d0fe:	1d18      	adds	r0, r3, #4
 800d100:	6028      	str	r0, [r5, #0]
 800d102:	0635      	lsls	r5, r6, #24
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	d501      	bpl.n	800d10c <_printf_i+0x1cc>
 800d108:	6019      	str	r1, [r3, #0]
 800d10a:	e002      	b.n	800d112 <_printf_i+0x1d2>
 800d10c:	0670      	lsls	r0, r6, #25
 800d10e:	d5fb      	bpl.n	800d108 <_printf_i+0x1c8>
 800d110:	8019      	strh	r1, [r3, #0]
 800d112:	2300      	movs	r3, #0
 800d114:	6123      	str	r3, [r4, #16]
 800d116:	4615      	mov	r5, r2
 800d118:	e7ba      	b.n	800d090 <_printf_i+0x150>
 800d11a:	682b      	ldr	r3, [r5, #0]
 800d11c:	1d1a      	adds	r2, r3, #4
 800d11e:	602a      	str	r2, [r5, #0]
 800d120:	681d      	ldr	r5, [r3, #0]
 800d122:	6862      	ldr	r2, [r4, #4]
 800d124:	2100      	movs	r1, #0
 800d126:	4628      	mov	r0, r5
 800d128:	f7f3 f85a 	bl	80001e0 <memchr>
 800d12c:	b108      	cbz	r0, 800d132 <_printf_i+0x1f2>
 800d12e:	1b40      	subs	r0, r0, r5
 800d130:	6060      	str	r0, [r4, #4]
 800d132:	6863      	ldr	r3, [r4, #4]
 800d134:	6123      	str	r3, [r4, #16]
 800d136:	2300      	movs	r3, #0
 800d138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d13c:	e7a8      	b.n	800d090 <_printf_i+0x150>
 800d13e:	6923      	ldr	r3, [r4, #16]
 800d140:	462a      	mov	r2, r5
 800d142:	4649      	mov	r1, r9
 800d144:	4640      	mov	r0, r8
 800d146:	47d0      	blx	sl
 800d148:	3001      	adds	r0, #1
 800d14a:	d0ab      	beq.n	800d0a4 <_printf_i+0x164>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	079b      	lsls	r3, r3, #30
 800d150:	d413      	bmi.n	800d17a <_printf_i+0x23a>
 800d152:	68e0      	ldr	r0, [r4, #12]
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	4298      	cmp	r0, r3
 800d158:	bfb8      	it	lt
 800d15a:	4618      	movlt	r0, r3
 800d15c:	e7a4      	b.n	800d0a8 <_printf_i+0x168>
 800d15e:	2301      	movs	r3, #1
 800d160:	4632      	mov	r2, r6
 800d162:	4649      	mov	r1, r9
 800d164:	4640      	mov	r0, r8
 800d166:	47d0      	blx	sl
 800d168:	3001      	adds	r0, #1
 800d16a:	d09b      	beq.n	800d0a4 <_printf_i+0x164>
 800d16c:	3501      	adds	r5, #1
 800d16e:	68e3      	ldr	r3, [r4, #12]
 800d170:	9903      	ldr	r1, [sp, #12]
 800d172:	1a5b      	subs	r3, r3, r1
 800d174:	42ab      	cmp	r3, r5
 800d176:	dcf2      	bgt.n	800d15e <_printf_i+0x21e>
 800d178:	e7eb      	b.n	800d152 <_printf_i+0x212>
 800d17a:	2500      	movs	r5, #0
 800d17c:	f104 0619 	add.w	r6, r4, #25
 800d180:	e7f5      	b.n	800d16e <_printf_i+0x22e>
 800d182:	bf00      	nop
 800d184:	0800f276 	.word	0x0800f276
 800d188:	0800f287 	.word	0x0800f287

0800d18c <cleanup_glue>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	460c      	mov	r4, r1
 800d190:	6809      	ldr	r1, [r1, #0]
 800d192:	4605      	mov	r5, r0
 800d194:	b109      	cbz	r1, 800d19a <cleanup_glue+0xe>
 800d196:	f7ff fff9 	bl	800d18c <cleanup_glue>
 800d19a:	4621      	mov	r1, r4
 800d19c:	4628      	mov	r0, r5
 800d19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1a2:	f7ff baa9 	b.w	800c6f8 <_free_r>
	...

0800d1a8 <_reclaim_reent>:
 800d1a8:	4b2c      	ldr	r3, [pc, #176]	; (800d25c <_reclaim_reent+0xb4>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4283      	cmp	r3, r0
 800d1ae:	b570      	push	{r4, r5, r6, lr}
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	d051      	beq.n	800d258 <_reclaim_reent+0xb0>
 800d1b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d1b6:	b143      	cbz	r3, 800d1ca <_reclaim_reent+0x22>
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d14a      	bne.n	800d254 <_reclaim_reent+0xac>
 800d1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1c0:	6819      	ldr	r1, [r3, #0]
 800d1c2:	b111      	cbz	r1, 800d1ca <_reclaim_reent+0x22>
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7ff fa97 	bl	800c6f8 <_free_r>
 800d1ca:	6961      	ldr	r1, [r4, #20]
 800d1cc:	b111      	cbz	r1, 800d1d4 <_reclaim_reent+0x2c>
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f7ff fa92 	bl	800c6f8 <_free_r>
 800d1d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d1d6:	b111      	cbz	r1, 800d1de <_reclaim_reent+0x36>
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7ff fa8d 	bl	800c6f8 <_free_r>
 800d1de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d1e0:	b111      	cbz	r1, 800d1e8 <_reclaim_reent+0x40>
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f7ff fa88 	bl	800c6f8 <_free_r>
 800d1e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d1ea:	b111      	cbz	r1, 800d1f2 <_reclaim_reent+0x4a>
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f7ff fa83 	bl	800c6f8 <_free_r>
 800d1f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d1f4:	b111      	cbz	r1, 800d1fc <_reclaim_reent+0x54>
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7ff fa7e 	bl	800c6f8 <_free_r>
 800d1fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d1fe:	b111      	cbz	r1, 800d206 <_reclaim_reent+0x5e>
 800d200:	4620      	mov	r0, r4
 800d202:	f7ff fa79 	bl	800c6f8 <_free_r>
 800d206:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d208:	b111      	cbz	r1, 800d210 <_reclaim_reent+0x68>
 800d20a:	4620      	mov	r0, r4
 800d20c:	f7ff fa74 	bl	800c6f8 <_free_r>
 800d210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d212:	b111      	cbz	r1, 800d21a <_reclaim_reent+0x72>
 800d214:	4620      	mov	r0, r4
 800d216:	f7ff fa6f 	bl	800c6f8 <_free_r>
 800d21a:	69a3      	ldr	r3, [r4, #24]
 800d21c:	b1e3      	cbz	r3, 800d258 <_reclaim_reent+0xb0>
 800d21e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d220:	4620      	mov	r0, r4
 800d222:	4798      	blx	r3
 800d224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d226:	b1b9      	cbz	r1, 800d258 <_reclaim_reent+0xb0>
 800d228:	4620      	mov	r0, r4
 800d22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d22e:	f7ff bfad 	b.w	800d18c <cleanup_glue>
 800d232:	5949      	ldr	r1, [r1, r5]
 800d234:	b941      	cbnz	r1, 800d248 <_reclaim_reent+0xa0>
 800d236:	3504      	adds	r5, #4
 800d238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d23a:	2d80      	cmp	r5, #128	; 0x80
 800d23c:	68d9      	ldr	r1, [r3, #12]
 800d23e:	d1f8      	bne.n	800d232 <_reclaim_reent+0x8a>
 800d240:	4620      	mov	r0, r4
 800d242:	f7ff fa59 	bl	800c6f8 <_free_r>
 800d246:	e7ba      	b.n	800d1be <_reclaim_reent+0x16>
 800d248:	680e      	ldr	r6, [r1, #0]
 800d24a:	4620      	mov	r0, r4
 800d24c:	f7ff fa54 	bl	800c6f8 <_free_r>
 800d250:	4631      	mov	r1, r6
 800d252:	e7ef      	b.n	800d234 <_reclaim_reent+0x8c>
 800d254:	2500      	movs	r5, #0
 800d256:	e7ef      	b.n	800d238 <_reclaim_reent+0x90>
 800d258:	bd70      	pop	{r4, r5, r6, pc}
 800d25a:	bf00      	nop
 800d25c:	20000010 	.word	0x20000010

0800d260 <_sbrk_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4d06      	ldr	r5, [pc, #24]	; (800d27c <_sbrk_r+0x1c>)
 800d264:	2300      	movs	r3, #0
 800d266:	4604      	mov	r4, r0
 800d268:	4608      	mov	r0, r1
 800d26a:	602b      	str	r3, [r5, #0]
 800d26c:	f7f5 fb8c 	bl	8002988 <_sbrk>
 800d270:	1c43      	adds	r3, r0, #1
 800d272:	d102      	bne.n	800d27a <_sbrk_r+0x1a>
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	b103      	cbz	r3, 800d27a <_sbrk_r+0x1a>
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	200068a4 	.word	0x200068a4

0800d280 <_raise_r>:
 800d280:	291f      	cmp	r1, #31
 800d282:	b538      	push	{r3, r4, r5, lr}
 800d284:	4604      	mov	r4, r0
 800d286:	460d      	mov	r5, r1
 800d288:	d904      	bls.n	800d294 <_raise_r+0x14>
 800d28a:	2316      	movs	r3, #22
 800d28c:	6003      	str	r3, [r0, #0]
 800d28e:	f04f 30ff 	mov.w	r0, #4294967295
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d296:	b112      	cbz	r2, 800d29e <_raise_r+0x1e>
 800d298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d29c:	b94b      	cbnz	r3, 800d2b2 <_raise_r+0x32>
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f000 f830 	bl	800d304 <_getpid_r>
 800d2a4:	462a      	mov	r2, r5
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ae:	f000 b817 	b.w	800d2e0 <_kill_r>
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d00a      	beq.n	800d2cc <_raise_r+0x4c>
 800d2b6:	1c59      	adds	r1, r3, #1
 800d2b8:	d103      	bne.n	800d2c2 <_raise_r+0x42>
 800d2ba:	2316      	movs	r3, #22
 800d2bc:	6003      	str	r3, [r0, #0]
 800d2be:	2001      	movs	r0, #1
 800d2c0:	e7e7      	b.n	800d292 <_raise_r+0x12>
 800d2c2:	2400      	movs	r4, #0
 800d2c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	4798      	blx	r3
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	e7e0      	b.n	800d292 <_raise_r+0x12>

0800d2d0 <raise>:
 800d2d0:	4b02      	ldr	r3, [pc, #8]	; (800d2dc <raise+0xc>)
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	6818      	ldr	r0, [r3, #0]
 800d2d6:	f7ff bfd3 	b.w	800d280 <_raise_r>
 800d2da:	bf00      	nop
 800d2dc:	20000010 	.word	0x20000010

0800d2e0 <_kill_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4d07      	ldr	r5, [pc, #28]	; (800d300 <_kill_r+0x20>)
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	f7f5 fac3 	bl	8002878 <_kill>
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	d102      	bne.n	800d2fc <_kill_r+0x1c>
 800d2f6:	682b      	ldr	r3, [r5, #0]
 800d2f8:	b103      	cbz	r3, 800d2fc <_kill_r+0x1c>
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
 800d2fe:	bf00      	nop
 800d300:	200068a4 	.word	0x200068a4

0800d304 <_getpid_r>:
 800d304:	f7f5 bab0 	b.w	8002868 <_getpid>

0800d308 <__sread>:
 800d308:	b510      	push	{r4, lr}
 800d30a:	460c      	mov	r4, r1
 800d30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d310:	f001 fbba 	bl	800ea88 <_read_r>
 800d314:	2800      	cmp	r0, #0
 800d316:	bfab      	itete	ge
 800d318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d31a:	89a3      	ldrhlt	r3, [r4, #12]
 800d31c:	181b      	addge	r3, r3, r0
 800d31e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d322:	bfac      	ite	ge
 800d324:	6563      	strge	r3, [r4, #84]	; 0x54
 800d326:	81a3      	strhlt	r3, [r4, #12]
 800d328:	bd10      	pop	{r4, pc}

0800d32a <__swrite>:
 800d32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d32e:	461f      	mov	r7, r3
 800d330:	898b      	ldrh	r3, [r1, #12]
 800d332:	05db      	lsls	r3, r3, #23
 800d334:	4605      	mov	r5, r0
 800d336:	460c      	mov	r4, r1
 800d338:	4616      	mov	r6, r2
 800d33a:	d505      	bpl.n	800d348 <__swrite+0x1e>
 800d33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d340:	2302      	movs	r3, #2
 800d342:	2200      	movs	r2, #0
 800d344:	f000 ffe8 	bl	800e318 <_lseek_r>
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d352:	81a3      	strh	r3, [r4, #12]
 800d354:	4632      	mov	r2, r6
 800d356:	463b      	mov	r3, r7
 800d358:	4628      	mov	r0, r5
 800d35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	f000 b817 	b.w	800d390 <_write_r>

0800d362 <__sseek>:
 800d362:	b510      	push	{r4, lr}
 800d364:	460c      	mov	r4, r1
 800d366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36a:	f000 ffd5 	bl	800e318 <_lseek_r>
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	bf15      	itete	ne
 800d374:	6560      	strne	r0, [r4, #84]	; 0x54
 800d376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d37a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d37e:	81a3      	strheq	r3, [r4, #12]
 800d380:	bf18      	it	ne
 800d382:	81a3      	strhne	r3, [r4, #12]
 800d384:	bd10      	pop	{r4, pc}

0800d386 <__sclose>:
 800d386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d38a:	f000 b875 	b.w	800d478 <_close_r>
	...

0800d390 <_write_r>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4d07      	ldr	r5, [pc, #28]	; (800d3b0 <_write_r+0x20>)
 800d394:	4604      	mov	r4, r0
 800d396:	4608      	mov	r0, r1
 800d398:	4611      	mov	r1, r2
 800d39a:	2200      	movs	r2, #0
 800d39c:	602a      	str	r2, [r5, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f7f5 faa1 	bl	80028e6 <_write>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d102      	bne.n	800d3ae <_write_r+0x1e>
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	b103      	cbz	r3, 800d3ae <_write_r+0x1e>
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	200068a4 	.word	0x200068a4

0800d3b4 <__register_exitproc>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800d474 <__register_exitproc+0xc0>
 800d3bc:	4606      	mov	r6, r0
 800d3be:	f8d8 0000 	ldr.w	r0, [r8]
 800d3c2:	461f      	mov	r7, r3
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	4691      	mov	r9, r2
 800d3c8:	f7ff f96d 	bl	800c6a6 <__retarget_lock_acquire_recursive>
 800d3cc:	4b25      	ldr	r3, [pc, #148]	; (800d464 <__register_exitproc+0xb0>)
 800d3ce:	681c      	ldr	r4, [r3, #0]
 800d3d0:	b934      	cbnz	r4, 800d3e0 <__register_exitproc+0x2c>
 800d3d2:	4c25      	ldr	r4, [pc, #148]	; (800d468 <__register_exitproc+0xb4>)
 800d3d4:	601c      	str	r4, [r3, #0]
 800d3d6:	4b25      	ldr	r3, [pc, #148]	; (800d46c <__register_exitproc+0xb8>)
 800d3d8:	b113      	cbz	r3, 800d3e0 <__register_exitproc+0x2c>
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800d3e0:	6863      	ldr	r3, [r4, #4]
 800d3e2:	2b1f      	cmp	r3, #31
 800d3e4:	dd07      	ble.n	800d3f6 <__register_exitproc+0x42>
 800d3e6:	f8d8 0000 	ldr.w	r0, [r8]
 800d3ea:	f7ff f95e 	bl	800c6aa <__retarget_lock_release_recursive>
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3f6:	b34e      	cbz	r6, 800d44c <__register_exitproc+0x98>
 800d3f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800d3fc:	b988      	cbnz	r0, 800d422 <__register_exitproc+0x6e>
 800d3fe:	4b1c      	ldr	r3, [pc, #112]	; (800d470 <__register_exitproc+0xbc>)
 800d400:	b923      	cbnz	r3, 800d40c <__register_exitproc+0x58>
 800d402:	f8d8 0000 	ldr.w	r0, [r8]
 800d406:	f7ff f94f 	bl	800c6a8 <__retarget_lock_release>
 800d40a:	e7f0      	b.n	800d3ee <__register_exitproc+0x3a>
 800d40c:	f44f 7084 	mov.w	r0, #264	; 0x108
 800d410:	f7ff f94c 	bl	800c6ac <malloc>
 800d414:	2800      	cmp	r0, #0
 800d416:	d0f4      	beq.n	800d402 <__register_exitproc+0x4e>
 800d418:	2300      	movs	r3, #0
 800d41a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800d41e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800d422:	6863      	ldr	r3, [r4, #4]
 800d424:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800d428:	2201      	movs	r2, #1
 800d42a:	409a      	lsls	r2, r3
 800d42c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800d430:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800d434:	4313      	orrs	r3, r2
 800d436:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800d43a:	2e02      	cmp	r6, #2
 800d43c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800d440:	bf02      	ittt	eq
 800d442:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800d446:	4313      	orreq	r3, r2
 800d448:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800d44c:	6863      	ldr	r3, [r4, #4]
 800d44e:	f8d8 0000 	ldr.w	r0, [r8]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	3302      	adds	r3, #2
 800d456:	6062      	str	r2, [r4, #4]
 800d458:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800d45c:	f7ff f925 	bl	800c6aa <__retarget_lock_release_recursive>
 800d460:	2000      	movs	r0, #0
 800d462:	e7c6      	b.n	800d3f2 <__register_exitproc+0x3e>
 800d464:	20006934 	.word	0x20006934
 800d468:	200068a8 	.word	0x200068a8
 800d46c:	00000000 	.word	0x00000000
 800d470:	0800c6ad 	.word	0x0800c6ad
 800d474:	20000074 	.word	0x20000074

0800d478 <_close_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_close_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f7f5 fa4b 	bl	800291e <_close>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_close_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_close_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	200068a4 	.word	0x200068a4

0800d498 <quorem>:
 800d498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	6903      	ldr	r3, [r0, #16]
 800d49e:	690c      	ldr	r4, [r1, #16]
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	4607      	mov	r7, r0
 800d4a4:	f2c0 8081 	blt.w	800d5aa <quorem+0x112>
 800d4a8:	3c01      	subs	r4, #1
 800d4aa:	f101 0814 	add.w	r8, r1, #20
 800d4ae:	f100 0514 	add.w	r5, r0, #20
 800d4b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4d0:	d331      	bcc.n	800d536 <quorem+0x9e>
 800d4d2:	f04f 0e00 	mov.w	lr, #0
 800d4d6:	4640      	mov	r0, r8
 800d4d8:	46ac      	mov	ip, r5
 800d4da:	46f2      	mov	sl, lr
 800d4dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4e0:	b293      	uxth	r3, r2
 800d4e2:	fb06 e303 	mla	r3, r6, r3, lr
 800d4e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	ebaa 0303 	sub.w	r3, sl, r3
 800d4f0:	f8dc a000 	ldr.w	sl, [ip]
 800d4f4:	0c12      	lsrs	r2, r2, #16
 800d4f6:	fa13 f38a 	uxtah	r3, r3, sl
 800d4fa:	fb06 e202 	mla	r2, r6, r2, lr
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	9b00      	ldr	r3, [sp, #0]
 800d502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d506:	b292      	uxth	r2, r2
 800d508:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d50c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d510:	f8bd 3000 	ldrh.w	r3, [sp]
 800d514:	4581      	cmp	r9, r0
 800d516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d51a:	f84c 3b04 	str.w	r3, [ip], #4
 800d51e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d522:	d2db      	bcs.n	800d4dc <quorem+0x44>
 800d524:	f855 300b 	ldr.w	r3, [r5, fp]
 800d528:	b92b      	cbnz	r3, 800d536 <quorem+0x9e>
 800d52a:	9b01      	ldr	r3, [sp, #4]
 800d52c:	3b04      	subs	r3, #4
 800d52e:	429d      	cmp	r5, r3
 800d530:	461a      	mov	r2, r3
 800d532:	d32e      	bcc.n	800d592 <quorem+0xfa>
 800d534:	613c      	str	r4, [r7, #16]
 800d536:	4638      	mov	r0, r7
 800d538:	f001 f98e 	bl	800e858 <__mcmp>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	db24      	blt.n	800d58a <quorem+0xf2>
 800d540:	3601      	adds	r6, #1
 800d542:	4628      	mov	r0, r5
 800d544:	f04f 0c00 	mov.w	ip, #0
 800d548:	f858 2b04 	ldr.w	r2, [r8], #4
 800d54c:	f8d0 e000 	ldr.w	lr, [r0]
 800d550:	b293      	uxth	r3, r2
 800d552:	ebac 0303 	sub.w	r3, ip, r3
 800d556:	0c12      	lsrs	r2, r2, #16
 800d558:	fa13 f38e 	uxtah	r3, r3, lr
 800d55c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d564:	b29b      	uxth	r3, r3
 800d566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d56a:	45c1      	cmp	r9, r8
 800d56c:	f840 3b04 	str.w	r3, [r0], #4
 800d570:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d574:	d2e8      	bcs.n	800d548 <quorem+0xb0>
 800d576:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d57e:	b922      	cbnz	r2, 800d58a <quorem+0xf2>
 800d580:	3b04      	subs	r3, #4
 800d582:	429d      	cmp	r5, r3
 800d584:	461a      	mov	r2, r3
 800d586:	d30a      	bcc.n	800d59e <quorem+0x106>
 800d588:	613c      	str	r4, [r7, #16]
 800d58a:	4630      	mov	r0, r6
 800d58c:	b003      	add	sp, #12
 800d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d592:	6812      	ldr	r2, [r2, #0]
 800d594:	3b04      	subs	r3, #4
 800d596:	2a00      	cmp	r2, #0
 800d598:	d1cc      	bne.n	800d534 <quorem+0x9c>
 800d59a:	3c01      	subs	r4, #1
 800d59c:	e7c7      	b.n	800d52e <quorem+0x96>
 800d59e:	6812      	ldr	r2, [r2, #0]
 800d5a0:	3b04      	subs	r3, #4
 800d5a2:	2a00      	cmp	r2, #0
 800d5a4:	d1f0      	bne.n	800d588 <quorem+0xf0>
 800d5a6:	3c01      	subs	r4, #1
 800d5a8:	e7eb      	b.n	800d582 <quorem+0xea>
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e7ee      	b.n	800d58c <quorem+0xf4>
	...

0800d5b0 <_dtoa_r>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	ed2d 8b04 	vpush	{d8-d9}
 800d5b8:	ec57 6b10 	vmov	r6, r7, d0
 800d5bc:	b093      	sub	sp, #76	; 0x4c
 800d5be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5c4:	9106      	str	r1, [sp, #24]
 800d5c6:	ee10 aa10 	vmov	sl, s0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d5d0:	46bb      	mov	fp, r7
 800d5d2:	b975      	cbnz	r5, 800d5f2 <_dtoa_r+0x42>
 800d5d4:	2010      	movs	r0, #16
 800d5d6:	f7ff f869 	bl	800c6ac <malloc>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	6260      	str	r0, [r4, #36]	; 0x24
 800d5de:	b920      	cbnz	r0, 800d5ea <_dtoa_r+0x3a>
 800d5e0:	4ba7      	ldr	r3, [pc, #668]	; (800d880 <_dtoa_r+0x2d0>)
 800d5e2:	21ea      	movs	r1, #234	; 0xea
 800d5e4:	48a7      	ldr	r0, [pc, #668]	; (800d884 <_dtoa_r+0x2d4>)
 800d5e6:	f001 fa61 	bl	800eaac <__assert_func>
 800d5ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5ee:	6005      	str	r5, [r0, #0]
 800d5f0:	60c5      	str	r5, [r0, #12]
 800d5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5f4:	6819      	ldr	r1, [r3, #0]
 800d5f6:	b151      	cbz	r1, 800d60e <_dtoa_r+0x5e>
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	604a      	str	r2, [r1, #4]
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	4093      	lsls	r3, r2
 800d600:	608b      	str	r3, [r1, #8]
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fee6 	bl	800e3d4 <_Bfree>
 800d608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	1e3b      	subs	r3, r7, #0
 800d610:	bfaa      	itet	ge
 800d612:	2300      	movge	r3, #0
 800d614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d618:	f8c8 3000 	strge.w	r3, [r8]
 800d61c:	4b9a      	ldr	r3, [pc, #616]	; (800d888 <_dtoa_r+0x2d8>)
 800d61e:	bfbc      	itt	lt
 800d620:	2201      	movlt	r2, #1
 800d622:	f8c8 2000 	strlt.w	r2, [r8]
 800d626:	ea33 030b 	bics.w	r3, r3, fp
 800d62a:	d11b      	bne.n	800d664 <_dtoa_r+0xb4>
 800d62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d62e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d638:	4333      	orrs	r3, r6
 800d63a:	f000 8592 	beq.w	800e162 <_dtoa_r+0xbb2>
 800d63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d640:	b963      	cbnz	r3, 800d65c <_dtoa_r+0xac>
 800d642:	4b92      	ldr	r3, [pc, #584]	; (800d88c <_dtoa_r+0x2dc>)
 800d644:	e022      	b.n	800d68c <_dtoa_r+0xdc>
 800d646:	4b92      	ldr	r3, [pc, #584]	; (800d890 <_dtoa_r+0x2e0>)
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	3308      	adds	r3, #8
 800d64c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	9801      	ldr	r0, [sp, #4]
 800d652:	b013      	add	sp, #76	; 0x4c
 800d654:	ecbd 8b04 	vpop	{d8-d9}
 800d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65c:	4b8b      	ldr	r3, [pc, #556]	; (800d88c <_dtoa_r+0x2dc>)
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	3303      	adds	r3, #3
 800d662:	e7f3      	b.n	800d64c <_dtoa_r+0x9c>
 800d664:	2200      	movs	r2, #0
 800d666:	2300      	movs	r3, #0
 800d668:	4650      	mov	r0, sl
 800d66a:	4659      	mov	r1, fp
 800d66c:	f7f3 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d670:	ec4b ab19 	vmov	d9, sl, fp
 800d674:	4680      	mov	r8, r0
 800d676:	b158      	cbz	r0, 800d690 <_dtoa_r+0xe0>
 800d678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d67a:	2301      	movs	r3, #1
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 856b 	beq.w	800e15c <_dtoa_r+0xbac>
 800d686:	4883      	ldr	r0, [pc, #524]	; (800d894 <_dtoa_r+0x2e4>)
 800d688:	6018      	str	r0, [r3, #0]
 800d68a:	1e43      	subs	r3, r0, #1
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	e7df      	b.n	800d650 <_dtoa_r+0xa0>
 800d690:	ec4b ab10 	vmov	d0, sl, fp
 800d694:	aa10      	add	r2, sp, #64	; 0x40
 800d696:	a911      	add	r1, sp, #68	; 0x44
 800d698:	4620      	mov	r0, r4
 800d69a:	f001 f983 	bl	800e9a4 <__d2b>
 800d69e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6a2:	ee08 0a10 	vmov	s16, r0
 800d6a6:	2d00      	cmp	r5, #0
 800d6a8:	f000 8084 	beq.w	800d7b4 <_dtoa_r+0x204>
 800d6ac:	ee19 3a90 	vmov	r3, s19
 800d6b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6b8:	4656      	mov	r6, sl
 800d6ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d6c6:	4b74      	ldr	r3, [pc, #464]	; (800d898 <_dtoa_r+0x2e8>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	4639      	mov	r1, r7
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	a365      	add	r3, pc, #404	; (adr r3, 800d868 <_dtoa_r+0x2b8>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f2 ff8e 	bl	80005f8 <__aeabi_dmul>
 800d6dc:	a364      	add	r3, pc, #400	; (adr r3, 800d870 <_dtoa_r+0x2c0>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f2 fdd3 	bl	800028c <__adddf3>
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	f7f2 ff1a 	bl	8000524 <__aeabi_i2d>
 800d6f0:	a361      	add	r3, pc, #388	; (adr r3, 800d878 <_dtoa_r+0x2c8>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f2 ff7f 	bl	80005f8 <__aeabi_dmul>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	f7f2 fdc3 	bl	800028c <__adddf3>
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	f7f3 fa25 	bl	8000b58 <__aeabi_d2iz>
 800d70e:	2200      	movs	r2, #0
 800d710:	9000      	str	r0, [sp, #0]
 800d712:	2300      	movs	r3, #0
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f3 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800d71c:	b150      	cbz	r0, 800d734 <_dtoa_r+0x184>
 800d71e:	9800      	ldr	r0, [sp, #0]
 800d720:	f7f2 ff00 	bl	8000524 <__aeabi_i2d>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f3 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800d72c:	b910      	cbnz	r0, 800d734 <_dtoa_r+0x184>
 800d72e:	9b00      	ldr	r3, [sp, #0]
 800d730:	3b01      	subs	r3, #1
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	9b00      	ldr	r3, [sp, #0]
 800d736:	2b16      	cmp	r3, #22
 800d738:	d85a      	bhi.n	800d7f0 <_dtoa_r+0x240>
 800d73a:	9a00      	ldr	r2, [sp, #0]
 800d73c:	4b57      	ldr	r3, [pc, #348]	; (800d89c <_dtoa_r+0x2ec>)
 800d73e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	ec51 0b19 	vmov	r0, r1, d9
 800d74a:	f7f3 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d050      	beq.n	800d7f4 <_dtoa_r+0x244>
 800d752:	9b00      	ldr	r3, [sp, #0]
 800d754:	3b01      	subs	r3, #1
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	2300      	movs	r3, #0
 800d75a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d75e:	1b5d      	subs	r5, r3, r5
 800d760:	1e6b      	subs	r3, r5, #1
 800d762:	9305      	str	r3, [sp, #20]
 800d764:	bf45      	ittet	mi
 800d766:	f1c5 0301 	rsbmi	r3, r5, #1
 800d76a:	9304      	strmi	r3, [sp, #16]
 800d76c:	2300      	movpl	r3, #0
 800d76e:	2300      	movmi	r3, #0
 800d770:	bf4c      	ite	mi
 800d772:	9305      	strmi	r3, [sp, #20]
 800d774:	9304      	strpl	r3, [sp, #16]
 800d776:	9b00      	ldr	r3, [sp, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	db3d      	blt.n	800d7f8 <_dtoa_r+0x248>
 800d77c:	9b05      	ldr	r3, [sp, #20]
 800d77e:	9a00      	ldr	r2, [sp, #0]
 800d780:	920a      	str	r2, [sp, #40]	; 0x28
 800d782:	4413      	add	r3, r2
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	2300      	movs	r3, #0
 800d788:	9307      	str	r3, [sp, #28]
 800d78a:	9b06      	ldr	r3, [sp, #24]
 800d78c:	2b09      	cmp	r3, #9
 800d78e:	f200 8089 	bhi.w	800d8a4 <_dtoa_r+0x2f4>
 800d792:	2b05      	cmp	r3, #5
 800d794:	bfc4      	itt	gt
 800d796:	3b04      	subgt	r3, #4
 800d798:	9306      	strgt	r3, [sp, #24]
 800d79a:	9b06      	ldr	r3, [sp, #24]
 800d79c:	f1a3 0302 	sub.w	r3, r3, #2
 800d7a0:	bfcc      	ite	gt
 800d7a2:	2500      	movgt	r5, #0
 800d7a4:	2501      	movle	r5, #1
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	f200 8087 	bhi.w	800d8ba <_dtoa_r+0x30a>
 800d7ac:	e8df f003 	tbb	[pc, r3]
 800d7b0:	59383a2d 	.word	0x59383a2d
 800d7b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7b8:	441d      	add	r5, r3
 800d7ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	bfc1      	itttt	gt
 800d7c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800d7ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d7d2:	bfda      	itte	le
 800d7d4:	f1c3 0320 	rsble	r3, r3, #32
 800d7d8:	fa06 f003 	lslle.w	r0, r6, r3
 800d7dc:	4318      	orrgt	r0, r3
 800d7de:	f7f2 fe91 	bl	8000504 <__aeabi_ui2d>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d7ea:	3d01      	subs	r5, #1
 800d7ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d7ee:	e76a      	b.n	800d6c6 <_dtoa_r+0x116>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e7b2      	b.n	800d75a <_dtoa_r+0x1aa>
 800d7f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7f6:	e7b1      	b.n	800d75c <_dtoa_r+0x1ac>
 800d7f8:	9b04      	ldr	r3, [sp, #16]
 800d7fa:	9a00      	ldr	r2, [sp, #0]
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	4253      	negs	r3, r2
 800d802:	9307      	str	r3, [sp, #28]
 800d804:	2300      	movs	r3, #0
 800d806:	930a      	str	r3, [sp, #40]	; 0x28
 800d808:	e7bf      	b.n	800d78a <_dtoa_r+0x1da>
 800d80a:	2300      	movs	r3, #0
 800d80c:	9308      	str	r3, [sp, #32]
 800d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d810:	2b00      	cmp	r3, #0
 800d812:	dc55      	bgt.n	800d8c0 <_dtoa_r+0x310>
 800d814:	2301      	movs	r3, #1
 800d816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d81a:	461a      	mov	r2, r3
 800d81c:	9209      	str	r2, [sp, #36]	; 0x24
 800d81e:	e00c      	b.n	800d83a <_dtoa_r+0x28a>
 800d820:	2301      	movs	r3, #1
 800d822:	e7f3      	b.n	800d80c <_dtoa_r+0x25c>
 800d824:	2300      	movs	r3, #0
 800d826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d828:	9308      	str	r3, [sp, #32]
 800d82a:	9b00      	ldr	r3, [sp, #0]
 800d82c:	4413      	add	r3, r2
 800d82e:	9302      	str	r3, [sp, #8]
 800d830:	3301      	adds	r3, #1
 800d832:	2b01      	cmp	r3, #1
 800d834:	9303      	str	r3, [sp, #12]
 800d836:	bfb8      	it	lt
 800d838:	2301      	movlt	r3, #1
 800d83a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d83c:	2200      	movs	r2, #0
 800d83e:	6042      	str	r2, [r0, #4]
 800d840:	2204      	movs	r2, #4
 800d842:	f102 0614 	add.w	r6, r2, #20
 800d846:	429e      	cmp	r6, r3
 800d848:	6841      	ldr	r1, [r0, #4]
 800d84a:	d93d      	bls.n	800d8c8 <_dtoa_r+0x318>
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 fd81 	bl	800e354 <_Balloc>
 800d852:	9001      	str	r0, [sp, #4]
 800d854:	2800      	cmp	r0, #0
 800d856:	d13b      	bne.n	800d8d0 <_dtoa_r+0x320>
 800d858:	4b11      	ldr	r3, [pc, #68]	; (800d8a0 <_dtoa_r+0x2f0>)
 800d85a:	4602      	mov	r2, r0
 800d85c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d860:	e6c0      	b.n	800d5e4 <_dtoa_r+0x34>
 800d862:	2301      	movs	r3, #1
 800d864:	e7df      	b.n	800d826 <_dtoa_r+0x276>
 800d866:	bf00      	nop
 800d868:	636f4361 	.word	0x636f4361
 800d86c:	3fd287a7 	.word	0x3fd287a7
 800d870:	8b60c8b3 	.word	0x8b60c8b3
 800d874:	3fc68a28 	.word	0x3fc68a28
 800d878:	509f79fb 	.word	0x509f79fb
 800d87c:	3fd34413 	.word	0x3fd34413
 800d880:	0800f2a5 	.word	0x0800f2a5
 800d884:	0800f2bc 	.word	0x0800f2bc
 800d888:	7ff00000 	.word	0x7ff00000
 800d88c:	0800f2a1 	.word	0x0800f2a1
 800d890:	0800f298 	.word	0x0800f298
 800d894:	0800f275 	.word	0x0800f275
 800d898:	3ff80000 	.word	0x3ff80000
 800d89c:	0800f3b0 	.word	0x0800f3b0
 800d8a0:	0800f317 	.word	0x0800f317
 800d8a4:	2501      	movs	r5, #1
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	9306      	str	r3, [sp, #24]
 800d8aa:	9508      	str	r5, [sp, #32]
 800d8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	2312      	movs	r3, #18
 800d8b8:	e7b0      	b.n	800d81c <_dtoa_r+0x26c>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	9308      	str	r3, [sp, #32]
 800d8be:	e7f5      	b.n	800d8ac <_dtoa_r+0x2fc>
 800d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8c6:	e7b8      	b.n	800d83a <_dtoa_r+0x28a>
 800d8c8:	3101      	adds	r1, #1
 800d8ca:	6041      	str	r1, [r0, #4]
 800d8cc:	0052      	lsls	r2, r2, #1
 800d8ce:	e7b8      	b.n	800d842 <_dtoa_r+0x292>
 800d8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d2:	9a01      	ldr	r2, [sp, #4]
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	2b0e      	cmp	r3, #14
 800d8da:	f200 809d 	bhi.w	800da18 <_dtoa_r+0x468>
 800d8de:	2d00      	cmp	r5, #0
 800d8e0:	f000 809a 	beq.w	800da18 <_dtoa_r+0x468>
 800d8e4:	9b00      	ldr	r3, [sp, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	dd32      	ble.n	800d950 <_dtoa_r+0x3a0>
 800d8ea:	4ab7      	ldr	r2, [pc, #732]	; (800dbc8 <_dtoa_r+0x618>)
 800d8ec:	f003 030f 	and.w	r3, r3, #15
 800d8f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8f8:	9b00      	ldr	r3, [sp, #0]
 800d8fa:	05d8      	lsls	r0, r3, #23
 800d8fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d900:	d516      	bpl.n	800d930 <_dtoa_r+0x380>
 800d902:	4bb2      	ldr	r3, [pc, #712]	; (800dbcc <_dtoa_r+0x61c>)
 800d904:	ec51 0b19 	vmov	r0, r1, d9
 800d908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d90c:	f7f2 ff9e 	bl	800084c <__aeabi_ddiv>
 800d910:	f007 070f 	and.w	r7, r7, #15
 800d914:	4682      	mov	sl, r0
 800d916:	468b      	mov	fp, r1
 800d918:	2503      	movs	r5, #3
 800d91a:	4eac      	ldr	r6, [pc, #688]	; (800dbcc <_dtoa_r+0x61c>)
 800d91c:	b957      	cbnz	r7, 800d934 <_dtoa_r+0x384>
 800d91e:	4642      	mov	r2, r8
 800d920:	464b      	mov	r3, r9
 800d922:	4650      	mov	r0, sl
 800d924:	4659      	mov	r1, fp
 800d926:	f7f2 ff91 	bl	800084c <__aeabi_ddiv>
 800d92a:	4682      	mov	sl, r0
 800d92c:	468b      	mov	fp, r1
 800d92e:	e028      	b.n	800d982 <_dtoa_r+0x3d2>
 800d930:	2502      	movs	r5, #2
 800d932:	e7f2      	b.n	800d91a <_dtoa_r+0x36a>
 800d934:	07f9      	lsls	r1, r7, #31
 800d936:	d508      	bpl.n	800d94a <_dtoa_r+0x39a>
 800d938:	4640      	mov	r0, r8
 800d93a:	4649      	mov	r1, r9
 800d93c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d940:	f7f2 fe5a 	bl	80005f8 <__aeabi_dmul>
 800d944:	3501      	adds	r5, #1
 800d946:	4680      	mov	r8, r0
 800d948:	4689      	mov	r9, r1
 800d94a:	107f      	asrs	r7, r7, #1
 800d94c:	3608      	adds	r6, #8
 800d94e:	e7e5      	b.n	800d91c <_dtoa_r+0x36c>
 800d950:	f000 809b 	beq.w	800da8a <_dtoa_r+0x4da>
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	4f9d      	ldr	r7, [pc, #628]	; (800dbcc <_dtoa_r+0x61c>)
 800d958:	425e      	negs	r6, r3
 800d95a:	4b9b      	ldr	r3, [pc, #620]	; (800dbc8 <_dtoa_r+0x618>)
 800d95c:	f006 020f 	and.w	r2, r6, #15
 800d960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	ec51 0b19 	vmov	r0, r1, d9
 800d96c:	f7f2 fe44 	bl	80005f8 <__aeabi_dmul>
 800d970:	1136      	asrs	r6, r6, #4
 800d972:	4682      	mov	sl, r0
 800d974:	468b      	mov	fp, r1
 800d976:	2300      	movs	r3, #0
 800d978:	2502      	movs	r5, #2
 800d97a:	2e00      	cmp	r6, #0
 800d97c:	d17a      	bne.n	800da74 <_dtoa_r+0x4c4>
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1d3      	bne.n	800d92a <_dtoa_r+0x37a>
 800d982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 8082 	beq.w	800da8e <_dtoa_r+0x4de>
 800d98a:	4b91      	ldr	r3, [pc, #580]	; (800dbd0 <_dtoa_r+0x620>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	4650      	mov	r0, sl
 800d990:	4659      	mov	r1, fp
 800d992:	f7f3 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800d996:	2800      	cmp	r0, #0
 800d998:	d079      	beq.n	800da8e <_dtoa_r+0x4de>
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d076      	beq.n	800da8e <_dtoa_r+0x4de>
 800d9a0:	9b02      	ldr	r3, [sp, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dd36      	ble.n	800da14 <_dtoa_r+0x464>
 800d9a6:	9b00      	ldr	r3, [sp, #0]
 800d9a8:	4650      	mov	r0, sl
 800d9aa:	4659      	mov	r1, fp
 800d9ac:	1e5f      	subs	r7, r3, #1
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4b88      	ldr	r3, [pc, #544]	; (800dbd4 <_dtoa_r+0x624>)
 800d9b2:	f7f2 fe21 	bl	80005f8 <__aeabi_dmul>
 800d9b6:	9e02      	ldr	r6, [sp, #8]
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	468b      	mov	fp, r1
 800d9bc:	3501      	adds	r5, #1
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f7f2 fdb0 	bl	8000524 <__aeabi_i2d>
 800d9c4:	4652      	mov	r2, sl
 800d9c6:	465b      	mov	r3, fp
 800d9c8:	f7f2 fe16 	bl	80005f8 <__aeabi_dmul>
 800d9cc:	4b82      	ldr	r3, [pc, #520]	; (800dbd8 <_dtoa_r+0x628>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f7f2 fc5c 	bl	800028c <__adddf3>
 800d9d4:	46d0      	mov	r8, sl
 800d9d6:	46d9      	mov	r9, fp
 800d9d8:	4682      	mov	sl, r0
 800d9da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d9de:	2e00      	cmp	r6, #0
 800d9e0:	d158      	bne.n	800da94 <_dtoa_r+0x4e4>
 800d9e2:	4b7e      	ldr	r3, [pc, #504]	; (800dbdc <_dtoa_r+0x62c>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f2 fc4d 	bl	8000288 <__aeabi_dsub>
 800d9ee:	4652      	mov	r2, sl
 800d9f0:	465b      	mov	r3, fp
 800d9f2:	4680      	mov	r8, r0
 800d9f4:	4689      	mov	r9, r1
 800d9f6:	f7f3 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	f040 8295 	bne.w	800df2a <_dtoa_r+0x97a>
 800da00:	4652      	mov	r2, sl
 800da02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da06:	4640      	mov	r0, r8
 800da08:	4649      	mov	r1, r9
 800da0a:	f7f3 f867 	bl	8000adc <__aeabi_dcmplt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 8289 	bne.w	800df26 <_dtoa_r+0x976>
 800da14:	ec5b ab19 	vmov	sl, fp, d9
 800da18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f2c0 8148 	blt.w	800dcb0 <_dtoa_r+0x700>
 800da20:	9a00      	ldr	r2, [sp, #0]
 800da22:	2a0e      	cmp	r2, #14
 800da24:	f300 8144 	bgt.w	800dcb0 <_dtoa_r+0x700>
 800da28:	4b67      	ldr	r3, [pc, #412]	; (800dbc8 <_dtoa_r+0x618>)
 800da2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da34:	2b00      	cmp	r3, #0
 800da36:	f280 80d5 	bge.w	800dbe4 <_dtoa_r+0x634>
 800da3a:	9b03      	ldr	r3, [sp, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f300 80d1 	bgt.w	800dbe4 <_dtoa_r+0x634>
 800da42:	f040 826f 	bne.w	800df24 <_dtoa_r+0x974>
 800da46:	4b65      	ldr	r3, [pc, #404]	; (800dbdc <_dtoa_r+0x62c>)
 800da48:	2200      	movs	r2, #0
 800da4a:	4640      	mov	r0, r8
 800da4c:	4649      	mov	r1, r9
 800da4e:	f7f2 fdd3 	bl	80005f8 <__aeabi_dmul>
 800da52:	4652      	mov	r2, sl
 800da54:	465b      	mov	r3, fp
 800da56:	f7f3 f855 	bl	8000b04 <__aeabi_dcmpge>
 800da5a:	9e03      	ldr	r6, [sp, #12]
 800da5c:	4637      	mov	r7, r6
 800da5e:	2800      	cmp	r0, #0
 800da60:	f040 8245 	bne.w	800deee <_dtoa_r+0x93e>
 800da64:	9d01      	ldr	r5, [sp, #4]
 800da66:	2331      	movs	r3, #49	; 0x31
 800da68:	f805 3b01 	strb.w	r3, [r5], #1
 800da6c:	9b00      	ldr	r3, [sp, #0]
 800da6e:	3301      	adds	r3, #1
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	e240      	b.n	800def6 <_dtoa_r+0x946>
 800da74:	07f2      	lsls	r2, r6, #31
 800da76:	d505      	bpl.n	800da84 <_dtoa_r+0x4d4>
 800da78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da7c:	f7f2 fdbc 	bl	80005f8 <__aeabi_dmul>
 800da80:	3501      	adds	r5, #1
 800da82:	2301      	movs	r3, #1
 800da84:	1076      	asrs	r6, r6, #1
 800da86:	3708      	adds	r7, #8
 800da88:	e777      	b.n	800d97a <_dtoa_r+0x3ca>
 800da8a:	2502      	movs	r5, #2
 800da8c:	e779      	b.n	800d982 <_dtoa_r+0x3d2>
 800da8e:	9f00      	ldr	r7, [sp, #0]
 800da90:	9e03      	ldr	r6, [sp, #12]
 800da92:	e794      	b.n	800d9be <_dtoa_r+0x40e>
 800da94:	9901      	ldr	r1, [sp, #4]
 800da96:	4b4c      	ldr	r3, [pc, #304]	; (800dbc8 <_dtoa_r+0x618>)
 800da98:	4431      	add	r1, r6
 800da9a:	910d      	str	r1, [sp, #52]	; 0x34
 800da9c:	9908      	ldr	r1, [sp, #32]
 800da9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800daa6:	2900      	cmp	r1, #0
 800daa8:	d043      	beq.n	800db32 <_dtoa_r+0x582>
 800daaa:	494d      	ldr	r1, [pc, #308]	; (800dbe0 <_dtoa_r+0x630>)
 800daac:	2000      	movs	r0, #0
 800daae:	f7f2 fecd 	bl	800084c <__aeabi_ddiv>
 800dab2:	4652      	mov	r2, sl
 800dab4:	465b      	mov	r3, fp
 800dab6:	f7f2 fbe7 	bl	8000288 <__aeabi_dsub>
 800daba:	9d01      	ldr	r5, [sp, #4]
 800dabc:	4682      	mov	sl, r0
 800dabe:	468b      	mov	fp, r1
 800dac0:	4649      	mov	r1, r9
 800dac2:	4640      	mov	r0, r8
 800dac4:	f7f3 f848 	bl	8000b58 <__aeabi_d2iz>
 800dac8:	4606      	mov	r6, r0
 800daca:	f7f2 fd2b 	bl	8000524 <__aeabi_i2d>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4640      	mov	r0, r8
 800dad4:	4649      	mov	r1, r9
 800dad6:	f7f2 fbd7 	bl	8000288 <__aeabi_dsub>
 800dada:	3630      	adds	r6, #48	; 0x30
 800dadc:	f805 6b01 	strb.w	r6, [r5], #1
 800dae0:	4652      	mov	r2, sl
 800dae2:	465b      	mov	r3, fp
 800dae4:	4680      	mov	r8, r0
 800dae6:	4689      	mov	r9, r1
 800dae8:	f7f2 fff8 	bl	8000adc <__aeabi_dcmplt>
 800daec:	2800      	cmp	r0, #0
 800daee:	d163      	bne.n	800dbb8 <_dtoa_r+0x608>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	4936      	ldr	r1, [pc, #216]	; (800dbd0 <_dtoa_r+0x620>)
 800daf6:	2000      	movs	r0, #0
 800daf8:	f7f2 fbc6 	bl	8000288 <__aeabi_dsub>
 800dafc:	4652      	mov	r2, sl
 800dafe:	465b      	mov	r3, fp
 800db00:	f7f2 ffec 	bl	8000adc <__aeabi_dcmplt>
 800db04:	2800      	cmp	r0, #0
 800db06:	f040 80b5 	bne.w	800dc74 <_dtoa_r+0x6c4>
 800db0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db0c:	429d      	cmp	r5, r3
 800db0e:	d081      	beq.n	800da14 <_dtoa_r+0x464>
 800db10:	4b30      	ldr	r3, [pc, #192]	; (800dbd4 <_dtoa_r+0x624>)
 800db12:	2200      	movs	r2, #0
 800db14:	4650      	mov	r0, sl
 800db16:	4659      	mov	r1, fp
 800db18:	f7f2 fd6e 	bl	80005f8 <__aeabi_dmul>
 800db1c:	4b2d      	ldr	r3, [pc, #180]	; (800dbd4 <_dtoa_r+0x624>)
 800db1e:	4682      	mov	sl, r0
 800db20:	468b      	mov	fp, r1
 800db22:	4640      	mov	r0, r8
 800db24:	4649      	mov	r1, r9
 800db26:	2200      	movs	r2, #0
 800db28:	f7f2 fd66 	bl	80005f8 <__aeabi_dmul>
 800db2c:	4680      	mov	r8, r0
 800db2e:	4689      	mov	r9, r1
 800db30:	e7c6      	b.n	800dac0 <_dtoa_r+0x510>
 800db32:	4650      	mov	r0, sl
 800db34:	4659      	mov	r1, fp
 800db36:	f7f2 fd5f 	bl	80005f8 <__aeabi_dmul>
 800db3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db3c:	9d01      	ldr	r5, [sp, #4]
 800db3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db40:	4682      	mov	sl, r0
 800db42:	468b      	mov	fp, r1
 800db44:	4649      	mov	r1, r9
 800db46:	4640      	mov	r0, r8
 800db48:	f7f3 f806 	bl	8000b58 <__aeabi_d2iz>
 800db4c:	4606      	mov	r6, r0
 800db4e:	f7f2 fce9 	bl	8000524 <__aeabi_i2d>
 800db52:	3630      	adds	r6, #48	; 0x30
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4640      	mov	r0, r8
 800db5a:	4649      	mov	r1, r9
 800db5c:	f7f2 fb94 	bl	8000288 <__aeabi_dsub>
 800db60:	f805 6b01 	strb.w	r6, [r5], #1
 800db64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db66:	429d      	cmp	r5, r3
 800db68:	4680      	mov	r8, r0
 800db6a:	4689      	mov	r9, r1
 800db6c:	f04f 0200 	mov.w	r2, #0
 800db70:	d124      	bne.n	800dbbc <_dtoa_r+0x60c>
 800db72:	4b1b      	ldr	r3, [pc, #108]	; (800dbe0 <_dtoa_r+0x630>)
 800db74:	4650      	mov	r0, sl
 800db76:	4659      	mov	r1, fp
 800db78:	f7f2 fb88 	bl	800028c <__adddf3>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4640      	mov	r0, r8
 800db82:	4649      	mov	r1, r9
 800db84:	f7f2 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d173      	bne.n	800dc74 <_dtoa_r+0x6c4>
 800db8c:	4652      	mov	r2, sl
 800db8e:	465b      	mov	r3, fp
 800db90:	4913      	ldr	r1, [pc, #76]	; (800dbe0 <_dtoa_r+0x630>)
 800db92:	2000      	movs	r0, #0
 800db94:	f7f2 fb78 	bl	8000288 <__aeabi_dsub>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	4640      	mov	r0, r8
 800db9e:	4649      	mov	r1, r9
 800dba0:	f7f2 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	f43f af35 	beq.w	800da14 <_dtoa_r+0x464>
 800dbaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbac:	1e6b      	subs	r3, r5, #1
 800dbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbb4:	2b30      	cmp	r3, #48	; 0x30
 800dbb6:	d0f8      	beq.n	800dbaa <_dtoa_r+0x5fa>
 800dbb8:	9700      	str	r7, [sp, #0]
 800dbba:	e049      	b.n	800dc50 <_dtoa_r+0x6a0>
 800dbbc:	4b05      	ldr	r3, [pc, #20]	; (800dbd4 <_dtoa_r+0x624>)
 800dbbe:	f7f2 fd1b 	bl	80005f8 <__aeabi_dmul>
 800dbc2:	4680      	mov	r8, r0
 800dbc4:	4689      	mov	r9, r1
 800dbc6:	e7bd      	b.n	800db44 <_dtoa_r+0x594>
 800dbc8:	0800f3b0 	.word	0x0800f3b0
 800dbcc:	0800f388 	.word	0x0800f388
 800dbd0:	3ff00000 	.word	0x3ff00000
 800dbd4:	40240000 	.word	0x40240000
 800dbd8:	401c0000 	.word	0x401c0000
 800dbdc:	40140000 	.word	0x40140000
 800dbe0:	3fe00000 	.word	0x3fe00000
 800dbe4:	9d01      	ldr	r5, [sp, #4]
 800dbe6:	4656      	mov	r6, sl
 800dbe8:	465f      	mov	r7, fp
 800dbea:	4642      	mov	r2, r8
 800dbec:	464b      	mov	r3, r9
 800dbee:	4630      	mov	r0, r6
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	f7f2 fe2b 	bl	800084c <__aeabi_ddiv>
 800dbf6:	f7f2 ffaf 	bl	8000b58 <__aeabi_d2iz>
 800dbfa:	4682      	mov	sl, r0
 800dbfc:	f7f2 fc92 	bl	8000524 <__aeabi_i2d>
 800dc00:	4642      	mov	r2, r8
 800dc02:	464b      	mov	r3, r9
 800dc04:	f7f2 fcf8 	bl	80005f8 <__aeabi_dmul>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	4639      	mov	r1, r7
 800dc10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc14:	f7f2 fb38 	bl	8000288 <__aeabi_dsub>
 800dc18:	f805 6b01 	strb.w	r6, [r5], #1
 800dc1c:	9e01      	ldr	r6, [sp, #4]
 800dc1e:	9f03      	ldr	r7, [sp, #12]
 800dc20:	1bae      	subs	r6, r5, r6
 800dc22:	42b7      	cmp	r7, r6
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	d135      	bne.n	800dc96 <_dtoa_r+0x6e6>
 800dc2a:	f7f2 fb2f 	bl	800028c <__adddf3>
 800dc2e:	4642      	mov	r2, r8
 800dc30:	464b      	mov	r3, r9
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	f7f2 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 800dc3a:	b9d0      	cbnz	r0, 800dc72 <_dtoa_r+0x6c2>
 800dc3c:	4642      	mov	r2, r8
 800dc3e:	464b      	mov	r3, r9
 800dc40:	4630      	mov	r0, r6
 800dc42:	4639      	mov	r1, r7
 800dc44:	f7f2 ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc48:	b110      	cbz	r0, 800dc50 <_dtoa_r+0x6a0>
 800dc4a:	f01a 0f01 	tst.w	sl, #1
 800dc4e:	d110      	bne.n	800dc72 <_dtoa_r+0x6c2>
 800dc50:	4620      	mov	r0, r4
 800dc52:	ee18 1a10 	vmov	r1, s16
 800dc56:	f000 fbbd 	bl	800e3d4 <_Bfree>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	9800      	ldr	r0, [sp, #0]
 800dc5e:	702b      	strb	r3, [r5, #0]
 800dc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc62:	3001      	adds	r0, #1
 800dc64:	6018      	str	r0, [r3, #0]
 800dc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f43f acf1 	beq.w	800d650 <_dtoa_r+0xa0>
 800dc6e:	601d      	str	r5, [r3, #0]
 800dc70:	e4ee      	b.n	800d650 <_dtoa_r+0xa0>
 800dc72:	9f00      	ldr	r7, [sp, #0]
 800dc74:	462b      	mov	r3, r5
 800dc76:	461d      	mov	r5, r3
 800dc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc7c:	2a39      	cmp	r2, #57	; 0x39
 800dc7e:	d106      	bne.n	800dc8e <_dtoa_r+0x6de>
 800dc80:	9a01      	ldr	r2, [sp, #4]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d1f7      	bne.n	800dc76 <_dtoa_r+0x6c6>
 800dc86:	9901      	ldr	r1, [sp, #4]
 800dc88:	2230      	movs	r2, #48	; 0x30
 800dc8a:	3701      	adds	r7, #1
 800dc8c:	700a      	strb	r2, [r1, #0]
 800dc8e:	781a      	ldrb	r2, [r3, #0]
 800dc90:	3201      	adds	r2, #1
 800dc92:	701a      	strb	r2, [r3, #0]
 800dc94:	e790      	b.n	800dbb8 <_dtoa_r+0x608>
 800dc96:	4ba6      	ldr	r3, [pc, #664]	; (800df30 <_dtoa_r+0x980>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f7f2 fcad 	bl	80005f8 <__aeabi_dmul>
 800dc9e:	2200      	movs	r2, #0
 800dca0:	2300      	movs	r3, #0
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	f7f2 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d09d      	beq.n	800dbea <_dtoa_r+0x63a>
 800dcae:	e7cf      	b.n	800dc50 <_dtoa_r+0x6a0>
 800dcb0:	9a08      	ldr	r2, [sp, #32]
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	f000 80d7 	beq.w	800de66 <_dtoa_r+0x8b6>
 800dcb8:	9a06      	ldr	r2, [sp, #24]
 800dcba:	2a01      	cmp	r2, #1
 800dcbc:	f300 80ba 	bgt.w	800de34 <_dtoa_r+0x884>
 800dcc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	f000 80b2 	beq.w	800de2c <_dtoa_r+0x87c>
 800dcc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dccc:	9e07      	ldr	r6, [sp, #28]
 800dcce:	9d04      	ldr	r5, [sp, #16]
 800dcd0:	9a04      	ldr	r2, [sp, #16]
 800dcd2:	441a      	add	r2, r3
 800dcd4:	9204      	str	r2, [sp, #16]
 800dcd6:	9a05      	ldr	r2, [sp, #20]
 800dcd8:	2101      	movs	r1, #1
 800dcda:	441a      	add	r2, r3
 800dcdc:	4620      	mov	r0, r4
 800dcde:	9205      	str	r2, [sp, #20]
 800dce0:	f000 fc30 	bl	800e544 <__i2b>
 800dce4:	4607      	mov	r7, r0
 800dce6:	2d00      	cmp	r5, #0
 800dce8:	dd0c      	ble.n	800dd04 <_dtoa_r+0x754>
 800dcea:	9b05      	ldr	r3, [sp, #20]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd09      	ble.n	800dd04 <_dtoa_r+0x754>
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	9a04      	ldr	r2, [sp, #16]
 800dcf4:	bfa8      	it	ge
 800dcf6:	462b      	movge	r3, r5
 800dcf8:	1ad2      	subs	r2, r2, r3
 800dcfa:	9204      	str	r2, [sp, #16]
 800dcfc:	9a05      	ldr	r2, [sp, #20]
 800dcfe:	1aed      	subs	r5, r5, r3
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	9b07      	ldr	r3, [sp, #28]
 800dd06:	b31b      	cbz	r3, 800dd50 <_dtoa_r+0x7a0>
 800dd08:	9b08      	ldr	r3, [sp, #32]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 80af 	beq.w	800de6e <_dtoa_r+0x8be>
 800dd10:	2e00      	cmp	r6, #0
 800dd12:	dd13      	ble.n	800dd3c <_dtoa_r+0x78c>
 800dd14:	4639      	mov	r1, r7
 800dd16:	4632      	mov	r2, r6
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fcd3 	bl	800e6c4 <__pow5mult>
 800dd1e:	ee18 2a10 	vmov	r2, s16
 800dd22:	4601      	mov	r1, r0
 800dd24:	4607      	mov	r7, r0
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fc22 	bl	800e570 <__multiply>
 800dd2c:	ee18 1a10 	vmov	r1, s16
 800dd30:	4680      	mov	r8, r0
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 fb4e 	bl	800e3d4 <_Bfree>
 800dd38:	ee08 8a10 	vmov	s16, r8
 800dd3c:	9b07      	ldr	r3, [sp, #28]
 800dd3e:	1b9a      	subs	r2, r3, r6
 800dd40:	d006      	beq.n	800dd50 <_dtoa_r+0x7a0>
 800dd42:	ee18 1a10 	vmov	r1, s16
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 fcbc 	bl	800e6c4 <__pow5mult>
 800dd4c:	ee08 0a10 	vmov	s16, r0
 800dd50:	2101      	movs	r1, #1
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 fbf6 	bl	800e544 <__i2b>
 800dd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	f340 8088 	ble.w	800de72 <_dtoa_r+0x8c2>
 800dd62:	461a      	mov	r2, r3
 800dd64:	4601      	mov	r1, r0
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fcac 	bl	800e6c4 <__pow5mult>
 800dd6c:	9b06      	ldr	r3, [sp, #24]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	4606      	mov	r6, r0
 800dd72:	f340 8081 	ble.w	800de78 <_dtoa_r+0x8c8>
 800dd76:	f04f 0800 	mov.w	r8, #0
 800dd7a:	6933      	ldr	r3, [r6, #16]
 800dd7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd80:	6918      	ldr	r0, [r3, #16]
 800dd82:	f000 fb8f 	bl	800e4a4 <__hi0bits>
 800dd86:	f1c0 0020 	rsb	r0, r0, #32
 800dd8a:	9b05      	ldr	r3, [sp, #20]
 800dd8c:	4418      	add	r0, r3
 800dd8e:	f010 001f 	ands.w	r0, r0, #31
 800dd92:	f000 8092 	beq.w	800deba <_dtoa_r+0x90a>
 800dd96:	f1c0 0320 	rsb	r3, r0, #32
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	f340 808a 	ble.w	800deb4 <_dtoa_r+0x904>
 800dda0:	f1c0 001c 	rsb	r0, r0, #28
 800dda4:	9b04      	ldr	r3, [sp, #16]
 800dda6:	4403      	add	r3, r0
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	4403      	add	r3, r0
 800ddae:	4405      	add	r5, r0
 800ddb0:	9305      	str	r3, [sp, #20]
 800ddb2:	9b04      	ldr	r3, [sp, #16]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	dd07      	ble.n	800ddc8 <_dtoa_r+0x818>
 800ddb8:	ee18 1a10 	vmov	r1, s16
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f000 fcda 	bl	800e778 <__lshift>
 800ddc4:	ee08 0a10 	vmov	s16, r0
 800ddc8:	9b05      	ldr	r3, [sp, #20]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	dd05      	ble.n	800ddda <_dtoa_r+0x82a>
 800ddce:	4631      	mov	r1, r6
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fcd0 	bl	800e778 <__lshift>
 800ddd8:	4606      	mov	r6, r0
 800ddda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d06e      	beq.n	800debe <_dtoa_r+0x90e>
 800dde0:	ee18 0a10 	vmov	r0, s16
 800dde4:	4631      	mov	r1, r6
 800dde6:	f000 fd37 	bl	800e858 <__mcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	da67      	bge.n	800debe <_dtoa_r+0x90e>
 800ddee:	9b00      	ldr	r3, [sp, #0]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	ee18 1a10 	vmov	r1, s16
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f000 fb0b 	bl	800e418 <__multadd>
 800de02:	9b08      	ldr	r3, [sp, #32]
 800de04:	ee08 0a10 	vmov	s16, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 81b1 	beq.w	800e170 <_dtoa_r+0xbc0>
 800de0e:	2300      	movs	r3, #0
 800de10:	4639      	mov	r1, r7
 800de12:	220a      	movs	r2, #10
 800de14:	4620      	mov	r0, r4
 800de16:	f000 faff 	bl	800e418 <__multadd>
 800de1a:	9b02      	ldr	r3, [sp, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	4607      	mov	r7, r0
 800de20:	f300 808e 	bgt.w	800df40 <_dtoa_r+0x990>
 800de24:	9b06      	ldr	r3, [sp, #24]
 800de26:	2b02      	cmp	r3, #2
 800de28:	dc51      	bgt.n	800dece <_dtoa_r+0x91e>
 800de2a:	e089      	b.n	800df40 <_dtoa_r+0x990>
 800de2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de32:	e74b      	b.n	800dccc <_dtoa_r+0x71c>
 800de34:	9b03      	ldr	r3, [sp, #12]
 800de36:	1e5e      	subs	r6, r3, #1
 800de38:	9b07      	ldr	r3, [sp, #28]
 800de3a:	42b3      	cmp	r3, r6
 800de3c:	bfbf      	itttt	lt
 800de3e:	9b07      	ldrlt	r3, [sp, #28]
 800de40:	9607      	strlt	r6, [sp, #28]
 800de42:	1af2      	sublt	r2, r6, r3
 800de44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de46:	bfb6      	itet	lt
 800de48:	189b      	addlt	r3, r3, r2
 800de4a:	1b9e      	subge	r6, r3, r6
 800de4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de4e:	9b03      	ldr	r3, [sp, #12]
 800de50:	bfb8      	it	lt
 800de52:	2600      	movlt	r6, #0
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfb7      	itett	lt
 800de58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800de5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800de60:	1a9d      	sublt	r5, r3, r2
 800de62:	2300      	movlt	r3, #0
 800de64:	e734      	b.n	800dcd0 <_dtoa_r+0x720>
 800de66:	9e07      	ldr	r6, [sp, #28]
 800de68:	9d04      	ldr	r5, [sp, #16]
 800de6a:	9f08      	ldr	r7, [sp, #32]
 800de6c:	e73b      	b.n	800dce6 <_dtoa_r+0x736>
 800de6e:	9a07      	ldr	r2, [sp, #28]
 800de70:	e767      	b.n	800dd42 <_dtoa_r+0x792>
 800de72:	9b06      	ldr	r3, [sp, #24]
 800de74:	2b01      	cmp	r3, #1
 800de76:	dc18      	bgt.n	800deaa <_dtoa_r+0x8fa>
 800de78:	f1ba 0f00 	cmp.w	sl, #0
 800de7c:	d115      	bne.n	800deaa <_dtoa_r+0x8fa>
 800de7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de82:	b993      	cbnz	r3, 800deaa <_dtoa_r+0x8fa>
 800de84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de88:	0d1b      	lsrs	r3, r3, #20
 800de8a:	051b      	lsls	r3, r3, #20
 800de8c:	b183      	cbz	r3, 800deb0 <_dtoa_r+0x900>
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	3301      	adds	r3, #1
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	9b05      	ldr	r3, [sp, #20]
 800de96:	3301      	adds	r3, #1
 800de98:	9305      	str	r3, [sp, #20]
 800de9a:	f04f 0801 	mov.w	r8, #1
 800de9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f47f af6a 	bne.w	800dd7a <_dtoa_r+0x7ca>
 800dea6:	2001      	movs	r0, #1
 800dea8:	e76f      	b.n	800dd8a <_dtoa_r+0x7da>
 800deaa:	f04f 0800 	mov.w	r8, #0
 800deae:	e7f6      	b.n	800de9e <_dtoa_r+0x8ee>
 800deb0:	4698      	mov	r8, r3
 800deb2:	e7f4      	b.n	800de9e <_dtoa_r+0x8ee>
 800deb4:	f43f af7d 	beq.w	800ddb2 <_dtoa_r+0x802>
 800deb8:	4618      	mov	r0, r3
 800deba:	301c      	adds	r0, #28
 800debc:	e772      	b.n	800dda4 <_dtoa_r+0x7f4>
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	dc37      	bgt.n	800df34 <_dtoa_r+0x984>
 800dec4:	9b06      	ldr	r3, [sp, #24]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	dd34      	ble.n	800df34 <_dtoa_r+0x984>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	9302      	str	r3, [sp, #8]
 800dece:	9b02      	ldr	r3, [sp, #8]
 800ded0:	b96b      	cbnz	r3, 800deee <_dtoa_r+0x93e>
 800ded2:	4631      	mov	r1, r6
 800ded4:	2205      	movs	r2, #5
 800ded6:	4620      	mov	r0, r4
 800ded8:	f000 fa9e 	bl	800e418 <__multadd>
 800dedc:	4601      	mov	r1, r0
 800dede:	4606      	mov	r6, r0
 800dee0:	ee18 0a10 	vmov	r0, s16
 800dee4:	f000 fcb8 	bl	800e858 <__mcmp>
 800dee8:	2800      	cmp	r0, #0
 800deea:	f73f adbb 	bgt.w	800da64 <_dtoa_r+0x4b4>
 800deee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def0:	9d01      	ldr	r5, [sp, #4]
 800def2:	43db      	mvns	r3, r3
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	f04f 0800 	mov.w	r8, #0
 800defa:	4631      	mov	r1, r6
 800defc:	4620      	mov	r0, r4
 800defe:	f000 fa69 	bl	800e3d4 <_Bfree>
 800df02:	2f00      	cmp	r7, #0
 800df04:	f43f aea4 	beq.w	800dc50 <_dtoa_r+0x6a0>
 800df08:	f1b8 0f00 	cmp.w	r8, #0
 800df0c:	d005      	beq.n	800df1a <_dtoa_r+0x96a>
 800df0e:	45b8      	cmp	r8, r7
 800df10:	d003      	beq.n	800df1a <_dtoa_r+0x96a>
 800df12:	4641      	mov	r1, r8
 800df14:	4620      	mov	r0, r4
 800df16:	f000 fa5d 	bl	800e3d4 <_Bfree>
 800df1a:	4639      	mov	r1, r7
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 fa59 	bl	800e3d4 <_Bfree>
 800df22:	e695      	b.n	800dc50 <_dtoa_r+0x6a0>
 800df24:	2600      	movs	r6, #0
 800df26:	4637      	mov	r7, r6
 800df28:	e7e1      	b.n	800deee <_dtoa_r+0x93e>
 800df2a:	9700      	str	r7, [sp, #0]
 800df2c:	4637      	mov	r7, r6
 800df2e:	e599      	b.n	800da64 <_dtoa_r+0x4b4>
 800df30:	40240000 	.word	0x40240000
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 80ca 	beq.w	800e0d0 <_dtoa_r+0xb20>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	9302      	str	r3, [sp, #8]
 800df40:	2d00      	cmp	r5, #0
 800df42:	dd05      	ble.n	800df50 <_dtoa_r+0x9a0>
 800df44:	4639      	mov	r1, r7
 800df46:	462a      	mov	r2, r5
 800df48:	4620      	mov	r0, r4
 800df4a:	f000 fc15 	bl	800e778 <__lshift>
 800df4e:	4607      	mov	r7, r0
 800df50:	f1b8 0f00 	cmp.w	r8, #0
 800df54:	d05b      	beq.n	800e00e <_dtoa_r+0xa5e>
 800df56:	6879      	ldr	r1, [r7, #4]
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 f9fb 	bl	800e354 <_Balloc>
 800df5e:	4605      	mov	r5, r0
 800df60:	b928      	cbnz	r0, 800df6e <_dtoa_r+0x9be>
 800df62:	4b87      	ldr	r3, [pc, #540]	; (800e180 <_dtoa_r+0xbd0>)
 800df64:	4602      	mov	r2, r0
 800df66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df6a:	f7ff bb3b 	b.w	800d5e4 <_dtoa_r+0x34>
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	3202      	adds	r2, #2
 800df72:	0092      	lsls	r2, r2, #2
 800df74:	f107 010c 	add.w	r1, r7, #12
 800df78:	300c      	adds	r0, #12
 800df7a:	f7fe fba7 	bl	800c6cc <memcpy>
 800df7e:	2201      	movs	r2, #1
 800df80:	4629      	mov	r1, r5
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fbf8 	bl	800e778 <__lshift>
 800df88:	9b01      	ldr	r3, [sp, #4]
 800df8a:	f103 0901 	add.w	r9, r3, #1
 800df8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800df92:	4413      	add	r3, r2
 800df94:	9305      	str	r3, [sp, #20]
 800df96:	f00a 0301 	and.w	r3, sl, #1
 800df9a:	46b8      	mov	r8, r7
 800df9c:	9304      	str	r3, [sp, #16]
 800df9e:	4607      	mov	r7, r0
 800dfa0:	4631      	mov	r1, r6
 800dfa2:	ee18 0a10 	vmov	r0, s16
 800dfa6:	f7ff fa77 	bl	800d498 <quorem>
 800dfaa:	4641      	mov	r1, r8
 800dfac:	9002      	str	r0, [sp, #8]
 800dfae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfb2:	ee18 0a10 	vmov	r0, s16
 800dfb6:	f000 fc4f 	bl	800e858 <__mcmp>
 800dfba:	463a      	mov	r2, r7
 800dfbc:	9003      	str	r0, [sp, #12]
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 fc65 	bl	800e890 <__mdiff>
 800dfc6:	68c2      	ldr	r2, [r0, #12]
 800dfc8:	f109 3bff 	add.w	fp, r9, #4294967295
 800dfcc:	4605      	mov	r5, r0
 800dfce:	bb02      	cbnz	r2, 800e012 <_dtoa_r+0xa62>
 800dfd0:	4601      	mov	r1, r0
 800dfd2:	ee18 0a10 	vmov	r0, s16
 800dfd6:	f000 fc3f 	bl	800e858 <__mcmp>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	9207      	str	r2, [sp, #28]
 800dfe2:	f000 f9f7 	bl	800e3d4 <_Bfree>
 800dfe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dfea:	ea43 0102 	orr.w	r1, r3, r2
 800dfee:	9b04      	ldr	r3, [sp, #16]
 800dff0:	430b      	orrs	r3, r1
 800dff2:	464d      	mov	r5, r9
 800dff4:	d10f      	bne.n	800e016 <_dtoa_r+0xa66>
 800dff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dffa:	d02a      	beq.n	800e052 <_dtoa_r+0xaa2>
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dd02      	ble.n	800e008 <_dtoa_r+0xa58>
 800e002:	9b02      	ldr	r3, [sp, #8]
 800e004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e008:	f88b a000 	strb.w	sl, [fp]
 800e00c:	e775      	b.n	800defa <_dtoa_r+0x94a>
 800e00e:	4638      	mov	r0, r7
 800e010:	e7ba      	b.n	800df88 <_dtoa_r+0x9d8>
 800e012:	2201      	movs	r2, #1
 800e014:	e7e2      	b.n	800dfdc <_dtoa_r+0xa2c>
 800e016:	9b03      	ldr	r3, [sp, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	db04      	blt.n	800e026 <_dtoa_r+0xa76>
 800e01c:	9906      	ldr	r1, [sp, #24]
 800e01e:	430b      	orrs	r3, r1
 800e020:	9904      	ldr	r1, [sp, #16]
 800e022:	430b      	orrs	r3, r1
 800e024:	d122      	bne.n	800e06c <_dtoa_r+0xabc>
 800e026:	2a00      	cmp	r2, #0
 800e028:	ddee      	ble.n	800e008 <_dtoa_r+0xa58>
 800e02a:	ee18 1a10 	vmov	r1, s16
 800e02e:	2201      	movs	r2, #1
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fba1 	bl	800e778 <__lshift>
 800e036:	4631      	mov	r1, r6
 800e038:	ee08 0a10 	vmov	s16, r0
 800e03c:	f000 fc0c 	bl	800e858 <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	dc03      	bgt.n	800e04c <_dtoa_r+0xa9c>
 800e044:	d1e0      	bne.n	800e008 <_dtoa_r+0xa58>
 800e046:	f01a 0f01 	tst.w	sl, #1
 800e04a:	d0dd      	beq.n	800e008 <_dtoa_r+0xa58>
 800e04c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e050:	d1d7      	bne.n	800e002 <_dtoa_r+0xa52>
 800e052:	2339      	movs	r3, #57	; 0x39
 800e054:	f88b 3000 	strb.w	r3, [fp]
 800e058:	462b      	mov	r3, r5
 800e05a:	461d      	mov	r5, r3
 800e05c:	3b01      	subs	r3, #1
 800e05e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e062:	2a39      	cmp	r2, #57	; 0x39
 800e064:	d071      	beq.n	800e14a <_dtoa_r+0xb9a>
 800e066:	3201      	adds	r2, #1
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	e746      	b.n	800defa <_dtoa_r+0x94a>
 800e06c:	2a00      	cmp	r2, #0
 800e06e:	dd07      	ble.n	800e080 <_dtoa_r+0xad0>
 800e070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e074:	d0ed      	beq.n	800e052 <_dtoa_r+0xaa2>
 800e076:	f10a 0301 	add.w	r3, sl, #1
 800e07a:	f88b 3000 	strb.w	r3, [fp]
 800e07e:	e73c      	b.n	800defa <_dtoa_r+0x94a>
 800e080:	9b05      	ldr	r3, [sp, #20]
 800e082:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e086:	4599      	cmp	r9, r3
 800e088:	d047      	beq.n	800e11a <_dtoa_r+0xb6a>
 800e08a:	ee18 1a10 	vmov	r1, s16
 800e08e:	2300      	movs	r3, #0
 800e090:	220a      	movs	r2, #10
 800e092:	4620      	mov	r0, r4
 800e094:	f000 f9c0 	bl	800e418 <__multadd>
 800e098:	45b8      	cmp	r8, r7
 800e09a:	ee08 0a10 	vmov	s16, r0
 800e09e:	f04f 0300 	mov.w	r3, #0
 800e0a2:	f04f 020a 	mov.w	r2, #10
 800e0a6:	4641      	mov	r1, r8
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	d106      	bne.n	800e0ba <_dtoa_r+0xb0a>
 800e0ac:	f000 f9b4 	bl	800e418 <__multadd>
 800e0b0:	4680      	mov	r8, r0
 800e0b2:	4607      	mov	r7, r0
 800e0b4:	f109 0901 	add.w	r9, r9, #1
 800e0b8:	e772      	b.n	800dfa0 <_dtoa_r+0x9f0>
 800e0ba:	f000 f9ad 	bl	800e418 <__multadd>
 800e0be:	4639      	mov	r1, r7
 800e0c0:	4680      	mov	r8, r0
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	220a      	movs	r2, #10
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f000 f9a6 	bl	800e418 <__multadd>
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	e7f1      	b.n	800e0b4 <_dtoa_r+0xb04>
 800e0d0:	9b03      	ldr	r3, [sp, #12]
 800e0d2:	9302      	str	r3, [sp, #8]
 800e0d4:	9d01      	ldr	r5, [sp, #4]
 800e0d6:	ee18 0a10 	vmov	r0, s16
 800e0da:	4631      	mov	r1, r6
 800e0dc:	f7ff f9dc 	bl	800d498 <quorem>
 800e0e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e0e4:	9b01      	ldr	r3, [sp, #4]
 800e0e6:	f805 ab01 	strb.w	sl, [r5], #1
 800e0ea:	1aea      	subs	r2, r5, r3
 800e0ec:	9b02      	ldr	r3, [sp, #8]
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	dd09      	ble.n	800e106 <_dtoa_r+0xb56>
 800e0f2:	ee18 1a10 	vmov	r1, s16
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	220a      	movs	r2, #10
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f000 f98c 	bl	800e418 <__multadd>
 800e100:	ee08 0a10 	vmov	s16, r0
 800e104:	e7e7      	b.n	800e0d6 <_dtoa_r+0xb26>
 800e106:	9b02      	ldr	r3, [sp, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfc8      	it	gt
 800e10c:	461d      	movgt	r5, r3
 800e10e:	9b01      	ldr	r3, [sp, #4]
 800e110:	bfd8      	it	le
 800e112:	2501      	movle	r5, #1
 800e114:	441d      	add	r5, r3
 800e116:	f04f 0800 	mov.w	r8, #0
 800e11a:	ee18 1a10 	vmov	r1, s16
 800e11e:	2201      	movs	r2, #1
 800e120:	4620      	mov	r0, r4
 800e122:	f000 fb29 	bl	800e778 <__lshift>
 800e126:	4631      	mov	r1, r6
 800e128:	ee08 0a10 	vmov	s16, r0
 800e12c:	f000 fb94 	bl	800e858 <__mcmp>
 800e130:	2800      	cmp	r0, #0
 800e132:	dc91      	bgt.n	800e058 <_dtoa_r+0xaa8>
 800e134:	d102      	bne.n	800e13c <_dtoa_r+0xb8c>
 800e136:	f01a 0f01 	tst.w	sl, #1
 800e13a:	d18d      	bne.n	800e058 <_dtoa_r+0xaa8>
 800e13c:	462b      	mov	r3, r5
 800e13e:	461d      	mov	r5, r3
 800e140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e144:	2a30      	cmp	r2, #48	; 0x30
 800e146:	d0fa      	beq.n	800e13e <_dtoa_r+0xb8e>
 800e148:	e6d7      	b.n	800defa <_dtoa_r+0x94a>
 800e14a:	9a01      	ldr	r2, [sp, #4]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d184      	bne.n	800e05a <_dtoa_r+0xaaa>
 800e150:	9b00      	ldr	r3, [sp, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	2331      	movs	r3, #49	; 0x31
 800e158:	7013      	strb	r3, [r2, #0]
 800e15a:	e6ce      	b.n	800defa <_dtoa_r+0x94a>
 800e15c:	4b09      	ldr	r3, [pc, #36]	; (800e184 <_dtoa_r+0xbd4>)
 800e15e:	f7ff ba95 	b.w	800d68c <_dtoa_r+0xdc>
 800e162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e164:	2b00      	cmp	r3, #0
 800e166:	f47f aa6e 	bne.w	800d646 <_dtoa_r+0x96>
 800e16a:	4b07      	ldr	r3, [pc, #28]	; (800e188 <_dtoa_r+0xbd8>)
 800e16c:	f7ff ba8e 	b.w	800d68c <_dtoa_r+0xdc>
 800e170:	9b02      	ldr	r3, [sp, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	dcae      	bgt.n	800e0d4 <_dtoa_r+0xb24>
 800e176:	9b06      	ldr	r3, [sp, #24]
 800e178:	2b02      	cmp	r3, #2
 800e17a:	f73f aea8 	bgt.w	800dece <_dtoa_r+0x91e>
 800e17e:	e7a9      	b.n	800e0d4 <_dtoa_r+0xb24>
 800e180:	0800f317 	.word	0x0800f317
 800e184:	0800f274 	.word	0x0800f274
 800e188:	0800f298 	.word	0x0800f298

0800e18c <__sflush_r>:
 800e18c:	898a      	ldrh	r2, [r1, #12]
 800e18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e192:	4605      	mov	r5, r0
 800e194:	0710      	lsls	r0, r2, #28
 800e196:	460c      	mov	r4, r1
 800e198:	d458      	bmi.n	800e24c <__sflush_r+0xc0>
 800e19a:	684b      	ldr	r3, [r1, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	dc05      	bgt.n	800e1ac <__sflush_r+0x20>
 800e1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	dc02      	bgt.n	800e1ac <__sflush_r+0x20>
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1ae:	2e00      	cmp	r6, #0
 800e1b0:	d0f9      	beq.n	800e1a6 <__sflush_r+0x1a>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1b8:	682f      	ldr	r7, [r5, #0]
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	d032      	beq.n	800e224 <__sflush_r+0x98>
 800e1be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	075a      	lsls	r2, r3, #29
 800e1c4:	d505      	bpl.n	800e1d2 <__sflush_r+0x46>
 800e1c6:	6863      	ldr	r3, [r4, #4]
 800e1c8:	1ac0      	subs	r0, r0, r3
 800e1ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1cc:	b10b      	cbz	r3, 800e1d2 <__sflush_r+0x46>
 800e1ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1d0:	1ac0      	subs	r0, r0, r3
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1d8:	6a21      	ldr	r1, [r4, #32]
 800e1da:	4628      	mov	r0, r5
 800e1dc:	47b0      	blx	r6
 800e1de:	1c43      	adds	r3, r0, #1
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	d106      	bne.n	800e1f2 <__sflush_r+0x66>
 800e1e4:	6829      	ldr	r1, [r5, #0]
 800e1e6:	291d      	cmp	r1, #29
 800e1e8:	d82c      	bhi.n	800e244 <__sflush_r+0xb8>
 800e1ea:	4a2a      	ldr	r2, [pc, #168]	; (800e294 <__sflush_r+0x108>)
 800e1ec:	40ca      	lsrs	r2, r1
 800e1ee:	07d6      	lsls	r6, r2, #31
 800e1f0:	d528      	bpl.n	800e244 <__sflush_r+0xb8>
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	6062      	str	r2, [r4, #4]
 800e1f6:	04d9      	lsls	r1, r3, #19
 800e1f8:	6922      	ldr	r2, [r4, #16]
 800e1fa:	6022      	str	r2, [r4, #0]
 800e1fc:	d504      	bpl.n	800e208 <__sflush_r+0x7c>
 800e1fe:	1c42      	adds	r2, r0, #1
 800e200:	d101      	bne.n	800e206 <__sflush_r+0x7a>
 800e202:	682b      	ldr	r3, [r5, #0]
 800e204:	b903      	cbnz	r3, 800e208 <__sflush_r+0x7c>
 800e206:	6560      	str	r0, [r4, #84]	; 0x54
 800e208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e20a:	602f      	str	r7, [r5, #0]
 800e20c:	2900      	cmp	r1, #0
 800e20e:	d0ca      	beq.n	800e1a6 <__sflush_r+0x1a>
 800e210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e214:	4299      	cmp	r1, r3
 800e216:	d002      	beq.n	800e21e <__sflush_r+0x92>
 800e218:	4628      	mov	r0, r5
 800e21a:	f7fe fa6d 	bl	800c6f8 <_free_r>
 800e21e:	2000      	movs	r0, #0
 800e220:	6360      	str	r0, [r4, #52]	; 0x34
 800e222:	e7c1      	b.n	800e1a8 <__sflush_r+0x1c>
 800e224:	6a21      	ldr	r1, [r4, #32]
 800e226:	2301      	movs	r3, #1
 800e228:	4628      	mov	r0, r5
 800e22a:	47b0      	blx	r6
 800e22c:	1c41      	adds	r1, r0, #1
 800e22e:	d1c7      	bne.n	800e1c0 <__sflush_r+0x34>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d0c4      	beq.n	800e1c0 <__sflush_r+0x34>
 800e236:	2b1d      	cmp	r3, #29
 800e238:	d001      	beq.n	800e23e <__sflush_r+0xb2>
 800e23a:	2b16      	cmp	r3, #22
 800e23c:	d101      	bne.n	800e242 <__sflush_r+0xb6>
 800e23e:	602f      	str	r7, [r5, #0]
 800e240:	e7b1      	b.n	800e1a6 <__sflush_r+0x1a>
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e248:	81a3      	strh	r3, [r4, #12]
 800e24a:	e7ad      	b.n	800e1a8 <__sflush_r+0x1c>
 800e24c:	690f      	ldr	r7, [r1, #16]
 800e24e:	2f00      	cmp	r7, #0
 800e250:	d0a9      	beq.n	800e1a6 <__sflush_r+0x1a>
 800e252:	0793      	lsls	r3, r2, #30
 800e254:	680e      	ldr	r6, [r1, #0]
 800e256:	bf08      	it	eq
 800e258:	694b      	ldreq	r3, [r1, #20]
 800e25a:	600f      	str	r7, [r1, #0]
 800e25c:	bf18      	it	ne
 800e25e:	2300      	movne	r3, #0
 800e260:	eba6 0807 	sub.w	r8, r6, r7
 800e264:	608b      	str	r3, [r1, #8]
 800e266:	f1b8 0f00 	cmp.w	r8, #0
 800e26a:	dd9c      	ble.n	800e1a6 <__sflush_r+0x1a>
 800e26c:	6a21      	ldr	r1, [r4, #32]
 800e26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e270:	4643      	mov	r3, r8
 800e272:	463a      	mov	r2, r7
 800e274:	4628      	mov	r0, r5
 800e276:	47b0      	blx	r6
 800e278:	2800      	cmp	r0, #0
 800e27a:	dc06      	bgt.n	800e28a <__sflush_r+0xfe>
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	f04f 30ff 	mov.w	r0, #4294967295
 800e288:	e78e      	b.n	800e1a8 <__sflush_r+0x1c>
 800e28a:	4407      	add	r7, r0
 800e28c:	eba8 0800 	sub.w	r8, r8, r0
 800e290:	e7e9      	b.n	800e266 <__sflush_r+0xda>
 800e292:	bf00      	nop
 800e294:	20400001 	.word	0x20400001

0800e298 <_fflush_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	690b      	ldr	r3, [r1, #16]
 800e29c:	4605      	mov	r5, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	b913      	cbnz	r3, 800e2a8 <_fflush_r+0x10>
 800e2a2:	2500      	movs	r5, #0
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	b118      	cbz	r0, 800e2b2 <_fflush_r+0x1a>
 800e2aa:	6983      	ldr	r3, [r0, #24]
 800e2ac:	b90b      	cbnz	r3, 800e2b2 <_fflush_r+0x1a>
 800e2ae:	f7fe f937 	bl	800c520 <__sinit>
 800e2b2:	4b14      	ldr	r3, [pc, #80]	; (800e304 <_fflush_r+0x6c>)
 800e2b4:	429c      	cmp	r4, r3
 800e2b6:	d11b      	bne.n	800e2f0 <_fflush_r+0x58>
 800e2b8:	686c      	ldr	r4, [r5, #4]
 800e2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d0ef      	beq.n	800e2a2 <_fflush_r+0xa>
 800e2c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2c4:	07d0      	lsls	r0, r2, #31
 800e2c6:	d404      	bmi.n	800e2d2 <_fflush_r+0x3a>
 800e2c8:	0599      	lsls	r1, r3, #22
 800e2ca:	d402      	bmi.n	800e2d2 <_fflush_r+0x3a>
 800e2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ce:	f7fe f9ea 	bl	800c6a6 <__retarget_lock_acquire_recursive>
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	f7ff ff59 	bl	800e18c <__sflush_r>
 800e2da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2dc:	07da      	lsls	r2, r3, #31
 800e2de:	4605      	mov	r5, r0
 800e2e0:	d4e0      	bmi.n	800e2a4 <_fflush_r+0xc>
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	059b      	lsls	r3, r3, #22
 800e2e6:	d4dd      	bmi.n	800e2a4 <_fflush_r+0xc>
 800e2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ea:	f7fe f9de 	bl	800c6aa <__retarget_lock_release_recursive>
 800e2ee:	e7d9      	b.n	800e2a4 <_fflush_r+0xc>
 800e2f0:	4b05      	ldr	r3, [pc, #20]	; (800e308 <_fflush_r+0x70>)
 800e2f2:	429c      	cmp	r4, r3
 800e2f4:	d101      	bne.n	800e2fa <_fflush_r+0x62>
 800e2f6:	68ac      	ldr	r4, [r5, #8]
 800e2f8:	e7df      	b.n	800e2ba <_fflush_r+0x22>
 800e2fa:	4b04      	ldr	r3, [pc, #16]	; (800e30c <_fflush_r+0x74>)
 800e2fc:	429c      	cmp	r4, r3
 800e2fe:	bf08      	it	eq
 800e300:	68ec      	ldreq	r4, [r5, #12]
 800e302:	e7da      	b.n	800e2ba <_fflush_r+0x22>
 800e304:	0800f220 	.word	0x0800f220
 800e308:	0800f240 	.word	0x0800f240
 800e30c:	0800f200 	.word	0x0800f200

0800e310 <_localeconv_r>:
 800e310:	4800      	ldr	r0, [pc, #0]	; (800e314 <_localeconv_r+0x4>)
 800e312:	4770      	bx	lr
 800e314:	20000168 	.word	0x20000168

0800e318 <_lseek_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d07      	ldr	r5, [pc, #28]	; (800e338 <_lseek_r+0x20>)
 800e31c:	4604      	mov	r4, r0
 800e31e:	4608      	mov	r0, r1
 800e320:	4611      	mov	r1, r2
 800e322:	2200      	movs	r2, #0
 800e324:	602a      	str	r2, [r5, #0]
 800e326:	461a      	mov	r2, r3
 800e328:	f7f4 fb20 	bl	800296c <_lseek>
 800e32c:	1c43      	adds	r3, r0, #1
 800e32e:	d102      	bne.n	800e336 <_lseek_r+0x1e>
 800e330:	682b      	ldr	r3, [r5, #0]
 800e332:	b103      	cbz	r3, 800e336 <_lseek_r+0x1e>
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	bd38      	pop	{r3, r4, r5, pc}
 800e338:	200068a4 	.word	0x200068a4

0800e33c <__malloc_lock>:
 800e33c:	4801      	ldr	r0, [pc, #4]	; (800e344 <__malloc_lock+0x8>)
 800e33e:	f7fe b9b2 	b.w	800c6a6 <__retarget_lock_acquire_recursive>
 800e342:	bf00      	nop
 800e344:	20006899 	.word	0x20006899

0800e348 <__malloc_unlock>:
 800e348:	4801      	ldr	r0, [pc, #4]	; (800e350 <__malloc_unlock+0x8>)
 800e34a:	f7fe b9ae 	b.w	800c6aa <__retarget_lock_release_recursive>
 800e34e:	bf00      	nop
 800e350:	20006899 	.word	0x20006899

0800e354 <_Balloc>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e358:	4604      	mov	r4, r0
 800e35a:	460d      	mov	r5, r1
 800e35c:	b976      	cbnz	r6, 800e37c <_Balloc+0x28>
 800e35e:	2010      	movs	r0, #16
 800e360:	f7fe f9a4 	bl	800c6ac <malloc>
 800e364:	4602      	mov	r2, r0
 800e366:	6260      	str	r0, [r4, #36]	; 0x24
 800e368:	b920      	cbnz	r0, 800e374 <_Balloc+0x20>
 800e36a:	4b18      	ldr	r3, [pc, #96]	; (800e3cc <_Balloc+0x78>)
 800e36c:	4818      	ldr	r0, [pc, #96]	; (800e3d0 <_Balloc+0x7c>)
 800e36e:	2166      	movs	r1, #102	; 0x66
 800e370:	f000 fb9c 	bl	800eaac <__assert_func>
 800e374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e378:	6006      	str	r6, [r0, #0]
 800e37a:	60c6      	str	r6, [r0, #12]
 800e37c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e37e:	68f3      	ldr	r3, [r6, #12]
 800e380:	b183      	cbz	r3, 800e3a4 <_Balloc+0x50>
 800e382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e38a:	b9b8      	cbnz	r0, 800e3bc <_Balloc+0x68>
 800e38c:	2101      	movs	r1, #1
 800e38e:	fa01 f605 	lsl.w	r6, r1, r5
 800e392:	1d72      	adds	r2, r6, #5
 800e394:	0092      	lsls	r2, r2, #2
 800e396:	4620      	mov	r0, r4
 800e398:	f000 fb60 	bl	800ea5c <_calloc_r>
 800e39c:	b160      	cbz	r0, 800e3b8 <_Balloc+0x64>
 800e39e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3a2:	e00e      	b.n	800e3c2 <_Balloc+0x6e>
 800e3a4:	2221      	movs	r2, #33	; 0x21
 800e3a6:	2104      	movs	r1, #4
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 fb57 	bl	800ea5c <_calloc_r>
 800e3ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b0:	60f0      	str	r0, [r6, #12]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e4      	bne.n	800e382 <_Balloc+0x2e>
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	bd70      	pop	{r4, r5, r6, pc}
 800e3bc:	6802      	ldr	r2, [r0, #0]
 800e3be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3c8:	e7f7      	b.n	800e3ba <_Balloc+0x66>
 800e3ca:	bf00      	nop
 800e3cc:	0800f2a5 	.word	0x0800f2a5
 800e3d0:	0800f328 	.word	0x0800f328

0800e3d4 <_Bfree>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3d8:	4605      	mov	r5, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	b976      	cbnz	r6, 800e3fc <_Bfree+0x28>
 800e3de:	2010      	movs	r0, #16
 800e3e0:	f7fe f964 	bl	800c6ac <malloc>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	6268      	str	r0, [r5, #36]	; 0x24
 800e3e8:	b920      	cbnz	r0, 800e3f4 <_Bfree+0x20>
 800e3ea:	4b09      	ldr	r3, [pc, #36]	; (800e410 <_Bfree+0x3c>)
 800e3ec:	4809      	ldr	r0, [pc, #36]	; (800e414 <_Bfree+0x40>)
 800e3ee:	218a      	movs	r1, #138	; 0x8a
 800e3f0:	f000 fb5c 	bl	800eaac <__assert_func>
 800e3f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3f8:	6006      	str	r6, [r0, #0]
 800e3fa:	60c6      	str	r6, [r0, #12]
 800e3fc:	b13c      	cbz	r4, 800e40e <_Bfree+0x3a>
 800e3fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e400:	6862      	ldr	r2, [r4, #4]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e408:	6021      	str	r1, [r4, #0]
 800e40a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e40e:	bd70      	pop	{r4, r5, r6, pc}
 800e410:	0800f2a5 	.word	0x0800f2a5
 800e414:	0800f328 	.word	0x0800f328

0800e418 <__multadd>:
 800e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e41c:	690d      	ldr	r5, [r1, #16]
 800e41e:	4607      	mov	r7, r0
 800e420:	460c      	mov	r4, r1
 800e422:	461e      	mov	r6, r3
 800e424:	f101 0c14 	add.w	ip, r1, #20
 800e428:	2000      	movs	r0, #0
 800e42a:	f8dc 3000 	ldr.w	r3, [ip]
 800e42e:	b299      	uxth	r1, r3
 800e430:	fb02 6101 	mla	r1, r2, r1, r6
 800e434:	0c1e      	lsrs	r6, r3, #16
 800e436:	0c0b      	lsrs	r3, r1, #16
 800e438:	fb02 3306 	mla	r3, r2, r6, r3
 800e43c:	b289      	uxth	r1, r1
 800e43e:	3001      	adds	r0, #1
 800e440:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e444:	4285      	cmp	r5, r0
 800e446:	f84c 1b04 	str.w	r1, [ip], #4
 800e44a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e44e:	dcec      	bgt.n	800e42a <__multadd+0x12>
 800e450:	b30e      	cbz	r6, 800e496 <__multadd+0x7e>
 800e452:	68a3      	ldr	r3, [r4, #8]
 800e454:	42ab      	cmp	r3, r5
 800e456:	dc19      	bgt.n	800e48c <__multadd+0x74>
 800e458:	6861      	ldr	r1, [r4, #4]
 800e45a:	4638      	mov	r0, r7
 800e45c:	3101      	adds	r1, #1
 800e45e:	f7ff ff79 	bl	800e354 <_Balloc>
 800e462:	4680      	mov	r8, r0
 800e464:	b928      	cbnz	r0, 800e472 <__multadd+0x5a>
 800e466:	4602      	mov	r2, r0
 800e468:	4b0c      	ldr	r3, [pc, #48]	; (800e49c <__multadd+0x84>)
 800e46a:	480d      	ldr	r0, [pc, #52]	; (800e4a0 <__multadd+0x88>)
 800e46c:	21b5      	movs	r1, #181	; 0xb5
 800e46e:	f000 fb1d 	bl	800eaac <__assert_func>
 800e472:	6922      	ldr	r2, [r4, #16]
 800e474:	3202      	adds	r2, #2
 800e476:	f104 010c 	add.w	r1, r4, #12
 800e47a:	0092      	lsls	r2, r2, #2
 800e47c:	300c      	adds	r0, #12
 800e47e:	f7fe f925 	bl	800c6cc <memcpy>
 800e482:	4621      	mov	r1, r4
 800e484:	4638      	mov	r0, r7
 800e486:	f7ff ffa5 	bl	800e3d4 <_Bfree>
 800e48a:	4644      	mov	r4, r8
 800e48c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e490:	3501      	adds	r5, #1
 800e492:	615e      	str	r6, [r3, #20]
 800e494:	6125      	str	r5, [r4, #16]
 800e496:	4620      	mov	r0, r4
 800e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49c:	0800f317 	.word	0x0800f317
 800e4a0:	0800f328 	.word	0x0800f328

0800e4a4 <__hi0bits>:
 800e4a4:	0c03      	lsrs	r3, r0, #16
 800e4a6:	041b      	lsls	r3, r3, #16
 800e4a8:	b9d3      	cbnz	r3, 800e4e0 <__hi0bits+0x3c>
 800e4aa:	0400      	lsls	r0, r0, #16
 800e4ac:	2310      	movs	r3, #16
 800e4ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e4b2:	bf04      	itt	eq
 800e4b4:	0200      	lsleq	r0, r0, #8
 800e4b6:	3308      	addeq	r3, #8
 800e4b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e4bc:	bf04      	itt	eq
 800e4be:	0100      	lsleq	r0, r0, #4
 800e4c0:	3304      	addeq	r3, #4
 800e4c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e4c6:	bf04      	itt	eq
 800e4c8:	0080      	lsleq	r0, r0, #2
 800e4ca:	3302      	addeq	r3, #2
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	db05      	blt.n	800e4dc <__hi0bits+0x38>
 800e4d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e4d4:	f103 0301 	add.w	r3, r3, #1
 800e4d8:	bf08      	it	eq
 800e4da:	2320      	moveq	r3, #32
 800e4dc:	4618      	mov	r0, r3
 800e4de:	4770      	bx	lr
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e7e4      	b.n	800e4ae <__hi0bits+0xa>

0800e4e4 <__lo0bits>:
 800e4e4:	6803      	ldr	r3, [r0, #0]
 800e4e6:	f013 0207 	ands.w	r2, r3, #7
 800e4ea:	4601      	mov	r1, r0
 800e4ec:	d00b      	beq.n	800e506 <__lo0bits+0x22>
 800e4ee:	07da      	lsls	r2, r3, #31
 800e4f0:	d423      	bmi.n	800e53a <__lo0bits+0x56>
 800e4f2:	0798      	lsls	r0, r3, #30
 800e4f4:	bf49      	itett	mi
 800e4f6:	085b      	lsrmi	r3, r3, #1
 800e4f8:	089b      	lsrpl	r3, r3, #2
 800e4fa:	2001      	movmi	r0, #1
 800e4fc:	600b      	strmi	r3, [r1, #0]
 800e4fe:	bf5c      	itt	pl
 800e500:	600b      	strpl	r3, [r1, #0]
 800e502:	2002      	movpl	r0, #2
 800e504:	4770      	bx	lr
 800e506:	b298      	uxth	r0, r3
 800e508:	b9a8      	cbnz	r0, 800e536 <__lo0bits+0x52>
 800e50a:	0c1b      	lsrs	r3, r3, #16
 800e50c:	2010      	movs	r0, #16
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	b90a      	cbnz	r2, 800e516 <__lo0bits+0x32>
 800e512:	3008      	adds	r0, #8
 800e514:	0a1b      	lsrs	r3, r3, #8
 800e516:	071a      	lsls	r2, r3, #28
 800e518:	bf04      	itt	eq
 800e51a:	091b      	lsreq	r3, r3, #4
 800e51c:	3004      	addeq	r0, #4
 800e51e:	079a      	lsls	r2, r3, #30
 800e520:	bf04      	itt	eq
 800e522:	089b      	lsreq	r3, r3, #2
 800e524:	3002      	addeq	r0, #2
 800e526:	07da      	lsls	r2, r3, #31
 800e528:	d403      	bmi.n	800e532 <__lo0bits+0x4e>
 800e52a:	085b      	lsrs	r3, r3, #1
 800e52c:	f100 0001 	add.w	r0, r0, #1
 800e530:	d005      	beq.n	800e53e <__lo0bits+0x5a>
 800e532:	600b      	str	r3, [r1, #0]
 800e534:	4770      	bx	lr
 800e536:	4610      	mov	r0, r2
 800e538:	e7e9      	b.n	800e50e <__lo0bits+0x2a>
 800e53a:	2000      	movs	r0, #0
 800e53c:	4770      	bx	lr
 800e53e:	2020      	movs	r0, #32
 800e540:	4770      	bx	lr
	...

0800e544 <__i2b>:
 800e544:	b510      	push	{r4, lr}
 800e546:	460c      	mov	r4, r1
 800e548:	2101      	movs	r1, #1
 800e54a:	f7ff ff03 	bl	800e354 <_Balloc>
 800e54e:	4602      	mov	r2, r0
 800e550:	b928      	cbnz	r0, 800e55e <__i2b+0x1a>
 800e552:	4b05      	ldr	r3, [pc, #20]	; (800e568 <__i2b+0x24>)
 800e554:	4805      	ldr	r0, [pc, #20]	; (800e56c <__i2b+0x28>)
 800e556:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e55a:	f000 faa7 	bl	800eaac <__assert_func>
 800e55e:	2301      	movs	r3, #1
 800e560:	6144      	str	r4, [r0, #20]
 800e562:	6103      	str	r3, [r0, #16]
 800e564:	bd10      	pop	{r4, pc}
 800e566:	bf00      	nop
 800e568:	0800f317 	.word	0x0800f317
 800e56c:	0800f328 	.word	0x0800f328

0800e570 <__multiply>:
 800e570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e574:	4691      	mov	r9, r2
 800e576:	690a      	ldr	r2, [r1, #16]
 800e578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	bfb8      	it	lt
 800e580:	460b      	movlt	r3, r1
 800e582:	460c      	mov	r4, r1
 800e584:	bfbc      	itt	lt
 800e586:	464c      	movlt	r4, r9
 800e588:	4699      	movlt	r9, r3
 800e58a:	6927      	ldr	r7, [r4, #16]
 800e58c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e590:	68a3      	ldr	r3, [r4, #8]
 800e592:	6861      	ldr	r1, [r4, #4]
 800e594:	eb07 060a 	add.w	r6, r7, sl
 800e598:	42b3      	cmp	r3, r6
 800e59a:	b085      	sub	sp, #20
 800e59c:	bfb8      	it	lt
 800e59e:	3101      	addlt	r1, #1
 800e5a0:	f7ff fed8 	bl	800e354 <_Balloc>
 800e5a4:	b930      	cbnz	r0, 800e5b4 <__multiply+0x44>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	4b44      	ldr	r3, [pc, #272]	; (800e6bc <__multiply+0x14c>)
 800e5aa:	4845      	ldr	r0, [pc, #276]	; (800e6c0 <__multiply+0x150>)
 800e5ac:	f240 115d 	movw	r1, #349	; 0x15d
 800e5b0:	f000 fa7c 	bl	800eaac <__assert_func>
 800e5b4:	f100 0514 	add.w	r5, r0, #20
 800e5b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e5bc:	462b      	mov	r3, r5
 800e5be:	2200      	movs	r2, #0
 800e5c0:	4543      	cmp	r3, r8
 800e5c2:	d321      	bcc.n	800e608 <__multiply+0x98>
 800e5c4:	f104 0314 	add.w	r3, r4, #20
 800e5c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e5cc:	f109 0314 	add.w	r3, r9, #20
 800e5d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e5d4:	9202      	str	r2, [sp, #8]
 800e5d6:	1b3a      	subs	r2, r7, r4
 800e5d8:	3a15      	subs	r2, #21
 800e5da:	f022 0203 	bic.w	r2, r2, #3
 800e5de:	3204      	adds	r2, #4
 800e5e0:	f104 0115 	add.w	r1, r4, #21
 800e5e4:	428f      	cmp	r7, r1
 800e5e6:	bf38      	it	cc
 800e5e8:	2204      	movcc	r2, #4
 800e5ea:	9201      	str	r2, [sp, #4]
 800e5ec:	9a02      	ldr	r2, [sp, #8]
 800e5ee:	9303      	str	r3, [sp, #12]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d80c      	bhi.n	800e60e <__multiply+0x9e>
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	dd03      	ble.n	800e600 <__multiply+0x90>
 800e5f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d05a      	beq.n	800e6b6 <__multiply+0x146>
 800e600:	6106      	str	r6, [r0, #16]
 800e602:	b005      	add	sp, #20
 800e604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e608:	f843 2b04 	str.w	r2, [r3], #4
 800e60c:	e7d8      	b.n	800e5c0 <__multiply+0x50>
 800e60e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e612:	f1ba 0f00 	cmp.w	sl, #0
 800e616:	d024      	beq.n	800e662 <__multiply+0xf2>
 800e618:	f104 0e14 	add.w	lr, r4, #20
 800e61c:	46a9      	mov	r9, r5
 800e61e:	f04f 0c00 	mov.w	ip, #0
 800e622:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e626:	f8d9 1000 	ldr.w	r1, [r9]
 800e62a:	fa1f fb82 	uxth.w	fp, r2
 800e62e:	b289      	uxth	r1, r1
 800e630:	fb0a 110b 	mla	r1, sl, fp, r1
 800e634:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e638:	f8d9 2000 	ldr.w	r2, [r9]
 800e63c:	4461      	add	r1, ip
 800e63e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e642:	fb0a c20b 	mla	r2, sl, fp, ip
 800e646:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e64a:	b289      	uxth	r1, r1
 800e64c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e650:	4577      	cmp	r7, lr
 800e652:	f849 1b04 	str.w	r1, [r9], #4
 800e656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e65a:	d8e2      	bhi.n	800e622 <__multiply+0xb2>
 800e65c:	9a01      	ldr	r2, [sp, #4]
 800e65e:	f845 c002 	str.w	ip, [r5, r2]
 800e662:	9a03      	ldr	r2, [sp, #12]
 800e664:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e668:	3304      	adds	r3, #4
 800e66a:	f1b9 0f00 	cmp.w	r9, #0
 800e66e:	d020      	beq.n	800e6b2 <__multiply+0x142>
 800e670:	6829      	ldr	r1, [r5, #0]
 800e672:	f104 0c14 	add.w	ip, r4, #20
 800e676:	46ae      	mov	lr, r5
 800e678:	f04f 0a00 	mov.w	sl, #0
 800e67c:	f8bc b000 	ldrh.w	fp, [ip]
 800e680:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e684:	fb09 220b 	mla	r2, r9, fp, r2
 800e688:	4492      	add	sl, r2
 800e68a:	b289      	uxth	r1, r1
 800e68c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e690:	f84e 1b04 	str.w	r1, [lr], #4
 800e694:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e698:	f8be 1000 	ldrh.w	r1, [lr]
 800e69c:	0c12      	lsrs	r2, r2, #16
 800e69e:	fb09 1102 	mla	r1, r9, r2, r1
 800e6a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e6a6:	4567      	cmp	r7, ip
 800e6a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e6ac:	d8e6      	bhi.n	800e67c <__multiply+0x10c>
 800e6ae:	9a01      	ldr	r2, [sp, #4]
 800e6b0:	50a9      	str	r1, [r5, r2]
 800e6b2:	3504      	adds	r5, #4
 800e6b4:	e79a      	b.n	800e5ec <__multiply+0x7c>
 800e6b6:	3e01      	subs	r6, #1
 800e6b8:	e79c      	b.n	800e5f4 <__multiply+0x84>
 800e6ba:	bf00      	nop
 800e6bc:	0800f317 	.word	0x0800f317
 800e6c0:	0800f328 	.word	0x0800f328

0800e6c4 <__pow5mult>:
 800e6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c8:	4615      	mov	r5, r2
 800e6ca:	f012 0203 	ands.w	r2, r2, #3
 800e6ce:	4606      	mov	r6, r0
 800e6d0:	460f      	mov	r7, r1
 800e6d2:	d007      	beq.n	800e6e4 <__pow5mult+0x20>
 800e6d4:	4c25      	ldr	r4, [pc, #148]	; (800e76c <__pow5mult+0xa8>)
 800e6d6:	3a01      	subs	r2, #1
 800e6d8:	2300      	movs	r3, #0
 800e6da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6de:	f7ff fe9b 	bl	800e418 <__multadd>
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	10ad      	asrs	r5, r5, #2
 800e6e6:	d03d      	beq.n	800e764 <__pow5mult+0xa0>
 800e6e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e6ea:	b97c      	cbnz	r4, 800e70c <__pow5mult+0x48>
 800e6ec:	2010      	movs	r0, #16
 800e6ee:	f7fd ffdd 	bl	800c6ac <malloc>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	6270      	str	r0, [r6, #36]	; 0x24
 800e6f6:	b928      	cbnz	r0, 800e704 <__pow5mult+0x40>
 800e6f8:	4b1d      	ldr	r3, [pc, #116]	; (800e770 <__pow5mult+0xac>)
 800e6fa:	481e      	ldr	r0, [pc, #120]	; (800e774 <__pow5mult+0xb0>)
 800e6fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e700:	f000 f9d4 	bl	800eaac <__assert_func>
 800e704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e708:	6004      	str	r4, [r0, #0]
 800e70a:	60c4      	str	r4, [r0, #12]
 800e70c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e714:	b94c      	cbnz	r4, 800e72a <__pow5mult+0x66>
 800e716:	f240 2171 	movw	r1, #625	; 0x271
 800e71a:	4630      	mov	r0, r6
 800e71c:	f7ff ff12 	bl	800e544 <__i2b>
 800e720:	2300      	movs	r3, #0
 800e722:	f8c8 0008 	str.w	r0, [r8, #8]
 800e726:	4604      	mov	r4, r0
 800e728:	6003      	str	r3, [r0, #0]
 800e72a:	f04f 0900 	mov.w	r9, #0
 800e72e:	07eb      	lsls	r3, r5, #31
 800e730:	d50a      	bpl.n	800e748 <__pow5mult+0x84>
 800e732:	4639      	mov	r1, r7
 800e734:	4622      	mov	r2, r4
 800e736:	4630      	mov	r0, r6
 800e738:	f7ff ff1a 	bl	800e570 <__multiply>
 800e73c:	4639      	mov	r1, r7
 800e73e:	4680      	mov	r8, r0
 800e740:	4630      	mov	r0, r6
 800e742:	f7ff fe47 	bl	800e3d4 <_Bfree>
 800e746:	4647      	mov	r7, r8
 800e748:	106d      	asrs	r5, r5, #1
 800e74a:	d00b      	beq.n	800e764 <__pow5mult+0xa0>
 800e74c:	6820      	ldr	r0, [r4, #0]
 800e74e:	b938      	cbnz	r0, 800e760 <__pow5mult+0x9c>
 800e750:	4622      	mov	r2, r4
 800e752:	4621      	mov	r1, r4
 800e754:	4630      	mov	r0, r6
 800e756:	f7ff ff0b 	bl	800e570 <__multiply>
 800e75a:	6020      	str	r0, [r4, #0]
 800e75c:	f8c0 9000 	str.w	r9, [r0]
 800e760:	4604      	mov	r4, r0
 800e762:	e7e4      	b.n	800e72e <__pow5mult+0x6a>
 800e764:	4638      	mov	r0, r7
 800e766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e76a:	bf00      	nop
 800e76c:	0800f478 	.word	0x0800f478
 800e770:	0800f2a5 	.word	0x0800f2a5
 800e774:	0800f328 	.word	0x0800f328

0800e778 <__lshift>:
 800e778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e77c:	460c      	mov	r4, r1
 800e77e:	6849      	ldr	r1, [r1, #4]
 800e780:	6923      	ldr	r3, [r4, #16]
 800e782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e786:	68a3      	ldr	r3, [r4, #8]
 800e788:	4607      	mov	r7, r0
 800e78a:	4691      	mov	r9, r2
 800e78c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e790:	f108 0601 	add.w	r6, r8, #1
 800e794:	42b3      	cmp	r3, r6
 800e796:	db0b      	blt.n	800e7b0 <__lshift+0x38>
 800e798:	4638      	mov	r0, r7
 800e79a:	f7ff fddb 	bl	800e354 <_Balloc>
 800e79e:	4605      	mov	r5, r0
 800e7a0:	b948      	cbnz	r0, 800e7b6 <__lshift+0x3e>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	4b2a      	ldr	r3, [pc, #168]	; (800e850 <__lshift+0xd8>)
 800e7a6:	482b      	ldr	r0, [pc, #172]	; (800e854 <__lshift+0xdc>)
 800e7a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e7ac:	f000 f97e 	bl	800eaac <__assert_func>
 800e7b0:	3101      	adds	r1, #1
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	e7ee      	b.n	800e794 <__lshift+0x1c>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	f100 0114 	add.w	r1, r0, #20
 800e7bc:	f100 0210 	add.w	r2, r0, #16
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	4553      	cmp	r3, sl
 800e7c4:	db37      	blt.n	800e836 <__lshift+0xbe>
 800e7c6:	6920      	ldr	r0, [r4, #16]
 800e7c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7cc:	f104 0314 	add.w	r3, r4, #20
 800e7d0:	f019 091f 	ands.w	r9, r9, #31
 800e7d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e7dc:	d02f      	beq.n	800e83e <__lshift+0xc6>
 800e7de:	f1c9 0e20 	rsb	lr, r9, #32
 800e7e2:	468a      	mov	sl, r1
 800e7e4:	f04f 0c00 	mov.w	ip, #0
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	fa02 f209 	lsl.w	r2, r2, r9
 800e7ee:	ea42 020c 	orr.w	r2, r2, ip
 800e7f2:	f84a 2b04 	str.w	r2, [sl], #4
 800e7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7fa:	4298      	cmp	r0, r3
 800e7fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e800:	d8f2      	bhi.n	800e7e8 <__lshift+0x70>
 800e802:	1b03      	subs	r3, r0, r4
 800e804:	3b15      	subs	r3, #21
 800e806:	f023 0303 	bic.w	r3, r3, #3
 800e80a:	3304      	adds	r3, #4
 800e80c:	f104 0215 	add.w	r2, r4, #21
 800e810:	4290      	cmp	r0, r2
 800e812:	bf38      	it	cc
 800e814:	2304      	movcc	r3, #4
 800e816:	f841 c003 	str.w	ip, [r1, r3]
 800e81a:	f1bc 0f00 	cmp.w	ip, #0
 800e81e:	d001      	beq.n	800e824 <__lshift+0xac>
 800e820:	f108 0602 	add.w	r6, r8, #2
 800e824:	3e01      	subs	r6, #1
 800e826:	4638      	mov	r0, r7
 800e828:	612e      	str	r6, [r5, #16]
 800e82a:	4621      	mov	r1, r4
 800e82c:	f7ff fdd2 	bl	800e3d4 <_Bfree>
 800e830:	4628      	mov	r0, r5
 800e832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e836:	f842 0f04 	str.w	r0, [r2, #4]!
 800e83a:	3301      	adds	r3, #1
 800e83c:	e7c1      	b.n	800e7c2 <__lshift+0x4a>
 800e83e:	3904      	subs	r1, #4
 800e840:	f853 2b04 	ldr.w	r2, [r3], #4
 800e844:	f841 2f04 	str.w	r2, [r1, #4]!
 800e848:	4298      	cmp	r0, r3
 800e84a:	d8f9      	bhi.n	800e840 <__lshift+0xc8>
 800e84c:	e7ea      	b.n	800e824 <__lshift+0xac>
 800e84e:	bf00      	nop
 800e850:	0800f317 	.word	0x0800f317
 800e854:	0800f328 	.word	0x0800f328

0800e858 <__mcmp>:
 800e858:	b530      	push	{r4, r5, lr}
 800e85a:	6902      	ldr	r2, [r0, #16]
 800e85c:	690c      	ldr	r4, [r1, #16]
 800e85e:	1b12      	subs	r2, r2, r4
 800e860:	d10e      	bne.n	800e880 <__mcmp+0x28>
 800e862:	f100 0314 	add.w	r3, r0, #20
 800e866:	3114      	adds	r1, #20
 800e868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e86c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e878:	42a5      	cmp	r5, r4
 800e87a:	d003      	beq.n	800e884 <__mcmp+0x2c>
 800e87c:	d305      	bcc.n	800e88a <__mcmp+0x32>
 800e87e:	2201      	movs	r2, #1
 800e880:	4610      	mov	r0, r2
 800e882:	bd30      	pop	{r4, r5, pc}
 800e884:	4283      	cmp	r3, r0
 800e886:	d3f3      	bcc.n	800e870 <__mcmp+0x18>
 800e888:	e7fa      	b.n	800e880 <__mcmp+0x28>
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295
 800e88e:	e7f7      	b.n	800e880 <__mcmp+0x28>

0800e890 <__mdiff>:
 800e890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	460c      	mov	r4, r1
 800e896:	4606      	mov	r6, r0
 800e898:	4611      	mov	r1, r2
 800e89a:	4620      	mov	r0, r4
 800e89c:	4690      	mov	r8, r2
 800e89e:	f7ff ffdb 	bl	800e858 <__mcmp>
 800e8a2:	1e05      	subs	r5, r0, #0
 800e8a4:	d110      	bne.n	800e8c8 <__mdiff+0x38>
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7ff fd53 	bl	800e354 <_Balloc>
 800e8ae:	b930      	cbnz	r0, 800e8be <__mdiff+0x2e>
 800e8b0:	4b3a      	ldr	r3, [pc, #232]	; (800e99c <__mdiff+0x10c>)
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	f240 2132 	movw	r1, #562	; 0x232
 800e8b8:	4839      	ldr	r0, [pc, #228]	; (800e9a0 <__mdiff+0x110>)
 800e8ba:	f000 f8f7 	bl	800eaac <__assert_func>
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c8:	bfa4      	itt	ge
 800e8ca:	4643      	movge	r3, r8
 800e8cc:	46a0      	movge	r8, r4
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8d4:	bfa6      	itte	ge
 800e8d6:	461c      	movge	r4, r3
 800e8d8:	2500      	movge	r5, #0
 800e8da:	2501      	movlt	r5, #1
 800e8dc:	f7ff fd3a 	bl	800e354 <_Balloc>
 800e8e0:	b920      	cbnz	r0, 800e8ec <__mdiff+0x5c>
 800e8e2:	4b2e      	ldr	r3, [pc, #184]	; (800e99c <__mdiff+0x10c>)
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e8ea:	e7e5      	b.n	800e8b8 <__mdiff+0x28>
 800e8ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8f0:	6926      	ldr	r6, [r4, #16]
 800e8f2:	60c5      	str	r5, [r0, #12]
 800e8f4:	f104 0914 	add.w	r9, r4, #20
 800e8f8:	f108 0514 	add.w	r5, r8, #20
 800e8fc:	f100 0e14 	add.w	lr, r0, #20
 800e900:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e904:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e908:	f108 0210 	add.w	r2, r8, #16
 800e90c:	46f2      	mov	sl, lr
 800e90e:	2100      	movs	r1, #0
 800e910:	f859 3b04 	ldr.w	r3, [r9], #4
 800e914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e918:	fa1f f883 	uxth.w	r8, r3
 800e91c:	fa11 f18b 	uxtah	r1, r1, fp
 800e920:	0c1b      	lsrs	r3, r3, #16
 800e922:	eba1 0808 	sub.w	r8, r1, r8
 800e926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e92a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e92e:	fa1f f888 	uxth.w	r8, r8
 800e932:	1419      	asrs	r1, r3, #16
 800e934:	454e      	cmp	r6, r9
 800e936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e93a:	f84a 3b04 	str.w	r3, [sl], #4
 800e93e:	d8e7      	bhi.n	800e910 <__mdiff+0x80>
 800e940:	1b33      	subs	r3, r6, r4
 800e942:	3b15      	subs	r3, #21
 800e944:	f023 0303 	bic.w	r3, r3, #3
 800e948:	3304      	adds	r3, #4
 800e94a:	3415      	adds	r4, #21
 800e94c:	42a6      	cmp	r6, r4
 800e94e:	bf38      	it	cc
 800e950:	2304      	movcc	r3, #4
 800e952:	441d      	add	r5, r3
 800e954:	4473      	add	r3, lr
 800e956:	469e      	mov	lr, r3
 800e958:	462e      	mov	r6, r5
 800e95a:	4566      	cmp	r6, ip
 800e95c:	d30e      	bcc.n	800e97c <__mdiff+0xec>
 800e95e:	f10c 0203 	add.w	r2, ip, #3
 800e962:	1b52      	subs	r2, r2, r5
 800e964:	f022 0203 	bic.w	r2, r2, #3
 800e968:	3d03      	subs	r5, #3
 800e96a:	45ac      	cmp	ip, r5
 800e96c:	bf38      	it	cc
 800e96e:	2200      	movcc	r2, #0
 800e970:	441a      	add	r2, r3
 800e972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e976:	b17b      	cbz	r3, 800e998 <__mdiff+0x108>
 800e978:	6107      	str	r7, [r0, #16]
 800e97a:	e7a3      	b.n	800e8c4 <__mdiff+0x34>
 800e97c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e980:	fa11 f288 	uxtah	r2, r1, r8
 800e984:	1414      	asrs	r4, r2, #16
 800e986:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e98a:	b292      	uxth	r2, r2
 800e98c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e990:	f84e 2b04 	str.w	r2, [lr], #4
 800e994:	1421      	asrs	r1, r4, #16
 800e996:	e7e0      	b.n	800e95a <__mdiff+0xca>
 800e998:	3f01      	subs	r7, #1
 800e99a:	e7ea      	b.n	800e972 <__mdiff+0xe2>
 800e99c:	0800f317 	.word	0x0800f317
 800e9a0:	0800f328 	.word	0x0800f328

0800e9a4 <__d2b>:
 800e9a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9a8:	4689      	mov	r9, r1
 800e9aa:	2101      	movs	r1, #1
 800e9ac:	ec57 6b10 	vmov	r6, r7, d0
 800e9b0:	4690      	mov	r8, r2
 800e9b2:	f7ff fccf 	bl	800e354 <_Balloc>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	b930      	cbnz	r0, 800e9c8 <__d2b+0x24>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	4b25      	ldr	r3, [pc, #148]	; (800ea54 <__d2b+0xb0>)
 800e9be:	4826      	ldr	r0, [pc, #152]	; (800ea58 <__d2b+0xb4>)
 800e9c0:	f240 310a 	movw	r1, #778	; 0x30a
 800e9c4:	f000 f872 	bl	800eaac <__assert_func>
 800e9c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e9cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9d0:	bb35      	cbnz	r5, 800ea20 <__d2b+0x7c>
 800e9d2:	2e00      	cmp	r6, #0
 800e9d4:	9301      	str	r3, [sp, #4]
 800e9d6:	d028      	beq.n	800ea2a <__d2b+0x86>
 800e9d8:	4668      	mov	r0, sp
 800e9da:	9600      	str	r6, [sp, #0]
 800e9dc:	f7ff fd82 	bl	800e4e4 <__lo0bits>
 800e9e0:	9900      	ldr	r1, [sp, #0]
 800e9e2:	b300      	cbz	r0, 800ea26 <__d2b+0x82>
 800e9e4:	9a01      	ldr	r2, [sp, #4]
 800e9e6:	f1c0 0320 	rsb	r3, r0, #32
 800e9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ee:	430b      	orrs	r3, r1
 800e9f0:	40c2      	lsrs	r2, r0
 800e9f2:	6163      	str	r3, [r4, #20]
 800e9f4:	9201      	str	r2, [sp, #4]
 800e9f6:	9b01      	ldr	r3, [sp, #4]
 800e9f8:	61a3      	str	r3, [r4, #24]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	bf14      	ite	ne
 800e9fe:	2202      	movne	r2, #2
 800ea00:	2201      	moveq	r2, #1
 800ea02:	6122      	str	r2, [r4, #16]
 800ea04:	b1d5      	cbz	r5, 800ea3c <__d2b+0x98>
 800ea06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea0a:	4405      	add	r5, r0
 800ea0c:	f8c9 5000 	str.w	r5, [r9]
 800ea10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea14:	f8c8 0000 	str.w	r0, [r8]
 800ea18:	4620      	mov	r0, r4
 800ea1a:	b003      	add	sp, #12
 800ea1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea24:	e7d5      	b.n	800e9d2 <__d2b+0x2e>
 800ea26:	6161      	str	r1, [r4, #20]
 800ea28:	e7e5      	b.n	800e9f6 <__d2b+0x52>
 800ea2a:	a801      	add	r0, sp, #4
 800ea2c:	f7ff fd5a 	bl	800e4e4 <__lo0bits>
 800ea30:	9b01      	ldr	r3, [sp, #4]
 800ea32:	6163      	str	r3, [r4, #20]
 800ea34:	2201      	movs	r2, #1
 800ea36:	6122      	str	r2, [r4, #16]
 800ea38:	3020      	adds	r0, #32
 800ea3a:	e7e3      	b.n	800ea04 <__d2b+0x60>
 800ea3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea44:	f8c9 0000 	str.w	r0, [r9]
 800ea48:	6918      	ldr	r0, [r3, #16]
 800ea4a:	f7ff fd2b 	bl	800e4a4 <__hi0bits>
 800ea4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea52:	e7df      	b.n	800ea14 <__d2b+0x70>
 800ea54:	0800f317 	.word	0x0800f317
 800ea58:	0800f328 	.word	0x0800f328

0800ea5c <_calloc_r>:
 800ea5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ea62:	b94c      	cbnz	r4, 800ea78 <_calloc_r+0x1c>
 800ea64:	4611      	mov	r1, r2
 800ea66:	9201      	str	r2, [sp, #4]
 800ea68:	f7fd feb2 	bl	800c7d0 <_malloc_r>
 800ea6c:	9a01      	ldr	r2, [sp, #4]
 800ea6e:	4605      	mov	r5, r0
 800ea70:	b930      	cbnz	r0, 800ea80 <_calloc_r+0x24>
 800ea72:	4628      	mov	r0, r5
 800ea74:	b003      	add	sp, #12
 800ea76:	bd30      	pop	{r4, r5, pc}
 800ea78:	220c      	movs	r2, #12
 800ea7a:	6002      	str	r2, [r0, #0]
 800ea7c:	2500      	movs	r5, #0
 800ea7e:	e7f8      	b.n	800ea72 <_calloc_r+0x16>
 800ea80:	4621      	mov	r1, r4
 800ea82:	f7fd fe31 	bl	800c6e8 <memset>
 800ea86:	e7f4      	b.n	800ea72 <_calloc_r+0x16>

0800ea88 <_read_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d07      	ldr	r5, [pc, #28]	; (800eaa8 <_read_r+0x20>)
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	4608      	mov	r0, r1
 800ea90:	4611      	mov	r1, r2
 800ea92:	2200      	movs	r2, #0
 800ea94:	602a      	str	r2, [r5, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	f7f3 ff08 	bl	80028ac <_read>
 800ea9c:	1c43      	adds	r3, r0, #1
 800ea9e:	d102      	bne.n	800eaa6 <_read_r+0x1e>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	b103      	cbz	r3, 800eaa6 <_read_r+0x1e>
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	200068a4 	.word	0x200068a4

0800eaac <__assert_func>:
 800eaac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaae:	4614      	mov	r4, r2
 800eab0:	461a      	mov	r2, r3
 800eab2:	4b09      	ldr	r3, [pc, #36]	; (800ead8 <__assert_func+0x2c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4605      	mov	r5, r0
 800eab8:	68d8      	ldr	r0, [r3, #12]
 800eaba:	b14c      	cbz	r4, 800ead0 <__assert_func+0x24>
 800eabc:	4b07      	ldr	r3, [pc, #28]	; (800eadc <__assert_func+0x30>)
 800eabe:	9100      	str	r1, [sp, #0]
 800eac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eac4:	4906      	ldr	r1, [pc, #24]	; (800eae0 <__assert_func+0x34>)
 800eac6:	462b      	mov	r3, r5
 800eac8:	f000 f80e 	bl	800eae8 <fiprintf>
 800eacc:	f7fd fcbc 	bl	800c448 <abort>
 800ead0:	4b04      	ldr	r3, [pc, #16]	; (800eae4 <__assert_func+0x38>)
 800ead2:	461c      	mov	r4, r3
 800ead4:	e7f3      	b.n	800eabe <__assert_func+0x12>
 800ead6:	bf00      	nop
 800ead8:	20000010 	.word	0x20000010
 800eadc:	0800f484 	.word	0x0800f484
 800eae0:	0800f491 	.word	0x0800f491
 800eae4:	0800f4bf 	.word	0x0800f4bf

0800eae8 <fiprintf>:
 800eae8:	b40e      	push	{r1, r2, r3}
 800eaea:	b503      	push	{r0, r1, lr}
 800eaec:	4601      	mov	r1, r0
 800eaee:	ab03      	add	r3, sp, #12
 800eaf0:	4805      	ldr	r0, [pc, #20]	; (800eb08 <fiprintf+0x20>)
 800eaf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaf6:	6800      	ldr	r0, [r0, #0]
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	f000 f843 	bl	800eb84 <_vfiprintf_r>
 800eafe:	b002      	add	sp, #8
 800eb00:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb04:	b003      	add	sp, #12
 800eb06:	4770      	bx	lr
 800eb08:	20000010 	.word	0x20000010

0800eb0c <__ascii_mbtowc>:
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	b901      	cbnz	r1, 800eb12 <__ascii_mbtowc+0x6>
 800eb10:	a901      	add	r1, sp, #4
 800eb12:	b142      	cbz	r2, 800eb26 <__ascii_mbtowc+0x1a>
 800eb14:	b14b      	cbz	r3, 800eb2a <__ascii_mbtowc+0x1e>
 800eb16:	7813      	ldrb	r3, [r2, #0]
 800eb18:	600b      	str	r3, [r1, #0]
 800eb1a:	7812      	ldrb	r2, [r2, #0]
 800eb1c:	1e10      	subs	r0, r2, #0
 800eb1e:	bf18      	it	ne
 800eb20:	2001      	movne	r0, #1
 800eb22:	b002      	add	sp, #8
 800eb24:	4770      	bx	lr
 800eb26:	4610      	mov	r0, r2
 800eb28:	e7fb      	b.n	800eb22 <__ascii_mbtowc+0x16>
 800eb2a:	f06f 0001 	mvn.w	r0, #1
 800eb2e:	e7f8      	b.n	800eb22 <__ascii_mbtowc+0x16>

0800eb30 <__sfputc_r>:
 800eb30:	6893      	ldr	r3, [r2, #8]
 800eb32:	3b01      	subs	r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	b410      	push	{r4}
 800eb38:	6093      	str	r3, [r2, #8]
 800eb3a:	da08      	bge.n	800eb4e <__sfputc_r+0x1e>
 800eb3c:	6994      	ldr	r4, [r2, #24]
 800eb3e:	42a3      	cmp	r3, r4
 800eb40:	db01      	blt.n	800eb46 <__sfputc_r+0x16>
 800eb42:	290a      	cmp	r1, #10
 800eb44:	d103      	bne.n	800eb4e <__sfputc_r+0x1e>
 800eb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb4a:	f000 b94b 	b.w	800ede4 <__swbuf_r>
 800eb4e:	6813      	ldr	r3, [r2, #0]
 800eb50:	1c58      	adds	r0, r3, #1
 800eb52:	6010      	str	r0, [r2, #0]
 800eb54:	7019      	strb	r1, [r3, #0]
 800eb56:	4608      	mov	r0, r1
 800eb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <__sfputs_r>:
 800eb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb60:	4606      	mov	r6, r0
 800eb62:	460f      	mov	r7, r1
 800eb64:	4614      	mov	r4, r2
 800eb66:	18d5      	adds	r5, r2, r3
 800eb68:	42ac      	cmp	r4, r5
 800eb6a:	d101      	bne.n	800eb70 <__sfputs_r+0x12>
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e007      	b.n	800eb80 <__sfputs_r+0x22>
 800eb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb74:	463a      	mov	r2, r7
 800eb76:	4630      	mov	r0, r6
 800eb78:	f7ff ffda 	bl	800eb30 <__sfputc_r>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d1f3      	bne.n	800eb68 <__sfputs_r+0xa>
 800eb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb84 <_vfiprintf_r>:
 800eb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb88:	460d      	mov	r5, r1
 800eb8a:	b09d      	sub	sp, #116	; 0x74
 800eb8c:	4614      	mov	r4, r2
 800eb8e:	4698      	mov	r8, r3
 800eb90:	4606      	mov	r6, r0
 800eb92:	b118      	cbz	r0, 800eb9c <_vfiprintf_r+0x18>
 800eb94:	6983      	ldr	r3, [r0, #24]
 800eb96:	b90b      	cbnz	r3, 800eb9c <_vfiprintf_r+0x18>
 800eb98:	f7fd fcc2 	bl	800c520 <__sinit>
 800eb9c:	4b89      	ldr	r3, [pc, #548]	; (800edc4 <_vfiprintf_r+0x240>)
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	d11b      	bne.n	800ebda <_vfiprintf_r+0x56>
 800eba2:	6875      	ldr	r5, [r6, #4]
 800eba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eba6:	07d9      	lsls	r1, r3, #31
 800eba8:	d405      	bmi.n	800ebb6 <_vfiprintf_r+0x32>
 800ebaa:	89ab      	ldrh	r3, [r5, #12]
 800ebac:	059a      	lsls	r2, r3, #22
 800ebae:	d402      	bmi.n	800ebb6 <_vfiprintf_r+0x32>
 800ebb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebb2:	f7fd fd78 	bl	800c6a6 <__retarget_lock_acquire_recursive>
 800ebb6:	89ab      	ldrh	r3, [r5, #12]
 800ebb8:	071b      	lsls	r3, r3, #28
 800ebba:	d501      	bpl.n	800ebc0 <_vfiprintf_r+0x3c>
 800ebbc:	692b      	ldr	r3, [r5, #16]
 800ebbe:	b9eb      	cbnz	r3, 800ebfc <_vfiprintf_r+0x78>
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f000 f96e 	bl	800eea4 <__swsetup_r>
 800ebc8:	b1c0      	cbz	r0, 800ebfc <_vfiprintf_r+0x78>
 800ebca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebcc:	07dc      	lsls	r4, r3, #31
 800ebce:	d50e      	bpl.n	800ebee <_vfiprintf_r+0x6a>
 800ebd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd4:	b01d      	add	sp, #116	; 0x74
 800ebd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebda:	4b7b      	ldr	r3, [pc, #492]	; (800edc8 <_vfiprintf_r+0x244>)
 800ebdc:	429d      	cmp	r5, r3
 800ebde:	d101      	bne.n	800ebe4 <_vfiprintf_r+0x60>
 800ebe0:	68b5      	ldr	r5, [r6, #8]
 800ebe2:	e7df      	b.n	800eba4 <_vfiprintf_r+0x20>
 800ebe4:	4b79      	ldr	r3, [pc, #484]	; (800edcc <_vfiprintf_r+0x248>)
 800ebe6:	429d      	cmp	r5, r3
 800ebe8:	bf08      	it	eq
 800ebea:	68f5      	ldreq	r5, [r6, #12]
 800ebec:	e7da      	b.n	800eba4 <_vfiprintf_r+0x20>
 800ebee:	89ab      	ldrh	r3, [r5, #12]
 800ebf0:	0598      	lsls	r0, r3, #22
 800ebf2:	d4ed      	bmi.n	800ebd0 <_vfiprintf_r+0x4c>
 800ebf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebf6:	f7fd fd58 	bl	800c6aa <__retarget_lock_release_recursive>
 800ebfa:	e7e9      	b.n	800ebd0 <_vfiprintf_r+0x4c>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ec00:	2320      	movs	r3, #32
 800ec02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec0a:	2330      	movs	r3, #48	; 0x30
 800ec0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edd0 <_vfiprintf_r+0x24c>
 800ec10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec14:	f04f 0901 	mov.w	r9, #1
 800ec18:	4623      	mov	r3, r4
 800ec1a:	469a      	mov	sl, r3
 800ec1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec20:	b10a      	cbz	r2, 800ec26 <_vfiprintf_r+0xa2>
 800ec22:	2a25      	cmp	r2, #37	; 0x25
 800ec24:	d1f9      	bne.n	800ec1a <_vfiprintf_r+0x96>
 800ec26:	ebba 0b04 	subs.w	fp, sl, r4
 800ec2a:	d00b      	beq.n	800ec44 <_vfiprintf_r+0xc0>
 800ec2c:	465b      	mov	r3, fp
 800ec2e:	4622      	mov	r2, r4
 800ec30:	4629      	mov	r1, r5
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7ff ff93 	bl	800eb5e <__sfputs_r>
 800ec38:	3001      	adds	r0, #1
 800ec3a:	f000 80aa 	beq.w	800ed92 <_vfiprintf_r+0x20e>
 800ec3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec40:	445a      	add	r2, fp
 800ec42:	9209      	str	r2, [sp, #36]	; 0x24
 800ec44:	f89a 3000 	ldrb.w	r3, [sl]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f000 80a2 	beq.w	800ed92 <_vfiprintf_r+0x20e>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f04f 32ff 	mov.w	r2, #4294967295
 800ec54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec58:	f10a 0a01 	add.w	sl, sl, #1
 800ec5c:	9304      	str	r3, [sp, #16]
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec64:	931a      	str	r3, [sp, #104]	; 0x68
 800ec66:	4654      	mov	r4, sl
 800ec68:	2205      	movs	r2, #5
 800ec6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec6e:	4858      	ldr	r0, [pc, #352]	; (800edd0 <_vfiprintf_r+0x24c>)
 800ec70:	f7f1 fab6 	bl	80001e0 <memchr>
 800ec74:	9a04      	ldr	r2, [sp, #16]
 800ec76:	b9d8      	cbnz	r0, 800ecb0 <_vfiprintf_r+0x12c>
 800ec78:	06d1      	lsls	r1, r2, #27
 800ec7a:	bf44      	itt	mi
 800ec7c:	2320      	movmi	r3, #32
 800ec7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec82:	0713      	lsls	r3, r2, #28
 800ec84:	bf44      	itt	mi
 800ec86:	232b      	movmi	r3, #43	; 0x2b
 800ec88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec90:	2b2a      	cmp	r3, #42	; 0x2a
 800ec92:	d015      	beq.n	800ecc0 <_vfiprintf_r+0x13c>
 800ec94:	9a07      	ldr	r2, [sp, #28]
 800ec96:	4654      	mov	r4, sl
 800ec98:	2000      	movs	r0, #0
 800ec9a:	f04f 0c0a 	mov.w	ip, #10
 800ec9e:	4621      	mov	r1, r4
 800eca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eca4:	3b30      	subs	r3, #48	; 0x30
 800eca6:	2b09      	cmp	r3, #9
 800eca8:	d94e      	bls.n	800ed48 <_vfiprintf_r+0x1c4>
 800ecaa:	b1b0      	cbz	r0, 800ecda <_vfiprintf_r+0x156>
 800ecac:	9207      	str	r2, [sp, #28]
 800ecae:	e014      	b.n	800ecda <_vfiprintf_r+0x156>
 800ecb0:	eba0 0308 	sub.w	r3, r0, r8
 800ecb4:	fa09 f303 	lsl.w	r3, r9, r3
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	9304      	str	r3, [sp, #16]
 800ecbc:	46a2      	mov	sl, r4
 800ecbe:	e7d2      	b.n	800ec66 <_vfiprintf_r+0xe2>
 800ecc0:	9b03      	ldr	r3, [sp, #12]
 800ecc2:	1d19      	adds	r1, r3, #4
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	9103      	str	r1, [sp, #12]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	bfbb      	ittet	lt
 800eccc:	425b      	neglt	r3, r3
 800ecce:	f042 0202 	orrlt.w	r2, r2, #2
 800ecd2:	9307      	strge	r3, [sp, #28]
 800ecd4:	9307      	strlt	r3, [sp, #28]
 800ecd6:	bfb8      	it	lt
 800ecd8:	9204      	strlt	r2, [sp, #16]
 800ecda:	7823      	ldrb	r3, [r4, #0]
 800ecdc:	2b2e      	cmp	r3, #46	; 0x2e
 800ecde:	d10c      	bne.n	800ecfa <_vfiprintf_r+0x176>
 800ece0:	7863      	ldrb	r3, [r4, #1]
 800ece2:	2b2a      	cmp	r3, #42	; 0x2a
 800ece4:	d135      	bne.n	800ed52 <_vfiprintf_r+0x1ce>
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	1d1a      	adds	r2, r3, #4
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	9203      	str	r2, [sp, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	bfb8      	it	lt
 800ecf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecf6:	3402      	adds	r4, #2
 800ecf8:	9305      	str	r3, [sp, #20]
 800ecfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ede0 <_vfiprintf_r+0x25c>
 800ecfe:	7821      	ldrb	r1, [r4, #0]
 800ed00:	2203      	movs	r2, #3
 800ed02:	4650      	mov	r0, sl
 800ed04:	f7f1 fa6c 	bl	80001e0 <memchr>
 800ed08:	b140      	cbz	r0, 800ed1c <_vfiprintf_r+0x198>
 800ed0a:	2340      	movs	r3, #64	; 0x40
 800ed0c:	eba0 000a 	sub.w	r0, r0, sl
 800ed10:	fa03 f000 	lsl.w	r0, r3, r0
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	4303      	orrs	r3, r0
 800ed18:	3401      	adds	r4, #1
 800ed1a:	9304      	str	r3, [sp, #16]
 800ed1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed20:	482c      	ldr	r0, [pc, #176]	; (800edd4 <_vfiprintf_r+0x250>)
 800ed22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed26:	2206      	movs	r2, #6
 800ed28:	f7f1 fa5a 	bl	80001e0 <memchr>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d03f      	beq.n	800edb0 <_vfiprintf_r+0x22c>
 800ed30:	4b29      	ldr	r3, [pc, #164]	; (800edd8 <_vfiprintf_r+0x254>)
 800ed32:	bb1b      	cbnz	r3, 800ed7c <_vfiprintf_r+0x1f8>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	3307      	adds	r3, #7
 800ed38:	f023 0307 	bic.w	r3, r3, #7
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	9303      	str	r3, [sp, #12]
 800ed40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed42:	443b      	add	r3, r7
 800ed44:	9309      	str	r3, [sp, #36]	; 0x24
 800ed46:	e767      	b.n	800ec18 <_vfiprintf_r+0x94>
 800ed48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed4c:	460c      	mov	r4, r1
 800ed4e:	2001      	movs	r0, #1
 800ed50:	e7a5      	b.n	800ec9e <_vfiprintf_r+0x11a>
 800ed52:	2300      	movs	r3, #0
 800ed54:	3401      	adds	r4, #1
 800ed56:	9305      	str	r3, [sp, #20]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	f04f 0c0a 	mov.w	ip, #10
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed64:	3a30      	subs	r2, #48	; 0x30
 800ed66:	2a09      	cmp	r2, #9
 800ed68:	d903      	bls.n	800ed72 <_vfiprintf_r+0x1ee>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0c5      	beq.n	800ecfa <_vfiprintf_r+0x176>
 800ed6e:	9105      	str	r1, [sp, #20]
 800ed70:	e7c3      	b.n	800ecfa <_vfiprintf_r+0x176>
 800ed72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed76:	4604      	mov	r4, r0
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e7f0      	b.n	800ed5e <_vfiprintf_r+0x1da>
 800ed7c:	ab03      	add	r3, sp, #12
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	462a      	mov	r2, r5
 800ed82:	4b16      	ldr	r3, [pc, #88]	; (800eddc <_vfiprintf_r+0x258>)
 800ed84:	a904      	add	r1, sp, #16
 800ed86:	4630      	mov	r0, r6
 800ed88:	f7fd fe36 	bl	800c9f8 <_printf_float>
 800ed8c:	4607      	mov	r7, r0
 800ed8e:	1c78      	adds	r0, r7, #1
 800ed90:	d1d6      	bne.n	800ed40 <_vfiprintf_r+0x1bc>
 800ed92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed94:	07d9      	lsls	r1, r3, #31
 800ed96:	d405      	bmi.n	800eda4 <_vfiprintf_r+0x220>
 800ed98:	89ab      	ldrh	r3, [r5, #12]
 800ed9a:	059a      	lsls	r2, r3, #22
 800ed9c:	d402      	bmi.n	800eda4 <_vfiprintf_r+0x220>
 800ed9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda0:	f7fd fc83 	bl	800c6aa <__retarget_lock_release_recursive>
 800eda4:	89ab      	ldrh	r3, [r5, #12]
 800eda6:	065b      	lsls	r3, r3, #25
 800eda8:	f53f af12 	bmi.w	800ebd0 <_vfiprintf_r+0x4c>
 800edac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edae:	e711      	b.n	800ebd4 <_vfiprintf_r+0x50>
 800edb0:	ab03      	add	r3, sp, #12
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	462a      	mov	r2, r5
 800edb6:	4b09      	ldr	r3, [pc, #36]	; (800eddc <_vfiprintf_r+0x258>)
 800edb8:	a904      	add	r1, sp, #16
 800edba:	4630      	mov	r0, r6
 800edbc:	f7fe f8c0 	bl	800cf40 <_printf_i>
 800edc0:	e7e4      	b.n	800ed8c <_vfiprintf_r+0x208>
 800edc2:	bf00      	nop
 800edc4:	0800f220 	.word	0x0800f220
 800edc8:	0800f240 	.word	0x0800f240
 800edcc:	0800f200 	.word	0x0800f200
 800edd0:	0800f4ca 	.word	0x0800f4ca
 800edd4:	0800f4d4 	.word	0x0800f4d4
 800edd8:	0800c9f9 	.word	0x0800c9f9
 800eddc:	0800eb5f 	.word	0x0800eb5f
 800ede0:	0800f4d0 	.word	0x0800f4d0

0800ede4 <__swbuf_r>:
 800ede4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede6:	460e      	mov	r6, r1
 800ede8:	4614      	mov	r4, r2
 800edea:	4605      	mov	r5, r0
 800edec:	b118      	cbz	r0, 800edf6 <__swbuf_r+0x12>
 800edee:	6983      	ldr	r3, [r0, #24]
 800edf0:	b90b      	cbnz	r3, 800edf6 <__swbuf_r+0x12>
 800edf2:	f7fd fb95 	bl	800c520 <__sinit>
 800edf6:	4b21      	ldr	r3, [pc, #132]	; (800ee7c <__swbuf_r+0x98>)
 800edf8:	429c      	cmp	r4, r3
 800edfa:	d12b      	bne.n	800ee54 <__swbuf_r+0x70>
 800edfc:	686c      	ldr	r4, [r5, #4]
 800edfe:	69a3      	ldr	r3, [r4, #24]
 800ee00:	60a3      	str	r3, [r4, #8]
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	071a      	lsls	r2, r3, #28
 800ee06:	d52f      	bpl.n	800ee68 <__swbuf_r+0x84>
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	b36b      	cbz	r3, 800ee68 <__swbuf_r+0x84>
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	6820      	ldr	r0, [r4, #0]
 800ee10:	1ac0      	subs	r0, r0, r3
 800ee12:	6963      	ldr	r3, [r4, #20]
 800ee14:	b2f6      	uxtb	r6, r6
 800ee16:	4283      	cmp	r3, r0
 800ee18:	4637      	mov	r7, r6
 800ee1a:	dc04      	bgt.n	800ee26 <__swbuf_r+0x42>
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f7ff fa3a 	bl	800e298 <_fflush_r>
 800ee24:	bb30      	cbnz	r0, 800ee74 <__swbuf_r+0x90>
 800ee26:	68a3      	ldr	r3, [r4, #8]
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	60a3      	str	r3, [r4, #8]
 800ee2c:	6823      	ldr	r3, [r4, #0]
 800ee2e:	1c5a      	adds	r2, r3, #1
 800ee30:	6022      	str	r2, [r4, #0]
 800ee32:	701e      	strb	r6, [r3, #0]
 800ee34:	6963      	ldr	r3, [r4, #20]
 800ee36:	3001      	adds	r0, #1
 800ee38:	4283      	cmp	r3, r0
 800ee3a:	d004      	beq.n	800ee46 <__swbuf_r+0x62>
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	07db      	lsls	r3, r3, #31
 800ee40:	d506      	bpl.n	800ee50 <__swbuf_r+0x6c>
 800ee42:	2e0a      	cmp	r6, #10
 800ee44:	d104      	bne.n	800ee50 <__swbuf_r+0x6c>
 800ee46:	4621      	mov	r1, r4
 800ee48:	4628      	mov	r0, r5
 800ee4a:	f7ff fa25 	bl	800e298 <_fflush_r>
 800ee4e:	b988      	cbnz	r0, 800ee74 <__swbuf_r+0x90>
 800ee50:	4638      	mov	r0, r7
 800ee52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee54:	4b0a      	ldr	r3, [pc, #40]	; (800ee80 <__swbuf_r+0x9c>)
 800ee56:	429c      	cmp	r4, r3
 800ee58:	d101      	bne.n	800ee5e <__swbuf_r+0x7a>
 800ee5a:	68ac      	ldr	r4, [r5, #8]
 800ee5c:	e7cf      	b.n	800edfe <__swbuf_r+0x1a>
 800ee5e:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <__swbuf_r+0xa0>)
 800ee60:	429c      	cmp	r4, r3
 800ee62:	bf08      	it	eq
 800ee64:	68ec      	ldreq	r4, [r5, #12]
 800ee66:	e7ca      	b.n	800edfe <__swbuf_r+0x1a>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f000 f81a 	bl	800eea4 <__swsetup_r>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d0cb      	beq.n	800ee0c <__swbuf_r+0x28>
 800ee74:	f04f 37ff 	mov.w	r7, #4294967295
 800ee78:	e7ea      	b.n	800ee50 <__swbuf_r+0x6c>
 800ee7a:	bf00      	nop
 800ee7c:	0800f220 	.word	0x0800f220
 800ee80:	0800f240 	.word	0x0800f240
 800ee84:	0800f200 	.word	0x0800f200

0800ee88 <__ascii_wctomb>:
 800ee88:	b149      	cbz	r1, 800ee9e <__ascii_wctomb+0x16>
 800ee8a:	2aff      	cmp	r2, #255	; 0xff
 800ee8c:	bf85      	ittet	hi
 800ee8e:	238a      	movhi	r3, #138	; 0x8a
 800ee90:	6003      	strhi	r3, [r0, #0]
 800ee92:	700a      	strbls	r2, [r1, #0]
 800ee94:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee98:	bf98      	it	ls
 800ee9a:	2001      	movls	r0, #1
 800ee9c:	4770      	bx	lr
 800ee9e:	4608      	mov	r0, r1
 800eea0:	4770      	bx	lr
	...

0800eea4 <__swsetup_r>:
 800eea4:	4b32      	ldr	r3, [pc, #200]	; (800ef70 <__swsetup_r+0xcc>)
 800eea6:	b570      	push	{r4, r5, r6, lr}
 800eea8:	681d      	ldr	r5, [r3, #0]
 800eeaa:	4606      	mov	r6, r0
 800eeac:	460c      	mov	r4, r1
 800eeae:	b125      	cbz	r5, 800eeba <__swsetup_r+0x16>
 800eeb0:	69ab      	ldr	r3, [r5, #24]
 800eeb2:	b913      	cbnz	r3, 800eeba <__swsetup_r+0x16>
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f7fd fb33 	bl	800c520 <__sinit>
 800eeba:	4b2e      	ldr	r3, [pc, #184]	; (800ef74 <__swsetup_r+0xd0>)
 800eebc:	429c      	cmp	r4, r3
 800eebe:	d10f      	bne.n	800eee0 <__swsetup_r+0x3c>
 800eec0:	686c      	ldr	r4, [r5, #4]
 800eec2:	89a3      	ldrh	r3, [r4, #12]
 800eec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eec8:	0719      	lsls	r1, r3, #28
 800eeca:	d42c      	bmi.n	800ef26 <__swsetup_r+0x82>
 800eecc:	06dd      	lsls	r5, r3, #27
 800eece:	d411      	bmi.n	800eef4 <__swsetup_r+0x50>
 800eed0:	2309      	movs	r3, #9
 800eed2:	6033      	str	r3, [r6, #0]
 800eed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eed8:	81a3      	strh	r3, [r4, #12]
 800eeda:	f04f 30ff 	mov.w	r0, #4294967295
 800eede:	e03e      	b.n	800ef5e <__swsetup_r+0xba>
 800eee0:	4b25      	ldr	r3, [pc, #148]	; (800ef78 <__swsetup_r+0xd4>)
 800eee2:	429c      	cmp	r4, r3
 800eee4:	d101      	bne.n	800eeea <__swsetup_r+0x46>
 800eee6:	68ac      	ldr	r4, [r5, #8]
 800eee8:	e7eb      	b.n	800eec2 <__swsetup_r+0x1e>
 800eeea:	4b24      	ldr	r3, [pc, #144]	; (800ef7c <__swsetup_r+0xd8>)
 800eeec:	429c      	cmp	r4, r3
 800eeee:	bf08      	it	eq
 800eef0:	68ec      	ldreq	r4, [r5, #12]
 800eef2:	e7e6      	b.n	800eec2 <__swsetup_r+0x1e>
 800eef4:	0758      	lsls	r0, r3, #29
 800eef6:	d512      	bpl.n	800ef1e <__swsetup_r+0x7a>
 800eef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eefa:	b141      	cbz	r1, 800ef0e <__swsetup_r+0x6a>
 800eefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef00:	4299      	cmp	r1, r3
 800ef02:	d002      	beq.n	800ef0a <__swsetup_r+0x66>
 800ef04:	4630      	mov	r0, r6
 800ef06:	f7fd fbf7 	bl	800c6f8 <_free_r>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef0e:	89a3      	ldrh	r3, [r4, #12]
 800ef10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef14:	81a3      	strh	r3, [r4, #12]
 800ef16:	2300      	movs	r3, #0
 800ef18:	6063      	str	r3, [r4, #4]
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	f043 0308 	orr.w	r3, r3, #8
 800ef24:	81a3      	strh	r3, [r4, #12]
 800ef26:	6923      	ldr	r3, [r4, #16]
 800ef28:	b94b      	cbnz	r3, 800ef3e <__swsetup_r+0x9a>
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef34:	d003      	beq.n	800ef3e <__swsetup_r+0x9a>
 800ef36:	4621      	mov	r1, r4
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f000 f847 	bl	800efcc <__smakebuf_r>
 800ef3e:	89a0      	ldrh	r0, [r4, #12]
 800ef40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef44:	f010 0301 	ands.w	r3, r0, #1
 800ef48:	d00a      	beq.n	800ef60 <__swsetup_r+0xbc>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	60a3      	str	r3, [r4, #8]
 800ef4e:	6963      	ldr	r3, [r4, #20]
 800ef50:	425b      	negs	r3, r3
 800ef52:	61a3      	str	r3, [r4, #24]
 800ef54:	6923      	ldr	r3, [r4, #16]
 800ef56:	b943      	cbnz	r3, 800ef6a <__swsetup_r+0xc6>
 800ef58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef5c:	d1ba      	bne.n	800eed4 <__swsetup_r+0x30>
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}
 800ef60:	0781      	lsls	r1, r0, #30
 800ef62:	bf58      	it	pl
 800ef64:	6963      	ldrpl	r3, [r4, #20]
 800ef66:	60a3      	str	r3, [r4, #8]
 800ef68:	e7f4      	b.n	800ef54 <__swsetup_r+0xb0>
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	e7f7      	b.n	800ef5e <__swsetup_r+0xba>
 800ef6e:	bf00      	nop
 800ef70:	20000010 	.word	0x20000010
 800ef74:	0800f220 	.word	0x0800f220
 800ef78:	0800f240 	.word	0x0800f240
 800ef7c:	0800f200 	.word	0x0800f200

0800ef80 <__swhatbuf_r>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	460e      	mov	r6, r1
 800ef84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef88:	2900      	cmp	r1, #0
 800ef8a:	b096      	sub	sp, #88	; 0x58
 800ef8c:	4614      	mov	r4, r2
 800ef8e:	461d      	mov	r5, r3
 800ef90:	da08      	bge.n	800efa4 <__swhatbuf_r+0x24>
 800ef92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	602a      	str	r2, [r5, #0]
 800ef9a:	061a      	lsls	r2, r3, #24
 800ef9c:	d410      	bmi.n	800efc0 <__swhatbuf_r+0x40>
 800ef9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efa2:	e00e      	b.n	800efc2 <__swhatbuf_r+0x42>
 800efa4:	466a      	mov	r2, sp
 800efa6:	f000 f851 	bl	800f04c <_fstat_r>
 800efaa:	2800      	cmp	r0, #0
 800efac:	dbf1      	blt.n	800ef92 <__swhatbuf_r+0x12>
 800efae:	9a01      	ldr	r2, [sp, #4]
 800efb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efb8:	425a      	negs	r2, r3
 800efba:	415a      	adcs	r2, r3
 800efbc:	602a      	str	r2, [r5, #0]
 800efbe:	e7ee      	b.n	800ef9e <__swhatbuf_r+0x1e>
 800efc0:	2340      	movs	r3, #64	; 0x40
 800efc2:	2000      	movs	r0, #0
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	b016      	add	sp, #88	; 0x58
 800efc8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efcc <__smakebuf_r>:
 800efcc:	898b      	ldrh	r3, [r1, #12]
 800efce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efd0:	079d      	lsls	r5, r3, #30
 800efd2:	4606      	mov	r6, r0
 800efd4:	460c      	mov	r4, r1
 800efd6:	d507      	bpl.n	800efe8 <__smakebuf_r+0x1c>
 800efd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	6123      	str	r3, [r4, #16]
 800efe0:	2301      	movs	r3, #1
 800efe2:	6163      	str	r3, [r4, #20]
 800efe4:	b002      	add	sp, #8
 800efe6:	bd70      	pop	{r4, r5, r6, pc}
 800efe8:	ab01      	add	r3, sp, #4
 800efea:	466a      	mov	r2, sp
 800efec:	f7ff ffc8 	bl	800ef80 <__swhatbuf_r>
 800eff0:	9900      	ldr	r1, [sp, #0]
 800eff2:	4605      	mov	r5, r0
 800eff4:	4630      	mov	r0, r6
 800eff6:	f7fd fbeb 	bl	800c7d0 <_malloc_r>
 800effa:	b948      	cbnz	r0, 800f010 <__smakebuf_r+0x44>
 800effc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f000:	059a      	lsls	r2, r3, #22
 800f002:	d4ef      	bmi.n	800efe4 <__smakebuf_r+0x18>
 800f004:	f023 0303 	bic.w	r3, r3, #3
 800f008:	f043 0302 	orr.w	r3, r3, #2
 800f00c:	81a3      	strh	r3, [r4, #12]
 800f00e:	e7e3      	b.n	800efd8 <__smakebuf_r+0xc>
 800f010:	4b0d      	ldr	r3, [pc, #52]	; (800f048 <__smakebuf_r+0x7c>)
 800f012:	62b3      	str	r3, [r6, #40]	; 0x28
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	6020      	str	r0, [r4, #0]
 800f018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f01c:	81a3      	strh	r3, [r4, #12]
 800f01e:	9b00      	ldr	r3, [sp, #0]
 800f020:	6163      	str	r3, [r4, #20]
 800f022:	9b01      	ldr	r3, [sp, #4]
 800f024:	6120      	str	r0, [r4, #16]
 800f026:	b15b      	cbz	r3, 800f040 <__smakebuf_r+0x74>
 800f028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f02c:	4630      	mov	r0, r6
 800f02e:	f000 f81f 	bl	800f070 <_isatty_r>
 800f032:	b128      	cbz	r0, 800f040 <__smakebuf_r+0x74>
 800f034:	89a3      	ldrh	r3, [r4, #12]
 800f036:	f023 0303 	bic.w	r3, r3, #3
 800f03a:	f043 0301 	orr.w	r3, r3, #1
 800f03e:	81a3      	strh	r3, [r4, #12]
 800f040:	89a0      	ldrh	r0, [r4, #12]
 800f042:	4305      	orrs	r5, r0
 800f044:	81a5      	strh	r5, [r4, #12]
 800f046:	e7cd      	b.n	800efe4 <__smakebuf_r+0x18>
 800f048:	0800c4b9 	.word	0x0800c4b9

0800f04c <_fstat_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4d07      	ldr	r5, [pc, #28]	; (800f06c <_fstat_r+0x20>)
 800f050:	2300      	movs	r3, #0
 800f052:	4604      	mov	r4, r0
 800f054:	4608      	mov	r0, r1
 800f056:	4611      	mov	r1, r2
 800f058:	602b      	str	r3, [r5, #0]
 800f05a:	f7f3 fc6c 	bl	8002936 <_fstat>
 800f05e:	1c43      	adds	r3, r0, #1
 800f060:	d102      	bne.n	800f068 <_fstat_r+0x1c>
 800f062:	682b      	ldr	r3, [r5, #0]
 800f064:	b103      	cbz	r3, 800f068 <_fstat_r+0x1c>
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	bd38      	pop	{r3, r4, r5, pc}
 800f06a:	bf00      	nop
 800f06c:	200068a4 	.word	0x200068a4

0800f070 <_isatty_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4d06      	ldr	r5, [pc, #24]	; (800f08c <_isatty_r+0x1c>)
 800f074:	2300      	movs	r3, #0
 800f076:	4604      	mov	r4, r0
 800f078:	4608      	mov	r0, r1
 800f07a:	602b      	str	r3, [r5, #0]
 800f07c:	f7f3 fc6b 	bl	8002956 <_isatty>
 800f080:	1c43      	adds	r3, r0, #1
 800f082:	d102      	bne.n	800f08a <_isatty_r+0x1a>
 800f084:	682b      	ldr	r3, [r5, #0]
 800f086:	b103      	cbz	r3, 800f08a <_isatty_r+0x1a>
 800f088:	6023      	str	r3, [r4, #0]
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	200068a4 	.word	0x200068a4

0800f090 <_init>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	bf00      	nop
 800f094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f096:	bc08      	pop	{r3}
 800f098:	469e      	mov	lr, r3
 800f09a:	4770      	bx	lr

0800f09c <_fini>:
 800f09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09e:	bf00      	nop
 800f0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0a2:	bc08      	pop	{r3}
 800f0a4:	469e      	mov	lr, r3
 800f0a6:	4770      	bx	lr
