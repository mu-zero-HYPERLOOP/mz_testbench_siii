
pdu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080185c0  080185c0  000285c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e04  08018e04  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08018e04  08018e04  00028e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e0c  08018e0c  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  08018e0c  08018e0c  00028e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08018e30  08018e30  00028e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08018e3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030214  2**0
                  CONTENTS
 10 .bss          00007290  20000218  20000218  00030218  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  200074a8  200074a8  00030218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054b86  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b613  00000000  00000000  00084dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000039b8  00000000  00000000  000903e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003650  00000000  00000000  00093d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030f26  00000000  00000000  000973e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e7fe  00000000  00000000  000c830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108f20  00000000  00000000  00106b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020fa2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010e74  00000000  00000000  0020fa7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080185a8 	.word	0x080185a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080185a8 	.word	0x080185a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f010 f99c 	bl	8011580 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f013 fe0c 	bl	8014e74 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f00f fd37 	bl	8010cd4 <printf_>
 8001266:	f013 fe35 	bl	8014ed4 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007c0 	.word	0x200007c0
 8001278:	080185c0 	.word	0x080185c0

0800127c <_ZN3can7MessageINS_8messages8PDU_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	219a      	movs	r1, #154	; 0x9a
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN7canzero9emergency14consumer_entryEPv>:


osThreadId_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 80012aa:	f012 fe35 	bl	8013f18 <xTaskGetCurrentTaskHandle>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 80012b2:	6013      	str	r3, [r2, #0]

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffdf 	bl	800127c <_ZN3can7MessageINS_8messages8PDU_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f012 ffbb 	bl	801424c <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012de:	f001 f839 	bl	8002354 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00b      	beq.n	8001308 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	461c      	mov	r4, r3
 80012f6:	4615      	mov	r5, r2
 80012f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff8c 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800130c:	e7db      	b.n	80012c6 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800130e:	bf00      	nop
 8001310:	20000234 	.word	0x20000234

08001314 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff53 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001326:	f240 731a 	movw	r3, #1818	; 0x71a
 800132a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001334:	f000 ff2e 	bl	8002194 <_ZN7canzero9getStatusEv>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	f010 f919 	bl	8011580 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800134e:	f000 f841 	bl	80013d4 <_ZN7canzero9heartbeat11getIntervalEv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f00f fe2e 	bl	8010fc8 <osDelay>
		frame ++;
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	3301      	adds	r3, #1
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001372:	e7df      	b.n	8001334 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001374:	200007c0 	.word	0x200007c0
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 f824 	bl	80013d4 <_ZN7canzero9heartbeat11getIntervalEv>
 800138c:	4603      	mov	r3, r0
 800138e:	3305      	adds	r3, #5
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	4620      	mov	r0, r4
 80013aa:	f011 fd0f 	bl	8012dcc <xStreamBufferReceive>
 80013ae:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0e2      	beq.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 feca 	bl	800215c <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013c8:	e7dc      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013ca:	bf00      	nop
 80013cc:	20000238 	.word	0x20000238
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013d8:	f004 fa6e 	bl	80058b8 <_Z24OD_HeartbeatInterval_getv>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_Z41__static_initialization_and_destruction_0ii>:
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10c      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d107      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80013fe:	2201      	movs	r2, #1
 8001400:	2100      	movs	r1, #0
 8001402:	20c8      	movs	r0, #200	; 0xc8
 8001404:	f011 fb62 	bl	8012acc <xStreamBufferGenericCreate>
 8001408:	4603      	mov	r3, r0
 800140a:	4a03      	ldr	r2, [pc, #12]	; (8001418 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000238 	.word	0x20000238

0800141c <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
 8001420:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff ffdd 	bl	80013e4 <_Z41__static_initialization_and_destruction_0ii>
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4798      	blx	r3
    }
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffd4 	bl	8001448 <_ZNSt14_Function_baseD1Ev>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f8e1 	bl	800167c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZN7canzero10receiver_tD1Ev>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffde 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZN7canzero10receiver_taSERKS0_>:
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f8f3 	bl	80016da <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	7d1a      	ldrb	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	751a      	strb	r2, [r3, #20]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d12f      	bne.n	800158c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	429a      	cmp	r2, r3
 8001538:	d258      	bcs.n	80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 800153a:	4930      	ldr	r1, [pc, #192]	; (80015fc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3314      	adds	r3, #20
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d119      	bne.n	8001584 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	4829      	ldr	r0, [pc, #164]	; (80015fc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	3310      	adds	r3, #16
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4299      	cmp	r1, r3
 8001568:	d10c      	bne.n	8001584 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001576:	4413      	add	r3, r2
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f8c8 	bl	8001710 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001580:	2301      	movs	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	3301      	adds	r3, #1
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	e7d1      	b.n	8001530 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	429a      	cmp	r2, r3
 8001598:	d228      	bcs.n	80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800159a:	4918      	ldr	r1, [pc, #96]	; (80015fc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3314      	adds	r3, #20
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d119      	bne.n	80015e4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3310      	adds	r3, #16
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d10c      	bne.n	80015e4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015d6:	4413      	add	r3, r2
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f898 	bl	8001710 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 80015e0:	2301      	movs	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e7d1      	b.n	8001590 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200007b4 	.word	0x200007b4
 80015fc:	2000023c 	.word	0x2000023c

08001600 <_ZN3can25unregisterMessageReceiverEj>:



namespace can {

void unregisterMessageReceiver(unsigned int id){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	using namespace canzero;
	taskENTER_CRITICAL();
 8001608:	f013 fc34 	bl	8014e74 <vPortEnterCritical>
	for(size_t i = 0;i<g_size;i++){
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	429a      	cmp	r2, r3
 8001618:	d226      	bcs.n	8001668 <_ZN3can25unregisterMessageReceiverEj+0x68>
		if(g_receivers[i].m_receiverId == id){
 800161a:	4917      	ldr	r1, [pc, #92]	; (8001678 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3318      	adds	r3, #24
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d116      	bne.n	8001660 <_ZN3can25unregisterMessageReceiverEj+0x60>
			g_receivers[i] = g_receivers[--g_size];
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 800163e:	1898      	adds	r0, r3, r2
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 8001658:	4413      	add	r3, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff ff3f 	bl	80014de <_ZN7canzero10receiver_taSERKS0_>
	for(size_t i = 0;i<g_size;i++){
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e7d3      	b.n	8001610 <_ZN3can25unregisterMessageReceiverEj+0x10>
		}
	}
	taskEXIT_CRITICAL();
 8001668:	f013 fc34 	bl	8014ed4 <vPortExitCritical>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200007b4 	.word	0x200007b4
 8001678:	2000023c 	.word	0x2000023c

0800167c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fed0 	bl	800142c <_ZNSt14_Function_baseC1Ev>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fec2 	bl	800142c <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 80016a8:	6838      	ldr	r0, [r7, #0]
 80016aa:	f000 f84d 	bl	8001748 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00d      	beq.n	80016d0 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	2202      	movs	r2, #2
 80016be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
	}
    }
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ffd3 	bl	8001696 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f836 	bl	8001768 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fec5 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 8001706:	687b      	ldr	r3, [r7, #4]
      }
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fea6 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 8001728:	f013 fed3 	bl	80154d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68dc      	ldr	r4, [r3, #12]
 8001730:	687d      	ldr	r5, [r7, #4]
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f000 f839 	bl	80017aa <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8001738:	4603      	mov	r3, r0
 800173a:	4619      	mov	r1, r3
 800173c:	4628      	mov	r0, r5
 800173e:	47a0      	blx	r4
 8001740:	bf00      	nop
    }
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bdb0      	pop	{r4, r5, r7, pc}

08001748 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe8b 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f82c 	bl	80017d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0208 	add.w	r2, r3, #8
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3308      	adds	r3, #8
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f000 f855 	bl	800183a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f103 020c 	add.w	r2, r3, #12
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	330c      	adds	r3, #12
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f000 f876 	bl	800188e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffed 	bl	80017c0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80017f4:	6838      	ldr	r0, [r7, #0]
 80017f6:	f7ff ffe3 	bl	80017c0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80017fa:	4602      	mov	r2, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001802:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ffd8 	bl	80017c0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001810:	4602      	mov	r2, r0
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001818:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffed 	bl	8001824 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800184a:	4603      	mov	r3, r0
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f7ff ffe7 	bl	8001824 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001856:	4603      	mov	r3, r0
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ffde 	bl	8001824 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001868:	4603      	mov	r3, r0
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	601a      	str	r2, [r3, #0]
    }
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffed 	bl	8001878 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800189e:	4603      	mov	r3, r0
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f7ff ffe7 	bl	8001878 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018aa:	4603      	mov	r3, r0
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffde 	bl	8001878 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018bc:	4603      	mov	r3, r0
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	601a      	str	r2, [r3, #0]
    }
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_Z41__static_initialization_and_destruction_0ii>:

}
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10f      	bne.n	80018fc <_Z41__static_initialization_and_destruction_0ii+0x30>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10a      	bne.n	80018fc <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80018e8:	2431      	movs	r4, #49	; 0x31
 80018ea:	461d      	mov	r5, r3
 80018ec:	2c00      	cmp	r4, #0
 80018ee:	db05      	blt.n	80018fc <_Z41__static_initialization_and_destruction_0ii+0x30>
 80018f0:	4628      	mov	r0, r5
 80018f2:	f7ff fdda 	bl	80014aa <_ZN7canzero10receiver_tC1Ev>
 80018f6:	351c      	adds	r5, #28
 80018f8:	3c01      	subs	r4, #1
 80018fa:	e7f7      	b.n	80018ec <_Z41__static_initialization_and_destruction_0ii+0x20>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10d      	bne.n	800191e <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	4293      	cmp	r3, r2
 800190a:	d108      	bne.n	800191e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800190c:	4c07      	ldr	r4, [pc, #28]	; (800192c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001910:	429c      	cmp	r4, r3
 8001912:	d004      	beq.n	800191e <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001914:	3c1c      	subs	r4, #28
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff fdd4 	bl	80014c4 <_ZN7canzero10receiver_tD1Ev>
 800191c:	e7f7      	b.n	800190e <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	bf00      	nop
 8001928:	2000023c 	.word	0x2000023c
 800192c:	200007b4 	.word	0x200007b4

08001930 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
 8001934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff ffc7 	bl	80018cc <_Z41__static_initialization_and_destruction_0ii>
 800193e:	bd80      	pop	{r7, pc}

08001940 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
 8001944:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff ffbf 	bl	80018cc <_Z41__static_initialization_and_destruction_0ii>
 800194e:	bd80      	pop	{r7, pc}

08001950 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8001950:	b084      	sub	sp, #16
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
 8001956:	f107 0c08 	add.w	ip, r7, #8
 800195a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 800195e:	f107 0008 	add.w	r0, r7, #8
 8001962:	f000 f835 	bl	80019d0 <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_Z9processRX9RxMessage+0x74>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	230a      	movs	r3, #10
 8001972:	2224      	movs	r2, #36	; 0x24
 8001974:	f107 0108 	add.w	r1, r7, #8
 8001978:	f011 f936 	bl	8012be8 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 800197c:	e01c      	b.n	80019b8 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 800197e:	f107 0008 	add.w	r0, r7, #8
 8001982:	f7ff fdc9 	bl	8001518 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d115      	bne.n	80019b8 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 8001992:	f013 fa6f 	bl	8014e74 <vPortEnterCritical>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4619      	mov	r1, r3
 800199a:	480b      	ldr	r0, [pc, #44]	; (80019c8 <_Z9processRX9RxMessage+0x78>)
 800199c:	f00f f99a 	bl	8010cd4 <printf_>
 80019a0:	f013 fa98 	bl	8014ed4 <vPortExitCritical>
}
 80019a4:	e008      	b.n	80019b8 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 80019a6:	f013 fa65 	bl	8014e74 <vPortEnterCritical>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <_Z9processRX9RxMessage+0x7c>)
 80019b0:	f00f f990 	bl	8010cd4 <printf_>
 80019b4:	f013 fa8e 	bl	8014ed4 <vPortExitCritical>
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019c0:	b004      	add	sp, #16
 80019c2:	4770      	bx	lr
 80019c4:	200007b8 	.word	0x200007b8
 80019c8:	080185f4 	.word	0x080185f4
 80019cc:	08018618 	.word	0x08018618

080019d0 <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage+0x22>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 80019e8:	bf0c      	ite	eq
 80019ea:	2301      	moveq	r3, #1
 80019ec:	2300      	movne	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	e000      	b.n	80019f4 <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80019f2:	2300      	movs	r3, #0
    }
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_Z41__static_initialization_and_destruction_0ii>:
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10c      	bne.n	8001a2a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d107      	bne.n	8001a2a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	20c8      	movs	r0, #200	; 0xc8
 8001a20:	f011 f854 	bl	8012acc <xStreamBufferGenericCreate>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a28:	6013      	str	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200007b8 	.word	0x200007b8

08001a38 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff ffdd 	bl	8001a00 <_Z41__static_initialization_and_destruction_0ii>
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10c      	bne.n	8001a72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d107      	bne.n	8001a72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a64:	2124      	movs	r1, #36	; 0x24
 8001a66:	2010      	movs	r0, #16
 8001a68:	f00f fd16 	bl	8011498 <osMessageQueueNew>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08018808 	.word	0x08018808
 8001a80:	200007bc 	.word	0x200007bc

08001a84 <_GLOBAL__sub_I_czReceiveQueue>:
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff ffdb 	bl	8001a48 <_Z41__static_initialization_and_destruction_0ii>
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a98:	f3bf 8f4f 	dsb	sy
}
 8001a9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <__NVIC_SystemReset+0x24>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001aa6:	4904      	ldr	r1, [pc, #16]	; (8001ab8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_SystemReset+0x28>)
 8001aaa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001aac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aae:	f3bf 8f4f 	dsb	sy
}
 8001ab2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <__NVIC_SystemReset+0x20>
 8001ab8:	e000ed00 	.word	0xe000ed00
 8001abc:	05fa0004 	.word	0x05fa0004

08001ac0 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b092      	sub	sp, #72	; 0x48
 8001ac4:	af06      	add	r7, sp, #24
 8001ac6:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <_Z15cz_receive_taskPv+0xa4>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	f107 010c 	add.w	r1, r7, #12
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f00f fdb3 	bl	8011640 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d136      	bne.n	8001b4e <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f8e3 	bl	8001cb0 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001af0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001af4:	2bff      	cmp	r3, #255	; 0xff
 8001af6:	d1e7      	bne.n	8001ac8 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001af8:	f7ff ffcc 	bl	8001a94 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f8ee 	bl	8001ce2 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 f895 	bl	8004c40 <_Z22handleSDORequestUploadRK9RxMessage>
 8001b16:	e7d7      	b.n	8001ac8 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f8f9 	bl	8001d14 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fbf4 	bl	800431a <_Z24handleSDORequestDownloadRK9RxMessage>
 8001b32:	e7c9      	b.n	8001ac8 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001b34:	466d      	mov	r5, sp
 8001b36:	f107 041c 	add.w	r4, r7, #28
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b48:	f7ff ff02 	bl	8001950 <_Z9processRX9RxMessage>
 8001b4c:	e7bc      	b.n	8001ac8 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d1b9      	bne.n	8001ac8 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001b54:	f013 f98e 	bl	8014e74 <vPortEnterCritical>
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <_Z15cz_receive_taskPv+0xa8>)
 8001b5a:	f00f f8bb 	bl	8010cd4 <printf_>
 8001b5e:	f013 f9b9 	bl	8014ed4 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b62:	e7b1      	b.n	8001ac8 <_Z15cz_receive_taskPv+0x8>
 8001b64:	200007bc 	.word	0x200007bc
 8001b68:	0801864c 	.word	0x0801864c

08001b6c <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b096      	sub	sp, #88	; 0x58
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001b74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f009 fdd0 	bl	800b724 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001b84:	f107 040c 	add.w	r4, r7, #12
 8001b88:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	dc0e      	bgt.n	8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001ba2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	4413      	add	r3, r2
 8001baa:	7819      	ldrb	r1, [r3, #0]
 8001bac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb2:	4413      	add	r3, r2
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bba:	3301      	adds	r3, #1
 8001bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8001bbe:	e7ed      	b.n	8001b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	f107 010c 	add.w	r1, r7, #12
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f00f fcd8 	bl	8011580 <osMessageQueuePut>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0

	}
}
 8001bd4:	bf00      	nop
 8001bd6:	3758      	adds	r7, #88	; 0x58
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}
 8001bdc:	200007bc 	.word	0x200007bc

08001be0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b096      	sub	sp, #88	; 0x58
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001be8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f009 fd96 	bl	800b724 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001bf8:	f107 040c 	add.w	r4, r7, #12
 8001bfc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	dc0e      	bgt.n	8001c34 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001c16:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	4413      	add	r3, r2
 8001c1e:	7819      	ldrb	r1, [r3, #0]
 8001c20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	4413      	add	r3, r2
 8001c28:	460a      	mov	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	3301      	adds	r3, #1
 8001c30:	657b      	str	r3, [r7, #84]	; 0x54
 8001c32:	e7ed      	b.n	8001c10 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	f107 010c 	add.w	r1, r7, #12
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f00f fc9e 	bl	8011580 <osMessageQueuePut>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0

	}
}
 8001c48:	bf00      	nop
 8001c4a:	3758      	adds	r7, #88	; 0x58
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	200007bc 	.word	0x200007bc

08001c54 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f00a f8aa 	bl	800bdb6 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c62:	f3ef 8211 	mrs	r2, BASEPRI
 8001c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	60fa      	str	r2, [r7, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <HAL_CAN_ErrorCallback+0x44>)
 8001c80:	f00f f828 	bl	8010cd4 <printf_>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c8e:	bf00      	nop
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08018664 	.word	0x08018664

08001c9c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f240 729a 	movw	r2, #1946	; 0x79a
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	e000      	b.n	8001cd6 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001cd4:	2300      	movs	r3, #0
    }
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f240 52da 	movw	r2, #1498	; 0x5da
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e000      	b.n	8001d08 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d06:	2300      	movs	r3, #0
    }
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f240 621a 	movw	r2, #1562	; 0x61a
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e000      	b.n	8001d3a <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d38:	2300      	movs	r3, #0
    }
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d10c      	bne.n	8001d72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d107      	bne.n	8001d72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d62:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001d64:	2120      	movs	r1, #32
 8001d66:	2010      	movs	r0, #16
 8001d68:	f00f fb96 	bl	8011498 <osMessageQueueNew>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	08018820 	.word	0x08018820
 8001d80:	200007c0 	.word	0x200007c0

08001d84 <_GLOBAL__sub_I_czSendQueue>:
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f7ff ffdb 	bl	8001d48 <_Z41__static_initialization_and_destruction_0ii>
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fa13 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <_Z13cz_send_entryPv+0x164>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f107 010c 	add.w	r1, r7, #12
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	2200      	movs	r2, #0
 8001db8:	f00f fc42 	bl	8011640 <osMessageQueueGet>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001dcc:	f007 fb18 	bl	8009400 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d901      	bls.n	8001dda <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001dd6:	f007 fb13 	bl	8009400 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dee:	d102      	bne.n	8001df6 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001df0:	4b42      	ldr	r3, [pc, #264]	; (8001efc <_Z13cz_send_entryPv+0x168>)
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
 8001df4:	e010      	b.n	8001e18 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dfc:	d102      	bne.n	8001e04 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <_Z13cz_send_entryPv+0x16c>)
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
 8001e02:	e009      	b.n	8001e18 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <_Z13cz_send_entryPv+0x168>)
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
 8001e12:	e001      	b.n	8001e18 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <_Z13cz_send_entryPv+0x16c>)
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e1a:	f009 fc4e 	bl	800b6ba <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001e2e:	f107 0008 	add.w	r0, r7, #8
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	f103 0218 	add.w	r2, r3, #24
 8001e3a:	f107 010c 	add.w	r1, r7, #12
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e42:	f009 fb5f 	bl	800b504 <HAL_CAN_AddTxMessage>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04b      	beq.n	8001eee <_Z13cz_send_entryPv+0x15a>
				/* Transmission request Error */
				Error_Handler();
 8001e56:	f007 fad3 	bl	8009400 <Error_Handler>
 8001e5a:	e048      	b.n	8001eee <_Z13cz_send_entryPv+0x15a>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	4a27      	ldr	r2, [pc, #156]	; (8001efc <_Z13cz_send_entryPv+0x168>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d105      	bne.n	8001e70 <_Z13cz_send_entryPv+0xdc>
				OD_CAN1_DelayedTxMessages++;
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <_Z13cz_send_entryPv+0x170>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <_Z13cz_send_entryPv+0x170>)
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e004      	b.n	8001e7a <_Z13cz_send_entryPv+0xe6>
				//printDebug("WARNING :: can1 tx mailbox overflow.\n")
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <_Z13cz_send_entryPv+0x174>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <_Z13cz_send_entryPv+0x174>)
 8001e78:	6013      	str	r3, [r2, #0]
				//printDebug("WARNING :: can2 tx mailbox overflow.\n")
			}

			osDelay(1);		// Use smallest delay possible
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f00f f8a4 	bl	8010fc8 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001e80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e82:	f009 fc1a 	bl	800b6ba <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <_Z13cz_send_entryPv+0x130>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001e96:	f107 0008 	add.w	r0, r7, #8
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	f103 0218 	add.w	r2, r3, #24
 8001ea2:	f107 010c 	add.w	r1, r7, #12
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eaa:	f009 fb2b 	bl	800b504 <HAL_CAN_AddTxMessage>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d017      	beq.n	8001eee <_Z13cz_send_entryPv+0x15a>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001ebe:	f000 fa5a 	bl	8002376 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001ec2:	e014      	b.n	8001eee <_Z13cz_send_entryPv+0x15a>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <_Z13cz_send_entryPv+0x168>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <_Z13cz_send_entryPv+0x14a>
					OD_CAN1_DiscardedTxMessages++;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <_Z13cz_send_entryPv+0x178>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <_Z13cz_send_entryPv+0x178>)
 8001ed4:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <_Z13cz_send_entryPv+0x168>)
 8001ed8:	f000 fa43 	bl	8002362 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001edc:	e007      	b.n	8001eee <_Z13cz_send_entryPv+0x15a>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <_Z13cz_send_entryPv+0x17c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <_Z13cz_send_entryPv+0x17c>)
 8001ee6:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <_Z13cz_send_entryPv+0x16c>)
 8001eea:	f000 fa3a 	bl	8002362 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001ef4:	e759      	b.n	8001daa <_Z13cz_send_entryPv+0x16>
 8001ef6:	bf00      	nop
 8001ef8:	200007c0 	.word	0x200007c0
 8001efc:	20000df0 	.word	0x20000df0
 8001f00:	20000e18 	.word	0x20000e18
 8001f04:	2000081c 	.word	0x2000081c
 8001f08:	20000834 	.word	0x20000834
 8001f0c:	20000814 	.word	0x20000814
 8001f10:	2000082c 	.word	0x2000082c

08001f14 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001f1a:	2080      	movs	r0, #128	; 0x80
 8001f1c:	f000 f91e 	bl	800215c <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da4f      	bge.n	8001fca <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001f32:	2300      	movs	r3, #0
 8001f34:	0b5b      	lsrs	r3, r3, #13
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001f46:	2300      	movs	r3, #0
 8001f48:	0b5b      	lsrs	r3, r3, #13
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f043 0306 	orr.w	r3, r3, #6
 8001f58:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	0fda      	lsrs	r2, r3, #31
 8001f5e:	4413      	add	r3, r2
 8001f60:	105b      	asrs	r3, r3, #1
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e001      	b.n	8001f74 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001f78:	230e      	movs	r3, #14
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001f80:	463b      	mov	r3, r7
 8001f82:	4619      	mov	r1, r3
 8001f84:	4871      	ldr	r0, [pc, #452]	; (800214c <_ZN7canzero4initEv+0x238>)
 8001f86:	f009 f999 	bl	800b2bc <HAL_CAN_ConfigFilter>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001f9a:	f007 fa31 	bl	8009400 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	330e      	adds	r3, #14
 8001fa2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4869      	ldr	r0, [pc, #420]	; (8002150 <_ZN7canzero4initEv+0x23c>)
 8001faa:	f009 f987 	bl	800b2bc <HAL_CAN_ConfigFilter>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001fbe:	f007 fa1f 	bl	8009400 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc8:	e7ac      	b.n	8001f24 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	2b11      	cmp	r3, #17
 8001fd2:	dc69      	bgt.n	80020a8 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	0fda      	lsrs	r2, r3, #31
 8001fd8:	4413      	add	r3, r2
 8001fda:	105b      	asrs	r3, r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001fe2:	4a5c      	ldr	r2, [pc, #368]	; (8002154 <_ZN7canzero4initEv+0x240>)
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001fee:	4a5a      	ldr	r2, [pc, #360]	; (8002158 <_ZN7canzero4initEv+0x244>)
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	015b      	lsls	r3, r3, #5
 8001ff8:	f043 0318 	orr.w	r3, r3, #24
 8001ffc:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	2b11      	cmp	r3, #17
 8002002:	d106      	bne.n	8002012 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002004:	2301      	movs	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 800200c:	2306      	movs	r3, #6
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e011      	b.n	8002036 <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	3301      	adds	r3, #1
 800201a:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <_ZN7canzero4initEv+0x240>)
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	3301      	adds	r3, #1
 8002028:	4a4b      	ldr	r2, [pc, #300]	; (8002158 <_ZN7canzero4initEv+0x244>)
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	015b      	lsls	r3, r3, #5
 8002030:	f043 0318 	orr.w	r3, r3, #24
 8002034:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	0fda      	lsrs	r2, r3, #31
 800203a:	4413      	add	r3, r2
 800203c:	105b      	asrs	r3, r3, #1
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e001      	b.n	8002050 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800204c:	2301      	movs	r3, #1
 800204e:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8002050:	2301      	movs	r3, #1
 8002052:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002054:	230e      	movs	r3, #14
 8002056:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	483b      	ldr	r0, [pc, #236]	; (800214c <_ZN7canzero4initEv+0x238>)
 800205e:	f009 f92d 	bl	800b2bc <HAL_CAN_ConfigFilter>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8002072:	f007 f9c5 	bl	8009400 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	0fda      	lsrs	r2, r3, #31
 800207a:	4413      	add	r3, r2
 800207c:	105b      	asrs	r3, r3, #1
 800207e:	330e      	adds	r3, #14
 8002080:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002082:	463b      	mov	r3, r7
 8002084:	4619      	mov	r1, r3
 8002086:	4832      	ldr	r0, [pc, #200]	; (8002150 <_ZN7canzero4initEv+0x23c>)
 8002088:	f009 f918 	bl	800b2bc <HAL_CAN_ConfigFilter>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 800209c:	f007 f9b0 	bl	8009400 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	3302      	adds	r3, #2
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a6:	e792      	b.n	8001fce <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 80020a8:	4828      	ldr	r0, [pc, #160]	; (800214c <_ZN7canzero4initEv+0x238>)
 80020aa:	f009 f9e7 	bl	800b47c <HAL_CAN_Start>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <_ZN7canzero4initEv+0x1ac>
 80020b4:	4826      	ldr	r0, [pc, #152]	; (8002150 <_ZN7canzero4initEv+0x23c>)
 80020b6:	f009 f9e1 	bl	800b47c <HAL_CAN_Start>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <_ZN7canzero4initEv+0x1b0>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <_ZN7canzero4initEv+0x1b2>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 80020ca:	f007 f999 	bl	8009400 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80020ce:	2102      	movs	r1, #2
 80020d0:	481e      	ldr	r0, [pc, #120]	; (800214c <_ZN7canzero4initEv+0x238>)
 80020d2:	f009 fc39 	bl	800b948 <HAL_CAN_ActivateNotification>
 80020d6:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10e      	bne.n	80020fa <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80020dc:	2110      	movs	r1, #16
 80020de:	481b      	ldr	r0, [pc, #108]	; (800214c <_ZN7canzero4initEv+0x238>)
 80020e0:	f009 fc32 	bl	800b948 <HAL_CAN_ActivateNotification>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80020ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ee:	4817      	ldr	r0, [pc, #92]	; (800214c <_ZN7canzero4initEv+0x238>)
 80020f0:	f009 fc2a 	bl	800b948 <HAL_CAN_ActivateNotification>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <_ZN7canzero4initEv+0x1ea>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <_ZN7canzero4initEv+0x1ec>
 80020fe:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8002104:	f007 f97c 	bl	8009400 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002108:	2102      	movs	r1, #2
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <_ZN7canzero4initEv+0x23c>)
 800210c:	f009 fc1c 	bl	800b948 <HAL_CAN_ActivateNotification>
 8002110:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10e      	bne.n	8002134 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8002116:	2110      	movs	r1, #16
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <_ZN7canzero4initEv+0x23c>)
 800211a:	f009 fc15 	bl	800b948 <HAL_CAN_ActivateNotification>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <_ZN7canzero4initEv+0x23c>)
 800212a:	f009 fc0d 	bl	800b948 <HAL_CAN_ActivateNotification>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <_ZN7canzero4initEv+0x224>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <_ZN7canzero4initEv+0x226>
 8002138:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 800213e:	f007 f95f 	bl	8009400 <Error_Handler>
	}
}
 8002142:	bf00      	nop
 8002144:	3730      	adds	r7, #48	; 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000df0 	.word	0x20000df0
 8002150:	20000e18 	.word	0x20000e18
 8002154:	08018880 	.word	0x08018880
 8002158:	08018838 	.word	0x08018838

0800215c <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f04f 31ff 	mov.w	r1, #4294967295
 800216e:	4618      	mov	r0, r3
 8002170:	f00e ffcb 	bl	801110a <osMutexAcquire>
	nodeStatus = new_status;
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <_ZN7canzero9setStatusE9cz_status+0x30>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f00f f80e 	bl	80111a0 <osMutexRelease>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200007c4 	.word	0x200007c4
 8002190:	200007c8 	.word	0x200007c8

08002194 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <_ZN7canzero9getStatusEv+0x30>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 31ff 	mov.w	r1, #4294967295
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00e ffb1 	bl	801110a <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_ZN7canzero9getStatusEv+0x34>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <_ZN7canzero9getStatusEv+0x30>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00e fff4 	bl	80111a0 <osMutexRelease>
	return returnValue;
 80021b8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200007c4 	.word	0x200007c4
 80021c8:	200007c8 	.word	0x200007c8

080021cc <_Z41__static_initialization_and_destruction_0ii>:
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10a      	bne.n	80021f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d105      	bne.n	80021f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80021e8:	f00e ff09 	bl	8010ffe <osMutexNew>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80021f0:	6013      	str	r3, [r2, #0]
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	080188c8 	.word	0x080188c8
 8002200:	200007c4 	.word	0x200007c4

08002204 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
 8002208:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff ffdd 	bl	80021cc <_Z41__static_initialization_and_destruction_0ii>
 8002212:	bd80      	pop	{r7, pc}

08002214 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
	canzero::init();
 800221c:	f7ff fe7a 	bl	8001f14 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2320      	movs	r3, #32
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002234:	4939      	ldr	r1, [pc, #228]	; (800231c <canzero_start+0x108>)
 8002236:	483a      	ldr	r0, [pc, #232]	; (8002320 <canzero_start+0x10c>)
 8002238:	f011 f82b 	bl	8013292 <xTaskCreate>
 800223c:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityAboveNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d006      	beq.n	8002252 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002244:	f012 fe16 	bl	8014e74 <vPortEnterCritical>
 8002248:	4836      	ldr	r0, [pc, #216]	; (8002324 <canzero_start+0x110>)
 800224a:	f00e fd43 	bl	8010cd4 <printf_>
 800224e:	f012 fe41 	bl	8014ed4 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2320      	movs	r3, #32
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002266:	4930      	ldr	r1, [pc, #192]	; (8002328 <canzero_start+0x114>)
 8002268:	4830      	ldr	r0, [pc, #192]	; (800232c <canzero_start+0x118>)
 800226a:	f011 f812 	bl	8013292 <xTaskCreate>
 800226e:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityAboveNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	2b01      	cmp	r3, #1
 8002274:	d006      	beq.n	8002284 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8002276:	f012 fdfd 	bl	8014e74 <vPortEnterCritical>
 800227a:	482d      	ldr	r0, [pc, #180]	; (8002330 <canzero_start+0x11c>)
 800227c:	f00e fd2a 	bl	8010cd4 <printf_>
 8002280:	f012 fe28 	bl	8014ed4 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	2319      	movs	r3, #25
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002298:	4926      	ldr	r1, [pc, #152]	; (8002334 <canzero_start+0x120>)
 800229a:	4827      	ldr	r0, [pc, #156]	; (8002338 <canzero_start+0x124>)
 800229c:	f010 fff9 	bl	8013292 <xTaskCreate>
 80022a0:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal1, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d006      	beq.n	80022b6 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80022a8:	f012 fde4 	bl	8014e74 <vPortEnterCritical>
 80022ac:	4823      	ldr	r0, [pc, #140]	; (800233c <canzero_start+0x128>)
 80022ae:	f00e fd11 	bl	8010cd4 <printf_>
 80022b2:	f012 fe0f 	bl	8014ed4 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	2318      	movs	r3, #24
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ca:	491d      	ldr	r1, [pc, #116]	; (8002340 <canzero_start+0x12c>)
 80022cc:	481d      	ldr	r0, [pc, #116]	; (8002344 <canzero_start+0x130>)
 80022ce:	f010 ffe0 	bl	8013292 <xTaskCreate>
 80022d2:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d006      	beq.n	80022e8 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 80022da:	f012 fdcb 	bl	8014e74 <vPortEnterCritical>
 80022de:	481a      	ldr	r0, [pc, #104]	; (8002348 <canzero_start+0x134>)
 80022e0:	f00e fcf8 	bl	8010cd4 <printf_>
 80022e4:	f012 fdf6 	bl	8014ed4 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	2328      	movs	r3, #40	; 0x28
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fc:	4913      	ldr	r1, [pc, #76]	; (800234c <canzero_start+0x138>)
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <canzero_start+0x13c>)
 8002300:	f010 ffc7 	bl	8013292 <xTaskCreate>
 8002304:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <canzero_start+0xfc>
		Error_Handler();
 800230c:	f007 f878 	bl	8009400 <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f00e fe58 	bl	8010fc8 <osDelay>
 8002318:	e7fa      	b.n	8002310 <canzero_start+0xfc>
 800231a:	bf00      	nop
 800231c:	0801869c 	.word	0x0801869c
 8002320:	08001d95 	.word	0x08001d95
 8002324:	080186a4 	.word	0x080186a4
 8002328:	080186c8 	.word	0x080186c8
 800232c:	08001ac1 	.word	0x08001ac1
 8002330:	080186d4 	.word	0x080186d4
 8002334:	080186fc 	.word	0x080186fc
 8002338:	0800137d 	.word	0x0800137d
 800233c:	08018708 	.word	0x08018708
 8002340:	08018738 	.word	0x08018738
 8002344:	08001315 	.word	0x08001315
 8002348:	08018744 	.word	0x08018744
 800234c:	08018774 	.word	0x08018774
 8002350:	0800129d 	.word	0x0800129d

08002354 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	ed87 0a01 	vstr	s0, [r7, #4]
 800238e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002392:	f013 f8bd 	bl	8015510 <roundf>
 8002396:	eef0 7a40 	vmov.f32	s15, s0
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80023a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023a8:	b0a2      	sub	sp, #136	; 0x88
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80023b0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80023b4:	4619      	mov	r1, r3
 80023b6:	4613      	mov	r3, r2
 80023b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023bc:	460b      	mov	r3, r1
 80023be:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80023d4:	7113      	strb	r3, [r2, #4]
 80023d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023da:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023de:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 80023e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ec:	3301      	adds	r3, #1
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	441a      	add	r2, r3
 80023f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023f8:	3302      	adds	r3, #2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	441a      	add	r2, r3
 8002400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002404:	3303      	adds	r3, #3
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	4413      	add	r3, r2
 800240c:	2200      	movs	r2, #0
 800240e:	461c      	mov	r4, r3
 8002410:	4615      	mov	r5, r2
 8002412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002416:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800241a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800241e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002426:	3304      	adds	r3, #4
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2200      	movs	r2, #0
 800242e:	673b      	str	r3, [r7, #112]	; 0x70
 8002430:	677a      	str	r2, [r7, #116]	; 0x74
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800243c:	0019      	movs	r1, r3
 800243e:	2000      	movs	r0, #0
 8002440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002444:	3305      	adds	r3, #5
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2200      	movs	r2, #0
 800244c:	66bb      	str	r3, [r7, #104]	; 0x68
 800244e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800245a:	0233      	lsls	r3, r6, #8
 800245c:	2200      	movs	r2, #0
 800245e:	eb10 0802 	adds.w	r8, r0, r2
 8002462:	eb41 0903 	adc.w	r9, r1, r3
 8002466:	eb14 0308 	adds.w	r3, r4, r8
 800246a:	663b      	str	r3, [r7, #96]	; 0x60
 800246c:	eb45 0309 	adc.w	r3, r5, r9
 8002470:	667b      	str	r3, [r7, #100]	; 0x64
 8002472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002476:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800247a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 800247e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002482:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248a:	3306      	adds	r3, #6
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2200      	movs	r2, #0
 8002492:	65bb      	str	r3, [r7, #88]	; 0x58
 8002494:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	0419      	lsls	r1, r3, #16
 80024a2:	2000      	movs	r0, #0
 80024a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a8:	3307      	adds	r3, #7
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	653b      	str	r3, [r7, #80]	; 0x50
 80024b2:	657a      	str	r2, [r7, #84]	; 0x54
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80024be:	0633      	lsls	r3, r6, #24
 80024c0:	2200      	movs	r2, #0
 80024c2:	eb10 0a02 	adds.w	sl, r0, r2
 80024c6:	eb41 0b03 	adc.w	fp, r1, r3
 80024ca:	eb14 030a 	adds.w	r3, r4, sl
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80024d0:	eb45 030b 	adc.w	r3, r5, fp
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80024de:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80024e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024e6:	3307      	adds	r3, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f0:	3306      	adds	r3, #6
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	441a      	add	r2, r3
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024fc:	3305      	adds	r3, #5
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	441a      	add	r2, r3
 8002504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002508:	3304      	adds	r3, #4
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	4413      	add	r3, r2
 8002510:	2200      	movs	r2, #0
 8002512:	643b      	str	r3, [r7, #64]	; 0x40
 8002514:	647a      	str	r2, [r7, #68]	; 0x44
 8002516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800251a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800251e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002526:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800252a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800252e:	3303      	adds	r3, #3
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2200      	movs	r2, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
 8002538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	0019      	movs	r1, r3
 8002546:	2000      	movs	r0, #0
 8002548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800254c:	3302      	adds	r3, #2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2200      	movs	r2, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
 8002556:	637a      	str	r2, [r7, #52]	; 0x34
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002562:	0233      	lsls	r3, r6, #8
 8002564:	2200      	movs	r2, #0
 8002566:	1886      	adds	r6, r0, r2
 8002568:	62be      	str	r6, [r7, #40]	; 0x28
 800256a:	eb41 0303 	adc.w	r3, r1, r3
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002570:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002574:	460b      	mov	r3, r1
 8002576:	18e3      	adds	r3, r4, r3
 8002578:	623b      	str	r3, [r7, #32]
 800257a:	4613      	mov	r3, r2
 800257c:	eb45 0303 	adc.w	r3, r5, r3
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002586:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800258a:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 800258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002592:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800259a:	3301      	adds	r3, #1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	61fa      	str	r2, [r7, #28]
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	0419      	lsls	r1, r3, #16
 80025b2:	2000      	movs	r0, #0
 80025b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	617a      	str	r2, [r7, #20]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	693e      	ldr	r6, [r7, #16]
 80025cc:	0633      	lsls	r3, r6, #24
 80025ce:	2200      	movs	r2, #0
 80025d0:	1886      	adds	r6, r0, r2
 80025d2:	60be      	str	r6, [r7, #8]
 80025d4:	eb41 0303 	adc.w	r3, r1, r3
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025de:	460b      	mov	r3, r1
 80025e0:	18e3      	adds	r3, r4, r3
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025f4:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 80025f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fc:	4618      	mov	r0, r3
 80025fe:	3788      	adds	r7, #136	; 0x88
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002606:	4770      	bx	lr

08002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA, 0x61A };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002608:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800260c:	b087      	sub	sp, #28
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261e:	d302      	bcc.n	8002626 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002620:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002624:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	8af9      	ldrh	r1, [r7, #22]
 8002632:	2000      	movs	r0, #0
 8002634:	468a      	mov	sl, r1
 8002636:	4683      	mov	fp, r0
 8002638:	f3ca 040b 	ubfx	r4, sl, #0, #12
 800263c:	2500      	movs	r5, #0
 800263e:	ea42 0804 	orr.w	r8, r2, r4
 8002642:	ea43 0905 	orr.w	r9, r3, r5
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002656:	4770      	bx	lr

08002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	b293      	uxth	r3, r2
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	81fb      	strh	r3, [r7, #14]
                return value;
 8002670:	89fb      	ldrh	r3, [r7, #14]
            }
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_ZN3can7signals16PDU_SDO_RespCode3setERyS2_Rhh>:
        class PDU_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x59A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800267e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2200      	movs	r2, #0
 800269c:	4698      	mov	r8, r3
 800269e:	4691      	mov	r9, r2
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80026ac:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80026b0:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80026b4:	b294      	uxth	r4, r2
 80026b6:	2500      	movs	r5, #0
 80026b8:	ea40 0a04 	orr.w	sl, r0, r4
 80026bc:	ea41 0b05 	orr.w	fp, r1, r5
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026d0:	4770      	bx	lr

080026d2 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2816            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80026d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2816);
 80026e2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff ff8c 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2200      	movs	r2, #0
 80026fe:	4698      	mov	r8, r3
 8002700:	4691      	mov	r9, r2
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800270e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002712:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002716:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800271a:	2500      	movs	r5, #0
 800271c:	ea40 0a04 	orr.w	sl, r0, r4
 8002720:	ea41 0b05 	orr.w	fp, r1, r5
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	701a      	strb	r2, [r3, #0]
            }
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800273a <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2816) {
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ff86 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800274c:	4603      	mov	r3, r0
 800274e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d000      	beq.n	8002760 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_+0x26>
                    while(1);
 800275e:	e7fe      	b.n	800275e <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	0c02      	lsrs	r2, r0, #16
 8002770:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002774:	0c0b      	lsrs	r3, r1, #16
 8002776:	4613      	mov	r3, r2
 8002778:	73fb      	strb	r3, [r7, #15]
                return value;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
            }
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_ZN3can7signals18PDU_OD_LedCommands3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2562            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	6178      	str	r0, [r7, #20]
 800278e:	6139      	str	r1, [r7, #16]
 8002790:	60fa      	str	r2, [r7, #12]
 8002792:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2562);
 8002794:	f640 2302 	movw	r3, #2562	; 0xa02
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	6939      	ldr	r1, [r7, #16]
 800279c:	6978      	ldr	r0, [r7, #20]
 800279e:	f7ff ff33 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	8bf9      	ldrh	r1, [r7, #30]
 80027ae:	2000      	movs	r0, #0
 80027b0:	4688      	mov	r8, r1
 80027b2:	4681      	mov	r9, r0
 80027b4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80027b8:	6079      	str	r1, [r7, #4]
 80027ba:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80027be:	6039      	str	r1, [r7, #0]
 80027c0:	683c      	ldr	r4, [r7, #0]
 80027c2:	2500      	movs	r5, #0
 80027c4:	ea42 0a04 	orr.w	sl, r2, r4
 80027c8:	ea43 0b05 	orr.w	fp, r3, r5
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2204      	movs	r2, #4
 80027d6:	701a      	strb	r2, [r3, #0]
            }
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027e2 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2562) {
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ff32 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	f640 2302 	movw	r3, #2562	; 0xa02
 80027fc:	429a      	cmp	r2, r3
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d000      	beq.n	800280c <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_+0x2a>
                    while(1);
 800280a:	e7fe      	b.n	800280a <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	0c02      	lsrs	r2, r0, #16
 800281c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002820:	0c0b      	lsrs	r3, r1, #16
 8002822:	4613      	mov	r3, r2
 8002824:	81fb      	strh	r3, [r7, #14]
                return value;
 8002826:	89fb      	ldrh	r3, [r7, #14]
            }
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZN3can7signals23PDU_OD_projectXXEnabled3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2560            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2560);
 8002840:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fedd 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2200      	movs	r2, #0
 800285c:	4698      	mov	r8, r3
 800285e:	4691      	mov	r9, r2
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800286c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002870:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002874:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002878:	2500      	movs	r5, #0
 800287a:	ea40 0a04 	orr.w	sl, r0, r4
 800287e:	ea41 0b05 	orr.w	fp, r1, r5
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2203      	movs	r2, #3
 800288c:	701a      	strb	r2, [r3, #0]
            }
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002898 <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2560) {
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fed7 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d000      	beq.n	80028be <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_+0x26>
                    while(1);
 80028bc:	e7fe      	b.n	80028bc <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	0c02      	lsrs	r2, r0, #16
 80028ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028d2:	0c0b      	lsrs	r3, r1, #16
 80028d4:	4613      	mov	r3, r2
 80028d6:	73fb      	strb	r3, [r7, #15]
                return value;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_ZN3can7signals22PDU_OD_watchdogTimeout3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2306            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80028e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6178      	str	r0, [r7, #20]
 80028ec:	6139      	str	r1, [r7, #16]
 80028ee:	60fa      	str	r2, [r7, #12]
 80028f0:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2306);
 80028f2:	f640 1302 	movw	r3, #2306	; 0x902
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	6939      	ldr	r1, [r7, #16]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff fe84 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	8bf9      	ldrh	r1, [r7, #30]
 800290c:	2000      	movs	r0, #0
 800290e:	4688      	mov	r8, r1
 8002910:	4681      	mov	r9, r0
 8002912:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002916:	6079      	str	r1, [r7, #4]
 8002918:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	683c      	ldr	r4, [r7, #0]
 8002920:	2500      	movs	r5, #0
 8002922:	ea42 0a04 	orr.w	sl, r2, r4
 8002926:	ea43 0b05 	orr.w	fp, r3, r5
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2204      	movs	r2, #4
 8002934:	701a      	strb	r2, [r3, #0]
            }
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002940 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2306) {
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fe83 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	f640 1302 	movw	r3, #2306	; 0x902
 800295a:	429a      	cmp	r2, r3
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d000      	beq.n	800296a <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_+0x2a>
                    while(1);
 8002968:	e7fe      	b.n	8002968 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800297e:	0c0b      	lsrs	r3, r1, #16
 8002980:	4613      	mov	r3, r2
 8002982:	81fb      	strh	r3, [r7, #14]
                return value;
 8002984:	89fb      	ldrh	r3, [r7, #14]
            }
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <_ZN3can7signals25PDU_OD_statusSendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2305            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800298e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6178      	str	r0, [r7, #20]
 8002998:	6139      	str	r1, [r7, #16]
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2305);
 800299e:	f640 1301 	movw	r3, #2305	; 0x901
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6939      	ldr	r1, [r7, #16]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff fe2e 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80029ac:	897b      	ldrh	r3, [r7, #10]
 80029ae:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	8bf9      	ldrh	r1, [r7, #30]
 80029b8:	2000      	movs	r0, #0
 80029ba:	4688      	mov	r8, r1
 80029bc:	4681      	mov	r9, r0
 80029be:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80029c2:	6079      	str	r1, [r7, #4]
 80029c4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	683c      	ldr	r4, [r7, #0]
 80029cc:	2500      	movs	r5, #0
 80029ce:	ea42 0a04 	orr.w	sl, r2, r4
 80029d2:	ea43 0b05 	orr.w	fp, r3, r5
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2204      	movs	r2, #4
 80029e0:	701a      	strb	r2, [r3, #0]
            }
 80029e2:	bf00      	nop
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029ec <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2305) {
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fe2d 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	f640 1301 	movw	r3, #2305	; 0x901
 8002a06:	429a      	cmp	r2, r3
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d000      	beq.n	8002a16 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_+0x2a>
                    while(1);
 8002a14:	e7fe      	b.n	8002a14 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	0c02      	lsrs	r2, r0, #16
 8002a26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a2a:	0c0b      	lsrs	r3, r1, #16
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	81fb      	strh	r3, [r7, #14]
                return value;
 8002a30:	89fb      	ldrh	r3, [r7, #14]
            }
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZN3can7signals26PDU_OD_currentReadInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2304            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002a3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6178      	str	r0, [r7, #20]
 8002a44:	6139      	str	r1, [r7, #16]
 8002a46:	60fa      	str	r2, [r7, #12]
 8002a48:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2304);
 8002a4a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6939      	ldr	r1, [r7, #16]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff fdd8 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	8bf9      	ldrh	r1, [r7, #30]
 8002a64:	2000      	movs	r0, #0
 8002a66:	4688      	mov	r8, r1
 8002a68:	4681      	mov	r9, r0
 8002a6a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002a6e:	6079      	str	r1, [r7, #4]
 8002a70:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	683c      	ldr	r4, [r7, #0]
 8002a78:	2500      	movs	r5, #0
 8002a7a:	ea42 0a04 	orr.w	sl, r2, r4
 8002a7e:	ea43 0b05 	orr.w	fp, r3, r5
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
            }
 8002a8e:	bf00      	nop
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a98 <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2304) {
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fdd7 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d000      	beq.n	8002abe <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_+0x26>
                    while(1);
 8002abc:	e7fe      	b.n	8002abc <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	0c02      	lsrs	r2, r0, #16
 8002ace:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ad2:	0c0b      	lsrs	r3, r1, #16
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	81fb      	strh	r3, [r7, #14]
                return value;
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
            }
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6178      	str	r0, [r7, #20]
 8002aee:	6139      	str	r1, [r7, #16]
 8002af0:	60fa      	str	r2, [r7, #12]
 8002af2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002b8c <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xa8>
 8002afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	dd01      	ble.n	8002b0c <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0x28>
                    value = max;
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xac>)
 8002b0a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	d502      	bpl.n	8002b20 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0x3c>
                    value = min;
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2128);
 8002b20:	f44f 6305 	mov.w	r3, #2128	; 0x850
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	6939      	ldr	r1, [r7, #16]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff fd6d 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8002b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b32:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002b94 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xb0>
 8002b36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3e:	f7ff fc21 	bl	8002384 <_ZSt5roundf>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4a:	ee17 3a90 	vmov	r3, s15
 8002b4e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	8bf9      	ldrh	r1, [r7, #30]
 8002b58:	2000      	movs	r0, #0
 8002b5a:	4688      	mov	r8, r1
 8002b5c:	4681      	mov	r9, r0
 8002b5e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002b62:	6079      	str	r1, [r7, #4]
 8002b64:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	683c      	ldr	r4, [r7, #0]
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	ea42 0a04 	orr.w	sl, r2, r4
 8002b72:	ea43 0b05 	orr.w	fp, r3, r5
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
            }
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8c:	4423d666 	.word	0x4423d666
 8002b90:	4423d666 	.word	0x4423d666
 8002b94:	3c23d70a 	.word	0x3c23d70a

08002b98 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2128) {
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fd57 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d000      	beq.n	8002bbe <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x26>
                    while(1);
 8002bbc:	e7fe      	b.n	8002bbc <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	0c02      	lsrs	r2, r0, #16
 8002bce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bd2:	0c0b      	lsrs	r3, r1, #16
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8002bd8:	89fb      	ldrh	r3, [r7, #14]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002bf4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x5c>
 8002be6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002bea:	eeb0 0a67 	vmov.f32	s0, s15
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	3c23d70a 	.word	0x3c23d70a

08002bf8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(6553.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6178      	str	r0, [r7, #20]
 8002c02:	6139      	str	r1, [r7, #16]
 8002c04:	60fa      	str	r2, [r7, #12]
 8002c06:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ca0 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xa8>
 8002c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	dd01      	ble.n	8002c20 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0x28>
                    value = max;
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xac>)
 8002c1e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	d502      	bpl.n	8002c34 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0x3c>
                    value = min;
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2051);
 8002c34:	f640 0303 	movw	r3, #2051	; 0x803
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	6939      	ldr	r1, [r7, #16]
 8002c3c:	6978      	ldr	r0, [r7, #20]
 8002c3e:	f7ff fce3 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.1f)));
 8002c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c46:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002ca8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xb0>
 8002c4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c52:	f7ff fb97 	bl	8002384 <_ZSt5roundf>
 8002c56:	eef0 7a40 	vmov.f32	s15, s0
 8002c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5e:	ee17 3a90 	vmov	r3, s15
 8002c62:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	8bf9      	ldrh	r1, [r7, #30]
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	4688      	mov	r8, r1
 8002c70:	4681      	mov	r9, r0
 8002c72:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002c76:	6079      	str	r1, [r7, #4]
 8002c78:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	683c      	ldr	r4, [r7, #0]
 8002c80:	2500      	movs	r5, #0
 8002c82:	ea42 0a04 	orr.w	sl, r2, r4
 8002c86:	ea43 0b05 	orr.w	fp, r3, r5
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
            }
 8002c96:	bf00      	nop
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca0:	45cccc00 	.word	0x45cccc00
 8002ca4:	45cccc00 	.word	0x45cccc00
 8002ca8:	3dcccccd 	.word	0x3dcccccd

08002cac <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2051) {
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fccd 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f640 0303 	movw	r3, #2051	; 0x803
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	bf14      	ite	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	2300      	moveq	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d000      	beq.n	8002cd6 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x2a>
                    while(1);
 8002cd4:	e7fe      	b.n	8002cd4 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	0c02      	lsrs	r2, r0, #16
 8002ce6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cea:	0c0b      	lsrs	r3, r1, #16
 8002cec:	4613      	mov	r3, r2
 8002cee:	81fb      	strh	r3, [r7, #14]
                return value * (0.1f);
 8002cf0:	89fb      	ldrh	r3, [r7, #14]
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfa:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002d0c <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x60>
 8002cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002d02:	eeb0 0a67 	vmov.f32	s0, s15
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	3dcccccd 	.word	0x3dcccccd

08002d10 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(6553.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6178      	str	r0, [r7, #20]
 8002d1a:	6139      	str	r1, [r7, #16]
 8002d1c:	60fa      	str	r2, [r7, #12]
 8002d1e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d26:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002db8 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xa8>
 8002d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d32:	dd01      	ble.n	8002d38 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0x28>
                    value = max;
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xac>)
 8002d36:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002d38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	d502      	bpl.n	8002d4c <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0x3c>
                    value = min;
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2050);
 8002d4c:	f640 0302 	movw	r3, #2050	; 0x802
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f7ff fc57 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.1f)));
 8002d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d5e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002dc0 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xb0>
 8002d62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d66:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6a:	f7ff fb0b 	bl	8002384 <_ZSt5roundf>
 8002d6e:	eef0 7a40 	vmov.f32	s15, s0
 8002d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d76:	ee17 3a90 	vmov	r3, s15
 8002d7a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	8bf9      	ldrh	r1, [r7, #30]
 8002d84:	2000      	movs	r0, #0
 8002d86:	4688      	mov	r8, r1
 8002d88:	4681      	mov	r9, r0
 8002d8a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d8e:	6079      	str	r1, [r7, #4]
 8002d90:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	683c      	ldr	r4, [r7, #0]
 8002d98:	2500      	movs	r5, #0
 8002d9a:	ea42 0a04 	orr.w	sl, r2, r4
 8002d9e:	ea43 0b05 	orr.w	fp, r3, r5
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2204      	movs	r2, #4
 8002dac:	701a      	strb	r2, [r3, #0]
            }
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db8:	45cccc00 	.word	0x45cccc00
 8002dbc:	45cccc00 	.word	0x45cccc00
 8002dc0:	3dcccccd 	.word	0x3dcccccd

08002dc4 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2050) {
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fc41 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f640 0302 	movw	r3, #2050	; 0x802
 8002dde:	429a      	cmp	r2, r3
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d000      	beq.n	8002dee <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x2a>
                    while(1);
 8002dec:	e7fe      	b.n	8002dec <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	0c02      	lsrs	r2, r0, #16
 8002dfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e02:	0c0b      	lsrs	r3, r1, #16
 8002e04:	4613      	mov	r3, r2
 8002e06:	81fb      	strh	r3, [r7, #14]
                return value * (0.1f);
 8002e08:	89fb      	ldrh	r3, [r7, #14]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e12:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002e24 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x60>
 8002e16:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	3dcccccd 	.word	0x3dcccccd

08002e28 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6178      	str	r0, [r7, #20]
 8002e32:	6139      	str	r1, [r7, #16]
 8002e34:	60fa      	str	r2, [r7, #12]
 8002e36:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ed0 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xa8>
 8002e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	dd01      	ble.n	8002e50 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0x28>
                    value = max;
 8002e4c:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xac>)
 8002e4e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	d502      	bpl.n	8002e64 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0x3c>
                    value = min;
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2049);
 8002e64:	f640 0301 	movw	r3, #2049	; 0x801
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	6939      	ldr	r1, [r7, #16]
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f7ff fbcb 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8002e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e76:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002ed8 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xb0>
 8002e7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	f7ff fa7f 	bl	8002384 <_ZSt5roundf>
 8002e86:	eef0 7a40 	vmov.f32	s15, s0
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	ee17 3a90 	vmov	r3, s15
 8002e92:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	8bf9      	ldrh	r1, [r7, #30]
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	4688      	mov	r8, r1
 8002ea0:	4681      	mov	r9, r0
 8002ea2:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002ea6:	6079      	str	r1, [r7, #4]
 8002ea8:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	683c      	ldr	r4, [r7, #0]
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	ea42 0a04 	orr.w	sl, r2, r4
 8002eb6:	ea43 0b05 	orr.w	fp, r3, r5
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	701a      	strb	r2, [r3, #0]
            }
 8002ec6:	bf00      	nop
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed0:	4423d666 	.word	0x4423d666
 8002ed4:	4423d666 	.word	0x4423d666
 8002ed8:	3c23d70a 	.word	0x3c23d70a

08002edc <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2049) {
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fbb5 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f640 0301 	movw	r3, #2049	; 0x801
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d000      	beq.n	8002f06 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x2a>
                    while(1);
 8002f04:	e7fe      	b.n	8002f04 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	0c02      	lsrs	r2, r0, #16
 8002f16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f1a:	0c0b      	lsrs	r3, r1, #16
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002f3c <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x60>
 8002f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002f32:	eeb0 0a67 	vmov.f32	s0, s15
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	3c23d70a 	.word	0x3c23d70a

08002f40 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6178      	str	r0, [r7, #20]
 8002f4a:	6139      	str	r1, [r7, #16]
 8002f4c:	60fa      	str	r2, [r7, #12]
 8002f4e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f56:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002fe8 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xa8>
 8002f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	dd01      	ble.n	8002f68 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0x28>
                    value = max;
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xac>)
 8002f66:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002f68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f74:	d502      	bpl.n	8002f7c <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0x3c>
                    value = min;
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2048);
 8002f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	6939      	ldr	r1, [r7, #16]
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7ff fb3f 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8002f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f8e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002ff0 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xb0>
 8002f92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f96:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9a:	f7ff f9f3 	bl	8002384 <_ZSt5roundf>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa6:	ee17 3a90 	vmov	r3, s15
 8002faa:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	8bf9      	ldrh	r1, [r7, #30]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	4688      	mov	r8, r1
 8002fb8:	4681      	mov	r9, r0
 8002fba:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002fbe:	6079      	str	r1, [r7, #4]
 8002fc0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002fc4:	6039      	str	r1, [r7, #0]
 8002fc6:	683c      	ldr	r4, [r7, #0]
 8002fc8:	2500      	movs	r5, #0
 8002fca:	ea42 0a04 	orr.w	sl, r2, r4
 8002fce:	ea43 0b05 	orr.w	fp, r3, r5
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	701a      	strb	r2, [r3, #0]
            }
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe8:	4423d666 	.word	0x4423d666
 8002fec:	4423d666 	.word	0x4423d666
 8002ff0:	3c23d70a 	.word	0x3c23d70a

08002ff4 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2048) {
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff fb29 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003006:	4603      	mov	r3, r0
 8003008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d000      	beq.n	800301a <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x26>
                    while(1);
 8003018:	e7fe      	b.n	8003018 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	0c02      	lsrs	r2, r0, #16
 800302a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800302e:	0c0b      	lsrs	r3, r1, #16
 8003030:	4613      	mov	r3, r2
 8003032:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8003034:	89fb      	ldrh	r3, [r7, #14]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003050 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x5c>
 8003042:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003046:	eeb0 0a67 	vmov.f32	s0, s15
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	3c23d70a 	.word	0x3c23d70a

08003054 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b088      	sub	sp, #32
 800305a:	af00      	add	r7, sp, #0
 800305c:	6178      	str	r0, [r7, #20]
 800305e:	6139      	str	r1, [r7, #16]
 8003060:	60fa      	str	r2, [r7, #12]
 8003062:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800306a:	d302      	bcc.n	8003072 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800306c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003070:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1129);
 8003072:	f240 4369 	movw	r3, #1129	; 0x469
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6939      	ldr	r1, [r7, #16]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff fac4 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	69f9      	ldr	r1, [r7, #28]
 800308c:	2000      	movs	r0, #0
 800308e:	468a      	mov	sl, r1
 8003090:	4683      	mov	fp, r0
 8003092:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003096:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800309a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800309e:	0424      	lsls	r4, r4, #16
 80030a0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80030a4:	ea42 0104 	orr.w	r1, r2, r4
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	432b      	orrs	r3, r5
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030b4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2205      	movs	r2, #5
 80030bc:	701a      	strb	r2, [r3, #0]
            }
 80030be:	bf00      	nop
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030c8 <_ZN3can7signals23PDU_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1128);
 80030d8:	f44f 638d 	mov.w	r3, #1128	; 0x468
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fa91 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2200      	movs	r2, #0
 80030f4:	4698      	mov	r8, r3
 80030f6:	4691      	mov	r9, r2
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003104:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003108:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800310c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003110:	2500      	movs	r5, #0
 8003112:	ea40 0a04 	orr.w	sl, r0, r4
 8003116:	ea41 0b05 	orr.w	fp, r1, r5
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	701a      	strb	r2, [r3, #0]
            }
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003130 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af00      	add	r7, sp, #0
 8003138:	6178      	str	r0, [r7, #20]
 800313a:	6139      	str	r1, [r7, #16]
 800313c:	60fa      	str	r2, [r7, #12]
 800313e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003146:	d302      	bcc.n	800314e <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003148:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800314c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1127);
 800314e:	f240 4367 	movw	r3, #1127	; 0x467
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	6939      	ldr	r1, [r7, #16]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff fa56 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	2000      	movs	r0, #0
 800316a:	468a      	mov	sl, r1
 800316c:	4683      	mov	fp, r0
 800316e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003172:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003176:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800317a:	0424      	lsls	r4, r4, #16
 800317c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003180:	ea42 0104 	orr.w	r1, r2, r4
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	432b      	orrs	r3, r5
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003190:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2205      	movs	r2, #5
 8003198:	701a      	strb	r2, [r3, #0]
            }
 800319a:	bf00      	nop
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080031a4 <_ZN3can7signals18PDU_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1126);
 80031b4:	f240 4366 	movw	r3, #1126	; 0x466
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff fa23 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2200      	movs	r2, #0
 80031d0:	4698      	mov	r8, r3
 80031d2:	4691      	mov	r9, r2
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80031e0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80031e4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80031e8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80031ec:	2500      	movs	r5, #0
 80031ee:	ea40 0a04 	orr.w	sl, r0, r4
 80031f2:	ea41 0b05 	orr.w	fp, r1, r5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	701a      	strb	r2, [r3, #0]
            }
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800320c <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b088      	sub	sp, #32
 8003212:	af00      	add	r7, sp, #0
 8003214:	6178      	str	r0, [r7, #20]
 8003216:	6139      	str	r1, [r7, #16]
 8003218:	60fa      	str	r2, [r7, #12]
 800321a:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 800321c:	897b      	ldrh	r3, [r7, #10]
 800321e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003222:	d902      	bls.n	800322a <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003228:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	2b7c      	cmp	r3, #124	; 0x7c
 800322e:	d801      	bhi.n	8003234 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003230:	237d      	movs	r3, #125	; 0x7d
 8003232:	817b      	strh	r3, [r7, #10]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1124);
 8003234:	f240 4364 	movw	r3, #1124	; 0x464
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6939      	ldr	r1, [r7, #16]
 800323c:	6978      	ldr	r0, [r7, #20]
 800323e:	f7ff f9e3 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	8bf9      	ldrh	r1, [r7, #30]
 800324e:	2000      	movs	r0, #0
 8003250:	4688      	mov	r8, r1
 8003252:	4681      	mov	r9, r0
 8003254:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003258:	6079      	str	r1, [r7, #4]
 800325a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800325e:	6039      	str	r1, [r7, #0]
 8003260:	683c      	ldr	r4, [r7, #0]
 8003262:	2500      	movs	r5, #0
 8003264:	ea42 0a04 	orr.w	sl, r2, r4
 8003268:	ea43 0b05 	orr.w	fp, r3, r5
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2204      	movs	r2, #4
 8003276:	701a      	strb	r2, [r3, #0]
            }
 8003278:	bf00      	nop
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003282 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1124) {
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff f9e2 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	f240 4364 	movw	r3, #1124	; 0x464
 800329c:	429a      	cmp	r2, r3
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d000      	beq.n	80032ac <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 80032aa:	e7fe      	b.n	80032aa <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	0c02      	lsrs	r2, r0, #16
 80032bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032c0:	0c0b      	lsrs	r3, r1, #16
 80032c2:	4613      	mov	r3, r2
 80032c4:	81fb      	strh	r3, [r7, #14]
                return value;
 80032c6:	89fb      	ldrh	r3, [r7, #14]
            }
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1123);
 80032e0:	f240 4363 	movw	r3, #1123	; 0x463
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff f98d 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2200      	movs	r2, #0
 80032fc:	4698      	mov	r8, r3
 80032fe:	4691      	mov	r9, r2
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800330c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003310:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003314:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003318:	2500      	movs	r5, #0
 800331a:	ea40 0a04 	orr.w	sl, r0, r4
 800331e:	ea41 0b05 	orr.w	fp, r1, r5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	701a      	strb	r2, [r3, #0]
            }
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003338 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1123) {
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff f987 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	f240 4363 	movw	r3, #1123	; 0x463
 8003352:	429a      	cmp	r2, r3
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d000      	beq.n	8003362 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003360:	e7fe      	b.n	8003360 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	0c02      	lsrs	r2, r0, #16
 8003372:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003376:	0c0b      	lsrs	r3, r1, #16
 8003378:	4613      	mov	r3, r2
 800337a:	73fb      	strb	r3, [r7, #15]
                return value;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b088      	sub	sp, #32
 800338e:	af00      	add	r7, sp, #0
 8003390:	6178      	str	r0, [r7, #20]
 8003392:	6139      	str	r1, [r7, #16]
 8003394:	60fa      	str	r2, [r7, #12]
 8003396:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1122);
 8003398:	f240 4362 	movw	r3, #1122	; 0x462
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	6939      	ldr	r1, [r7, #16]
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f7ff f931 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	69f9      	ldr	r1, [r7, #28]
 80033b2:	2000      	movs	r0, #0
 80033b4:	468a      	mov	sl, r1
 80033b6:	4683      	mov	fp, r0
 80033b8:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80033bc:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 80033c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033c6:	ea08 0400 	and.w	r4, r8, r0
 80033ca:	ea09 0501 	and.w	r5, r9, r1
 80033ce:	ea42 0104 	orr.w	r1, r2, r4
 80033d2:	6039      	str	r1, [r7, #0]
 80033d4:	432b      	orrs	r3, r5
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033de:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2206      	movs	r2, #6
 80033e6:	701a      	strb	r2, [r3, #0]
            }
 80033e8:	bf00      	nop
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f2:	bf00      	nop
 80033f4:	ffff0000 	.word	0xffff0000

080033f8 <_ZN3can7signals20PDU_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1121);
 8003408:	f240 4361 	movw	r3, #1121	; 0x461
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff f8f9 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2200      	movs	r2, #0
 8003424:	4698      	mov	r8, r3
 8003426:	4691      	mov	r9, r2
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003434:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003438:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800343c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003440:	2500      	movs	r5, #0
 8003442:	ea40 0a04 	orr.w	sl, r0, r4
 8003446:	ea41 0b05 	orr.w	fp, r1, r5
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2203      	movs	r2, #3
 8003454:	701a      	strb	r2, [r3, #0]
            }
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003460 <_ZN3can7signals20PDU_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1120);
 8003470:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff f8c5 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2200      	movs	r2, #0
 800348c:	4698      	mov	r8, r3
 800348e:	4691      	mov	r9, r2
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800349c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80034a0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80034a4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80034a8:	2500      	movs	r5, #0
 80034aa:	ea40 0a04 	orr.w	sl, r0, r4
 80034ae:	ea41 0b05 	orr.w	fp, r1, r5
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2203      	movs	r2, #3
 80034bc:	701a      	strb	r2, [r3, #0]
            }
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034c8 <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b088      	sub	sp, #32
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6178      	str	r0, [r7, #20]
 80034d2:	6139      	str	r1, [r7, #16]
 80034d4:	60fa      	str	r2, [r7, #12]
 80034d6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034de:	d302      	bcc.n	80034e6 <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80034e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80034e4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1113);
 80034e6:	f240 4359 	movw	r3, #1113	; 0x459
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7ff f88a 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	69f9      	ldr	r1, [r7, #28]
 8003500:	2000      	movs	r0, #0
 8003502:	468a      	mov	sl, r1
 8003504:	4683      	mov	fp, r0
 8003506:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800350a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800350e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003512:	0424      	lsls	r4, r4, #16
 8003514:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003518:	ea42 0104 	orr.w	r1, r2, r4
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	432b      	orrs	r3, r5
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003528:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2205      	movs	r2, #5
 8003530:	701a      	strb	r2, [r3, #0]
            }
 8003532:	bf00      	nop
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800353c <_ZN3can7signals23PDU_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1112);
 800354c:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff f857 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2200      	movs	r2, #0
 8003568:	4698      	mov	r8, r3
 800356a:	4691      	mov	r9, r2
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003578:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800357c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003580:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003584:	2500      	movs	r5, #0
 8003586:	ea40 0a04 	orr.w	sl, r0, r4
 800358a:	ea41 0b05 	orr.w	fp, r1, r5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	701a      	strb	r2, [r3, #0]
            }
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035a4 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80035a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6178      	str	r0, [r7, #20]
 80035ae:	6139      	str	r1, [r7, #16]
 80035b0:	60fa      	str	r2, [r7, #12]
 80035b2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ba:	d302      	bcc.n	80035c2 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80035bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80035c0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1111);
 80035c2:	f240 4357 	movw	r3, #1111	; 0x457
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff f81c 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	2000      	movs	r0, #0
 80035de:	468a      	mov	sl, r1
 80035e0:	4683      	mov	fp, r0
 80035e2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80035e6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80035ea:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80035ee:	0424      	lsls	r4, r4, #16
 80035f0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80035f4:	ea42 0104 	orr.w	r1, r2, r4
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	432b      	orrs	r3, r5
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003604:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2205      	movs	r2, #5
 800360c:	701a      	strb	r2, [r3, #0]
            }
 800360e:	bf00      	nop
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003618 <_ZN3can7signals18PDU_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1110);
 8003628:	f240 4356 	movw	r3, #1110	; 0x456
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7fe ffe9 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2200      	movs	r2, #0
 8003644:	4698      	mov	r8, r3
 8003646:	4691      	mov	r9, r2
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003654:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003658:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800365c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003660:	2500      	movs	r5, #0
 8003662:	ea40 0a04 	orr.w	sl, r0, r4
 8003666:	ea41 0b05 	orr.w	fp, r1, r5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2203      	movs	r2, #3
 8003674:	701a      	strb	r2, [r3, #0]
            }
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003680 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b088      	sub	sp, #32
 8003686:	af00      	add	r7, sp, #0
 8003688:	6178      	str	r0, [r7, #20]
 800368a:	6139      	str	r1, [r7, #16]
 800368c:	60fa      	str	r2, [r7, #12]
 800368e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003690:	897b      	ldrh	r3, [r7, #10]
 8003692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003696:	d902      	bls.n	800369e <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 800369e:	897b      	ldrh	r3, [r7, #10]
 80036a0:	2b7c      	cmp	r3, #124	; 0x7c
 80036a2:	d801      	bhi.n	80036a8 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80036a4:	237d      	movs	r3, #125	; 0x7d
 80036a6:	817b      	strh	r3, [r7, #10]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1108);
 80036a8:	f240 4354 	movw	r3, #1108	; 0x454
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6939      	ldr	r1, [r7, #16]
 80036b0:	6978      	ldr	r0, [r7, #20]
 80036b2:	f7fe ffa9 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	8bf9      	ldrh	r1, [r7, #30]
 80036c2:	2000      	movs	r0, #0
 80036c4:	4688      	mov	r8, r1
 80036c6:	4681      	mov	r9, r0
 80036c8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80036cc:	6079      	str	r1, [r7, #4]
 80036ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80036d2:	6039      	str	r1, [r7, #0]
 80036d4:	683c      	ldr	r4, [r7, #0]
 80036d6:	2500      	movs	r5, #0
 80036d8:	ea42 0a04 	orr.w	sl, r2, r4
 80036dc:	ea43 0b05 	orr.w	fp, r3, r5
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2204      	movs	r2, #4
 80036ea:	701a      	strb	r2, [r3, #0]
            }
 80036ec:	bf00      	nop
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036f6 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1108) {
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe ffa8 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	f240 4354 	movw	r3, #1108	; 0x454
 8003710:	429a      	cmp	r2, r3
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d000      	beq.n	8003720 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800371e:	e7fe      	b.n	800371e <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	0c02      	lsrs	r2, r0, #16
 8003730:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003734:	0c0b      	lsrs	r3, r1, #16
 8003736:	4613      	mov	r3, r2
 8003738:	81fb      	strh	r3, [r7, #14]
                return value;
 800373a:	89fb      	ldrh	r3, [r7, #14]
            }
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1107);
 8003754:	f240 4353 	movw	r3, #1107	; 0x453
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7fe ff53 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2200      	movs	r2, #0
 8003770:	4698      	mov	r8, r3
 8003772:	4691      	mov	r9, r2
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003780:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003784:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003788:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800378c:	2500      	movs	r5, #0
 800378e:	ea40 0a04 	orr.w	sl, r0, r4
 8003792:	ea41 0b05 	orr.w	fp, r1, r5
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	701a      	strb	r2, [r3, #0]
            }
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037ac <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1107) {
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fe ff4d 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	f240 4353 	movw	r3, #1107	; 0x453
 80037c6:	429a      	cmp	r2, r3
 80037c8:	bf14      	ite	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	2300      	moveq	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d000      	beq.n	80037d6 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80037d4:	e7fe      	b.n	80037d4 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	0c02      	lsrs	r2, r0, #16
 80037e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037ea:	0c0b      	lsrs	r3, r1, #16
 80037ec:	4613      	mov	r3, r2
 80037ee:	73fb      	strb	r3, [r7, #15]
                return value;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
            }
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b088      	sub	sp, #32
 8003802:	af00      	add	r7, sp, #0
 8003804:	6178      	str	r0, [r7, #20]
 8003806:	6139      	str	r1, [r7, #16]
 8003808:	60fa      	str	r2, [r7, #12]
 800380a:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1106);
 800380c:	f240 4352 	movw	r3, #1106	; 0x452
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	6978      	ldr	r0, [r7, #20]
 8003816:	f7fe fef7 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	69f9      	ldr	r1, [r7, #28]
 8003826:	2000      	movs	r0, #0
 8003828:	468a      	mov	sl, r1
 800382a:	4683      	mov	fp, r0
 800382c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003830:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003836:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800383a:	ea08 0400 	and.w	r4, r8, r0
 800383e:	ea09 0501 	and.w	r5, r9, r1
 8003842:	ea42 0104 	orr.w	r1, r2, r4
 8003846:	6039      	str	r1, [r7, #0]
 8003848:	432b      	orrs	r3, r5
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003852:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2206      	movs	r2, #6
 800385a:	701a      	strb	r2, [r3, #0]
            }
 800385c:	bf00      	nop
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003866:	bf00      	nop
 8003868:	ffff0000 	.word	0xffff0000

0800386c <_ZN3can7signals20PDU_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1105);
 800387c:	f240 4351 	movw	r3, #1105	; 0x451
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7fe febf 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2200      	movs	r2, #0
 8003898:	4698      	mov	r8, r3
 800389a:	4691      	mov	r9, r2
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80038a8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80038ac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80038b0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80038b4:	2500      	movs	r5, #0
 80038b6:	ea40 0a04 	orr.w	sl, r0, r4
 80038ba:	ea41 0b05 	orr.w	fp, r1, r5
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2203      	movs	r2, #3
 80038c8:	701a      	strb	r2, [r3, #0]
            }
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038d4 <_ZN3can7signals20PDU_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1104);
 80038e4:	f44f 638a 	mov.w	r3, #1104	; 0x450
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7fe fe8b 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2200      	movs	r2, #0
 8003900:	4698      	mov	r8, r3
 8003902:	4691      	mov	r9, r2
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003910:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003914:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003918:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800391c:	2500      	movs	r5, #0
 800391e:	ea40 0a04 	orr.w	sl, r0, r4
 8003922:	ea41 0b05 	orr.w	fp, r1, r5
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2203      	movs	r2, #3
 8003930:	701a      	strb	r2, [r3, #0]
            }
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800393c <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800393c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003940:	b088      	sub	sp, #32
 8003942:	af00      	add	r7, sp, #0
 8003944:	6178      	str	r0, [r7, #20]
 8003946:	6139      	str	r1, [r7, #16]
 8003948:	60fa      	str	r2, [r7, #12]
 800394a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003952:	d302      	bcc.n	800395a <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8003954:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003958:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1073);
 800395a:	f240 4331 	movw	r3, #1073	; 0x431
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6939      	ldr	r1, [r7, #16]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7fe fe50 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	69f9      	ldr	r1, [r7, #28]
 8003974:	2000      	movs	r0, #0
 8003976:	468a      	mov	sl, r1
 8003978:	4683      	mov	fp, r0
 800397a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800397e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003982:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003986:	0424      	lsls	r4, r4, #16
 8003988:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800398c:	ea42 0104 	orr.w	r1, r2, r4
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	432b      	orrs	r3, r5
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	e9d7 1200 	ldrd	r1, r2, [r7]
 800399c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2205      	movs	r2, #5
 80039a4:	701a      	strb	r2, [r3, #0]
            }
 80039a6:	bf00      	nop
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039b0 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6178      	str	r0, [r7, #20]
 80039ba:	6139      	str	r1, [r7, #16]
 80039bc:	60fa      	str	r2, [r7, #12]
 80039be:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1072);
 80039c0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	6978      	ldr	r0, [r7, #20]
 80039ca:	f7fe fe1d 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	69f9      	ldr	r1, [r7, #28]
 80039da:	2000      	movs	r0, #0
 80039dc:	468a      	mov	sl, r1
 80039de:	4683      	mov	fp, r0
 80039e0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80039e4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80039e8:	480c      	ldr	r0, [pc, #48]	; (8003a1c <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm+0x6c>)
 80039ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039ee:	ea08 0400 	and.w	r4, r8, r0
 80039f2:	ea09 0501 	and.w	r5, r9, r1
 80039f6:	ea42 0104 	orr.w	r1, r2, r4
 80039fa:	6039      	str	r1, [r7, #0]
 80039fc:	432b      	orrs	r3, r5
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a06:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2206      	movs	r2, #6
 8003a0e:	701a      	strb	r2, [r3, #0]
            }
 8003a10:	bf00      	nop
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1a:	bf00      	nop
 8003a1c:	ffff0000 	.word	0xffff0000

08003a20 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003a20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003a2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	d305      	bcc.n	8003a44 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1057);
 8003a44:	f240 4321 	movw	r3, #1057	; 0x421
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7fe fddb 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003a52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a56:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	040b      	lsls	r3, r1, #16
 8003a6e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003a72:	0402      	lsls	r2, r0, #16
 8003a74:	ea48 0402 	orr.w	r4, r8, r2
 8003a78:	ea49 0503 	orr.w	r5, r9, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	701a      	strb	r2, [r3, #0]
            }
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003a92 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003a92:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003aa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d305      	bcc.n	8003ab6 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8003aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1056);
 8003ab6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7fe fda2 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003ac4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ad2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	040b      	lsls	r3, r1, #16
 8003ae0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003ae4:	0402      	lsls	r2, r0, #16
 8003ae6:	ea48 0402 	orr.w	r4, r8, r2
 8003aea:	ea49 0503 	orr.w	r5, r9, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2208      	movs	r2, #8
 8003af8:	701a      	strb	r2, [r3, #0]
            }
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003b04 <_ZN3can7signals13PDU_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1046);
 8003b14:	f240 4316 	movw	r3, #1046	; 0x416
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7fe fd73 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4698      	mov	r8, r3
 8003b32:	4691      	mov	r9, r2
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003b40:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003b44:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003b48:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	ea40 0a04 	orr.w	sl, r0, r4
 8003b52:	ea41 0b05 	orr.w	fp, r1, r5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
            }
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b6c <_ZN3can7signals12PDU_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b086      	sub	sp, #24
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1045);
 8003b7c:	f240 4315 	movw	r3, #1045	; 0x415
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7fe fd3f 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2200      	movs	r2, #0
 8003b98:	4698      	mov	r8, r3
 8003b9a:	4691      	mov	r9, r2
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ba8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003bac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003bb0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003bb4:	2500      	movs	r5, #0
 8003bb6:	ea40 0a04 	orr.w	sl, r0, r4
 8003bba:	ea41 0b05 	orr.w	fp, r1, r5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	701a      	strb	r2, [r3, #0]
            }
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003bd4 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b088      	sub	sp, #32
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6178      	str	r0, [r7, #20]
 8003bde:	6139      	str	r1, [r7, #16]
 8003be0:	60fa      	str	r2, [r7, #12]
 8003be2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bea:	d302      	bcc.n	8003bf2 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8003bec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003bf0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1044);
 8003bf2:	f240 4314 	movw	r3, #1044	; 0x414
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6939      	ldr	r1, [r7, #16]
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f7fe fd04 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	468a      	mov	sl, r1
 8003c10:	4683      	mov	fp, r0
 8003c12:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003c16:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003c1a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003c1e:	0424      	lsls	r4, r4, #16
 8003c20:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003c24:	ea42 0104 	orr.w	r1, r2, r4
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	432b      	orrs	r3, r5
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c34:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
            }
 8003c3e:	bf00      	nop
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c48 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b088      	sub	sp, #32
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6178      	str	r0, [r7, #20]
 8003c52:	6139      	str	r1, [r7, #16]
 8003c54:	60fa      	str	r2, [r7, #12]
 8003c56:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003cf0 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xa8>
 8003c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	dd01      	ble.n	8003c70 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xac>)
 8003c6e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	d502      	bpl.n	8003c84 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1043);
 8003c84:	f240 4313 	movw	r3, #1043	; 0x413
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	6939      	ldr	r1, [r7, #16]
 8003c8c:	6978      	ldr	r0, [r7, #20]
 8003c8e:	f7fe fcbb 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8003c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c96:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003cf8 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xb0>
 8003c9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca2:	f7fe fb6f 	bl	8002384 <_ZSt5roundf>
 8003ca6:	eef0 7a40 	vmov.f32	s15, s0
 8003caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cae:	ee17 3a90 	vmov	r3, s15
 8003cb2:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	8bf9      	ldrh	r1, [r7, #30]
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4688      	mov	r8, r1
 8003cc0:	4681      	mov	r9, r0
 8003cc2:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003cc6:	6079      	str	r1, [r7, #4]
 8003cc8:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	683c      	ldr	r4, [r7, #0]
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	ea42 0a04 	orr.w	sl, r2, r4
 8003cd6:	ea43 0b05 	orr.w	fp, r3, r5
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	701a      	strb	r2, [r3, #0]
            }
 8003ce6:	bf00      	nop
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf0:	428311ec 	.word	0x428311ec
 8003cf4:	428311ec 	.word	0x428311ec
 8003cf8:	3a83126f 	.word	0x3a83126f

08003cfc <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b088      	sub	sp, #32
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6178      	str	r0, [r7, #20]
 8003d06:	6139      	str	r1, [r7, #16]
 8003d08:	60fa      	str	r2, [r7, #12]
 8003d0a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d12:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003db0 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8003d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	dd01      	ble.n	8003d24 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8003d22:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d28:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d34:	d501      	bpl.n	8003d3a <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8003d38:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1042);
 8003d3a:	f240 4312 	movw	r3, #1042	; 0x412
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	6939      	ldr	r1, [r7, #16]
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7fe fc60 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8003d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d4c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d54:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003dbc <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8003d58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d60:	f7fe fb10 	bl	8002384 <_ZSt5roundf>
 8003d64:	eef0 7a40 	vmov.f32	s15, s0
 8003d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6c:	ee17 3a90 	vmov	r3, s15
 8003d70:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	8bf9      	ldrh	r1, [r7, #30]
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	4688      	mov	r8, r1
 8003d7e:	4681      	mov	r9, r0
 8003d80:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003d84:	6079      	str	r1, [r7, #4]
 8003d86:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003d8a:	6039      	str	r1, [r7, #0]
 8003d8c:	683c      	ldr	r4, [r7, #0]
 8003d8e:	2500      	movs	r5, #0
 8003d90:	ea42 0a04 	orr.w	sl, r2, r4
 8003d94:	ea43 0b05 	orr.w	fp, r3, r5
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2204      	movs	r2, #4
 8003da2:	701a      	strb	r2, [r3, #0]
            }
 8003da4:	bf00      	nop
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	441c5666 	.word	0x441c5666
 8003db4:	441c5666 	.word	0x441c5666
 8003db8:	c1f00000 	.word	0xc1f00000
 8003dbc:	3c23d70a 	.word	0x3c23d70a

08003dc0 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b088      	sub	sp, #32
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6178      	str	r0, [r7, #20]
 8003dca:	6139      	str	r1, [r7, #16]
 8003dcc:	60fa      	str	r2, [r7, #12]
 8003dce:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003dda:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1041);
 8003ddc:	f240 4311 	movw	r3, #1041	; 0x411
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	6939      	ldr	r1, [r7, #16]
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f7fe fc0f 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	69f9      	ldr	r1, [r7, #28]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4688      	mov	r8, r1
 8003dfc:	4681      	mov	r9, r0
 8003dfe:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003e02:	6079      	str	r1, [r7, #4]
 8003e04:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	683c      	ldr	r4, [r7, #0]
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	ea42 0a04 	orr.w	sl, r2, r4
 8003e12:	ea43 0b05 	orr.w	fp, r3, r5
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	701a      	strb	r2, [r3, #0]
            }
 8003e22:	bf00      	nop
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2c:	0003fffc 	.word	0x0003fffc

08003e30 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b088      	sub	sp, #32
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6178      	str	r0, [r7, #20]
 8003e3a:	6139      	str	r1, [r7, #16]
 8003e3c:	60fa      	str	r2, [r7, #12]
 8003e3e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e46:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003ee4 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8003e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e52:	dd01      	ble.n	8003e58 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8003e56:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e64:	d502      	bpl.n	8003e6c <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1040);
 8003e6c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	6978      	ldr	r0, [r7, #20]
 8003e76:	f7fe fbc7 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 8003e7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e7e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003e82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e86:	eeb0 0a47 	vmov.f32	s0, s14
 8003e8a:	f7fe fa7b 	bl	8002384 <_ZSt5roundf>
 8003e8e:	eef0 7a40 	vmov.f32	s15, s0
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e9a:	793b      	ldrb	r3, [r7, #4]
 8003e9c:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	4691      	mov	r9, r2
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003eb8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ebc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ec0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003ec4:	2500      	movs	r5, #0
 8003ec6:	ea40 0a04 	orr.w	sl, r0, r4
 8003eca:	ea41 0b05 	orr.w	fp, r1, r5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	701a      	strb	r2, [r3, #0]
            }
 8003eda:	bf00      	nop
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee4:	42c80000 	.word	0x42c80000
 8003ee8:	42c80000 	.word	0x42c80000

08003eec <_ZN3can7signals26PDU_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b088      	sub	sp, #32
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6178      	str	r0, [r7, #20]
 8003ef6:	6139      	str	r1, [r7, #16]
 8003ef8:	60fa      	str	r2, [r7, #12]
 8003efa:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 33);
 8003efc:	2321      	movs	r3, #33	; 0x21
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6939      	ldr	r1, [r7, #16]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7fe fb80 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	8bf9      	ldrh	r1, [r7, #30]
 8003f14:	2000      	movs	r0, #0
 8003f16:	4688      	mov	r8, r1
 8003f18:	4681      	mov	r9, r0
 8003f1a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003f1e:	6079      	str	r1, [r7, #4]
 8003f20:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	683c      	ldr	r4, [r7, #0]
 8003f28:	2500      	movs	r5, #0
 8003f2a:	ea42 0a04 	orr.w	sl, r2, r4
 8003f2e:	ea43 0b05 	orr.w	fp, r3, r5
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	701a      	strb	r2, [r3, #0]
            }
 8003f3e:	bf00      	nop
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f48 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 33) {
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fe fb7f 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b21      	cmp	r3, #33	; 0x21
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d000      	beq.n	8003f6c <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 8003f6a:	e7fe      	b.n	8003f6a <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	0c02      	lsrs	r2, r0, #16
 8003f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f80:	0c0b      	lsrs	r3, r1, #16
 8003f82:	4613      	mov	r3, r2
 8003f84:	81fb      	strh	r3, [r7, #14]
                return value;
 8003f86:	89fb      	ldrh	r3, [r7, #14]
            }
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN3can7signals21PDU_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 32);
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7fe fb2e 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4698      	mov	r8, r3
 8003fbc:	4691      	mov	r9, r2
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003fca:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003fce:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003fd2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003fd6:	2500      	movs	r5, #0
 8003fd8:	ea40 0a04 	orr.w	sl, r0, r4
 8003fdc:	ea41 0b05 	orr.w	fp, r1, r5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	701a      	strb	r2, [r3, #0]
            }
 8003fec:	bf00      	nop
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ff6 <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 32) {
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe fb28 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8004008:	4603      	mov	r3, r0
 800400a:	2b20      	cmp	r3, #32
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d000      	beq.n	800401a <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8004018:	e7fe      	b.n	8004018 <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	0c02      	lsrs	r2, r0, #16
 800402a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800402e:	0c0b      	lsrs	r3, r1, #16
 8004030:	4613      	mov	r3, r2
 8004032:	73fb      	strb	r3, [r7, #15]
                return value;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
            }
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZN3can7signals24PDU_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800403e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6178      	str	r0, [r7, #20]
 8004048:	6139      	str	r1, [r7, #16]
 800404a:	60fa      	str	r2, [r7, #12]
 800404c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 16);
 800404e:	2310      	movs	r3, #16
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	6939      	ldr	r1, [r7, #16]
 8004054:	6978      	ldr	r0, [r7, #20]
 8004056:	f7fe fad7 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800405a:	897b      	ldrh	r3, [r7, #10]
 800405c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	8bf9      	ldrh	r1, [r7, #30]
 8004066:	2000      	movs	r0, #0
 8004068:	4688      	mov	r8, r1
 800406a:	4681      	mov	r9, r0
 800406c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004070:	6079      	str	r1, [r7, #4]
 8004072:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004076:	6039      	str	r1, [r7, #0]
 8004078:	683c      	ldr	r4, [r7, #0]
 800407a:	2500      	movs	r5, #0
 800407c:	ea42 0a04 	orr.w	sl, r2, r4
 8004080:	ea43 0b05 	orr.w	fp, r3, r5
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2204      	movs	r2, #4
 800408e:	701a      	strb	r2, [r3, #0]
            }
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800409a <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 16) {
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fe fad6 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d000      	beq.n	80040be <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 80040bc:	e7fe      	b.n	80040bc <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	0c02      	lsrs	r2, r0, #16
 80040ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80040d2:	0c0b      	lsrs	r3, r1, #16
 80040d4:	4613      	mov	r3, r2
 80040d6:	81fb      	strh	r3, [r7, #14]
                return value;
 80040d8:	89fb      	ldrh	r3, [r7, #14]
            }
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN3can7signals17PDU_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80040e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6178      	str	r0, [r7, #20]
 80040ec:	6139      	str	r1, [r7, #16]
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 5);
 80040f2:	2305      	movs	r3, #5
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6939      	ldr	r1, [r7, #16]
 80040f8:	6978      	ldr	r0, [r7, #20]
 80040fa:	f7fe fa85 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	8bf9      	ldrh	r1, [r7, #30]
 800410a:	2000      	movs	r0, #0
 800410c:	4688      	mov	r8, r1
 800410e:	4681      	mov	r9, r0
 8004110:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004114:	6079      	str	r1, [r7, #4]
 8004116:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800411a:	6039      	str	r1, [r7, #0]
 800411c:	683c      	ldr	r4, [r7, #0]
 800411e:	2500      	movs	r5, #0
 8004120:	ea42 0a04 	orr.w	sl, r2, r4
 8004124:	ea43 0b05 	orr.w	fp, r3, r5
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2204      	movs	r2, #4
 8004132:	701a      	strb	r2, [r3, #0]
            }
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800413e <_ZN3can7signals19PDU_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800413e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6178      	str	r0, [r7, #20]
 8004148:	6139      	str	r1, [r7, #16]
 800414a:	60fa      	str	r2, [r7, #12]
 800414c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 4);
 800414e:	2304      	movs	r3, #4
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	6939      	ldr	r1, [r7, #16]
 8004154:	6978      	ldr	r0, [r7, #20]
 8004156:	f7fe fa57 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800415a:	897b      	ldrh	r3, [r7, #10]
 800415c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	8bf9      	ldrh	r1, [r7, #30]
 8004166:	2000      	movs	r0, #0
 8004168:	4688      	mov	r8, r1
 800416a:	4681      	mov	r9, r0
 800416c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004170:	6079      	str	r1, [r7, #4]
 8004172:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004176:	6039      	str	r1, [r7, #0]
 8004178:	683c      	ldr	r4, [r7, #0]
 800417a:	2500      	movs	r5, #0
 800417c:	ea42 0a04 	orr.w	sl, r2, r4
 8004180:	ea43 0b05 	orr.w	fp, r3, r5
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2204      	movs	r2, #4
 800418e:	701a      	strb	r2, [r3, #0]
            }
 8004190:	bf00      	nop
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800419a <_ZN3can7signals22PDU_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800419a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6178      	str	r0, [r7, #20]
 80041a4:	6139      	str	r1, [r7, #16]
 80041a6:	60fa      	str	r2, [r7, #12]
 80041a8:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 3);
 80041aa:	2303      	movs	r3, #3
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	6978      	ldr	r0, [r7, #20]
 80041b2:	f7fe fa29 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	8bf9      	ldrh	r1, [r7, #30]
 80041c2:	2000      	movs	r0, #0
 80041c4:	4688      	mov	r8, r1
 80041c6:	4681      	mov	r9, r0
 80041c8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80041cc:	6079      	str	r1, [r7, #4]
 80041ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80041d2:	6039      	str	r1, [r7, #0]
 80041d4:	683c      	ldr	r4, [r7, #0]
 80041d6:	2500      	movs	r5, #0
 80041d8:	ea42 0a04 	orr.w	sl, r2, r4
 80041dc:	ea43 0b05 	orr.w	fp, r3, r5
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]
            }
 80041ec:	bf00      	nop
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041f6 <_ZN3can7signals17PDU_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80041f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2);
 8004206:	2302      	movs	r3, #2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7fe f9fb 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2200      	movs	r2, #0
 8004220:	4698      	mov	r8, r3
 8004222:	4691      	mov	r9, r2
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004230:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004234:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004238:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800423c:	2500      	movs	r5, #0
 800423e:	ea40 0a04 	orr.w	sl, r0, r4
 8004242:	ea41 0b05 	orr.w	fp, r1, r5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2203      	movs	r2, #3
 8004250:	701a      	strb	r2, [r3, #0]
            }
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800425c <_ZN3can7signals13PDU_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800425c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1);
 800426c:	2301      	movs	r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7fe f9c8 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2200      	movs	r2, #0
 8004286:	4698      	mov	r8, r3
 8004288:	4691      	mov	r9, r2
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004296:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800429a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800429e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80042a2:	2500      	movs	r5, #0
 80042a4:	ea40 0a04 	orr.w	sl, r0, r4
 80042a8:	ea41 0b05 	orr.w	fp, r1, r5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	701a      	strb	r2, [r3, #0]
            }
 80042b8:	bf00      	nop
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042c2 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	2202      	movs	r2, #2
 80042d8:	f240 611a 	movw	r1, #1562	; 0x61a
 80042dc:	f7fe f862 	bl	80023a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80042e4:	f240 621a 	movw	r2, #1562	; 0x61a
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d000      	beq.n	80042ee <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80042ec:	e7fe      	b.n	80042ec <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	331c      	adds	r3, #28
 8004308:	461a      	mov	r2, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffd9 	bl	80042c2 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 800431a:	b580      	push	{r7, lr}
 800431c:	b08a      	sub	sp, #40	; 0x28
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::PDU_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ffe5 	bl	80042f8 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::PDU_SDO_ID>();
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	4618      	mov	r0, r3
 8004334:	f002 f9f4 	bl	8006720 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>
 8004338:	4603      	mov	r3, r0
 800433a:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 800433c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f814 	bl	800436c <_Z31handleSDORequestDownloadBySDOIDt>
}
 8004344:	bf00      	nop
 8004346:	3728      	adds	r7, #40	; 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	2300      	movs	r3, #0
 8004358:	2208      	movs	r2, #8
 800435a:	f240 519a 	movw	r1, #1434	; 0x59a
 800435e:	f7fc fe15 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 800436c:	b580      	push	{r7, lr}
 800436e:	b092      	sub	sp, #72	; 0x48
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::PDU_SDO_Resp> msgSdoResp;
 8004376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ffe6 	bl	800434c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::PDU_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800438c:	f000 83f8 	beq.w	8004b80 <_Z31handleSDORequestDownloadBySDOIDt+0x814>
 8004390:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004394:	f300 8402 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8004398:	f640 2202 	movw	r2, #2562	; 0xa02
 800439c:	4293      	cmp	r3, r2
 800439e:	f000 83e1 	beq.w	8004b64 <_Z31handleSDORequestDownloadBySDOIDt+0x7f8>
 80043a2:	f640 2202 	movw	r2, #2562	; 0xa02
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f300 83f8 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80043ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043b0:	f000 83ca 	beq.w	8004b48 <_Z31handleSDORequestDownloadBySDOIDt+0x7dc>
 80043b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043b8:	f300 83f0 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80043bc:	f640 1202 	movw	r2, #2306	; 0x902
 80043c0:	4293      	cmp	r3, r2
 80043c2:	f000 83b3 	beq.w	8004b2c <_Z31handleSDORequestDownloadBySDOIDt+0x7c0>
 80043c6:	f640 1202 	movw	r2, #2306	; 0x902
 80043ca:	4293      	cmp	r3, r2
 80043cc:	f300 83e6 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80043d0:	f640 1201 	movw	r2, #2305	; 0x901
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f000 839b 	beq.w	8004b10 <_Z31handleSDORequestDownloadBySDOIDt+0x7a4>
 80043da:	f640 1201 	movw	r2, #2305	; 0x901
 80043de:	4293      	cmp	r3, r2
 80043e0:	f300 83dc 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80043e4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80043e8:	f000 8384 	beq.w	8004af4 <_Z31handleSDORequestDownloadBySDOIDt+0x788>
 80043ec:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80043f0:	f300 83d4 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80043f4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80043f8:	f000 836d 	beq.w	8004ad6 <_Z31handleSDORequestDownloadBySDOIDt+0x76a>
 80043fc:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004400:	f300 83cc 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8004404:	f640 0203 	movw	r2, #2051	; 0x803
 8004408:	4293      	cmp	r3, r2
 800440a:	f300 83c7 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800440e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004412:	da06      	bge.n	8004422 <_Z31handleSDORequestDownloadBySDOIDt+0xb6>
 8004414:	2b21      	cmp	r3, #33	; 0x21
 8004416:	f300 811b 	bgt.w	8004650 <_Z31handleSDORequestDownloadBySDOIDt+0x2e4>
 800441a:	2b00      	cmp	r3, #0
 800441c:	f300 80ce 	bgt.w	80045bc <_Z31handleSDORequestDownloadBySDOIDt+0x250>
 8004420:	e3bc      	b.n	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8004422:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004426:	2b03      	cmp	r3, #3
 8004428:	f200 83b8 	bhi.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <_Z31handleSDORequestDownloadBySDOIDt+0xc8>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004a5f 	.word	0x08004a5f
 8004438:	08004a7d 	.word	0x08004a7d
 800443c:	08004a9b 	.word	0x08004a9b
 8004440:	08004ab9 	.word	0x08004ab9
 8004444:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004448:	2b59      	cmp	r3, #89	; 0x59
 800444a:	f200 83a7 	bhi.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <_Z31handleSDORequestDownloadBySDOIDt+0xe8>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004745 	.word	0x08004745
 8004458:	08004763 	.word	0x08004763
 800445c:	0800477d 	.word	0x0800477d
 8004460:	0800479b 	.word	0x0800479b
 8004464:	080047b9 	.word	0x080047b9
 8004468:	080047d3 	.word	0x080047d3
 800446c:	080047ef 	.word	0x080047ef
 8004470:	08004b9d 	.word	0x08004b9d
 8004474:	08004b9d 	.word	0x08004b9d
 8004478:	08004b9d 	.word	0x08004b9d
 800447c:	08004b9d 	.word	0x08004b9d
 8004480:	08004b9d 	.word	0x08004b9d
 8004484:	08004b9d 	.word	0x08004b9d
 8004488:	08004b9d 	.word	0x08004b9d
 800448c:	08004b9d 	.word	0x08004b9d
 8004490:	08004b9d 	.word	0x08004b9d
 8004494:	0800480b 	.word	0x0800480b
 8004498:	08004825 	.word	0x08004825
 800449c:	08004b9d 	.word	0x08004b9d
 80044a0:	08004b9d 	.word	0x08004b9d
 80044a4:	08004b9d 	.word	0x08004b9d
 80044a8:	08004b9d 	.word	0x08004b9d
 80044ac:	08004b9d 	.word	0x08004b9d
 80044b0:	08004b9d 	.word	0x08004b9d
 80044b4:	08004b9d 	.word	0x08004b9d
 80044b8:	08004b9d 	.word	0x08004b9d
 80044bc:	08004b9d 	.word	0x08004b9d
 80044c0:	08004b9d 	.word	0x08004b9d
 80044c4:	08004b9d 	.word	0x08004b9d
 80044c8:	08004b9d 	.word	0x08004b9d
 80044cc:	08004b9d 	.word	0x08004b9d
 80044d0:	08004b9d 	.word	0x08004b9d
 80044d4:	0800483f 	.word	0x0800483f
 80044d8:	08004859 	.word	0x08004859
 80044dc:	08004b9d 	.word	0x08004b9d
 80044e0:	08004b9d 	.word	0x08004b9d
 80044e4:	08004b9d 	.word	0x08004b9d
 80044e8:	08004b9d 	.word	0x08004b9d
 80044ec:	08004b9d 	.word	0x08004b9d
 80044f0:	08004b9d 	.word	0x08004b9d
 80044f4:	08004b9d 	.word	0x08004b9d
 80044f8:	08004b9d 	.word	0x08004b9d
 80044fc:	08004b9d 	.word	0x08004b9d
 8004500:	08004b9d 	.word	0x08004b9d
 8004504:	08004b9d 	.word	0x08004b9d
 8004508:	08004b9d 	.word	0x08004b9d
 800450c:	08004b9d 	.word	0x08004b9d
 8004510:	08004b9d 	.word	0x08004b9d
 8004514:	08004b9d 	.word	0x08004b9d
 8004518:	08004b9d 	.word	0x08004b9d
 800451c:	08004b9d 	.word	0x08004b9d
 8004520:	08004b9d 	.word	0x08004b9d
 8004524:	08004b9d 	.word	0x08004b9d
 8004528:	08004b9d 	.word	0x08004b9d
 800452c:	08004b9d 	.word	0x08004b9d
 8004530:	08004b9d 	.word	0x08004b9d
 8004534:	08004b9d 	.word	0x08004b9d
 8004538:	08004b9d 	.word	0x08004b9d
 800453c:	08004b9d 	.word	0x08004b9d
 8004540:	08004b9d 	.word	0x08004b9d
 8004544:	08004b9d 	.word	0x08004b9d
 8004548:	08004b9d 	.word	0x08004b9d
 800454c:	08004b9d 	.word	0x08004b9d
 8004550:	08004b9d 	.word	0x08004b9d
 8004554:	08004873 	.word	0x08004873
 8004558:	0800488f 	.word	0x0800488f
 800455c:	080048ab 	.word	0x080048ab
 8004560:	080048c5 	.word	0x080048c5
 8004564:	080048e1 	.word	0x080048e1
 8004568:	08004b9d 	.word	0x08004b9d
 800456c:	080048fd 	.word	0x080048fd
 8004570:	08004919 	.word	0x08004919
 8004574:	08004933 	.word	0x08004933
 8004578:	0800494f 	.word	0x0800494f
 800457c:	08004b9d 	.word	0x08004b9d
 8004580:	08004b9d 	.word	0x08004b9d
 8004584:	08004b9d 	.word	0x08004b9d
 8004588:	08004b9d 	.word	0x08004b9d
 800458c:	08004b9d 	.word	0x08004b9d
 8004590:	08004b9d 	.word	0x08004b9d
 8004594:	08004969 	.word	0x08004969
 8004598:	08004985 	.word	0x08004985
 800459c:	080049a1 	.word	0x080049a1
 80045a0:	080049bb 	.word	0x080049bb
 80045a4:	080049d7 	.word	0x080049d7
 80045a8:	08004b9d 	.word	0x08004b9d
 80045ac:	080049f3 	.word	0x080049f3
 80045b0:	08004a0f 	.word	0x08004a0f
 80045b4:	08004a29 	.word	0x08004a29
 80045b8:	08004a45 	.word	0x08004a45
 80045bc:	3b01      	subs	r3, #1
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f200 82ec 	bhi.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <_Z31handleSDORequestDownloadBySDOIDt+0x260>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	08004665 	.word	0x08004665
 80045d0:	08004681 	.word	0x08004681
 80045d4:	0800469d 	.word	0x0800469d
 80045d8:	080046b9 	.word	0x080046b9
 80045dc:	080046d5 	.word	0x080046d5
 80045e0:	08004b9d 	.word	0x08004b9d
 80045e4:	08004b9d 	.word	0x08004b9d
 80045e8:	08004b9d 	.word	0x08004b9d
 80045ec:	08004b9d 	.word	0x08004b9d
 80045f0:	08004b9d 	.word	0x08004b9d
 80045f4:	08004b9d 	.word	0x08004b9d
 80045f8:	08004b9d 	.word	0x08004b9d
 80045fc:	08004b9d 	.word	0x08004b9d
 8004600:	08004b9d 	.word	0x08004b9d
 8004604:	08004b9d 	.word	0x08004b9d
 8004608:	080046f1 	.word	0x080046f1
 800460c:	08004b9d 	.word	0x08004b9d
 8004610:	08004b9d 	.word	0x08004b9d
 8004614:	08004b9d 	.word	0x08004b9d
 8004618:	08004b9d 	.word	0x08004b9d
 800461c:	08004b9d 	.word	0x08004b9d
 8004620:	08004b9d 	.word	0x08004b9d
 8004624:	08004b9d 	.word	0x08004b9d
 8004628:	08004b9d 	.word	0x08004b9d
 800462c:	08004b9d 	.word	0x08004b9d
 8004630:	08004b9d 	.word	0x08004b9d
 8004634:	08004b9d 	.word	0x08004b9d
 8004638:	08004b9d 	.word	0x08004b9d
 800463c:	08004b9d 	.word	0x08004b9d
 8004640:	08004b9d 	.word	0x08004b9d
 8004644:	08004b9d 	.word	0x08004b9d
 8004648:	0800470d 	.word	0x0800470d
 800464c:	08004729 	.word	0x08004729
 8004650:	f240 4269 	movw	r2, #1129	; 0x469
 8004654:	4293      	cmp	r3, r2
 8004656:	f300 82a1 	bgt.w	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800465a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800465e:	f6bf aef1 	bge.w	8004444 <_Z31handleSDORequestDownloadBySDOIDt+0xd8>
 8004662:	e29b      	b.n	8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::PDU_OD_NodeID>(OD_NodeID_get());
 8004664:	f001 f89c 	bl	80057a0 <_Z13OD_NodeID_getv>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f002 f866 	bl	8006744 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800467e:	e295      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::PDU_OD_NodeStatus>(OD_NodeStatus_get());
 8004680:	f001 f8aa 	bl	80057d8 <_Z17OD_NodeStatus_getv>
 8004684:	4603      	mov	r3, r0
 8004686:	461a      	mov	r2, r3
 8004688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f002 f86d 	bl	800676e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800469a:	e287      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::PDU_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 800469c:	f001 f8b8 	bl	8005810 <_Z22OD_ProtocolVersion_getv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 f874 	bl	8006798 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80046b6:	e279      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::PDU_OD_StackVersion>(OD_StackVersion_get());
 80046b8:	f001 f8c6 	bl	8005848 <_Z19OD_StackVersion_getv>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f002 f87b 	bl	80067c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80046d2:	e26b      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::PDU_OD_DbcVersion>(OD_DbcVersion_get());
 80046d4:	f001 f8d4 	bl	8005880 <_Z17OD_DbcVersion_getv>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f002 f882 	bl	80067ec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80046ee:	e25d      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::PDU_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80046f0:	f001 f8e2 	bl	80058b8 <_Z24OD_HeartbeatInterval_getv>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f002 f889 	bl	8006816 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800470a:	e24f      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::PDU_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 800470c:	f001 f90c 	bl	8005928 <_Z21OD_SendOdOnBootup_getv>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f002 f890 	bl	8006840 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004726:	e241      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::PDU_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004728:	f001 f936 	bl	8005998 <_Z26OD_OdEntrySendInterval_getv>
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f002 f897 	bl	800686a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004742:	e233      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::PDU_OD_CpuUsage>(OD_CpuUsage_get());
 8004744:	f001 f960 	bl	8005a08 <_Z15OD_CpuUsage_getv>
 8004748:	eef0 7a40 	vmov.f32	s15, s0
 800474c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004750:	eeb0 0a67 	vmov.f32	s0, s15
 8004754:	4618      	mov	r0, r3
 8004756:	f002 f89d 	bl	8006894 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004760:	e224      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::PDU_OD_MemFree>(OD_MemFree_get());
 8004762:	f001 f98b 	bl	8005a7c <_Z14OD_MemFree_getv>
 8004766:	4602      	mov	r2, r0
 8004768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f002 f8a7 	bl	80068c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800477a:	e217      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::PDU_OD_BoardTemp>(OD_BoardTemp_get());
 800477c:	f001 f9b6 	bl	8005aec <_Z16OD_BoardTemp_getv>
 8004780:	eef0 7a40 	vmov.f32	s15, s0
 8004784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	4618      	mov	r0, r3
 800478e:	f002 f8ac 	bl	80068ea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004798:	e208      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::PDU_OD_InputVoltage>(OD_InputVoltage_get());
 800479a:	f001 f9e1 	bl	8005b60 <_Z19OD_InputVoltage_getv>
 800479e:	eef0 7a40 	vmov.f32	s15, s0
 80047a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a6:	eeb0 0a67 	vmov.f32	s0, s15
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 f8b4 	bl	8006918 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80047b6:	e1f9      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::PDU_OD_runtime>(OD_runtime_get());
 80047b8:	f001 fa0c 	bl	8005bd4 <_Z14OD_runtime_getv>
 80047bc:	4602      	mov	r2, r0
 80047be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f002 f8be 	bl	8006946 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80047d0:	e1ec      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::PDU_OD_SdcIn>(OD_SdcIn_get());
 80047d2:	f001 fa1b 	bl	8005c0c <_Z12OD_SdcIn_getv>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461a      	mov	r2, r3
 80047da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f002 f8c4 	bl	800696e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80047ec:	e1de      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::PDU_OD_SdcOut>(OD_SdcOut_get());
 80047ee:	f001 fa29 	bl	8005c44 <_Z13OD_SdcOut_getv>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f002 f8cb 	bl	8006998 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004802:	2300      	movs	r3, #0
 8004804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004808:	e1d0      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::PDU_OD_ChipUID1>(OD_ChipUID1_get());
 800480a:	f001 fa37 	bl	8005c7c <_Z15OD_ChipUID1_getv>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004816:	4608      	mov	r0, r1
 8004818:	f002 f8d3 	bl	80069c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004822:	e1c3      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::PDU_OD_ChipUID2>(OD_ChipUID2_get());
 8004824:	f001 fa4a 	bl	8005cbc <_Z15OD_ChipUID2_getv>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004830:	4608      	mov	r0, r1
 8004832:	f002 f8df 	bl	80069f4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004836:	2300      	movs	r3, #0
 8004838:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800483c:	e1b6      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::PDU_OD_BuildDate>(OD_BuildDate_get());
 800483e:	f001 fa5d 	bl	8005cfc <_Z16OD_BuildDate_getv>
 8004842:	4602      	mov	r2, r0
 8004844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004848:	4611      	mov	r1, r2
 800484a:	4618      	mov	r0, r3
 800484c:	f002 f8eb 	bl	8006a26 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004856:	e1a9      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::PDU_OD_BuildTime>(OD_BuildTime_get());
 8004858:	f001 fa6c 	bl	8005d34 <_Z16OD_BuildTime_getv>
 800485c:	4602      	mov	r2, r0
 800485e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f002 f8f2 	bl	8006a4e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004870:	e19c      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8004872:	f001 fa7b 	bl	8005d6c <_Z20OD_CAN1_TxErrCnt_getv>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800487e:	4611      	mov	r1, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f002 f8f8 	bl	8006a76 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004886:	2300      	movs	r3, #0
 8004888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800488c:	e18e      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800488e:	f001 fa89 	bl	8005da4 <_Z20OD_CAN1_RxErrCnt_getv>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f002 f8ff 	bl	8006aa0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80048a8:	e180      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::PDU_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80048aa:	f001 fa97 	bl	8005ddc <_Z25OD_CAN1_lastErrorCode_getv>
 80048ae:	4602      	mov	r2, r0
 80048b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f002 f907 	bl	8006aca <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80048c2:	e173      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::PDU_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80048c4:	f001 faa6 	bl	8005e14 <_Z26OD_CAN1_autoErrorReset_getv>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f002 f90d 	bl	8006af2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80048de:	e165      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80048e0:	f001 fad0 	bl	8005e84 <_Z20OD_CAN1_Baudrate_getv>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f002 f914 	bl	8006b1c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80048fa:	e157      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Status>(OD_CAN1_Status_get());
 80048fc:	f001 fafa 	bl	8005ef4 <_Z18OD_CAN1_Status_getv>
 8004900:	4603      	mov	r3, r0
 8004902:	461a      	mov	r2, r3
 8004904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f91b 	bl	8006b46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004916:	e149      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8004918:	f001 fb08 	bl	8005f2c <_Z31OD_CAN1_DiscardedTxMessages_getv>
 800491c:	4602      	mov	r2, r0
 800491e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f002 f923 	bl	8006b70 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004930:	e13c      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::PDU_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004932:	f001 fb17 	bl	8005f64 <_Z23OD_CAN1_ErrorStatus_getv>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f002 f929 	bl	8006b98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800494c:	e12e      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800494e:	f001 fb25 	bl	8005f9c <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004952:	4602      	mov	r2, r0
 8004954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f002 f931 	bl	8006bc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004966:	e121      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004968:	f001 fb34 	bl	8005fd4 <_Z20OD_CAN2_TxErrCnt_getv>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f002 f937 	bl	8006bea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 800497c:	2300      	movs	r3, #0
 800497e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004982:	e113      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8004984:	f001 fb42 	bl	800600c <_Z20OD_CAN2_RxErrCnt_getv>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f002 f93e 	bl	8006c14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800499e:	e105      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::PDU_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80049a0:	f001 fb50 	bl	8006044 <_Z25OD_CAN2_lastErrorCode_getv>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f002 f946 	bl	8006c3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80049b8:	e0f8      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::PDU_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80049ba:	f001 fb5f 	bl	800607c <_Z26OD_CAN2_autoErrorReset_getv>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f002 f94c 	bl	8006c66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80049d4:	e0ea      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80049d6:	f001 fb89 	bl	80060ec <_Z20OD_CAN2_Baudrate_getv>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f002 f953 	bl	8006c90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80049f0:	e0dc      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Status>(OD_CAN2_Status_get());
 80049f2:	f001 fbb3 	bl	800615c <_Z18OD_CAN2_Status_getv>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 f95a 	bl	8006cba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a0c:	e0ce      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004a0e:	f001 fbc1 	bl	8006194 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004a12:	4602      	mov	r2, r0
 8004a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f002 f962 	bl	8006ce4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a26:	e0c1      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::PDU_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004a28:	f001 fbd0 	bl	80061cc <_Z23OD_CAN2_ErrorStatus_getv>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 f968 	bl	8006d0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a42:	e0b3      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004a44:	f001 fbde 	bl	8006204 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 f970 	bl	8006d36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a5c:	e0a6      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x800:    // OD_batterVoltageLow
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageLow>(OD_batterVoltageLow_get());
 8004a5e:	f001 fbed 	bl	800623c <_Z23OD_batterVoltageLow_getv>
 8004a62:	eef0 7a40 	vmov.f32	s15, s0
 8004a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f002 f975 	bl	8006d5e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a7a:	e097      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x801:    // OD_batterVoltageCritical
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageCritical>(OD_batterVoltageCritical_get());
 8004a7c:	f001 fc18 	bl	80062b0 <_Z28OD_batterVoltageCritical_getv>
 8004a80:	eef0 7a40 	vmov.f32	s15, s0
 8004a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a88:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f002 f97d 	bl	8006d8c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a98:	e088      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x802:    // OD_overTempWarn
            msgSdoResp.set<can::signals::PDU_OD_overTempWarn>(OD_overTempWarn_get());
 8004a9a:	f001 fc43 	bl	8006324 <_Z19OD_overTempWarn_getv>
 8004a9e:	eef0 7a40 	vmov.f32	s15, s0
 8004aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 f985 	bl	8006dba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ab6:	e079      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x803:    // OD_overTempCritical
            msgSdoResp.set<can::signals::PDU_OD_overTempCritical>(OD_overTempCritical_get());
 8004ab8:	f001 fc6e 	bl	8006398 <_Z23OD_overTempCritical_getv>
 8004abc:	eef0 7a40 	vmov.f32	s15, s0
 8004ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f002 f98d 	bl	8006de8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ad4:	e06a      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x850:    // OD_batteryOvercurrent
            msgSdoResp.set<can::signals::PDU_OD_batteryOvercurrent>(OD_batteryOvercurrent_get());
 8004ad6:	f001 fc99 	bl	800640c <_Z25OD_batteryOvercurrent_getv>
 8004ada:	eef0 7a40 	vmov.f32	s15, s0
 8004ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f002 f995 	bl	8006e16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004af2:	e05b      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x900:    // OD_currentReadInterval
            msgSdoResp.set<can::signals::PDU_OD_currentReadInterval>(OD_currentReadInterval_get());
 8004af4:	f001 fcc4 	bl	8006480 <_Z26OD_currentReadInterval_getv>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f002 f99e 	bl	8006e44 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b0e:	e04d      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x901:    // OD_statusSendInterval
            msgSdoResp.set<can::signals::PDU_OD_statusSendInterval>(OD_statusSendInterval_get());
 8004b10:	f001 fcee 	bl	80064f0 <_Z25OD_statusSendInterval_getv>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 f9a5 	bl	8006e6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b2a:	e03f      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x902:    // OD_watchdogTimeout
            msgSdoResp.set<can::signals::PDU_OD_watchdogTimeout>(OD_watchdogTimeout_get());
 8004b2c:	f001 fd18 	bl	8006560 <_Z22OD_watchdogTimeout_getv>
 8004b30:	4603      	mov	r3, r0
 8004b32:	461a      	mov	r2, r3
 8004b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 f9ac 	bl	8006e98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b46:	e031      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xA00:    // OD_projectXXEnabled
            msgSdoResp.set<can::signals::PDU_OD_projectXXEnabled>(OD_projectXXEnabled_get());
 8004b48:	f001 fd42 	bl	80065d0 <_Z23OD_projectXXEnabled_getv>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 f9b3 	bl	8006ec2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b62:	e023      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xA02:    // OD_LedCommands
            msgSdoResp.set<can::signals::PDU_OD_LedCommands>(OD_LedCommands_get());
 8004b64:	f001 fd6c 	bl	8006640 <_Z18OD_LedCommands_getv>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 f9ba 	bl	8006eec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b7e:	e015      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xB00:    // OD_CoolingPumpEnabled
            msgSdoResp.set<can::signals::PDU_OD_CoolingPumpEnabled>(OD_CoolingPumpEnabled_get());
 8004b80:	f001 fd96 	bl	80066b0 <_Z25OD_CoolingPumpEnabled_getv>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 f9c1 	bl	8006f16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b9a:	e007      	b.n	8004bac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::PDU_SDO_ID>(sdoId);
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f002 f9cb 	bl	8006f40 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004baa:	bf00      	nop
    }

    msgSdoResp.set<can::signals::PDU_SDO_RespCode>(respCode);
 8004bac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f002 f9d7 	bl	8006f6a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc fb14 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <_Z31handleSDORequestDownloadBySDOIDt+0x878>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	f107 0108 	add.w	r1, r7, #8
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f00c fcd2 	bl	8011580 <osMessageQueuePut>
}
 8004bdc:	bf00      	nop
 8004bde:	3748      	adds	r7, #72	; 0x48
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200007c0 	.word	0x200007c0

08004be8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	f240 51da 	movw	r1, #1498	; 0x5da
 8004c02:	f7fd fbcf 	bl	80023a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004c0a:	f240 52da 	movw	r2, #1498	; 0x5da
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d000      	beq.n	8004c14 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004c12:	e7fe      	b.n	8004c12 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	331c      	adds	r3, #28
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ffd9 	bl	8004be8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b0a4      	sub	sp, #144	; 0x90
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::PDU_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8004c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ffe5 	bl	8004c1e <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::PDU_SDO_Resp> msgSdoResp;
 8004c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fb77 	bl	800434c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::PDU_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    uint16_t sdoId = msgSdoReq.get<can::signals::PDU_SDO_ID>();
 8004c64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f002 f993 	bl	8006f94 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    switch (sdoId) {
 8004c74:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c78:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004c7c:	f000 8549 	beq.w	8005712 <_Z22handleSDORequestUploadRK9RxMessage+0xad2>
 8004c80:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004c84:	f300 8560 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004c88:	f640 2202 	movw	r2, #2562	; 0xa02
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f000 8525 	beq.w	80056dc <_Z22handleSDORequestUploadRK9RxMessage+0xa9c>
 8004c92:	f640 2202 	movw	r2, #2562	; 0xa02
 8004c96:	4293      	cmp	r3, r2
 8004c98:	f300 8556 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004c9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ca0:	f000 8501 	beq.w	80056a6 <_Z22handleSDORequestUploadRK9RxMessage+0xa66>
 8004ca4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ca8:	f300 854e 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004cac:	f640 1202 	movw	r2, #2306	; 0x902
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f000 84dd 	beq.w	8005670 <_Z22handleSDORequestUploadRK9RxMessage+0xa30>
 8004cb6:	f640 1202 	movw	r2, #2306	; 0x902
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f300 8544 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004cc0:	f640 1201 	movw	r2, #2305	; 0x901
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	f000 84b8 	beq.w	800563a <_Z22handleSDORequestUploadRK9RxMessage+0x9fa>
 8004cca:	f640 1201 	movw	r2, #2305	; 0x901
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f300 853a 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004cd4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004cd8:	f000 8494 	beq.w	8005604 <_Z22handleSDORequestUploadRK9RxMessage+0x9c4>
 8004cdc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004ce0:	f300 8532 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004ce4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004ce8:	f000 845e 	beq.w	80055a8 <_Z22handleSDORequestUploadRK9RxMessage+0x968>
 8004cec:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004cf0:	f300 852a 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004cf4:	f640 0203 	movw	r2, #2051	; 0x803
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	f300 8525 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d02:	da07      	bge.n	8004d14 <_Z22handleSDORequestUploadRK9RxMessage+0xd4>
 8004d04:	2b21      	cmp	r3, #33	; 0x21
 8004d06:	f300 811b 	bgt.w	8004f40 <_Z22handleSDORequestUploadRK9RxMessage+0x300>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f300 80ce 	bgt.w	8004eac <_Z22handleSDORequestUploadRK9RxMessage+0x26c>
 8004d10:	f000 bd1a 	b.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004d14:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	f200 8515 	bhi.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <_Z22handleSDORequestUploadRK9RxMessage+0xe4>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08005439 	.word	0x08005439
 8004d28:	08005495 	.word	0x08005495
 8004d2c:	080054f1 	.word	0x080054f1
 8004d30:	0800554d 	.word	0x0800554d
 8004d34:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004d38:	2b59      	cmp	r3, #89	; 0x59
 8004d3a:	f200 8505 	bhi.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <_Z22handleSDORequestUploadRK9RxMessage+0x104>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08005083 	.word	0x08005083
 8004d48:	080050a1 	.word	0x080050a1
 8004d4c:	080050bb 	.word	0x080050bb
 8004d50:	080050d9 	.word	0x080050d9
 8004d54:	080050f7 	.word	0x080050f7
 8004d58:	08005111 	.word	0x08005111
 8004d5c:	0800512d 	.word	0x0800512d
 8004d60:	08005749 	.word	0x08005749
 8004d64:	08005749 	.word	0x08005749
 8004d68:	08005749 	.word	0x08005749
 8004d6c:	08005749 	.word	0x08005749
 8004d70:	08005749 	.word	0x08005749
 8004d74:	08005749 	.word	0x08005749
 8004d78:	08005749 	.word	0x08005749
 8004d7c:	08005749 	.word	0x08005749
 8004d80:	08005749 	.word	0x08005749
 8004d84:	08005149 	.word	0x08005149
 8004d88:	08005163 	.word	0x08005163
 8004d8c:	08005749 	.word	0x08005749
 8004d90:	08005749 	.word	0x08005749
 8004d94:	08005749 	.word	0x08005749
 8004d98:	08005749 	.word	0x08005749
 8004d9c:	08005749 	.word	0x08005749
 8004da0:	08005749 	.word	0x08005749
 8004da4:	08005749 	.word	0x08005749
 8004da8:	08005749 	.word	0x08005749
 8004dac:	08005749 	.word	0x08005749
 8004db0:	08005749 	.word	0x08005749
 8004db4:	08005749 	.word	0x08005749
 8004db8:	08005749 	.word	0x08005749
 8004dbc:	08005749 	.word	0x08005749
 8004dc0:	08005749 	.word	0x08005749
 8004dc4:	0800517d 	.word	0x0800517d
 8004dc8:	08005197 	.word	0x08005197
 8004dcc:	08005749 	.word	0x08005749
 8004dd0:	08005749 	.word	0x08005749
 8004dd4:	08005749 	.word	0x08005749
 8004dd8:	08005749 	.word	0x08005749
 8004ddc:	08005749 	.word	0x08005749
 8004de0:	08005749 	.word	0x08005749
 8004de4:	08005749 	.word	0x08005749
 8004de8:	08005749 	.word	0x08005749
 8004dec:	08005749 	.word	0x08005749
 8004df0:	08005749 	.word	0x08005749
 8004df4:	08005749 	.word	0x08005749
 8004df8:	08005749 	.word	0x08005749
 8004dfc:	08005749 	.word	0x08005749
 8004e00:	08005749 	.word	0x08005749
 8004e04:	08005749 	.word	0x08005749
 8004e08:	08005749 	.word	0x08005749
 8004e0c:	08005749 	.word	0x08005749
 8004e10:	08005749 	.word	0x08005749
 8004e14:	08005749 	.word	0x08005749
 8004e18:	08005749 	.word	0x08005749
 8004e1c:	08005749 	.word	0x08005749
 8004e20:	08005749 	.word	0x08005749
 8004e24:	08005749 	.word	0x08005749
 8004e28:	08005749 	.word	0x08005749
 8004e2c:	08005749 	.word	0x08005749
 8004e30:	08005749 	.word	0x08005749
 8004e34:	08005749 	.word	0x08005749
 8004e38:	08005749 	.word	0x08005749
 8004e3c:	08005749 	.word	0x08005749
 8004e40:	08005749 	.word	0x08005749
 8004e44:	080051b1 	.word	0x080051b1
 8004e48:	080051cd 	.word	0x080051cd
 8004e4c:	080051e9 	.word	0x080051e9
 8004e50:	08005203 	.word	0x08005203
 8004e54:	08005239 	.word	0x08005239
 8004e58:	08005749 	.word	0x08005749
 8004e5c:	08005289 	.word	0x08005289
 8004e60:	080052a5 	.word	0x080052a5
 8004e64:	080052bf 	.word	0x080052bf
 8004e68:	080052db 	.word	0x080052db
 8004e6c:	08005749 	.word	0x08005749
 8004e70:	08005749 	.word	0x08005749
 8004e74:	08005749 	.word	0x08005749
 8004e78:	08005749 	.word	0x08005749
 8004e7c:	08005749 	.word	0x08005749
 8004e80:	08005749 	.word	0x08005749
 8004e84:	080052f5 	.word	0x080052f5
 8004e88:	08005311 	.word	0x08005311
 8004e8c:	0800532d 	.word	0x0800532d
 8004e90:	08005347 	.word	0x08005347
 8004e94:	0800537d 	.word	0x0800537d
 8004e98:	08005749 	.word	0x08005749
 8004e9c:	080053cd 	.word	0x080053cd
 8004ea0:	080053e9 	.word	0x080053e9
 8004ea4:	08005403 	.word	0x08005403
 8004ea8:	0800541f 	.word	0x0800541f
 8004eac:	3b01      	subs	r3, #1
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	f200 844a 	bhi.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <_Z22handleSDORequestUploadRK9RxMessage+0x27c>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004f55 	.word	0x08004f55
 8004ec0:	08004f71 	.word	0x08004f71
 8004ec4:	08004f8d 	.word	0x08004f8d
 8004ec8:	08004fa9 	.word	0x08004fa9
 8004ecc:	08004fc5 	.word	0x08004fc5
 8004ed0:	08005749 	.word	0x08005749
 8004ed4:	08005749 	.word	0x08005749
 8004ed8:	08005749 	.word	0x08005749
 8004edc:	08005749 	.word	0x08005749
 8004ee0:	08005749 	.word	0x08005749
 8004ee4:	08005749 	.word	0x08005749
 8004ee8:	08005749 	.word	0x08005749
 8004eec:	08005749 	.word	0x08005749
 8004ef0:	08005749 	.word	0x08005749
 8004ef4:	08005749 	.word	0x08005749
 8004ef8:	08004fe1 	.word	0x08004fe1
 8004efc:	08005749 	.word	0x08005749
 8004f00:	08005749 	.word	0x08005749
 8004f04:	08005749 	.word	0x08005749
 8004f08:	08005749 	.word	0x08005749
 8004f0c:	08005749 	.word	0x08005749
 8004f10:	08005749 	.word	0x08005749
 8004f14:	08005749 	.word	0x08005749
 8004f18:	08005749 	.word	0x08005749
 8004f1c:	08005749 	.word	0x08005749
 8004f20:	08005749 	.word	0x08005749
 8004f24:	08005749 	.word	0x08005749
 8004f28:	08005749 	.word	0x08005749
 8004f2c:	08005749 	.word	0x08005749
 8004f30:	08005749 	.word	0x08005749
 8004f34:	08005749 	.word	0x08005749
 8004f38:	08005017 	.word	0x08005017
 8004f3c:	0800504d 	.word	0x0800504d
 8004f40:	f240 4269 	movw	r2, #1129	; 0x469
 8004f44:	4293      	cmp	r3, r2
 8004f46:	f300 83ff 	bgt.w	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004f4a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004f4e:	f6bf aef1 	bge.w	8004d34 <_Z22handleSDORequestUploadRK9RxMessage+0xf4>
 8004f52:	e3f9      	b.n	8005748 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_NodeID>(OD_NodeID_get());
 8004f5a:	f000 fc21 	bl	80057a0 <_Z13OD_NodeID_getv>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461a      	mov	r2, r3
 8004f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fbeb 	bl	8006744 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 8004f6e:	e3f4      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_NodeStatus>(OD_NodeStatus_get());
 8004f76:	f000 fc2f 	bl	80057d8 <_Z17OD_NodeStatus_getv>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 fbf2 	bl	800676e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 8004f8a:	e3e6      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004f92:	f000 fc3d 	bl	8005810 <_Z22OD_ProtocolVersion_getv>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fbf9 	bl	8006798 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8004fa6:	e3d8      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_StackVersion>(OD_StackVersion_get());
 8004fae:	f000 fc4b 	bl	8005848 <_Z19OD_StackVersion_getv>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 fc00 	bl	80067c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8004fc2:	e3ca      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_DbcVersion>(OD_DbcVersion_get());
 8004fca:	f000 fc59 	bl	8005880 <_Z17OD_DbcVersion_getv>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fc07 	bl	80067ec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8004fde:	e3bc      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_HeartbeatInterval>();
 8004fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 ffe7 	bl	8006fb8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals24PDU_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8004ff0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fc7b 	bl	80058f0 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8005000:	f000 fc5a 	bl	80058b8 <_Z24OD_HeartbeatInterval_getv>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f001 fc01 	bl	8006816 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8005014:	e3a1      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_SendOdOnBootup>();
 8005016:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800501a:	4618      	mov	r0, r3
 800501c:	f001 ffde 	bl	8006fdc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals21PDU_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8005026:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fc98 	bl	8005960 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005030:	2300      	movs	r3, #0
 8005032:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8005036:	f000 fc77 	bl	8005928 <_Z21OD_SendOdOnBootup_getv>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fbfb 	bl	8006840 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 800504a:	e386      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_OdEntrySendInterval>();
 800504c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005050:	4618      	mov	r0, r3
 8005052:	f001 ffd5 	bl	8007000 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8005056:	4603      	mov	r3, r0
 8005058:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 800505c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fcb5 	bl	80059d0 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 800506c:	f000 fc94 	bl	8005998 <_Z26OD_OdEntrySendInterval_getv>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fbf5 	bl	800686a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8005080:	e36b      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005082:	2303      	movs	r3, #3
 8005084:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CpuUsage>(OD_CpuUsage_get());
 8005088:	f000 fcbe 	bl	8005a08 <_Z15OD_CpuUsage_getv>
 800508c:	eef0 7a40 	vmov.f32	s15, s0
 8005090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005094:	eeb0 0a67 	vmov.f32	s0, s15
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fbfb 	bl	8006894 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 800509e:	e35c      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_MemFree>(OD_MemFree_get());
 80050a6:	f000 fce9 	bl	8005a7c <_Z14OD_MemFree_getv>
 80050aa:	4602      	mov	r2, r0
 80050ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fc05 	bl	80068c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80050b8:	e34f      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BoardTemp>(OD_BoardTemp_get());
 80050c0:	f000 fd14 	bl	8005aec <_Z16OD_BoardTemp_getv>
 80050c4:	eef0 7a40 	vmov.f32	s15, s0
 80050c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050cc:	eeb0 0a67 	vmov.f32	s0, s15
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fc0a 	bl	80068ea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 80050d6:	e340      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80050d8:	2303      	movs	r3, #3
 80050da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_InputVoltage>(OD_InputVoltage_get());
 80050de:	f000 fd3f 	bl	8005b60 <_Z19OD_InputVoltage_getv>
 80050e2:	eef0 7a40 	vmov.f32	s15, s0
 80050e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ea:	eeb0 0a67 	vmov.f32	s0, s15
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 fc12 	bl	8006918 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80050f4:	e331      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_runtime>(OD_runtime_get());
 80050fc:	f000 fd6a 	bl	8005bd4 <_Z14OD_runtime_getv>
 8005100:	4602      	mov	r2, r0
 8005102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fc1c 	bl	8006946 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>
            break;
 800510e:	e324      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005110:	2303      	movs	r3, #3
 8005112:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SdcIn>(OD_SdcIn_get());
 8005116:	f000 fd79 	bl	8005c0c <_Z12OD_SdcIn_getv>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fc22 	bl	800696e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>
            break;
 800512a:	e316      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800512c:	2303      	movs	r3, #3
 800512e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SdcOut>(OD_SdcOut_get());
 8005132:	f000 fd87 	bl	8005c44 <_Z13OD_SdcOut_getv>
 8005136:	4603      	mov	r3, r0
 8005138:	461a      	mov	r2, r3
 800513a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fc29 	bl	8006998 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8005146:	e308      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005148:	2303      	movs	r3, #3
 800514a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ChipUID1>(OD_ChipUID1_get());
 800514e:	f000 fd95 	bl	8005c7c <_Z15OD_ChipUID1_getv>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800515a:	4608      	mov	r0, r1
 800515c:	f001 fc31 	bl	80069c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8005160:	e2fb      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005162:	2303      	movs	r3, #3
 8005164:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ChipUID2>(OD_ChipUID2_get());
 8005168:	f000 fda8 	bl	8005cbc <_Z15OD_ChipUID2_getv>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005174:	4608      	mov	r0, r1
 8005176:	f001 fc3d 	bl	80069f4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 800517a:	e2ee      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800517c:	2303      	movs	r3, #3
 800517e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BuildDate>(OD_BuildDate_get());
 8005182:	f000 fdbb 	bl	8005cfc <_Z16OD_BuildDate_getv>
 8005186:	4602      	mov	r2, r0
 8005188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f001 fc49 	bl	8006a26 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8005194:	e2e1      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005196:	2303      	movs	r3, #3
 8005198:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BuildTime>(OD_BuildTime_get());
 800519c:	f000 fdca 	bl	8005d34 <_Z16OD_BuildTime_getv>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fc50 	bl	8006a4e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 80051ae:	e2d4      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80051b6:	f000 fdd9 	bl	8005d6c <_Z20OD_CAN1_TxErrCnt_getv>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 fc56 	bl	8006a76 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 80051ca:	e2c6      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80051d2:	f000 fde7 	bl	8005da4 <_Z20OD_CAN1_RxErrCnt_getv>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f001 fc5d 	bl	8006aa0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 80051e6:	e2b8      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80051ee:	f000 fdf5 	bl	8005ddc <_Z25OD_CAN1_lastErrorCode_getv>
 80051f2:	4602      	mov	r2, r0
 80051f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fc65 	bl	8006aca <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005200:	e2ab      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CAN1_autoErrorReset>();
 8005202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005206:	4618      	mov	r0, r3
 8005208:	f001 ff0c 	bl	8007024 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8005212:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fe18 	bl	8005e4c <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005222:	f000 fdf7 	bl	8005e14 <_Z26OD_CAN1_autoErrorReset_getv>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f001 fc5e 	bl	8006af2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005236:	e290      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_CAN1_Baudrate>();
 8005238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800523c:	4618      	mov	r0, r3
 800523e:	f001 ff03 	bl	8007048 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8005242:	4603      	mov	r3, r0
 8005244:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8005248:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800524c:	2b7c      	cmp	r3, #124	; 0x7c
 800524e:	d904      	bls.n	800525a <_Z22handleSDORequestUploadRK9RxMessage+0x61a>
 8005250:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005258:	d903      	bls.n	8005262 <_Z22handleSDORequestUploadRK9RxMessage+0x622>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800525a:	2305      	movs	r3, #5
 800525c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005260:	e007      	b.n	8005272 <_Z22handleSDORequestUploadRK9RxMessage+0x632>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8005262:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fe28 	bl	8005ebc <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8005272:	f000 fe07 	bl	8005e84 <_Z20OD_CAN1_Baudrate_getv>
 8005276:	4603      	mov	r3, r0
 8005278:	461a      	mov	r2, r3
 800527a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fc4b 	bl	8006b1c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8005286:	e268      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005288:	2303      	movs	r3, #3
 800528a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Status>(OD_CAN1_Status_get());
 800528e:	f000 fe31 	bl	8005ef4 <_Z18OD_CAN1_Status_getv>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f001 fc52 	bl	8006b46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 80052a2:	e25a      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80052aa:	f000 fe3f 	bl	8005f2c <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80052ae:	4602      	mov	r2, r0
 80052b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fc5a 	bl	8006b70 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80052bc:	e24d      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80052be:	2303      	movs	r3, #3
 80052c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80052c4:	f000 fe4e 	bl	8005f64 <_Z23OD_CAN1_ErrorStatus_getv>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
 80052cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 fc60 	bl	8006b98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80052d8:	e23f      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80052da:	2303      	movs	r3, #3
 80052dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 80052e0:	f000 fe5c 	bl	8005f9c <_Z29OD_CAN1_DelayedTxMessages_getv>
 80052e4:	4602      	mov	r2, r0
 80052e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 fc68 	bl	8006bc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80052f2:	e232      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80052fa:	f000 fe6b 	bl	8005fd4 <_Z20OD_CAN2_TxErrCnt_getv>
 80052fe:	4603      	mov	r3, r0
 8005300:	461a      	mov	r2, r3
 8005302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f001 fc6e 	bl	8006bea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 800530e:	e224      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005310:	2303      	movs	r3, #3
 8005312:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005316:	f000 fe79 	bl	800600c <_Z20OD_CAN2_RxErrCnt_getv>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fc75 	bl	8006c14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 800532a:	e216      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800532c:	2303      	movs	r3, #3
 800532e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005332:	f000 fe87 	bl	8006044 <_Z25OD_CAN2_lastErrorCode_getv>
 8005336:	4602      	mov	r2, r0
 8005338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fc7d 	bl	8006c3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005344:	e209      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CAN2_autoErrorReset>();
 8005346:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fe8e 	bl	800706c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8005356:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800535a:	4618      	mov	r0, r3
 800535c:	f000 feaa 	bl	80060b4 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005360:	2300      	movs	r3, #0
 8005362:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005366:	f000 fe89 	bl	800607c <_Z26OD_CAN2_autoErrorReset_getv>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fc76 	bl	8006c66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 800537a:	e1ee      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_CAN2_Baudrate>();
 800537c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005380:	4618      	mov	r0, r3
 8005382:	f001 fe85 	bl	8007090 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8005386:	4603      	mov	r3, r0
 8005388:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 800538c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005390:	2b7c      	cmp	r3, #124	; 0x7c
 8005392:	d904      	bls.n	800539e <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
 8005394:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800539c:	d903      	bls.n	80053a6 <_Z22handleSDORequestUploadRK9RxMessage+0x766>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800539e:	2305      	movs	r3, #5
 80053a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80053a4:	e007      	b.n	80053b6 <_Z22handleSDORequestUploadRK9RxMessage+0x776>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 80053a6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 feba 	bl	8006124 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80053b6:	f000 fe99 	bl	80060ec <_Z20OD_CAN2_Baudrate_getv>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fc63 	bl	8006c90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 80053ca:	e1c6      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Status>(OD_CAN2_Status_get());
 80053d2:	f000 fec3 	bl	800615c <_Z18OD_CAN2_Status_getv>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 fc6a 	bl	8006cba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 80053e6:	e1b8      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 80053ee:	f000 fed1 	bl	8006194 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 80053f2:	4602      	mov	r2, r0
 80053f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 fc72 	bl	8006ce4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005400:	e1ab      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005402:	2303      	movs	r3, #3
 8005404:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005408:	f000 fee0 	bl	80061cc <_Z23OD_CAN2_ErrorStatus_getv>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fc78 	bl	8006d0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 800541c:	e19d      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800541e:	2303      	movs	r3, #3
 8005420:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005424:	f000 feee 	bl	8006204 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005428:	4602      	mov	r2, r0
 800542a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fc80 	bl	8006d36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005436:	e190      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x800: {   // OD_batterVoltageLow
            float value = msgSdoReq.get<can::signals::PDU_OD_batterVoltageLow>();
 8005438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fe39 	bl	80070b4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_batterVoltageLowEEENT_8dataTypeEv>
 8005442:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.0f || value > 655.35f) {
 8005446:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800544a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005452:	d408      	bmi.n	8005466 <_Z22handleSDORequestUploadRK9RxMessage+0x826>
 8005454:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005458:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8005794 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 800545c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005464:	dd03      	ble.n	800546e <_Z22handleSDORequestUploadRK9RxMessage+0x82e>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005466:	2305      	movs	r3, #5
 8005468:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800546c:	e006      	b.n	800547c <_Z22handleSDORequestUploadRK9RxMessage+0x83c>
            }
            else {
                OD_batterVoltageLow_set(value);
 800546e:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8005472:	f000 ff01 	bl	8006278 <_Z23OD_batterVoltageLow_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageLow>(OD_batterVoltageLow_get());
 800547c:	f000 fede 	bl	800623c <_Z23OD_batterVoltageLow_getv>
 8005480:	eef0 7a40 	vmov.f32	s15, s0
 8005484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005488:	eeb0 0a67 	vmov.f32	s0, s15
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fc66 	bl	8006d5e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>
            break;
 8005492:	e162      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x801: {   // OD_batterVoltageCritical
            float value = msgSdoReq.get<can::signals::PDU_OD_batterVoltageCritical>();
 8005494:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fe1f 	bl	80070dc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals28PDU_OD_batterVoltageCriticalEEENT_8dataTypeEv>
 800549e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
if (value < 0.0f || value > 655.35f) {
 80054a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80054a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ae:	d408      	bmi.n	80054c2 <_Z22handleSDORequestUploadRK9RxMessage+0x882>
 80054b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80054b4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005794 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 80054b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	dd03      	ble.n	80054ca <_Z22handleSDORequestUploadRK9RxMessage+0x88a>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80054c2:	2305      	movs	r3, #5
 80054c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80054c8:	e006      	b.n	80054d8 <_Z22handleSDORequestUploadRK9RxMessage+0x898>
            }
            else {
                OD_batterVoltageCritical_set(value);
 80054ca:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 80054ce:	f000 ff0d 	bl	80062ec <_Z28OD_batterVoltageCritical_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageCritical>(OD_batterVoltageCritical_get());
 80054d8:	f000 feea 	bl	80062b0 <_Z28OD_batterVoltageCritical_getv>
 80054dc:	eef0 7a40 	vmov.f32	s15, s0
 80054e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054e4:	eeb0 0a67 	vmov.f32	s0, s15
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 fc4f 	bl	8006d8c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>
            break;
 80054ee:	e134      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x802: {   // OD_overTempWarn
            float value = msgSdoReq.get<can::signals::PDU_OD_overTempWarn>();
 80054f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 fe05 	bl	8007104 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals19PDU_OD_overTempWarnEEENT_8dataTypeEv>
 80054fa:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 0.0f || value > 6553.5f) {
 80054fe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d408      	bmi.n	800551e <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
 800550c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005510:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8005798 <_Z22handleSDORequestUploadRK9RxMessage+0xb58>
 8005514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	dd03      	ble.n	8005526 <_Z22handleSDORequestUploadRK9RxMessage+0x8e6>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800551e:	2305      	movs	r3, #5
 8005520:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005524:	e006      	b.n	8005534 <_Z22handleSDORequestUploadRK9RxMessage+0x8f4>
            }
            else {
                OD_overTempWarn_set(value);
 8005526:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800552a:	f000 ff19 	bl	8006360 <_Z19OD_overTempWarn_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_overTempWarn>(OD_overTempWarn_get());
 8005534:	f000 fef6 	bl	8006324 <_Z19OD_overTempWarn_getv>
 8005538:	eef0 7a40 	vmov.f32	s15, s0
 800553c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005540:	eeb0 0a67 	vmov.f32	s0, s15
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fc38 	bl	8006dba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>
            break;
 800554a:	e106      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x803: {   // OD_overTempCritical
            float value = msgSdoReq.get<can::signals::PDU_OD_overTempCritical>();
 800554c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fdeb 	bl	800712c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_overTempCriticalEEENT_8dataTypeEv>
 8005556:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
if (value < 0.0f || value > 6553.5f) {
 800555a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800555e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d408      	bmi.n	800557a <_Z22handleSDORequestUploadRK9RxMessage+0x93a>
 8005568:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800556c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005798 <_Z22handleSDORequestUploadRK9RxMessage+0xb58>
 8005570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	dd03      	ble.n	8005582 <_Z22handleSDORequestUploadRK9RxMessage+0x942>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800557a:	2305      	movs	r3, #5
 800557c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005580:	e006      	b.n	8005590 <_Z22handleSDORequestUploadRK9RxMessage+0x950>
            }
            else {
                OD_overTempCritical_set(value);
 8005582:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8005586:	f000 ff25 	bl	80063d4 <_Z23OD_overTempCritical_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_overTempCritical>(OD_overTempCritical_get());
 8005590:	f000 ff02 	bl	8006398 <_Z23OD_overTempCritical_getv>
 8005594:	eef0 7a40 	vmov.f32	s15, s0
 8005598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800559c:	eeb0 0a67 	vmov.f32	s0, s15
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 fc21 	bl	8006de8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>
            break;
 80055a6:	e0d8      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x850: {   // OD_batteryOvercurrent
            float value = msgSdoReq.get<can::signals::PDU_OD_batteryOvercurrent>();
 80055a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fdd1 	bl	8007154 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_batteryOvercurrentEEENT_8dataTypeEv>
 80055b2:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
if (value < 0.0f || value > 655.35f) {
 80055b6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80055ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c2:	d408      	bmi.n	80055d6 <_Z22handleSDORequestUploadRK9RxMessage+0x996>
 80055c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80055c8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005794 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 80055cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d4:	dd03      	ble.n	80055de <_Z22handleSDORequestUploadRK9RxMessage+0x99e>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80055d6:	2305      	movs	r3, #5
 80055d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80055dc:	e006      	b.n	80055ec <_Z22handleSDORequestUploadRK9RxMessage+0x9ac>
            }
            else {
                OD_batteryOvercurrent_set(value);
 80055de:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80055e2:	f000 ff31 	bl	8006448 <_Z25OD_batteryOvercurrent_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batteryOvercurrent>(OD_batteryOvercurrent_get());
 80055ec:	f000 ff0e 	bl	800640c <_Z25OD_batteryOvercurrent_getv>
 80055f0:	eef0 7a40 	vmov.f32	s15, s0
 80055f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f8:	eeb0 0a67 	vmov.f32	s0, s15
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fc0a 	bl	8006e16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>
            break;
 8005602:	e0aa      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x900: {   // OD_currentReadInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_currentReadInterval>();
 8005604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fdb7 	bl	800717c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_currentReadIntervalEEENT_8dataTypeEv>
 800560e:	4603      	mov	r3, r0
 8005610:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                OD_currentReadInterval_set(value);
 8005614:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005618:	4618      	mov	r0, r3
 800561a:	f000 ff4d 	bl	80064b8 <_Z26OD_currentReadInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_currentReadInterval>(OD_currentReadInterval_get());
 8005624:	f000 ff2c 	bl	8006480 <_Z26OD_currentReadInterval_getv>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f001 fc06 	bl	8006e44 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>
            break;
 8005638:	e08f      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x901: {   // OD_statusSendInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_statusSendInterval>();
 800563a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800563e:	4618      	mov	r0, r3
 8005640:	f001 fdae 	bl	80071a0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_statusSendIntervalEEENT_8dataTypeEv>
 8005644:	4603      	mov	r3, r0
 8005646:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                OD_statusSendInterval_set(value);
 800564a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800564e:	4618      	mov	r0, r3
 8005650:	f000 ff6a 	bl	8006528 <_Z25OD_statusSendInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005654:	2300      	movs	r3, #0
 8005656:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_statusSendInterval>(OD_statusSendInterval_get());
 800565a:	f000 ff49 	bl	80064f0 <_Z25OD_statusSendInterval_getv>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fc00 	bl	8006e6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>
            break;
 800566e:	e074      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x902: {   // OD_watchdogTimeout
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_watchdogTimeout>();
 8005670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fda5 	bl	80071c4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals22PDU_OD_watchdogTimeoutEEENT_8dataTypeEv>
 800567a:	4603      	mov	r3, r0
 800567c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                OD_watchdogTimeout_set(value);
 8005680:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005684:	4618      	mov	r0, r3
 8005686:	f000 ff87 	bl	8006598 <_Z22OD_watchdogTimeout_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_watchdogTimeout>(OD_watchdogTimeout_get());
 8005690:	f000 ff66 	bl	8006560 <_Z22OD_watchdogTimeout_getv>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800569c:	4611      	mov	r1, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fbfa 	bl	8006e98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>
            break;
 80056a4:	e059      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xA00: {   // OD_projectXXEnabled
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_projectXXEnabled>();
 80056a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fd9c 	bl	80071e8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_projectXXEnabledEEENT_8dataTypeEv>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                OD_projectXXEnabled_set(value);
 80056b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 ffa4 	bl	8006608 <_Z23OD_projectXXEnabled_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_projectXXEnabled>(OD_projectXXEnabled_get());
 80056c6:	f000 ff83 	bl	80065d0 <_Z23OD_projectXXEnabled_getv>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fbf4 	bl	8006ec2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>
            break;
 80056da:	e03e      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xA02: {   // OD_LedCommands
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_LedCommands>();
 80056dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fd93 	bl	800720c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals18PDU_OD_LedCommandsEEENT_8dataTypeEv>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                OD_LedCommands_set(value);
 80056ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 ffc1 	bl	8006678 <_Z18OD_LedCommands_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_LedCommands>(OD_LedCommands_get());
 80056fc:	f000 ffa0 	bl	8006640 <_Z18OD_LedCommands_getv>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f001 fbee 	bl	8006eec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>
            break;
 8005710:	e023      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xB00: {   // OD_CoolingPumpEnabled
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CoolingPumpEnabled>();
 8005712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fd8a 	bl	8007230 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_CoolingPumpEnabledEEENT_8dataTypeEv>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                OD_CoolingPumpEnabled_set(value);
 8005722:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005726:	4618      	mov	r0, r3
 8005728:	f000 ffde 	bl	80066e8 <_Z25OD_CoolingPumpEnabled_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800572c:	2300      	movs	r3, #0
 800572e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CoolingPumpEnabled>(OD_CoolingPumpEnabled_get());
 8005732:	f000 ffbd 	bl	80066b0 <_Z25OD_CoolingPumpEnabled_getv>
 8005736:	4603      	mov	r3, r0
 8005738:	461a      	mov	r2, r3
 800573a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fbe8 	bl	8006f16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>
            break;
 8005746:	e008      	b.n	800575a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::PDU_SDO_ID>(sdoId);
 8005748:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800574c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fbf4 	bl	8006f40 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005758:	bf00      	nop
    }

    msgSdoResp.set<can::signals::PDU_SDO_RespCode>(respCode);
 800575a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800575e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fc00 	bl	8006f6a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005772:	2200      	movs	r2, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f7fb fd3d 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 800577a:	4b08      	ldr	r3, [pc, #32]	; (800579c <_Z22handleSDORequestUploadRK9RxMessage+0xb5c>)
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	f107 0108 	add.w	r1, r7, #8
 8005782:	2300      	movs	r3, #0
 8005784:	2200      	movs	r2, #0
 8005786:	f00b fefb 	bl	8011580 <osMessageQueuePut>
}
 800578a:	bf00      	nop
 800578c:	3790      	adds	r7, #144	; 0x90
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	4423d666 	.word	0x4423d666
 8005798:	45cccc00 	.word	0x45cccc00
 800579c:	200007c0 	.word	0x200007c0

080057a0 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <_Z13OD_NodeID_getv+0x30>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f04f 31ff 	mov.w	r1, #4294967295
 80057ae:	4618      	mov	r0, r3
 80057b0:	f00b fcab 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_NodeID;
 80057b4:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <_Z13OD_NodeID_getv+0x34>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <_Z13OD_NodeID_getv+0x30>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f00b fcee 	bl	80111a0 <osMutexRelease>
    return value;
 80057c4:	79fb      	ldrb	r3, [r7, #7]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000838 	.word	0x20000838
 80057d4:	200007c9 	.word	0x200007c9

080057d8 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 80057de:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <_Z17OD_NodeStatus_getv+0x30>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f04f 31ff 	mov.w	r1, #4294967295
 80057e6:	4618      	mov	r0, r3
 80057e8:	f00b fc8f 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <_Z17OD_NodeStatus_getv+0x34>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <_Z17OD_NodeStatus_getv+0x30>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f00b fcd2 	bl	80111a0 <osMutexRelease>
    return value;
 80057fc:	79fb      	ldrb	r3, [r7, #7]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	2000083c 	.word	0x2000083c
 800580c:	200007ca 	.word	0x200007ca

08005810 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <_Z22OD_ProtocolVersion_getv+0x30>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f04f 31ff 	mov.w	r1, #4294967295
 800581e:	4618      	mov	r0, r3
 8005820:	f00b fc73 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8005824:	4b07      	ldr	r3, [pc, #28]	; (8005844 <_Z22OD_ProtocolVersion_getv+0x34>)
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <_Z22OD_ProtocolVersion_getv+0x30>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f00b fcb6 	bl	80111a0 <osMutexRelease>
    return value;
 8005834:	88fb      	ldrh	r3, [r7, #6]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000840 	.word	0x20000840
 8005844:	20000000 	.word	0x20000000

08005848 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <_Z19OD_StackVersion_getv+0x30>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f04f 31ff 	mov.w	r1, #4294967295
 8005856:	4618      	mov	r0, r3
 8005858:	f00b fc57 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <_Z19OD_StackVersion_getv+0x34>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <_Z19OD_StackVersion_getv+0x30>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f00b fc9a 	bl	80111a0 <osMutexRelease>
    return value;
 800586c:	88fb      	ldrh	r3, [r7, #6]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000844 	.word	0x20000844
 800587c:	200007cc 	.word	0x200007cc

08005880 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <_Z17OD_DbcVersion_getv+0x30>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f04f 31ff 	mov.w	r1, #4294967295
 800588e:	4618      	mov	r0, r3
 8005890:	f00b fc3b 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <_Z17OD_DbcVersion_getv+0x34>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <_Z17OD_DbcVersion_getv+0x30>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f00b fc7e 	bl	80111a0 <osMutexRelease>
    return value;
 80058a4:	88fb      	ldrh	r3, [r7, #6]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000848 	.word	0x20000848
 80058b4:	200007ce 	.word	0x200007ce

080058b8 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <_Z24OD_HeartbeatInterval_getv+0x30>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f04f 31ff 	mov.w	r1, #4294967295
 80058c6:	4618      	mov	r0, r3
 80058c8:	f00b fc1f 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 80058cc:	4b07      	ldr	r3, [pc, #28]	; (80058ec <_Z24OD_HeartbeatInterval_getv+0x34>)
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <_Z24OD_HeartbeatInterval_getv+0x30>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f00b fc62 	bl	80111a0 <osMutexRelease>
    return value;
 80058dc:	88fb      	ldrh	r3, [r7, #6]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	2000084c 	.word	0x2000084c
 80058ec:	20000002 	.word	0x20000002

080058f0 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005902:	4618      	mov	r0, r3
 8005904:	f00b fc01 	bl	801110a <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8005908:	4a06      	ldr	r2, [pc, #24]	; (8005924 <_Z24OD_HeartbeatInterval_sett+0x34>)
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f00b fc44 	bl	80111a0 <osMutexRelease>
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	2000084c 	.word	0x2000084c
 8005924:	20000002 	.word	0x20000002

08005928 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f04f 31ff 	mov.w	r1, #4294967295
 8005936:	4618      	mov	r0, r3
 8005938:	f00b fbe7 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <_Z21OD_SendOdOnBootup_getv+0x34>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f00b fc2a 	bl	80111a0 <osMutexRelease>
    return value;
 800594c:	79fb      	ldrb	r3, [r7, #7]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000850 	.word	0x20000850
 800595c:	200007d0 	.word	0x200007d0

08005960 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <_Z21OD_SendOdOnBootup_seth+0x30>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f04f 31ff 	mov.w	r1, #4294967295
 8005972:	4618      	mov	r0, r3
 8005974:	f00b fbc9 	bl	801110a <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8005978:	4a06      	ldr	r2, [pc, #24]	; (8005994 <_Z21OD_SendOdOnBootup_seth+0x34>)
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f00b fc0c 	bl	80111a0 <osMutexRelease>
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000850 	.word	0x20000850
 8005994:	200007d0 	.word	0x200007d0

08005998 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f04f 31ff 	mov.w	r1, #4294967295
 80059a6:	4618      	mov	r0, r3
 80059a8:	f00b fbaf 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <_Z26OD_OdEntrySendInterval_getv+0x34>)
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f00b fbf2 	bl	80111a0 <osMutexRelease>
    return value;
 80059bc:	88fb      	ldrh	r3, [r7, #6]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000854 	.word	0x20000854
 80059cc:	20000004 	.word	0x20000004

080059d0 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f04f 31ff 	mov.w	r1, #4294967295
 80059e2:	4618      	mov	r0, r3
 80059e4:	f00b fb91 	bl	801110a <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 80059e8:	4a06      	ldr	r2, [pc, #24]	; (8005a04 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f00b fbd4 	bl	80111a0 <osMutexRelease>
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000854 	.word	0x20000854
 8005a04:	20000004 	.word	0x20000004

08005a08 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <_Z15OD_CpuUsage_getv+0x34>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f04f 31ff 	mov.w	r1, #4294967295
 8005a16:	4618      	mov	r0, r3
 8005a18:	f00b fb77 	bl	801110a <osMutexAcquire>
    float value = OD_CpuUsage;
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <_Z15OD_CpuUsage_getv+0x38>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <_Z15OD_CpuUsage_getv+0x34>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f00b fbba 	bl	80111a0 <osMutexRelease>
    return value;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	ee07 3a90 	vmov	s15, r3
}
 8005a32:	eeb0 0a67 	vmov.f32	s0, s15
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000858 	.word	0x20000858
 8005a40:	200007d4 	.word	0x200007d4

08005a44 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <_Z15OD_CpuUsage_setf+0x30>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f04f 31ff 	mov.w	r1, #4294967295
 8005a56:	4618      	mov	r0, r3
 8005a58:	f00b fb57 	bl	801110a <osMutexAcquire>
    OD_CpuUsage = value;
 8005a5c:	4a06      	ldr	r2, [pc, #24]	; (8005a78 <_Z15OD_CpuUsage_setf+0x34>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 8005a62:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <_Z15OD_CpuUsage_setf+0x30>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f00b fb9a 	bl	80111a0 <osMutexRelease>
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000858 	.word	0x20000858
 8005a78:	200007d4 	.word	0x200007d4

08005a7c <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <_Z14OD_MemFree_getv+0x30>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f04f 31ff 	mov.w	r1, #4294967295
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f00b fb3d 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <_Z14OD_MemFree_getv+0x34>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <_Z14OD_MemFree_getv+0x30>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f00b fb80 	bl	80111a0 <osMutexRelease>
    return value;
 8005aa0:	687b      	ldr	r3, [r7, #4]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000085c 	.word	0x2000085c
 8005ab0:	200007d8 	.word	0x200007d8

08005ab4 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <_Z14OD_MemFree_setm+0x30>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f00b fb20 	bl	801110a <osMutexAcquire>
    OD_MemFree = value;
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <_Z14OD_MemFree_setm+0x34>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <_Z14OD_MemFree_setm+0x30>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f00b fb63 	bl	80111a0 <osMutexRelease>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000085c 	.word	0x2000085c
 8005ae8:	200007d8 	.word	0x200007d8

08005aec <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <_Z16OD_BoardTemp_getv+0x34>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f04f 31ff 	mov.w	r1, #4294967295
 8005afa:	4618      	mov	r0, r3
 8005afc:	f00b fb05 	bl	801110a <osMutexAcquire>
    float value = OD_BoardTemp;
 8005b00:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <_Z16OD_BoardTemp_getv+0x38>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <_Z16OD_BoardTemp_getv+0x34>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f00b fb48 	bl	80111a0 <osMutexRelease>
    return value;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	ee07 3a90 	vmov	s15, r3
}
 8005b16:	eeb0 0a67 	vmov.f32	s0, s15
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000860 	.word	0x20000860
 8005b24:	200007dc 	.word	0x200007dc

08005b28 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <_Z16OD_BoardTemp_setf+0x30>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f04f 31ff 	mov.w	r1, #4294967295
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f00b fae5 	bl	801110a <osMutexAcquire>
    OD_BoardTemp = value;
 8005b40:	4a06      	ldr	r2, [pc, #24]	; (8005b5c <_Z16OD_BoardTemp_setf+0x34>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8005b46:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <_Z16OD_BoardTemp_setf+0x30>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f00b fb28 	bl	80111a0 <osMutexRelease>
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000860 	.word	0x20000860
 8005b5c:	200007dc 	.word	0x200007dc

08005b60 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <_Z19OD_InputVoltage_getv+0x34>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f00b facb 	bl	801110a <osMutexAcquire>
    float value = OD_InputVoltage;
 8005b74:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <_Z19OD_InputVoltage_getv+0x38>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <_Z19OD_InputVoltage_getv+0x34>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f00b fb0e 	bl	80111a0 <osMutexRelease>
    return value;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	ee07 3a90 	vmov	s15, r3
}
 8005b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000864 	.word	0x20000864
 8005b98:	200007e0 	.word	0x200007e0

08005b9c <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <_Z19OD_InputVoltage_setf+0x30>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f04f 31ff 	mov.w	r1, #4294967295
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f00b faab 	bl	801110a <osMutexAcquire>
    OD_InputVoltage = value;
 8005bb4:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <_Z19OD_InputVoltage_setf+0x34>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <_Z19OD_InputVoltage_setf+0x30>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f00b faee 	bl	80111a0 <osMutexRelease>
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000864 	.word	0x20000864
 8005bd0:	200007e0 	.word	0x200007e0

08005bd4 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8005bda:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <_Z14OD_runtime_getv+0x30>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f04f 31ff 	mov.w	r1, #4294967295
 8005be2:	4618      	mov	r0, r3
 8005be4:	f00b fa91 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_runtime;
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <_Z14OD_runtime_getv+0x34>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8005bee:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <_Z14OD_runtime_getv+0x30>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f00b fad4 	bl	80111a0 <osMutexRelease>
    return value;
 8005bf8:	687b      	ldr	r3, [r7, #4]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000868 	.word	0x20000868
 8005c08:	200007e4 	.word	0x200007e4

08005c0c <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8005c12:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <_Z12OD_SdcIn_getv+0x30>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f04f 31ff 	mov.w	r1, #4294967295
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f00b fa75 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <_Z12OD_SdcIn_getv+0x34>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <_Z12OD_SdcIn_getv+0x30>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f00b fab8 	bl	80111a0 <osMutexRelease>
    return value;
 8005c30:	79fb      	ldrb	r3, [r7, #7]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	2000086c 	.word	0x2000086c
 8005c40:	200007e8 	.word	0x200007e8

08005c44 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <_Z13OD_SdcOut_getv+0x30>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8005c52:	4618      	mov	r0, r3
 8005c54:	f00b fa59 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <_Z13OD_SdcOut_getv+0x34>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <_Z13OD_SdcOut_getv+0x30>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f00b fa9c 	bl	80111a0 <osMutexRelease>
    return value;
 8005c68:	79fb      	ldrb	r3, [r7, #7]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000870 	.word	0x20000870
 8005c78:	200007e9 	.word	0x200007e9

08005c7c <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <_Z15OD_ChipUID1_getv+0x38>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f04f 31ff 	mov.w	r1, #4294967295
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f00b fa3d 	bl	801110a <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <_Z15OD_ChipUID1_getv+0x3c>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <_Z15OD_ChipUID1_getv+0x38>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f00b fa7e 	bl	80111a0 <osMutexRelease>
    return value;
 8005ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000874 	.word	0x20000874
 8005cb8:	200007f0 	.word	0x200007f0

08005cbc <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <_Z15OD_ChipUID2_getv+0x38>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f00b fa1d 	bl	801110a <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <_Z15OD_ChipUID2_getv+0x3c>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <_Z15OD_ChipUID2_getv+0x38>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f00b fa5e 	bl	80111a0 <osMutexRelease>
    return value;
 8005ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000878 	.word	0x20000878
 8005cf8:	200007f8 	.word	0x200007f8

08005cfc <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <_Z16OD_BuildDate_getv+0x30>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f04f 31ff 	mov.w	r1, #4294967295
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00b f9fd 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <_Z16OD_BuildDate_getv+0x34>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <_Z16OD_BuildDate_getv+0x30>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f00b fa40 	bl	80111a0 <osMutexRelease>
    return value;
 8005d20:	687b      	ldr	r3, [r7, #4]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	2000087c 	.word	0x2000087c
 8005d30:	20000800 	.word	0x20000800

08005d34 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <_Z16OD_BuildTime_getv+0x30>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8005d42:	4618      	mov	r0, r3
 8005d44:	f00b f9e1 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <_Z16OD_BuildTime_getv+0x34>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <_Z16OD_BuildTime_getv+0x30>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f00b fa24 	bl	80111a0 <osMutexRelease>
    return value;
 8005d58:	687b      	ldr	r3, [r7, #4]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000880 	.word	0x20000880
 8005d68:	20000804 	.word	0x20000804

08005d6c <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f04f 31ff 	mov.w	r1, #4294967295
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f00b f9c5 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f00b fa08 	bl	80111a0 <osMutexRelease>
    return value;
 8005d90:	79fb      	ldrb	r3, [r7, #7]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000884 	.word	0x20000884
 8005da0:	20000808 	.word	0x20000808

08005da4 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f04f 31ff 	mov.w	r1, #4294967295
 8005db2:	4618      	mov	r0, r3
 8005db4:	f00b f9a9 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f00b f9ec 	bl	80111a0 <osMutexRelease>
    return value;
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000888 	.word	0x20000888
 8005dd8:	20000809 	.word	0x20000809

08005ddc <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f04f 31ff 	mov.w	r1, #4294967295
 8005dea:	4618      	mov	r0, r3
 8005dec:	f00b f98d 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f00b f9d0 	bl	80111a0 <osMutexRelease>
    return value;
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	2000088c 	.word	0x2000088c
 8005e10:	2000080c 	.word	0x2000080c

08005e14 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e22:	4618      	mov	r0, r3
 8005e24:	f00b f971 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f00b f9b4 	bl	80111a0 <osMutexRelease>
    return value;
 8005e38:	79fb      	ldrb	r3, [r7, #7]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000890 	.word	0x20000890
 8005e48:	20000006 	.word	0x20000006

08005e4c <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f00b f953 	bl	801110a <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8005e64:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8005e6a:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f00b f996 	bl	80111a0 <osMutexRelease>
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000890 	.word	0x20000890
 8005e80:	20000006 	.word	0x20000006

08005e84 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e92:	4618      	mov	r0, r3
 8005e94:	f00b f939 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f00b f97c 	bl	80111a0 <osMutexRelease>
    return value;
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000894 	.word	0x20000894
 8005eb8:	20000008 	.word	0x20000008

08005ebc <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f04f 31ff 	mov.w	r1, #4294967295
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f00b f91b 	bl	801110a <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8005ed4:	4a06      	ldr	r2, [pc, #24]	; (8005ef0 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8005eda:	4b04      	ldr	r3, [pc, #16]	; (8005eec <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f00b f95e 	bl	80111a0 <osMutexRelease>
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000894 	.word	0x20000894
 8005ef0:	20000008 	.word	0x20000008

08005ef4 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <_Z18OD_CAN1_Status_getv+0x30>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f04f 31ff 	mov.w	r1, #4294967295
 8005f02:	4618      	mov	r0, r3
 8005f04:	f00b f901 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8005f08:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <_Z18OD_CAN1_Status_getv+0x34>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <_Z18OD_CAN1_Status_getv+0x30>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f00b f944 	bl	80111a0 <osMutexRelease>
    return value;
 8005f18:	79fb      	ldrb	r3, [r7, #7]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000898 	.word	0x20000898
 8005f28:	20000810 	.word	0x20000810

08005f2c <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f04f 31ff 	mov.w	r1, #4294967295
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f00b f8e5 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f00b f928 	bl	80111a0 <osMutexRelease>
    return value;
 8005f50:	687b      	ldr	r3, [r7, #4]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2000089c 	.word	0x2000089c
 8005f60:	20000814 	.word	0x20000814

08005f64 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f72:	4618      	mov	r0, r3
 8005f74:	f00b f8c9 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f00b f90c 	bl	80111a0 <osMutexRelease>
    return value;
 8005f88:	79fb      	ldrb	r3, [r7, #7]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200008a0 	.word	0x200008a0
 8005f98:	20000818 	.word	0x20000818

08005f9c <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8005faa:	4618      	mov	r0, r3
 8005fac:	f00b f8ad 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f00b f8f0 	bl	80111a0 <osMutexRelease>
    return value;
 8005fc0:	687b      	ldr	r3, [r7, #4]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	200008a4 	.word	0x200008a4
 8005fd0:	2000081c 	.word	0x2000081c

08005fd4 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f00b f891 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8005fe8:	4b07      	ldr	r3, [pc, #28]	; (8006008 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f00b f8d4 	bl	80111a0 <osMutexRelease>
    return value;
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200008a8 	.word	0x200008a8
 8006008:	20000820 	.word	0x20000820

0800600c <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8006012:	4b0a      	ldr	r3, [pc, #40]	; (800603c <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f04f 31ff 	mov.w	r1, #4294967295
 800601a:	4618      	mov	r0, r3
 800601c:	f00b f875 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f00b f8b8 	bl	80111a0 <osMutexRelease>
    return value;
 8006030:	79fb      	ldrb	r3, [r7, #7]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200008ac 	.word	0x200008ac
 8006040:	20000821 	.word	0x20000821

08006044 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f04f 31ff 	mov.w	r1, #4294967295
 8006052:	4618      	mov	r0, r3
 8006054:	f00b f859 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f00b f89c 	bl	80111a0 <osMutexRelease>
    return value;
 8006068:	687b      	ldr	r3, [r7, #4]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200008b0 	.word	0x200008b0
 8006078:	20000824 	.word	0x20000824

0800607c <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f04f 31ff 	mov.w	r1, #4294967295
 800608a:	4618      	mov	r0, r3
 800608c:	f00b f83d 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f00b f880 	bl	80111a0 <osMutexRelease>
    return value;
 80060a0:	79fb      	ldrb	r3, [r7, #7]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200008b4 	.word	0x200008b4
 80060b0:	2000000a 	.word	0x2000000a

080060b4 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f04f 31ff 	mov.w	r1, #4294967295
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00b f81f 	bl	801110a <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80060cc:	4a06      	ldr	r2, [pc, #24]	; (80060e8 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80060d2:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f00b f862 	bl	80111a0 <osMutexRelease>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	200008b4 	.word	0x200008b4
 80060e8:	2000000a 	.word	0x2000000a

080060ec <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f04f 31ff 	mov.w	r1, #4294967295
 80060fa:	4618      	mov	r0, r3
 80060fc:	f00b f805 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f00b f848 	bl	80111a0 <osMutexRelease>
    return value;
 8006110:	88fb      	ldrh	r3, [r7, #6]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200008b8 	.word	0x200008b8
 8006120:	2000000c 	.word	0x2000000c

08006124 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f04f 31ff 	mov.w	r1, #4294967295
 8006136:	4618      	mov	r0, r3
 8006138:	f00a ffe7 	bl	801110a <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 800613c:	4a06      	ldr	r2, [pc, #24]	; (8006158 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006142:	4b04      	ldr	r3, [pc, #16]	; (8006154 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f00b f82a 	bl	80111a0 <osMutexRelease>
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200008b8 	.word	0x200008b8
 8006158:	2000000c 	.word	0x2000000c

0800615c <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <_Z18OD_CAN2_Status_getv+0x30>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f04f 31ff 	mov.w	r1, #4294967295
 800616a:	4618      	mov	r0, r3
 800616c:	f00a ffcd 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <_Z18OD_CAN2_Status_getv+0x34>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <_Z18OD_CAN2_Status_getv+0x30>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f00b f810 	bl	80111a0 <osMutexRelease>
    return value;
 8006180:	79fb      	ldrb	r3, [r7, #7]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200008bc 	.word	0x200008bc
 8006190:	20000828 	.word	0x20000828

08006194 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f04f 31ff 	mov.w	r1, #4294967295
 80061a2:	4618      	mov	r0, r3
 80061a4:	f00a ffb1 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f00a fff4 	bl	80111a0 <osMutexRelease>
    return value;
 80061b8:	687b      	ldr	r3, [r7, #4]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	200008c0 	.word	0x200008c0
 80061c8:	2000082c 	.word	0x2000082c

080061cc <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f04f 31ff 	mov.w	r1, #4294967295
 80061da:	4618      	mov	r0, r3
 80061dc:	f00a ff95 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f00a ffd8 	bl	80111a0 <osMutexRelease>
    return value;
 80061f0:	79fb      	ldrb	r3, [r7, #7]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	200008c4 	.word	0x200008c4
 8006200:	20000830 	.word	0x20000830

08006204 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f04f 31ff 	mov.w	r1, #4294967295
 8006212:	4618      	mov	r0, r3
 8006214:	f00a ff79 	bl	801110a <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8006218:	4b07      	ldr	r3, [pc, #28]	; (8006238 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f00a ffbc 	bl	80111a0 <osMutexRelease>
    return value;
 8006228:	687b      	ldr	r3, [r7, #4]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	200008c8 	.word	0x200008c8
 8006238:	20000834 	.word	0x20000834

0800623c <_Z23OD_batterVoltageLow_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_batterVoltageLow_GET_OVERWRITE
float WEAK_SYMBOL OD_batterVoltageLow_get() {
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batterVoltageLow, portMAX_DELAY);
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <_Z23OD_batterVoltageLow_getv+0x34>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f04f 31ff 	mov.w	r1, #4294967295
 800624a:	4618      	mov	r0, r3
 800624c:	f00a ff5d 	bl	801110a <osMutexAcquire>
    float value = OD_batterVoltageLow;
 8006250:	4b08      	ldr	r3, [pc, #32]	; (8006274 <_Z23OD_batterVoltageLow_getv+0x38>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batterVoltageLow);
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <_Z23OD_batterVoltageLow_getv+0x34>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f00a ffa0 	bl	80111a0 <osMutexRelease>
    return value;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	ee07 3a90 	vmov	s15, r3
}
 8006266:	eeb0 0a67 	vmov.f32	s0, s15
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200008cc 	.word	0x200008cc
 8006274:	20000010 	.word	0x20000010

08006278 <_Z23OD_batterVoltageLow_setf>:
#endif
#ifndef OD_batterVoltageLow_SET_OVERWRITE
void WEAK_SYMBOL OD_batterVoltageLow_set(const float value) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batterVoltageLow, portMAX_DELAY);
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <_Z23OD_batterVoltageLow_setf+0x30>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f04f 31ff 	mov.w	r1, #4294967295
 800628a:	4618      	mov	r0, r3
 800628c:	f00a ff3d 	bl	801110a <osMutexAcquire>
    OD_batterVoltageLow = value;
 8006290:	4a06      	ldr	r2, [pc, #24]	; (80062ac <_Z23OD_batterVoltageLow_setf+0x34>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batterVoltageLow);
 8006296:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <_Z23OD_batterVoltageLow_setf+0x30>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f00a ff80 	bl	80111a0 <osMutexRelease>
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	200008cc 	.word	0x200008cc
 80062ac:	20000010 	.word	0x20000010

080062b0 <_Z28OD_batterVoltageCritical_getv>:
#endif

#ifndef OD_batterVoltageCritical_GET_OVERWRITE
float WEAK_SYMBOL OD_batterVoltageCritical_get() {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batterVoltageCritical, portMAX_DELAY);
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <_Z28OD_batterVoltageCritical_getv+0x34>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f04f 31ff 	mov.w	r1, #4294967295
 80062be:	4618      	mov	r0, r3
 80062c0:	f00a ff23 	bl	801110a <osMutexAcquire>
    float value = OD_batterVoltageCritical;
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <_Z28OD_batterVoltageCritical_getv+0x38>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batterVoltageCritical);
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <_Z28OD_batterVoltageCritical_getv+0x34>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f00a ff66 	bl	80111a0 <osMutexRelease>
    return value;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	ee07 3a90 	vmov	s15, r3
}
 80062da:	eeb0 0a67 	vmov.f32	s0, s15
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	200008d0 	.word	0x200008d0
 80062e8:	20000014 	.word	0x20000014

080062ec <_Z28OD_batterVoltageCritical_setf>:
#endif
#ifndef OD_batterVoltageCritical_SET_OVERWRITE
void WEAK_SYMBOL OD_batterVoltageCritical_set(const float value) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batterVoltageCritical, portMAX_DELAY);
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <_Z28OD_batterVoltageCritical_setf+0x30>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f04f 31ff 	mov.w	r1, #4294967295
 80062fe:	4618      	mov	r0, r3
 8006300:	f00a ff03 	bl	801110a <osMutexAcquire>
    OD_batterVoltageCritical = value;
 8006304:	4a06      	ldr	r2, [pc, #24]	; (8006320 <_Z28OD_batterVoltageCritical_setf+0x34>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batterVoltageCritical);
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <_Z28OD_batterVoltageCritical_setf+0x30>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f00a ff46 	bl	80111a0 <osMutexRelease>
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	200008d0 	.word	0x200008d0
 8006320:	20000014 	.word	0x20000014

08006324 <_Z19OD_overTempWarn_getv>:
#endif

#ifndef OD_overTempWarn_GET_OVERWRITE
float WEAK_SYMBOL OD_overTempWarn_get() {
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_overTempWarn, portMAX_DELAY);
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <_Z19OD_overTempWarn_getv+0x34>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f04f 31ff 	mov.w	r1, #4294967295
 8006332:	4618      	mov	r0, r3
 8006334:	f00a fee9 	bl	801110a <osMutexAcquire>
    float value = OD_overTempWarn;
 8006338:	4b08      	ldr	r3, [pc, #32]	; (800635c <_Z19OD_overTempWarn_getv+0x38>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_overTempWarn);
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <_Z19OD_overTempWarn_getv+0x34>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f00a ff2c 	bl	80111a0 <osMutexRelease>
    return value;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	ee07 3a90 	vmov	s15, r3
}
 800634e:	eeb0 0a67 	vmov.f32	s0, s15
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200008d4 	.word	0x200008d4
 800635c:	20000018 	.word	0x20000018

08006360 <_Z19OD_overTempWarn_setf>:
#endif
#ifndef OD_overTempWarn_SET_OVERWRITE
void WEAK_SYMBOL OD_overTempWarn_set(const float value) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_overTempWarn, portMAX_DELAY);
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <_Z19OD_overTempWarn_setf+0x30>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f04f 31ff 	mov.w	r1, #4294967295
 8006372:	4618      	mov	r0, r3
 8006374:	f00a fec9 	bl	801110a <osMutexAcquire>
    OD_overTempWarn = value;
 8006378:	4a06      	ldr	r2, [pc, #24]	; (8006394 <_Z19OD_overTempWarn_setf+0x34>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_overTempWarn);
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <_Z19OD_overTempWarn_setf+0x30>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f00a ff0c 	bl	80111a0 <osMutexRelease>
}
 8006388:	bf00      	nop
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200008d4 	.word	0x200008d4
 8006394:	20000018 	.word	0x20000018

08006398 <_Z23OD_overTempCritical_getv>:
#endif

#ifndef OD_overTempCritical_GET_OVERWRITE
float WEAK_SYMBOL OD_overTempCritical_get() {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_overTempCritical, portMAX_DELAY);
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <_Z23OD_overTempCritical_getv+0x34>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f04f 31ff 	mov.w	r1, #4294967295
 80063a6:	4618      	mov	r0, r3
 80063a8:	f00a feaf 	bl	801110a <osMutexAcquire>
    float value = OD_overTempCritical;
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <_Z23OD_overTempCritical_getv+0x38>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_overTempCritical);
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <_Z23OD_overTempCritical_getv+0x34>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f00a fef2 	bl	80111a0 <osMutexRelease>
    return value;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	ee07 3a90 	vmov	s15, r3
}
 80063c2:	eeb0 0a67 	vmov.f32	s0, s15
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	200008d8 	.word	0x200008d8
 80063d0:	2000001c 	.word	0x2000001c

080063d4 <_Z23OD_overTempCritical_setf>:
#endif
#ifndef OD_overTempCritical_SET_OVERWRITE
void WEAK_SYMBOL OD_overTempCritical_set(const float value) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_overTempCritical, portMAX_DELAY);
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <_Z23OD_overTempCritical_setf+0x30>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f04f 31ff 	mov.w	r1, #4294967295
 80063e6:	4618      	mov	r0, r3
 80063e8:	f00a fe8f 	bl	801110a <osMutexAcquire>
    OD_overTempCritical = value;
 80063ec:	4a06      	ldr	r2, [pc, #24]	; (8006408 <_Z23OD_overTempCritical_setf+0x34>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_overTempCritical);
 80063f2:	4b04      	ldr	r3, [pc, #16]	; (8006404 <_Z23OD_overTempCritical_setf+0x30>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f00a fed2 	bl	80111a0 <osMutexRelease>
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	200008d8 	.word	0x200008d8
 8006408:	2000001c 	.word	0x2000001c

0800640c <_Z25OD_batteryOvercurrent_getv>:
#endif

#ifndef OD_batteryOvercurrent_GET_OVERWRITE
float WEAK_SYMBOL OD_batteryOvercurrent_get() {
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batteryOvercurrent, portMAX_DELAY);
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <_Z25OD_batteryOvercurrent_getv+0x34>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f04f 31ff 	mov.w	r1, #4294967295
 800641a:	4618      	mov	r0, r3
 800641c:	f00a fe75 	bl	801110a <osMutexAcquire>
    float value = OD_batteryOvercurrent;
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <_Z25OD_batteryOvercurrent_getv+0x38>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batteryOvercurrent);
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <_Z25OD_batteryOvercurrent_getv+0x34>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f00a feb8 	bl	80111a0 <osMutexRelease>
    return value;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	ee07 3a90 	vmov	s15, r3
}
 8006436:	eeb0 0a67 	vmov.f32	s0, s15
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200008dc 	.word	0x200008dc
 8006444:	20000020 	.word	0x20000020

08006448 <_Z25OD_batteryOvercurrent_setf>:
#endif
#ifndef OD_batteryOvercurrent_SET_OVERWRITE
void WEAK_SYMBOL OD_batteryOvercurrent_set(const float value) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batteryOvercurrent, portMAX_DELAY);
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <_Z25OD_batteryOvercurrent_setf+0x30>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f04f 31ff 	mov.w	r1, #4294967295
 800645a:	4618      	mov	r0, r3
 800645c:	f00a fe55 	bl	801110a <osMutexAcquire>
    OD_batteryOvercurrent = value;
 8006460:	4a06      	ldr	r2, [pc, #24]	; (800647c <_Z25OD_batteryOvercurrent_setf+0x34>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batteryOvercurrent);
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <_Z25OD_batteryOvercurrent_setf+0x30>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f00a fe98 	bl	80111a0 <osMutexRelease>
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	200008dc 	.word	0x200008dc
 800647c:	20000020 	.word	0x20000020

08006480 <_Z26OD_currentReadInterval_getv>:
#endif

#ifndef OD_currentReadInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_currentReadInterval_get() {
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_currentReadInterval, portMAX_DELAY);
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <_Z26OD_currentReadInterval_getv+0x30>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f04f 31ff 	mov.w	r1, #4294967295
 800648e:	4618      	mov	r0, r3
 8006490:	f00a fe3b 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_currentReadInterval;
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <_Z26OD_currentReadInterval_getv+0x34>)
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_currentReadInterval);
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <_Z26OD_currentReadInterval_getv+0x30>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f00a fe7e 	bl	80111a0 <osMutexRelease>
    return value;
 80064a4:	88fb      	ldrh	r3, [r7, #6]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200008e0 	.word	0x200008e0
 80064b4:	20000024 	.word	0x20000024

080064b8 <_Z26OD_currentReadInterval_sett>:
#endif
#ifndef OD_currentReadInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_currentReadInterval_set(const uint16_t value) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_currentReadInterval, portMAX_DELAY);
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <_Z26OD_currentReadInterval_sett+0x30>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f04f 31ff 	mov.w	r1, #4294967295
 80064ca:	4618      	mov	r0, r3
 80064cc:	f00a fe1d 	bl	801110a <osMutexAcquire>
    OD_currentReadInterval = value;
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <_Z26OD_currentReadInterval_sett+0x34>)
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_currentReadInterval);
 80064d6:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <_Z26OD_currentReadInterval_sett+0x30>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f00a fe60 	bl	80111a0 <osMutexRelease>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	200008e0 	.word	0x200008e0
 80064ec:	20000024 	.word	0x20000024

080064f0 <_Z25OD_statusSendInterval_getv>:
#endif

#ifndef OD_statusSendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_statusSendInterval_get() {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_statusSendInterval, portMAX_DELAY);
 80064f6:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <_Z25OD_statusSendInterval_getv+0x30>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f04f 31ff 	mov.w	r1, #4294967295
 80064fe:	4618      	mov	r0, r3
 8006500:	f00a fe03 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_statusSendInterval;
 8006504:	4b07      	ldr	r3, [pc, #28]	; (8006524 <_Z25OD_statusSendInterval_getv+0x34>)
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_statusSendInterval);
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <_Z25OD_statusSendInterval_getv+0x30>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f00a fe46 	bl	80111a0 <osMutexRelease>
    return value;
 8006514:	88fb      	ldrh	r3, [r7, #6]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	200008e4 	.word	0x200008e4
 8006524:	20000026 	.word	0x20000026

08006528 <_Z25OD_statusSendInterval_sett>:
#endif
#ifndef OD_statusSendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_statusSendInterval_set(const uint16_t value) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_statusSendInterval, portMAX_DELAY);
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <_Z25OD_statusSendInterval_sett+0x30>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f04f 31ff 	mov.w	r1, #4294967295
 800653a:	4618      	mov	r0, r3
 800653c:	f00a fde5 	bl	801110a <osMutexAcquire>
    OD_statusSendInterval = value;
 8006540:	4a06      	ldr	r2, [pc, #24]	; (800655c <_Z25OD_statusSendInterval_sett+0x34>)
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_statusSendInterval);
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <_Z25OD_statusSendInterval_sett+0x30>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f00a fe28 	bl	80111a0 <osMutexRelease>
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	200008e4 	.word	0x200008e4
 800655c:	20000026 	.word	0x20000026

08006560 <_Z22OD_watchdogTimeout_getv>:
#endif

#ifndef OD_watchdogTimeout_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_watchdogTimeout_get() {
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_watchdogTimeout, portMAX_DELAY);
 8006566:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <_Z22OD_watchdogTimeout_getv+0x30>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f04f 31ff 	mov.w	r1, #4294967295
 800656e:	4618      	mov	r0, r3
 8006570:	f00a fdcb 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_watchdogTimeout;
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <_Z22OD_watchdogTimeout_getv+0x34>)
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_watchdogTimeout);
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <_Z22OD_watchdogTimeout_getv+0x30>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f00a fe0e 	bl	80111a0 <osMutexRelease>
    return value;
 8006584:	88fb      	ldrh	r3, [r7, #6]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200008e8 	.word	0x200008e8
 8006594:	20000028 	.word	0x20000028

08006598 <_Z22OD_watchdogTimeout_sett>:
#endif
#ifndef OD_watchdogTimeout_SET_OVERWRITE
void WEAK_SYMBOL OD_watchdogTimeout_set(const uint16_t value) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_watchdogTimeout, portMAX_DELAY);
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <_Z22OD_watchdogTimeout_sett+0x30>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f04f 31ff 	mov.w	r1, #4294967295
 80065aa:	4618      	mov	r0, r3
 80065ac:	f00a fdad 	bl	801110a <osMutexAcquire>
    OD_watchdogTimeout = value;
 80065b0:	4a06      	ldr	r2, [pc, #24]	; (80065cc <_Z22OD_watchdogTimeout_sett+0x34>)
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_watchdogTimeout);
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <_Z22OD_watchdogTimeout_sett+0x30>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f00a fdf0 	bl	80111a0 <osMutexRelease>
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200008e8 	.word	0x200008e8
 80065cc:	20000028 	.word	0x20000028

080065d0 <_Z23OD_projectXXEnabled_getv>:
#endif

#ifndef OD_projectXXEnabled_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_projectXXEnabled_get() {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_projectXXEnabled, portMAX_DELAY);
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <_Z23OD_projectXXEnabled_getv+0x30>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f04f 31ff 	mov.w	r1, #4294967295
 80065de:	4618      	mov	r0, r3
 80065e0:	f00a fd93 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_projectXXEnabled;
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <_Z23OD_projectXXEnabled_getv+0x34>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_projectXXEnabled);
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <_Z23OD_projectXXEnabled_getv+0x30>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f00a fdd6 	bl	80111a0 <osMutexRelease>
    return value;
 80065f4:	79fb      	ldrb	r3, [r7, #7]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200008ec 	.word	0x200008ec
 8006604:	2000002a 	.word	0x2000002a

08006608 <_Z23OD_projectXXEnabled_seth>:
#endif
#ifndef OD_projectXXEnabled_SET_OVERWRITE
void WEAK_SYMBOL OD_projectXXEnabled_set(const uint8_t value) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_projectXXEnabled, portMAX_DELAY);
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <_Z23OD_projectXXEnabled_seth+0x30>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f04f 31ff 	mov.w	r1, #4294967295
 800661a:	4618      	mov	r0, r3
 800661c:	f00a fd75 	bl	801110a <osMutexAcquire>
    OD_projectXXEnabled = value;
 8006620:	4a06      	ldr	r2, [pc, #24]	; (800663c <_Z23OD_projectXXEnabled_seth+0x34>)
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_projectXXEnabled);
 8006626:	4b04      	ldr	r3, [pc, #16]	; (8006638 <_Z23OD_projectXXEnabled_seth+0x30>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f00a fdb8 	bl	80111a0 <osMutexRelease>
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	200008ec 	.word	0x200008ec
 800663c:	2000002a 	.word	0x2000002a

08006640 <_Z18OD_LedCommands_getv>:
#endif

#ifndef OD_LedCommands_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_LedCommands_get() {
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_LedCommands, portMAX_DELAY);
 8006646:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <_Z18OD_LedCommands_getv+0x30>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f04f 31ff 	mov.w	r1, #4294967295
 800664e:	4618      	mov	r0, r3
 8006650:	f00a fd5b 	bl	801110a <osMutexAcquire>
    uint16_t value = OD_LedCommands;
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <_Z18OD_LedCommands_getv+0x34>)
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_LedCommands);
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <_Z18OD_LedCommands_getv+0x30>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f00a fd9e 	bl	80111a0 <osMutexRelease>
    return value;
 8006664:	88fb      	ldrh	r3, [r7, #6]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	200008f0 	.word	0x200008f0
 8006674:	2000002c 	.word	0x2000002c

08006678 <_Z18OD_LedCommands_sett>:
#endif
#ifndef OD_LedCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_LedCommands_set(const uint16_t value) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_LedCommands, portMAX_DELAY);
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <_Z18OD_LedCommands_sett+0x30>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f04f 31ff 	mov.w	r1, #4294967295
 800668a:	4618      	mov	r0, r3
 800668c:	f00a fd3d 	bl	801110a <osMutexAcquire>
    OD_LedCommands = value;
 8006690:	4a06      	ldr	r2, [pc, #24]	; (80066ac <_Z18OD_LedCommands_sett+0x34>)
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_LedCommands);
 8006696:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <_Z18OD_LedCommands_sett+0x30>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f00a fd80 	bl	80111a0 <osMutexRelease>
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200008f0 	.word	0x200008f0
 80066ac:	2000002c 	.word	0x2000002c

080066b0 <_Z25OD_CoolingPumpEnabled_getv>:
#endif

#ifndef OD_CoolingPumpEnabled_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CoolingPumpEnabled_get() {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPumpEnabled, portMAX_DELAY);
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <_Z25OD_CoolingPumpEnabled_getv+0x30>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f04f 31ff 	mov.w	r1, #4294967295
 80066be:	4618      	mov	r0, r3
 80066c0:	f00a fd23 	bl	801110a <osMutexAcquire>
    uint8_t value = OD_CoolingPumpEnabled;
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <_Z25OD_CoolingPumpEnabled_getv+0x34>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CoolingPumpEnabled);
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <_Z25OD_CoolingPumpEnabled_getv+0x30>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f00a fd66 	bl	80111a0 <osMutexRelease>
    return value;
 80066d4:	79fb      	ldrb	r3, [r7, #7]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	200008f4 	.word	0x200008f4
 80066e4:	2000002e 	.word	0x2000002e

080066e8 <_Z25OD_CoolingPumpEnabled_seth>:
#endif
#ifndef OD_CoolingPumpEnabled_SET_OVERWRITE
void WEAK_SYMBOL OD_CoolingPumpEnabled_set(const uint8_t value) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CoolingPumpEnabled, portMAX_DELAY);
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <_Z25OD_CoolingPumpEnabled_seth+0x30>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f04f 31ff 	mov.w	r1, #4294967295
 80066fa:	4618      	mov	r0, r3
 80066fc:	f00a fd05 	bl	801110a <osMutexAcquire>
    OD_CoolingPumpEnabled = value;
 8006700:	4a06      	ldr	r2, [pc, #24]	; (800671c <_Z25OD_CoolingPumpEnabled_seth+0x34>)
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CoolingPumpEnabled);
 8006706:	4b04      	ldr	r3, [pc, #16]	; (8006718 <_Z25OD_CoolingPumpEnabled_seth+0x30>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f00a fd48 	bl	80111a0 <osMutexRelease>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	200008f4 	.word	0x200008f4
 800671c:	2000002e 	.word	0x2000002e

08006720 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0208 	add.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3310      	adds	r3, #16
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fb ff8f 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800673a:	4603      	mov	r3, r0
        }
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f103 0008 	add.w	r0, r3, #8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f103 0110 	add.w	r1, r3, #16
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	f7fd fd7b 	bl	800425c <_ZN3can7signals13PDU_OD_NodeID3setERyS2_Rhh>
        }
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f103 0008 	add.w	r0, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f103 0110 	add.w	r1, r3, #16
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	f7fd fd33 	bl	80041f6 <_ZN3can7signals17PDU_OD_NodeStatus3setERyS2_Rhh>
        }
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f103 0008 	add.w	r0, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f103 0110 	add.w	r1, r3, #16
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1d1a      	adds	r2, r3, #4
 80067b4:	887b      	ldrh	r3, [r7, #2]
 80067b6:	f7fd fcf0 	bl	800419a <_ZN3can7signals22PDU_OD_ProtocolVersion3setERyS2_Rht>
        }
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f103 0008 	add.w	r0, r3, #8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f103 0110 	add.w	r1, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	887b      	ldrh	r3, [r7, #2]
 80067e0:	f7fd fcad 	bl	800413e <_ZN3can7signals19PDU_OD_StackVersion3setERyS2_Rht>
        }
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f103 0008 	add.w	r0, r3, #8
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f103 0110 	add.w	r1, r3, #16
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	f7fd fc6a 	bl	80040e2 <_ZN3can7signals17PDU_OD_DbcVersion3setERyS2_Rht>
        }
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f103 0008 	add.w	r0, r3, #8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f103 0110 	add.w	r1, r3, #16
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	887b      	ldrh	r3, [r7, #2]
 8006834:	f7fd fc03 	bl	800403e <_ZN3can7signals24PDU_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f103 0008 	add.w	r0, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f103 0110 	add.w	r1, r3, #16
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f7fd fb97 	bl	8003f90 <_ZN3can7signals21PDU_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f103 0008 	add.w	r0, r3, #8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f103 0110 	add.w	r1, r3, #16
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	1d1a      	adds	r2, r3, #4
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	f7fd fb30 	bl	8003eec <_ZN3can7signals26PDU_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f103 0008 	add.w	r0, r3, #8
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f103 0110 	add.w	r1, r3, #16
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	ed97 0a00 	vldr	s0, [r7]
 80068b4:	461a      	mov	r2, r3
 80068b6:	f7fd fabb 	bl	8003e30 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf>
        }
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0008 	add.w	r0, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f103 0110 	add.w	r1, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f7fd fa6f 	bl	8003dc0 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm>
        }
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f103 0008 	add.w	r0, r3, #8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f103 0110 	add.w	r1, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	ed97 0a00 	vldr	s0, [r7]
 800690a:	461a      	mov	r2, r3
 800690c:	f7fd f9f6 	bl	8003cfc <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf>
        }
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f103 0008 	add.w	r0, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f103 0110 	add.w	r1, r3, #16
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	ed97 0a00 	vldr	s0, [r7]
 8006938:	461a      	mov	r2, r3
 800693a:	f7fd f985 	bl	8003c48 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf>
        }
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f103 0008 	add.w	r0, r3, #8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f103 0110 	add.w	r1, r3, #16
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1d1a      	adds	r2, r3, #4
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f7fd f937 	bl	8003bd4 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm>
        }
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f103 0008 	add.w	r0, r3, #8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f103 0110 	add.w	r1, r3, #16
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	1d1a      	adds	r2, r3, #4
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f7fd f8ee 	bl	8003b6c <_ZN3can7signals12PDU_OD_SdcIn3setERyS2_Rhh>
        }
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f103 0008 	add.w	r0, r3, #8
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f103 0110 	add.w	r1, r3, #16
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1d1a      	adds	r2, r3, #4
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	f7fd f8a5 	bl	8003b04 <_ZN3can7signals13PDU_OD_SdcOut3setERyS2_Rhh>
        }
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80069c2:	b590      	push	{r4, r7, lr}
 80069c4:	b087      	sub	sp, #28
 80069c6:	af02      	add	r7, sp, #8
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f103 0008 	add.w	r0, r3, #8
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f103 0110 	add.w	r1, r3, #16
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1d1c      	adds	r4, r3, #4
 80069de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e2:	e9cd 2300 	strd	r2, r3, [sp]
 80069e6:	4622      	mov	r2, r4
 80069e8:	f7fd f853 	bl	8003a92 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy>
        }
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd90      	pop	{r4, r7, pc}

080069f4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f103 0008 	add.w	r0, r3, #8
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f103 0110 	add.w	r1, r3, #16
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1d1c      	adds	r4, r3, #4
 8006a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a14:	e9cd 2300 	strd	r2, r3, [sp]
 8006a18:	4622      	mov	r2, r4
 8006a1a:	f7fd f801 	bl	8003a20 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy>
        }
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd90      	pop	{r4, r7, pc}

08006a26 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f103 0008 	add.w	r0, r3, #8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f103 0110 	add.w	r1, r3, #16
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1d1a      	adds	r2, r3, #4
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f7fc ffb5 	bl	80039b0 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm>
        }
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f103 0008 	add.w	r0, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f103 0110 	add.w	r1, r3, #16
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	1d1a      	adds	r2, r3, #4
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f7fc ff67 	bl	800393c <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm>
        }
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f103 0008 	add.w	r0, r3, #8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f103 0110 	add.w	r1, r3, #16
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	f7fc ff1e 	bl	80038d4 <_ZN3can7signals20PDU_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 0008 	add.w	r0, r3, #8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f103 0110 	add.w	r1, r3, #16
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	1d1a      	adds	r2, r3, #4
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f7fc fed5 	bl	800386c <_ZN3can7signals20PDU_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f103 0008 	add.w	r0, r3, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f103 0110 	add.w	r1, r3, #16
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f7fc fe89 	bl	80037fc <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f103 0008 	add.w	r0, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f103 0110 	add.w	r1, r3, #16
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	f7fc fe18 	bl	8003744 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f103 0008 	add.w	r0, r3, #8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f103 0110 	add.w	r1, r3, #16
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	1d1a      	adds	r2, r3, #4
 8006b38:	887b      	ldrh	r3, [r7, #2]
 8006b3a:	f7fc fda1 	bl	8003680 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f103 0008 	add.w	r0, r3, #8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f103 0110 	add.w	r1, r3, #16
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	1d1a      	adds	r2, r3, #4
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f7fc fd58 	bl	8003618 <_ZN3can7signals18PDU_OD_CAN1_Status3setERyS2_Rhh>
        }
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f103 0008 	add.w	r0, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f103 0110 	add.w	r1, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1d1a      	adds	r2, r3, #4
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f7fc fd0a 	bl	80035a4 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f103 0008 	add.w	r0, r3, #8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f103 0110 	add.w	r1, r3, #16
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	1d1a      	adds	r2, r3, #4
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	f7fc fcc1 	bl	800353c <_ZN3can7signals23PDU_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f103 0008 	add.w	r0, r3, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f103 0110 	add.w	r1, r3, #16
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	1d1a      	adds	r2, r3, #4
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	f7fc fc73 	bl	80034c8 <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f103 0008 	add.w	r0, r3, #8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f103 0110 	add.w	r1, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f7fc fc2a 	bl	8003460 <_ZN3can7signals20PDU_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f103 0008 	add.w	r0, r3, #8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f103 0110 	add.w	r1, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	f7fc fbe1 	bl	80033f8 <_ZN3can7signals20PDU_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f103 0008 	add.w	r0, r3, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f103 0110 	add.w	r1, r3, #16
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f7fc fb95 	bl	8003388 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f103 0008 	add.w	r0, r3, #8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f103 0110 	add.w	r1, r3, #16
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	1d1a      	adds	r2, r3, #4
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	f7fc fb24 	bl	80032d0 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 0008 	add.w	r0, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f103 0110 	add.w	r1, r3, #16
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	1d1a      	adds	r2, r3, #4
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	f7fc faad 	bl	800320c <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f103 0008 	add.w	r0, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f103 0110 	add.w	r1, r3, #16
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1d1a      	adds	r2, r3, #4
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	f7fc fa64 	bl	80031a4 <_ZN3can7signals18PDU_OD_CAN2_Status3setERyS2_Rhh>
        }
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f103 0008 	add.w	r0, r3, #8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f103 0110 	add.w	r1, r3, #16
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f7fc fa16 	bl	8003130 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0008 	add.w	r0, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f103 0110 	add.w	r1, r3, #16
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	1d1a      	adds	r2, r3, #4
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	f7fc f9cd 	bl	80030c8 <_ZN3can7signals23PDU_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f103 0008 	add.w	r0, r3, #8
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 0110 	add.w	r1, r3, #16
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f7fc f97f 	bl	8003054 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f103 0008 	add.w	r0, r3, #8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f103 0110 	add.w	r1, r3, #16
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	ed97 0a00 	vldr	s0, [r7]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f7fc f8de 	bl	8002f40 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf>
        }
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f103 0008 	add.w	r0, r3, #8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f103 0110 	add.w	r1, r3, #16
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3304      	adds	r3, #4
 8006da8:	ed97 0a00 	vldr	s0, [r7]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f7fc f83b 	bl	8002e28 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf>
        }
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f103 0008 	add.w	r0, r3, #8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f103 0110 	add.w	r1, r3, #16
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	ed97 0a00 	vldr	s0, [r7]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f7fb ff98 	bl	8002d10 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf>
        }
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 0008 	add.w	r0, r3, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f103 0110 	add.w	r1, r3, #16
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	ed97 0a00 	vldr	s0, [r7]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f7fb fef5 	bl	8002bf8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf>
        }
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f103 0008 	add.w	r0, r3, #8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f103 0110 	add.w	r1, r3, #16
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	ed97 0a00 	vldr	s0, [r7]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fb fe54 	bl	8002ae4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf>
        }
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f103 0008 	add.w	r0, r3, #8
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f103 0110 	add.w	r1, r3, #16
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	887b      	ldrh	r3, [r7, #2]
 8006e62:	f7fb fdea 	bl	8002a3a <_ZN3can7signals26PDU_OD_currentReadInterval3setERyS2_Rht>
        }
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f103 0008 	add.w	r0, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f103 0110 	add.w	r1, r3, #16
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	f7fb fd7f 	bl	800298e <_ZN3can7signals25PDU_OD_statusSendInterval3setERyS2_Rht>
        }
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f103 0008 	add.w	r0, r3, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f103 0110 	add.w	r1, r3, #16
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	f7fb fd14 	bl	80028e2 <_ZN3can7signals22PDU_OD_watchdogTimeout3setERyS2_Rht>
        }
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f103 0008 	add.w	r0, r3, #8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0110 	add.w	r1, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	1d1a      	adds	r2, r3, #4
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	f7fb fca6 	bl	8002830 <_ZN3can7signals23PDU_OD_projectXXEnabled3setERyS2_Rhh>
        }
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f103 0008 	add.w	r0, r3, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f103 0110 	add.w	r1, r3, #16
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1d1a      	adds	r2, r3, #4
 8006f08:	887b      	ldrh	r3, [r7, #2]
 8006f0a:	f7fb fc3b 	bl	8002784 <_ZN3can7signals18PDU_OD_LedCommands3setERyS2_Rht>
        }
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f103 0008 	add.w	r0, r3, #8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f103 0110 	add.w	r1, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	f7fb fbcd 	bl	80026d2 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3setERyS2_Rhh>
        }
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f103 0008 	add.w	r0, r3, #8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f103 0110 	add.w	r1, r3, #16
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	f7fb fb53 	bl	8002608 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
        }
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f103 0008 	add.w	r0, r3, #8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f103 0110 	add.w	r1, r3, #16
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	f7fb fb79 	bl	800267e <_ZN3can7signals16PDU_SDO_RespCode3setERyS2_Rhh>
        }
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f103 0208 	add.w	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3310      	adds	r3, #16
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7fb fb55 	bl	8002658 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8006fae:	4603      	mov	r3, r0
        }
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals24PDU_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f103 0208 	add.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3310      	adds	r3, #16
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fd f864 	bl	800409a <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_>
 8006fd2:	4603      	mov	r3, r0
        }
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals21PDU_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f103 0208 	add.w	r2, r3, #8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3310      	adds	r3, #16
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f7fd f800 	bl	8003ff6 <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_>
 8006ff6:	4603      	mov	r3, r0
        }
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f103 0208 	add.w	r2, r3, #8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3310      	adds	r3, #16
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f7fc ff97 	bl	8003f48 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_>
 800701a:	4603      	mov	r3, r0
        }
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f103 0208 	add.w	r2, r3, #8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3310      	adds	r3, #16
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7fc fbb7 	bl	80037ac <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_>
 800703e:	4603      	mov	r3, r0
        }
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f103 0208 	add.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3310      	adds	r3, #16
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fc fb4a 	bl	80036f6 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_>
 8007062:	4603      	mov	r3, r0
        }
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f103 0208 	add.w	r2, r3, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3310      	adds	r3, #16
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7fc f959 	bl	8003338 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_>
 8007086:	4603      	mov	r3, r0
        }
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0208 	add.w	r2, r3, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3310      	adds	r3, #16
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7fc f8ec 	bl	8003282 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_>
 80070aa:	4603      	mov	r3, r0
        }
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_batterVoltageLowEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0208 	add.w	r2, r3, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3310      	adds	r3, #16
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f7fb ff93 	bl	8002ff4 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_>
 80070ce:	eef0 7a40 	vmov.f32	s15, s0
        }
 80070d2:	eeb0 0a67 	vmov.f32	s0, s15
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals28PDU_OD_batterVoltageCriticalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f103 0208 	add.w	r2, r3, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3310      	adds	r3, #16
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7fb fef3 	bl	8002edc <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_>
 80070f6:	eef0 7a40 	vmov.f32	s15, s0
        }
 80070fa:	eeb0 0a67 	vmov.f32	s0, s15
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals19PDU_OD_overTempWarnEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f103 0208 	add.w	r2, r3, #8
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3310      	adds	r3, #16
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f7fb fe53 	bl	8002dc4 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_>
 800711e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007122:	eeb0 0a67 	vmov.f32	s0, s15
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_overTempCriticalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f103 0208 	add.w	r2, r3, #8
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3310      	adds	r3, #16
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fb fdb3 	bl	8002cac <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_>
 8007146:	eef0 7a40 	vmov.f32	s15, s0
        }
 800714a:	eeb0 0a67 	vmov.f32	s0, s15
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_batteryOvercurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f103 0208 	add.w	r2, r3, #8
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3310      	adds	r3, #16
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f7fb fd15 	bl	8002b98 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_>
 800716e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007172:	eeb0 0a67 	vmov.f32	s0, s15
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_currentReadIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f103 0208 	add.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3310      	adds	r3, #16
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f7fb fc81 	bl	8002a98 <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_>
 8007196:	4603      	mov	r3, r0
        }
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_statusSendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0208 	add.w	r2, r3, #8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3310      	adds	r3, #16
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f7fb fc19 	bl	80029ec <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_>
 80071ba:	4603      	mov	r3, r0
        }
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals22PDU_OD_watchdogTimeoutEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f103 0208 	add.w	r2, r3, #8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3310      	adds	r3, #16
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fb fbb1 	bl	8002940 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_>
 80071de:	4603      	mov	r3, r0
        }
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_projectXXEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f103 0208 	add.w	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3310      	adds	r3, #16
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7fb fb4b 	bl	8002898 <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_>
 8007202:	4603      	mov	r3, r0
        }
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals18PDU_OD_LedCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f103 0208 	add.w	r2, r3, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3310      	adds	r3, #16
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f7fb fade 	bl	80027e2 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_>
 8007226:	4603      	mov	r3, r0
        }
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_CoolingPumpEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0208 	add.w	r2, r3, #8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3310      	adds	r3, #16
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fb fa78 	bl	800273a <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_>
 800724a:	4603      	mov	r3, r0
        }
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b01      	cmp	r3, #1
 8007262:	f040 8126 	bne.w	80074b2 <_Z41__static_initialization_and_destruction_0ii+0x25e>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 8120 	bne.w	80074b2 <_Z41__static_initialization_and_destruction_0ii+0x25e>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8007272:	2000      	movs	r0, #0
 8007274:	f009 fec3 	bl	8010ffe <osMutexNew>
 8007278:	4603      	mov	r3, r0
 800727a:	4a90      	ldr	r2, [pc, #576]	; (80074bc <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800727c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 800727e:	2000      	movs	r0, #0
 8007280:	f009 febd 	bl	8010ffe <osMutexNew>
 8007284:	4603      	mov	r3, r0
 8007286:	4a8e      	ldr	r2, [pc, #568]	; (80074c0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8007288:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 800728a:	2000      	movs	r0, #0
 800728c:	f009 feb7 	bl	8010ffe <osMutexNew>
 8007290:	4603      	mov	r3, r0
 8007292:	4a8c      	ldr	r2, [pc, #560]	; (80074c4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8007294:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8007296:	2000      	movs	r0, #0
 8007298:	f009 feb1 	bl	8010ffe <osMutexNew>
 800729c:	4603      	mov	r3, r0
 800729e:	4a8a      	ldr	r2, [pc, #552]	; (80074c8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80072a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80072a2:	2000      	movs	r0, #0
 80072a4:	f009 feab 	bl	8010ffe <osMutexNew>
 80072a8:	4603      	mov	r3, r0
 80072aa:	4a88      	ldr	r2, [pc, #544]	; (80074cc <_Z41__static_initialization_and_destruction_0ii+0x278>)
 80072ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80072ae:	2000      	movs	r0, #0
 80072b0:	f009 fea5 	bl	8010ffe <osMutexNew>
 80072b4:	4603      	mov	r3, r0
 80072b6:	4a86      	ldr	r2, [pc, #536]	; (80074d0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80072b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80072ba:	2000      	movs	r0, #0
 80072bc:	f009 fe9f 	bl	8010ffe <osMutexNew>
 80072c0:	4603      	mov	r3, r0
 80072c2:	4a84      	ldr	r2, [pc, #528]	; (80074d4 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80072c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80072c6:	2000      	movs	r0, #0
 80072c8:	f009 fe99 	bl	8010ffe <osMutexNew>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4a82      	ldr	r2, [pc, #520]	; (80074d8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80072d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80072d2:	2000      	movs	r0, #0
 80072d4:	f009 fe93 	bl	8010ffe <osMutexNew>
 80072d8:	4603      	mov	r3, r0
 80072da:	4a80      	ldr	r2, [pc, #512]	; (80074dc <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80072dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 80072de:	2000      	movs	r0, #0
 80072e0:	f009 fe8d 	bl	8010ffe <osMutexNew>
 80072e4:	4603      	mov	r3, r0
 80072e6:	4a7e      	ldr	r2, [pc, #504]	; (80074e0 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80072e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 80072ea:	2000      	movs	r0, #0
 80072ec:	f009 fe87 	bl	8010ffe <osMutexNew>
 80072f0:	4603      	mov	r3, r0
 80072f2:	4a7c      	ldr	r2, [pc, #496]	; (80074e4 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80072f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 80072f6:	2000      	movs	r0, #0
 80072f8:	f009 fe81 	bl	8010ffe <osMutexNew>
 80072fc:	4603      	mov	r3, r0
 80072fe:	4a7a      	ldr	r2, [pc, #488]	; (80074e8 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8007300:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8007302:	2000      	movs	r0, #0
 8007304:	f009 fe7b 	bl	8010ffe <osMutexNew>
 8007308:	4603      	mov	r3, r0
 800730a:	4a78      	ldr	r2, [pc, #480]	; (80074ec <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800730c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800730e:	2000      	movs	r0, #0
 8007310:	f009 fe75 	bl	8010ffe <osMutexNew>
 8007314:	4603      	mov	r3, r0
 8007316:	4a76      	ldr	r2, [pc, #472]	; (80074f0 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007318:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 800731a:	2000      	movs	r0, #0
 800731c:	f009 fe6f 	bl	8010ffe <osMutexNew>
 8007320:	4603      	mov	r3, r0
 8007322:	4a74      	ldr	r2, [pc, #464]	; (80074f4 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007324:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8007326:	2000      	movs	r0, #0
 8007328:	f009 fe69 	bl	8010ffe <osMutexNew>
 800732c:	4603      	mov	r3, r0
 800732e:	4a72      	ldr	r2, [pc, #456]	; (80074f8 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007330:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8007332:	2000      	movs	r0, #0
 8007334:	f009 fe63 	bl	8010ffe <osMutexNew>
 8007338:	4603      	mov	r3, r0
 800733a:	4a70      	ldr	r2, [pc, #448]	; (80074fc <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800733c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800733e:	2000      	movs	r0, #0
 8007340:	f009 fe5d 	bl	8010ffe <osMutexNew>
 8007344:	4603      	mov	r3, r0
 8007346:	4a6e      	ldr	r2, [pc, #440]	; (8007500 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007348:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 800734a:	2000      	movs	r0, #0
 800734c:	f009 fe57 	bl	8010ffe <osMutexNew>
 8007350:	4603      	mov	r3, r0
 8007352:	4a6c      	ldr	r2, [pc, #432]	; (8007504 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007354:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8007356:	2000      	movs	r0, #0
 8007358:	f009 fe51 	bl	8010ffe <osMutexNew>
 800735c:	4603      	mov	r3, r0
 800735e:	4a6a      	ldr	r2, [pc, #424]	; (8007508 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8007360:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8007362:	2000      	movs	r0, #0
 8007364:	f009 fe4b 	bl	8010ffe <osMutexNew>
 8007368:	4603      	mov	r3, r0
 800736a:	4a68      	ldr	r2, [pc, #416]	; (800750c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800736c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 800736e:	2000      	movs	r0, #0
 8007370:	f009 fe45 	bl	8010ffe <osMutexNew>
 8007374:	4603      	mov	r3, r0
 8007376:	4a66      	ldr	r2, [pc, #408]	; (8007510 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007378:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 800737a:	2000      	movs	r0, #0
 800737c:	f009 fe3f 	bl	8010ffe <osMutexNew>
 8007380:	4603      	mov	r3, r0
 8007382:	4a64      	ldr	r2, [pc, #400]	; (8007514 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8007384:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8007386:	2000      	movs	r0, #0
 8007388:	f009 fe39 	bl	8010ffe <osMutexNew>
 800738c:	4603      	mov	r3, r0
 800738e:	4a62      	ldr	r2, [pc, #392]	; (8007518 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8007390:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8007392:	2000      	movs	r0, #0
 8007394:	f009 fe33 	bl	8010ffe <osMutexNew>
 8007398:	4603      	mov	r3, r0
 800739a:	4a60      	ldr	r2, [pc, #384]	; (800751c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800739c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 800739e:	2000      	movs	r0, #0
 80073a0:	f009 fe2d 	bl	8010ffe <osMutexNew>
 80073a4:	4603      	mov	r3, r0
 80073a6:	4a5e      	ldr	r2, [pc, #376]	; (8007520 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80073a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80073aa:	2000      	movs	r0, #0
 80073ac:	f009 fe27 	bl	8010ffe <osMutexNew>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4a5c      	ldr	r2, [pc, #368]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80073b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80073b6:	2000      	movs	r0, #0
 80073b8:	f009 fe21 	bl	8010ffe <osMutexNew>
 80073bc:	4603      	mov	r3, r0
 80073be:	4a5a      	ldr	r2, [pc, #360]	; (8007528 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80073c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80073c2:	2000      	movs	r0, #0
 80073c4:	f009 fe1b 	bl	8010ffe <osMutexNew>
 80073c8:	4603      	mov	r3, r0
 80073ca:	4a58      	ldr	r2, [pc, #352]	; (800752c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80073cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80073ce:	2000      	movs	r0, #0
 80073d0:	f009 fe15 	bl	8010ffe <osMutexNew>
 80073d4:	4603      	mov	r3, r0
 80073d6:	4a56      	ldr	r2, [pc, #344]	; (8007530 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80073d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 80073da:	2000      	movs	r0, #0
 80073dc:	f009 fe0f 	bl	8010ffe <osMutexNew>
 80073e0:	4603      	mov	r3, r0
 80073e2:	4a54      	ldr	r2, [pc, #336]	; (8007534 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80073e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 80073e6:	2000      	movs	r0, #0
 80073e8:	f009 fe09 	bl	8010ffe <osMutexNew>
 80073ec:	4603      	mov	r3, r0
 80073ee:	4a52      	ldr	r2, [pc, #328]	; (8007538 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80073f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 80073f2:	2000      	movs	r0, #0
 80073f4:	f009 fe03 	bl	8010ffe <osMutexNew>
 80073f8:	4603      	mov	r3, r0
 80073fa:	4a50      	ldr	r2, [pc, #320]	; (800753c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80073fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 80073fe:	2000      	movs	r0, #0
 8007400:	f009 fdfd 	bl	8010ffe <osMutexNew>
 8007404:	4603      	mov	r3, r0
 8007406:	4a4e      	ldr	r2, [pc, #312]	; (8007540 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007408:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 800740a:	2000      	movs	r0, #0
 800740c:	f009 fdf7 	bl	8010ffe <osMutexNew>
 8007410:	4603      	mov	r3, r0
 8007412:	4a4c      	ldr	r2, [pc, #304]	; (8007544 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007414:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8007416:	2000      	movs	r0, #0
 8007418:	f009 fdf1 	bl	8010ffe <osMutexNew>
 800741c:	4603      	mov	r3, r0
 800741e:	4a4a      	ldr	r2, [pc, #296]	; (8007548 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007420:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8007422:	2000      	movs	r0, #0
 8007424:	f009 fdeb 	bl	8010ffe <osMutexNew>
 8007428:	4603      	mov	r3, r0
 800742a:	4a48      	ldr	r2, [pc, #288]	; (800754c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800742c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batterVoltageLow         = osMutexNew(NULL);
 800742e:	2000      	movs	r0, #0
 8007430:	f009 fde5 	bl	8010ffe <osMutexNew>
 8007434:	4603      	mov	r3, r0
 8007436:	4a46      	ldr	r2, [pc, #280]	; (8007550 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007438:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batterVoltageCritical    = osMutexNew(NULL);
 800743a:	2000      	movs	r0, #0
 800743c:	f009 fddf 	bl	8010ffe <osMutexNew>
 8007440:	4603      	mov	r3, r0
 8007442:	4a44      	ldr	r2, [pc, #272]	; (8007554 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007444:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_overTempWarn             = osMutexNew(NULL);
 8007446:	2000      	movs	r0, #0
 8007448:	f009 fdd9 	bl	8010ffe <osMutexNew>
 800744c:	4603      	mov	r3, r0
 800744e:	4a42      	ldr	r2, [pc, #264]	; (8007558 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007450:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_overTempCritical         = osMutexNew(NULL);
 8007452:	2000      	movs	r0, #0
 8007454:	f009 fdd3 	bl	8010ffe <osMutexNew>
 8007458:	4603      	mov	r3, r0
 800745a:	4a40      	ldr	r2, [pc, #256]	; (800755c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800745c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batteryOvercurrent       = osMutexNew(NULL);
 800745e:	2000      	movs	r0, #0
 8007460:	f009 fdcd 	bl	8010ffe <osMutexNew>
 8007464:	4603      	mov	r3, r0
 8007466:	4a3e      	ldr	r2, [pc, #248]	; (8007560 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007468:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_currentReadInterval      = osMutexNew(NULL);
 800746a:	2000      	movs	r0, #0
 800746c:	f009 fdc7 	bl	8010ffe <osMutexNew>
 8007470:	4603      	mov	r3, r0
 8007472:	4a3c      	ldr	r2, [pc, #240]	; (8007564 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007474:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_statusSendInterval       = osMutexNew(NULL);
 8007476:	2000      	movs	r0, #0
 8007478:	f009 fdc1 	bl	8010ffe <osMutexNew>
 800747c:	4603      	mov	r3, r0
 800747e:	4a3a      	ldr	r2, [pc, #232]	; (8007568 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007480:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_watchdogTimeout          = osMutexNew(NULL);
 8007482:	2000      	movs	r0, #0
 8007484:	f009 fdbb 	bl	8010ffe <osMutexNew>
 8007488:	4603      	mov	r3, r0
 800748a:	4a38      	ldr	r2, [pc, #224]	; (800756c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800748c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_projectXXEnabled         = osMutexNew(NULL);
 800748e:	2000      	movs	r0, #0
 8007490:	f009 fdb5 	bl	8010ffe <osMutexNew>
 8007494:	4603      	mov	r3, r0
 8007496:	4a36      	ldr	r2, [pc, #216]	; (8007570 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007498:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_LedCommands              = osMutexNew(NULL);
 800749a:	2000      	movs	r0, #0
 800749c:	f009 fdaf 	bl	8010ffe <osMutexNew>
 80074a0:	4603      	mov	r3, r0
 80074a2:	4a34      	ldr	r2, [pc, #208]	; (8007574 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80074a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPumpEnabled       = osMutexNew(NULL);
 80074a6:	2000      	movs	r0, #0
 80074a8:	f009 fda9 	bl	8010ffe <osMutexNew>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4a32      	ldr	r2, [pc, #200]	; (8007578 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000838 	.word	0x20000838
 80074c0:	2000083c 	.word	0x2000083c
 80074c4:	20000840 	.word	0x20000840
 80074c8:	20000844 	.word	0x20000844
 80074cc:	20000848 	.word	0x20000848
 80074d0:	2000084c 	.word	0x2000084c
 80074d4:	20000850 	.word	0x20000850
 80074d8:	20000854 	.word	0x20000854
 80074dc:	20000858 	.word	0x20000858
 80074e0:	2000085c 	.word	0x2000085c
 80074e4:	20000860 	.word	0x20000860
 80074e8:	20000864 	.word	0x20000864
 80074ec:	20000868 	.word	0x20000868
 80074f0:	2000086c 	.word	0x2000086c
 80074f4:	20000870 	.word	0x20000870
 80074f8:	20000874 	.word	0x20000874
 80074fc:	20000878 	.word	0x20000878
 8007500:	2000087c 	.word	0x2000087c
 8007504:	20000880 	.word	0x20000880
 8007508:	20000884 	.word	0x20000884
 800750c:	20000888 	.word	0x20000888
 8007510:	2000088c 	.word	0x2000088c
 8007514:	20000890 	.word	0x20000890
 8007518:	20000894 	.word	0x20000894
 800751c:	20000898 	.word	0x20000898
 8007520:	2000089c 	.word	0x2000089c
 8007524:	200008a0 	.word	0x200008a0
 8007528:	200008a4 	.word	0x200008a4
 800752c:	200008a8 	.word	0x200008a8
 8007530:	200008ac 	.word	0x200008ac
 8007534:	200008b0 	.word	0x200008b0
 8007538:	200008b4 	.word	0x200008b4
 800753c:	200008b8 	.word	0x200008b8
 8007540:	200008bc 	.word	0x200008bc
 8007544:	200008c0 	.word	0x200008c0
 8007548:	200008c4 	.word	0x200008c4
 800754c:	200008c8 	.word	0x200008c8
 8007550:	200008cc 	.word	0x200008cc
 8007554:	200008d0 	.word	0x200008d0
 8007558:	200008d4 	.word	0x200008d4
 800755c:	200008d8 	.word	0x200008d8
 8007560:	200008dc 	.word	0x200008dc
 8007564:	200008e0 	.word	0x200008e0
 8007568:	200008e4 	.word	0x200008e4
 800756c:	200008e8 	.word	0x200008e8
 8007570:	200008ec 	.word	0x200008ec
 8007574:	200008f0 	.word	0x200008f0
 8007578:	200008f4 	.word	0x200008f4

0800757c <_GLOBAL__sub_I_OD_NodeID>:
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
 8007580:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007584:	2001      	movs	r0, #1
 8007586:	f7ff fe65 	bl	8007254 <_Z41__static_initialization_and_destruction_0ii>
 800758a:	bd80      	pop	{r7, pc}

0800758c <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	switch (module) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <_ZL17AdcModuleToHandle9AdcModule+0x16>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d002      	beq.n	80075a6 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 80075a0:	e003      	b.n	80075aa <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 80075a4:	e004      	b.n	80075b0 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 80075a8:	e002      	b.n	80075b0 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 80075aa:	f001 ff29 	bl	8009400 <Error_Handler>
		return nullptr;
 80075ae:	2300      	movs	r3, #0
	}
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000ca0 	.word	0x20000ca0
 80075bc:	20000ce8 	.word	0x20000ce8

080075c0 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

	}
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
		return m_value;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	881b      	ldrh	r3, [r3, #0]
	}
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	807b      	strh	r3, [r7, #2]
		m_value = value;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	887a      	ldrh	r2, [r7, #2]
 80075fe:	801a      	strh	r2, [r3, #0]
	}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	f7f9 fef4 	bl	8001448 <_ZNSt14_Function_baseD1Ev>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 800766a:	b5b0      	push	{r4, r5, r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	240f      	movs	r4, #15
 8007676:	461d      	mov	r5, r3
 8007678:	2c00      	cmp	r4, #0
 800767a:	db05      	blt.n	8007688 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 800767c:	4628      	mov	r0, r5
 800767e:	f000 fa0f 	bl	8007aa0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8007682:	3510      	adds	r5, #16
 8007684:	3c01      	subs	r4, #1
 8007686:	e7f7      	b.n	8007678 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bdb0      	pop	{r4, r5, r7, pc}

0800769a <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 800769a:	b590      	push	{r4, r7, lr}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d004      	beq.n	80076be <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80076b4:	3c10      	subs	r4, #16
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff ffca 	bl	8007650 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80076bc:	e7f7      	b.n	80076ae <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd90      	pop	{r4, r7, pc}

080076c8 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__tcf_0+0xc>)
 80076ce:	f7ff ffe4 	bl	800769a <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200008f8 	.word	0x200008f8

080076d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 80076dc:	4b12      	ldr	r3, [pc, #72]	; (8007728 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f3bf 8f5b 	dmb	ish
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d013      	beq.n	8007720 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 80076f8:	480b      	ldr	r0, [pc, #44]	; (8007728 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80076fa:	f00d fed9 	bl	80154b0 <__cxa_guard_acquire>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800770e:	4807      	ldr	r0, [pc, #28]	; (800772c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8007710:	f7ff ffab 	bl	800766a <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8007714:	4806      	ldr	r0, [pc, #24]	; (8007730 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8007716:	f00e f92a 	bl	801596e <atexit>
 800771a:	4803      	ldr	r0, [pc, #12]	; (8007728 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800771c:	f00d fed4 	bl	80154c8 <__cxa_guard_release>
		return instance;
 8007720:	4b02      	ldr	r3, [pc, #8]	; (800772c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8007722:	4618      	mov	r0, r3
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200009fc 	.word	0x200009fc
 800772c:	200008f8 	.word	0x200008f8
 8007730:	080076c9 	.word	0x080076c9

08007734 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007744:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800774c:	1c59      	adds	r1, r3, #1
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f9ac 	bl	8007aba <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 8007762:	68fb      	ldr	r3, [r7, #12]
	}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	18d0      	adds	r0, r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	4619      	mov	r1, r3
 800778c:	f000 f995 	bl	8007aba <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f9a6 	bl	8007af0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80077aa:	1e5a      	subs	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d104      	bne.n	80077da <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f90a 	bl	80079ee <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 80077e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 80077ee:	6838      	ldr	r0, [r7, #0]
 80077f0:	f7ff fecc 	bl	800758c <_ZL17AdcModuleToHandle9AdcModule>
 80077f4:	4602      	mov	r2, r0
					)) {
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
					)) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685c      	ldr	r4, [r3, #4]
 8007808:	4b2f      	ldr	r3, [pc, #188]	; (80078c8 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800780a:	429c      	cmp	r4, r3
 800780c:	d801      	bhi.n	8007812 <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 800780e:	0063      	lsls	r3, r4, #1
 8007810:	e001      	b.n	8007816 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 8007812:	f04f 33ff 	mov.w	r3, #4294967295
 8007816:	4618      	mov	r0, r3
 8007818:	f00d fe59 	bl	80154ce <_Znaj>
 800781c:	4603      	mov	r3, r0
 800781e:	461e      	mov	r6, r3
 8007820:	4635      	mov	r5, r6
 8007822:	1e63      	subs	r3, r4, #1
 8007824:	461c      	mov	r4, r3
 8007826:	2c00      	cmp	r4, #0
 8007828:	db05      	blt.n	8007836 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 800782a:	4628      	mov	r0, r5
 800782c:	f7ff fec8 	bl	80075c0 <_ZN10AdcChannelC1Ev>
 8007830:	3502      	adds	r5, #2
 8007832:	3c01      	subs	r4, #1
 8007834:	e7f7      	b.n	8007826 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d801      	bhi.n	8007848 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	e001      	b.n	800784c <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8007848:	f04f 33ff 	mov.w	r3, #4294967295
 800784c:	4618      	mov	r0, r3
 800784e:	f00d fe3e 	bl	80154ce <_Znaj>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
					)) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8007860:	f7ff ff3a 	bl	80076d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8007864:	4604      	mov	r4, r0
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f107 0308 	add.w	r3, r7, #8
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f958 	bl	8007b24 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 8007874:	f107 0308 	add.w	r3, r7, #8
 8007878:	4619      	mov	r1, r3
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff ff5a 	bl	8007734 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8007880:	4602      	mov	r2, r0
					)) {
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8007886:	f107 0308 	add.w	r3, r7, #8
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fee0 	bl	8007650 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8007890:	2200      	movs	r2, #0
 8007892:	2100      	movs	r1, #0
 8007894:	2001      	movs	r0, #1
 8007896:	f009 fcc0 	bl	801121a <osSemaphoreNew>
 800789a:	4602      	mov	r2, r0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80078b2:	461a      	mov	r2, r3
 80078b4:	f003 f838 	bl	800a928 <HAL_ADC_Start_DMA>
		update();
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f854 	bl	8007966 <_ZN19AdcModuleController6updateEv>
	}
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c8:	3ffffffc 	.word	0x3ffffffc

080078cc <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 80078d4:	f7ff ff00 	bl	80076d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80078d8:	4602      	mov	r2, r0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7ff ff43 	bl	800776c <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f009 fdb4 	bl	8011458 <osSemaphoreGetCount>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf14      	ite	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	2300      	moveq	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d006      	beq.n	800790e <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	f04f 31ff 	mov.w	r1, #4294967295
 8007908:	4618      	mov	r0, r3
 800790a:	f009 fd0f 	bl	801132c <osSemaphoreAcquire>
		}
		delete[] m_channels;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <_ZN19AdcModuleControllerD1Ev+0x54>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f00d fdc6 	bl	80154ac <_ZdaPv>
		delete[] m_buffer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <_ZN19AdcModuleControllerD1Ev+0x66>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4618      	mov	r0, r3
 800792e:	f00d fdbd 	bl	80154ac <_ZdaPv>
	}
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d301      	bcc.n	8007954 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 8007950:	f001 fd56 	bl	8009400 <Error_Handler>
		}
		return m_channels + rank;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	4413      	add	r3, r2
	}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <_ZN19AdcModuleController6updateEv>:

	void update() {
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f04f 31ff 	mov.w	r1, #4294967295
 8007976:	4618      	mov	r0, r3
 8007978:	f009 fcd8 	bl	801132c <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	429a      	cmp	r2, r3
 8007988:	d211      	bcs.n	80079ae <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	18d0      	adds	r0, r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	4619      	mov	r1, r3
 80079a2:	f7ff fe24 	bl	80075ee <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e7e8      	b.n	8007980 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80079c0:	461a      	mov	r2, r3
 80079c2:	f002 ffb1 	bl	800a928 <HAL_ADC_Start_DMA>
	}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7c1b      	ldrb	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ffc1 	bl	8007966 <_ZN19AdcModuleController6updateEv>
 80079e4:	e000      	b.n	80079e8 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 80079e6:	bf00      	nop
	}
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f009 fce5 	bl	80113d0 <osSemaphoreRelease>
	}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
	switch(module){
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d004      	beq.n	8007a2c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 8007a22:	e007      	b.n	8007a34 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8007a24:	f000 f8b0 	bl	8007b88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	e008      	b.n	8007a3e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8007a2c:	f000 f8e2 	bl	8007bf4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 8007a30:	4603      	mov	r3, r0
 8007a32:	e004      	b.n	8007a3e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 8007a34:	f001 fce4 	bl	8009400 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8007a38:	f000 f8a6 	bl	8007b88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8007a3c:	4603      	mov	r3, r0
	}
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <_ZN20AdcChannelControllerC1E9AdcModulej>:

class AdcChannelController {
public:
	AdcChannelController() : m_module(nullptr), m_channel(nullptr){
	}
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
			m_module(&_getChannelAdcModuleControllerRuntime(module)),
 8007a52:	68b8      	ldr	r0, [r7, #8]
 8007a54:	f7ff ffdb 	bl	8007a0e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8007a58:	4602      	mov	r2, r0
			m_channel(m_module->getChannelByRank(rank)) {
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ff69 	bl	800793c <_ZN19AdcModuleController16getChannelByRankEj>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	605a      	str	r2, [r3, #4]
	}
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
		m_module->weakUpdate();
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff ffa1 	bl	80079ce <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff fda0 	bl	80075d6 <_ZN10AdcChannel3getEv>
 8007a96:	4603      	mov	r3, r0
	}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7f9 fcbe 	bl	800142c <_ZNSt14_Function_baseC1Ev>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8007ac4:	f107 0308 	add.w	r3, r7, #8
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 f8c0 	bl	8007c50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8007ad0:	f107 0308 	add.w	r3, r7, #8
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f8dc 	bl	8007c94 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8007adc:	f107 0308 	add.w	r3, r7, #8
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fdb5 	bl	8007650 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8007ae6:	687b      	ldr	r3, [r7, #4]
      }
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	4798      	blx	r3
	    _M_manager = nullptr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	60da      	str	r2, [r3, #12]
	return *this;
 8007b1a:	687b      	ldr	r3, [r7, #4]
      }
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8007b24:	b590      	push	{r4, r7, lr}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7f9 fc7b 	bl	800142c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8007b36:	463b      	mov	r3, r7
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 f8d7 	bl	8007cec <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8007b44:	687c      	ldr	r4, [r7, #4]
 8007b46:	463b      	mov	r3, r7
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 f8da 	bl	8007d02 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4619      	mov	r1, r3
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f8e0 	bl	8007d18 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 8007b5c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a04      	ldr	r2, [pc, #16]	; (8007b74 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 8007b62:	609a      	str	r2, [r3, #8]
      }
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd90      	pop	{r4, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	08007d3d 	.word	0x08007d3d
 8007b74:	08007d67 	.word	0x08007d67

08007b78 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__tcf_1+0xc>)
 8007b7e:	f7ff fea5 	bl	80078cc <_ZN19AdcModuleControllerD1Ev>
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000a00 	.word	0x20000a00

08007b88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8007b8c:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f3bf 8f5b 	dmb	ish
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bf0c      	ite	eq
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	2300      	movne	r3, #0
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d014      	beq.n	8007bd2 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8007ba8:	480b      	ldr	r0, [pc, #44]	; (8007bd8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8007baa:	f00d fc81 	bl	80154b0 <__cxa_guard_acquire>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	bf14      	ite	ne
 8007bb4:	2301      	movne	r3, #1
 8007bb6:	2300      	moveq	r3, #0
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4806      	ldr	r0, [pc, #24]	; (8007bdc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 8007bc2:	f7ff fe0f 	bl	80077e4 <_ZN19AdcModuleControllerC1E9AdcModule>
 8007bc6:	4806      	ldr	r0, [pc, #24]	; (8007be0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8007bc8:	f00d fed1 	bl	801596e <atexit>
 8007bcc:	4802      	ldr	r0, [pc, #8]	; (8007bd8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8007bce:	f00d fc7b 	bl	80154c8 <__cxa_guard_release>
	return instance;
 8007bd2:	4b02      	ldr	r3, [pc, #8]	; (8007bdc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000a1c 	.word	0x20000a1c
 8007bdc:	20000a00 	.word	0x20000a00
 8007be0:	08007b79 	.word	0x08007b79

08007be4 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__tcf_2+0xc>)
 8007bea:	f7ff fe6f 	bl	80078cc <_ZN19AdcModuleControllerD1Ev>
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000a20 	.word	0x20000a20

08007bf4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8007bf8:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f3bf 8f5b 	dmb	ish
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d014      	beq.n	8007c3e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8007c14:	480b      	ldr	r0, [pc, #44]	; (8007c44 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8007c16:	f00d fc4b 	bl	80154b0 <__cxa_guard_acquire>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf14      	ite	ne
 8007c20:	2301      	movne	r3, #1
 8007c22:	2300      	moveq	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4806      	ldr	r0, [pc, #24]	; (8007c48 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 8007c2e:	f7ff fdd9 	bl	80077e4 <_ZN19AdcModuleControllerC1E9AdcModule>
 8007c32:	4806      	ldr	r0, [pc, #24]	; (8007c4c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 8007c34:	f00d fe9b 	bl	801596e <atexit>
 8007c38:	4802      	ldr	r0, [pc, #8]	; (8007c44 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8007c3a:	f00d fc45 	bl	80154c8 <__cxa_guard_release>
	return instance;
 8007c3e:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20000a3c 	.word	0x20000a3c
 8007c48:	20000a20 	.word	0x20000a20
 8007c4c:	08007be5 	.word	0x08007be5

08007c50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7f9 fbe5 	bl	800142c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8007c62:	6838      	ldr	r0, [r7, #0]
 8007c64:	f000 f89e 	bl	8007da4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00d      	beq.n	8007c8a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	2202      	movs	r2, #2
 8007c78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	609a      	str	r2, [r3, #8]
    }
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7f9 fd96 	bl	80017d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f103 0208 	add.w	r2, r3, #8
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7f9 fdbf 	bl	800183a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f103 020c 	add.w	r2, r3, #12
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f000 f886 	bl	8007dda <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	  { return true; }
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f7ff ffed 	bl	8007d02 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f872 	bl	8007e18 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd90      	pop	{r4, r7, pc}

08007d3c <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007d3c:	b590      	push	{r4, r7, lr}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f87f 	bl	8007e4a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	6838      	ldr	r0, [r7, #0]
 8007d50:	f7ff ffc1 	bl	8007cd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8007d54:	4603      	mov	r3, r0
 8007d56:	4619      	mov	r1, r3
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 f887 	bl	8007e6c <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8007d5e:	bf00      	nop
      }
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd90      	pop	{r4, r7, pc}

08007d66 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007d66:	b590      	push	{r4, r7, lr}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	4613      	mov	r3, r2
 8007d72:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d109      	bne.n	8007d8e <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f88c 	bl	8007e98 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8007d80:	4604      	mov	r4, r0
 8007d82:	68b8      	ldr	r0, [r7, #8]
 8007d84:	f000 f861 	bl	8007e4a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	6023      	str	r3, [r4, #0]
	    break;
 8007d8c:	e005      	b.n	8007d9a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	461a      	mov	r2, r3
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f88b 	bl	8007eb0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8007d9a:	2300      	movs	r3, #0
      }
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7f9 fb5d 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f083 0301 	eor.w	r3, r3, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff ffed 	bl	8007dc4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8007dea:	4603      	mov	r3, r0
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007df0:	6838      	ldr	r0, [r7, #0]
 8007df2:	f7ff ffe7 	bl	8007dc4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8007df6:	4603      	mov	r3, r0
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff ffde 	bl	8007dc4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	601a      	str	r2, [r3, #0]
    }
 8007e10:	bf00      	nop
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007e24:	68b8      	ldr	r0, [r7, #8]
 8007e26:	f7ff ff6c 	bl	8007d02 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fbf9 	bl	8007624 <_ZNSt9_Any_data9_M_accessEv>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4619      	mov	r1, r3
 8007e36:	2004      	movs	r0, #4
 8007e38:	f7ff fbe8 	bl	800760c <_ZnwjPv>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	bf00      	nop
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd90      	pop	{r4, r7, pc}

08007e4a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f857 	bl	8007f06 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8007e58:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f85f 	bl	8007f1e <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8007e60:	4603      	mov	r3, r0
 8007e62:	bf00      	nop
	}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007e6c:	b5b0      	push	{r4, r5, r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f85c 	bl	8007f34 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	6838      	ldr	r0, [r7, #0]
 8007e80:	f7ff ff29 	bl	8007cd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f85d 	bl	8007f4a <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bdb0      	pop	{r4, r5, r7, pc}

08007e98 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fbbf 	bl	8007624 <_ZNSt9_Any_data9_M_accessEv>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d016      	beq.n	8007ef2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	dc19      	bgt.n	8007efc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d002      	beq.n	8007ed2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d00a      	beq.n	8007ee6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8007ed0:	e014      	b.n	8007efc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff ffe0 	bl	8007e98 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	68b8      	ldr	r0, [r7, #8]
 8007edc:	f7ff ffb5 	bl	8007e4a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	6023      	str	r3, [r4, #0]
	      break;
 8007ee4:	e00a      	b.n	8007efc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f844 	bl	8007f78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8007ef0:	e004      	b.n	8007efc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f858 	bl	8007faa <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007efa:	bf00      	nop
	  return false;
 8007efc:	2300      	movs	r3, #0
	}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bdb0      	pop	{r4, r5, r7, pc}

08007f06 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fb93 	bl	800763a <_ZNKSt9_Any_data9_M_accessEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8007f4a:	b590      	push	{r4, r7, lr}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	7338      	strb	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007f56:	68b8      	ldr	r0, [r7, #8]
 8007f58:	f7ff ffec 	bl	8007f34 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff feb9 	bl	8007cd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8007f64:	4603      	mov	r3, r0
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f7ff fc25 	bl	80077ba <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd90      	pop	{r4, r7, pc}

08007f78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8007f84:	68b8      	ldr	r0, [r7, #8]
 8007f86:	f7ff ffbe 	bl	8007f06 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff fb49 	bl	8007624 <_ZNSt9_Any_data9_M_accessEv>
 8007f92:	4603      	mov	r3, r0
 8007f94:	4619      	mov	r1, r3
 8007f96:	2004      	movs	r0, #4
 8007f98:	f7ff fb38 	bl	800760c <_ZnwjPv>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6013      	str	r3, [r2, #0]
	}
 8007fa2:	bf00      	nop
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd90      	pop	{r4, r7, pc}

08007faa <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f804 	bl	8007fc2 <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff fb2a 	bl	8007624 <_ZNSt9_Any_data9_M_accessEv>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <_ZN8WatchdogC1Em>:

/**
 * Constructor for Watchdog class
 * @param timeoutMs Watchdog timeout in milliseconds
 */
Watchdog::Watchdog(uint32_t timeoutMs) : m_timeoutMs{ timeoutMs } {
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	605a      	str	r2, [r3, #4]
}
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <_ZN20AdcChannelControllerC1Ev>:
	AdcChannelController() : m_module(nullptr), m_channel(nullptr){
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	605a      	str	r2, [r3, #4]
	}
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <_ZN16OutputChannelPwmC1Ebf>:
	bool m_shortCircuitResetOngoing = false;

	using OUTPUT_STATE = can::signals::PDU_LPCh1_State;

public:
	OutputChannelPwm(bool _on = false, float _duty = 100.0f) :
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	460b      	mov	r3, r1
 800802a:	ed87 0a01 	vstr	s0, [r7, #4]
 800802e:	72fb      	strb	r3, [r7, #11]
			m_on { _on }, m_duty { _duty }, m_switchOn { _on } {
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	7afa      	ldrb	r2, [r7, #11]
 8008034:	711a      	strb	r2, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	609a      	str	r2, [r3, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	7afa      	ldrb	r2, [r7, #11]
 8008040:	731a      	strb	r2, [r3, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	611a      	str	r2, [r3, #16]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	751a      	strb	r2, [r3, #20]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	755a      	strb	r2, [r3, #21]
		m_lastChange = xTaskGetTickCount();
 8008054:	f00b fbce 	bl	80137f4 <xTaskGetTickCount>
 8008058:	4602      	mov	r2, r0
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	611a      	str	r2, [r3, #16]
	}
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <_ZN13OutputChannelC1Eb>:

};

class OutputChannel: public OutputChannelPwm {
public:
	OutputChannel(bool _on = false) :
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
			OutputChannelPwm { _on, 100.0f } {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008090 <_ZN13OutputChannelC1Eb+0x28>
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff ffce 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
	}
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	42c80000 	.word	0x42c80000

08008094 <_ZN14PduOutputStateC1Ev>:
	;
};

// All output channels of the PDU with the initial states
typedef struct PduOutputState {
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 80080a2:	2101      	movs	r1, #1
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff ffbb 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3318      	adds	r3, #24
 80080ae:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 80080b2:	2101      	movs	r1, #1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff ffb3 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3330      	adds	r3, #48	; 0x30
 80080be:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 80080c2:	2101      	movs	r1, #1
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff ffab 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3348      	adds	r3, #72	; 0x48
 80080ce:	2101      	movs	r1, #1
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff ffc9 	bl	8008068 <_ZN13OutputChannelC1Eb>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3360      	adds	r3, #96	; 0x60
 80080da:	2101      	movs	r1, #1
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff ffc3 	bl	8008068 <_ZN13OutputChannelC1Eb>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3378      	adds	r3, #120	; 0x78
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff ffbd 	bl	8008068 <_ZN13OutputChannelC1Eb>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3390      	adds	r3, #144	; 0x90
 80080f2:	2101      	movs	r1, #1
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff ffb7 	bl	8008068 <_ZN13OutputChannelC1Eb>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	33a8      	adds	r3, #168	; 0xa8
 80080fe:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008102:	2101      	movs	r1, #1
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff ff8b 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	33c0      	adds	r3, #192	; 0xc0
 800810e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008112:	2101      	movs	r1, #1
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff ff83 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	33d8      	adds	r3, #216	; 0xd8
 800811e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008122:	2101      	movs	r1, #1
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff ff7b 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	33f0      	adds	r3, #240	; 0xf0
 800812e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008132:	2101      	movs	r1, #1
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff ff73 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8008140:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008144:	2101      	movs	r1, #1
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff ff6a 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008152:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008156:	2101      	movs	r1, #1
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff ff61 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008164:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 8008168:	2101      	movs	r1, #1
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ff58 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008176:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 800817a:	2101      	movs	r1, #1
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ff4f 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008188:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff ff46 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800819a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ff3d 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80081ac:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80081d0 <_ZN14PduOutputStateC1Ev+0x13c>
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff ff34 	bl	8008020 <_ZN16OutputChannelPwmC1Ebf>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80081be:	2101      	movs	r1, #1
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff ff51 	bl	8008068 <_ZN13OutputChannelC1Eb>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	42c80000 	.word	0x42c80000

080081d4 <main_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void main_entry(void *argv) {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	while(true){
		osDelay(osWaitForever);
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	f008 fef2 	bl	8010fc8 <osDelay>
 80081e4:	e7fa      	b.n	80081dc <main_entry+0x8>

080081e6 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEEC1Ev>:
template<typename MESSAGE>
class RxMessageQueue {
private:
	static constexpr unsigned int INVALID_ID = std::numeric_limits<unsigned int>::max();
public:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	2100      	movs	r1, #0
 80081f2:	20c8      	movs	r0, #200	; 0xc8
 80081f4:	f00a fc6a 	bl	8012acc <xStreamBufferGenericCreate>
 80081f8:	4602      	mov	r2, r0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	605a      	str	r2, [r3, #4]

	}
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	2100      	movs	r1, #0
 800821c:	20c8      	movs	r0, #200	; 0xc8
 800821e:	f00a fc55 	bl	8012acc <xStreamBufferGenericCreate>
 8008222:	4602      	mov	r2, r0
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	605a      	str	r2, [r3, #4]
	}
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	2100      	movs	r1, #0
 8008246:	20c8      	movs	r0, #200	; 0xc8
 8008248:	f00a fc40 	bl	8012acc <xStreamBufferGenericCreate>
 800824c:	4602      	mov	r2, r0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f04f 32ff 	mov.w	r2, #4294967295
 8008258:	605a      	str	r2, [r3, #4]
	}
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	2100      	movs	r1, #0
 8008270:	20c8      	movs	r0, #200	; 0xc8
 8008272:	f00a fc2b 	bl	8012acc <xStreamBufferGenericCreate>
 8008276:	4602      	mov	r2, r0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f04f 32ff 	mov.w	r2, #4294967295
 8008282:	605a      	str	r2, [r3, #4]
	}
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <_Z41__static_initialization_and_destruction_0ii>:
	}

}

#ifdef __cplusplus
}
 8008290:	b5b0      	push	{r4, r5, r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d130      	bne.n	8008302 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d12b      	bne.n	8008302 <_Z41__static_initialization_and_destruction_0ii+0x72>
AdcChannelController lpChannelAdc[10];
 80082aa:	4b22      	ldr	r3, [pc, #136]	; (8008334 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80082ac:	2409      	movs	r4, #9
 80082ae:	461d      	mov	r5, r3
 80082b0:	2c00      	cmp	r4, #0
 80082b2:	db05      	blt.n	80082c0 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80082b4:	4628      	mov	r0, r5
 80082b6:	f7ff fea2 	bl	8007ffe <_ZN20AdcChannelControllerC1Ev>
 80082ba:	3508      	adds	r5, #8
 80082bc:	3c01      	subs	r4, #1
 80082be:	e7f7      	b.n	80082b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
AdcChannelController hpChannelAdc[4];
 80082c0:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80082c2:	2403      	movs	r4, #3
 80082c4:	461d      	mov	r5, r3
 80082c6:	2c00      	cmp	r4, #0
 80082c8:	db05      	blt.n	80082d6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7ff fe97 	bl	8007ffe <_ZN20AdcChannelControllerC1Ev>
 80082d0:	3508      	adds	r5, #8
 80082d2:	3c01      	subs	r4, #1
 80082d4:	e7f7      	b.n	80082c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
can::RxMessageQueue<can::messages::PDU_RX_Control_NoOD> g_rxControllQueue;
 80082d6:	4819      	ldr	r0, [pc, #100]	; (800833c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80082d8:	f7ff ff85 	bl	80081e6 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEEC1Ev>
can::RxMessageQueue<can::messages::PDU_RX_Manual_Control> g_manualControllQueue;
 80082dc:	4818      	ldr	r0, [pc, #96]	; (8008340 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80082de:	f7ff ff97 	bl	8008210 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEEC1Ev>
can::RxMessageQueue<can::messages::PDU_RX_HP_D_Dutycycle_NoOD> g_hpDutycycleQueue;
 80082e2:	4818      	ldr	r0, [pc, #96]	; (8008344 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80082e4:	f7ff ffa9 	bl	800823a <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1Ev>
can::RxMessageQueue<can::messages::PDU_RX_LP_Dutycycle_NoOD> g_lpDutycycleQueue;
 80082e8:	4817      	ldr	r0, [pc, #92]	; (8008348 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80082ea:	f7ff ffbb 	bl	8008264 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1Ev>
Watchdog stateMachineWatchdog(OD_watchdogTimeout_get());
 80082ee:	f7fe f937 	bl	8006560 <_Z22OD_watchdogTimeout_getv>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4619      	mov	r1, r3
 80082f6:	4815      	ldr	r0, [pc, #84]	; (800834c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80082f8:	f7ff fe6f 	bl	8007fda <_ZN8WatchdogC1Em>
	OutputChannelPwm D3 { false, 100.0f };
	OutputChannelPwm D4 { false, 100.0f };
	OutputChannel SDC { true };
} PduOutputState;

PduOutputState outputState;
 80082fc:	4814      	ldr	r0, [pc, #80]	; (8008350 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80082fe:	f7ff fec9 	bl	8008094 <_ZN14PduOutputStateC1Ev>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d110      	bne.n	800832a <_Z41__static_initialization_and_destruction_0ii+0x9a>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800830e:	4293      	cmp	r3, r2
 8008310:	d10b      	bne.n	800832a <_Z41__static_initialization_and_destruction_0ii+0x9a>
can::RxMessageQueue<can::messages::PDU_RX_LP_Dutycycle_NoOD> g_lpDutycycleQueue;
 8008312:	480d      	ldr	r0, [pc, #52]	; (8008348 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008314:	f000 f81e 	bl	8008354 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEED1Ev>
can::RxMessageQueue<can::messages::PDU_RX_HP_D_Dutycycle_NoOD> g_hpDutycycleQueue;
 8008318:	480a      	ldr	r0, [pc, #40]	; (8008344 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800831a:	f000 f827 	bl	800836c <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEED1Ev>
can::RxMessageQueue<can::messages::PDU_RX_Manual_Control> g_manualControllQueue;
 800831e:	4808      	ldr	r0, [pc, #32]	; (8008340 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008320:	f000 f830 	bl	8008384 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEED1Ev>
can::RxMessageQueue<can::messages::PDU_RX_Control_NoOD> g_rxControllQueue;
 8008324:	4805      	ldr	r0, [pc, #20]	; (800833c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008326:	f000 f839 	bl	800839c <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEED1Ev>
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bdb0      	pop	{r4, r5, r7, pc}
 8008332:	bf00      	nop
 8008334:	20000a40 	.word	0x20000a40
 8008338:	20000a90 	.word	0x20000a90
 800833c:	20000ab0 	.word	0x20000ab0
 8008340:	20000ab8 	.word	0x20000ab8
 8008344:	20000ac0 	.word	0x20000ac0
 8008348:	20000ac8 	.word	0x20000ac8
 800834c:	20000ad0 	.word	0x20000ad0
 8008350:	20000ad8 	.word	0x20000ad8

08008354 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEED1Ev>:
	~RxMessageQueue() {
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
		disable();
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f829 	bl	80083b4 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7disableEv>
	}
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEED1Ev>:
	~RxMessageQueue() {
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
		disable();
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f82f 	bl	80083d8 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7disableEv>
	}
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEED1Ev>:
	~RxMessageQueue() {
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
		disable();
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f835 	bl	80083fc <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7disableEv>
	}
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEED1Ev>:
	~RxMessageQueue() {
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
		disable();
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f83b 	bl	8008420 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7disableEv>
	}
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7disableEv>:
			});
		}

	}

	void disable(){
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d004      	beq.n	80083d0 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f9 f918 	bl	8001600 <_ZN3can25unregisterMessageReceiverEj>
		}
	}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7disableEv>:
	void disable(){
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d004      	beq.n	80083f4 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f9 f906 	bl	8001600 <_ZN3can25unregisterMessageReceiverEj>
	}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7disableEv>:
	void disable(){
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d004      	beq.n	8008418 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	4618      	mov	r0, r3
 8008414:	f7f9 f8f4 	bl	8001600 <_ZN3can25unregisterMessageReceiverEj>
	}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7disableEv>:
	void disable(){
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d004      	beq.n	800843c <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	4618      	mov	r0, r3
 8008438:	f7f9 f8e2 	bl	8001600 <_ZN3can25unregisterMessageReceiverEj>
	}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <_GLOBAL__sub_I_lpChannelAdc>:
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
 8008448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800844c:	2001      	movs	r0, #1
 800844e:	f7ff ff1f 	bl	8008290 <_Z41__static_initialization_and_destruction_0ii>
 8008452:	bd80      	pop	{r7, pc}

08008454 <_GLOBAL__sub_D_lpChannelAdc>:
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
 8008458:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800845c:	2000      	movs	r0, #0
 800845e:	f7ff ff17 	bl	8008290 <_Z41__static_initialization_and_destruction_0ii>
 8008462:	bd80      	pop	{r7, pc}

08008464 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 8008464:	b084      	sub	sp, #16
 8008466:	b5b0      	push	{r4, r5, r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	f107 001c 	add.w	r0, r7, #28
 8008472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800847a:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fae2 	bl	8007a46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3308      	adds	r3, #8
 8008486:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 8008488:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff fadb 	bl	8007a46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3310      	adds	r3, #16
 8008494:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 8008496:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fad3 	bl	8007a46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f103 0418 	add.w	r4, r3, #24
 80084a6:	f107 051c 	add.w	r5, r7, #28
 80084aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80084ba:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80084ca:	b004      	add	sp, #16
 80084cc:	4770      	bx	lr
	...

080084d0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff facd 	bl	8007a7a <_ZN20AdcChannelController3getEv>
 80084e0:	4603      	mov	r3, r0
 80084e2:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 80084e4:	89fb      	ldrh	r3, [r7, #14]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800852c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 80084f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084f6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008530 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 80084fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008534 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 8008502:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008506:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8008538 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 800850a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800850e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008516:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	ee07 3a90 	vmov	s15, r3
	}
 8008520:	eeb0 0a67 	vmov.f32	s0, s15
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	40533333 	.word	0x40533333
 8008530:	457ff000 	.word	0x457ff000
 8008534:	3f428f5c 	.word	0x3f428f5c
 8008538:	3b23d70a 	.word	0x3b23d70a
 800853c:	00000000 	.word	0x00000000

08008540 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3308      	adds	r3, #8
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fa94 	bl	8007a7a <_ZN20AdcChannelController3getEv>
 8008552:	4603      	mov	r3, r0
 8008554:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = (1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) ))) - 273.15f;
 8008556:	89fb      	ldrh	r3, [r7, #14]
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008560:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008608 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 8008564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800856c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008574:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008578:	ee16 0a90 	vmov	r0, s13
 800857c:	f7f7 ffe4 	bl	8000548 <__aeabi_f2d>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	ec43 2b10 	vmov	d0, r2, r3
 8008588:	f00c ffe6 	bl	8015558 <log>
 800858c:	ec51 0b10 	vmov	r0, r1, d0
 8008590:	a317      	add	r3, pc, #92	; (adr r3, 80085f0 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	a315      	add	r3, pc, #84	; (adr r3, 80085f8 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 fe70 	bl	800028c <__adddf3>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	f04f 0000 	mov.w	r0, #0
 80085b4:	4915      	ldr	r1, [pc, #84]	; (800860c <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 80085b6:	f7f8 f949 	bl	800084c <__aeabi_ddiv>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4610      	mov	r0, r2
 80085c0:	4619      	mov	r1, r3
 80085c2:	a30f      	add	r3, pc, #60	; (adr r3, 8008600 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f7 fe5e 	bl	8000288 <__aeabi_dsub>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4610      	mov	r0, r2
 80085d2:	4619      	mov	r1, r3
 80085d4:	f7f8 fb08 	bl	8000be8 <__aeabi_d2f>
 80085d8:	4603      	mov	r3, r0
 80085da:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	ee07 3a90 	vmov	s15, r3
	}
 80085e2:	eeb0 0a67 	vmov.f32	s0, s15
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	f3af 8000 	nop.w
 80085f0:	60000000 	.word	0x60000000
 80085f4:	3f3363ac 	.word	0x3f3363ac
 80085f8:	e0000000 	.word	0xe0000000
 80085fc:	3f6b79e1 	.word	0x3f6b79e1
 8008600:	60000000 	.word	0x60000000
 8008604:	40711266 	.word	0x40711266
 8008608:	457ff000 	.word	0x457ff000
 800860c:	3ff00000 	.word	0x3ff00000

08008610 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 8008610:	b580      	push	{r7, lr}
 8008612:	ed2d 8b02 	vpush	{d8}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff8f 	bl	8008540 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 8008622:	eeb0 8a40 	vmov.f32	s16, s0
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff ff52 	bl	80084d0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 800862c:	eef0 7a40 	vmov.f32	s15, s0
 8008630:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008634:	ee17 0a90 	vmov	r0, s15
 8008638:	f7f7 ff86 	bl	8000548 <__aeabi_f2d>
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008644:	f7f8 f902 	bl	800084c <__aeabi_ddiv>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4610      	mov	r0, r2
 800864e:	4619      	mov	r1, r3
 8008650:	f7f8 faca 	bl	8000be8 <__aeabi_d2f>
 8008654:	4603      	mov	r3, r0
 8008656:	60fb      	str	r3, [r7, #12]
		return average;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	ee07 3a90 	vmov	s15, r3
	}
 800865e:	eeb0 0a67 	vmov.f32	s0, s15
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	ecbd 8b02 	vpop	{d8}
 800866a:	bd80      	pop	{r7, pc}

0800866c <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3310      	adds	r3, #16
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff f9fe 	bl	8007a7a <_ZN20AdcChannelController3getEv>
 800867e:	4603      	mov	r3, r0
 8008680:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 8008682:	89fb      	ldrh	r3, [r7, #14]
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800868c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80086c0 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 8008690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008694:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80086c4 <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 8008698:	ee27 7a87 	vmul.f32	s14, s15, s14
 800869c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80086c8 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 80086a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80086a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80086cc <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 80086a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086ac:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	ee07 3a90 	vmov	s15, r3
	}
 80086b6:	eeb0 0a67 	vmov.f32	s0, s15
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	457ff000 	.word	0x457ff000
 80086c4:	40533333 	.word	0x40533333
 80086c8:	3dda09cc 	.word	0x3dda09cc
 80086cc:	3f19999a 	.word	0x3f19999a

080086d0 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff99 	bl	8008610 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 80086de:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff ffc2 	bl	800866c <_ZN14OnBoardSensors15getInputVoltageEv>
 80086e8:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 80086ec:	ed97 0a03 	vldr	s0, [r7, #12]
 80086f0:	f7fd fa1a 	bl	8005b28 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 80086f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80086f8:	f7fd fa50 	bl	8005b9c <_Z19OD_InputVoltage_setf>
	}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <_ZL18estimateFreeMemoryv>:
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"
#include "estdio.hpp"

static inline size_t estimateFreeMemory() {
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 8008708:	f00c fe08 	bl	801531c <xPortGetFreeHeapSize>
 800870c:	4603      	mov	r3, r0
}
 800870e:	4618      	mov	r0, r3
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 100.0;
 8008718:	4b04      	ldr	r3, [pc, #16]	; (800872c <_ZL16estimateCPUusagev+0x18>)
 800871a:	ee07 3a90 	vmov	s15, r3
}
 800871e:	eeb0 0a67 	vmov.f32	s0, s15
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	42c80000 	.word	0x42c80000

08008730 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 8008730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008732:	b0a7      	sub	sp, #156	; 0x9c
 8008734:	af0c      	add	r7, sp, #48	; 0x30
 8008736:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 8008738:	4e18      	ldr	r6, [pc, #96]	; (800879c <microcontroller_info_entry+0x6c>)
 800873a:	f107 0c0c 	add.w	ip, r7, #12
 800873e:	466d      	mov	r5, sp
 8008740:	f106 040c 	add.w	r4, r6, #12
 8008744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800874a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800874c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008750:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008754:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008758:	4660      	mov	r0, ip
 800875a:	f7ff fe83 	bl	8008464 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff ffb4 	bl	80086d0 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 8008768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800876a:	2b14      	cmp	r3, #20
 800876c:	d90f      	bls.n	800878e <microcontroller_info_entry+0x5e>
			float cpuUsage = estimateCPUusage();
 800876e:	f7ff ffd1 	bl	8008714 <_ZL16estimateCPUusagev>
 8008772:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 8008776:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800877a:	f7fd f963 	bl	8005a44 <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 800877e:	f7ff ffc1 	bl	8008704 <_ZL18estimateFreeMemoryv>
 8008782:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 8008784:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008786:	f7fd f995 	bl	8005ab4 <_Z14OD_MemFree_setm>
			frameCounter = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 800878e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008790:	3301      	adds	r3, #1
 8008792:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 8008794:	2032      	movs	r0, #50	; 0x32
 8008796:	f008 fc17 	bl	8010fc8 <osDelay>
	}
 800879a:	e7e0      	b.n	800875e <microcontroller_info_entry+0x2e>
 800879c:	080188d8 	.word	0x080188d8

080087a0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80087a6:	463b      	mov	r3, r7
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	609a      	str	r2, [r3, #8]
 80087b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80087b2:	4b39      	ldr	r3, [pc, #228]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087b4:	4a39      	ldr	r2, [pc, #228]	; (800889c <MX_ADC1_Init+0xfc>)
 80087b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80087b8:	4b37      	ldr	r3, [pc, #220]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80087be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80087c0:	4b35      	ldr	r3, [pc, #212]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80087c6:	4b34      	ldr	r3, [pc, #208]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80087cc:	4b32      	ldr	r3, [pc, #200]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80087d2:	4b31      	ldr	r3, [pc, #196]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80087da:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087dc:	2200      	movs	r2, #0
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80087e0:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087e2:	4a2f      	ldr	r2, [pc, #188]	; (80088a0 <MX_ADC1_Init+0x100>)
 80087e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80087e6:	4b2c      	ldr	r3, [pc, #176]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80087ec:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087ee:	2204      	movs	r2, #4
 80087f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80087f2:	4b29      	ldr	r3, [pc, #164]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80087fa:	4b27      	ldr	r3, [pc, #156]	; (8008898 <MX_ADC1_Init+0xf8>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008800:	4825      	ldr	r0, [pc, #148]	; (8008898 <MX_ADC1_Init+0xf8>)
 8008802:	f001 ff3d 	bl	800a680 <HAL_ADC_Init>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800880c:	f000 fdf8 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008810:	230a      	movs	r3, #10
 8008812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008814:	2301      	movs	r3, #1
 8008816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008818:	2307      	movs	r3, #7
 800881a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800881c:	463b      	mov	r3, r7
 800881e:	4619      	mov	r1, r3
 8008820:	481d      	ldr	r0, [pc, #116]	; (8008898 <MX_ADC1_Init+0xf8>)
 8008822:	f002 f9a5 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800882c:	f000 fde8 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008834:	2302      	movs	r3, #2
 8008836:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8008838:	2305      	movs	r3, #5
 800883a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800883c:	463b      	mov	r3, r7
 800883e:	4619      	mov	r1, r3
 8008840:	4815      	ldr	r0, [pc, #84]	; (8008898 <MX_ADC1_Init+0xf8>)
 8008842:	f002 f995 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800884c:	f000 fdd8 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008850:	2310      	movs	r3, #16
 8008852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8008854:	2303      	movs	r3, #3
 8008856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008858:	2307      	movs	r3, #7
 800885a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800885c:	463b      	mov	r3, r7
 800885e:	4619      	mov	r1, r3
 8008860:	480d      	ldr	r0, [pc, #52]	; (8008898 <MX_ADC1_Init+0xf8>)
 8008862:	f002 f985 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800886c:	f000 fdc8 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008870:	2311      	movs	r3, #17
 8008872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8008874:	2304      	movs	r3, #4
 8008876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8008878:	2305      	movs	r3, #5
 800887a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800887c:	463b      	mov	r3, r7
 800887e:	4619      	mov	r1, r3
 8008880:	4805      	ldr	r0, [pc, #20]	; (8008898 <MX_ADC1_Init+0xf8>)
 8008882:	f002 f975 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800888c:	f000 fdb8 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000ca0 	.word	0x20000ca0
 800889c:	40012000 	.word	0x40012000
 80088a0:	0f000001 	.word	0x0f000001

080088a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80088aa:	463b      	mov	r3, r7
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	605a      	str	r2, [r3, #4]
 80088b2:	609a      	str	r2, [r3, #8]
 80088b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80088b6:	4b7c      	ldr	r3, [pc, #496]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088b8:	4a7c      	ldr	r2, [pc, #496]	; (8008aac <MX_ADC2_Init+0x208>)
 80088ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80088bc:	4b7a      	ldr	r3, [pc, #488]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80088c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80088c4:	4b78      	ldr	r3, [pc, #480]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80088ca:	4b77      	ldr	r3, [pc, #476]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088cc:	2201      	movs	r2, #1
 80088ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80088d0:	4b75      	ldr	r3, [pc, #468]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80088d6:	4b74      	ldr	r3, [pc, #464]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80088de:	4b72      	ldr	r3, [pc, #456]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80088e4:	4b70      	ldr	r3, [pc, #448]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088e6:	4a72      	ldr	r2, [pc, #456]	; (8008ab0 <MX_ADC2_Init+0x20c>)
 80088e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80088ea:	4b6f      	ldr	r3, [pc, #444]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80088f0:	4b6d      	ldr	r3, [pc, #436]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088f2:	220e      	movs	r2, #14
 80088f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80088f6:	4b6c      	ldr	r3, [pc, #432]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80088fe:	4b6a      	ldr	r3, [pc, #424]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008900:	2201      	movs	r2, #1
 8008902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008904:	4868      	ldr	r0, [pc, #416]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008906:	f001 febb 	bl	800a680 <HAL_ADC_Init>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8008910:	f000 fd76 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8008914:	2306      	movs	r3, #6
 8008916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008918:	2301      	movs	r3, #1
 800891a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800891c:	2303      	movs	r3, #3
 800891e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008920:	463b      	mov	r3, r7
 8008922:	4619      	mov	r1, r3
 8008924:	4860      	ldr	r0, [pc, #384]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008926:	f002 f923 	bl	800ab70 <HAL_ADC_ConfigChannel>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8008930:	f000 fd66 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8008934:	2305      	movs	r3, #5
 8008936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008938:	2302      	movs	r3, #2
 800893a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800893c:	463b      	mov	r3, r7
 800893e:	4619      	mov	r1, r3
 8008940:	4859      	ldr	r0, [pc, #356]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008942:	f002 f915 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800894c:	f000 fd58 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008950:	2309      	movs	r3, #9
 8008952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8008954:	2303      	movs	r3, #3
 8008956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008958:	463b      	mov	r3, r7
 800895a:	4619      	mov	r1, r3
 800895c:	4852      	ldr	r0, [pc, #328]	; (8008aa8 <MX_ADC2_Init+0x204>)
 800895e:	f002 f907 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8008968:	f000 fd4a 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800896c:	2308      	movs	r3, #8
 800896e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8008970:	2304      	movs	r3, #4
 8008972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008974:	463b      	mov	r3, r7
 8008976:	4619      	mov	r1, r3
 8008978:	484b      	ldr	r0, [pc, #300]	; (8008aa8 <MX_ADC2_Init+0x204>)
 800897a:	f002 f8f9 	bl	800ab70 <HAL_ADC_ConfigChannel>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8008984:	f000 fd3c 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008988:	2301      	movs	r3, #1
 800898a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800898c:	2305      	movs	r3, #5
 800898e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008990:	463b      	mov	r3, r7
 8008992:	4619      	mov	r1, r3
 8008994:	4844      	ldr	r0, [pc, #272]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008996:	f002 f8eb 	bl	800ab70 <HAL_ADC_ConfigChannel>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80089a0:	f000 fd2e 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80089a8:	2306      	movs	r3, #6
 80089aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80089ac:	463b      	mov	r3, r7
 80089ae:	4619      	mov	r1, r3
 80089b0:	483d      	ldr	r0, [pc, #244]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80089b2:	f002 f8dd 	bl	800ab70 <HAL_ADC_ConfigChannel>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80089bc:	f000 fd20 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80089c0:	2304      	movs	r3, #4
 80089c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80089c4:	2307      	movs	r3, #7
 80089c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80089c8:	463b      	mov	r3, r7
 80089ca:	4619      	mov	r1, r3
 80089cc:	4836      	ldr	r0, [pc, #216]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80089ce:	f002 f8cf 	bl	800ab70 <HAL_ADC_ConfigChannel>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80089d8:	f000 fd12 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80089dc:	2303      	movs	r3, #3
 80089de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80089e0:	2308      	movs	r3, #8
 80089e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80089e4:	463b      	mov	r3, r7
 80089e6:	4619      	mov	r1, r3
 80089e8:	482f      	ldr	r0, [pc, #188]	; (8008aa8 <MX_ADC2_Init+0x204>)
 80089ea:	f002 f8c1 	bl	800ab70 <HAL_ADC_ConfigChannel>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80089f4:	f000 fd04 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80089f8:	230b      	movs	r3, #11
 80089fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80089fc:	2309      	movs	r3, #9
 80089fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008a00:	463b      	mov	r3, r7
 8008a02:	4619      	mov	r1, r3
 8008a04:	4828      	ldr	r0, [pc, #160]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008a06:	f002 f8b3 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8008a10:	f000 fcf6 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008a14:	230d      	movs	r3, #13
 8008a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8008a18:	230a      	movs	r3, #10
 8008a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4821      	ldr	r0, [pc, #132]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008a22:	f002 f8a5 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8008a2c:	f000 fce8 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8008a30:	230e      	movs	r3, #14
 8008a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8008a34:	230b      	movs	r3, #11
 8008a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008a38:	463b      	mov	r3, r7
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	481a      	ldr	r0, [pc, #104]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008a3e:	f002 f897 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8008a48:	f000 fcda 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8008a50:	230c      	movs	r3, #12
 8008a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008a54:	463b      	mov	r3, r7
 8008a56:	4619      	mov	r1, r3
 8008a58:	4813      	ldr	r0, [pc, #76]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008a5a:	f002 f889 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8008a64:	f000 fccc 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008a68:	2307      	movs	r3, #7
 8008a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8008a6c:	230d      	movs	r3, #13
 8008a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008a70:	463b      	mov	r3, r7
 8008a72:	4619      	mov	r1, r3
 8008a74:	480c      	ldr	r0, [pc, #48]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008a76:	f002 f87b 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8008a80:	f000 fcbe 	bl	8009400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008a84:	230f      	movs	r3, #15
 8008a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8008a88:	230e      	movs	r3, #14
 8008a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <MX_ADC2_Init+0x204>)
 8008a92:	f002 f86d 	bl	800ab70 <HAL_ADC_ConfigChannel>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8008a9c:	f000 fcb0 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000ce8 	.word	0x20000ce8
 8008aac:	40012100 	.word	0x40012100
 8008ab0:	0f000001 	.word	0x0f000001

08008ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	605a      	str	r2, [r3, #4]
 8008ac6:	609a      	str	r2, [r3, #8]
 8008ac8:	60da      	str	r2, [r3, #12]
 8008aca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a80      	ldr	r2, [pc, #512]	; (8008cd4 <HAL_ADC_MspInit+0x220>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d15f      	bne.n	8008b96 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	623b      	str	r3, [r7, #32]
 8008ada:	4b7f      	ldr	r3, [pc, #508]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ade:	4a7e      	ldr	r2, [pc, #504]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ae6:	4b7c      	ldr	r3, [pc, #496]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aee:	623b      	str	r3, [r7, #32]
 8008af0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008af2:	2300      	movs	r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	4b78      	ldr	r3, [pc, #480]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	4a77      	ldr	r2, [pc, #476]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008afc:	f043 0304 	orr.w	r3, r3, #4
 8008b00:	6313      	str	r3, [r2, #48]	; 0x30
 8008b02:	4b75      	ldr	r3, [pc, #468]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8008b0e:	2305      	movs	r3, #5
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b12:	2303      	movs	r3, #3
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b1e:	4619      	mov	r1, r3
 8008b20:	486e      	ldr	r0, [pc, #440]	; (8008cdc <HAL_ADC_MspInit+0x228>)
 8008b22:	f003 fe6b 	bl	800c7fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008b26:	4b6e      	ldr	r3, [pc, #440]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b28:	4a6e      	ldr	r2, [pc, #440]	; (8008ce4 <HAL_ADC_MspInit+0x230>)
 8008b2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008b2c:	4b6c      	ldr	r3, [pc, #432]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b32:	4b6b      	ldr	r3, [pc, #428]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b38:	4b69      	ldr	r3, [pc, #420]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008b3e:	4b68      	ldr	r3, [pc, #416]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b46:	4b66      	ldr	r3, [pc, #408]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b4e:	4b64      	ldr	r3, [pc, #400]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008b56:	4b62      	ldr	r3, [pc, #392]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008b5c:	4b60      	ldr	r3, [pc, #384]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b62:	4b5f      	ldr	r3, [pc, #380]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008b68:	485d      	ldr	r0, [pc, #372]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b6a:	f003 fa45 	bl	800bff8 <HAL_DMA_Init>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8008b74:	f000 fc44 	bl	8009400 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a59      	ldr	r2, [pc, #356]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b7e:	4a58      	ldr	r2, [pc, #352]	; (8008ce0 <HAL_ADC_MspInit+0x22c>)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2105      	movs	r1, #5
 8008b88:	2012      	movs	r0, #18
 8008b8a:	f003 f9ef 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008b8e:	2012      	movs	r0, #18
 8008b90:	f003 fa08 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8008b94:	e09a      	b.n	8008ccc <HAL_ADC_MspInit+0x218>
  else if(adcHandle->Instance==ADC2)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a53      	ldr	r2, [pc, #332]	; (8008ce8 <HAL_ADC_MspInit+0x234>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	f040 8095 	bne.w	8008ccc <HAL_ADC_MspInit+0x218>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	4b4c      	ldr	r3, [pc, #304]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008baa:	4a4b      	ldr	r2, [pc, #300]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb2:	4b49      	ldr	r3, [pc, #292]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	4b45      	ldr	r3, [pc, #276]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	4a44      	ldr	r2, [pc, #272]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bc8:	f043 0304 	orr.w	r3, r3, #4
 8008bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8008bce:	4b42      	ldr	r3, [pc, #264]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	4b3e      	ldr	r3, [pc, #248]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	4a3d      	ldr	r2, [pc, #244]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008be4:	f043 0301 	orr.w	r3, r3, #1
 8008be8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bea:	4b3b      	ldr	r3, [pc, #236]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	4b37      	ldr	r3, [pc, #220]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	4a36      	ldr	r2, [pc, #216]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	6313      	str	r3, [r2, #48]	; 0x30
 8008c06:	4b34      	ldr	r3, [pc, #208]	; (8008cd8 <HAL_ADC_MspInit+0x224>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|LP9_sensing_Pin|ADC_IN12_Board_VCC_Pin|LP10_sensing_Pin
 8008c12:	233f      	movs	r3, #63	; 0x3f
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c16:	2303      	movs	r3, #3
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c22:	4619      	mov	r1, r3
 8008c24:	482d      	ldr	r0, [pc, #180]	; (8008cdc <HAL_ADC_MspInit+0x228>)
 8008c26:	f003 fde9 	bl	800c7fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP6_sensing_Pin|LP5_sensing_Pin|HP2_sensing_Pin|LP8_sensing_Pin
 8008c2a:	23ff      	movs	r3, #255	; 0xff
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	482b      	ldr	r0, [pc, #172]	; (8008cec <HAL_ADC_MspInit+0x238>)
 8008c3e:	f003 fddd 	bl	800c7fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP4_sensing_Pin|LP3_sensing_Pin;
 8008c42:	2303      	movs	r3, #3
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c46:	2303      	movs	r3, #3
 8008c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c52:	4619      	mov	r1, r3
 8008c54:	4826      	ldr	r0, [pc, #152]	; (8008cf0 <HAL_ADC_MspInit+0x23c>)
 8008c56:	f003 fdd1 	bl	800c7fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8008c5a:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c5c:	4a26      	ldr	r2, [pc, #152]	; (8008cf8 <HAL_ADC_MspInit+0x244>)
 8008c5e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8008c60:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c66:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c68:	4b22      	ldr	r3, [pc, #136]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c6e:	4b21      	ldr	r3, [pc, #132]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008c74:	4b1f      	ldr	r3, [pc, #124]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c7a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008c7c:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c82:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008c84:	4b1b      	ldr	r3, [pc, #108]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008c8a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8008c8c:	4b19      	ldr	r3, [pc, #100]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8008c92:	4b18      	ldr	r3, [pc, #96]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c98:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c9a:	4b16      	ldr	r3, [pc, #88]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8008ca0:	4814      	ldr	r0, [pc, #80]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008ca2:	f003 f9a9 	bl	800bff8 <HAL_DMA_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_ADC_MspInit+0x1fc>
      Error_Handler();
 8008cac:	f000 fba8 	bl	8009400 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a10      	ldr	r2, [pc, #64]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8008cb6:	4a0f      	ldr	r2, [pc, #60]	; (8008cf4 <HAL_ADC_MspInit+0x240>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2105      	movs	r1, #5
 8008cc0:	2012      	movs	r0, #18
 8008cc2:	f003 f953 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008cc6:	2012      	movs	r0, #18
 8008cc8:	f003 f96c 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
}
 8008ccc:	bf00      	nop
 8008cce:	3738      	adds	r7, #56	; 0x38
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	40012000 	.word	0x40012000
 8008cd8:	40023800 	.word	0x40023800
 8008cdc:	40020800 	.word	0x40020800
 8008ce0:	20000d30 	.word	0x20000d30
 8008ce4:	40026410 	.word	0x40026410
 8008ce8:	40012100 	.word	0x40012100
 8008cec:	40020000 	.word	0x40020000
 8008cf0:	40020400 	.word	0x40020400
 8008cf4:	20000d90 	.word	0x20000d90
 8008cf8:	40026440 	.word	0x40026440

08008cfc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008d00:	4b17      	ldr	r3, [pc, #92]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <MX_CAN1_Init+0x68>)
 8008d04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8008d06:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d08:	2203      	movs	r2, #3
 8008d0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008d0c:	4b14      	ldr	r3, [pc, #80]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008d18:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d1a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8008d1e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8008d20:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008d26:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008d28:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008d4c:	4804      	ldr	r0, [pc, #16]	; (8008d60 <MX_CAN1_Init+0x64>)
 8008d4e:	f002 f9b9 	bl	800b0c4 <HAL_CAN_Init>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8008d58:	f000 fb52 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008d5c:	bf00      	nop
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000df0 	.word	0x20000df0
 8008d64:	40006400 	.word	0x40006400

08008d68 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8008d6c:	4b17      	ldr	r3, [pc, #92]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d6e:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <MX_CAN2_Init+0x68>)
 8008d70:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8008d72:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d74:	2203      	movs	r2, #3
 8008d76:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8008d78:	4b14      	ldr	r3, [pc, #80]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008d84:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d86:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8008d8a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008d92:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8008da0:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008da8:	2201      	movs	r2, #1
 8008daa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8008db2:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8008db8:	4804      	ldr	r0, [pc, #16]	; (8008dcc <MX_CAN2_Init+0x64>)
 8008dba:	f002 f983 	bl	800b0c4 <HAL_CAN_Init>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8008dc4:	f000 fb1c 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8008dc8:	bf00      	nop
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000e18 	.word	0x20000e18
 8008dd0:	40006800 	.word	0x40006800

08008dd4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08c      	sub	sp, #48	; 0x30
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ddc:	f107 031c 	add.w	r3, r7, #28
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	605a      	str	r2, [r3, #4]
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	60da      	str	r2, [r3, #12]
 8008dea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a52      	ldr	r2, [pc, #328]	; (8008f3c <HAL_CAN_MspInit+0x168>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d145      	bne.n	8008e82 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008df6:	4b52      	ldr	r3, [pc, #328]	; (8008f40 <HAL_CAN_MspInit+0x16c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	4a50      	ldr	r2, [pc, #320]	; (8008f40 <HAL_CAN_MspInit+0x16c>)
 8008dfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008e00:	4b4f      	ldr	r3, [pc, #316]	; (8008f40 <HAL_CAN_MspInit+0x16c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d10d      	bne.n	8008e24 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	4b4d      	ldr	r3, [pc, #308]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	4a4c      	ldr	r2, [pc, #304]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e16:	6413      	str	r3, [r2, #64]	; 0x40
 8008e18:	4b4a      	ldr	r3, [pc, #296]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	4b46      	ldr	r3, [pc, #280]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	4a45      	ldr	r2, [pc, #276]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e2e:	f043 0308 	orr.w	r3, r3, #8
 8008e32:	6313      	str	r3, [r2, #48]	; 0x30
 8008e34:	4b43      	ldr	r3, [pc, #268]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008e40:	2303      	movs	r3, #3
 8008e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e44:	2302      	movs	r3, #2
 8008e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008e50:	2309      	movs	r3, #9
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e54:	f107 031c 	add.w	r3, r7, #28
 8008e58:	4619      	mov	r1, r3
 8008e5a:	483b      	ldr	r0, [pc, #236]	; (8008f48 <HAL_CAN_MspInit+0x174>)
 8008e5c:	f003 fcce 	bl	800c7fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008e60:	2200      	movs	r2, #0
 8008e62:	2105      	movs	r1, #5
 8008e64:	2014      	movs	r0, #20
 8008e66:	f003 f881 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008e6a:	2014      	movs	r0, #20
 8008e6c:	f003 f89a 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8008e70:	2200      	movs	r2, #0
 8008e72:	2105      	movs	r1, #5
 8008e74:	2015      	movs	r0, #21
 8008e76:	f003 f879 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008e7a:	2015      	movs	r0, #21
 8008e7c:	f003 f892 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8008e80:	e057      	b.n	8008f32 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a31      	ldr	r2, [pc, #196]	; (8008f4c <HAL_CAN_MspInit+0x178>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d152      	bne.n	8008f32 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	4b2c      	ldr	r3, [pc, #176]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e94:	4a2b      	ldr	r2, [pc, #172]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e9c:	4b29      	ldr	r3, [pc, #164]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ea4:	613b      	str	r3, [r7, #16]
 8008ea6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <HAL_CAN_MspInit+0x16c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a24      	ldr	r2, [pc, #144]	; (8008f40 <HAL_CAN_MspInit+0x16c>)
 8008eb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008eb2:	4b23      	ldr	r3, [pc, #140]	; (8008f40 <HAL_CAN_MspInit+0x16c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d10d      	bne.n	8008ed6 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	4a20      	ldr	r2, [pc, #128]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8008eca:	4b1e      	ldr	r3, [pc, #120]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008ee0:	f043 0302 	orr.w	r3, r3, #2
 8008ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ee6:	4b17      	ldr	r3, [pc, #92]	; (8008f44 <HAL_CAN_MspInit+0x170>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	60bb      	str	r3, [r7, #8]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008ef2:	2360      	movs	r3, #96	; 0x60
 8008ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008efe:	2303      	movs	r3, #3
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8008f02:	2309      	movs	r3, #9
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f06:	f107 031c 	add.w	r3, r7, #28
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4810      	ldr	r0, [pc, #64]	; (8008f50 <HAL_CAN_MspInit+0x17c>)
 8008f0e:	f003 fc75 	bl	800c7fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8008f12:	2200      	movs	r2, #0
 8008f14:	2105      	movs	r1, #5
 8008f16:	2040      	movs	r0, #64	; 0x40
 8008f18:	f003 f828 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8008f1c:	2040      	movs	r0, #64	; 0x40
 8008f1e:	f003 f841 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8008f22:	2200      	movs	r2, #0
 8008f24:	2105      	movs	r1, #5
 8008f26:	2041      	movs	r0, #65	; 0x41
 8008f28:	f003 f820 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8008f2c:	2041      	movs	r0, #65	; 0x41
 8008f2e:	f003 f839 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
}
 8008f32:	bf00      	nop
 8008f34:	3730      	adds	r7, #48	; 0x30
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	40006400 	.word	0x40006400
 8008f40:	20000e40 	.word	0x20000e40
 8008f44:	40023800 	.word	0x40023800
 8008f48:	40020c00 	.word	0x40020c00
 8008f4c:	40006800 	.word	0x40006800
 8008f50:	40020400 	.word	0x40020400

08008f54 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008f58:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <MX_CRC_Init+0x20>)
 8008f5a:	4a07      	ldr	r2, [pc, #28]	; (8008f78 <MX_CRC_Init+0x24>)
 8008f5c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008f5e:	4805      	ldr	r0, [pc, #20]	; (8008f74 <MX_CRC_Init+0x20>)
 8008f60:	f003 f82e 	bl	800bfc0 <HAL_CRC_Init>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008f6a:	f000 fa49 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008f6e:	bf00      	nop
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000e44 	.word	0x20000e44
 8008f78:	40023000 	.word	0x40023000

08008f7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a0b      	ldr	r2, [pc, #44]	; (8008fb8 <HAL_CRC_MspInit+0x3c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d10d      	bne.n	8008faa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <HAL_CRC_MspInit+0x40>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <HAL_CRC_MspInit+0x40>)
 8008f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f9e:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <HAL_CRC_MspInit+0x40>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	40023000 	.word	0x40023000
 8008fbc:	40023800 	.word	0x40023800

08008fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	4b23      	ldr	r3, [pc, #140]	; (8009058 <MX_DMA_Init+0x98>)
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	4a22      	ldr	r2, [pc, #136]	; (8009058 <MX_DMA_Init+0x98>)
 8008fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd6:	4b20      	ldr	r3, [pc, #128]	; (8009058 <MX_DMA_Init+0x98>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fde:	607b      	str	r3, [r7, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	4b1c      	ldr	r3, [pc, #112]	; (8009058 <MX_DMA_Init+0x98>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4a1b      	ldr	r2, [pc, #108]	; (8009058 <MX_DMA_Init+0x98>)
 8008fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff2:	4b19      	ldr	r3, [pc, #100]	; (8009058 <MX_DMA_Init+0x98>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8008ffe:	2200      	movs	r2, #0
 8009000:	2105      	movs	r1, #5
 8009002:	200f      	movs	r0, #15
 8009004:	f002 ffb2 	bl	800bf6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8009008:	200f      	movs	r0, #15
 800900a:	f002 ffcb 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800900e:	2200      	movs	r2, #0
 8009010:	2105      	movs	r1, #5
 8009012:	2010      	movs	r0, #16
 8009014:	f002 ffaa 	bl	800bf6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8009018:	2010      	movs	r0, #16
 800901a:	f002 ffc3 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800901e:	2200      	movs	r2, #0
 8009020:	2105      	movs	r1, #5
 8009022:	2011      	movs	r0, #17
 8009024:	f002 ffa2 	bl	800bf6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8009028:	2011      	movs	r0, #17
 800902a:	f002 ffbb 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800902e:	2200      	movs	r2, #0
 8009030:	2105      	movs	r1, #5
 8009032:	2038      	movs	r0, #56	; 0x38
 8009034:	f002 ff9a 	bl	800bf6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009038:	2038      	movs	r0, #56	; 0x38
 800903a:	f002 ffb3 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800903e:	2200      	movs	r2, #0
 8009040:	2105      	movs	r1, #5
 8009042:	203a      	movs	r0, #58	; 0x3a
 8009044:	f002 ff92 	bl	800bf6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009048:	203a      	movs	r0, #58	; 0x3a
 800904a:	f002 ffab 	bl	800bfa4 <HAL_NVIC_EnableIRQ>

}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	40023800 	.word	0x40023800

0800905c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0

}
 8009060:	bf00      	nop
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800906a:	b480      	push	{r7}
 800906c:	af00      	add	r7, sp, #0
return 0;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8009094:	bf00      	nop
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 80090a4:	4a14      	ldr	r2, [pc, #80]	; (80090f8 <MX_FREERTOS_Init+0x58>)
 80090a6:	2101      	movs	r1, #1
 80090a8:	2010      	movs	r0, #16
 80090aa:	f008 f9f5 	bl	8011498 <osMessageQueueNew>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4a12      	ldr	r2, [pc, #72]	; (80090fc <MX_FREERTOS_Init+0x5c>)
 80090b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80090b4:	4a12      	ldr	r2, [pc, #72]	; (8009100 <MX_FREERTOS_Init+0x60>)
 80090b6:	2100      	movs	r1, #0
 80090b8:	4812      	ldr	r0, [pc, #72]	; (8009104 <MX_FREERTOS_Init+0x64>)
 80090ba:	f007 fef3 	bl	8010ea4 <osThreadNew>
 80090be:	4603      	mov	r3, r0
 80090c0:	4a11      	ldr	r2, [pc, #68]	; (8009108 <MX_FREERTOS_Init+0x68>)
 80090c2:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 80090c4:	4a11      	ldr	r2, [pc, #68]	; (800910c <MX_FREERTOS_Init+0x6c>)
 80090c6:	2100      	movs	r1, #0
 80090c8:	4811      	ldr	r0, [pc, #68]	; (8009110 <MX_FREERTOS_Init+0x70>)
 80090ca:	f007 feeb 	bl	8010ea4 <osThreadNew>
 80090ce:	4603      	mov	r3, r0
 80090d0:	4a10      	ldr	r2, [pc, #64]	; (8009114 <MX_FREERTOS_Init+0x74>)
 80090d2:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 80090d4:	4a10      	ldr	r2, [pc, #64]	; (8009118 <MX_FREERTOS_Init+0x78>)
 80090d6:	2100      	movs	r1, #0
 80090d8:	4810      	ldr	r0, [pc, #64]	; (800911c <MX_FREERTOS_Init+0x7c>)
 80090da:	f007 fee3 	bl	8010ea4 <osThreadNew>
 80090de:	4603      	mov	r3, r0
 80090e0:	4a0f      	ldr	r2, [pc, #60]	; (8009120 <MX_FREERTOS_Init+0x80>)
 80090e2:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 80090e4:	4a0f      	ldr	r2, [pc, #60]	; (8009124 <MX_FREERTOS_Init+0x84>)
 80090e6:	2100      	movs	r1, #0
 80090e8:	480f      	ldr	r0, [pc, #60]	; (8009128 <MX_FREERTOS_Init+0x88>)
 80090ea:	f007 fedb 	bl	8010ea4 <osThreadNew>
 80090ee:	4603      	mov	r3, r0
 80090f0:	4a0e      	ldr	r2, [pc, #56]	; (800912c <MX_FREERTOS_Init+0x8c>)
 80090f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80090f4:	bf00      	nop
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	080189a0 	.word	0x080189a0
 80090fc:	2000111c 	.word	0x2000111c
 8009100:	08018910 	.word	0x08018910
 8009104:	08009131 	.word	0x08009131
 8009108:	20000e4c 	.word	0x20000e4c
 800910c:	08018934 	.word	0x08018934
 8009110:	08002215 	.word	0x08002215
 8009114:	20001110 	.word	0x20001110
 8009118:	08018958 	.word	0x08018958
 800911c:	080081d5 	.word	0x080081d5
 8009120:	20001114 	.word	0x20001114
 8009124:	0801897c 	.word	0x0801897c
 8009128:	08008731 	.word	0x08008731
 800912c:	20001118 	.word	0x20001118

08009130 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009138:	2001      	movs	r0, #1
 800913a:	f007 ff45 	bl	8010fc8 <osDelay>
 800913e:	e7fb      	b.n	8009138 <StartDefaultTask+0x8>

08009140 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	; 0x28
 8009144:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009146:	f107 0314 	add.w	r3, r7, #20
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	605a      	str	r2, [r3, #4]
 8009150:	609a      	str	r2, [r3, #8]
 8009152:	60da      	str	r2, [r3, #12]
 8009154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	4b4f      	ldr	r3, [pc, #316]	; (8009298 <MX_GPIO_Init+0x158>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	4a4e      	ldr	r2, [pc, #312]	; (8009298 <MX_GPIO_Init+0x158>)
 8009160:	f043 0304 	orr.w	r3, r3, #4
 8009164:	6313      	str	r3, [r2, #48]	; 0x30
 8009166:	4b4c      	ldr	r3, [pc, #304]	; (8009298 <MX_GPIO_Init+0x158>)
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	4b48      	ldr	r3, [pc, #288]	; (8009298 <MX_GPIO_Init+0x158>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	4a47      	ldr	r2, [pc, #284]	; (8009298 <MX_GPIO_Init+0x158>)
 800917c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009180:	6313      	str	r3, [r2, #48]	; 0x30
 8009182:	4b45      	ldr	r3, [pc, #276]	; (8009298 <MX_GPIO_Init+0x158>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]
 8009192:	4b41      	ldr	r3, [pc, #260]	; (8009298 <MX_GPIO_Init+0x158>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	4a40      	ldr	r2, [pc, #256]	; (8009298 <MX_GPIO_Init+0x158>)
 8009198:	f043 0301 	orr.w	r3, r3, #1
 800919c:	6313      	str	r3, [r2, #48]	; 0x30
 800919e:	4b3e      	ldr	r3, [pc, #248]	; (8009298 <MX_GPIO_Init+0x158>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	60bb      	str	r3, [r7, #8]
 80091a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
 80091ae:	4b3a      	ldr	r3, [pc, #232]	; (8009298 <MX_GPIO_Init+0x158>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	4a39      	ldr	r2, [pc, #228]	; (8009298 <MX_GPIO_Init+0x158>)
 80091b4:	f043 0302 	orr.w	r3, r3, #2
 80091b8:	6313      	str	r3, [r2, #48]	; 0x30
 80091ba:	4b37      	ldr	r3, [pc, #220]	; (8009298 <MX_GPIO_Init+0x158>)
 80091bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	607b      	str	r3, [r7, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091c6:	2300      	movs	r3, #0
 80091c8:	603b      	str	r3, [r7, #0]
 80091ca:	4b33      	ldr	r3, [pc, #204]	; (8009298 <MX_GPIO_Init+0x158>)
 80091cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ce:	4a32      	ldr	r2, [pc, #200]	; (8009298 <MX_GPIO_Init+0x158>)
 80091d0:	f043 0308 	orr.w	r3, r3, #8
 80091d4:	6313      	str	r3, [r2, #48]	; 0x30
 80091d6:	4b30      	ldr	r3, [pc, #192]	; (8009298 <MX_GPIO_Init+0x158>)
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	603b      	str	r3, [r7, #0]
 80091e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LP7_control_GPIO_Port, LP7_control_Pin, GPIO_PIN_RESET);
 80091e2:	2200      	movs	r2, #0
 80091e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091e8:	482c      	ldr	r0, [pc, #176]	; (800929c <MX_GPIO_Init+0x15c>)
 80091ea:	f003 fca3 	bl	800cb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HP3_control_Pin|SDC_control_Pin|HP4_control_Pin|LP4_control_Pin, GPIO_PIN_RESET);
 80091ee:	2200      	movs	r2, #0
 80091f0:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 80091f4:	482a      	ldr	r0, [pc, #168]	; (80092a0 <MX_GPIO_Init+0x160>)
 80091f6:	f003 fc9d 	bl	800cb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LP5_control_Pin|LP6_control_Pin, GPIO_PIN_RESET);
 80091fa:	2200      	movs	r2, #0
 80091fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009200:	4828      	ldr	r0, [pc, #160]	; (80092a4 <MX_GPIO_Init+0x164>)
 8009202:	f003 fc97 	bl	800cb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8009206:	2305      	movs	r3, #5
 8009208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800920a:	2303      	movs	r3, #3
 800920c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009212:	f107 0314 	add.w	r3, r7, #20
 8009216:	4619      	mov	r1, r3
 8009218:	4822      	ldr	r0, [pc, #136]	; (80092a4 <MX_GPIO_Init+0x164>)
 800921a:	f003 faef 	bl	800c7fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LP7_control_Pin;
 800921e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009224:	2301      	movs	r3, #1
 8009226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009228:	2300      	movs	r3, #0
 800922a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800922c:	2300      	movs	r3, #0
 800922e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LP7_control_GPIO_Port, &GPIO_InitStruct);
 8009230:	f107 0314 	add.w	r3, r7, #20
 8009234:	4619      	mov	r1, r3
 8009236:	4819      	ldr	r0, [pc, #100]	; (800929c <MX_GPIO_Init+0x15c>)
 8009238:	f003 fae0 	bl	800c7fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HP3_control_Pin|SDC_control_Pin|HP4_control_Pin|LP4_control_Pin;
 800923c:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8009240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009242:	2301      	movs	r3, #1
 8009244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800924a:	2300      	movs	r3, #0
 800924c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800924e:	f107 0314 	add.w	r3, r7, #20
 8009252:	4619      	mov	r1, r3
 8009254:	4812      	ldr	r0, [pc, #72]	; (80092a0 <MX_GPIO_Init+0x160>)
 8009256:	f003 fad1 	bl	800c7fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LP5_control_Pin|LP6_control_Pin;
 800925a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800925e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009260:	2301      	movs	r3, #1
 8009262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009268:	2300      	movs	r3, #0
 800926a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	4619      	mov	r1, r3
 8009272:	480c      	ldr	r0, [pc, #48]	; (80092a4 <MX_GPIO_Init+0x164>)
 8009274:	f003 fac2 	bl	800c7fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8009278:	2318      	movs	r3, #24
 800927a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009280:	2300      	movs	r3, #0
 8009282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	4619      	mov	r1, r3
 800928a:	4807      	ldr	r0, [pc, #28]	; (80092a8 <MX_GPIO_Init+0x168>)
 800928c:	f003 fab6 	bl	800c7fc <HAL_GPIO_Init>

}
 8009290:	bf00      	nop
 8009292:	3728      	adds	r7, #40	; 0x28
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40023800 	.word	0x40023800
 800929c:	40020400 	.word	0x40020400
 80092a0:	40020000 	.word	0x40020000
 80092a4:	40020800 	.word	0x40020800
 80092a8:	40020c00 	.word	0x40020c00

080092ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80092b0:	f001 f9a4 	bl	800a5fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80092b4:	f000 f828 	bl	8009308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80092b8:	f7ff ff42 	bl	8009140 <MX_GPIO_Init>
  MX_DMA_Init();
 80092bc:	f7ff fe80 	bl	8008fc0 <MX_DMA_Init>
  MX_ADC1_Init();
 80092c0:	f7ff fa6e 	bl	80087a0 <MX_ADC1_Init>
  MX_CAN1_Init();
 80092c4:	f7ff fd1a 	bl	8008cfc <MX_CAN1_Init>
  MX_CAN2_Init();
 80092c8:	f7ff fd4e 	bl	8008d68 <MX_CAN2_Init>
  MX_CRC_Init();
 80092cc:	f7ff fe42 	bl	8008f54 <MX_CRC_Init>
  MX_RNG_Init();
 80092d0:	f000 f89c 	bl	800940c <MX_RNG_Init>
  MX_USART2_UART_Init();
 80092d4:	f001 f888 	bl	800a3e8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80092d8:	f000 fbe8 	bl	8009aac <MX_TIM4_Init>
  MX_TIM2_Init();
 80092dc:	f000 fada 	bl	8009894 <MX_TIM2_Init>
  MX_TIM8_Init();
 80092e0:	f000 fc70 	bl	8009bc4 <MX_TIM8_Init>
  MX_TIM11_Init();
 80092e4:	f000 fd74 	bl	8009dd0 <MX_TIM11_Init>
  MX_TIM12_Init();
 80092e8:	f000 fdc0 	bl	8009e6c <MX_TIM12_Init>
  MX_TIM3_Init();
 80092ec:	f000 fb5e 	bl	80099ac <MX_TIM3_Init>
  MX_TIM10_Init();
 80092f0:	f000 fd20 	bl	8009d34 <MX_TIM10_Init>
  MX_ADC2_Init();
 80092f4:	f7ff fad6 	bl	80088a4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80092f8:	f007 fd8a 	bl	8010e10 <osKernelInitialize>
  MX_FREERTOS_Init();
 80092fc:	f7ff fed0 	bl	80090a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8009300:	f007 fdaa 	bl	8010e58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009304:	e7fe      	b.n	8009304 <main+0x58>
	...

08009308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b094      	sub	sp, #80	; 0x50
 800930c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800930e:	f107 0320 	add.w	r3, r7, #32
 8009312:	2230      	movs	r2, #48	; 0x30
 8009314:	2100      	movs	r1, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f00c fc72 	bl	8015c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800931c:	f107 030c 	add.w	r3, r7, #12
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	609a      	str	r2, [r3, #8]
 8009328:	60da      	str	r2, [r3, #12]
 800932a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800932c:	2300      	movs	r3, #0
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <SystemClock_Config+0xcc>)
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	4a27      	ldr	r2, [pc, #156]	; (80093d4 <SystemClock_Config+0xcc>)
 8009336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800933a:	6413      	str	r3, [r2, #64]	; 0x40
 800933c:	4b25      	ldr	r3, [pc, #148]	; (80093d4 <SystemClock_Config+0xcc>)
 800933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009344:	60bb      	str	r3, [r7, #8]
 8009346:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009348:	2300      	movs	r3, #0
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <SystemClock_Config+0xd0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a21      	ldr	r2, [pc, #132]	; (80093d8 <SystemClock_Config+0xd0>)
 8009352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	4b1f      	ldr	r3, [pc, #124]	; (80093d8 <SystemClock_Config+0xd0>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009364:	2301      	movs	r3, #1
 8009366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800936e:	2302      	movs	r3, #2
 8009370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009378:	2308      	movs	r3, #8
 800937a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800937c:	23a8      	movs	r3, #168	; 0xa8
 800937e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009380:	2302      	movs	r3, #2
 8009382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009384:	2307      	movs	r3, #7
 8009386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009388:	f107 0320 	add.w	r3, r7, #32
 800938c:	4618      	mov	r0, r3
 800938e:	f003 fbeb 	bl	800cb68 <HAL_RCC_OscConfig>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009398:	f000 f832 	bl	8009400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800939c:	230f      	movs	r3, #15
 800939e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093a0:	2302      	movs	r3, #2
 80093a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80093a4:	2300      	movs	r3, #0
 80093a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80093a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80093ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80093ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	2105      	movs	r1, #5
 80093ba:	4618      	mov	r0, r3
 80093bc:	f003 fe4c 	bl	800d058 <HAL_RCC_ClockConfig>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80093c6:	f000 f81b 	bl	8009400 <Error_Handler>
  }
}
 80093ca:	bf00      	nop
 80093cc:	3750      	adds	r7, #80	; 0x50
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40023800 	.word	0x40023800
 80093d8:	40007000 	.word	0x40007000

080093dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a04      	ldr	r2, [pc, #16]	; (80093fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d101      	bne.n	80093f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80093ee:	f001 f927 	bl	800a640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	40010000 	.word	0x40010000

08009400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009404:	b672      	cpsid	i
}
 8009406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009408:	e7fe      	b.n	8009408 <Error_Handler+0x8>
	...

0800940c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8009410:	4b06      	ldr	r3, [pc, #24]	; (800942c <MX_RNG_Init+0x20>)
 8009412:	4a07      	ldr	r2, [pc, #28]	; (8009430 <MX_RNG_Init+0x24>)
 8009414:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009416:	4805      	ldr	r0, [pc, #20]	; (800942c <MX_RNG_Init+0x20>)
 8009418:	f004 f86e 	bl	800d4f8 <HAL_RNG_Init>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8009422:	f7ff ffed 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8009426:	bf00      	nop
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20001120 	.word	0x20001120
 8009430:	50060800 	.word	0x50060800

08009434 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a0b      	ldr	r2, [pc, #44]	; (8009470 <HAL_RNG_MspInit+0x3c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d10d      	bne.n	8009462 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <HAL_RNG_MspInit+0x40>)
 800944c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944e:	4a09      	ldr	r2, [pc, #36]	; (8009474 <HAL_RNG_MspInit+0x40>)
 8009450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009454:	6353      	str	r3, [r2, #52]	; 0x34
 8009456:	4b07      	ldr	r3, [pc, #28]	; (8009474 <HAL_RNG_MspInit+0x40>)
 8009458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	50060800 	.word	0x50060800
 8009474:	40023800 	.word	0x40023800

08009478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800947e:	2300      	movs	r3, #0
 8009480:	607b      	str	r3, [r7, #4]
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <HAL_MspInit+0x54>)
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	4a11      	ldr	r2, [pc, #68]	; (80094cc <HAL_MspInit+0x54>)
 8009488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800948c:	6453      	str	r3, [r2, #68]	; 0x44
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <HAL_MspInit+0x54>)
 8009490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009496:	607b      	str	r3, [r7, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <HAL_MspInit+0x54>)
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <HAL_MspInit+0x54>)
 80094a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094a8:	6413      	str	r3, [r2, #64]	; 0x40
 80094aa:	4b08      	ldr	r3, [pc, #32]	; (80094cc <HAL_MspInit+0x54>)
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80094b6:	2200      	movs	r2, #0
 80094b8:	210f      	movs	r1, #15
 80094ba:	f06f 0001 	mvn.w	r0, #1
 80094be:	f002 fd55 	bl	800bf6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	40023800 	.word	0x40023800

080094d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08c      	sub	sp, #48	; 0x30
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80094e0:	2300      	movs	r3, #0
 80094e2:	60bb      	str	r3, [r7, #8]
 80094e4:	4b2f      	ldr	r3, [pc, #188]	; (80095a4 <HAL_InitTick+0xd4>)
 80094e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e8:	4a2e      	ldr	r2, [pc, #184]	; (80095a4 <HAL_InitTick+0xd4>)
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	6453      	str	r3, [r2, #68]	; 0x44
 80094f0:	4b2c      	ldr	r3, [pc, #176]	; (80095a4 <HAL_InitTick+0xd4>)
 80094f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	60bb      	str	r3, [r7, #8]
 80094fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80094fc:	f107 020c 	add.w	r2, r7, #12
 8009500:	f107 0310 	add.w	r3, r7, #16
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f003 ffc4 	bl	800d494 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800950c:	f003 ffae 	bl	800d46c <HAL_RCC_GetPCLK2Freq>
 8009510:	4603      	mov	r3, r0
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	4a23      	ldr	r2, [pc, #140]	; (80095a8 <HAL_InitTick+0xd8>)
 800951a:	fba2 2303 	umull	r2, r3, r2, r3
 800951e:	0c9b      	lsrs	r3, r3, #18
 8009520:	3b01      	subs	r3, #1
 8009522:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009524:	4b21      	ldr	r3, [pc, #132]	; (80095ac <HAL_InitTick+0xdc>)
 8009526:	4a22      	ldr	r2, [pc, #136]	; (80095b0 <HAL_InitTick+0xe0>)
 8009528:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800952a:	4b20      	ldr	r3, [pc, #128]	; (80095ac <HAL_InitTick+0xdc>)
 800952c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009530:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009532:	4a1e      	ldr	r2, [pc, #120]	; (80095ac <HAL_InitTick+0xdc>)
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009538:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <HAL_InitTick+0xdc>)
 800953a:	2200      	movs	r2, #0
 800953c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <HAL_InitTick+0xdc>)
 8009540:	2200      	movs	r2, #0
 8009542:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009544:	4b19      	ldr	r3, [pc, #100]	; (80095ac <HAL_InitTick+0xdc>)
 8009546:	2200      	movs	r2, #0
 8009548:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800954a:	4818      	ldr	r0, [pc, #96]	; (80095ac <HAL_InitTick+0xdc>)
 800954c:	f003 fffe 	bl	800d54c <HAL_TIM_Base_Init>
 8009550:	4603      	mov	r3, r0
 8009552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8009556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800955a:	2b00      	cmp	r3, #0
 800955c:	d11b      	bne.n	8009596 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800955e:	4813      	ldr	r0, [pc, #76]	; (80095ac <HAL_InitTick+0xdc>)
 8009560:	f004 f844 	bl	800d5ec <HAL_TIM_Base_Start_IT>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800956a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800956e:	2b00      	cmp	r3, #0
 8009570:	d111      	bne.n	8009596 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009572:	2019      	movs	r0, #25
 8009574:	f002 fd16 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b0f      	cmp	r3, #15
 800957c:	d808      	bhi.n	8009590 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800957e:	2200      	movs	r2, #0
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	2019      	movs	r0, #25
 8009584:	f002 fcf2 	bl	800bf6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009588:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <HAL_InitTick+0xe4>)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	e002      	b.n	8009596 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8009596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800959a:	4618      	mov	r0, r3
 800959c:	3730      	adds	r7, #48	; 0x30
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40023800 	.word	0x40023800
 80095a8:	431bde83 	.word	0x431bde83
 80095ac:	20001130 	.word	0x20001130
 80095b0:	40010000 	.word	0x40010000
 80095b4:	20000034 	.word	0x20000034

080095b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80095bc:	e7fe      	b.n	80095bc <NMI_Handler+0x4>

080095be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095be:	b480      	push	{r7}
 80095c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80095c2:	e7fe      	b.n	80095c2 <HardFault_Handler+0x4>

080095c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80095c8:	e7fe      	b.n	80095c8 <MemManage_Handler+0x4>

080095ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80095ca:	b480      	push	{r7}
 80095cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80095ce:	e7fe      	b.n	80095ce <BusFault_Handler+0x4>

080095d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80095d0:	b480      	push	{r7}
 80095d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80095d4:	e7fe      	b.n	80095d4 <UsageFault_Handler+0x4>

080095d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80095d6:	b480      	push	{r7}
 80095d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80095da:	bf00      	nop
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80095e8:	4802      	ldr	r0, [pc, #8]	; (80095f4 <DMA1_Stream4_IRQHandler+0x10>)
 80095ea:	f002 fe9d 	bl	800c328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80095ee:	bf00      	nop
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20001374 	.word	0x20001374

080095f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80095fc:	4802      	ldr	r0, [pc, #8]	; (8009608 <DMA1_Stream5_IRQHandler+0x10>)
 80095fe:	f002 fe93 	bl	800c328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009602:	bf00      	nop
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20001478 	.word	0x20001478

0800960c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009610:	4802      	ldr	r0, [pc, #8]	; (800961c <DMA1_Stream6_IRQHandler+0x10>)
 8009612:	f002 fe89 	bl	800c328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009616:	bf00      	nop
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20001418 	.word	0x20001418

08009620 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009624:	4803      	ldr	r0, [pc, #12]	; (8009634 <ADC_IRQHandler+0x14>)
 8009626:	f001 f86e 	bl	800a706 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800962a:	4803      	ldr	r0, [pc, #12]	; (8009638 <ADC_IRQHandler+0x18>)
 800962c:	f001 f86b 	bl	800a706 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009630:	bf00      	nop
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20000ca0 	.word	0x20000ca0
 8009638:	20000ce8 	.word	0x20000ce8

0800963c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009640:	4802      	ldr	r0, [pc, #8]	; (800964c <CAN1_RX0_IRQHandler+0x10>)
 8009642:	f002 f9a7 	bl	800b994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009646:	bf00      	nop
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000df0 	.word	0x20000df0

08009650 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009654:	4802      	ldr	r0, [pc, #8]	; (8009660 <CAN1_RX1_IRQHandler+0x10>)
 8009656:	f002 f99d 	bl	800b994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800965a:	bf00      	nop
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000df0 	.word	0x20000df0

08009664 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009668:	4803      	ldr	r0, [pc, #12]	; (8009678 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800966a:	f004 f87e 	bl	800d76a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800966e:	4803      	ldr	r0, [pc, #12]	; (800967c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8009670:	f004 f87b 	bl	800d76a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009674:	bf00      	nop
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20001130 	.word	0x20001130
 800967c:	2000129c 	.word	0x2000129c

08009680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009684:	4802      	ldr	r0, [pc, #8]	; (8009690 <USART2_IRQHandler+0x10>)
 8009686:	f004 ff45 	bl	800e514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800968a:	bf00      	nop
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200013d4 	.word	0x200013d4

08009694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009698:	4802      	ldr	r0, [pc, #8]	; (80096a4 <DMA2_Stream0_IRQHandler+0x10>)
 800969a:	f002 fe45 	bl	800c328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800969e:	bf00      	nop
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000d30 	.word	0x20000d30

080096a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80096ac:	4802      	ldr	r0, [pc, #8]	; (80096b8 <DMA2_Stream2_IRQHandler+0x10>)
 80096ae:	f002 fe3b 	bl	800c328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80096b2:	bf00      	nop
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000d90 	.word	0x20000d90

080096bc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80096c0:	4802      	ldr	r0, [pc, #8]	; (80096cc <CAN2_RX0_IRQHandler+0x10>)
 80096c2:	f002 f967 	bl	800b994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80096c6:	bf00      	nop
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000e18 	.word	0x20000e18

080096d0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80096d4:	4802      	ldr	r0, [pc, #8]	; (80096e0 <CAN2_RX1_IRQHandler+0x10>)
 80096d6:	f002 f95d 	bl	800b994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80096da:	bf00      	nop
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20000e18 	.word	0x20000e18

080096e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  return 1;
 80096e8:	2301      	movs	r3, #1
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <_kill>:

int _kill(int pid, int sig)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80096fe:	f00c f93d 	bl	801597c <__errno>
 8009702:	4603      	mov	r3, r0
 8009704:	2216      	movs	r2, #22
 8009706:	601a      	str	r2, [r3, #0]
  return -1;
 8009708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <_exit>:

void _exit (int status)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800971c:	f04f 31ff 	mov.w	r1, #4294967295
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ffe7 	bl	80096f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009726:	e7fe      	b.n	8009726 <_exit+0x12>

08009728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e00a      	b.n	8009750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800973a:	f3af 8000 	nop.w
 800973e:	4601      	mov	r1, r0
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	60ba      	str	r2, [r7, #8]
 8009746:	b2ca      	uxtb	r2, r1
 8009748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	3301      	adds	r3, #1
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	dbf0      	blt.n	800973a <_read+0x12>
  }

  return len;
 8009758:	687b      	ldr	r3, [r7, #4]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	e009      	b.n	8009788 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	60ba      	str	r2, [r7, #8]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	4618      	mov	r0, r3
 800977e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	3301      	adds	r3, #1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	dbf1      	blt.n	8009774 <_write+0x12>
  }
  return len;
 8009790:	687b      	ldr	r3, [r7, #4]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <_close>:

int _close(int file)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80097a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80097c2:	605a      	str	r2, [r3, #4]
  return 0;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <_isatty>:

int _isatty(int file)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80097da:	2301      	movs	r3, #1
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800980c:	4a14      	ldr	r2, [pc, #80]	; (8009860 <_sbrk+0x5c>)
 800980e:	4b15      	ldr	r3, [pc, #84]	; (8009864 <_sbrk+0x60>)
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009818:	4b13      	ldr	r3, [pc, #76]	; (8009868 <_sbrk+0x64>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <_sbrk+0x64>)
 8009822:	4a12      	ldr	r2, [pc, #72]	; (800986c <_sbrk+0x68>)
 8009824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <_sbrk+0x64>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4413      	add	r3, r2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	429a      	cmp	r2, r3
 8009832:	d207      	bcs.n	8009844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009834:	f00c f8a2 	bl	801597c <__errno>
 8009838:	4603      	mov	r3, r0
 800983a:	220c      	movs	r2, #12
 800983c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
 8009842:	e009      	b.n	8009858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009844:	4b08      	ldr	r3, [pc, #32]	; (8009868 <_sbrk+0x64>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <_sbrk+0x64>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	4a05      	ldr	r2, [pc, #20]	; (8009868 <_sbrk+0x64>)
 8009854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009856:	68fb      	ldr	r3, [r7, #12]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20020000 	.word	0x20020000
 8009864:	00000800 	.word	0x00000800
 8009868:	20001178 	.word	0x20001178
 800986c:	200074a8 	.word	0x200074a8

08009870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009874:	4b06      	ldr	r3, [pc, #24]	; (8009890 <SystemInit+0x20>)
 8009876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987a:	4a05      	ldr	r2, [pc, #20]	; (8009890 <SystemInit+0x20>)
 800987c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <MX_TIM2_Init>:
TIM_HandleTypeDef htim12;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08e      	sub	sp, #56	; 0x38
 8009898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800989a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	605a      	str	r2, [r3, #4]
 80098a4:	609a      	str	r2, [r3, #8]
 80098a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098a8:	f107 0320 	add.w	r3, r7, #32
 80098ac:	2200      	movs	r2, #0
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098b2:	1d3b      	adds	r3, r7, #4
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	605a      	str	r2, [r3, #4]
 80098ba:	609a      	str	r2, [r3, #8]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	611a      	str	r2, [r3, #16]
 80098c0:	615a      	str	r2, [r3, #20]
 80098c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80098c4:	4b38      	ldr	r3, [pc, #224]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80098cc:	4b36      	ldr	r3, [pc, #216]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098d2:	4b35      	ldr	r3, [pc, #212]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80098d8:	4b33      	ldr	r3, [pc, #204]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098e0:	4b31      	ldr	r3, [pc, #196]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098e6:	4b30      	ldr	r3, [pc, #192]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80098ec:	482e      	ldr	r0, [pc, #184]	; (80099a8 <MX_TIM2_Init+0x114>)
 80098ee:	f003 fe2d 	bl	800d54c <HAL_TIM_Base_Init>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80098f8:	f7ff fd82 	bl	8009400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009906:	4619      	mov	r1, r3
 8009908:	4827      	ldr	r0, [pc, #156]	; (80099a8 <MX_TIM2_Init+0x114>)
 800990a:	f004 f8f9 	bl	800db00 <HAL_TIM_ConfigClockSource>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009914:	f7ff fd74 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009918:	4823      	ldr	r0, [pc, #140]	; (80099a8 <MX_TIM2_Init+0x114>)
 800991a:	f003 fed7 	bl	800d6cc <HAL_TIM_PWM_Init>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009924:	f7ff fd6c 	bl	8009400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009928:	2300      	movs	r3, #0
 800992a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009930:	f107 0320 	add.w	r3, r7, #32
 8009934:	4619      	mov	r1, r3
 8009936:	481c      	ldr	r0, [pc, #112]	; (80099a8 <MX_TIM2_Init+0x114>)
 8009938:	f004 fcbc 	bl	800e2b4 <HAL_TIMEx_MasterConfigSynchronization>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009942:	f7ff fd5d 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009946:	2360      	movs	r3, #96	; 0x60
 8009948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009952:	2300      	movs	r3, #0
 8009954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009956:	1d3b      	adds	r3, r7, #4
 8009958:	2200      	movs	r2, #0
 800995a:	4619      	mov	r1, r3
 800995c:	4812      	ldr	r0, [pc, #72]	; (80099a8 <MX_TIM2_Init+0x114>)
 800995e:	f004 f80d 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009968:	f7ff fd4a 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800996c:	1d3b      	adds	r3, r7, #4
 800996e:	2208      	movs	r2, #8
 8009970:	4619      	mov	r1, r3
 8009972:	480d      	ldr	r0, [pc, #52]	; (80099a8 <MX_TIM2_Init+0x114>)
 8009974:	f004 f802 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800997e:	f7ff fd3f 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	220c      	movs	r2, #12
 8009986:	4619      	mov	r1, r3
 8009988:	4807      	ldr	r0, [pc, #28]	; (80099a8 <MX_TIM2_Init+0x114>)
 800998a:	f003 fff7 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8009994:	f7ff fd34 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009998:	4803      	ldr	r0, [pc, #12]	; (80099a8 <MX_TIM2_Init+0x114>)
 800999a:	f000 fb9d 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 800999e:	bf00      	nop
 80099a0:	3738      	adds	r7, #56	; 0x38
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	2000117c 	.word	0x2000117c

080099ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08e      	sub	sp, #56	; 0x38
 80099b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	605a      	str	r2, [r3, #4]
 80099bc:	609a      	str	r2, [r3, #8]
 80099be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099c0:	f107 0320 	add.w	r3, r7, #32
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099ca:	1d3b      	adds	r3, r7, #4
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	605a      	str	r2, [r3, #4]
 80099d2:	609a      	str	r2, [r3, #8]
 80099d4:	60da      	str	r2, [r3, #12]
 80099d6:	611a      	str	r2, [r3, #16]
 80099d8:	615a      	str	r2, [r3, #20]
 80099da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80099dc:	4b31      	ldr	r3, [pc, #196]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 80099de:	4a32      	ldr	r2, [pc, #200]	; (8009aa8 <MX_TIM3_Init+0xfc>)
 80099e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80099e2:	4b30      	ldr	r3, [pc, #192]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099e8:	4b2e      	ldr	r3, [pc, #184]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105-1;
 80099ee:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 80099f0:	2268      	movs	r2, #104	; 0x68
 80099f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099f4:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80099fa:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 80099fc:	2280      	movs	r2, #128	; 0x80
 80099fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009a00:	4828      	ldr	r0, [pc, #160]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a02:	f003 fda3 	bl	800d54c <HAL_TIM_Base_Init>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8009a0c:	f7ff fcf8 	bl	8009400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4821      	ldr	r0, [pc, #132]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a1e:	f004 f86f 	bl	800db00 <HAL_TIM_ConfigClockSource>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8009a28:	f7ff fcea 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009a2c:	481d      	ldr	r0, [pc, #116]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a2e:	f003 fe4d 	bl	800d6cc <HAL_TIM_PWM_Init>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8009a38:	f7ff fce2 	bl	8009400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009a44:	f107 0320 	add.w	r3, r7, #32
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4816      	ldr	r0, [pc, #88]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a4c:	f004 fc32 	bl	800e2b4 <HAL_TIMEx_MasterConfigSynchronization>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8009a56:	f7ff fcd3 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a5a:	2360      	movs	r3, #96	; 0x60
 8009a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a6a:	1d3b      	adds	r3, r7, #4
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4619      	mov	r1, r3
 8009a70:	480c      	ldr	r0, [pc, #48]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a72:	f003 ff83 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8009a7c:	f7ff fcc0 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009a80:	1d3b      	adds	r3, r7, #4
 8009a82:	2208      	movs	r2, #8
 8009a84:	4619      	mov	r1, r3
 8009a86:	4807      	ldr	r0, [pc, #28]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a88:	f003 ff78 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8009a92:	f7ff fcb5 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009a96:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <MX_TIM3_Init+0xf8>)
 8009a98:	f000 fb1e 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 8009a9c:	bf00      	nop
 8009a9e:	3738      	adds	r7, #56	; 0x38
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	200011c4 	.word	0x200011c4
 8009aa8:	40000400 	.word	0x40000400

08009aac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08e      	sub	sp, #56	; 0x38
 8009ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	605a      	str	r2, [r3, #4]
 8009abc:	609a      	str	r2, [r3, #8]
 8009abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ac0:	f107 0320 	add.w	r3, r7, #32
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009aca:	1d3b      	adds	r3, r7, #4
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	609a      	str	r2, [r3, #8]
 8009ad4:	60da      	str	r2, [r3, #12]
 8009ad6:	611a      	str	r2, [r3, #16]
 8009ad8:	615a      	str	r2, [r3, #20]
 8009ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009adc:	4b37      	ldr	r3, [pc, #220]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009ade:	4a38      	ldr	r2, [pc, #224]	; (8009bc0 <MX_TIM4_Init+0x114>)
 8009ae0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009ae2:	4b36      	ldr	r3, [pc, #216]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ae8:	4b34      	ldr	r3, [pc, #208]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009aee:	4b33      	ldr	r3, [pc, #204]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009af4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009af6:	4b31      	ldr	r3, [pc, #196]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009afc:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009b02:	482e      	ldr	r0, [pc, #184]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009b04:	f003 fd22 	bl	800d54c <HAL_TIM_Base_Init>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8009b0e:	f7ff fc77 	bl	8009400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4827      	ldr	r0, [pc, #156]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009b20:	f003 ffee 	bl	800db00 <HAL_TIM_ConfigClockSource>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8009b2a:	f7ff fc69 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009b2e:	4823      	ldr	r0, [pc, #140]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009b30:	f003 fdcc 	bl	800d6cc <HAL_TIM_PWM_Init>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8009b3a:	f7ff fc61 	bl	8009400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009b46:	f107 0320 	add.w	r3, r7, #32
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	481b      	ldr	r0, [pc, #108]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009b4e:	f004 fbb1 	bl	800e2b4 <HAL_TIMEx_MasterConfigSynchronization>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8009b58:	f7ff fc52 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b5c:	2360      	movs	r3, #96	; 0x60
 8009b5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4619      	mov	r1, r3
 8009b72:	4812      	ldr	r0, [pc, #72]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009b74:	f003 ff02 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8009b7e:	f7ff fc3f 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b82:	1d3b      	adds	r3, r7, #4
 8009b84:	2204      	movs	r2, #4
 8009b86:	4619      	mov	r1, r3
 8009b88:	480c      	ldr	r0, [pc, #48]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009b8a:	f003 fef7 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8009b94:	f7ff fc34 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009b98:	1d3b      	adds	r3, r7, #4
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4807      	ldr	r0, [pc, #28]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009ba0:	f003 feec 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8009baa:	f7ff fc29 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009bae:	4803      	ldr	r0, [pc, #12]	; (8009bbc <MX_TIM4_Init+0x110>)
 8009bb0:	f000 fa92 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 8009bb4:	bf00      	nop
 8009bb6:	3738      	adds	r7, #56	; 0x38
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	2000120c 	.word	0x2000120c
 8009bc0:	40000800 	.word	0x40000800

08009bc4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b096      	sub	sp, #88	; 0x58
 8009bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009bca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
 8009bd4:	609a      	str	r2, [r3, #8]
 8009bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	605a      	str	r2, [r3, #4]
 8009bec:	609a      	str	r2, [r3, #8]
 8009bee:	60da      	str	r2, [r3, #12]
 8009bf0:	611a      	str	r2, [r3, #16]
 8009bf2:	615a      	str	r2, [r3, #20]
 8009bf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009bf6:	1d3b      	adds	r3, r7, #4
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f00b ffff 	bl	8015c00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009c02:	4b4a      	ldr	r3, [pc, #296]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c04:	4a4a      	ldr	r2, [pc, #296]	; (8009d30 <MX_TIM8_Init+0x16c>)
 8009c06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8009c08:	4b48      	ldr	r3, [pc, #288]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c0e:	4b47      	ldr	r3, [pc, #284]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009c14:	4b45      	ldr	r3, [pc, #276]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c1c:	4b43      	ldr	r3, [pc, #268]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009c22:	4b42      	ldr	r3, [pc, #264]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c28:	4b40      	ldr	r3, [pc, #256]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009c2e:	483f      	ldr	r0, [pc, #252]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c30:	f003 fc8c 	bl	800d54c <HAL_TIM_Base_Init>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8009c3a:	f7ff fbe1 	bl	8009400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009c44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4838      	ldr	r0, [pc, #224]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c4c:	f003 ff58 	bl	800db00 <HAL_TIM_ConfigClockSource>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8009c56:	f7ff fbd3 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009c5a:	4834      	ldr	r0, [pc, #208]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c5c:	f003 fd36 	bl	800d6cc <HAL_TIM_PWM_Init>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8009c66:	f7ff fbcb 	bl	8009400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c76:	4619      	mov	r1, r3
 8009c78:	482c      	ldr	r0, [pc, #176]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009c7a:	f004 fb1b 	bl	800e2b4 <HAL_TIMEx_MasterConfigSynchronization>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8009c84:	f7ff fbbc 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c88:	2360      	movs	r3, #96	; 0x60
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c90:	2300      	movs	r3, #0
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009c94:	2300      	movs	r3, #0
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4619      	mov	r1, r3
 8009cac:	481f      	ldr	r0, [pc, #124]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009cae:	f003 fe65 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8009cb8:	f7ff fba2 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4819      	ldr	r0, [pc, #100]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009cc6:	f003 fe59 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8009cd0:	f7ff fb96 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cd8:	220c      	movs	r2, #12
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4813      	ldr	r0, [pc, #76]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009cde:	f003 fe4d 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8009ce8:	f7ff fb8a 	bl	8009400 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009d0a:	1d3b      	adds	r3, r7, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4807      	ldr	r0, [pc, #28]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009d10:	f004 fb4c 	bl	800e3ac <HAL_TIMEx_ConfigBreakDeadTime>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8009d1a:	f7ff fb71 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009d1e:	4803      	ldr	r0, [pc, #12]	; (8009d2c <MX_TIM8_Init+0x168>)
 8009d20:	f000 f9da 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 8009d24:	bf00      	nop
 8009d26:	3758      	adds	r7, #88	; 0x58
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20001254 	.word	0x20001254
 8009d30:	40010400 	.word	0x40010400

08009d34 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	605a      	str	r2, [r3, #4]
 8009d42:	609a      	str	r2, [r3, #8]
 8009d44:	60da      	str	r2, [r3, #12]
 8009d46:	611a      	str	r2, [r3, #16]
 8009d48:	615a      	str	r2, [r3, #20]
 8009d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d4e:	4a1f      	ldr	r2, [pc, #124]	; (8009dcc <MX_TIM10_Init+0x98>)
 8009d50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8009d52:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d54:	2201      	movs	r2, #1
 8009d56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d58:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8009d5e:	4b1a      	ldr	r3, [pc, #104]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d66:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d6c:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009d72:	4815      	ldr	r0, [pc, #84]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d74:	f003 fbea 	bl	800d54c <HAL_TIM_Base_Init>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8009d7e:	f7ff fb3f 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8009d82:	4811      	ldr	r0, [pc, #68]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009d84:	f003 fca2 	bl	800d6cc <HAL_TIM_PWM_Init>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8009d8e:	f7ff fb37 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d92:	2360      	movs	r3, #96	; 0x60
 8009d94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009da2:	1d3b      	adds	r3, r7, #4
 8009da4:	2200      	movs	r2, #0
 8009da6:	4619      	mov	r1, r3
 8009da8:	4807      	ldr	r0, [pc, #28]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009daa:	f003 fde7 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8009db4:	f7ff fb24 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8009db8:	4803      	ldr	r0, [pc, #12]	; (8009dc8 <MX_TIM10_Init+0x94>)
 8009dba:	f000 f98d 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 8009dbe:	bf00      	nop
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	2000129c 	.word	0x2000129c
 8009dcc:	40014400 	.word	0x40014400

08009dd0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009dd6:	1d3b      	adds	r3, r7, #4
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	605a      	str	r2, [r3, #4]
 8009dde:	609a      	str	r2, [r3, #8]
 8009de0:	60da      	str	r2, [r3, #12]
 8009de2:	611a      	str	r2, [r3, #16]
 8009de4:	615a      	str	r2, [r3, #20]
 8009de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009de8:	4b1e      	ldr	r3, [pc, #120]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009dea:	4a1f      	ldr	r2, [pc, #124]	; (8009e68 <MX_TIM11_Init+0x98>)
 8009dec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8009dee:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009df0:	2201      	movs	r2, #1
 8009df2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009df4:	4b1b      	ldr	r3, [pc, #108]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8009dfa:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e00:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e02:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e08:	4b16      	ldr	r3, [pc, #88]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009e0e:	4815      	ldr	r0, [pc, #84]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009e10:	f003 fb9c 	bl	800d54c <HAL_TIM_Base_Init>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8009e1a:	f7ff faf1 	bl	8009400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8009e1e:	4811      	ldr	r0, [pc, #68]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009e20:	f003 fc54 	bl	800d6cc <HAL_TIM_PWM_Init>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8009e2a:	f7ff fae9 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e2e:	2360      	movs	r3, #96	; 0x60
 8009e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e3e:	1d3b      	adds	r3, r7, #4
 8009e40:	2200      	movs	r2, #0
 8009e42:	4619      	mov	r1, r3
 8009e44:	4807      	ldr	r0, [pc, #28]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009e46:	f003 fd99 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8009e50:	f7ff fad6 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8009e54:	4803      	ldr	r0, [pc, #12]	; (8009e64 <MX_TIM11_Init+0x94>)
 8009e56:	f000 f93f 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 8009e5a:	bf00      	nop
 8009e5c:	3720      	adds	r7, #32
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200012e4 	.word	0x200012e4
 8009e68:	40014800 	.word	0x40014800

08009e6c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e72:	1d3b      	adds	r3, r7, #4
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	605a      	str	r2, [r3, #4]
 8009e7a:	609a      	str	r2, [r3, #8]
 8009e7c:	60da      	str	r2, [r3, #12]
 8009e7e:	611a      	str	r2, [r3, #16]
 8009e80:	615a      	str	r2, [r3, #20]
 8009e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8009e84:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009e86:	4a1b      	ldr	r2, [pc, #108]	; (8009ef4 <MX_TIM12_Init+0x88>)
 8009e88:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8009e8a:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e9c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e9e:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ea4:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8009eaa:	4811      	ldr	r0, [pc, #68]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009eac:	f003 fc0e 	bl	800d6cc <HAL_TIM_PWM_Init>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8009eb6:	f7ff faa3 	bl	8009400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009eba:	2360      	movs	r3, #96	; 0x60
 8009ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009eca:	1d3b      	adds	r3, r7, #4
 8009ecc:	2204      	movs	r2, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4807      	ldr	r0, [pc, #28]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009ed2:	f003 fd53 	bl	800d97c <HAL_TIM_PWM_ConfigChannel>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8009edc:	f7ff fa90 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8009ee0:	4803      	ldr	r0, [pc, #12]	; (8009ef0 <MX_TIM12_Init+0x84>)
 8009ee2:	f000 f8f9 	bl	800a0d8 <HAL_TIM_MspPostInit>

}
 8009ee6:	bf00      	nop
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	2000132c 	.word	0x2000132c
 8009ef4:	40001800 	.word	0x40001800

08009ef8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f08:	d10e      	bne.n	8009f28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
 8009f0e:	4b59      	ldr	r3, [pc, #356]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	4a58      	ldr	r2, [pc, #352]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009f14:	f043 0301 	orr.w	r3, r3, #1
 8009f18:	6413      	str	r3, [r2, #64]	; 0x40
 8009f1a:	4b56      	ldr	r3, [pc, #344]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8009f26:	e0a0      	b.n	800a06a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM3)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a52      	ldr	r2, [pc, #328]	; (800a078 <HAL_TIM_Base_MspInit+0x180>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d144      	bne.n	8009fbc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009f32:	2300      	movs	r3, #0
 8009f34:	61bb      	str	r3, [r7, #24]
 8009f36:	4b4f      	ldr	r3, [pc, #316]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	4a4e      	ldr	r2, [pc, #312]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009f3c:	f043 0302 	orr.w	r3, r3, #2
 8009f40:	6413      	str	r3, [r2, #64]	; 0x40
 8009f42:	4b4c      	ldr	r3, [pc, #304]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	61bb      	str	r3, [r7, #24]
 8009f4c:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8009f4e:	4b4b      	ldr	r3, [pc, #300]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f50:	4a4b      	ldr	r2, [pc, #300]	; (800a080 <HAL_TIM_Base_MspInit+0x188>)
 8009f52:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8009f54:	4b49      	ldr	r3, [pc, #292]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f56:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009f5a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f5c:	4b47      	ldr	r3, [pc, #284]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f5e:	2240      	movs	r2, #64	; 0x40
 8009f60:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f62:	4b46      	ldr	r3, [pc, #280]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8009f68:	4b44      	ldr	r3, [pc, #272]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f6e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f70:	4b42      	ldr	r3, [pc, #264]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f76:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009f78:	4b40      	ldr	r3, [pc, #256]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f7e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8009f80:	4b3e      	ldr	r3, [pc, #248]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8009f86:	4b3d      	ldr	r3, [pc, #244]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f8c:	4b3b      	ldr	r3, [pc, #236]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8009f92:	483a      	ldr	r0, [pc, #232]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009f94:	f002 f830 	bl	800bff8 <HAL_DMA_Init>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8009f9e:	f7ff fa2f 	bl	8009400 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a35      	ldr	r2, [pc, #212]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8009fa8:	4a34      	ldr	r2, [pc, #208]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a32      	ldr	r2, [pc, #200]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8009fb4:	4a31      	ldr	r2, [pc, #196]	; (800a07c <HAL_TIM_Base_MspInit+0x184>)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009fba:	e056      	b.n	800a06a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM4)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a30      	ldr	r2, [pc, #192]	; (800a084 <HAL_TIM_Base_MspInit+0x18c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	4a29      	ldr	r2, [pc, #164]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009fd0:	f043 0304 	orr.w	r3, r3, #4
 8009fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8009fd6:	4b27      	ldr	r3, [pc, #156]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	697b      	ldr	r3, [r7, #20]
}
 8009fe2:	e042      	b.n	800a06a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM8)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a27      	ldr	r2, [pc, #156]	; (800a088 <HAL_TIM_Base_MspInit+0x190>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d10e      	bne.n	800a00c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009fee:	2300      	movs	r3, #0
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff6:	4a1f      	ldr	r2, [pc, #124]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	613b      	str	r3, [r7, #16]
 800a008:	693b      	ldr	r3, [r7, #16]
}
 800a00a:	e02e      	b.n	800a06a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM10)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <HAL_TIM_Base_MspInit+0x194>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d116      	bne.n	800a044 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01e:	4a15      	ldr	r2, [pc, #84]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a024:	6453      	str	r3, [r2, #68]	; 0x44
 800a026:	4b13      	ldr	r3, [pc, #76]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800a032:	2200      	movs	r2, #0
 800a034:	210f      	movs	r1, #15
 800a036:	2019      	movs	r0, #25
 800a038:	f001 ff98 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a03c:	2019      	movs	r0, #25
 800a03e:	f001 ffb1 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
}
 800a042:	e012      	b.n	800a06a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM11)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a11      	ldr	r2, [pc, #68]	; (800a090 <HAL_TIM_Base_MspInit+0x198>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d10d      	bne.n	800a06a <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]
 800a052:	4b08      	ldr	r3, [pc, #32]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a056:	4a07      	ldr	r2, [pc, #28]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a05c:	6453      	str	r3, [r2, #68]	; 0x44
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <HAL_TIM_Base_MspInit+0x17c>)
 800a060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a066:	60bb      	str	r3, [r7, #8]
 800a068:	68bb      	ldr	r3, [r7, #8]
}
 800a06a:	bf00      	nop
 800a06c:	3720      	adds	r7, #32
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	40023800 	.word	0x40023800
 800a078:	40000400 	.word	0x40000400
 800a07c:	20001374 	.word	0x20001374
 800a080:	40026070 	.word	0x40026070
 800a084:	40000800 	.word	0x40000800
 800a088:	40010400 	.word	0x40010400
 800a08c:	40014400 	.word	0x40014400
 800a090:	40014800 	.word	0x40014800

0800a094 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a0b      	ldr	r2, [pc, #44]	; (800a0d0 <HAL_TIM_PWM_MspInit+0x3c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d10d      	bne.n	800a0c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <HAL_TIM_PWM_MspInit+0x40>)
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <HAL_TIM_PWM_MspInit+0x40>)
 800a0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0b6:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <HAL_TIM_PWM_MspInit+0x40>)
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	40001800 	.word	0x40001800
 800a0d4:	40023800 	.word	0x40023800

0800a0d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b092      	sub	sp, #72	; 0x48
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	605a      	str	r2, [r3, #4]
 800a0ea:	609a      	str	r2, [r3, #8]
 800a0ec:	60da      	str	r2, [r3, #12]
 800a0ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f8:	d13e      	bne.n	800a178 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	633b      	str	r3, [r7, #48]	; 0x30
 800a0fe:	4b99      	ldr	r3, [pc, #612]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	4a98      	ldr	r2, [pc, #608]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a104:	f043 0302 	orr.w	r3, r3, #2
 800a108:	6313      	str	r3, [r2, #48]	; 0x30
 800a10a:	4b96      	ldr	r3, [pc, #600]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	633b      	str	r3, [r7, #48]	; 0x30
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a116:	2300      	movs	r3, #0
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a11a:	4b92      	ldr	r3, [pc, #584]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11e:	4a91      	ldr	r2, [pc, #580]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	6313      	str	r3, [r2, #48]	; 0x30
 800a126:	4b8f      	ldr	r3, [pc, #572]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LP2_control_Pin|D3_control_Pin;
 800a132:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a136:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a138:	2302      	movs	r3, #2
 800a13a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a140:	2300      	movs	r3, #0
 800a142:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a144:	2301      	movs	r3, #1
 800a146:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a14c:	4619      	mov	r1, r3
 800a14e:	4886      	ldr	r0, [pc, #536]	; (800a368 <HAL_TIM_MspPostInit+0x290>)
 800a150:	f002 fb54 	bl	800c7fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LP3_control_Pin;
 800a154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a158:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a15a:	2302      	movs	r3, #2
 800a15c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a162:	2300      	movs	r3, #0
 800a164:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a166:	2301      	movs	r3, #1
 800a168:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP3_control_GPIO_Port, &GPIO_InitStruct);
 800a16a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a16e:	4619      	mov	r1, r3
 800a170:	487e      	ldr	r0, [pc, #504]	; (800a36c <HAL_TIM_MspPostInit+0x294>)
 800a172:	f002 fb43 	bl	800c7fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800a176:	e12d      	b.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM3)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a7c      	ldr	r2, [pc, #496]	; (800a370 <HAL_TIM_MspPostInit+0x298>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d13d      	bne.n	800a1fe <HAL_TIM_MspPostInit+0x126>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a182:	2300      	movs	r3, #0
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
 800a186:	4b77      	ldr	r3, [pc, #476]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	4a76      	ldr	r2, [pc, #472]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a18c:	f043 0304 	orr.w	r3, r3, #4
 800a190:	6313      	str	r3, [r2, #48]	; 0x30
 800a192:	4b74      	ldr	r3, [pc, #464]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	f003 0304 	and.w	r3, r3, #4
 800a19a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a19e:	2300      	movs	r3, #0
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a2:	4b70      	ldr	r3, [pc, #448]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a6:	4a6f      	ldr	r2, [pc, #444]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a1a8:	f043 0302 	orr.w	r3, r3, #2
 800a1ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ae:	4b6d      	ldr	r3, [pc, #436]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = D4_control_Pin;
 800a1ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D4_control_GPIO_Port, &GPIO_InitStruct);
 800a1d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4867      	ldr	r0, [pc, #412]	; (800a374 <HAL_TIM_MspPostInit+0x29c>)
 800a1d8:	f002 fb10 	bl	800c7fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = D1_control_Pin;
 800a1dc:	2310      	movs	r3, #16
 800a1de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D1_control_GPIO_Port, &GPIO_InitStruct);
 800a1f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	485c      	ldr	r0, [pc, #368]	; (800a368 <HAL_TIM_MspPostInit+0x290>)
 800a1f8:	f002 fb00 	bl	800c7fc <HAL_GPIO_Init>
}
 800a1fc:	e0ea      	b.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM4)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a5d      	ldr	r2, [pc, #372]	; (800a378 <HAL_TIM_MspPostInit+0x2a0>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d13d      	bne.n	800a284 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a208:	2300      	movs	r3, #0
 800a20a:	623b      	str	r3, [r7, #32]
 800a20c:	4b55      	ldr	r3, [pc, #340]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a210:	4a54      	ldr	r2, [pc, #336]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a212:	f043 0308 	orr.w	r3, r3, #8
 800a216:	6313      	str	r3, [r2, #48]	; 0x30
 800a218:	4b52      	ldr	r3, [pc, #328]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	623b      	str	r3, [r7, #32]
 800a222:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a224:	2300      	movs	r3, #0
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	4b4e      	ldr	r3, [pc, #312]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22c:	4a4d      	ldr	r2, [pc, #308]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a22e:	f043 0302 	orr.w	r3, r3, #2
 800a232:	6313      	str	r3, [r2, #48]	; 0x30
 800a234:	4b4b      	ldr	r3, [pc, #300]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	61fb      	str	r3, [r7, #28]
 800a23e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800a240:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a244:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a246:	2302      	movs	r3, #2
 800a248:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a24e:	2300      	movs	r3, #0
 800a250:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a252:	2302      	movs	r3, #2
 800a254:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a256:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a25a:	4619      	mov	r1, r3
 800a25c:	4847      	ldr	r0, [pc, #284]	; (800a37c <HAL_TIM_MspPostInit+0x2a4>)
 800a25e:	f002 facd 	bl	800c7fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP9_control_Pin;
 800a262:	2380      	movs	r3, #128	; 0x80
 800a264:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a266:	2302      	movs	r3, #2
 800a268:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a26e:	2300      	movs	r3, #0
 800a270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a272:	2302      	movs	r3, #2
 800a274:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP9_control_GPIO_Port, &GPIO_InitStruct);
 800a276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a27a:	4619      	mov	r1, r3
 800a27c:	483a      	ldr	r0, [pc, #232]	; (800a368 <HAL_TIM_MspPostInit+0x290>)
 800a27e:	f002 fabd 	bl	800c7fc <HAL_GPIO_Init>
}
 800a282:	e0a7      	b.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM8)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a3d      	ldr	r2, [pc, #244]	; (800a380 <HAL_TIM_MspPostInit+0x2a8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d11f      	bne.n	800a2ce <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a28e:	2300      	movs	r3, #0
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	4b34      	ldr	r3, [pc, #208]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	4a33      	ldr	r2, [pc, #204]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a298:	f043 0304 	orr.w	r3, r3, #4
 800a29c:	6313      	str	r3, [r2, #48]	; 0x30
 800a29e:	4b31      	ldr	r3, [pc, #196]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	61bb      	str	r3, [r7, #24]
 800a2a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LP8_control_Pin|HP2_control_Pin|HP1_control_Pin;
 800a2aa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	482b      	ldr	r0, [pc, #172]	; (800a374 <HAL_TIM_MspPostInit+0x29c>)
 800a2c8:	f002 fa98 	bl	800c7fc <HAL_GPIO_Init>
}
 800a2cc:	e082      	b.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM10)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a2c      	ldr	r2, [pc, #176]	; (800a384 <HAL_TIM_MspPostInit+0x2ac>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d11f      	bne.n	800a318 <HAL_TIM_MspPostInit+0x240>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	4b21      	ldr	r3, [pc, #132]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	4a20      	ldr	r2, [pc, #128]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a2e2:	f043 0302 	orr.w	r3, r3, #2
 800a2e6:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e8:	4b1e      	ldr	r3, [pc, #120]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = D2_control_Pin;
 800a2f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a302:	2300      	movs	r3, #0
 800a304:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a306:	2303      	movs	r3, #3
 800a308:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D2_control_GPIO_Port, &GPIO_InitStruct);
 800a30a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a30e:	4619      	mov	r1, r3
 800a310:	4815      	ldr	r0, [pc, #84]	; (800a368 <HAL_TIM_MspPostInit+0x290>)
 800a312:	f002 fa73 	bl	800c7fc <HAL_GPIO_Init>
}
 800a316:	e05d      	b.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM11)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a1a      	ldr	r2, [pc, #104]	; (800a388 <HAL_TIM_MspPostInit+0x2b0>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d134      	bne.n	800a38c <HAL_TIM_MspPostInit+0x2b4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	4a0e      	ldr	r2, [pc, #56]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	6313      	str	r3, [r2, #48]	; 0x30
 800a332:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <HAL_TIM_MspPostInit+0x28c>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LP10_control_Pin;
 800a33e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a342:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a344:	2302      	movs	r3, #2
 800a346:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a34c:	2300      	movs	r3, #0
 800a34e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a350:	2303      	movs	r3, #3
 800a352:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP10_control_GPIO_Port, &GPIO_InitStruct);
 800a354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a358:	4619      	mov	r1, r3
 800a35a:	4803      	ldr	r0, [pc, #12]	; (800a368 <HAL_TIM_MspPostInit+0x290>)
 800a35c:	f002 fa4e 	bl	800c7fc <HAL_GPIO_Init>
}
 800a360:	e038      	b.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
 800a362:	bf00      	nop
 800a364:	40023800 	.word	0x40023800
 800a368:	40020400 	.word	0x40020400
 800a36c:	40020000 	.word	0x40020000
 800a370:	40000400 	.word	0x40000400
 800a374:	40020800 	.word	0x40020800
 800a378:	40000800 	.word	0x40000800
 800a37c:	40020c00 	.word	0x40020c00
 800a380:	40010400 	.word	0x40010400
 800a384:	40014400 	.word	0x40014400
 800a388:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM12)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a12      	ldr	r2, [pc, #72]	; (800a3dc <HAL_TIM_MspPostInit+0x304>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d11e      	bne.n	800a3d4 <HAL_TIM_MspPostInit+0x2fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <HAL_TIM_MspPostInit+0x308>)
 800a39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39e:	4a10      	ldr	r2, [pc, #64]	; (800a3e0 <HAL_TIM_MspPostInit+0x308>)
 800a3a0:	f043 0302 	orr.w	r3, r3, #2
 800a3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a3a6:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <HAL_TIM_MspPostInit+0x308>)
 800a3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LP1_control_Pin;
 800a3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a3c4:	2309      	movs	r3, #9
 800a3c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP1_control_GPIO_Port, &GPIO_InitStruct);
 800a3c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4805      	ldr	r0, [pc, #20]	; (800a3e4 <HAL_TIM_MspPostInit+0x30c>)
 800a3d0:	f002 fa14 	bl	800c7fc <HAL_GPIO_Init>
}
 800a3d4:	bf00      	nop
 800a3d6:	3748      	adds	r7, #72	; 0x48
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	40001800 	.word	0x40001800
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	40020400 	.word	0x40020400

0800a3e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a3ec:	4b10      	ldr	r3, [pc, #64]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a3ee:	4a11      	ldr	r2, [pc, #68]	; (800a434 <MX_USART2_UART_Init+0x4c>)
 800a3f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a3f4:	4a10      	ldr	r2, [pc, #64]	; (800a438 <MX_USART2_UART_Init+0x50>)
 800a3f6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a3f8:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a400:	2200      	movs	r2, #0
 800a402:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a404:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a406:	2200      	movs	r2, #0
 800a408:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a40c:	220c      	movs	r2, #12
 800a40e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a412:	2200      	movs	r2, #0
 800a414:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a418:	2200      	movs	r2, #0
 800a41a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a41c:	4804      	ldr	r0, [pc, #16]	; (800a430 <MX_USART2_UART_Init+0x48>)
 800a41e:	f004 f82b 	bl	800e478 <HAL_UART_Init>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800a428:	f7fe ffea 	bl	8009400 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a42c:	bf00      	nop
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200013d4 	.word	0x200013d4
 800a434:	40004400 	.word	0x40004400
 800a438:	001e8480 	.word	0x001e8480

0800a43c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08a      	sub	sp, #40	; 0x28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a444:	f107 0314 	add.w	r3, r7, #20
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	605a      	str	r2, [r3, #4]
 800a44e:	609a      	str	r2, [r3, #8]
 800a450:	60da      	str	r2, [r3, #12]
 800a452:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a4c      	ldr	r2, [pc, #304]	; (800a58c <HAL_UART_MspInit+0x150>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	f040 8091 	bne.w	800a582 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a460:	2300      	movs	r3, #0
 800a462:	613b      	str	r3, [r7, #16]
 800a464:	4b4a      	ldr	r3, [pc, #296]	; (800a590 <HAL_UART_MspInit+0x154>)
 800a466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a468:	4a49      	ldr	r2, [pc, #292]	; (800a590 <HAL_UART_MspInit+0x154>)
 800a46a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a46e:	6413      	str	r3, [r2, #64]	; 0x40
 800a470:	4b47      	ldr	r3, [pc, #284]	; (800a590 <HAL_UART_MspInit+0x154>)
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a478:	613b      	str	r3, [r7, #16]
 800a47a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	4b43      	ldr	r3, [pc, #268]	; (800a590 <HAL_UART_MspInit+0x154>)
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	4a42      	ldr	r2, [pc, #264]	; (800a590 <HAL_UART_MspInit+0x154>)
 800a486:	f043 0308 	orr.w	r3, r3, #8
 800a48a:	6313      	str	r3, [r2, #48]	; 0x30
 800a48c:	4b40      	ldr	r3, [pc, #256]	; (800a590 <HAL_UART_MspInit+0x154>)
 800a48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800a498:	2360      	movs	r3, #96	; 0x60
 800a49a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49c:	2302      	movs	r3, #2
 800a49e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a4a8:	2307      	movs	r3, #7
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4ac:	f107 0314 	add.w	r3, r7, #20
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4838      	ldr	r0, [pc, #224]	; (800a594 <HAL_UART_MspInit+0x158>)
 800a4b4:	f002 f9a2 	bl	800c7fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800a4b8:	4b37      	ldr	r3, [pc, #220]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4ba:	4a38      	ldr	r2, [pc, #224]	; (800a59c <HAL_UART_MspInit+0x160>)
 800a4bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800a4be:	4b36      	ldr	r3, [pc, #216]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a4c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a4c6:	4b34      	ldr	r3, [pc, #208]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4c8:	2240      	movs	r2, #64	; 0x40
 800a4ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a4cc:	4b32      	ldr	r3, [pc, #200]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a4d2:	4b31      	ldr	r3, [pc, #196]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a4da:	4b2f      	ldr	r3, [pc, #188]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a4e0:	4b2d      	ldr	r3, [pc, #180]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a4e6:	4b2c      	ldr	r3, [pc, #176]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a4ec:	4b2a      	ldr	r3, [pc, #168]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a4f2:	4b29      	ldr	r3, [pc, #164]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a4f8:	4827      	ldr	r0, [pc, #156]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a4fa:	f001 fd7d 	bl	800bff8 <HAL_DMA_Init>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800a504:	f7fe ff7c 	bl	8009400 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a23      	ldr	r2, [pc, #140]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a50c:	635a      	str	r2, [r3, #52]	; 0x34
 800a50e:	4a22      	ldr	r2, [pc, #136]	; (800a598 <HAL_UART_MspInit+0x15c>)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800a514:	4b22      	ldr	r3, [pc, #136]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a516:	4a23      	ldr	r2, [pc, #140]	; (800a5a4 <HAL_UART_MspInit+0x168>)
 800a518:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800a51a:	4b21      	ldr	r3, [pc, #132]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a51c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a520:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a522:	4b1f      	ldr	r3, [pc, #124]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a524:	2200      	movs	r2, #0
 800a526:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a528:	4b1d      	ldr	r3, [pc, #116]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a52e:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a534:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a536:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a538:	2200      	movs	r2, #0
 800a53a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a53c:	4b18      	ldr	r3, [pc, #96]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a53e:	2200      	movs	r2, #0
 800a540:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800a542:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a544:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a548:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a54a:	4b15      	ldr	r3, [pc, #84]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a550:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a552:	2200      	movs	r2, #0
 800a554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a556:	4812      	ldr	r0, [pc, #72]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a558:	f001 fd4e 	bl	800bff8 <HAL_DMA_Init>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800a562:	f7fe ff4d 	bl	8009400 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a0d      	ldr	r2, [pc, #52]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a56a:	639a      	str	r2, [r3, #56]	; 0x38
 800a56c:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <HAL_UART_MspInit+0x164>)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a572:	2200      	movs	r2, #0
 800a574:	2105      	movs	r1, #5
 800a576:	2026      	movs	r0, #38	; 0x26
 800a578:	f001 fcf8 	bl	800bf6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a57c:	2026      	movs	r0, #38	; 0x26
 800a57e:	f001 fd11 	bl	800bfa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a582:	bf00      	nop
 800a584:	3728      	adds	r7, #40	; 0x28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	40004400 	.word	0x40004400
 800a590:	40023800 	.word	0x40023800
 800a594:	40020c00 	.word	0x40020c00
 800a598:	20001418 	.word	0x20001418
 800a59c:	400260a0 	.word	0x400260a0
 800a5a0:	20001478 	.word	0x20001478
 800a5a4:	40026088 	.word	0x40026088

0800a5a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a5a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a5e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a5ac:	480d      	ldr	r0, [pc, #52]	; (800a5e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a5ae:	490e      	ldr	r1, [pc, #56]	; (800a5e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a5b0:	4a0e      	ldr	r2, [pc, #56]	; (800a5ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a5b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a5b4:	e002      	b.n	800a5bc <LoopCopyDataInit>

0800a5b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a5b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a5b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a5ba:	3304      	adds	r3, #4

0800a5bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a5bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a5be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a5c0:	d3f9      	bcc.n	800a5b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a5c2:	4a0b      	ldr	r2, [pc, #44]	; (800a5f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a5c4:	4c0b      	ldr	r4, [pc, #44]	; (800a5f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a5c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a5c8:	e001      	b.n	800a5ce <LoopFillZerobss>

0800a5ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a5ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a5cc:	3204      	adds	r2, #4

0800a5ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a5ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a5d0:	d3fb      	bcc.n	800a5ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a5d2:	f7ff f94d 	bl	8009870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a5d6:	f00b facd 	bl	8015b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a5da:	f7fe fe67 	bl	80092ac <main>
  bx  lr    
 800a5de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a5e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a5e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a5e8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800a5ec:	08018e3c 	.word	0x08018e3c
  ldr r2, =_sbss
 800a5f0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800a5f4:	200074a8 	.word	0x200074a8

0800a5f8 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a5f8:	e7fe      	b.n	800a5f8 <CAN1_SCE_IRQHandler>
	...

0800a5fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a600:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <HAL_Init+0x40>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <HAL_Init+0x40>)
 800a606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a60a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a60c:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <HAL_Init+0x40>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <HAL_Init+0x40>)
 800a612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a618:	4b08      	ldr	r3, [pc, #32]	; (800a63c <HAL_Init+0x40>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a07      	ldr	r2, [pc, #28]	; (800a63c <HAL_Init+0x40>)
 800a61e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a624:	2003      	movs	r0, #3
 800a626:	f001 fc96 	bl	800bf56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a62a:	200f      	movs	r0, #15
 800a62c:	f7fe ff50 	bl	80094d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a630:	f7fe ff22 	bl	8009478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	40023c00 	.word	0x40023c00

0800a640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a644:	4b06      	ldr	r3, [pc, #24]	; (800a660 <HAL_IncTick+0x20>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	461a      	mov	r2, r3
 800a64a:	4b06      	ldr	r3, [pc, #24]	; (800a664 <HAL_IncTick+0x24>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4413      	add	r3, r2
 800a650:	4a04      	ldr	r2, [pc, #16]	; (800a664 <HAL_IncTick+0x24>)
 800a652:	6013      	str	r3, [r2, #0]
}
 800a654:	bf00      	nop
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000038 	.word	0x20000038
 800a664:	200014d8 	.word	0x200014d8

0800a668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
  return uwTick;
 800a66c:	4b03      	ldr	r3, [pc, #12]	; (800a67c <HAL_GetTick+0x14>)
 800a66e:	681b      	ldr	r3, [r3, #0]
}
 800a670:	4618      	mov	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	200014d8 	.word	0x200014d8

0800a680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e033      	b.n	800a6fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7fe fa08 	bl	8008ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	f003 0310 	and.w	r3, r3, #16
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d118      	bne.n	800a6f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a6c6:	f023 0302 	bic.w	r3, r3, #2
 800a6ca:	f043 0202 	orr.w	r2, r3, #2
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fb6e 	bl	800adb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	f043 0201 	orr.w	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
 800a6ee:	e001      	b.n	800a6f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b086      	sub	sp, #24
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	2300      	movs	r3, #0
 800a714:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f003 0320 	and.w	r3, r3, #32
 800a734:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d049      	beq.n	800a7d0 <HAL_ADC_IRQHandler+0xca>
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d046      	beq.n	800a7d0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	f003 0310 	and.w	r3, r3, #16
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d105      	bne.n	800a75a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d12b      	bne.n	800a7c0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d127      	bne.n	800a7c0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d006      	beq.n	800a78c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d119      	bne.n	800a7c0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0220 	bic.w	r2, r2, #32
 800a79a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d105      	bne.n	800a7c0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b8:	f043 0201 	orr.w	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f004 fd8a 	bl	800f2da <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f06f 0212 	mvn.w	r2, #18
 800a7ce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7de:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d057      	beq.n	800a896 <HAL_ADC_IRQHandler+0x190>
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d054      	beq.n	800a896 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d105      	bne.n	800a804 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d139      	bne.n	800a886 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d12b      	bne.n	800a886 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d124      	bne.n	800a886 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a846:	2b00      	cmp	r3, #0
 800a848:	d11d      	bne.n	800a886 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d119      	bne.n	800a886 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a860:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	f043 0201 	orr.w	r2, r3, #1
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fc12 	bl	800b0b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f06f 020c 	mvn.w	r2, #12
 800a894:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d017      	beq.n	800a8dc <HAL_ADC_IRQHandler+0x1d6>
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d014      	beq.n	800a8dc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d10d      	bne.n	800a8dc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f93b 	bl	800ab48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f06f 0201 	mvn.w	r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f003 0320 	and.w	r3, r3, #32
 800a8e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8ea:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d015      	beq.n	800a91e <HAL_ADC_IRQHandler+0x218>
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d012      	beq.n	800a91e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fc:	f043 0202 	orr.w	r2, r3, #2
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0220 	mvn.w	r2, #32
 800a90c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f924 	bl	800ab5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f06f 0220 	mvn.w	r2, #32
 800a91c:	601a      	str	r2, [r3, #0]
  }
}
 800a91e:	bf00      	nop
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <HAL_ADC_Start_DMA+0x1e>
 800a942:	2302      	movs	r3, #2
 800a944:	e0e9      	b.n	800ab1a <HAL_ADC_Start_DMA+0x1f2>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d018      	beq.n	800a98e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689a      	ldr	r2, [r3, #8]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a96c:	4b6d      	ldr	r3, [pc, #436]	; (800ab24 <HAL_ADC_Start_DMA+0x1fc>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a6d      	ldr	r2, [pc, #436]	; (800ab28 <HAL_ADC_Start_DMA+0x200>)
 800a972:	fba2 2303 	umull	r2, r3, r2, r3
 800a976:	0c9a      	lsrs	r2, r3, #18
 800a978:	4613      	mov	r3, r2
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	4413      	add	r3, r2
 800a97e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a980:	e002      	b.n	800a988 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	3b01      	subs	r3, #1
 800a986:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1f9      	bne.n	800a982 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99c:	d107      	bne.n	800a9ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	f040 80a1 	bne.w	800ab00 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a9c6:	f023 0301 	bic.w	r3, r3, #1
 800a9ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a9e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9fc:	d106      	bne.n	800aa0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa02:	f023 0206 	bic.w	r2, r3, #6
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	645a      	str	r2, [r3, #68]	; 0x44
 800aa0a:	e002      	b.n	800aa12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800aa1a:	4b44      	ldr	r3, [pc, #272]	; (800ab2c <HAL_ADC_Start_DMA+0x204>)
 800aa1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	4a43      	ldr	r2, [pc, #268]	; (800ab30 <HAL_ADC_Start_DMA+0x208>)
 800aa24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	4a42      	ldr	r2, [pc, #264]	; (800ab34 <HAL_ADC_Start_DMA+0x20c>)
 800aa2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	4a41      	ldr	r2, [pc, #260]	; (800ab38 <HAL_ADC_Start_DMA+0x210>)
 800aa34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800aa3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800aa4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	334c      	adds	r3, #76	; 0x4c
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f001 fb70 	bl	800c154 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f003 031f 	and.w	r3, r3, #31
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d12a      	bne.n	800aad6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a2d      	ldr	r2, [pc, #180]	; (800ab3c <HAL_ADC_Start_DMA+0x214>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d015      	beq.n	800aab6 <HAL_ADC_Start_DMA+0x18e>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a2c      	ldr	r2, [pc, #176]	; (800ab40 <HAL_ADC_Start_DMA+0x218>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d105      	bne.n	800aaa0 <HAL_ADC_Start_DMA+0x178>
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <HAL_ADC_Start_DMA+0x204>)
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f003 031f 	and.w	r3, r3, #31
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00a      	beq.n	800aab6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <HAL_ADC_Start_DMA+0x21c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d136      	bne.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
 800aaaa:	4b20      	ldr	r3, [pc, #128]	; (800ab2c <HAL_ADC_Start_DMA+0x204>)
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f003 0310 	and.w	r3, r3, #16
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d130      	bne.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d129      	bne.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800aad2:	609a      	str	r2, [r3, #8]
 800aad4:	e020      	b.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a18      	ldr	r2, [pc, #96]	; (800ab3c <HAL_ADC_Start_DMA+0x214>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d11b      	bne.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d114      	bne.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800aafc:	609a      	str	r2, [r3, #8]
 800aafe:	e00b      	b.n	800ab18 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab04:	f043 0210 	orr.w	r2, r3, #16
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab10:	f043 0201 	orr.w	r2, r3, #1
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	20000030 	.word	0x20000030
 800ab28:	431bde83 	.word	0x431bde83
 800ab2c:	40012300 	.word	0x40012300
 800ab30:	0800afad 	.word	0x0800afad
 800ab34:	0800b067 	.word	0x0800b067
 800ab38:	0800b083 	.word	0x0800b083
 800ab3c:	40012000 	.word	0x40012000
 800ab40:	40012100 	.word	0x40012100
 800ab44:	40012200 	.word	0x40012200

0800ab48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d101      	bne.n	800ab8c <HAL_ADC_ConfigChannel+0x1c>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e105      	b.n	800ad98 <HAL_ADC_ConfigChannel+0x228>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b09      	cmp	r3, #9
 800ab9a:	d925      	bls.n	800abe8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68d9      	ldr	r1, [r3, #12]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	4613      	mov	r3, r2
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4413      	add	r3, r2
 800abb0:	3b1e      	subs	r3, #30
 800abb2:	2207      	movs	r2, #7
 800abb4:	fa02 f303 	lsl.w	r3, r2, r3
 800abb8:	43da      	mvns	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	400a      	ands	r2, r1
 800abc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68d9      	ldr	r1, [r3, #12]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	4618      	mov	r0, r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4403      	add	r3, r0
 800abda:	3b1e      	subs	r3, #30
 800abdc:	409a      	lsls	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	60da      	str	r2, [r3, #12]
 800abe6:	e022      	b.n	800ac2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6919      	ldr	r1, [r3, #16]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	4613      	mov	r3, r2
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	4413      	add	r3, r2
 800abfc:	2207      	movs	r2, #7
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	43da      	mvns	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	400a      	ands	r2, r1
 800ac0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6919      	ldr	r1, [r3, #16]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	4603      	mov	r3, r0
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	4403      	add	r3, r0
 800ac24:	409a      	lsls	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	2b06      	cmp	r3, #6
 800ac34:	d824      	bhi.n	800ac80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	3b05      	subs	r3, #5
 800ac48:	221f      	movs	r2, #31
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	43da      	mvns	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	400a      	ands	r2, r1
 800ac56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4618      	mov	r0, r3
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	3b05      	subs	r3, #5
 800ac72:	fa00 f203 	lsl.w	r2, r0, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	635a      	str	r2, [r3, #52]	; 0x34
 800ac7e:	e04c      	b.n	800ad1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2b0c      	cmp	r3, #12
 800ac86:	d824      	bhi.n	800acd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	3b23      	subs	r3, #35	; 0x23
 800ac9a:	221f      	movs	r2, #31
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	43da      	mvns	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	400a      	ands	r2, r1
 800aca8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4618      	mov	r0, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	3b23      	subs	r3, #35	; 0x23
 800acc4:	fa00 f203 	lsl.w	r2, r0, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	631a      	str	r2, [r3, #48]	; 0x30
 800acd0:	e023      	b.n	800ad1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	3b41      	subs	r3, #65	; 0x41
 800ace4:	221f      	movs	r2, #31
 800ace6:	fa02 f303 	lsl.w	r3, r2, r3
 800acea:	43da      	mvns	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	400a      	ands	r2, r1
 800acf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4618      	mov	r0, r3
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	3b41      	subs	r3, #65	; 0x41
 800ad0e:	fa00 f203 	lsl.w	r2, r0, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ad1a:	4b22      	ldr	r3, [pc, #136]	; (800ada4 <HAL_ADC_ConfigChannel+0x234>)
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a21      	ldr	r2, [pc, #132]	; (800ada8 <HAL_ADC_ConfigChannel+0x238>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d109      	bne.n	800ad3c <HAL_ADC_ConfigChannel+0x1cc>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b12      	cmp	r3, #18
 800ad2e:	d105      	bne.n	800ad3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a19      	ldr	r2, [pc, #100]	; (800ada8 <HAL_ADC_ConfigChannel+0x238>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d123      	bne.n	800ad8e <HAL_ADC_ConfigChannel+0x21e>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b10      	cmp	r3, #16
 800ad4c:	d003      	beq.n	800ad56 <HAL_ADC_ConfigChannel+0x1e6>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b11      	cmp	r3, #17
 800ad54:	d11b      	bne.n	800ad8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	d111      	bne.n	800ad8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <HAL_ADC_ConfigChannel+0x23c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a10      	ldr	r2, [pc, #64]	; (800adb0 <HAL_ADC_ConfigChannel+0x240>)
 800ad70:	fba2 2303 	umull	r2, r3, r2, r3
 800ad74:	0c9a      	lsrs	r2, r3, #18
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ad80:	e002      	b.n	800ad88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f9      	bne.n	800ad82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	40012300 	.word	0x40012300
 800ada8:	40012000 	.word	0x40012000
 800adac:	20000030 	.word	0x20000030
 800adb0:	431bde83 	.word	0x431bde83

0800adb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800adbc:	4b79      	ldr	r3, [pc, #484]	; (800afa4 <ADC_Init+0x1f0>)
 800adbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	431a      	orrs	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ade8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6859      	ldr	r1, [r3, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	021a      	lsls	r2, r3, #8
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ae0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6859      	ldr	r1, [r3, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689a      	ldr	r2, [r3, #8]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6899      	ldr	r1, [r3, #8]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68da      	ldr	r2, [r3, #12]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	4a58      	ldr	r2, [pc, #352]	; (800afa8 <ADC_Init+0x1f4>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d022      	beq.n	800ae92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689a      	ldr	r2, [r3, #8]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ae5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6899      	ldr	r1, [r3, #8]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ae7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6899      	ldr	r1, [r3, #8]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	609a      	str	r2, [r3, #8]
 800ae90:	e00f      	b.n	800aeb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800aeb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f022 0202 	bic.w	r2, r2, #2
 800aec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6899      	ldr	r1, [r3, #8]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	7e1b      	ldrb	r3, [r3, #24]
 800aecc:	005a      	lsls	r2, r3, #1
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01b      	beq.n	800af18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800aefe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6859      	ldr	r1, [r3, #4]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0a:	3b01      	subs	r3, #1
 800af0c:	035a      	lsls	r2, r3, #13
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	430a      	orrs	r2, r1
 800af14:	605a      	str	r2, [r3, #4]
 800af16:	e007      	b.n	800af28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800af36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	3b01      	subs	r3, #1
 800af44:	051a      	lsls	r2, r3, #20
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6899      	ldr	r1, [r3, #8]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af6a:	025a      	lsls	r2, r3, #9
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6899      	ldr	r1, [r3, #8]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	029a      	lsls	r2, r3, #10
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	609a      	str	r2, [r3, #8]
}
 800af98:	bf00      	nop
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	40012300 	.word	0x40012300
 800afa8:	0f000001 	.word	0x0f000001

0800afac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d13c      	bne.n	800b040 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d12b      	bne.n	800b038 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d127      	bne.n	800b038 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d006      	beq.n	800b004 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b000:	2b00      	cmp	r3, #0
 800b002:	d119      	bne.n	800b038 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0220 	bic.w	r2, r2, #32
 800b012:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d105      	bne.n	800b038 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b030:	f043 0201 	orr.w	r2, r3, #1
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f004 f94e 	bl	800f2da <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b03e:	e00e      	b.n	800b05e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f7ff fd85 	bl	800ab5c <HAL_ADC_ErrorCallback>
}
 800b052:	e004      	b.n	800b05e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	4798      	blx	r3
}
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f004 f9de 	bl	800f436 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2240      	movs	r2, #64	; 0x40
 800b094:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b09a:	f043 0204 	orr.w	r2, r3, #4
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f7ff fd5a 	bl	800ab5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b0a8:	bf00      	nop
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e0ed      	b.n	800b2b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d102      	bne.n	800b0e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7fd fe76 	bl	8008dd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0201 	orr.w	r2, r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b0f8:	f7ff fab6 	bl	800a668 <HAL_GetTick>
 800b0fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b0fe:	e012      	b.n	800b126 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b100:	f7ff fab2 	bl	800a668 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b0a      	cmp	r3, #10
 800b10c:	d90b      	bls.n	800b126 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2205      	movs	r2, #5
 800b11e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e0c5      	b.n	800b2b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0e5      	beq.n	800b100 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f022 0202 	bic.w	r2, r2, #2
 800b142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b144:	f7ff fa90 	bl	800a668 <HAL_GetTick>
 800b148:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b14a:	e012      	b.n	800b172 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b14c:	f7ff fa8c 	bl	800a668 <HAL_GetTick>
 800b150:	4602      	mov	r2, r0
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	2b0a      	cmp	r3, #10
 800b158:	d90b      	bls.n	800b172 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2205      	movs	r2, #5
 800b16a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e09f      	b.n	800b2b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f003 0302 	and.w	r3, r3, #2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e5      	bne.n	800b14c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	7e1b      	ldrb	r3, [r3, #24]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d108      	bne.n	800b19a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e007      	b.n	800b1aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7e5b      	ldrb	r3, [r3, #25]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d108      	bne.n	800b1c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e007      	b.n	800b1d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	7e9b      	ldrb	r3, [r3, #26]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d108      	bne.n	800b1ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f042 0220 	orr.w	r2, r2, #32
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	e007      	b.n	800b1fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 0220 	bic.w	r2, r2, #32
 800b1fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7edb      	ldrb	r3, [r3, #27]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d108      	bne.n	800b218 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0210 	bic.w	r2, r2, #16
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	e007      	b.n	800b228 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 0210 	orr.w	r2, r2, #16
 800b226:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7f1b      	ldrb	r3, [r3, #28]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d108      	bne.n	800b242 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0208 	orr.w	r2, r2, #8
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e007      	b.n	800b252 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 0208 	bic.w	r2, r2, #8
 800b250:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	7f5b      	ldrb	r3, [r3, #29]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d108      	bne.n	800b26c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f042 0204 	orr.w	r2, r2, #4
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	e007      	b.n	800b27c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f022 0204 	bic.w	r2, r2, #4
 800b27a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	ea42 0103 	orr.w	r1, r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	1e5a      	subs	r2, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
	...

0800b2bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b2d4:	7cfb      	ldrb	r3, [r7, #19]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d003      	beq.n	800b2e2 <HAL_CAN_ConfigFilter+0x26>
 800b2da:	7cfb      	ldrb	r3, [r7, #19]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	f040 80be 	bne.w	800b45e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800b2e2:	4b65      	ldr	r3, [pc, #404]	; (800b478 <HAL_CAN_ConfigFilter+0x1bc>)
 800b2e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2ec:	f043 0201 	orr.w	r2, r3, #1
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	021b      	lsls	r3, r3, #8
 800b312:	431a      	orrs	r2, r3
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	f003 031f 	and.w	r3, r3, #31
 800b322:	2201      	movs	r2, #1
 800b324:	fa02 f303 	lsl.w	r3, r2, r3
 800b328:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	43db      	mvns	r3, r3
 800b334:	401a      	ands	r2, r3
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d123      	bne.n	800b38c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	43db      	mvns	r3, r3
 800b34e:	401a      	ands	r2, r3
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b366:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	3248      	adds	r2, #72	; 0x48
 800b36c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b380:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b382:	6979      	ldr	r1, [r7, #20]
 800b384:	3348      	adds	r3, #72	; 0x48
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	440b      	add	r3, r1
 800b38a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d122      	bne.n	800b3da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	431a      	orrs	r2, r3
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b3b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	3248      	adds	r2, #72	; 0x48
 800b3ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b3ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b3d0:	6979      	ldr	r1, [r7, #20]
 800b3d2:	3348      	adds	r3, #72	; 0x48
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	440b      	add	r3, r1
 800b3d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d109      	bne.n	800b3f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	43db      	mvns	r3, r3
 800b3ec:	401a      	ands	r2, r3
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b3f4:	e007      	b.n	800b406 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	431a      	orrs	r2, r3
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d109      	bne.n	800b422 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	43db      	mvns	r3, r3
 800b418:	401a      	ands	r2, r3
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b420:	e007      	b.n	800b432 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	431a      	orrs	r2, r3
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d107      	bne.n	800b44a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	431a      	orrs	r2, r3
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b450:	f023 0201 	bic.w	r2, r3, #1
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	e006      	b.n	800b46c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b462:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
  }
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	371c      	adds	r7, #28
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	40006400 	.word	0x40006400

0800b47c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d12e      	bne.n	800b4ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2202      	movs	r2, #2
 800b494:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0201 	bic.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b4a8:	f7ff f8de 	bl	800a668 <HAL_GetTick>
 800b4ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b4ae:	e012      	b.n	800b4d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b4b0:	f7ff f8da 	bl	800a668 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b0a      	cmp	r3, #10
 800b4bc:	d90b      	bls.n	800b4d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2205      	movs	r2, #5
 800b4ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e012      	b.n	800b4fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e5      	bne.n	800b4b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e006      	b.n	800b4fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
  }
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800b504:	b480      	push	{r7}
 800b506:	b089      	sub	sp, #36	; 0x24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b518:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b522:	7ffb      	ldrb	r3, [r7, #31]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d003      	beq.n	800b530 <HAL_CAN_AddTxMessage+0x2c>
 800b528:	7ffb      	ldrb	r3, [r7, #31]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	f040 80b8 	bne.w	800b6a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b540:	2b00      	cmp	r3, #0
 800b542:	d105      	bne.n	800b550 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 80a0 	beq.w	800b690 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	0e1b      	lsrs	r3, r3, #24
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d907      	bls.n	800b570 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b564:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e09e      	b.n	800b6ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b570:	2201      	movs	r2, #1
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	409a      	lsls	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10d      	bne.n	800b59e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b58c:	68f9      	ldr	r1, [r7, #12]
 800b58e:	6809      	ldr	r1, [r1, #0]
 800b590:	431a      	orrs	r2, r3
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	3318      	adds	r3, #24
 800b596:	011b      	lsls	r3, r3, #4
 800b598:	440b      	add	r3, r1
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	e00f      	b.n	800b5be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b5a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b5ae:	68f9      	ldr	r1, [r7, #12]
 800b5b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b5b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	3318      	adds	r3, #24
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	440b      	add	r3, r1
 800b5bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6819      	ldr	r1, [r3, #0]
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	691a      	ldr	r2, [r3, #16]
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	3318      	adds	r3, #24
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	440b      	add	r3, r1
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	7d1b      	ldrb	r3, [r3, #20]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d111      	bne.n	800b5fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	3318      	adds	r3, #24
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	4413      	add	r3, r2
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	6811      	ldr	r1, [r2, #0]
 800b5ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	3318      	adds	r3, #24
 800b5f6:	011b      	lsls	r3, r3, #4
 800b5f8:	440b      	add	r3, r1
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3307      	adds	r3, #7
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	061a      	lsls	r2, r3, #24
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3306      	adds	r3, #6
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	041b      	lsls	r3, r3, #16
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3305      	adds	r3, #5
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	021b      	lsls	r3, r3, #8
 800b618:	4313      	orrs	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	3204      	adds	r2, #4
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	4610      	mov	r0, r2
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	6811      	ldr	r1, [r2, #0]
 800b626:	ea43 0200 	orr.w	r2, r3, r0
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	011b      	lsls	r3, r3, #4
 800b62e:	440b      	add	r3, r1
 800b630:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b634:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3303      	adds	r3, #3
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	061a      	lsls	r2, r3, #24
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3302      	adds	r3, #2
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	041b      	lsls	r3, r3, #16
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3301      	adds	r3, #1
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	4313      	orrs	r3, r2
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	7812      	ldrb	r2, [r2, #0]
 800b656:	4610      	mov	r0, r2
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	6811      	ldr	r1, [r2, #0]
 800b65c:	ea43 0200 	orr.w	r2, r3, r0
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	440b      	add	r3, r1
 800b666:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b66a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	3318      	adds	r3, #24
 800b674:	011b      	lsls	r3, r3, #4
 800b676:	4413      	add	r3, r2
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	6811      	ldr	r1, [r2, #0]
 800b67e:	f043 0201 	orr.w	r2, r3, #1
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	3318      	adds	r3, #24
 800b686:	011b      	lsls	r3, r3, #4
 800b688:	440b      	add	r3, r1
 800b68a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	e00e      	b.n	800b6ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e006      	b.n	800b6ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
  }
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3724      	adds	r7, #36	; 0x24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b6cc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d002      	beq.n	800b6da <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800b6d4:	7afb      	ldrb	r3, [r7, #11]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d11d      	bne.n	800b716 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3301      	adds	r3, #1
 800b700:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3301      	adds	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b738:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d003      	beq.n	800b748 <HAL_CAN_GetRxMessage+0x24>
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	2b02      	cmp	r3, #2
 800b744:	f040 80f3 	bne.w	800b92e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10e      	bne.n	800b76c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d116      	bne.n	800b78a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e0e7      	b.n	800b93c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	f003 0303 	and.w	r3, r3, #3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d107      	bne.n	800b78a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e0d8      	b.n	800b93c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	331b      	adds	r3, #27
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	4413      	add	r3, r2
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0204 	and.w	r2, r3, #4
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10c      	bne.n	800b7c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	331b      	adds	r3, #27
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	4413      	add	r3, r2
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	0d5b      	lsrs	r3, r3, #21
 800b7b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	601a      	str	r2, [r3, #0]
 800b7c0:	e00b      	b.n	800b7da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	331b      	adds	r3, #27
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	4413      	add	r3, r2
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	08db      	lsrs	r3, r3, #3
 800b7d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	331b      	adds	r3, #27
 800b7e2:	011b      	lsls	r3, r3, #4
 800b7e4:	4413      	add	r3, r2
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0202 	and.w	r2, r3, #2
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	331b      	adds	r3, #27
 800b7f8:	011b      	lsls	r3, r3, #4
 800b7fa:	4413      	add	r3, r2
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 020f 	and.w	r2, r3, #15
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	331b      	adds	r3, #27
 800b810:	011b      	lsls	r3, r3, #4
 800b812:	4413      	add	r3, r2
 800b814:	3304      	adds	r3, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	0a1b      	lsrs	r3, r3, #8
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	331b      	adds	r3, #27
 800b828:	011b      	lsls	r3, r3, #4
 800b82a:	4413      	add	r3, r2
 800b82c:	3304      	adds	r3, #4
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	0c1b      	lsrs	r3, r3, #16
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	4413      	add	r3, r2
 800b842:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	4413      	add	r3, r2
 800b858:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	0a1a      	lsrs	r2, r3, #8
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	3301      	adds	r3, #1
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	011b      	lsls	r3, r3, #4
 800b870:	4413      	add	r3, r2
 800b872:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	0c1a      	lsrs	r2, r3, #16
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	3302      	adds	r3, #2
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	0e1a      	lsrs	r2, r3, #24
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	3303      	adds	r3, #3
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	011b      	lsls	r3, r3, #4
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	0a1a      	lsrs	r2, r3, #8
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	3305      	adds	r3, #5
 800b8ca:	b2d2      	uxtb	r2, r2
 800b8cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	0c1a      	lsrs	r2, r3, #16
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	3306      	adds	r3, #6
 800b8e4:	b2d2      	uxtb	r2, r2
 800b8e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	0e1a      	lsrs	r2, r3, #24
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	3307      	adds	r3, #7
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d108      	bne.n	800b91a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f042 0220 	orr.w	r2, r2, #32
 800b916:	60da      	str	r2, [r3, #12]
 800b918:	e007      	b.n	800b92a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	691a      	ldr	r2, [r3, #16]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f042 0220 	orr.w	r2, r2, #32
 800b928:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e006      	b.n	800b93c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
  }
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	371c      	adds	r7, #28
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b958:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d002      	beq.n	800b966 <HAL_CAN_ActivateNotification+0x1e>
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d109      	bne.n	800b97a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6959      	ldr	r1, [r3, #20]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	e006      	b.n	800b988 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
  }
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08a      	sub	sp, #40	; 0x28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b99c:	2300      	movs	r3, #0
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b9d0:	6a3b      	ldr	r3, [r7, #32]
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d07c      	beq.n	800bad4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d023      	beq.n	800ba2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7f6 f950 	bl	8001c9c <HAL_CAN_TxMailbox0CompleteCallback>
 800b9fc:	e016      	b.n	800ba2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d004      	beq.n	800ba12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba10:	e00c      	b.n	800ba2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	f003 0308 	and.w	r3, r3, #8
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba22:	627b      	str	r3, [r7, #36]	; 0x24
 800ba24:	e002      	b.n	800ba2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f97f 	bl	800bd2a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d024      	beq.n	800ba80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f959 	bl	800bd02 <HAL_CAN_TxMailbox1CompleteCallback>
 800ba50:	e016      	b.n	800ba80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ba62:	627b      	str	r3, [r7, #36]	; 0x24
 800ba64:	e00c      	b.n	800ba80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
 800ba78:	e002      	b.n	800ba80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f95f 	bl	800bd3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d024      	beq.n	800bad4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f939 	bl	800bd16 <HAL_CAN_TxMailbox2CompleteCallback>
 800baa4:	e016      	b.n	800bad4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d004      	beq.n	800baba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bab6:	627b      	str	r3, [r7, #36]	; 0x24
 800bab8:	e00c      	b.n	800bad4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baca:	627b      	str	r3, [r7, #36]	; 0x24
 800bacc:	e002      	b.n	800bad4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f93f 	bl	800bd52 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	f003 0308 	and.w	r3, r3, #8
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00c      	beq.n	800baf8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f003 0310 	and.w	r3, r3, #16
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800baee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2210      	movs	r2, #16
 800baf6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	f003 0304 	and.w	r3, r3, #4
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f003 0308 	and.w	r3, r3, #8
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d006      	beq.n	800bb1a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2208      	movs	r2, #8
 800bb12:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f926 	bl	800bd66 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	f003 0302 	and.w	r3, r3, #2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f003 0303 	and.w	r3, r3, #3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7f6 f81a 	bl	8001b6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00c      	beq.n	800bb5c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d007      	beq.n	800bb5c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2210      	movs	r2, #16
 800bb5a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00b      	beq.n	800bb7e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f003 0308 	and.w	r3, r3, #8
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d006      	beq.n	800bb7e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2208      	movs	r2, #8
 800bb76:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f8fe 	bl	800bd7a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	f003 0310 	and.w	r3, r3, #16
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d009      	beq.n	800bb9c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	f003 0303 	and.w	r3, r3, #3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7f6 f822 	bl	8001be0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00b      	beq.n	800bbbe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f003 0310 	and.w	r3, r3, #16
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d006      	beq.n	800bbbe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2210      	movs	r2, #16
 800bbb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f8e8 	bl	800bd8e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d006      	beq.n	800bbe0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2208      	movs	r2, #8
 800bbd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f8e1 	bl	800bda2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d07b      	beq.n	800bce2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d072      	beq.n	800bcda <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d008      	beq.n	800bc10 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d003      	beq.n	800bc10 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	f043 0301 	orr.w	r3, r3, #1
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	f043 0302 	orr.w	r3, r3, #2
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d008      	beq.n	800bc48 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	f043 0304 	orr.w	r3, r3, #4
 800bc46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d043      	beq.n	800bcda <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d03e      	beq.n	800bcda <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc62:	2b60      	cmp	r3, #96	; 0x60
 800bc64:	d02b      	beq.n	800bcbe <HAL_CAN_IRQHandler+0x32a>
 800bc66:	2b60      	cmp	r3, #96	; 0x60
 800bc68:	d82e      	bhi.n	800bcc8 <HAL_CAN_IRQHandler+0x334>
 800bc6a:	2b50      	cmp	r3, #80	; 0x50
 800bc6c:	d022      	beq.n	800bcb4 <HAL_CAN_IRQHandler+0x320>
 800bc6e:	2b50      	cmp	r3, #80	; 0x50
 800bc70:	d82a      	bhi.n	800bcc8 <HAL_CAN_IRQHandler+0x334>
 800bc72:	2b40      	cmp	r3, #64	; 0x40
 800bc74:	d019      	beq.n	800bcaa <HAL_CAN_IRQHandler+0x316>
 800bc76:	2b40      	cmp	r3, #64	; 0x40
 800bc78:	d826      	bhi.n	800bcc8 <HAL_CAN_IRQHandler+0x334>
 800bc7a:	2b30      	cmp	r3, #48	; 0x30
 800bc7c:	d010      	beq.n	800bca0 <HAL_CAN_IRQHandler+0x30c>
 800bc7e:	2b30      	cmp	r3, #48	; 0x30
 800bc80:	d822      	bhi.n	800bcc8 <HAL_CAN_IRQHandler+0x334>
 800bc82:	2b10      	cmp	r3, #16
 800bc84:	d002      	beq.n	800bc8c <HAL_CAN_IRQHandler+0x2f8>
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	d005      	beq.n	800bc96 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800bc8a:	e01d      	b.n	800bcc8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	f043 0308 	orr.w	r3, r3, #8
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bc94:	e019      	b.n	800bcca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	f043 0310 	orr.w	r3, r3, #16
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bc9e:	e014      	b.n	800bcca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	f043 0320 	orr.w	r3, r3, #32
 800bca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bca8:	e00f      	b.n	800bcca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bcb2:	e00a      	b.n	800bcca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bcbc:	e005      	b.n	800bcca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bcc6:	e000      	b.n	800bcca <HAL_CAN_IRQHandler+0x336>
            break;
 800bcc8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	699a      	ldr	r2, [r3, #24]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bcd8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2204      	movs	r2, #4
 800bce0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d008      	beq.n	800bcfa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7f5 ffad 	bl	8001c54 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800bcfa:	bf00      	nop
 800bcfc:	3728      	adds	r7, #40	; 0x28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800bd0a:	bf00      	nop
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b083      	sub	sp, #12
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bd5a:	bf00      	nop
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b085      	sub	sp, #20
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bdc8:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d002      	beq.n	800bdd6 <HAL_CAN_ResetError+0x20>
 800bdd0:	7bbb      	ldrb	r3, [r7, #14]
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d103      	bne.n	800bdde <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	625a      	str	r2, [r3, #36]	; 0x24
 800bddc:	e007      	b.n	800bdee <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800bdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <__NVIC_SetPriorityGrouping>:
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f003 0307 	and.w	r3, r3, #7
 800be0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800be0c:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <__NVIC_SetPriorityGrouping+0x44>)
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800be18:	4013      	ands	r3, r2
 800be1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800be24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800be28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800be2e:	4a04      	ldr	r2, [pc, #16]	; (800be40 <__NVIC_SetPriorityGrouping+0x44>)
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	60d3      	str	r3, [r2, #12]
}
 800be34:	bf00      	nop
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	e000ed00 	.word	0xe000ed00

0800be44 <__NVIC_GetPriorityGrouping>:
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800be48:	4b04      	ldr	r3, [pc, #16]	; (800be5c <__NVIC_GetPriorityGrouping+0x18>)
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	0a1b      	lsrs	r3, r3, #8
 800be4e:	f003 0307 	and.w	r3, r3, #7
}
 800be52:	4618      	mov	r0, r3
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	e000ed00 	.word	0xe000ed00

0800be60 <__NVIC_EnableIRQ>:
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	db0b      	blt.n	800be8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	f003 021f 	and.w	r2, r3, #31
 800be78:	4907      	ldr	r1, [pc, #28]	; (800be98 <__NVIC_EnableIRQ+0x38>)
 800be7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	2001      	movs	r0, #1
 800be82:	fa00 f202 	lsl.w	r2, r0, r2
 800be86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800be8a:	bf00      	nop
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	e000e100 	.word	0xe000e100

0800be9c <__NVIC_SetPriority>:
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beac:	2b00      	cmp	r3, #0
 800beae:	db0a      	blt.n	800bec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	490c      	ldr	r1, [pc, #48]	; (800bee8 <__NVIC_SetPriority+0x4c>)
 800beb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beba:	0112      	lsls	r2, r2, #4
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	440b      	add	r3, r1
 800bec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bec4:	e00a      	b.n	800bedc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	4908      	ldr	r1, [pc, #32]	; (800beec <__NVIC_SetPriority+0x50>)
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	f003 030f 	and.w	r3, r3, #15
 800bed2:	3b04      	subs	r3, #4
 800bed4:	0112      	lsls	r2, r2, #4
 800bed6:	b2d2      	uxtb	r2, r2
 800bed8:	440b      	add	r3, r1
 800beda:	761a      	strb	r2, [r3, #24]
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	e000e100 	.word	0xe000e100
 800beec:	e000ed00 	.word	0xe000ed00

0800bef0 <NVIC_EncodePriority>:
{
 800bef0:	b480      	push	{r7}
 800bef2:	b089      	sub	sp, #36	; 0x24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f1c3 0307 	rsb	r3, r3, #7
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	bf28      	it	cs
 800bf0e:	2304      	movcs	r3, #4
 800bf10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	3304      	adds	r3, #4
 800bf16:	2b06      	cmp	r3, #6
 800bf18:	d902      	bls.n	800bf20 <NVIC_EncodePriority+0x30>
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	3b03      	subs	r3, #3
 800bf1e:	e000      	b.n	800bf22 <NVIC_EncodePriority+0x32>
 800bf20:	2300      	movs	r3, #0
 800bf22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf24:	f04f 32ff 	mov.w	r2, #4294967295
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2e:	43da      	mvns	r2, r3
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	401a      	ands	r2, r3
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bf38:	f04f 31ff 	mov.w	r1, #4294967295
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf42:	43d9      	mvns	r1, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf48:	4313      	orrs	r3, r2
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3724      	adds	r7, #36	; 0x24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7ff ff4c 	bl	800bdfc <__NVIC_SetPriorityGrouping>
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bf7e:	f7ff ff61 	bl	800be44 <__NVIC_GetPriorityGrouping>
 800bf82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	6978      	ldr	r0, [r7, #20]
 800bf8a:	f7ff ffb1 	bl	800bef0 <NVIC_EncodePriority>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf94:	4611      	mov	r1, r2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff ff80 	bl	800be9c <__NVIC_SetPriority>
}
 800bf9c:	bf00      	nop
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bfae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff ff54 	bl	800be60 <__NVIC_EnableIRQ>
}
 800bfb8:	bf00      	nop
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e00e      	b.n	800bff0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	795b      	ldrb	r3, [r3, #5]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d105      	bne.n	800bfe8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7fc ffca 	bl	8008f7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c004:	f7fe fb30 	bl	800a668 <HAL_GetTick>
 800c008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e099      	b.n	800c148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2202      	movs	r2, #2
 800c018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f022 0201 	bic.w	r2, r2, #1
 800c032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c034:	e00f      	b.n	800c056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c036:	f7fe fb17 	bl	800a668 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	2b05      	cmp	r3, #5
 800c042:	d908      	bls.n	800c056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2220      	movs	r2, #32
 800c048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2203      	movs	r2, #3
 800c04e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c052:	2303      	movs	r3, #3
 800c054:	e078      	b.n	800c148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e8      	bne.n	800c036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	4b38      	ldr	r3, [pc, #224]	; (800c150 <HAL_DMA_Init+0x158>)
 800c070:	4013      	ands	r3, r2
 800c072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c08e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c09a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d107      	bne.n	800c0c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f023 0307 	bic.w	r3, r3, #7
 800c0d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d117      	bne.n	800c11a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00e      	beq.n	800c11a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fb01 	bl	800c704 <DMA_CheckFifoParam>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d008      	beq.n	800c11a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2240      	movs	r2, #64	; 0x40
 800c10c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c116:	2301      	movs	r3, #1
 800c118:	e016      	b.n	800c148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fab8 	bl	800c698 <DMA_CalcBaseAndBitshift>
 800c128:	4603      	mov	r3, r0
 800c12a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c130:	223f      	movs	r2, #63	; 0x3f
 800c132:	409a      	lsls	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	f010803f 	.word	0xf010803f

0800c154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <HAL_DMA_Start_IT+0x26>
 800c176:	2302      	movs	r3, #2
 800c178:	e040      	b.n	800c1fc <HAL_DMA_Start_IT+0xa8>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d12f      	bne.n	800c1ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2202      	movs	r2, #2
 800c192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f000 fa4a 	bl	800c63c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ac:	223f      	movs	r2, #63	; 0x3f
 800c1ae:	409a      	lsls	r2, r3
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0216 	orr.w	r2, r2, #22
 800c1c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0208 	orr.w	r2, r2, #8
 800c1da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f042 0201 	orr.w	r2, r2, #1
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	e005      	b.n	800c1fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c210:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c212:	f7fe fa29 	bl	800a668 <HAL_GetTick>
 800c216:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b02      	cmp	r3, #2
 800c222:	d008      	beq.n	800c236 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2280      	movs	r2, #128	; 0x80
 800c228:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e052      	b.n	800c2dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f022 0216 	bic.w	r2, r2, #22
 800c244:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	695a      	ldr	r2, [r3, #20]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c254:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d103      	bne.n	800c266 <HAL_DMA_Abort+0x62>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c262:	2b00      	cmp	r3, #0
 800c264:	d007      	beq.n	800c276 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f022 0208 	bic.w	r2, r2, #8
 800c274:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f022 0201 	bic.w	r2, r2, #1
 800c284:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c286:	e013      	b.n	800c2b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c288:	f7fe f9ee 	bl	800a668 <HAL_GetTick>
 800c28c:	4602      	mov	r2, r0
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	2b05      	cmp	r3, #5
 800c294:	d90c      	bls.n	800c2b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2220      	movs	r2, #32
 800c29a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2203      	movs	r2, #3
 800c2a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e015      	b.n	800c2dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1e4      	bne.n	800c288 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2c2:	223f      	movs	r2, #63	; 0x3f
 800c2c4:	409a      	lsls	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d004      	beq.n	800c302 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2280      	movs	r2, #128	; 0x80
 800c2fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e00c      	b.n	800c31c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2205      	movs	r2, #5
 800c306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f022 0201 	bic.w	r2, r2, #1
 800c318:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c334:	4b8e      	ldr	r3, [pc, #568]	; (800c570 <HAL_DMA_IRQHandler+0x248>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a8e      	ldr	r2, [pc, #568]	; (800c574 <HAL_DMA_IRQHandler+0x24c>)
 800c33a:	fba2 2303 	umull	r2, r3, r2, r3
 800c33e:	0a9b      	lsrs	r3, r3, #10
 800c340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c352:	2208      	movs	r2, #8
 800c354:	409a      	lsls	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4013      	ands	r3, r2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d01a      	beq.n	800c394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d013      	beq.n	800c394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 0204 	bic.w	r2, r2, #4
 800c37a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c380:	2208      	movs	r2, #8
 800c382:	409a      	lsls	r2, r3
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38c:	f043 0201 	orr.w	r2, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c398:	2201      	movs	r2, #1
 800c39a:	409a      	lsls	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4013      	ands	r3, r2
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d012      	beq.n	800c3ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00b      	beq.n	800c3ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	409a      	lsls	r2, r3
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c2:	f043 0202 	orr.w	r2, r3, #2
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	409a      	lsls	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d012      	beq.n	800c400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0302 	and.w	r3, r3, #2
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00b      	beq.n	800c400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3ec:	2204      	movs	r2, #4
 800c3ee:	409a      	lsls	r2, r3
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f8:	f043 0204 	orr.w	r2, r3, #4
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c404:	2210      	movs	r2, #16
 800c406:	409a      	lsls	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4013      	ands	r3, r2
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d043      	beq.n	800c498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0308 	and.w	r3, r3, #8
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d03c      	beq.n	800c498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c422:	2210      	movs	r2, #16
 800c424:	409a      	lsls	r2, r3
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d018      	beq.n	800c46a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c442:	2b00      	cmp	r3, #0
 800c444:	d108      	bne.n	800c458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d024      	beq.n	800c498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	4798      	blx	r3
 800c456:	e01f      	b.n	800c498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d01b      	beq.n	800c498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	4798      	blx	r3
 800c468:	e016      	b.n	800c498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c474:	2b00      	cmp	r3, #0
 800c476:	d107      	bne.n	800c488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f022 0208 	bic.w	r2, r2, #8
 800c486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c49c:	2220      	movs	r2, #32
 800c49e:	409a      	lsls	r2, r3
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 808f 	beq.w	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 0310 	and.w	r3, r3, #16
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 8087 	beq.w	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4be:	2220      	movs	r2, #32
 800c4c0:	409a      	lsls	r2, r3
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b05      	cmp	r3, #5
 800c4d0:	d136      	bne.n	800c540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f022 0216 	bic.w	r2, r2, #22
 800c4e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	695a      	ldr	r2, [r3, #20]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d103      	bne.n	800c502 <HAL_DMA_IRQHandler+0x1da>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d007      	beq.n	800c512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f022 0208 	bic.w	r2, r2, #8
 800c510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c516:	223f      	movs	r2, #63	; 0x3f
 800c518:	409a      	lsls	r2, r3
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c532:	2b00      	cmp	r3, #0
 800c534:	d07e      	beq.n	800c634 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	4798      	blx	r3
        }
        return;
 800c53e:	e079      	b.n	800c634 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d01d      	beq.n	800c58a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10d      	bne.n	800c578 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c560:	2b00      	cmp	r3, #0
 800c562:	d031      	beq.n	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	4798      	blx	r3
 800c56c:	e02c      	b.n	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
 800c56e:	bf00      	nop
 800c570:	20000030 	.word	0x20000030
 800c574:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d023      	beq.n	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	4798      	blx	r3
 800c588:	e01e      	b.n	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10f      	bne.n	800c5b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0210 	bic.w	r2, r2, #16
 800c5a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d003      	beq.n	800c5c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d032      	beq.n	800c636 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d022      	beq.n	800c622 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2205      	movs	r2, #5
 800c5e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 0201 	bic.w	r2, r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	60bb      	str	r3, [r7, #8]
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d307      	bcc.n	800c610 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1f2      	bne.n	800c5f4 <HAL_DMA_IRQHandler+0x2cc>
 800c60e:	e000      	b.n	800c612 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c610:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d005      	beq.n	800c636 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	4798      	blx	r3
 800c632:	e000      	b.n	800c636 <HAL_DMA_IRQHandler+0x30e>
        return;
 800c634:	bf00      	nop
    }
  }
}
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
 800c648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	2b40      	cmp	r3, #64	; 0x40
 800c668:	d108      	bne.n	800c67c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c67a:	e007      	b.n	800c68c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	60da      	str	r2, [r3, #12]
}
 800c68c:	bf00      	nop
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	3b10      	subs	r3, #16
 800c6a8:	4a14      	ldr	r2, [pc, #80]	; (800c6fc <DMA_CalcBaseAndBitshift+0x64>)
 800c6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ae:	091b      	lsrs	r3, r3, #4
 800c6b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c6b2:	4a13      	ldr	r2, [pc, #76]	; (800c700 <DMA_CalcBaseAndBitshift+0x68>)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d909      	bls.n	800c6da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c6ce:	f023 0303 	bic.w	r3, r3, #3
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	659a      	str	r2, [r3, #88]	; 0x58
 800c6d8:	e007      	b.n	800c6ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c6e2:	f023 0303 	bic.w	r3, r3, #3
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	aaaaaaab 	.word	0xaaaaaaab
 800c700:	080189d0 	.word	0x080189d0

0800c704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d11f      	bne.n	800c75e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2b03      	cmp	r3, #3
 800c722:	d856      	bhi.n	800c7d2 <DMA_CheckFifoParam+0xce>
 800c724:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <DMA_CheckFifoParam+0x28>)
 800c726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72a:	bf00      	nop
 800c72c:	0800c73d 	.word	0x0800c73d
 800c730:	0800c74f 	.word	0x0800c74f
 800c734:	0800c73d 	.word	0x0800c73d
 800c738:	0800c7d3 	.word	0x0800c7d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d046      	beq.n	800c7d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c748:	2301      	movs	r3, #1
 800c74a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c74c:	e043      	b.n	800c7d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c756:	d140      	bne.n	800c7da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c75c:	e03d      	b.n	800c7da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c766:	d121      	bne.n	800c7ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d837      	bhi.n	800c7de <DMA_CheckFifoParam+0xda>
 800c76e:	a201      	add	r2, pc, #4	; (adr r2, 800c774 <DMA_CheckFifoParam+0x70>)
 800c770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c774:	0800c785 	.word	0x0800c785
 800c778:	0800c78b 	.word	0x0800c78b
 800c77c:	0800c785 	.word	0x0800c785
 800c780:	0800c79d 	.word	0x0800c79d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	73fb      	strb	r3, [r7, #15]
      break;
 800c788:	e030      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d025      	beq.n	800c7e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c79a:	e022      	b.n	800c7e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c7a4:	d11f      	bne.n	800c7e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c7aa:	e01c      	b.n	800c7e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d903      	bls.n	800c7ba <DMA_CheckFifoParam+0xb6>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2b03      	cmp	r3, #3
 800c7b6:	d003      	beq.n	800c7c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c7b8:	e018      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7be:	e015      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00e      	beq.n	800c7ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d0:	e00b      	b.n	800c7ea <DMA_CheckFifoParam+0xe6>
      break;
 800c7d2:	bf00      	nop
 800c7d4:	e00a      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      break;
 800c7d6:	bf00      	nop
 800c7d8:	e008      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      break;
 800c7da:	bf00      	nop
 800c7dc:	e006      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      break;
 800c7de:	bf00      	nop
 800c7e0:	e004      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      break;
 800c7e2:	bf00      	nop
 800c7e4:	e002      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      break;   
 800c7e6:	bf00      	nop
 800c7e8:	e000      	b.n	800c7ec <DMA_CheckFifoParam+0xe8>
      break;
 800c7ea:	bf00      	nop
    }
  } 
  
  return status; 
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop

0800c7fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b089      	sub	sp, #36	; 0x24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c806:	2300      	movs	r3, #0
 800c808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c80e:	2300      	movs	r3, #0
 800c810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c812:	2300      	movs	r3, #0
 800c814:	61fb      	str	r3, [r7, #28]
 800c816:	e16b      	b.n	800caf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c818:	2201      	movs	r2, #1
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	fa02 f303 	lsl.w	r3, r2, r3
 800c820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	4013      	ands	r3, r2
 800c82a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	429a      	cmp	r2, r3
 800c832:	f040 815a 	bne.w	800caea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	f003 0303 	and.w	r3, r3, #3
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d005      	beq.n	800c84e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d130      	bne.n	800c8b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	2203      	movs	r2, #3
 800c85a:	fa02 f303 	lsl.w	r3, r2, r3
 800c85e:	43db      	mvns	r3, r3
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	4013      	ands	r3, r2
 800c864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68da      	ldr	r2, [r3, #12]
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	fa02 f303 	lsl.w	r3, r2, r3
 800c872:	69ba      	ldr	r2, [r7, #24]
 800c874:	4313      	orrs	r3, r2
 800c876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c884:	2201      	movs	r2, #1
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	fa02 f303 	lsl.w	r3, r2, r3
 800c88c:	43db      	mvns	r3, r3
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	4013      	ands	r3, r2
 800c892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	091b      	lsrs	r3, r3, #4
 800c89a:	f003 0201 	and.w	r2, r3, #1
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	69ba      	ldr	r2, [r7, #24]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	69ba      	ldr	r2, [r7, #24]
 800c8ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	f003 0303 	and.w	r3, r3, #3
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d017      	beq.n	800c8ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	2203      	movs	r2, #3
 800c8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8cc:	43db      	mvns	r3, r3
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	69ba      	ldr	r2, [r7, #24]
 800c8ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d123      	bne.n	800c940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	08da      	lsrs	r2, r3, #3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3208      	adds	r2, #8
 800c900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	f003 0307 	and.w	r3, r3, #7
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	220f      	movs	r2, #15
 800c910:	fa02 f303 	lsl.w	r3, r2, r3
 800c914:	43db      	mvns	r3, r3
 800c916:	69ba      	ldr	r2, [r7, #24]
 800c918:	4013      	ands	r3, r2
 800c91a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	691a      	ldr	r2, [r3, #16]
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	f003 0307 	and.w	r3, r3, #7
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	fa02 f303 	lsl.w	r3, r2, r3
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	4313      	orrs	r3, r2
 800c930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	08da      	lsrs	r2, r3, #3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3208      	adds	r2, #8
 800c93a:	69b9      	ldr	r1, [r7, #24]
 800c93c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	2203      	movs	r2, #3
 800c94c:	fa02 f303 	lsl.w	r3, r2, r3
 800c950:	43db      	mvns	r3, r3
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	4013      	ands	r3, r2
 800c956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	f003 0203 	and.w	r2, r3, #3
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	fa02 f303 	lsl.w	r3, r2, r3
 800c968:	69ba      	ldr	r2, [r7, #24]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80b4 	beq.w	800caea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c982:	2300      	movs	r3, #0
 800c984:	60fb      	str	r3, [r7, #12]
 800c986:	4b60      	ldr	r3, [pc, #384]	; (800cb08 <HAL_GPIO_Init+0x30c>)
 800c988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c98a:	4a5f      	ldr	r2, [pc, #380]	; (800cb08 <HAL_GPIO_Init+0x30c>)
 800c98c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c990:	6453      	str	r3, [r2, #68]	; 0x44
 800c992:	4b5d      	ldr	r3, [pc, #372]	; (800cb08 <HAL_GPIO_Init+0x30c>)
 800c994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c99e:	4a5b      	ldr	r2, [pc, #364]	; (800cb0c <HAL_GPIO_Init+0x310>)
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	089b      	lsrs	r3, r3, #2
 800c9a4:	3302      	adds	r3, #2
 800c9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	220f      	movs	r2, #15
 800c9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ba:	43db      	mvns	r3, r3
 800c9bc:	69ba      	ldr	r2, [r7, #24]
 800c9be:	4013      	ands	r3, r2
 800c9c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a52      	ldr	r2, [pc, #328]	; (800cb10 <HAL_GPIO_Init+0x314>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d02b      	beq.n	800ca22 <HAL_GPIO_Init+0x226>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a51      	ldr	r2, [pc, #324]	; (800cb14 <HAL_GPIO_Init+0x318>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d025      	beq.n	800ca1e <HAL_GPIO_Init+0x222>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a50      	ldr	r2, [pc, #320]	; (800cb18 <HAL_GPIO_Init+0x31c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d01f      	beq.n	800ca1a <HAL_GPIO_Init+0x21e>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a4f      	ldr	r2, [pc, #316]	; (800cb1c <HAL_GPIO_Init+0x320>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d019      	beq.n	800ca16 <HAL_GPIO_Init+0x21a>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a4e      	ldr	r2, [pc, #312]	; (800cb20 <HAL_GPIO_Init+0x324>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d013      	beq.n	800ca12 <HAL_GPIO_Init+0x216>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a4d      	ldr	r2, [pc, #308]	; (800cb24 <HAL_GPIO_Init+0x328>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d00d      	beq.n	800ca0e <HAL_GPIO_Init+0x212>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a4c      	ldr	r2, [pc, #304]	; (800cb28 <HAL_GPIO_Init+0x32c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d007      	beq.n	800ca0a <HAL_GPIO_Init+0x20e>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a4b      	ldr	r2, [pc, #300]	; (800cb2c <HAL_GPIO_Init+0x330>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d101      	bne.n	800ca06 <HAL_GPIO_Init+0x20a>
 800ca02:	2307      	movs	r3, #7
 800ca04:	e00e      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca06:	2308      	movs	r3, #8
 800ca08:	e00c      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca0a:	2306      	movs	r3, #6
 800ca0c:	e00a      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca0e:	2305      	movs	r3, #5
 800ca10:	e008      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca12:	2304      	movs	r3, #4
 800ca14:	e006      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca16:	2303      	movs	r3, #3
 800ca18:	e004      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	e002      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <HAL_GPIO_Init+0x228>
 800ca22:	2300      	movs	r3, #0
 800ca24:	69fa      	ldr	r2, [r7, #28]
 800ca26:	f002 0203 	and.w	r2, r2, #3
 800ca2a:	0092      	lsls	r2, r2, #2
 800ca2c:	4093      	lsls	r3, r2
 800ca2e:	69ba      	ldr	r2, [r7, #24]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ca34:	4935      	ldr	r1, [pc, #212]	; (800cb0c <HAL_GPIO_Init+0x310>)
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	089b      	lsrs	r3, r3, #2
 800ca3a:	3302      	adds	r3, #2
 800ca3c:	69ba      	ldr	r2, [r7, #24]
 800ca3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ca42:	4b3b      	ldr	r3, [pc, #236]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	43db      	mvns	r3, r3
 800ca4c:	69ba      	ldr	r2, [r7, #24]
 800ca4e:	4013      	ands	r3, r2
 800ca50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d003      	beq.n	800ca66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ca66:	4a32      	ldr	r2, [pc, #200]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ca6c:	4b30      	ldr	r3, [pc, #192]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	43db      	mvns	r3, r3
 800ca76:	69ba      	ldr	r2, [r7, #24]
 800ca78:	4013      	ands	r3, r2
 800ca7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ca88:	69ba      	ldr	r2, [r7, #24]
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ca90:	4a27      	ldr	r2, [pc, #156]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ca96:	4b26      	ldr	r3, [pc, #152]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	43db      	mvns	r3, r3
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	4013      	ands	r3, r2
 800caa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800cab2:	69ba      	ldr	r2, [r7, #24]
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800caba:	4a1d      	ldr	r2, [pc, #116]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cac0:	4b1b      	ldr	r3, [pc, #108]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	43db      	mvns	r3, r3
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	4013      	ands	r3, r2
 800cace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800cadc:	69ba      	ldr	r2, [r7, #24]
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cae4:	4a12      	ldr	r2, [pc, #72]	; (800cb30 <HAL_GPIO_Init+0x334>)
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	3301      	adds	r3, #1
 800caee:	61fb      	str	r3, [r7, #28]
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	2b0f      	cmp	r3, #15
 800caf4:	f67f ae90 	bls.w	800c818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800caf8:	bf00      	nop
 800cafa:	bf00      	nop
 800cafc:	3724      	adds	r7, #36	; 0x24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	40023800 	.word	0x40023800
 800cb0c:	40013800 	.word	0x40013800
 800cb10:	40020000 	.word	0x40020000
 800cb14:	40020400 	.word	0x40020400
 800cb18:	40020800 	.word	0x40020800
 800cb1c:	40020c00 	.word	0x40020c00
 800cb20:	40021000 	.word	0x40021000
 800cb24:	40021400 	.word	0x40021400
 800cb28:	40021800 	.word	0x40021800
 800cb2c:	40021c00 	.word	0x40021c00
 800cb30:	40013c00 	.word	0x40013c00

0800cb34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	807b      	strh	r3, [r7, #2]
 800cb40:	4613      	mov	r3, r2
 800cb42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cb44:	787b      	ldrb	r3, [r7, #1]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cb4a:	887a      	ldrh	r2, [r7, #2]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cb50:	e003      	b.n	800cb5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cb52:	887b      	ldrh	r3, [r7, #2]
 800cb54:	041a      	lsls	r2, r3, #16
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	619a      	str	r2, [r3, #24]
}
 800cb5a:	bf00      	nop
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
	...

0800cb68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e267      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d075      	beq.n	800cc72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cb86:	4b88      	ldr	r3, [pc, #544]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	f003 030c 	and.w	r3, r3, #12
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	d00c      	beq.n	800cbac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb92:	4b85      	ldr	r3, [pc, #532]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cb9a:	2b08      	cmp	r3, #8
 800cb9c:	d112      	bne.n	800cbc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb9e:	4b82      	ldr	r3, [pc, #520]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbaa:	d10b      	bne.n	800cbc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbac:	4b7e      	ldr	r3, [pc, #504]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d05b      	beq.n	800cc70 <HAL_RCC_OscConfig+0x108>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d157      	bne.n	800cc70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e242      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbcc:	d106      	bne.n	800cbdc <HAL_RCC_OscConfig+0x74>
 800cbce:	4b76      	ldr	r3, [pc, #472]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a75      	ldr	r2, [pc, #468]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	e01d      	b.n	800cc18 <HAL_RCC_OscConfig+0xb0>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbe4:	d10c      	bne.n	800cc00 <HAL_RCC_OscConfig+0x98>
 800cbe6:	4b70      	ldr	r3, [pc, #448]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a6f      	ldr	r2, [pc, #444]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	4b6d      	ldr	r3, [pc, #436]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a6c      	ldr	r2, [pc, #432]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cbf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	e00b      	b.n	800cc18 <HAL_RCC_OscConfig+0xb0>
 800cc00:	4b69      	ldr	r3, [pc, #420]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a68      	ldr	r2, [pc, #416]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc0a:	6013      	str	r3, [r2, #0]
 800cc0c:	4b66      	ldr	r3, [pc, #408]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a65      	ldr	r2, [pc, #404]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc20:	f7fd fd22 	bl	800a668 <HAL_GetTick>
 800cc24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc26:	e008      	b.n	800cc3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc28:	f7fd fd1e 	bl	800a668 <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	2b64      	cmp	r3, #100	; 0x64
 800cc34:	d901      	bls.n	800cc3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cc36:	2303      	movs	r3, #3
 800cc38:	e207      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc3a:	4b5b      	ldr	r3, [pc, #364]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0f0      	beq.n	800cc28 <HAL_RCC_OscConfig+0xc0>
 800cc46:	e014      	b.n	800cc72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc48:	f7fd fd0e 	bl	800a668 <HAL_GetTick>
 800cc4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc4e:	e008      	b.n	800cc62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc50:	f7fd fd0a 	bl	800a668 <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b64      	cmp	r3, #100	; 0x64
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e1f3      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc62:	4b51      	ldr	r3, [pc, #324]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1f0      	bne.n	800cc50 <HAL_RCC_OscConfig+0xe8>
 800cc6e:	e000      	b.n	800cc72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d063      	beq.n	800cd46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cc7e:	4b4a      	ldr	r3, [pc, #296]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f003 030c 	and.w	r3, r3, #12
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00b      	beq.n	800cca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc8a:	4b47      	ldr	r3, [pc, #284]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cc92:	2b08      	cmp	r3, #8
 800cc94:	d11c      	bne.n	800ccd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc96:	4b44      	ldr	r3, [pc, #272]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d116      	bne.n	800ccd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cca2:	4b41      	ldr	r3, [pc, #260]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d005      	beq.n	800ccba <HAL_RCC_OscConfig+0x152>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d001      	beq.n	800ccba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e1c7      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccba:	4b3b      	ldr	r3, [pc, #236]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	4937      	ldr	r1, [pc, #220]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccce:	e03a      	b.n	800cd46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d020      	beq.n	800cd1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ccd8:	4b34      	ldr	r3, [pc, #208]	; (800cdac <HAL_RCC_OscConfig+0x244>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccde:	f7fd fcc3 	bl	800a668 <HAL_GetTick>
 800cce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cce4:	e008      	b.n	800ccf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cce6:	f7fd fcbf 	bl	800a668 <HAL_GetTick>
 800ccea:	4602      	mov	r2, r0
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d901      	bls.n	800ccf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e1a8      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccf8:	4b2b      	ldr	r3, [pc, #172]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f003 0302 	and.w	r3, r3, #2
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d0f0      	beq.n	800cce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd04:	4b28      	ldr	r3, [pc, #160]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	4925      	ldr	r1, [pc, #148]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	600b      	str	r3, [r1, #0]
 800cd18:	e015      	b.n	800cd46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd1a:	4b24      	ldr	r3, [pc, #144]	; (800cdac <HAL_RCC_OscConfig+0x244>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd20:	f7fd fca2 	bl	800a668 <HAL_GetTick>
 800cd24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd26:	e008      	b.n	800cd3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd28:	f7fd fc9e 	bl	800a668 <HAL_GetTick>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d901      	bls.n	800cd3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e187      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd3a:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 0302 	and.w	r3, r3, #2
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1f0      	bne.n	800cd28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 0308 	and.w	r3, r3, #8
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d036      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d016      	beq.n	800cd88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd5a:	4b15      	ldr	r3, [pc, #84]	; (800cdb0 <HAL_RCC_OscConfig+0x248>)
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd60:	f7fd fc82 	bl	800a668 <HAL_GetTick>
 800cd64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd66:	e008      	b.n	800cd7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd68:	f7fd fc7e 	bl	800a668 <HAL_GetTick>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d901      	bls.n	800cd7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e167      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <HAL_RCC_OscConfig+0x240>)
 800cd7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd7e:	f003 0302 	and.w	r3, r3, #2
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0f0      	beq.n	800cd68 <HAL_RCC_OscConfig+0x200>
 800cd86:	e01b      	b.n	800cdc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd88:	4b09      	ldr	r3, [pc, #36]	; (800cdb0 <HAL_RCC_OscConfig+0x248>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd8e:	f7fd fc6b 	bl	800a668 <HAL_GetTick>
 800cd92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd94:	e00e      	b.n	800cdb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd96:	f7fd fc67 	bl	800a668 <HAL_GetTick>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d907      	bls.n	800cdb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e150      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
 800cda8:	40023800 	.word	0x40023800
 800cdac:	42470000 	.word	0x42470000
 800cdb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdb4:	4b88      	ldr	r3, [pc, #544]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cdb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdb8:	f003 0302 	and.w	r3, r3, #2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1ea      	bne.n	800cd96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 8097 	beq.w	800cefc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cdd2:	4b81      	ldr	r3, [pc, #516]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10f      	bne.n	800cdfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cdde:	2300      	movs	r3, #0
 800cde0:	60bb      	str	r3, [r7, #8]
 800cde2:	4b7d      	ldr	r3, [pc, #500]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde6:	4a7c      	ldr	r2, [pc, #496]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cde8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdec:	6413      	str	r3, [r2, #64]	; 0x40
 800cdee:	4b7a      	ldr	r3, [pc, #488]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdf6:	60bb      	str	r3, [r7, #8]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cdfe:	4b77      	ldr	r3, [pc, #476]	; (800cfdc <HAL_RCC_OscConfig+0x474>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d118      	bne.n	800ce3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce0a:	4b74      	ldr	r3, [pc, #464]	; (800cfdc <HAL_RCC_OscConfig+0x474>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a73      	ldr	r2, [pc, #460]	; (800cfdc <HAL_RCC_OscConfig+0x474>)
 800ce10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce16:	f7fd fc27 	bl	800a668 <HAL_GetTick>
 800ce1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce1c:	e008      	b.n	800ce30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce1e:	f7fd fc23 	bl	800a668 <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d901      	bls.n	800ce30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e10c      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce30:	4b6a      	ldr	r3, [pc, #424]	; (800cfdc <HAL_RCC_OscConfig+0x474>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d0f0      	beq.n	800ce1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d106      	bne.n	800ce52 <HAL_RCC_OscConfig+0x2ea>
 800ce44:	4b64      	ldr	r3, [pc, #400]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce48:	4a63      	ldr	r2, [pc, #396]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce4a:	f043 0301 	orr.w	r3, r3, #1
 800ce4e:	6713      	str	r3, [r2, #112]	; 0x70
 800ce50:	e01c      	b.n	800ce8c <HAL_RCC_OscConfig+0x324>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	2b05      	cmp	r3, #5
 800ce58:	d10c      	bne.n	800ce74 <HAL_RCC_OscConfig+0x30c>
 800ce5a:	4b5f      	ldr	r3, [pc, #380]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5e:	4a5e      	ldr	r2, [pc, #376]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce60:	f043 0304 	orr.w	r3, r3, #4
 800ce64:	6713      	str	r3, [r2, #112]	; 0x70
 800ce66:	4b5c      	ldr	r3, [pc, #368]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6a:	4a5b      	ldr	r2, [pc, #364]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce6c:	f043 0301 	orr.w	r3, r3, #1
 800ce70:	6713      	str	r3, [r2, #112]	; 0x70
 800ce72:	e00b      	b.n	800ce8c <HAL_RCC_OscConfig+0x324>
 800ce74:	4b58      	ldr	r3, [pc, #352]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce78:	4a57      	ldr	r2, [pc, #348]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	6713      	str	r3, [r2, #112]	; 0x70
 800ce80:	4b55      	ldr	r3, [pc, #340]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce84:	4a54      	ldr	r2, [pc, #336]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ce86:	f023 0304 	bic.w	r3, r3, #4
 800ce8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d015      	beq.n	800cec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce94:	f7fd fbe8 	bl	800a668 <HAL_GetTick>
 800ce98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce9a:	e00a      	b.n	800ceb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce9c:	f7fd fbe4 	bl	800a668 <HAL_GetTick>
 800cea0:	4602      	mov	r2, r0
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e0cb      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ceb2:	4b49      	ldr	r3, [pc, #292]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800ceb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0ee      	beq.n	800ce9c <HAL_RCC_OscConfig+0x334>
 800cebe:	e014      	b.n	800ceea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cec0:	f7fd fbd2 	bl	800a668 <HAL_GetTick>
 800cec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cec6:	e00a      	b.n	800cede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cec8:	f7fd fbce 	bl	800a668 <HAL_GetTick>
 800cecc:	4602      	mov	r2, r0
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d901      	bls.n	800cede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ceda:	2303      	movs	r3, #3
 800cedc:	e0b5      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cede:	4b3e      	ldr	r3, [pc, #248]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1ee      	bne.n	800cec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d105      	bne.n	800cefc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cef0:	4b39      	ldr	r3, [pc, #228]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef4:	4a38      	ldr	r2, [pc, #224]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cefa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 80a1 	beq.w	800d048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf06:	4b34      	ldr	r3, [pc, #208]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f003 030c 	and.w	r3, r3, #12
 800cf0e:	2b08      	cmp	r3, #8
 800cf10:	d05c      	beq.n	800cfcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	699b      	ldr	r3, [r3, #24]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d141      	bne.n	800cf9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf1a:	4b31      	ldr	r3, [pc, #196]	; (800cfe0 <HAL_RCC_OscConfig+0x478>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf20:	f7fd fba2 	bl	800a668 <HAL_GetTick>
 800cf24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf26:	e008      	b.n	800cf3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf28:	f7fd fb9e 	bl	800a668 <HAL_GetTick>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d901      	bls.n	800cf3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e087      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf3a:	4b27      	ldr	r3, [pc, #156]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1f0      	bne.n	800cf28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	69da      	ldr	r2, [r3, #28]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf54:	019b      	lsls	r3, r3, #6
 800cf56:	431a      	orrs	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5c:	085b      	lsrs	r3, r3, #1
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	041b      	lsls	r3, r3, #16
 800cf62:	431a      	orrs	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	061b      	lsls	r3, r3, #24
 800cf6a:	491b      	ldr	r1, [pc, #108]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf70:	4b1b      	ldr	r3, [pc, #108]	; (800cfe0 <HAL_RCC_OscConfig+0x478>)
 800cf72:	2201      	movs	r2, #1
 800cf74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf76:	f7fd fb77 	bl	800a668 <HAL_GetTick>
 800cf7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf7c:	e008      	b.n	800cf90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf7e:	f7fd fb73 	bl	800a668 <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d901      	bls.n	800cf90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e05c      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf90:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0f0      	beq.n	800cf7e <HAL_RCC_OscConfig+0x416>
 800cf9c:	e054      	b.n	800d048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf9e:	4b10      	ldr	r3, [pc, #64]	; (800cfe0 <HAL_RCC_OscConfig+0x478>)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfa4:	f7fd fb60 	bl	800a668 <HAL_GetTick>
 800cfa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfaa:	e008      	b.n	800cfbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfac:	f7fd fb5c 	bl	800a668 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d901      	bls.n	800cfbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e045      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfbe:	4b06      	ldr	r3, [pc, #24]	; (800cfd8 <HAL_RCC_OscConfig+0x470>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1f0      	bne.n	800cfac <HAL_RCC_OscConfig+0x444>
 800cfca:	e03d      	b.n	800d048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d107      	bne.n	800cfe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e038      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
 800cfd8:	40023800 	.word	0x40023800
 800cfdc:	40007000 	.word	0x40007000
 800cfe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cfe4:	4b1b      	ldr	r3, [pc, #108]	; (800d054 <HAL_RCC_OscConfig+0x4ec>)
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d028      	beq.n	800d044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d121      	bne.n	800d044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d11a      	bne.n	800d044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d014:	4013      	ands	r3, r2
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d01a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d111      	bne.n	800d044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d02a:	085b      	lsrs	r3, r3, #1
 800d02c:	3b01      	subs	r3, #1
 800d02e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d030:	429a      	cmp	r2, r3
 800d032:	d107      	bne.n	800d044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d040:	429a      	cmp	r2, r3
 800d042:	d001      	beq.n	800d048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	e000      	b.n	800d04a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	40023800 	.word	0x40023800

0800d058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e0cc      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d06c:	4b68      	ldr	r3, [pc, #416]	; (800d210 <HAL_RCC_ClockConfig+0x1b8>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 0307 	and.w	r3, r3, #7
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	429a      	cmp	r2, r3
 800d078:	d90c      	bls.n	800d094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d07a:	4b65      	ldr	r3, [pc, #404]	; (800d210 <HAL_RCC_ClockConfig+0x1b8>)
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	b2d2      	uxtb	r2, r2
 800d080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d082:	4b63      	ldr	r3, [pc, #396]	; (800d210 <HAL_RCC_ClockConfig+0x1b8>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d001      	beq.n	800d094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	e0b8      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 0302 	and.w	r3, r3, #2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d020      	beq.n	800d0e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d0ac:	4b59      	ldr	r3, [pc, #356]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	4a58      	ldr	r2, [pc, #352]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d0b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 0308 	and.w	r3, r3, #8
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d005      	beq.n	800d0d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d0c4:	4b53      	ldr	r3, [pc, #332]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	4a52      	ldr	r2, [pc, #328]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d0ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d0d0:	4b50      	ldr	r3, [pc, #320]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	494d      	ldr	r1, [pc, #308]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d044      	beq.n	800d178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d107      	bne.n	800d106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d0f6:	4b47      	ldr	r3, [pc, #284]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d119      	bne.n	800d136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e07f      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	d003      	beq.n	800d116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d112:	2b03      	cmp	r3, #3
 800d114:	d107      	bne.n	800d126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d116:	4b3f      	ldr	r3, [pc, #252]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d109      	bne.n	800d136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e06f      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d126:	4b3b      	ldr	r3, [pc, #236]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0302 	and.w	r3, r3, #2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e067      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d136:	4b37      	ldr	r3, [pc, #220]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	f023 0203 	bic.w	r2, r3, #3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	4934      	ldr	r1, [pc, #208]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d144:	4313      	orrs	r3, r2
 800d146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d148:	f7fd fa8e 	bl	800a668 <HAL_GetTick>
 800d14c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d14e:	e00a      	b.n	800d166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d150:	f7fd fa8a 	bl	800a668 <HAL_GetTick>
 800d154:	4602      	mov	r2, r0
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d15e:	4293      	cmp	r3, r2
 800d160:	d901      	bls.n	800d166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e04f      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d166:	4b2b      	ldr	r3, [pc, #172]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f003 020c 	and.w	r2, r3, #12
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	429a      	cmp	r2, r3
 800d176:	d1eb      	bne.n	800d150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d178:	4b25      	ldr	r3, [pc, #148]	; (800d210 <HAL_RCC_ClockConfig+0x1b8>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f003 0307 	and.w	r3, r3, #7
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	429a      	cmp	r2, r3
 800d184:	d20c      	bcs.n	800d1a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d186:	4b22      	ldr	r3, [pc, #136]	; (800d210 <HAL_RCC_ClockConfig+0x1b8>)
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d18e:	4b20      	ldr	r3, [pc, #128]	; (800d210 <HAL_RCC_ClockConfig+0x1b8>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 0307 	and.w	r3, r3, #7
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d001      	beq.n	800d1a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e032      	b.n	800d206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d008      	beq.n	800d1be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d1ac:	4b19      	ldr	r3, [pc, #100]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	4916      	ldr	r1, [pc, #88]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f003 0308 	and.w	r3, r3, #8
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d1ca:	4b12      	ldr	r3, [pc, #72]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	490e      	ldr	r1, [pc, #56]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d1de:	f000 f821 	bl	800d224 <HAL_RCC_GetSysClockFreq>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <HAL_RCC_ClockConfig+0x1bc>)
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	091b      	lsrs	r3, r3, #4
 800d1ea:	f003 030f 	and.w	r3, r3, #15
 800d1ee:	490a      	ldr	r1, [pc, #40]	; (800d218 <HAL_RCC_ClockConfig+0x1c0>)
 800d1f0:	5ccb      	ldrb	r3, [r1, r3]
 800d1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1f6:	4a09      	ldr	r2, [pc, #36]	; (800d21c <HAL_RCC_ClockConfig+0x1c4>)
 800d1f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <HAL_RCC_ClockConfig+0x1c8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fc f966 	bl	80094d0 <HAL_InitTick>

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	40023c00 	.word	0x40023c00
 800d214:	40023800 	.word	0x40023800
 800d218:	080189b8 	.word	0x080189b8
 800d21c:	20000030 	.word	0x20000030
 800d220:	20000034 	.word	0x20000034

0800d224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d228:	b094      	sub	sp, #80	; 0x50
 800d22a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d22c:	2300      	movs	r3, #0
 800d22e:	647b      	str	r3, [r7, #68]	; 0x44
 800d230:	2300      	movs	r3, #0
 800d232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d234:	2300      	movs	r3, #0
 800d236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d23c:	4b79      	ldr	r3, [pc, #484]	; (800d424 <HAL_RCC_GetSysClockFreq+0x200>)
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	f003 030c 	and.w	r3, r3, #12
 800d244:	2b08      	cmp	r3, #8
 800d246:	d00d      	beq.n	800d264 <HAL_RCC_GetSysClockFreq+0x40>
 800d248:	2b08      	cmp	r3, #8
 800d24a:	f200 80e1 	bhi.w	800d410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <HAL_RCC_GetSysClockFreq+0x34>
 800d252:	2b04      	cmp	r3, #4
 800d254:	d003      	beq.n	800d25e <HAL_RCC_GetSysClockFreq+0x3a>
 800d256:	e0db      	b.n	800d410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d258:	4b73      	ldr	r3, [pc, #460]	; (800d428 <HAL_RCC_GetSysClockFreq+0x204>)
 800d25a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800d25c:	e0db      	b.n	800d416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d25e:	4b72      	ldr	r3, [pc, #456]	; (800d428 <HAL_RCC_GetSysClockFreq+0x204>)
 800d260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d262:	e0d8      	b.n	800d416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d264:	4b6f      	ldr	r3, [pc, #444]	; (800d424 <HAL_RCC_GetSysClockFreq+0x200>)
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d26c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d26e:	4b6d      	ldr	r3, [pc, #436]	; (800d424 <HAL_RCC_GetSysClockFreq+0x200>)
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d063      	beq.n	800d342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d27a:	4b6a      	ldr	r3, [pc, #424]	; (800d424 <HAL_RCC_GetSysClockFreq+0x200>)
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	099b      	lsrs	r3, r3, #6
 800d280:	2200      	movs	r2, #0
 800d282:	63bb      	str	r3, [r7, #56]	; 0x38
 800d284:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28c:	633b      	str	r3, [r7, #48]	; 0x30
 800d28e:	2300      	movs	r3, #0
 800d290:	637b      	str	r3, [r7, #52]	; 0x34
 800d292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d296:	4622      	mov	r2, r4
 800d298:	462b      	mov	r3, r5
 800d29a:	f04f 0000 	mov.w	r0, #0
 800d29e:	f04f 0100 	mov.w	r1, #0
 800d2a2:	0159      	lsls	r1, r3, #5
 800d2a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d2a8:	0150      	lsls	r0, r2, #5
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	1a51      	subs	r1, r2, r1
 800d2b2:	6139      	str	r1, [r7, #16]
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	eb63 0301 	sbc.w	r3, r3, r1
 800d2ba:	617b      	str	r3, [r7, #20]
 800d2bc:	f04f 0200 	mov.w	r2, #0
 800d2c0:	f04f 0300 	mov.w	r3, #0
 800d2c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2c8:	4659      	mov	r1, fp
 800d2ca:	018b      	lsls	r3, r1, #6
 800d2cc:	4651      	mov	r1, sl
 800d2ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d2d2:	4651      	mov	r1, sl
 800d2d4:	018a      	lsls	r2, r1, #6
 800d2d6:	4651      	mov	r1, sl
 800d2d8:	ebb2 0801 	subs.w	r8, r2, r1
 800d2dc:	4659      	mov	r1, fp
 800d2de:	eb63 0901 	sbc.w	r9, r3, r1
 800d2e2:	f04f 0200 	mov.w	r2, #0
 800d2e6:	f04f 0300 	mov.w	r3, #0
 800d2ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d2ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d2f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d2f6:	4690      	mov	r8, r2
 800d2f8:	4699      	mov	r9, r3
 800d2fa:	4623      	mov	r3, r4
 800d2fc:	eb18 0303 	adds.w	r3, r8, r3
 800d300:	60bb      	str	r3, [r7, #8]
 800d302:	462b      	mov	r3, r5
 800d304:	eb49 0303 	adc.w	r3, r9, r3
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	f04f 0200 	mov.w	r2, #0
 800d30e:	f04f 0300 	mov.w	r3, #0
 800d312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d316:	4629      	mov	r1, r5
 800d318:	028b      	lsls	r3, r1, #10
 800d31a:	4621      	mov	r1, r4
 800d31c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d320:	4621      	mov	r1, r4
 800d322:	028a      	lsls	r2, r1, #10
 800d324:	4610      	mov	r0, r2
 800d326:	4619      	mov	r1, r3
 800d328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d32a:	2200      	movs	r2, #0
 800d32c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d32e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d334:	f7f3 fca8 	bl	8000c88 <__aeabi_uldivmod>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4613      	mov	r3, r2
 800d33e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d340:	e058      	b.n	800d3f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d342:	4b38      	ldr	r3, [pc, #224]	; (800d424 <HAL_RCC_GetSysClockFreq+0x200>)
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	099b      	lsrs	r3, r3, #6
 800d348:	2200      	movs	r2, #0
 800d34a:	4618      	mov	r0, r3
 800d34c:	4611      	mov	r1, r2
 800d34e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d352:	623b      	str	r3, [r7, #32]
 800d354:	2300      	movs	r3, #0
 800d356:	627b      	str	r3, [r7, #36]	; 0x24
 800d358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d35c:	4642      	mov	r2, r8
 800d35e:	464b      	mov	r3, r9
 800d360:	f04f 0000 	mov.w	r0, #0
 800d364:	f04f 0100 	mov.w	r1, #0
 800d368:	0159      	lsls	r1, r3, #5
 800d36a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d36e:	0150      	lsls	r0, r2, #5
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4641      	mov	r1, r8
 800d376:	ebb2 0a01 	subs.w	sl, r2, r1
 800d37a:	4649      	mov	r1, r9
 800d37c:	eb63 0b01 	sbc.w	fp, r3, r1
 800d380:	f04f 0200 	mov.w	r2, #0
 800d384:	f04f 0300 	mov.w	r3, #0
 800d388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d38c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d394:	ebb2 040a 	subs.w	r4, r2, sl
 800d398:	eb63 050b 	sbc.w	r5, r3, fp
 800d39c:	f04f 0200 	mov.w	r2, #0
 800d3a0:	f04f 0300 	mov.w	r3, #0
 800d3a4:	00eb      	lsls	r3, r5, #3
 800d3a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3aa:	00e2      	lsls	r2, r4, #3
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	461d      	mov	r5, r3
 800d3b0:	4643      	mov	r3, r8
 800d3b2:	18e3      	adds	r3, r4, r3
 800d3b4:	603b      	str	r3, [r7, #0]
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	eb45 0303 	adc.w	r3, r5, r3
 800d3bc:	607b      	str	r3, [r7, #4]
 800d3be:	f04f 0200 	mov.w	r2, #0
 800d3c2:	f04f 0300 	mov.w	r3, #0
 800d3c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	028b      	lsls	r3, r1, #10
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	028a      	lsls	r2, r1, #10
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3de:	2200      	movs	r2, #0
 800d3e0:	61bb      	str	r3, [r7, #24]
 800d3e2:	61fa      	str	r2, [r7, #28]
 800d3e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3e8:	f7f3 fc4e 	bl	8000c88 <__aeabi_uldivmod>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	; (800d424 <HAL_RCC_GetSysClockFreq+0x200>)
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	0c1b      	lsrs	r3, r3, #16
 800d3fa:	f003 0303 	and.w	r3, r3, #3
 800d3fe:	3301      	adds	r3, #1
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800d404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d408:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d40e:	e002      	b.n	800d416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <HAL_RCC_GetSysClockFreq+0x204>)
 800d412:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d414:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3750      	adds	r7, #80	; 0x50
 800d41c:	46bd      	mov	sp, r7
 800d41e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d422:	bf00      	nop
 800d424:	40023800 	.word	0x40023800
 800d428:	00f42400 	.word	0x00f42400

0800d42c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d42c:	b480      	push	{r7}
 800d42e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d430:	4b03      	ldr	r3, [pc, #12]	; (800d440 <HAL_RCC_GetHCLKFreq+0x14>)
 800d432:	681b      	ldr	r3, [r3, #0]
}
 800d434:	4618      	mov	r0, r3
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	20000030 	.word	0x20000030

0800d444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d448:	f7ff fff0 	bl	800d42c <HAL_RCC_GetHCLKFreq>
 800d44c:	4602      	mov	r2, r0
 800d44e:	4b05      	ldr	r3, [pc, #20]	; (800d464 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	0a9b      	lsrs	r3, r3, #10
 800d454:	f003 0307 	and.w	r3, r3, #7
 800d458:	4903      	ldr	r1, [pc, #12]	; (800d468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d45a:	5ccb      	ldrb	r3, [r1, r3]
 800d45c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d460:	4618      	mov	r0, r3
 800d462:	bd80      	pop	{r7, pc}
 800d464:	40023800 	.word	0x40023800
 800d468:	080189c8 	.word	0x080189c8

0800d46c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d470:	f7ff ffdc 	bl	800d42c <HAL_RCC_GetHCLKFreq>
 800d474:	4602      	mov	r2, r0
 800d476:	4b05      	ldr	r3, [pc, #20]	; (800d48c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	0b5b      	lsrs	r3, r3, #13
 800d47c:	f003 0307 	and.w	r3, r3, #7
 800d480:	4903      	ldr	r1, [pc, #12]	; (800d490 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d482:	5ccb      	ldrb	r3, [r1, r3]
 800d484:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d488:	4618      	mov	r0, r3
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	40023800 	.word	0x40023800
 800d490:	080189c8 	.word	0x080189c8

0800d494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	220f      	movs	r2, #15
 800d4a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d4a4:	4b12      	ldr	r3, [pc, #72]	; (800d4f0 <HAL_RCC_GetClockConfig+0x5c>)
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	f003 0203 	and.w	r2, r3, #3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d4b0:	4b0f      	ldr	r3, [pc, #60]	; (800d4f0 <HAL_RCC_GetClockConfig+0x5c>)
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d4bc:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <HAL_RCC_GetClockConfig+0x5c>)
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d4c8:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <HAL_RCC_GetClockConfig+0x5c>)
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	08db      	lsrs	r3, r3, #3
 800d4ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d4d6:	4b07      	ldr	r3, [pc, #28]	; (800d4f4 <HAL_RCC_GetClockConfig+0x60>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f003 0207 	and.w	r2, r3, #7
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	601a      	str	r2, [r3, #0]
}
 800d4e2:	bf00      	nop
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	40023800 	.word	0x40023800
 800d4f4:	40023c00 	.word	0x40023c00

0800d4f8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e01c      	b.n	800d544 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	795b      	ldrb	r3, [r3, #5]
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d105      	bne.n	800d520 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7fb ff8a 	bl	8009434 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2202      	movs	r2, #2
 800d524:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f042 0204 	orr.w	r2, r2, #4
 800d534:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e041      	b.n	800d5e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7fc fcc0 	bl	8009ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3304      	adds	r3, #4
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f000 fba8 	bl	800dce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
	...

0800d5ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d001      	beq.n	800d604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	e04e      	b.n	800d6a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2202      	movs	r2, #2
 800d608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f042 0201 	orr.w	r2, r2, #1
 800d61a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a23      	ldr	r2, [pc, #140]	; (800d6b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d022      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d62e:	d01d      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a1f      	ldr	r2, [pc, #124]	; (800d6b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d018      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a1e      	ldr	r2, [pc, #120]	; (800d6b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d013      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a1c      	ldr	r2, [pc, #112]	; (800d6bc <HAL_TIM_Base_Start_IT+0xd0>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d00e      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a1b      	ldr	r2, [pc, #108]	; (800d6c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d009      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a19      	ldr	r2, [pc, #100]	; (800d6c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d004      	beq.n	800d66c <HAL_TIM_Base_Start_IT+0x80>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a18      	ldr	r2, [pc, #96]	; (800d6c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d111      	bne.n	800d690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	f003 0307 	and.w	r3, r3, #7
 800d676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b06      	cmp	r3, #6
 800d67c:	d010      	beq.n	800d6a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f042 0201 	orr.w	r2, r2, #1
 800d68c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d68e:	e007      	b.n	800d6a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f042 0201 	orr.w	r2, r2, #1
 800d69e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	40010000 	.word	0x40010000
 800d6b4:	40000400 	.word	0x40000400
 800d6b8:	40000800 	.word	0x40000800
 800d6bc:	40000c00 	.word	0x40000c00
 800d6c0:	40010400 	.word	0x40010400
 800d6c4:	40014000 	.word	0x40014000
 800d6c8:	40001800 	.word	0x40001800

0800d6cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e041      	b.n	800d762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d106      	bne.n	800d6f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fc fcce 	bl	800a094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3304      	adds	r3, #4
 800d708:	4619      	mov	r1, r3
 800d70a:	4610      	mov	r0, r2
 800d70c:	f000 fae8 	bl	800dce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b082      	sub	sp, #8
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	f003 0302 	and.w	r3, r3, #2
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d122      	bne.n	800d7c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	f003 0302 	and.w	r3, r3, #2
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d11b      	bne.n	800d7c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f06f 0202 	mvn.w	r2, #2
 800d796:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	f003 0303 	and.w	r3, r3, #3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d003      	beq.n	800d7b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fa78 	bl	800dca2 <HAL_TIM_IC_CaptureCallback>
 800d7b2:	e005      	b.n	800d7c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fa6a 	bl	800dc8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 fa7b 	bl	800dcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	f003 0304 	and.w	r3, r3, #4
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d122      	bne.n	800d81a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	f003 0304 	and.w	r3, r3, #4
 800d7de:	2b04      	cmp	r3, #4
 800d7e0:	d11b      	bne.n	800d81a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f06f 0204 	mvn.w	r2, #4
 800d7ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d003      	beq.n	800d808 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 fa4e 	bl	800dca2 <HAL_TIM_IC_CaptureCallback>
 800d806:	e005      	b.n	800d814 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fa40 	bl	800dc8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa51 	bl	800dcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	f003 0308 	and.w	r3, r3, #8
 800d824:	2b08      	cmp	r3, #8
 800d826:	d122      	bne.n	800d86e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	f003 0308 	and.w	r3, r3, #8
 800d832:	2b08      	cmp	r3, #8
 800d834:	d11b      	bne.n	800d86e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f06f 0208 	mvn.w	r2, #8
 800d83e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2204      	movs	r2, #4
 800d844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	69db      	ldr	r3, [r3, #28]
 800d84c:	f003 0303 	and.w	r3, r3, #3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fa24 	bl	800dca2 <HAL_TIM_IC_CaptureCallback>
 800d85a:	e005      	b.n	800d868 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fa16 	bl	800dc8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fa27 	bl	800dcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	f003 0310 	and.w	r3, r3, #16
 800d878:	2b10      	cmp	r3, #16
 800d87a:	d122      	bne.n	800d8c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f003 0310 	and.w	r3, r3, #16
 800d886:	2b10      	cmp	r3, #16
 800d888:	d11b      	bne.n	800d8c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f06f 0210 	mvn.w	r2, #16
 800d892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2208      	movs	r2, #8
 800d898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	69db      	ldr	r3, [r3, #28]
 800d8a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f9fa 	bl	800dca2 <HAL_TIM_IC_CaptureCallback>
 800d8ae:	e005      	b.n	800d8bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 f9ec 	bl	800dc8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f9fd 	bl	800dcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d10e      	bne.n	800d8ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d107      	bne.n	800d8ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f06f 0201 	mvn.w	r2, #1
 800d8e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7fb fd77 	bl	80093dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	691b      	ldr	r3, [r3, #16]
 800d8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f8:	2b80      	cmp	r3, #128	; 0x80
 800d8fa:	d10e      	bne.n	800d91a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d906:	2b80      	cmp	r3, #128	; 0x80
 800d908:	d107      	bne.n	800d91a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fda5 	bl	800e464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d924:	2b40      	cmp	r3, #64	; 0x40
 800d926:	d10e      	bne.n	800d946 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d932:	2b40      	cmp	r3, #64	; 0x40
 800d934:	d107      	bne.n	800d946 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f9c2 	bl	800dcca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	f003 0320 	and.w	r3, r3, #32
 800d950:	2b20      	cmp	r3, #32
 800d952:	d10e      	bne.n	800d972 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	f003 0320 	and.w	r3, r3, #32
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d107      	bne.n	800d972 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f06f 0220 	mvn.w	r2, #32
 800d96a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fd6f 	bl	800e450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d972:	bf00      	nop
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
	...

0800d97c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d988:	2300      	movs	r3, #0
 800d98a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d992:	2b01      	cmp	r3, #1
 800d994:	d101      	bne.n	800d99a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d996:	2302      	movs	r3, #2
 800d998:	e0ae      	b.n	800daf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b0c      	cmp	r3, #12
 800d9a6:	f200 809f 	bhi.w	800dae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d9aa:	a201      	add	r2, pc, #4	; (adr r2, 800d9b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800d9e5 	.word	0x0800d9e5
 800d9b4:	0800dae9 	.word	0x0800dae9
 800d9b8:	0800dae9 	.word	0x0800dae9
 800d9bc:	0800dae9 	.word	0x0800dae9
 800d9c0:	0800da25 	.word	0x0800da25
 800d9c4:	0800dae9 	.word	0x0800dae9
 800d9c8:	0800dae9 	.word	0x0800dae9
 800d9cc:	0800dae9 	.word	0x0800dae9
 800d9d0:	0800da67 	.word	0x0800da67
 800d9d4:	0800dae9 	.word	0x0800dae9
 800d9d8:	0800dae9 	.word	0x0800dae9
 800d9dc:	0800dae9 	.word	0x0800dae9
 800d9e0:	0800daa7 	.word	0x0800daa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68b9      	ldr	r1, [r7, #8]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 fa18 	bl	800de20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	699a      	ldr	r2, [r3, #24]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f042 0208 	orr.w	r2, r2, #8
 800d9fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	699a      	ldr	r2, [r3, #24]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f022 0204 	bic.w	r2, r2, #4
 800da0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6999      	ldr	r1, [r3, #24]
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	691a      	ldr	r2, [r3, #16]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	430a      	orrs	r2, r1
 800da20:	619a      	str	r2, [r3, #24]
      break;
 800da22:	e064      	b.n	800daee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68b9      	ldr	r1, [r7, #8]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fa68 	bl	800df00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	699a      	ldr	r2, [r3, #24]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	699a      	ldr	r2, [r3, #24]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	6999      	ldr	r1, [r3, #24]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	021a      	lsls	r2, r3, #8
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	430a      	orrs	r2, r1
 800da62:	619a      	str	r2, [r3, #24]
      break;
 800da64:	e043      	b.n	800daee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68b9      	ldr	r1, [r7, #8]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fabd 	bl	800dfec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69da      	ldr	r2, [r3, #28]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f042 0208 	orr.w	r2, r2, #8
 800da80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	69da      	ldr	r2, [r3, #28]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f022 0204 	bic.w	r2, r2, #4
 800da90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	69d9      	ldr	r1, [r3, #28]
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	691a      	ldr	r2, [r3, #16]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	430a      	orrs	r2, r1
 800daa2:	61da      	str	r2, [r3, #28]
      break;
 800daa4:	e023      	b.n	800daee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68b9      	ldr	r1, [r7, #8]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 fb11 	bl	800e0d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	69da      	ldr	r2, [r3, #28]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	69da      	ldr	r2, [r3, #28]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	69d9      	ldr	r1, [r3, #28]
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	021a      	lsls	r2, r3, #8
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	430a      	orrs	r2, r1
 800dae4:	61da      	str	r2, [r3, #28]
      break;
 800dae6:	e002      	b.n	800daee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	75fb      	strb	r3, [r7, #23]
      break;
 800daec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800daf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db14:	2b01      	cmp	r3, #1
 800db16:	d101      	bne.n	800db1c <HAL_TIM_ConfigClockSource+0x1c>
 800db18:	2302      	movs	r3, #2
 800db1a:	e0b4      	b.n	800dc86 <HAL_TIM_ConfigClockSource+0x186>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2202      	movs	r2, #2
 800db28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800db3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db54:	d03e      	beq.n	800dbd4 <HAL_TIM_ConfigClockSource+0xd4>
 800db56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db5a:	f200 8087 	bhi.w	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db62:	f000 8086 	beq.w	800dc72 <HAL_TIM_ConfigClockSource+0x172>
 800db66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db6a:	d87f      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db6c:	2b70      	cmp	r3, #112	; 0x70
 800db6e:	d01a      	beq.n	800dba6 <HAL_TIM_ConfigClockSource+0xa6>
 800db70:	2b70      	cmp	r3, #112	; 0x70
 800db72:	d87b      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db74:	2b60      	cmp	r3, #96	; 0x60
 800db76:	d050      	beq.n	800dc1a <HAL_TIM_ConfigClockSource+0x11a>
 800db78:	2b60      	cmp	r3, #96	; 0x60
 800db7a:	d877      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db7c:	2b50      	cmp	r3, #80	; 0x50
 800db7e:	d03c      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0xfa>
 800db80:	2b50      	cmp	r3, #80	; 0x50
 800db82:	d873      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db84:	2b40      	cmp	r3, #64	; 0x40
 800db86:	d058      	beq.n	800dc3a <HAL_TIM_ConfigClockSource+0x13a>
 800db88:	2b40      	cmp	r3, #64	; 0x40
 800db8a:	d86f      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db8c:	2b30      	cmp	r3, #48	; 0x30
 800db8e:	d064      	beq.n	800dc5a <HAL_TIM_ConfigClockSource+0x15a>
 800db90:	2b30      	cmp	r3, #48	; 0x30
 800db92:	d86b      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db94:	2b20      	cmp	r3, #32
 800db96:	d060      	beq.n	800dc5a <HAL_TIM_ConfigClockSource+0x15a>
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d867      	bhi.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d05c      	beq.n	800dc5a <HAL_TIM_ConfigClockSource+0x15a>
 800dba0:	2b10      	cmp	r3, #16
 800dba2:	d05a      	beq.n	800dc5a <HAL_TIM_ConfigClockSource+0x15a>
 800dba4:	e062      	b.n	800dc6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6818      	ldr	r0, [r3, #0]
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	6899      	ldr	r1, [r3, #8]
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	f000 fb5d 	bl	800e274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dbc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	609a      	str	r2, [r3, #8]
      break;
 800dbd2:	e04f      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	6899      	ldr	r1, [r3, #8]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	685a      	ldr	r2, [r3, #4]
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	f000 fb46 	bl	800e274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	689a      	ldr	r2, [r3, #8]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dbf6:	609a      	str	r2, [r3, #8]
      break;
 800dbf8:	e03c      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	6859      	ldr	r1, [r3, #4]
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	461a      	mov	r2, r3
 800dc08:	f000 faba 	bl	800e180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2150      	movs	r1, #80	; 0x50
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 fb13 	bl	800e23e <TIM_ITRx_SetConfig>
      break;
 800dc18:	e02c      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6818      	ldr	r0, [r3, #0]
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	6859      	ldr	r1, [r3, #4]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	461a      	mov	r2, r3
 800dc28:	f000 fad9 	bl	800e1de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2160      	movs	r1, #96	; 0x60
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fb03 	bl	800e23e <TIM_ITRx_SetConfig>
      break;
 800dc38:	e01c      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6818      	ldr	r0, [r3, #0]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	6859      	ldr	r1, [r3, #4]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	461a      	mov	r2, r3
 800dc48:	f000 fa9a 	bl	800e180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2140      	movs	r1, #64	; 0x40
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 faf3 	bl	800e23e <TIM_ITRx_SetConfig>
      break;
 800dc58:	e00c      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4619      	mov	r1, r3
 800dc64:	4610      	mov	r0, r2
 800dc66:	f000 faea 	bl	800e23e <TIM_ITRx_SetConfig>
      break;
 800dc6a:	e003      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc70:	e000      	b.n	800dc74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dc72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc96:	bf00      	nop
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b083      	sub	sp, #12
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcbe:	bf00      	nop
 800dcc0:	370c      	adds	r7, #12
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcca:	b480      	push	{r7}
 800dccc:	b083      	sub	sp, #12
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dcd2:	bf00      	nop
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
	...

0800dce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a40      	ldr	r2, [pc, #256]	; (800ddf4 <TIM_Base_SetConfig+0x114>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d013      	beq.n	800dd20 <TIM_Base_SetConfig+0x40>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcfe:	d00f      	beq.n	800dd20 <TIM_Base_SetConfig+0x40>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4a3d      	ldr	r2, [pc, #244]	; (800ddf8 <TIM_Base_SetConfig+0x118>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d00b      	beq.n	800dd20 <TIM_Base_SetConfig+0x40>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a3c      	ldr	r2, [pc, #240]	; (800ddfc <TIM_Base_SetConfig+0x11c>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d007      	beq.n	800dd20 <TIM_Base_SetConfig+0x40>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a3b      	ldr	r2, [pc, #236]	; (800de00 <TIM_Base_SetConfig+0x120>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d003      	beq.n	800dd20 <TIM_Base_SetConfig+0x40>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a3a      	ldr	r2, [pc, #232]	; (800de04 <TIM_Base_SetConfig+0x124>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d108      	bne.n	800dd32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a2f      	ldr	r2, [pc, #188]	; (800ddf4 <TIM_Base_SetConfig+0x114>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d02b      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd40:	d027      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a2c      	ldr	r2, [pc, #176]	; (800ddf8 <TIM_Base_SetConfig+0x118>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d023      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a2b      	ldr	r2, [pc, #172]	; (800ddfc <TIM_Base_SetConfig+0x11c>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d01f      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a2a      	ldr	r2, [pc, #168]	; (800de00 <TIM_Base_SetConfig+0x120>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d01b      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a29      	ldr	r2, [pc, #164]	; (800de04 <TIM_Base_SetConfig+0x124>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d017      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a28      	ldr	r2, [pc, #160]	; (800de08 <TIM_Base_SetConfig+0x128>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d013      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a27      	ldr	r2, [pc, #156]	; (800de0c <TIM_Base_SetConfig+0x12c>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d00f      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a26      	ldr	r2, [pc, #152]	; (800de10 <TIM_Base_SetConfig+0x130>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d00b      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a25      	ldr	r2, [pc, #148]	; (800de14 <TIM_Base_SetConfig+0x134>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d007      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a24      	ldr	r2, [pc, #144]	; (800de18 <TIM_Base_SetConfig+0x138>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d003      	beq.n	800dd92 <TIM_Base_SetConfig+0xb2>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4a23      	ldr	r2, [pc, #140]	; (800de1c <TIM_Base_SetConfig+0x13c>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d108      	bne.n	800dda4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	695b      	ldr	r3, [r3, #20]
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	689a      	ldr	r2, [r3, #8]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4a0a      	ldr	r2, [pc, #40]	; (800ddf4 <TIM_Base_SetConfig+0x114>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d003      	beq.n	800ddd8 <TIM_Base_SetConfig+0xf8>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a0c      	ldr	r2, [pc, #48]	; (800de04 <TIM_Base_SetConfig+0x124>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d103      	bne.n	800dde0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	691a      	ldr	r2, [r3, #16]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	615a      	str	r2, [r3, #20]
}
 800dde6:	bf00      	nop
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	40010000 	.word	0x40010000
 800ddf8:	40000400 	.word	0x40000400
 800ddfc:	40000800 	.word	0x40000800
 800de00:	40000c00 	.word	0x40000c00
 800de04:	40010400 	.word	0x40010400
 800de08:	40014000 	.word	0x40014000
 800de0c:	40014400 	.word	0x40014400
 800de10:	40014800 	.word	0x40014800
 800de14:	40001800 	.word	0x40001800
 800de18:	40001c00 	.word	0x40001c00
 800de1c:	40002000 	.word	0x40002000

0800de20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	f023 0201 	bic.w	r2, r3, #1
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0303 	bic.w	r3, r3, #3
 800de56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	4313      	orrs	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f023 0302 	bic.w	r3, r3, #2
 800de68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	4313      	orrs	r3, r2
 800de72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4a20      	ldr	r2, [pc, #128]	; (800def8 <TIM_OC1_SetConfig+0xd8>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d003      	beq.n	800de84 <TIM_OC1_SetConfig+0x64>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a1f      	ldr	r2, [pc, #124]	; (800defc <TIM_OC1_SetConfig+0xdc>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d10c      	bne.n	800de9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	f023 0308 	bic.w	r3, r3, #8
 800de8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	4313      	orrs	r3, r2
 800de94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f023 0304 	bic.w	r3, r3, #4
 800de9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4a15      	ldr	r2, [pc, #84]	; (800def8 <TIM_OC1_SetConfig+0xd8>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d003      	beq.n	800deae <TIM_OC1_SetConfig+0x8e>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a14      	ldr	r2, [pc, #80]	; (800defc <TIM_OC1_SetConfig+0xdc>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d111      	bne.n	800ded2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800debc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	693a      	ldr	r2, [r7, #16]
 800dec4:	4313      	orrs	r3, r2
 800dec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	4313      	orrs	r3, r2
 800ded0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	697a      	ldr	r2, [r7, #20]
 800deea:	621a      	str	r2, [r3, #32]
}
 800deec:	bf00      	nop
 800deee:	371c      	adds	r7, #28
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	40010000 	.word	0x40010000
 800defc:	40010400 	.word	0x40010400

0800df00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df00:	b480      	push	{r7}
 800df02:	b087      	sub	sp, #28
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a1b      	ldr	r3, [r3, #32]
 800df0e:	f023 0210 	bic.w	r2, r3, #16
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a1b      	ldr	r3, [r3, #32]
 800df1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	699b      	ldr	r3, [r3, #24]
 800df26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	021b      	lsls	r3, r3, #8
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	4313      	orrs	r3, r2
 800df42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	f023 0320 	bic.w	r3, r3, #32
 800df4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	011b      	lsls	r3, r3, #4
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	4313      	orrs	r3, r2
 800df56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	4a22      	ldr	r2, [pc, #136]	; (800dfe4 <TIM_OC2_SetConfig+0xe4>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d003      	beq.n	800df68 <TIM_OC2_SetConfig+0x68>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a21      	ldr	r2, [pc, #132]	; (800dfe8 <TIM_OC2_SetConfig+0xe8>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d10d      	bne.n	800df84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	011b      	lsls	r3, r3, #4
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	4313      	orrs	r3, r2
 800df7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a17      	ldr	r2, [pc, #92]	; (800dfe4 <TIM_OC2_SetConfig+0xe4>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d003      	beq.n	800df94 <TIM_OC2_SetConfig+0x94>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a16      	ldr	r2, [pc, #88]	; (800dfe8 <TIM_OC2_SetConfig+0xe8>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d113      	bne.n	800dfbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	695b      	ldr	r3, [r3, #20]
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	621a      	str	r2, [r3, #32]
}
 800dfd6:	bf00      	nop
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	40010000 	.word	0x40010000
 800dfe8:	40010400 	.word	0x40010400

0800dfec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b087      	sub	sp, #28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	69db      	ldr	r3, [r3, #28]
 800e012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f023 0303 	bic.w	r3, r3, #3
 800e022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	021b      	lsls	r3, r3, #8
 800e03c:	697a      	ldr	r2, [r7, #20]
 800e03e:	4313      	orrs	r3, r2
 800e040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a21      	ldr	r2, [pc, #132]	; (800e0cc <TIM_OC3_SetConfig+0xe0>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d003      	beq.n	800e052 <TIM_OC3_SetConfig+0x66>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a20      	ldr	r2, [pc, #128]	; (800e0d0 <TIM_OC3_SetConfig+0xe4>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d10d      	bne.n	800e06e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	021b      	lsls	r3, r3, #8
 800e060:	697a      	ldr	r2, [r7, #20]
 800e062:	4313      	orrs	r3, r2
 800e064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e06c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a16      	ldr	r2, [pc, #88]	; (800e0cc <TIM_OC3_SetConfig+0xe0>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d003      	beq.n	800e07e <TIM_OC3_SetConfig+0x92>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a15      	ldr	r2, [pc, #84]	; (800e0d0 <TIM_OC3_SetConfig+0xe4>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d113      	bne.n	800e0a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	011b      	lsls	r3, r3, #4
 800e094:	693a      	ldr	r2, [r7, #16]
 800e096:	4313      	orrs	r3, r2
 800e098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	011b      	lsls	r3, r3, #4
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	685a      	ldr	r2, [r3, #4]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	621a      	str	r2, [r3, #32]
}
 800e0c0:	bf00      	nop
 800e0c2:	371c      	adds	r7, #28
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	40010000 	.word	0x40010000
 800e0d0:	40010400 	.word	0x40010400

0800e0d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a1b      	ldr	r3, [r3, #32]
 800e0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	021b      	lsls	r3, r3, #8
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	4313      	orrs	r3, r2
 800e116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	031b      	lsls	r3, r3, #12
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	4313      	orrs	r3, r2
 800e12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a12      	ldr	r2, [pc, #72]	; (800e178 <TIM_OC4_SetConfig+0xa4>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d003      	beq.n	800e13c <TIM_OC4_SetConfig+0x68>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a11      	ldr	r2, [pc, #68]	; (800e17c <TIM_OC4_SetConfig+0xa8>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d109      	bne.n	800e150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	019b      	lsls	r3, r3, #6
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	621a      	str	r2, [r3, #32]
}
 800e16a:	bf00      	nop
 800e16c:	371c      	adds	r7, #28
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	40010000 	.word	0x40010000
 800e17c:	40010400 	.word	0x40010400

0800e180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e180:	b480      	push	{r7}
 800e182:	b087      	sub	sp, #28
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6a1b      	ldr	r3, [r3, #32]
 800e190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	f023 0201 	bic.w	r2, r3, #1
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	699b      	ldr	r3, [r3, #24]
 800e1a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e1aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	011b      	lsls	r3, r3, #4
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	f023 030a 	bic.w	r3, r3, #10
 800e1bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	693a      	ldr	r2, [r7, #16]
 800e1ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	697a      	ldr	r2, [r7, #20]
 800e1d0:	621a      	str	r2, [r3, #32]
}
 800e1d2:	bf00      	nop
 800e1d4:	371c      	adds	r7, #28
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1de:	b480      	push	{r7}
 800e1e0:	b087      	sub	sp, #28
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	60f8      	str	r0, [r7, #12]
 800e1e6:	60b9      	str	r1, [r7, #8]
 800e1e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6a1b      	ldr	r3, [r3, #32]
 800e1ee:	f023 0210 	bic.w	r2, r3, #16
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	031b      	lsls	r3, r3, #12
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	4313      	orrs	r3, r2
 800e212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e21a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	011b      	lsls	r3, r3, #4
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	4313      	orrs	r3, r2
 800e224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	697a      	ldr	r2, [r7, #20]
 800e22a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	621a      	str	r2, [r3, #32]
}
 800e232:	bf00      	nop
 800e234:	371c      	adds	r7, #28
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e23e:	b480      	push	{r7}
 800e240:	b085      	sub	sp, #20
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	f043 0307 	orr.w	r3, r3, #7
 800e260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	609a      	str	r2, [r3, #8]
}
 800e268:	bf00      	nop
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e274:	b480      	push	{r7}
 800e276:	b087      	sub	sp, #28
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
 800e280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e28e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	021a      	lsls	r2, r3, #8
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	431a      	orrs	r2, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	697a      	ldr	r2, [r7, #20]
 800e2a6:	609a      	str	r2, [r3, #8]
}
 800e2a8:	bf00      	nop
 800e2aa:	371c      	adds	r7, #28
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d101      	bne.n	800e2cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	e05a      	b.n	800e382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a21      	ldr	r2, [pc, #132]	; (800e390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d022      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e318:	d01d      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a1d      	ldr	r2, [pc, #116]	; (800e394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d018      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a1b      	ldr	r2, [pc, #108]	; (800e398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d013      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a1a      	ldr	r2, [pc, #104]	; (800e39c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d00e      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a18      	ldr	r2, [pc, #96]	; (800e3a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d009      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a17      	ldr	r2, [pc, #92]	; (800e3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d004      	beq.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a15      	ldr	r2, [pc, #84]	; (800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d10c      	bne.n	800e370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e35c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	4313      	orrs	r3, r2
 800e366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2201      	movs	r2, #1
 800e374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	40010000 	.word	0x40010000
 800e394:	40000400 	.word	0x40000400
 800e398:	40000800 	.word	0x40000800
 800e39c:	40000c00 	.word	0x40000c00
 800e3a0:	40010400 	.word	0x40010400
 800e3a4:	40014000 	.word	0x40014000
 800e3a8:	40001800 	.word	0x40001800

0800e3ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d101      	bne.n	800e3c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	e03d      	b.n	800e444 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	4313      	orrs	r3, r2
 800e414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	695b      	ldr	r3, [r3, #20]
 800e420:	4313      	orrs	r3, r2
 800e422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	69db      	ldr	r3, [r3, #28]
 800e42e:	4313      	orrs	r3, r2
 800e430:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e458:	bf00      	nop
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e03f      	b.n	800e50a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7fb ffcc 	bl	800a43c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2224      	movs	r2, #36	; 0x24
 800e4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68da      	ldr	r2, [r3, #12]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e4ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fc7b 	bl	800edb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	691a      	ldr	r2, [r3, #16]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e4d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	695a      	ldr	r2, [r3, #20]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e4e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	68da      	ldr	r2, [r3, #12]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2220      	movs	r2, #32
 800e504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e508:	2300      	movs	r3, #0
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
	...

0800e514 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b0ba      	sub	sp, #232	; 0xe8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e53a:	2300      	movs	r3, #0
 800e53c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e540:	2300      	movs	r3, #0
 800e542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e54a:	f003 030f 	and.w	r3, r3, #15
 800e54e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10f      	bne.n	800e57a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e55e:	f003 0320 	and.w	r3, r3, #32
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <HAL_UART_IRQHandler+0x66>
 800e566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e56a:	f003 0320 	and.w	r3, r3, #32
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d003      	beq.n	800e57a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fb65 	bl	800ec42 <UART_Receive_IT>
      return;
 800e578:	e256      	b.n	800ea28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e57a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f000 80de 	beq.w	800e740 <HAL_UART_IRQHandler+0x22c>
 800e584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e588:	f003 0301 	and.w	r3, r3, #1
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d106      	bne.n	800e59e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e594:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 80d1 	beq.w	800e740 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <HAL_UART_IRQHandler+0xae>
 800e5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d005      	beq.n	800e5c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ba:	f043 0201 	orr.w	r2, r3, #1
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c6:	f003 0304 	and.w	r3, r3, #4
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00b      	beq.n	800e5e6 <HAL_UART_IRQHandler+0xd2>
 800e5ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d005      	beq.n	800e5e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5de:	f043 0202 	orr.w	r2, r3, #2
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5ea:	f003 0302 	and.w	r3, r3, #2
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00b      	beq.n	800e60a <HAL_UART_IRQHandler+0xf6>
 800e5f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d005      	beq.n	800e60a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e602:	f043 0204 	orr.w	r2, r3, #4
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e60e:	f003 0308 	and.w	r3, r3, #8
 800e612:	2b00      	cmp	r3, #0
 800e614:	d011      	beq.n	800e63a <HAL_UART_IRQHandler+0x126>
 800e616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e61a:	f003 0320 	and.w	r3, r3, #32
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e626:	f003 0301 	and.w	r3, r3, #1
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d005      	beq.n	800e63a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e632:	f043 0208 	orr.w	r2, r3, #8
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f000 81ed 	beq.w	800ea1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e648:	f003 0320 	and.w	r3, r3, #32
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d008      	beq.n	800e662 <HAL_UART_IRQHandler+0x14e>
 800e650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e654:	f003 0320 	and.w	r3, r3, #32
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 faf0 	bl	800ec42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	695b      	ldr	r3, [r3, #20]
 800e668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e66c:	2b40      	cmp	r3, #64	; 0x40
 800e66e:	bf0c      	ite	eq
 800e670:	2301      	moveq	r3, #1
 800e672:	2300      	movne	r3, #0
 800e674:	b2db      	uxtb	r3, r3
 800e676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e67e:	f003 0308 	and.w	r3, r3, #8
 800e682:	2b00      	cmp	r3, #0
 800e684:	d103      	bne.n	800e68e <HAL_UART_IRQHandler+0x17a>
 800e686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d04f      	beq.n	800e72e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f9f8 	bl	800ea84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e69e:	2b40      	cmp	r3, #64	; 0x40
 800e6a0:	d141      	bne.n	800e726 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3314      	adds	r3, #20
 800e6a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6b0:	e853 3f00 	ldrex	r3, [r3]
 800e6b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e6b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e6bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	3314      	adds	r3, #20
 800e6ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e6ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e6d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e6da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e6de:	e841 2300 	strex	r3, r2, [r1]
 800e6e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e6e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1d9      	bne.n	800e6a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d013      	beq.n	800e71e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fa:	4a7d      	ldr	r2, [pc, #500]	; (800e8f0 <HAL_UART_IRQHandler+0x3dc>)
 800e6fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e702:	4618      	mov	r0, r3
 800e704:	f7fd fdee 	bl	800c2e4 <HAL_DMA_Abort_IT>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d016      	beq.n	800e73c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e718:	4610      	mov	r0, r2
 800e71a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e71c:	e00e      	b.n	800e73c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f99a 	bl	800ea58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e724:	e00a      	b.n	800e73c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 f996 	bl	800ea58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e72c:	e006      	b.n	800e73c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f992 	bl	800ea58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e73a:	e170      	b.n	800ea1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e73c:	bf00      	nop
    return;
 800e73e:	e16e      	b.n	800ea1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e744:	2b01      	cmp	r3, #1
 800e746:	f040 814a 	bne.w	800e9de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e74e:	f003 0310 	and.w	r3, r3, #16
 800e752:	2b00      	cmp	r3, #0
 800e754:	f000 8143 	beq.w	800e9de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e75c:	f003 0310 	and.w	r3, r3, #16
 800e760:	2b00      	cmp	r3, #0
 800e762:	f000 813c 	beq.w	800e9de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e766:	2300      	movs	r3, #0
 800e768:	60bb      	str	r3, [r7, #8]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	60bb      	str	r3, [r7, #8]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	60bb      	str	r3, [r7, #8]
 800e77a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e786:	2b40      	cmp	r3, #64	; 0x40
 800e788:	f040 80b4 	bne.w	800e8f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 8140 	beq.w	800ea22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e7a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	f080 8139 	bcs.w	800ea22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e7b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7c2:	f000 8088 	beq.w	800e8d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	330c      	adds	r3, #12
 800e7cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e7d4:	e853 3f00 	ldrex	r3, [r3]
 800e7d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e7dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e7e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	330c      	adds	r3, #12
 800e7ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e7f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e7f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e7fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e802:	e841 2300 	strex	r3, r2, [r1]
 800e806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1d9      	bne.n	800e7c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3314      	adds	r3, #20
 800e818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e81c:	e853 3f00 	ldrex	r3, [r3]
 800e820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e824:	f023 0301 	bic.w	r3, r3, #1
 800e828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	3314      	adds	r3, #20
 800e832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e836:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e83a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e83e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e842:	e841 2300 	strex	r3, r2, [r1]
 800e846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1e1      	bne.n	800e812 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	3314      	adds	r3, #20
 800e854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e858:	e853 3f00 	ldrex	r3, [r3]
 800e85c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3314      	adds	r3, #20
 800e86e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e872:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e87a:	e841 2300 	strex	r3, r2, [r1]
 800e87e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1e3      	bne.n	800e84e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2220      	movs	r2, #32
 800e88a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	330c      	adds	r3, #12
 800e89a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8a6:	f023 0310 	bic.w	r3, r3, #16
 800e8aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	330c      	adds	r3, #12
 800e8b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e8b8:	65ba      	str	r2, [r7, #88]	; 0x58
 800e8ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8c0:	e841 2300 	strex	r3, r2, [r1]
 800e8c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1e3      	bne.n	800e894 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fd fc97 	bl	800c204 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f8c0 	bl	800ea6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e8ec:	e099      	b.n	800ea22 <HAL_UART_IRQHandler+0x50e>
 800e8ee:	bf00      	nop
 800e8f0:	0800eb4b 	.word	0x0800eb4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e908:	b29b      	uxth	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 808b 	beq.w	800ea26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 8086 	beq.w	800ea26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	330c      	adds	r3, #12
 800e920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	e853 3f00 	ldrex	r3, [r3]
 800e928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	330c      	adds	r3, #12
 800e93a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e93e:	647a      	str	r2, [r7, #68]	; 0x44
 800e940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e946:	e841 2300 	strex	r3, r2, [r1]
 800e94a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1e3      	bne.n	800e91a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3314      	adds	r3, #20
 800e958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	e853 3f00 	ldrex	r3, [r3]
 800e960:	623b      	str	r3, [r7, #32]
   return(result);
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	f023 0301 	bic.w	r3, r3, #1
 800e968:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3314      	adds	r3, #20
 800e972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e976:	633a      	str	r2, [r7, #48]	; 0x30
 800e978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e97e:	e841 2300 	strex	r3, r2, [r1]
 800e982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e3      	bne.n	800e952 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2220      	movs	r2, #32
 800e98e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	330c      	adds	r3, #12
 800e99e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	e853 3f00 	ldrex	r3, [r3]
 800e9a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f023 0310 	bic.w	r3, r3, #16
 800e9ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	330c      	adds	r3, #12
 800e9b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e9bc:	61fa      	str	r2, [r7, #28]
 800e9be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	69b9      	ldr	r1, [r7, #24]
 800e9c2:	69fa      	ldr	r2, [r7, #28]
 800e9c4:	e841 2300 	strex	r3, r2, [r1]
 800e9c8:	617b      	str	r3, [r7, #20]
   return(result);
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e3      	bne.n	800e998 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e9d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f848 	bl	800ea6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e9dc:	e023      	b.n	800ea26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d009      	beq.n	800e9fe <HAL_UART_IRQHandler+0x4ea>
 800e9ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f8bb 	bl	800eb72 <UART_Transmit_IT>
    return;
 800e9fc:	e014      	b.n	800ea28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00e      	beq.n	800ea28 <HAL_UART_IRQHandler+0x514>
 800ea0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d008      	beq.n	800ea28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f8fb 	bl	800ec12 <UART_EndTransmit_IT>
    return;
 800ea1c:	e004      	b.n	800ea28 <HAL_UART_IRQHandler+0x514>
    return;
 800ea1e:	bf00      	nop
 800ea20:	e002      	b.n	800ea28 <HAL_UART_IRQHandler+0x514>
      return;
 800ea22:	bf00      	nop
 800ea24:	e000      	b.n	800ea28 <HAL_UART_IRQHandler+0x514>
      return;
 800ea26:	bf00      	nop
  }
}
 800ea28:	37e8      	adds	r7, #232	; 0xe8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop

0800ea30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b095      	sub	sp, #84	; 0x54
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	330c      	adds	r3, #12
 800ea92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea96:	e853 3f00 	ldrex	r3, [r3]
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eaa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	330c      	adds	r3, #12
 800eaaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eaac:	643a      	str	r2, [r7, #64]	; 0x40
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eab4:	e841 2300 	strex	r3, r2, [r1]
 800eab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1e5      	bne.n	800ea8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3314      	adds	r3, #20
 800eac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac8:	6a3b      	ldr	r3, [r7, #32]
 800eaca:	e853 3f00 	ldrex	r3, [r3]
 800eace:	61fb      	str	r3, [r7, #28]
   return(result);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	f023 0301 	bic.w	r3, r3, #1
 800ead6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3314      	adds	r3, #20
 800eade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e5      	bne.n	800eac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d119      	bne.n	800eb30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	330c      	adds	r3, #12
 800eb02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	e853 3f00 	ldrex	r3, [r3]
 800eb0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	f023 0310 	bic.w	r3, r3, #16
 800eb12:	647b      	str	r3, [r7, #68]	; 0x44
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	330c      	adds	r3, #12
 800eb1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb1c:	61ba      	str	r2, [r7, #24]
 800eb1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb20:	6979      	ldr	r1, [r7, #20]
 800eb22:	69ba      	ldr	r2, [r7, #24]
 800eb24:	e841 2300 	strex	r3, r2, [r1]
 800eb28:	613b      	str	r3, [r7, #16]
   return(result);
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1e5      	bne.n	800eafc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2220      	movs	r2, #32
 800eb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800eb3e:	bf00      	nop
 800eb40:	3754      	adds	r7, #84	; 0x54
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f7ff ff77 	bl	800ea58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb6a:	bf00      	nop
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b085      	sub	sp, #20
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	2b21      	cmp	r3, #33	; 0x21
 800eb84:	d13e      	bne.n	800ec04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb8e:	d114      	bne.n	800ebba <UART_Transmit_IT+0x48>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	691b      	ldr	r3, [r3, #16]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d110      	bne.n	800ebba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a1b      	ldr	r3, [r3, #32]
 800ebb2:	1c9a      	adds	r2, r3, #2
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	621a      	str	r2, [r3, #32]
 800ebb8:	e008      	b.n	800ebcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	1c59      	adds	r1, r3, #1
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	6211      	str	r1, [r2, #32]
 800ebc4:	781a      	ldrb	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d10f      	bne.n	800ec00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ebee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68da      	ldr	r2, [r3, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	e000      	b.n	800ec06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ec04:	2302      	movs	r3, #2
  }
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b082      	sub	sp, #8
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	68da      	ldr	r2, [r3, #12]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2220      	movs	r2, #32
 800ec2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff fefc 	bl	800ea30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b08c      	sub	sp, #48	; 0x30
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b22      	cmp	r3, #34	; 0x22
 800ec54:	f040 80ab 	bne.w	800edae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec60:	d117      	bne.n	800ec92 <UART_Receive_IT+0x50>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	691b      	ldr	r3, [r3, #16]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d113      	bne.n	800ec92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8a:	1c9a      	adds	r2, r3, #2
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ec90:	e026      	b.n	800ece0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eca4:	d007      	beq.n	800ecb6 <UART_Receive_IT+0x74>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10a      	bne.n	800ecc4 <UART_Receive_IT+0x82>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d106      	bne.n	800ecc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	701a      	strb	r2, [r3, #0]
 800ecc2:	e008      	b.n	800ecd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecda:	1c5a      	adds	r2, r3, #1
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	3b01      	subs	r3, #1
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	4619      	mov	r1, r3
 800ecee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d15a      	bne.n	800edaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68da      	ldr	r2, [r3, #12]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f022 0220 	bic.w	r2, r2, #32
 800ed02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	695a      	ldr	r2, [r3, #20]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f022 0201 	bic.w	r2, r2, #1
 800ed22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2220      	movs	r2, #32
 800ed28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d135      	bne.n	800eda0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	330c      	adds	r3, #12
 800ed40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	e853 3f00 	ldrex	r3, [r3]
 800ed48:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	f023 0310 	bic.w	r3, r3, #16
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	330c      	adds	r3, #12
 800ed58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed5a:	623a      	str	r2, [r7, #32]
 800ed5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5e:	69f9      	ldr	r1, [r7, #28]
 800ed60:	6a3a      	ldr	r2, [r7, #32]
 800ed62:	e841 2300 	strex	r3, r2, [r1]
 800ed66:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1e5      	bne.n	800ed3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f003 0310 	and.w	r3, r3, #16
 800ed78:	2b10      	cmp	r3, #16
 800ed7a:	d10a      	bne.n	800ed92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	60fb      	str	r3, [r7, #12]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	60fb      	str	r3, [r7, #12]
 800ed90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ed96:	4619      	mov	r1, r3
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f7ff fe67 	bl	800ea6c <HAL_UARTEx_RxEventCallback>
 800ed9e:	e002      	b.n	800eda6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f7ff fe4f 	bl	800ea44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	e002      	b.n	800edb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	e000      	b.n	800edb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800edae:	2302      	movs	r3, #2
  }
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3730      	adds	r7, #48	; 0x30
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edbc:	b0c0      	sub	sp, #256	; 0x100
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800edc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800edd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edd4:	68d9      	ldr	r1, [r3, #12]
 800edd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	ea40 0301 	orr.w	r3, r0, r1
 800ede0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ede2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	431a      	orrs	r2, r3
 800edf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edf4:	695b      	ldr	r3, [r3, #20]
 800edf6:	431a      	orrs	r2, r3
 800edf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edfc:	69db      	ldr	r3, [r3, #28]
 800edfe:	4313      	orrs	r3, r2
 800ee00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ee04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ee10:	f021 010c 	bic.w	r1, r1, #12
 800ee14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee1e:	430b      	orrs	r3, r1
 800ee20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ee22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ee2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee32:	6999      	ldr	r1, [r3, #24]
 800ee34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	ea40 0301 	orr.w	r3, r0, r1
 800ee3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	4b8f      	ldr	r3, [pc, #572]	; (800f084 <UART_SetConfig+0x2cc>)
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d005      	beq.n	800ee58 <UART_SetConfig+0xa0>
 800ee4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	4b8d      	ldr	r3, [pc, #564]	; (800f088 <UART_SetConfig+0x2d0>)
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d104      	bne.n	800ee62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ee58:	f7fe fb08 	bl	800d46c <HAL_RCC_GetPCLK2Freq>
 800ee5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ee60:	e003      	b.n	800ee6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ee62:	f7fe faef 	bl	800d444 <HAL_RCC_GetPCLK1Freq>
 800ee66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee6e:	69db      	ldr	r3, [r3, #28]
 800ee70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee74:	f040 810c 	bne.w	800f090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ee86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ee8a:	4622      	mov	r2, r4
 800ee8c:	462b      	mov	r3, r5
 800ee8e:	1891      	adds	r1, r2, r2
 800ee90:	65b9      	str	r1, [r7, #88]	; 0x58
 800ee92:	415b      	adcs	r3, r3
 800ee94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	eb12 0801 	adds.w	r8, r2, r1
 800eea0:	4629      	mov	r1, r5
 800eea2:	eb43 0901 	adc.w	r9, r3, r1
 800eea6:	f04f 0200 	mov.w	r2, #0
 800eeaa:	f04f 0300 	mov.w	r3, #0
 800eeae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eeb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eeb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eeba:	4690      	mov	r8, r2
 800eebc:	4699      	mov	r9, r3
 800eebe:	4623      	mov	r3, r4
 800eec0:	eb18 0303 	adds.w	r3, r8, r3
 800eec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eec8:	462b      	mov	r3, r5
 800eeca:	eb49 0303 	adc.w	r3, r9, r3
 800eece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eede:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800eee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800eee6:	460b      	mov	r3, r1
 800eee8:	18db      	adds	r3, r3, r3
 800eeea:	653b      	str	r3, [r7, #80]	; 0x50
 800eeec:	4613      	mov	r3, r2
 800eeee:	eb42 0303 	adc.w	r3, r2, r3
 800eef2:	657b      	str	r3, [r7, #84]	; 0x54
 800eef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800eefc:	f7f1 fec4 	bl	8000c88 <__aeabi_uldivmod>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4b61      	ldr	r3, [pc, #388]	; (800f08c <UART_SetConfig+0x2d4>)
 800ef06:	fba3 2302 	umull	r2, r3, r3, r2
 800ef0a:	095b      	lsrs	r3, r3, #5
 800ef0c:	011c      	lsls	r4, r3, #4
 800ef0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ef1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ef20:	4642      	mov	r2, r8
 800ef22:	464b      	mov	r3, r9
 800ef24:	1891      	adds	r1, r2, r2
 800ef26:	64b9      	str	r1, [r7, #72]	; 0x48
 800ef28:	415b      	adcs	r3, r3
 800ef2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef30:	4641      	mov	r1, r8
 800ef32:	eb12 0a01 	adds.w	sl, r2, r1
 800ef36:	4649      	mov	r1, r9
 800ef38:	eb43 0b01 	adc.w	fp, r3, r1
 800ef3c:	f04f 0200 	mov.w	r2, #0
 800ef40:	f04f 0300 	mov.w	r3, #0
 800ef44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ef48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ef4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef50:	4692      	mov	sl, r2
 800ef52:	469b      	mov	fp, r3
 800ef54:	4643      	mov	r3, r8
 800ef56:	eb1a 0303 	adds.w	r3, sl, r3
 800ef5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ef5e:	464b      	mov	r3, r9
 800ef60:	eb4b 0303 	adc.w	r3, fp, r3
 800ef64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ef68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ef74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ef78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	18db      	adds	r3, r3, r3
 800ef80:	643b      	str	r3, [r7, #64]	; 0x40
 800ef82:	4613      	mov	r3, r2
 800ef84:	eb42 0303 	adc.w	r3, r2, r3
 800ef88:	647b      	str	r3, [r7, #68]	; 0x44
 800ef8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ef8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ef92:	f7f1 fe79 	bl	8000c88 <__aeabi_uldivmod>
 800ef96:	4602      	mov	r2, r0
 800ef98:	460b      	mov	r3, r1
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4b3b      	ldr	r3, [pc, #236]	; (800f08c <UART_SetConfig+0x2d4>)
 800ef9e:	fba3 2301 	umull	r2, r3, r3, r1
 800efa2:	095b      	lsrs	r3, r3, #5
 800efa4:	2264      	movs	r2, #100	; 0x64
 800efa6:	fb02 f303 	mul.w	r3, r2, r3
 800efaa:	1acb      	subs	r3, r1, r3
 800efac:	00db      	lsls	r3, r3, #3
 800efae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800efb2:	4b36      	ldr	r3, [pc, #216]	; (800f08c <UART_SetConfig+0x2d4>)
 800efb4:	fba3 2302 	umull	r2, r3, r3, r2
 800efb8:	095b      	lsrs	r3, r3, #5
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800efc0:	441c      	add	r4, r3
 800efc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800efc6:	2200      	movs	r2, #0
 800efc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800efcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800efd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800efd4:	4642      	mov	r2, r8
 800efd6:	464b      	mov	r3, r9
 800efd8:	1891      	adds	r1, r2, r2
 800efda:	63b9      	str	r1, [r7, #56]	; 0x38
 800efdc:	415b      	adcs	r3, r3
 800efde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800efe4:	4641      	mov	r1, r8
 800efe6:	1851      	adds	r1, r2, r1
 800efe8:	6339      	str	r1, [r7, #48]	; 0x30
 800efea:	4649      	mov	r1, r9
 800efec:	414b      	adcs	r3, r1
 800efee:	637b      	str	r3, [r7, #52]	; 0x34
 800eff0:	f04f 0200 	mov.w	r2, #0
 800eff4:	f04f 0300 	mov.w	r3, #0
 800eff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800effc:	4659      	mov	r1, fp
 800effe:	00cb      	lsls	r3, r1, #3
 800f000:	4651      	mov	r1, sl
 800f002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f006:	4651      	mov	r1, sl
 800f008:	00ca      	lsls	r2, r1, #3
 800f00a:	4610      	mov	r0, r2
 800f00c:	4619      	mov	r1, r3
 800f00e:	4603      	mov	r3, r0
 800f010:	4642      	mov	r2, r8
 800f012:	189b      	adds	r3, r3, r2
 800f014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f018:	464b      	mov	r3, r9
 800f01a:	460a      	mov	r2, r1
 800f01c:	eb42 0303 	adc.w	r3, r2, r3
 800f020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f030:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f038:	460b      	mov	r3, r1
 800f03a:	18db      	adds	r3, r3, r3
 800f03c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f03e:	4613      	mov	r3, r2
 800f040:	eb42 0303 	adc.w	r3, r2, r3
 800f044:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f04a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f04e:	f7f1 fe1b 	bl	8000c88 <__aeabi_uldivmod>
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	4b0d      	ldr	r3, [pc, #52]	; (800f08c <UART_SetConfig+0x2d4>)
 800f058:	fba3 1302 	umull	r1, r3, r3, r2
 800f05c:	095b      	lsrs	r3, r3, #5
 800f05e:	2164      	movs	r1, #100	; 0x64
 800f060:	fb01 f303 	mul.w	r3, r1, r3
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	3332      	adds	r3, #50	; 0x32
 800f06a:	4a08      	ldr	r2, [pc, #32]	; (800f08c <UART_SetConfig+0x2d4>)
 800f06c:	fba2 2303 	umull	r2, r3, r2, r3
 800f070:	095b      	lsrs	r3, r3, #5
 800f072:	f003 0207 	and.w	r2, r3, #7
 800f076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4422      	add	r2, r4
 800f07e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f080:	e105      	b.n	800f28e <UART_SetConfig+0x4d6>
 800f082:	bf00      	nop
 800f084:	40011000 	.word	0x40011000
 800f088:	40011400 	.word	0x40011400
 800f08c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f094:	2200      	movs	r2, #0
 800f096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f09a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f09e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f0a2:	4642      	mov	r2, r8
 800f0a4:	464b      	mov	r3, r9
 800f0a6:	1891      	adds	r1, r2, r2
 800f0a8:	6239      	str	r1, [r7, #32]
 800f0aa:	415b      	adcs	r3, r3
 800f0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f0b2:	4641      	mov	r1, r8
 800f0b4:	1854      	adds	r4, r2, r1
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	eb43 0501 	adc.w	r5, r3, r1
 800f0bc:	f04f 0200 	mov.w	r2, #0
 800f0c0:	f04f 0300 	mov.w	r3, #0
 800f0c4:	00eb      	lsls	r3, r5, #3
 800f0c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f0ca:	00e2      	lsls	r2, r4, #3
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	461d      	mov	r5, r3
 800f0d0:	4643      	mov	r3, r8
 800f0d2:	18e3      	adds	r3, r4, r3
 800f0d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f0d8:	464b      	mov	r3, r9
 800f0da:	eb45 0303 	adc.w	r3, r5, r3
 800f0de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f0f2:	f04f 0200 	mov.w	r2, #0
 800f0f6:	f04f 0300 	mov.w	r3, #0
 800f0fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f0fe:	4629      	mov	r1, r5
 800f100:	008b      	lsls	r3, r1, #2
 800f102:	4621      	mov	r1, r4
 800f104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f108:	4621      	mov	r1, r4
 800f10a:	008a      	lsls	r2, r1, #2
 800f10c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f110:	f7f1 fdba 	bl	8000c88 <__aeabi_uldivmod>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	4b60      	ldr	r3, [pc, #384]	; (800f29c <UART_SetConfig+0x4e4>)
 800f11a:	fba3 2302 	umull	r2, r3, r3, r2
 800f11e:	095b      	lsrs	r3, r3, #5
 800f120:	011c      	lsls	r4, r3, #4
 800f122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f126:	2200      	movs	r2, #0
 800f128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f12c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f134:	4642      	mov	r2, r8
 800f136:	464b      	mov	r3, r9
 800f138:	1891      	adds	r1, r2, r2
 800f13a:	61b9      	str	r1, [r7, #24]
 800f13c:	415b      	adcs	r3, r3
 800f13e:	61fb      	str	r3, [r7, #28]
 800f140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f144:	4641      	mov	r1, r8
 800f146:	1851      	adds	r1, r2, r1
 800f148:	6139      	str	r1, [r7, #16]
 800f14a:	4649      	mov	r1, r9
 800f14c:	414b      	adcs	r3, r1
 800f14e:	617b      	str	r3, [r7, #20]
 800f150:	f04f 0200 	mov.w	r2, #0
 800f154:	f04f 0300 	mov.w	r3, #0
 800f158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f15c:	4659      	mov	r1, fp
 800f15e:	00cb      	lsls	r3, r1, #3
 800f160:	4651      	mov	r1, sl
 800f162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f166:	4651      	mov	r1, sl
 800f168:	00ca      	lsls	r2, r1, #3
 800f16a:	4610      	mov	r0, r2
 800f16c:	4619      	mov	r1, r3
 800f16e:	4603      	mov	r3, r0
 800f170:	4642      	mov	r2, r8
 800f172:	189b      	adds	r3, r3, r2
 800f174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f178:	464b      	mov	r3, r9
 800f17a:	460a      	mov	r2, r1
 800f17c:	eb42 0303 	adc.w	r3, r2, r3
 800f180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f18e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f190:	f04f 0200 	mov.w	r2, #0
 800f194:	f04f 0300 	mov.w	r3, #0
 800f198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f19c:	4649      	mov	r1, r9
 800f19e:	008b      	lsls	r3, r1, #2
 800f1a0:	4641      	mov	r1, r8
 800f1a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f1a6:	4641      	mov	r1, r8
 800f1a8:	008a      	lsls	r2, r1, #2
 800f1aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f1ae:	f7f1 fd6b 	bl	8000c88 <__aeabi_uldivmod>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	4b39      	ldr	r3, [pc, #228]	; (800f29c <UART_SetConfig+0x4e4>)
 800f1b8:	fba3 1302 	umull	r1, r3, r3, r2
 800f1bc:	095b      	lsrs	r3, r3, #5
 800f1be:	2164      	movs	r1, #100	; 0x64
 800f1c0:	fb01 f303 	mul.w	r3, r1, r3
 800f1c4:	1ad3      	subs	r3, r2, r3
 800f1c6:	011b      	lsls	r3, r3, #4
 800f1c8:	3332      	adds	r3, #50	; 0x32
 800f1ca:	4a34      	ldr	r2, [pc, #208]	; (800f29c <UART_SetConfig+0x4e4>)
 800f1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d0:	095b      	lsrs	r3, r3, #5
 800f1d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1d6:	441c      	add	r4, r3
 800f1d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f1dc:	2200      	movs	r2, #0
 800f1de:	673b      	str	r3, [r7, #112]	; 0x70
 800f1e0:	677a      	str	r2, [r7, #116]	; 0x74
 800f1e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f1e6:	4642      	mov	r2, r8
 800f1e8:	464b      	mov	r3, r9
 800f1ea:	1891      	adds	r1, r2, r2
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	415b      	adcs	r3, r3
 800f1f0:	60fb      	str	r3, [r7, #12]
 800f1f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f1f6:	4641      	mov	r1, r8
 800f1f8:	1851      	adds	r1, r2, r1
 800f1fa:	6039      	str	r1, [r7, #0]
 800f1fc:	4649      	mov	r1, r9
 800f1fe:	414b      	adcs	r3, r1
 800f200:	607b      	str	r3, [r7, #4]
 800f202:	f04f 0200 	mov.w	r2, #0
 800f206:	f04f 0300 	mov.w	r3, #0
 800f20a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f20e:	4659      	mov	r1, fp
 800f210:	00cb      	lsls	r3, r1, #3
 800f212:	4651      	mov	r1, sl
 800f214:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f218:	4651      	mov	r1, sl
 800f21a:	00ca      	lsls	r2, r1, #3
 800f21c:	4610      	mov	r0, r2
 800f21e:	4619      	mov	r1, r3
 800f220:	4603      	mov	r3, r0
 800f222:	4642      	mov	r2, r8
 800f224:	189b      	adds	r3, r3, r2
 800f226:	66bb      	str	r3, [r7, #104]	; 0x68
 800f228:	464b      	mov	r3, r9
 800f22a:	460a      	mov	r2, r1
 800f22c:	eb42 0303 	adc.w	r3, r2, r3
 800f230:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	663b      	str	r3, [r7, #96]	; 0x60
 800f23c:	667a      	str	r2, [r7, #100]	; 0x64
 800f23e:	f04f 0200 	mov.w	r2, #0
 800f242:	f04f 0300 	mov.w	r3, #0
 800f246:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f24a:	4649      	mov	r1, r9
 800f24c:	008b      	lsls	r3, r1, #2
 800f24e:	4641      	mov	r1, r8
 800f250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f254:	4641      	mov	r1, r8
 800f256:	008a      	lsls	r2, r1, #2
 800f258:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f25c:	f7f1 fd14 	bl	8000c88 <__aeabi_uldivmod>
 800f260:	4602      	mov	r2, r0
 800f262:	460b      	mov	r3, r1
 800f264:	4b0d      	ldr	r3, [pc, #52]	; (800f29c <UART_SetConfig+0x4e4>)
 800f266:	fba3 1302 	umull	r1, r3, r3, r2
 800f26a:	095b      	lsrs	r3, r3, #5
 800f26c:	2164      	movs	r1, #100	; 0x64
 800f26e:	fb01 f303 	mul.w	r3, r1, r3
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	011b      	lsls	r3, r3, #4
 800f276:	3332      	adds	r3, #50	; 0x32
 800f278:	4a08      	ldr	r2, [pc, #32]	; (800f29c <UART_SetConfig+0x4e4>)
 800f27a:	fba2 2303 	umull	r2, r3, r2, r3
 800f27e:	095b      	lsrs	r3, r3, #5
 800f280:	f003 020f 	and.w	r2, r3, #15
 800f284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4422      	add	r2, r4
 800f28c:	609a      	str	r2, [r3, #8]
}
 800f28e:	bf00      	nop
 800f290:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f294:	46bd      	mov	sp, r7
 800f296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f29a:	bf00      	nop
 800f29c:	51eb851f 	.word	0x51eb851f

0800f2a0 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	60fb      	str	r3, [r7, #12]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d20b      	bcs.n	800f2d2 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	011b      	lsls	r3, r3, #4
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f000 f817 	bl	800f2f8 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	e7ed      	b.n	800f2ae <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800f2d2:	bf00      	nop
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b082      	sub	sp, #8
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800f2e2:	f7f8 f9f9 	bl	80076d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	6879      	ldr	r1, [r7, #4]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7ff ffd8 	bl	800f2a0 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800f2f8:	b5b0      	push	{r4, r5, r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	f7f2 f8b2 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d001      	beq.n	800f314 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800f310:	f006 f8df 	bl	80154d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	68dc      	ldr	r4, [r3, #12]
 800f318:	687d      	ldr	r5, [r7, #4]
 800f31a:	463b      	mov	r3, r7
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7f8 fcda 	bl	8007cd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800f322:	4603      	mov	r3, r0
 800f324:	4619      	mov	r1, r3
 800f326:	4628      	mov	r0, r5
 800f328:	47a0      	blx	r4
 800f32a:	bf00      	nop
    }
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bdb0      	pop	{r4, r5, r7, pc}

0800f332 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800f332:	b5b0      	push	{r4, r5, r7, lr}
 800f334:	b082      	sub	sp, #8
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	240f      	movs	r4, #15
 800f33e:	461d      	mov	r5, r3
 800f340:	2c00      	cmp	r4, #0
 800f342:	db05      	blt.n	800f350 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800f344:	4628      	mov	r0, r5
 800f346:	f7f8 fbab 	bl	8007aa0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800f34a:	3510      	adds	r5, #16
 800f34c:	3c01      	subs	r4, #1
 800f34e:	e7f7      	b.n	800f340 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4618      	mov	r0, r3
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bdb0      	pop	{r4, r5, r7, pc}

0800f362 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 800f362:	b590      	push	{r4, r7, lr}
 800f364:	b083      	sub	sp, #12
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00a      	beq.n	800f386 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	429c      	cmp	r4, r3
 800f37a:	d004      	beq.n	800f386 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800f37c:	3c10      	subs	r4, #16
 800f37e:	4620      	mov	r0, r4
 800f380:	f7f8 f966 	bl	8007650 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800f384:	e7f7      	b.n	800f376 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd90      	pop	{r4, r7, pc}

0800f390 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
 800f394:	4801      	ldr	r0, [pc, #4]	; (800f39c <__tcf_0+0xc>)
 800f396:	f7ff ffe4 	bl	800f362 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	200014dc 	.word	0x200014dc

0800f3a0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 800f3a4:	4b12      	ldr	r3, [pc, #72]	; (800f3f0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f3bf 8f5b 	dmb	ish
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	bf0c      	ite	eq
 800f3b6:	2301      	moveq	r3, #1
 800f3b8:	2300      	movne	r3, #0
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d013      	beq.n	800f3e8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800f3c0:	480b      	ldr	r0, [pc, #44]	; (800f3f0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800f3c2:	f006 f875 	bl	80154b0 <__cxa_guard_acquire>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	bf14      	ite	ne
 800f3cc:	2301      	movne	r3, #1
 800f3ce:	2300      	moveq	r3, #0
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d008      	beq.n	800f3e8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800f3d6:	4807      	ldr	r0, [pc, #28]	; (800f3f4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 800f3d8:	f7ff ffab 	bl	800f332 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 800f3dc:	4806      	ldr	r0, [pc, #24]	; (800f3f8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 800f3de:	f006 fac6 	bl	801596e <atexit>
 800f3e2:	4803      	ldr	r0, [pc, #12]	; (800f3f0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800f3e4:	f006 f870 	bl	80154c8 <__cxa_guard_release>
		return instance;
 800f3e8:	4b02      	ldr	r3, [pc, #8]	; (800f3f4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	200015e0 	.word	0x200015e0
 800f3f4:	200014dc 	.word	0x200014dc
 800f3f8:	0800f391 	.word	0x0800f391

0800f3fc <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800f406:	2300      	movs	r3, #0
 800f408:	60fb      	str	r3, [r7, #12]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	429a      	cmp	r2, r3
 800f414:	d20b      	bcs.n	800f42e <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	011b      	lsls	r3, r3, #4
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	4413      	add	r3, r2
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff ff69 	bl	800f2f8 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3301      	adds	r3, #1
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	e7ed      	b.n	800f40a <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800f42e:	bf00      	nop
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b082      	sub	sp, #8
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 800f43e:	f7ff ffaf 	bl	800f3a0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800f442:	4603      	mov	r3, r0
 800f444:	6879      	ldr	r1, [r7, #4]
 800f446:	4618      	mov	r0, r3
 800f448:	f7ff ffd8 	bl	800f3fc <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800f44c:	bf00      	nop
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60b9      	str	r1, [r7, #8]
 800f45c:	607a      	str	r2, [r7, #4]
 800f45e:	603b      	str	r3, [r7, #0]
 800f460:	4603      	mov	r3, r0
 800f462:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800f464:	bf00      	nop
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	60b9      	str	r1, [r7, #8]
 800f478:	607a      	str	r2, [r7, #4]
 800f47a:	603b      	str	r3, [r7, #0]
 800f47c:	4603      	mov	r3, r0
 800f47e:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800f486:	7bfb      	ldrb	r3, [r7, #15]
 800f488:	4618      	mov	r0, r3
 800f48a:	f001 fc70 	bl	8010d6e <_putchar>
  }
}
 800f48e:	bf00      	nop
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800f496:	b480      	push	{r7}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d006      	beq.n	800f4ba <_ZL10_strnlen_sPKcj+0x24>
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	1e5a      	subs	r2, r3, #1
 800f4b0:	603a      	str	r2, [r7, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <_ZL10_strnlen_sPKcj+0x24>
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e000      	b.n	800f4bc <_ZL10_strnlen_sPKcj+0x26>
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d003      	beq.n	800f4c8 <_ZL10_strnlen_sPKcj+0x32>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	60fb      	str	r3, [r7, #12]
 800f4c6:	e7ed      	b.n	800f4a4 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	1ad3      	subs	r3, r2, r3
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b083      	sub	sp, #12
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	2b2f      	cmp	r3, #47	; 0x2f
 800f4e8:	d904      	bls.n	800f4f4 <_ZL9_is_digitc+0x1a>
 800f4ea:	79fb      	ldrb	r3, [r7, #7]
 800f4ec:	2b39      	cmp	r3, #57	; 0x39
 800f4ee:	d801      	bhi.n	800f4f4 <_ZL9_is_digitc+0x1a>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e000      	b.n	800f4f6 <_ZL9_is_digitc+0x1c>
 800f4f4:	2300      	movs	r3, #0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	370c      	adds	r7, #12
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr

0800f502 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	4618      	mov	r0, r3
 800f516:	f7ff ffe0 	bl	800f4da <_ZL9_is_digitc>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00f      	beq.n	800f540 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	4613      	mov	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4413      	add	r3, r2
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	4618      	mov	r0, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	1c59      	adds	r1, r3, #1
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	6011      	str	r1, [r2, #0]
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	4403      	add	r3, r0
 800f53a:	3b30      	subs	r3, #48	; 0x30
 800f53c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800f53e:	e7e6      	b.n	800f50e <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800f540:	68fb      	ldr	r3, [r7, #12]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800f54a:	b590      	push	{r4, r7, lr}
 800f54c:	b087      	sub	sp, #28
 800f54e:	af00      	add	r7, sp, #0
 800f550:	60f8      	str	r0, [r7, #12]
 800f552:	60b9      	str	r1, [r7, #8]
 800f554:	607a      	str	r2, [r7, #4]
 800f556:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800f55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55e:	f003 0302 	and.w	r3, r3, #2
 800f562:	2b00      	cmp	r3, #0
 800f564:	d116      	bne.n	800f594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800f566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f568:	f003 0301 	and.w	r3, r3, #1
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d111      	bne.n	800f594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800f570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f572:	617b      	str	r3, [r7, #20]
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f578:	429a      	cmp	r2, r3
 800f57a:	d20b      	bcs.n	800f594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	1c53      	adds	r3, r2, #1
 800f580:	607b      	str	r3, [r7, #4]
 800f582:	68fc      	ldr	r4, [r7, #12]
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	2020      	movs	r0, #32
 800f58a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	3301      	adds	r3, #1
 800f590:	617b      	str	r3, [r7, #20]
 800f592:	e7ef      	b.n	800f574 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00e      	beq.n	800f5b8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	3b01      	subs	r3, #1
 800f59e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	4413      	add	r3, r2
 800f5a6:	7818      	ldrb	r0, [r3, #0]
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	1c53      	adds	r3, r2, #1
 800f5ac:	607b      	str	r3, [r7, #4]
 800f5ae:	68fc      	ldr	r4, [r7, #12]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	68b9      	ldr	r1, [r7, #8]
 800f5b4:	47a0      	blx	r4
  while (len) {
 800f5b6:	e7ed      	b.n	800f594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800f5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ba:	f003 0302 	and.w	r3, r3, #2
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00e      	beq.n	800f5e0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d908      	bls.n	800f5e0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	1c53      	adds	r3, r2, #1
 800f5d2:	607b      	str	r3, [r7, #4]
 800f5d4:	68fc      	ldr	r4, [r7, #12]
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	68b9      	ldr	r1, [r7, #8]
 800f5da:	2020      	movs	r0, #32
 800f5dc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800f5de:	e7f0      	b.n	800f5c2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800f5e0:	687b      	ldr	r3, [r7, #4]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	371c      	adds	r7, #28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd90      	pop	{r4, r7, pc}

0800f5ea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b088      	sub	sp, #32
 800f5ee:	af04      	add	r7, sp, #16
 800f5f0:	60f8      	str	r0, [r7, #12]
 800f5f2:	60b9      	str	r1, [r7, #8]
 800f5f4:	607a      	str	r2, [r7, #4]
 800f5f6:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fa:	f003 0302 	and.w	r3, r3, #2
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d136      	bne.n	800f670 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800f602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f604:	2b00      	cmp	r3, #0
 800f606:	d010      	beq.n	800f62a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800f608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60a:	f003 0301 	and.w	r3, r3, #1
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00b      	beq.n	800f62a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800f612:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d104      	bne.n	800f624 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800f61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61c:	f003 030c 	and.w	r3, r3, #12
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800f624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f626:	3b01      	subs	r3, #1
 800f628:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f62a:	69fa      	ldr	r2, [r7, #28]
 800f62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62e:	429a      	cmp	r2, r3
 800f630:	d20a      	bcs.n	800f648 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	2b1f      	cmp	r3, #31
 800f636:	d807      	bhi.n	800f648 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	1c5a      	adds	r2, r3, #1
 800f63c:	61fa      	str	r2, [r7, #28]
 800f63e:	69ba      	ldr	r2, [r7, #24]
 800f640:	4413      	add	r3, r2
 800f642:	2230      	movs	r2, #48	; 0x30
 800f644:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f646:	e7f0      	b.n	800f62a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64a:	f003 0301 	and.w	r3, r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00e      	beq.n	800f670 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800f652:	69fa      	ldr	r2, [r7, #28]
 800f654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f656:	429a      	cmp	r2, r3
 800f658:	d20a      	bcs.n	800f670 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	2b1f      	cmp	r3, #31
 800f65e:	d807      	bhi.n	800f670 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	1c5a      	adds	r2, r3, #1
 800f664:	61fa      	str	r2, [r7, #28]
 800f666:	69ba      	ldr	r2, [r7, #24]
 800f668:	4413      	add	r3, r2
 800f66a:	2230      	movs	r2, #48	; 0x30
 800f66c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f66e:	e7eb      	b.n	800f648 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	f003 0310 	and.w	r3, r3, #16
 800f676:	2b00      	cmp	r3, #0
 800f678:	d058      	beq.n	800f72c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800f67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f680:	2b00      	cmp	r3, #0
 800f682:	d116      	bne.n	800f6b2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d013      	beq.n	800f6b2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800f68a:	69fa      	ldr	r2, [r7, #28]
 800f68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68e:	429a      	cmp	r2, r3
 800f690:	d003      	beq.n	800f69a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800f692:	69fa      	ldr	r2, [r7, #28]
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	429a      	cmp	r2, r3
 800f698:	d10b      	bne.n	800f6b2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d005      	beq.n	800f6b2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a8:	2b10      	cmp	r3, #16
 800f6aa:	d102      	bne.n	800f6b2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	2b10      	cmp	r3, #16
 800f6b6:	d10f      	bne.n	800f6d8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800f6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ba:	f003 0320 	and.w	r3, r3, #32
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d10a      	bne.n	800f6d8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	2b1f      	cmp	r3, #31
 800f6c6:	d807      	bhi.n	800f6d8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	1c5a      	adds	r2, r3, #1
 800f6cc:	61fa      	str	r2, [r7, #28]
 800f6ce:	69ba      	ldr	r2, [r7, #24]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	2278      	movs	r2, #120	; 0x78
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	e01f      	b.n	800f718 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6da:	2b10      	cmp	r3, #16
 800f6dc:	d10f      	bne.n	800f6fe <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800f6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e0:	f003 0320 	and.w	r3, r3, #32
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00a      	beq.n	800f6fe <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	2b1f      	cmp	r3, #31
 800f6ec:	d807      	bhi.n	800f6fe <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	61fa      	str	r2, [r7, #28]
 800f6f4:	69ba      	ldr	r2, [r7, #24]
 800f6f6:	4413      	add	r3, r2
 800f6f8:	2258      	movs	r2, #88	; 0x58
 800f6fa:	701a      	strb	r2, [r3, #0]
 800f6fc:	e00c      	b.n	800f718 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800f6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f700:	2b02      	cmp	r3, #2
 800f702:	d109      	bne.n	800f718 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	2b1f      	cmp	r3, #31
 800f708:	d806      	bhi.n	800f718 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	1c5a      	adds	r2, r3, #1
 800f70e:	61fa      	str	r2, [r7, #28]
 800f710:	69ba      	ldr	r2, [r7, #24]
 800f712:	4413      	add	r3, r2
 800f714:	2262      	movs	r2, #98	; 0x62
 800f716:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	2b1f      	cmp	r3, #31
 800f71c:	d806      	bhi.n	800f72c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	61fa      	str	r2, [r7, #28]
 800f724:	69ba      	ldr	r2, [r7, #24]
 800f726:	4413      	add	r3, r2
 800f728:	2230      	movs	r2, #48	; 0x30
 800f72a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b1f      	cmp	r3, #31
 800f730:	d824      	bhi.n	800f77c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800f732:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d007      	beq.n	800f74a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	1c5a      	adds	r2, r3, #1
 800f73e:	61fa      	str	r2, [r7, #28]
 800f740:	69ba      	ldr	r2, [r7, #24]
 800f742:	4413      	add	r3, r2
 800f744:	222d      	movs	r2, #45	; 0x2d
 800f746:	701a      	strb	r2, [r3, #0]
 800f748:	e018      	b.n	800f77c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	f003 0304 	and.w	r3, r3, #4
 800f750:	2b00      	cmp	r3, #0
 800f752:	d007      	beq.n	800f764 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	61fa      	str	r2, [r7, #28]
 800f75a:	69ba      	ldr	r2, [r7, #24]
 800f75c:	4413      	add	r3, r2
 800f75e:	222b      	movs	r2, #43	; 0x2b
 800f760:	701a      	strb	r2, [r3, #0]
 800f762:	e00b      	b.n	800f77c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	f003 0308 	and.w	r3, r3, #8
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	61fa      	str	r2, [r7, #28]
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	4413      	add	r3, r2
 800f778:	2220      	movs	r2, #32
 800f77a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77e:	9303      	str	r3, [sp, #12]
 800f780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f782:	9302      	str	r3, [sp, #8]
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	9301      	str	r3, [sp, #4]
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	68b9      	ldr	r1, [r7, #8]
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7ff fed9 	bl	800f54a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800f798:	4603      	mov	r3, r0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b096      	sub	sp, #88	; 0x58
 800f7a6:	af08      	add	r7, sp, #32
 800f7a8:	60f8      	str	r0, [r7, #12]
 800f7aa:	60b9      	str	r1, [r7, #8]
 800f7ac:	607a      	str	r2, [r7, #4]
 800f7ae:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800f7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d103      	bne.n	800f7c2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800f7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7bc:	f023 0310 	bic.w	r3, r3, #16
 800f7c0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800f7c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d002      	beq.n	800f7d2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800f7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d033      	beq.n	800f83a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800f7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7dc:	fb01 f202 	mul.w	r2, r1, r2
 800f7e0:	1a9b      	subs	r3, r3, r2
 800f7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800f7e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f7ea:	2b09      	cmp	r3, #9
 800f7ec:	d804      	bhi.n	800f7f8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800f7ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f7f2:	3330      	adds	r3, #48	; 0x30
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	e00d      	b.n	800f814 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800f7f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7fa:	f003 0320 	and.w	r3, r3, #32
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800f802:	2241      	movs	r2, #65	; 0x41
 800f804:	e000      	b.n	800f808 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800f806:	2261      	movs	r2, #97	; 0x61
 800f808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f80c:	4413      	add	r3, r2
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	3b0a      	subs	r3, #10
 800f812:	b2da      	uxtb	r2, r3
 800f814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f816:	1c59      	adds	r1, r3, #1
 800f818:	6379      	str	r1, [r7, #52]	; 0x34
 800f81a:	3338      	adds	r3, #56	; 0x38
 800f81c:	443b      	add	r3, r7
 800f81e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800f822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f826:	fbb2 f3f3 	udiv	r3, r2, r3
 800f82a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800f82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d003      	beq.n	800f83a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	2b1f      	cmp	r3, #31
 800f836:	d800      	bhi.n	800f83a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800f838:	e7cb      	b.n	800f7d2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800f83a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f83c:	9306      	str	r3, [sp, #24]
 800f83e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f840:	9305      	str	r3, [sp, #20]
 800f842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f844:	9304      	str	r3, [sp, #16]
 800f846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f848:	9303      	str	r3, [sp, #12]
 800f84a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	f107 0310 	add.w	r3, r7, #16
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	68b9      	ldr	r1, [r7, #8]
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff fec2 	bl	800f5ea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800f866:	4603      	mov	r3, r0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3738      	adds	r7, #56	; 0x38
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b096      	sub	sp, #88	; 0x58
 800f874:	af08      	add	r7, sp, #32
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800f87e:	2300      	movs	r3, #0
 800f880:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800f882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f886:	4313      	orrs	r3, r2
 800f888:	d103      	bne.n	800f892 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800f88a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f88c:	f023 0310 	bic.w	r3, r3, #16
 800f890:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800f892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800f89c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	d038      	beq.n	800f916 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800f8a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f8a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f8ac:	f7f1 f9ec 	bl	8000c88 <__aeabi_uldivmod>
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800f8b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8ba:	2b09      	cmp	r3, #9
 800f8bc:	d804      	bhi.n	800f8c8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800f8be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8c2:	3330      	adds	r3, #48	; 0x30
 800f8c4:	b2da      	uxtb	r2, r3
 800f8c6:	e00d      	b.n	800f8e4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800f8c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8ca:	f003 0320 	and.w	r3, r3, #32
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d001      	beq.n	800f8d6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800f8d2:	2241      	movs	r2, #65	; 0x41
 800f8d4:	e000      	b.n	800f8d8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800f8d6:	2261      	movs	r2, #97	; 0x61
 800f8d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8dc:	4413      	add	r3, r2
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	3b0a      	subs	r3, #10
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e6:	1c59      	adds	r1, r3, #1
 800f8e8:	6379      	str	r1, [r7, #52]	; 0x34
 800f8ea:	3338      	adds	r3, #56	; 0x38
 800f8ec:	443b      	add	r3, r7
 800f8ee:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800f8f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f8f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f8fa:	f7f1 f9c5 	bl	8000c88 <__aeabi_uldivmod>
 800f8fe:	4602      	mov	r2, r0
 800f900:	460b      	mov	r3, r1
 800f902:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800f906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f90a:	4313      	orrs	r3, r2
 800f90c:	d003      	beq.n	800f916 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f910:	2b1f      	cmp	r3, #31
 800f912:	d800      	bhi.n	800f916 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800f914:	e7c6      	b.n	800f8a4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800f916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f918:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f91a:	9206      	str	r2, [sp, #24]
 800f91c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f91e:	9205      	str	r2, [sp, #20]
 800f920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f922:	9204      	str	r2, [sp, #16]
 800f924:	9303      	str	r3, [sp, #12]
 800f926:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f92a:	9302      	str	r3, [sp, #8]
 800f92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92e:	9301      	str	r3, [sp, #4]
 800f930:	f107 0310 	add.w	r3, r7, #16
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	68b9      	ldr	r1, [r7, #8]
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f7ff fe54 	bl	800f5ea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800f942:	4603      	mov	r3, r0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3738      	adds	r7, #56	; 0x38
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	0000      	movs	r0, r0
	...

0800f950 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f950:	b590      	push	{r4, r7, lr}
 800f952:	b09d      	sub	sp, #116	; 0x74
 800f954:	af04      	add	r7, sp, #16
 800f956:	6178      	str	r0, [r7, #20]
 800f958:	6139      	str	r1, [r7, #16]
 800f95a:	60fa      	str	r2, [r7, #12]
 800f95c:	60bb      	str	r3, [r7, #8]
 800f95e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800f962:	2300      	movs	r3, #0
 800f964:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800f966:	f04f 0200 	mov.w	r2, #0
 800f96a:	f04f 0300 	mov.w	r3, #0
 800f96e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800f972:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f97a:	f7f1 f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10f      	bne.n	800f9a4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800f984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f986:	9303      	str	r3, [sp, #12]
 800f988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f98a:	9302      	str	r3, [sp, #8]
 800f98c:	2303      	movs	r3, #3
 800f98e:	9301      	str	r3, [sp, #4]
 800f990:	4ba7      	ldr	r3, [pc, #668]	; (800fc30 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	6939      	ldr	r1, [r7, #16]
 800f99a:	6978      	ldr	r0, [r7, #20]
 800f99c:	f7ff fdd5 	bl	800f54a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	e230      	b.n	800fe06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800f9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800f9ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9b0:	f7f1 f894 	bl	8000adc <__aeabi_dcmplt>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00f      	beq.n	800f9da <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800f9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9bc:	9303      	str	r3, [sp, #12]
 800f9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9c0:	9302      	str	r3, [sp, #8]
 800f9c2:	2304      	movs	r3, #4
 800f9c4:	9301      	str	r3, [sp, #4]
 800f9c6:	4b9b      	ldr	r3, [pc, #620]	; (800fc34 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	6939      	ldr	r1, [r7, #16]
 800f9d0:	6978      	ldr	r0, [r7, #20]
 800f9d2:	f7ff fdba 	bl	800f54a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	e215      	b.n	800fe06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800f9da:	f04f 32ff 	mov.w	r2, #4294967295
 800f9de:	4b96      	ldr	r3, [pc, #600]	; (800fc38 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800f9e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9e4:	f7f1 f898 	bl	8000b18 <__aeabi_dcmpgt>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d01d      	beq.n	800fa2a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800f9ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800f9f8:	4b90      	ldr	r3, [pc, #576]	; (800fc3c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800f9fa:	e000      	b.n	800f9fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800f9fc:	4b90      	ldr	r3, [pc, #576]	; (800fc40 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800f9fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa00:	f002 0204 	and.w	r2, r2, #4
 800fa04:	2a00      	cmp	r2, #0
 800fa06:	d001      	beq.n	800fa0c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800fa08:	2204      	movs	r2, #4
 800fa0a:	e000      	b.n	800fa0e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800fa0c:	2203      	movs	r2, #3
 800fa0e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fa10:	9103      	str	r1, [sp, #12]
 800fa12:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fa14:	9102      	str	r1, [sp, #8]
 800fa16:	9201      	str	r2, [sp, #4]
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	6939      	ldr	r1, [r7, #16]
 800fa20:	6978      	ldr	r0, [r7, #20]
 800fa22:	f7ff fd92 	bl	800f54a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800fa26:	4603      	mov	r3, r0
 800fa28:	e1ed      	b.n	800fe06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800fa2a:	a37d      	add	r3, pc, #500	; (adr r3, 800fc20 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800fa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa34:	f7f1 f870 	bl	8000b18 <__aeabi_dcmpgt>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d109      	bne.n	800fa52 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800fa3e:	a37a      	add	r3, pc, #488	; (adr r3, 800fc28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa48:	f7f1 f848 	bl	8000adc <__aeabi_dcmplt>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00f      	beq.n	800fa72 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800fa52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa54:	9302      	str	r3, [sp, #8]
 800fa56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	ed97 0b00 	vldr	d0, [r7]
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	6939      	ldr	r1, [r7, #16]
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f000 f9d5 	bl	800fe18 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	e1c9      	b.n	800fe06 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800fa72:	2300      	movs	r3, #0
 800fa74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800fa78:	f04f 0200 	mov.w	r2, #0
 800fa7c:	f04f 0300 	mov.w	r3, #0
 800fa80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa84:	f7f1 f82a 	bl	8000adc <__aeabi_dcmplt>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00e      	beq.n	800faac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800fa94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa98:	f04f 0000 	mov.w	r0, #0
 800fa9c:	f04f 0100 	mov.w	r1, #0
 800faa0:	f7f0 fbf2 	bl	8000288 <__aeabi_dsub>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800faac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800faae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d101      	bne.n	800faba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800fab6:	2306      	movs	r3, #6
 800fab8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800faba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fabc:	2b1f      	cmp	r3, #31
 800fabe:	d80e      	bhi.n	800fade <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800fac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fac2:	2b09      	cmp	r3, #9
 800fac4:	d90b      	bls.n	800fade <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800fac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fac8:	1c5a      	adds	r2, r3, #1
 800faca:	65fa      	str	r2, [r7, #92]	; 0x5c
 800facc:	3360      	adds	r3, #96	; 0x60
 800face:	443b      	add	r3, r7
 800fad0:	2230      	movs	r2, #48	; 0x30
 800fad2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800fad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fad8:	3b01      	subs	r3, #1
 800fada:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800fadc:	e7ed      	b.n	800faba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800fade:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fae2:	f7f1 f839 	bl	8000b58 <__aeabi_d2iz>
 800fae6:	4603      	mov	r3, r0
 800fae8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800faea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800faec:	f7f0 fd1a 	bl	8000524 <__aeabi_i2d>
 800faf0:	4602      	mov	r2, r0
 800faf2:	460b      	mov	r3, r1
 800faf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800faf8:	f7f0 fbc6 	bl	8000288 <__aeabi_dsub>
 800fafc:	4602      	mov	r2, r0
 800fafe:	460b      	mov	r3, r1
 800fb00:	4610      	mov	r0, r2
 800fb02:	4619      	mov	r1, r3
 800fb04:	4a4f      	ldr	r2, [pc, #316]	; (800fc44 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800fb06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb08:	00db      	lsls	r3, r3, #3
 800fb0a:	4413      	add	r3, r2
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fd72 	bl	80005f8 <__aeabi_dmul>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800fb1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800fb20:	f7f1 f842 	bl	8000ba8 <__aeabi_d2uiz>
 800fb24:	4603      	mov	r3, r0
 800fb26:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800fb28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fb2a:	f7f0 fceb 	bl	8000504 <__aeabi_ui2d>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800fb36:	f7f0 fba7 	bl	8000288 <__aeabi_dsub>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800fb42:	f04f 0200 	mov.w	r2, #0
 800fb46:	4b40      	ldr	r3, [pc, #256]	; (800fc48 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800fb48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fb4c:	f7f0 ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d016      	beq.n	800fb84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800fb56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb58:	3301      	adds	r3, #1
 800fb5a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800fb5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fb5e:	f7f0 fcd1 	bl	8000504 <__aeabi_ui2d>
 800fb62:	4a38      	ldr	r2, [pc, #224]	; (800fc44 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800fb64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb66:	00db      	lsls	r3, r3, #3
 800fb68:	4413      	add	r3, r2
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	f7f0 ffc9 	bl	8000b04 <__aeabi_dcmpge>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d01a      	beq.n	800fbae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800fb7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb7e:	3301      	adds	r3, #1
 800fb80:	657b      	str	r3, [r7, #84]	; 0x54
 800fb82:	e014      	b.n	800fbae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800fb84:	f04f 0200 	mov.w	r2, #0
 800fb88:	4b2f      	ldr	r3, [pc, #188]	; (800fc48 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800fb8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fb8e:	f7f0 ffa5 	bl	8000adc <__aeabi_dcmplt>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d10a      	bne.n	800fbae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800fb98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d004      	beq.n	800fba8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800fb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba0:	f003 0301 	and.w	r3, r3, #1
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d002      	beq.n	800fbae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800fba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbaa:	3301      	adds	r3, #1
 800fbac:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800fbae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d14b      	bne.n	800fc4c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800fbb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fbb6:	f7f0 fcb5 	bl	8000524 <__aeabi_i2d>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fbc2:	f7f0 fb61 	bl	8000288 <__aeabi_dsub>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800fbce:	2301      	movs	r3, #1
 800fbd0:	461c      	mov	r4, r3
 800fbd2:	f04f 0200 	mov.w	r2, #0
 800fbd6:	4b1c      	ldr	r3, [pc, #112]	; (800fc48 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800fbd8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fbdc:	f7f0 ff7e 	bl	8000adc <__aeabi_dcmplt>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d101      	bne.n	800fbea <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	461c      	mov	r4, r3
 800fbea:	b2e3      	uxtb	r3, r4
 800fbec:	f083 0301 	eor.w	r3, r3, #1
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d109      	bne.n	800fc0a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800fbf6:	f04f 0200 	mov.w	r2, #0
 800fbfa:	4b13      	ldr	r3, [pc, #76]	; (800fc48 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800fbfc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fc00:	f7f0 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d06d      	beq.n	800fce6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800fc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc0c:	f003 0301 	and.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d068      	beq.n	800fce6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800fc14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc16:	3301      	adds	r3, #1
 800fc18:	657b      	str	r3, [r7, #84]	; 0x54
 800fc1a:	e064      	b.n	800fce6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800fc1c:	f3af 8000 	nop.w
 800fc20:	00000000 	.word	0x00000000
 800fc24:	41cdcd65 	.word	0x41cdcd65
 800fc28:	00000000 	.word	0x00000000
 800fc2c:	c1cdcd65 	.word	0xc1cdcd65
 800fc30:	080187b0 	.word	0x080187b0
 800fc34:	080187b4 	.word	0x080187b4
 800fc38:	7fefffff 	.word	0x7fefffff
 800fc3c:	080187bc 	.word	0x080187bc
 800fc40:	080187c4 	.word	0x080187c4
 800fc44:	080189d8 	.word	0x080189d8
 800fc48:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800fc4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800fc50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc52:	2b1f      	cmp	r3, #31
 800fc54:	d826      	bhi.n	800fca4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800fc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800fc5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc5e:	4b6c      	ldr	r3, [pc, #432]	; (800fe10 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800fc60:	fba3 2301 	umull	r2, r3, r3, r1
 800fc64:	08da      	lsrs	r2, r3, #3
 800fc66:	4613      	mov	r3, r2
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	4413      	add	r3, r2
 800fc6c:	005b      	lsls	r3, r3, #1
 800fc6e:	1aca      	subs	r2, r1, r3
 800fc70:	b2d2      	uxtb	r2, r2
 800fc72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc74:	1c59      	adds	r1, r3, #1
 800fc76:	65f9      	str	r1, [r7, #92]	; 0x5c
 800fc78:	3230      	adds	r2, #48	; 0x30
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	3360      	adds	r3, #96	; 0x60
 800fc7e:	443b      	add	r3, r7
 800fc80:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800fc84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc86:	4a62      	ldr	r2, [pc, #392]	; (800fe10 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800fc88:	fba2 2303 	umull	r2, r3, r2, r3
 800fc8c:	08db      	lsrs	r3, r3, #3
 800fc8e:	653b      	str	r3, [r7, #80]	; 0x50
 800fc90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	bf0c      	ite	eq
 800fc96:	2301      	moveq	r3, #1
 800fc98:	2300      	movne	r3, #0
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d100      	bne.n	800fca2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800fca0:	e7d6      	b.n	800fc50 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800fca2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800fca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fca6:	2b1f      	cmp	r3, #31
 800fca8:	d806      	bhi.n	800fcb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800fcaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcac:	1e5a      	subs	r2, r3, #1
 800fcae:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d001      	beq.n	800fcb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e000      	b.n	800fcba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d008      	beq.n	800fcd0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800fcbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcc0:	1c5a      	adds	r2, r3, #1
 800fcc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fcc4:	3360      	adds	r3, #96	; 0x60
 800fcc6:	443b      	add	r3, r7
 800fcc8:	2230      	movs	r2, #48	; 0x30
 800fcca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800fcce:	e7e9      	b.n	800fca4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800fcd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcd2:	2b1f      	cmp	r3, #31
 800fcd4:	d807      	bhi.n	800fce6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800fcd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcd8:	1c5a      	adds	r2, r3, #1
 800fcda:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fcdc:	3360      	adds	r3, #96	; 0x60
 800fcde:	443b      	add	r3, r7
 800fce0:	222e      	movs	r2, #46	; 0x2e
 800fce2:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800fce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fce8:	2b1f      	cmp	r3, #31
 800fcea:	d827      	bhi.n	800fd3c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800fcec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcee:	4b49      	ldr	r3, [pc, #292]	; (800fe14 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800fcf0:	fb83 1302 	smull	r1, r3, r3, r2
 800fcf4:	1099      	asrs	r1, r3, #2
 800fcf6:	17d3      	asrs	r3, r2, #31
 800fcf8:	1ac9      	subs	r1, r1, r3
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	440b      	add	r3, r1
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	1ad1      	subs	r1, r2, r3
 800fd04:	b2ca      	uxtb	r2, r1
 800fd06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd08:	1c59      	adds	r1, r3, #1
 800fd0a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800fd0c:	3230      	adds	r2, #48	; 0x30
 800fd0e:	b2d2      	uxtb	r2, r2
 800fd10:	3360      	adds	r3, #96	; 0x60
 800fd12:	443b      	add	r3, r7
 800fd14:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800fd18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd1a:	4a3e      	ldr	r2, [pc, #248]	; (800fe14 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800fd1c:	fb82 1203 	smull	r1, r2, r2, r3
 800fd20:	1092      	asrs	r2, r2, #2
 800fd22:	17db      	asrs	r3, r3, #31
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	657b      	str	r3, [r7, #84]	; 0x54
 800fd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	bf0c      	ite	eq
 800fd2e:	2301      	moveq	r3, #1
 800fd30:	2300      	movne	r3, #0
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d100      	bne.n	800fd3a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800fd38:	e7d5      	b.n	800fce6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800fd3a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800fd3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd3e:	f003 0302 	and.w	r3, r3, #2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d123      	bne.n	800fd8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800fd46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01e      	beq.n	800fd8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800fd50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00b      	beq.n	800fd6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800fd56:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d104      	bne.n	800fd68 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800fd5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd60:	f003 030c 	and.w	r3, r3, #12
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800fd68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800fd6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d20b      	bcs.n	800fd8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800fd76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd78:	2b1f      	cmp	r3, #31
 800fd7a:	d808      	bhi.n	800fd8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800fd7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fd82:	3360      	adds	r3, #96	; 0x60
 800fd84:	443b      	add	r3, r7
 800fd86:	2230      	movs	r2, #48	; 0x30
 800fd88:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800fd8c:	e7ef      	b.n	800fd6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800fd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd90:	2b1f      	cmp	r3, #31
 800fd92:	d827      	bhi.n	800fde4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800fd94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d008      	beq.n	800fdae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800fd9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fda2:	3360      	adds	r3, #96	; 0x60
 800fda4:	443b      	add	r3, r7
 800fda6:	222d      	movs	r2, #45	; 0x2d
 800fda8:	f803 2c48 	strb.w	r2, [r3, #-72]
 800fdac:	e01a      	b.n	800fde4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800fdae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdb0:	f003 0304 	and.w	r3, r3, #4
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d008      	beq.n	800fdca <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800fdb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdba:	1c5a      	adds	r2, r3, #1
 800fdbc:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fdbe:	3360      	adds	r3, #96	; 0x60
 800fdc0:	443b      	add	r3, r7
 800fdc2:	222b      	movs	r2, #43	; 0x2b
 800fdc4:	f803 2c48 	strb.w	r2, [r3, #-72]
 800fdc8:	e00c      	b.n	800fde4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800fdca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdcc:	f003 0308 	and.w	r3, r3, #8
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d007      	beq.n	800fde4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800fdd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fdda:	3360      	adds	r3, #96	; 0x60
 800fddc:	443b      	add	r3, r7
 800fdde:	2220      	movs	r2, #32
 800fde0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800fde4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fde6:	9303      	str	r3, [sp, #12]
 800fde8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdea:	9302      	str	r3, [sp, #8]
 800fdec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdee:	9301      	str	r3, [sp, #4]
 800fdf0:	f107 0318 	add.w	r3, r7, #24
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	6939      	ldr	r1, [r7, #16]
 800fdfc:	6978      	ldr	r0, [r7, #20]
 800fdfe:	f7ff fba4 	bl	800f54a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800fe02:	4603      	mov	r3, r0
 800fe04:	bf00      	nop
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3764      	adds	r7, #100	; 0x64
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd90      	pop	{r4, r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	cccccccd 	.word	0xcccccccd
 800fe14:	66666667 	.word	0x66666667

0800fe18 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	b09f      	sub	sp, #124	; 0x7c
 800fe1e:	af06      	add	r7, sp, #24
 800fe20:	6278      	str	r0, [r7, #36]	; 0x24
 800fe22:	6239      	str	r1, [r7, #32]
 800fe24:	61fa      	str	r2, [r7, #28]
 800fe26:	61bb      	str	r3, [r7, #24]
 800fe28:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800fe2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fe30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fe34:	f7f0 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d014      	beq.n	800fe68 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800fe3e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe42:	4bc1      	ldr	r3, [pc, #772]	; (8010148 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800fe44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fe48:	f7f0 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d10a      	bne.n	800fe68 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800fe52:	f04f 32ff 	mov.w	r2, #4294967295
 800fe56:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800fe5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fe5e:	f7f0 fe3d 	bl	8000adc <__aeabi_dcmplt>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d012      	beq.n	800fe8e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800fe68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe6c:	9302      	str	r3, [sp, #8]
 800fe6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	ed97 0b04 	vldr	d0, [r7, #16]
 800fe7e:	69bb      	ldr	r3, [r7, #24]
 800fe80:	69fa      	ldr	r2, [r7, #28]
 800fe82:	6a39      	ldr	r1, [r7, #32]
 800fe84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe86:	f7ff fd63 	bl	800f950 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	e23f      	b.n	801030e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800fe8e:	2301      	movs	r3, #1
 800fe90:	461e      	mov	r6, r3
 800fe92:	f04f 0200 	mov.w	r2, #0
 800fe96:	f04f 0300 	mov.w	r3, #0
 800fe9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fe9e:	f7f0 fe1d 	bl	8000adc <__aeabi_dcmplt>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800fea8:	2300      	movs	r3, #0
 800feaa:	461e      	mov	r6, r3
 800feac:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800feb0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d009      	beq.n	800fecc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	603b      	str	r3, [r7, #0]
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800fec2:	607b      	str	r3, [r7, #4]
 800fec4:	ed97 7b00 	vldr	d7, [r7]
 800fec8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800fecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d102      	bne.n	800fede <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800fed8:	2306      	movs	r3, #6
 800feda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800fede:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fee2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800fee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800feea:	f04f 0200 	mov.w	r2, #0
 800feee:	f04f 0300 	mov.w	r3, #0
 800fef2:	0d0a      	lsrs	r2, r1, #20
 800fef4:	2300      	movs	r3, #0
 800fef6:	4613      	mov	r3, r2
 800fef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fefc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ff00:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800ff02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ff06:	4690      	mov	r8, r2
 800ff08:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800ff0c:	4644      	mov	r4, r8
 800ff0e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800ff12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ff16:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800ff1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ff1c:	f7f0 fb02 	bl	8000524 <__aeabi_i2d>
 800ff20:	a37d      	add	r3, pc, #500	; (adr r3, 8010118 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	f7f0 fb67 	bl	80005f8 <__aeabi_dmul>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	4610      	mov	r0, r2
 800ff30:	4619      	mov	r1, r3
 800ff32:	a37b      	add	r3, pc, #492	; (adr r3, 8010120 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	f7f0 f9a8 	bl	800028c <__adddf3>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	460b      	mov	r3, r1
 800ff40:	4614      	mov	r4, r2
 800ff42:	461d      	mov	r5, r3
 800ff44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ff48:	f04f 0200 	mov.w	r2, #0
 800ff4c:	4b7f      	ldr	r3, [pc, #508]	; (801014c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800ff4e:	f7f0 f99b 	bl	8000288 <__aeabi_dsub>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4610      	mov	r0, r2
 800ff58:	4619      	mov	r1, r3
 800ff5a:	a373      	add	r3, pc, #460	; (adr r3, 8010128 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	f7f0 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	4620      	mov	r0, r4
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	f7f0 f98e 	bl	800028c <__adddf3>
 800ff70:	4602      	mov	r2, r0
 800ff72:	460b      	mov	r3, r1
 800ff74:	4610      	mov	r0, r2
 800ff76:	4619      	mov	r1, r3
 800ff78:	f7f0 fdee 	bl	8000b58 <__aeabi_d2iz>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800ff80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ff82:	f7f0 facf 	bl	8000524 <__aeabi_i2d>
 800ff86:	a36a      	add	r3, pc, #424	; (adr r3, 8010130 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8c:	f7f0 fb34 	bl	80005f8 <__aeabi_dmul>
 800ff90:	4602      	mov	r2, r0
 800ff92:	460b      	mov	r3, r1
 800ff94:	4610      	mov	r0, r2
 800ff96:	4619      	mov	r1, r3
 800ff98:	f04f 0200 	mov.w	r2, #0
 800ff9c:	4b6c      	ldr	r3, [pc, #432]	; (8010150 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800ff9e:	f7f0 f975 	bl	800028c <__adddf3>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	f7f0 fdd5 	bl	8000b58 <__aeabi_d2iz>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800ffb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ffb4:	f7f0 fab6 	bl	8000524 <__aeabi_i2d>
 800ffb8:	a35f      	add	r3, pc, #380	; (adr r3, 8010138 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	f7f0 fb1b 	bl	80005f8 <__aeabi_dmul>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	4614      	mov	r4, r2
 800ffc8:	461d      	mov	r5, r3
 800ffca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ffcc:	f7f0 faaa 	bl	8000524 <__aeabi_i2d>
 800ffd0:	a35b      	add	r3, pc, #364	; (adr r3, 8010140 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	f7f0 fb0f 	bl	80005f8 <__aeabi_dmul>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 f951 	bl	8000288 <__aeabi_dsub>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800ffee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fff2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fff6:	f7f0 faff 	bl	80005f8 <__aeabi_dmul>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8010002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010004:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8010008:	17da      	asrs	r2, r3, #31
 801000a:	469a      	mov	sl, r3
 801000c:	4693      	mov	fp, r2
 801000e:	f04f 0200 	mov.w	r2, #0
 8010012:	f04f 0300 	mov.w	r3, #0
 8010016:	ea4f 530a 	mov.w	r3, sl, lsl #20
 801001a:	2200      	movs	r2, #0
 801001c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8010020:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010024:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	f7f0 f92e 	bl	800028c <__adddf3>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	4690      	mov	r8, r2
 8010036:	4699      	mov	r9, r3
 8010038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801003c:	f04f 0000 	mov.w	r0, #0
 8010040:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010044:	f7f0 f920 	bl	8000288 <__aeabi_dsub>
 8010048:	4602      	mov	r2, r0
 801004a:	460b      	mov	r3, r1
 801004c:	4692      	mov	sl, r2
 801004e:	469b      	mov	fp, r3
 8010050:	f04f 0200 	mov.w	r2, #0
 8010054:	4b3f      	ldr	r3, [pc, #252]	; (8010154 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 8010056:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801005a:	f7f0 fbf7 	bl	800084c <__aeabi_ddiv>
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	4610      	mov	r0, r2
 8010064:	4619      	mov	r1, r3
 8010066:	f04f 0200 	mov.w	r2, #0
 801006a:	4b3b      	ldr	r3, [pc, #236]	; (8010158 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 801006c:	f7f0 f90e 	bl	800028c <__adddf3>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010078:	f7f0 fbe8 	bl	800084c <__aeabi_ddiv>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	4610      	mov	r0, r2
 8010082:	4619      	mov	r1, r3
 8010084:	f04f 0200 	mov.w	r2, #0
 8010088:	4b34      	ldr	r3, [pc, #208]	; (801015c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 801008a:	f7f0 f8ff 	bl	800028c <__adddf3>
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010096:	f7f0 fbd9 	bl	800084c <__aeabi_ddiv>
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	4650      	mov	r0, sl
 80100a0:	4659      	mov	r1, fp
 80100a2:	f7f0 f8f3 	bl	800028c <__adddf3>
 80100a6:	4602      	mov	r2, r0
 80100a8:	460b      	mov	r3, r1
 80100aa:	4640      	mov	r0, r8
 80100ac:	4649      	mov	r1, r9
 80100ae:	f7f0 fbcd 	bl	800084c <__aeabi_ddiv>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4610      	mov	r0, r2
 80100b8:	4619      	mov	r1, r3
 80100ba:	f04f 0200 	mov.w	r2, #0
 80100be:	4b28      	ldr	r3, [pc, #160]	; (8010160 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 80100c0:	f7f0 f8e4 	bl	800028c <__adddf3>
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	4620      	mov	r0, r4
 80100ca:	4629      	mov	r1, r5
 80100cc:	f7f0 fa94 	bl	80005f8 <__aeabi_dmul>
 80100d0:	4602      	mov	r2, r0
 80100d2:	460b      	mov	r3, r1
 80100d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80100d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80100dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80100e0:	f7f0 fcfc 	bl	8000adc <__aeabi_dcmplt>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00d      	beq.n	8010106 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 80100ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100ec:	3b01      	subs	r3, #1
 80100ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 80100f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80100f4:	f04f 0200 	mov.w	r2, #0
 80100f8:	4b17      	ldr	r3, [pc, #92]	; (8010158 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 80100fa:	f7f0 fba7 	bl	800084c <__aeabi_ddiv>
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8010106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010108:	2b63      	cmp	r3, #99	; 0x63
 801010a:	dc2b      	bgt.n	8010164 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 801010c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801010e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8010112:	db27      	blt.n	8010164 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8010114:	2304      	movs	r3, #4
 8010116:	e026      	b.n	8010166 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 8010118:	509f79fb 	.word	0x509f79fb
 801011c:	3fd34413 	.word	0x3fd34413
 8010120:	8b60c8b3 	.word	0x8b60c8b3
 8010124:	3fc68a28 	.word	0x3fc68a28
 8010128:	636f4361 	.word	0x636f4361
 801012c:	3fd287a7 	.word	0x3fd287a7
 8010130:	0979a371 	.word	0x0979a371
 8010134:	400a934f 	.word	0x400a934f
 8010138:	bbb55516 	.word	0xbbb55516
 801013c:	40026bb1 	.word	0x40026bb1
 8010140:	fefa39ef 	.word	0xfefa39ef
 8010144:	3fe62e42 	.word	0x3fe62e42
 8010148:	7fefffff 	.word	0x7fefffff
 801014c:	3ff80000 	.word	0x3ff80000
 8010150:	3fe00000 	.word	0x3fe00000
 8010154:	402c0000 	.word	0x402c0000
 8010158:	40240000 	.word	0x40240000
 801015c:	40180000 	.word	0x40180000
 8010160:	3ff00000 	.word	0x3ff00000
 8010164:	2305      	movs	r3, #5
 8010166:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8010168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801016c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010170:	2b00      	cmp	r3, #0
 8010172:	d03d      	beq.n	80101f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8010174:	a368      	add	r3, pc, #416	; (adr r3, 8010318 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801017e:	f7f0 fcc1 	bl	8000b04 <__aeabi_dcmpge>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d024      	beq.n	80101d2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 8010188:	a365      	add	r3, pc, #404	; (adr r3, 8010320 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010192:	f7f0 fca3 	bl	8000adc <__aeabi_dcmplt>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01a      	beq.n	80101d2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 801019c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80101a2:	429a      	cmp	r2, r3
 80101a4:	da07      	bge.n	80101b6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80101a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80101aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	3b01      	subs	r3, #1
 80101b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80101b4:	e002      	b.n	80101bc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80101bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80101c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80101c8:	2300      	movs	r3, #0
 80101ca:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101d0:	e00e      	b.n	80101f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80101d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00a      	beq.n	80101f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 80101da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d004      	beq.n	80101f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 80101e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101ea:	3b01      	subs	r3, #1
 80101ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80101f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80101f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80101fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d904      	bls.n	801020a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8010200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	657b      	str	r3, [r7, #84]	; 0x54
 8010208:	e001      	b.n	801020e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 801020a:	2300      	movs	r3, #0
 801020c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 801020e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010212:	f003 0302 	and.w	r3, r3, #2
 8010216:	2b00      	cmp	r3, #0
 8010218:	d004      	beq.n	8010224 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 801021a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8010220:	2300      	movs	r3, #0
 8010222:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8010224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010226:	2b00      	cmp	r3, #0
 8010228:	d009      	beq.n	801023e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 801022a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801022e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010232:	f7f0 fb0b 	bl	800084c <__aeabi_ddiv>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8010242:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8010246:	2b00      	cmp	r3, #0
 8010248:	d006      	beq.n	8010258 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	60bb      	str	r3, [r7, #8]
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8010254:	60fb      	str	r3, [r7, #12]
 8010256:	e003      	b.n	8010260 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 8010258:	ed97 7b04 	vldr	d7, [r7, #16]
 801025c:	ed87 7b02 	vstr	d7, [r7, #8]
 8010260:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010268:	9302      	str	r3, [sp, #8]
 801026a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801026c:	9301      	str	r3, [sp, #4]
 801026e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	ed97 0b02 	vldr	d0, [r7, #8]
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	69fa      	ldr	r2, [r7, #28]
 801027c:	6a39      	ldr	r1, [r7, #32]
 801027e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010280:	f7ff fb66 	bl	800f950 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8010284:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8010286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010288:	2b00      	cmp	r3, #0
 801028a:	d03f      	beq.n	801030c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 801028c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010290:	f003 0320 	and.w	r3, r3, #32
 8010294:	2b00      	cmp	r3, #0
 8010296:	d001      	beq.n	801029c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 8010298:	2045      	movs	r0, #69	; 0x45
 801029a:	e000      	b.n	801029e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 801029c:	2065      	movs	r0, #101	; 0x65
 801029e:	69fa      	ldr	r2, [r7, #28]
 80102a0:	1c53      	adds	r3, r2, #1
 80102a2:	61fb      	str	r3, [r7, #28]
 80102a4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	6a39      	ldr	r1, [r7, #32]
 80102aa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80102ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	bfb8      	it	lt
 80102b2:	425b      	neglt	r3, r3
 80102b4:	4618      	mov	r0, r3
 80102b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b8:	0fdb      	lsrs	r3, r3, #31
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102be:	3a01      	subs	r2, #1
 80102c0:	2105      	movs	r1, #5
 80102c2:	9105      	str	r1, [sp, #20]
 80102c4:	9204      	str	r2, [sp, #16]
 80102c6:	2200      	movs	r2, #0
 80102c8:	9203      	str	r2, [sp, #12]
 80102ca:	220a      	movs	r2, #10
 80102cc:	9202      	str	r2, [sp, #8]
 80102ce:	9301      	str	r3, [sp, #4]
 80102d0:	9000      	str	r0, [sp, #0]
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	69fa      	ldr	r2, [r7, #28]
 80102d6:	6a39      	ldr	r1, [r7, #32]
 80102d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102da:	f7ff fa62 	bl	800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80102de:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80102e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102e4:	f003 0302 	and.w	r3, r3, #2
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00f      	beq.n	801030c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80102ec:	69fa      	ldr	r2, [r7, #28]
 80102ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d908      	bls.n	801030c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 80102fa:	69fa      	ldr	r2, [r7, #28]
 80102fc:	1c53      	adds	r3, r2, #1
 80102fe:	61fb      	str	r3, [r7, #28]
 8010300:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	6a39      	ldr	r1, [r7, #32]
 8010306:	2020      	movs	r0, #32
 8010308:	47a0      	blx	r4
 801030a:	e7ef      	b.n	80102ec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 801030c:	69fb      	ldr	r3, [r7, #28]
}
 801030e:	4618      	mov	r0, r3
 8010310:	3764      	adds	r7, #100	; 0x64
 8010312:	46bd      	mov	sp, r7
 8010314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010318:	eb1c432d 	.word	0xeb1c432d
 801031c:	3f1a36e2 	.word	0x3f1a36e2
 8010320:	00000000 	.word	0x00000000
 8010324:	412e8480 	.word	0x412e8480

08010328 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8010328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	b0a1      	sub	sp, #132	; 0x84
 801032e:	af0a      	add	r7, sp, #40	; 0x28
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8010338:	2300      	movs	r3, #0
 801033a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d101      	bne.n	8010346 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 8010342:	4ba5      	ldr	r3, [pc, #660]	; (80105d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 8010344:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 84ae 	beq.w	8010cac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b25      	cmp	r3, #37	; 0x25
 8010356:	d00d      	beq.n	8010374 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	7818      	ldrb	r0, [r3, #0]
 801035c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801035e:	1c53      	adds	r3, r2, #1
 8010360:	647b      	str	r3, [r7, #68]	; 0x44
 8010362:	68fe      	ldr	r6, [r7, #12]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	68b9      	ldr	r1, [r7, #8]
 8010368:	47b0      	blx	r6
      format++;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	3301      	adds	r3, #1
 801036e:	603b      	str	r3, [r7, #0]
      continue;
 8010370:	f000 bc9a 	b.w	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	3301      	adds	r3, #1
 8010378:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 801037a:	2300      	movs	r3, #0
 801037c:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	3b20      	subs	r3, #32
 8010384:	2b10      	cmp	r3, #16
 8010386:	d857      	bhi.n	8010438 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 8010388:	a201      	add	r2, pc, #4	; (adr r2, 8010390 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 801038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801038e:	bf00      	nop
 8010390:	08010411 	.word	0x08010411
 8010394:	08010439 	.word	0x08010439
 8010398:	08010439 	.word	0x08010439
 801039c:	08010425 	.word	0x08010425
 80103a0:	08010439 	.word	0x08010439
 80103a4:	08010439 	.word	0x08010439
 80103a8:	08010439 	.word	0x08010439
 80103ac:	08010439 	.word	0x08010439
 80103b0:	08010439 	.word	0x08010439
 80103b4:	08010439 	.word	0x08010439
 80103b8:	08010439 	.word	0x08010439
 80103bc:	080103fd 	.word	0x080103fd
 80103c0:	08010439 	.word	0x08010439
 80103c4:	080103e9 	.word	0x080103e9
 80103c8:	08010439 	.word	0x08010439
 80103cc:	08010439 	.word	0x08010439
 80103d0:	080103d5 	.word	0x080103d5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80103d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103d6:	f043 0301 	orr.w	r3, r3, #1
 80103da:	657b      	str	r3, [r7, #84]	; 0x54
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	3301      	adds	r3, #1
 80103e0:	603b      	str	r3, [r7, #0]
 80103e2:	2301      	movs	r3, #1
 80103e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80103e6:	e02a      	b.n	801043e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80103e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ea:	f043 0302 	orr.w	r3, r3, #2
 80103ee:	657b      	str	r3, [r7, #84]	; 0x54
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	3301      	adds	r3, #1
 80103f4:	603b      	str	r3, [r7, #0]
 80103f6:	2301      	movs	r3, #1
 80103f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80103fa:	e020      	b.n	801043e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80103fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103fe:	f043 0304 	orr.w	r3, r3, #4
 8010402:	657b      	str	r3, [r7, #84]	; 0x54
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	3301      	adds	r3, #1
 8010408:	603b      	str	r3, [r7, #0]
 801040a:	2301      	movs	r3, #1
 801040c:	64bb      	str	r3, [r7, #72]	; 0x48
 801040e:	e016      	b.n	801043e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8010410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010412:	f043 0308 	orr.w	r3, r3, #8
 8010416:	657b      	str	r3, [r7, #84]	; 0x54
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	3301      	adds	r3, #1
 801041c:	603b      	str	r3, [r7, #0]
 801041e:	2301      	movs	r3, #1
 8010420:	64bb      	str	r3, [r7, #72]	; 0x48
 8010422:	e00c      	b.n	801043e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8010424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010426:	f043 0310 	orr.w	r3, r3, #16
 801042a:	657b      	str	r3, [r7, #84]	; 0x54
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	3301      	adds	r3, #1
 8010430:	603b      	str	r3, [r7, #0]
 8010432:	2301      	movs	r3, #1
 8010434:	64bb      	str	r3, [r7, #72]	; 0x48
 8010436:	e002      	b.n	801043e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 8010438:	2300      	movs	r3, #0
 801043a:	64bb      	str	r3, [r7, #72]	; 0x48
 801043c:	bf00      	nop
      }
    } while (n);
 801043e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010440:	2b00      	cmp	r3, #0
 8010442:	d000      	beq.n	8010446 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 8010444:	e79b      	b.n	801037e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 8010446:	2300      	movs	r3, #0
 8010448:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff f843 	bl	800f4da <_ZL9_is_digitc>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d005      	beq.n	8010466 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 801045a:	463b      	mov	r3, r7
 801045c:	4618      	mov	r0, r3
 801045e:	f7ff f850 	bl	800f502 <_ZL5_atoiPPKc>
 8010462:	6538      	str	r0, [r7, #80]	; 0x50
 8010464:	e01a      	b.n	801049c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	2b2a      	cmp	r3, #42	; 0x2a
 801046c:	d116      	bne.n	801049c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 801046e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010472:	1d1a      	adds	r2, r3, #4
 8010474:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 801047c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047e:	2b00      	cmp	r3, #0
 8010480:	da07      	bge.n	8010492 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 8010482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010484:	f043 0302 	orr.w	r3, r3, #2
 8010488:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 801048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048c:	425b      	negs	r3, r3
 801048e:	653b      	str	r3, [r7, #80]	; 0x50
 8010490:	e001      	b.n	8010496 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 8010492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010494:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	3301      	adds	r3, #1
 801049a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 801049c:	2300      	movs	r3, #0
 801049e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	2b2e      	cmp	r3, #46	; 0x2e
 80104a6:	d126      	bne.n	80104f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 80104a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80104ae:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	3301      	adds	r3, #1
 80104b4:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff f80d 	bl	800f4da <_ZL9_is_digitc>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d005      	beq.n	80104d2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 80104c6:	463b      	mov	r3, r7
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7ff f81a 	bl	800f502 <_ZL5_atoiPPKc>
 80104ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 80104d0:	e011      	b.n	80104f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2b2a      	cmp	r3, #42	; 0x2a
 80104d8:	d10d      	bne.n	80104f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 80104da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104de:	1d1a      	adds	r2, r3, #4
 80104e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104ee:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	3301      	adds	r3, #1
 80104f4:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	3b68      	subs	r3, #104	; 0x68
 80104fc:	2b12      	cmp	r3, #18
 80104fe:	d867      	bhi.n	80105d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 8010500:	a201      	add	r2, pc, #4	; (adr r2, 8010508 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 8010502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010506:	bf00      	nop
 8010508:	0801057b 	.word	0x0801057b
 801050c:	080105d1 	.word	0x080105d1
 8010510:	080105b1 	.word	0x080105b1
 8010514:	080105d1 	.word	0x080105d1
 8010518:	08010555 	.word	0x08010555
 801051c:	080105d1 	.word	0x080105d1
 8010520:	080105d1 	.word	0x080105d1
 8010524:	080105d1 	.word	0x080105d1
 8010528:	080105d1 	.word	0x080105d1
 801052c:	080105d1 	.word	0x080105d1
 8010530:	080105d1 	.word	0x080105d1
 8010534:	080105d1 	.word	0x080105d1
 8010538:	080105a1 	.word	0x080105a1
 801053c:	080105d1 	.word	0x080105d1
 8010540:	080105d1 	.word	0x080105d1
 8010544:	080105d1 	.word	0x080105d1
 8010548:	080105d1 	.word	0x080105d1
 801054c:	080105d1 	.word	0x080105d1
 8010550:	080105c1 	.word	0x080105c1
      case 'l' :
        flags |= FLAGS_LONG;
 8010554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801055a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	3301      	adds	r3, #1
 8010560:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	2b6c      	cmp	r3, #108	; 0x6c
 8010568:	d134      	bne.n	80105d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 801056a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801056c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010570:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	3301      	adds	r3, #1
 8010576:	603b      	str	r3, [r7, #0]
        }
        break;
 8010578:	e02c      	b.n	80105d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 801057a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010580:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	2b68      	cmp	r3, #104	; 0x68
 801058e:	d125      	bne.n	80105dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 8010590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010596:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	3301      	adds	r3, #1
 801059c:	603b      	str	r3, [r7, #0]
        }
        break;
 801059e:	e01d      	b.n	80105dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80105a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105a6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	3301      	adds	r3, #1
 80105ac:	603b      	str	r3, [r7, #0]
        break;
 80105ae:	e016      	b.n	80105de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80105b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80105b6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	3301      	adds	r3, #1
 80105bc:	603b      	str	r3, [r7, #0]
        break;
 80105be:	e00e      	b.n	80105de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80105c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105c6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	3301      	adds	r3, #1
 80105cc:	603b      	str	r3, [r7, #0]
        break;
 80105ce:	e006      	b.n	80105de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 80105d0:	bf00      	nop
 80105d2:	e004      	b.n	80105de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 80105d4:	bf00      	nop
 80105d6:	e002      	b.n	80105de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 80105d8:	0800f455 	.word	0x0800f455
        break;
 80105dc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	3b25      	subs	r3, #37	; 0x25
 80105e4:	2b53      	cmp	r3, #83	; 0x53
 80105e6:	f200 8352 	bhi.w	8010c8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 80105ea:	a201      	add	r2, pc, #4	; (adr r2, 80105f0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 80105ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f0:	08010c77 	.word	0x08010c77
 80105f4:	08010c8f 	.word	0x08010c8f
 80105f8:	08010c8f 	.word	0x08010c8f
 80105fc:	08010c8f 	.word	0x08010c8f
 8010600:	08010c8f 	.word	0x08010c8f
 8010604:	08010c8f 	.word	0x08010c8f
 8010608:	08010c8f 	.word	0x08010c8f
 801060c:	08010c8f 	.word	0x08010c8f
 8010610:	08010c8f 	.word	0x08010c8f
 8010614:	08010c8f 	.word	0x08010c8f
 8010618:	08010c8f 	.word	0x08010c8f
 801061c:	08010c8f 	.word	0x08010c8f
 8010620:	08010c8f 	.word	0x08010c8f
 8010624:	08010c8f 	.word	0x08010c8f
 8010628:	08010c8f 	.word	0x08010c8f
 801062c:	08010c8f 	.word	0x08010c8f
 8010630:	08010c8f 	.word	0x08010c8f
 8010634:	08010c8f 	.word	0x08010c8f
 8010638:	08010c8f 	.word	0x08010c8f
 801063c:	08010c8f 	.word	0x08010c8f
 8010640:	08010c8f 	.word	0x08010c8f
 8010644:	08010c8f 	.word	0x08010c8f
 8010648:	08010c8f 	.word	0x08010c8f
 801064c:	08010c8f 	.word	0x08010c8f
 8010650:	08010c8f 	.word	0x08010c8f
 8010654:	08010c8f 	.word	0x08010c8f
 8010658:	08010c8f 	.word	0x08010c8f
 801065c:	08010c8f 	.word	0x08010c8f
 8010660:	08010c8f 	.word	0x08010c8f
 8010664:	08010c8f 	.word	0x08010c8f
 8010668:	08010c8f 	.word	0x08010c8f
 801066c:	08010c8f 	.word	0x08010c8f
 8010670:	08010a45 	.word	0x08010a45
 8010674:	080109f5 	.word	0x080109f5
 8010678:	08010a45 	.word	0x08010a45
 801067c:	08010c8f 	.word	0x08010c8f
 8010680:	08010c8f 	.word	0x08010c8f
 8010684:	08010c8f 	.word	0x08010c8f
 8010688:	08010c8f 	.word	0x08010c8f
 801068c:	08010c8f 	.word	0x08010c8f
 8010690:	08010c8f 	.word	0x08010c8f
 8010694:	08010c8f 	.word	0x08010c8f
 8010698:	08010c8f 	.word	0x08010c8f
 801069c:	08010c8f 	.word	0x08010c8f
 80106a0:	08010c8f 	.word	0x08010c8f
 80106a4:	08010c8f 	.word	0x08010c8f
 80106a8:	08010c8f 	.word	0x08010c8f
 80106ac:	08010c8f 	.word	0x08010c8f
 80106b0:	08010c8f 	.word	0x08010c8f
 80106b4:	08010c8f 	.word	0x08010c8f
 80106b8:	08010c8f 	.word	0x08010c8f
 80106bc:	08010741 	.word	0x08010741
 80106c0:	08010c8f 	.word	0x08010c8f
 80106c4:	08010c8f 	.word	0x08010c8f
 80106c8:	08010c8f 	.word	0x08010c8f
 80106cc:	08010c8f 	.word	0x08010c8f
 80106d0:	08010c8f 	.word	0x08010c8f
 80106d4:	08010c8f 	.word	0x08010c8f
 80106d8:	08010c8f 	.word	0x08010c8f
 80106dc:	08010c8f 	.word	0x08010c8f
 80106e0:	08010c8f 	.word	0x08010c8f
 80106e4:	08010741 	.word	0x08010741
 80106e8:	08010ab5 	.word	0x08010ab5
 80106ec:	08010741 	.word	0x08010741
 80106f0:	08010a45 	.word	0x08010a45
 80106f4:	080109f5 	.word	0x080109f5
 80106f8:	08010a45 	.word	0x08010a45
 80106fc:	08010c8f 	.word	0x08010c8f
 8010700:	08010741 	.word	0x08010741
 8010704:	08010c8f 	.word	0x08010c8f
 8010708:	08010c8f 	.word	0x08010c8f
 801070c:	08010c8f 	.word	0x08010c8f
 8010710:	08010c8f 	.word	0x08010c8f
 8010714:	08010c8f 	.word	0x08010c8f
 8010718:	08010741 	.word	0x08010741
 801071c:	08010c2b 	.word	0x08010c2b
 8010720:	08010c8f 	.word	0x08010c8f
 8010724:	08010c8f 	.word	0x08010c8f
 8010728:	08010b41 	.word	0x08010b41
 801072c:	08010c8f 	.word	0x08010c8f
 8010730:	08010741 	.word	0x08010741
 8010734:	08010c8f 	.word	0x08010c8f
 8010738:	08010c8f 	.word	0x08010c8f
 801073c:	08010741 	.word	0x08010741
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	2b78      	cmp	r3, #120	; 0x78
 8010746:	d003      	beq.n	8010750 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2b58      	cmp	r3, #88	; 0x58
 801074e:	d102      	bne.n	8010756 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 8010750:	2310      	movs	r3, #16
 8010752:	643b      	str	r3, [r7, #64]	; 0x40
 8010754:	e013      	b.n	801077e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	2b6f      	cmp	r3, #111	; 0x6f
 801075c:	d102      	bne.n	8010764 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 801075e:	2308      	movs	r3, #8
 8010760:	643b      	str	r3, [r7, #64]	; 0x40
 8010762:	e00c      	b.n	801077e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	2b62      	cmp	r3, #98	; 0x62
 801076a:	d102      	bne.n	8010772 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 801076c:	2302      	movs	r3, #2
 801076e:	643b      	str	r3, [r7, #64]	; 0x40
 8010770:	e005      	b.n	801077e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 8010772:	230a      	movs	r3, #10
 8010774:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8010776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010778:	f023 0310 	bic.w	r3, r3, #16
 801077c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	2b58      	cmp	r3, #88	; 0x58
 8010784:	d103      	bne.n	801078e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 8010786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010788:	f043 0320 	orr.w	r3, r3, #32
 801078c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b69      	cmp	r3, #105	; 0x69
 8010794:	d007      	beq.n	80107a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b64      	cmp	r3, #100	; 0x64
 801079c:	d003      	beq.n	80107a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 801079e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a0:	f023 030c 	bic.w	r3, r3, #12
 80107a4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80107a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d003      	beq.n	80107b8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 80107b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107b2:	f023 0301 	bic.w	r3, r3, #1
 80107b6:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	2b69      	cmp	r3, #105	; 0x69
 80107be:	d004      	beq.n	80107ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	2b64      	cmp	r3, #100	; 0x64
 80107c6:	f040 8097 	bne.w	80108f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80107ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d030      	beq.n	8010836 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80107d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107d8:	3307      	adds	r3, #7
 80107da:	f023 0307 	bic.w	r3, r3, #7
 80107de:	f103 0208 	add.w	r2, r3, #8
 80107e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80107e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80107ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	da05      	bge.n	8010802 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 80107f6:	2100      	movs	r1, #0
 80107f8:	4254      	negs	r4, r2
 80107fa:	eb61 0503 	sbc.w	r5, r1, r3
 80107fe:	4622      	mov	r2, r4
 8010800:	462b      	mov	r3, r5
 8010802:	6979      	ldr	r1, [r7, #20]
 8010804:	0fc9      	lsrs	r1, r1, #31
 8010806:	b2c9      	uxtb	r1, r1
 8010808:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801080a:	2600      	movs	r6, #0
 801080c:	4680      	mov	r8, r0
 801080e:	46b1      	mov	r9, r6
 8010810:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010812:	9008      	str	r0, [sp, #32]
 8010814:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010816:	9007      	str	r0, [sp, #28]
 8010818:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801081a:	9006      	str	r0, [sp, #24]
 801081c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8010820:	9102      	str	r1, [sp, #8]
 8010822:	e9cd 2300 	strd	r2, r3, [sp]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801082a:	68b9      	ldr	r1, [r7, #8]
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f7ff f81f 	bl	800f870 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8010832:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 8010834:	e0da      	b.n	80109ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 8010836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801083c:	2b00      	cmp	r3, #0
 801083e:	d020      	beq.n	8010882 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 8010840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010844:	1d1a      	adds	r2, r3, #4
 8010846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	2b00      	cmp	r3, #0
 8010852:	bfb8      	it	lt
 8010854:	425b      	neglt	r3, r3
 8010856:	4619      	mov	r1, r3
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	0fdb      	lsrs	r3, r3, #31
 801085c:	b2db      	uxtb	r3, r3
 801085e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010860:	9205      	str	r2, [sp, #20]
 8010862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010864:	9204      	str	r2, [sp, #16]
 8010866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010868:	9203      	str	r2, [sp, #12]
 801086a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801086c:	9202      	str	r2, [sp, #8]
 801086e:	9301      	str	r3, [sp, #4]
 8010870:	9100      	str	r1, [sp, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010876:	68b9      	ldr	r1, [r7, #8]
 8010878:	68f8      	ldr	r0, [r7, #12]
 801087a:	f7fe ff92 	bl	800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801087e:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8010880:	e0b4      	b.n	80109ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8010882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010888:	2b00      	cmp	r3, #0
 801088a:	d007      	beq.n	801089c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 801088c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010890:	1d1a      	adds	r2, r3, #4
 8010892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	b2db      	uxtb	r3, r3
 801089a:	e012      	b.n	80108c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 801089c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d007      	beq.n	80108b6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 80108a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108aa:	1d1a      	adds	r2, r3, #4
 80108ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	b21b      	sxth	r3, r3
 80108b4:	e005      	b.n	80108c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 80108b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108ba:	1d1a      	adds	r2, r3, #4
 80108bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	bfb8      	it	lt
 80108ca:	425b      	neglt	r3, r3
 80108cc:	4619      	mov	r1, r3
 80108ce:	6a3b      	ldr	r3, [r7, #32]
 80108d0:	0fdb      	lsrs	r3, r3, #31
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108d6:	9205      	str	r2, [sp, #20]
 80108d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108da:	9204      	str	r2, [sp, #16]
 80108dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108de:	9203      	str	r2, [sp, #12]
 80108e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108e2:	9202      	str	r2, [sp, #8]
 80108e4:	9301      	str	r3, [sp, #4]
 80108e6:	9100      	str	r1, [sp, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108ec:	68b9      	ldr	r1, [r7, #8]
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f7fe ff57 	bl	800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80108f4:	6478      	str	r0, [r7, #68]	; 0x44
          }
 80108f6:	e079      	b.n	80109ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80108f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d022      	beq.n	8010948 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8010902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010906:	3307      	adds	r3, #7
 8010908:	f023 0307 	bic.w	r3, r3, #7
 801090c:	f103 0208 	add.w	r2, r3, #8
 8010910:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801091a:	2000      	movs	r0, #0
 801091c:	468a      	mov	sl, r1
 801091e:	4683      	mov	fp, r0
 8010920:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010922:	9108      	str	r1, [sp, #32]
 8010924:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010926:	9107      	str	r1, [sp, #28]
 8010928:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801092a:	9106      	str	r1, [sp, #24]
 801092c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010930:	2100      	movs	r1, #0
 8010932:	9102      	str	r1, [sp, #8]
 8010934:	e9cd 2300 	strd	r2, r3, [sp]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801093c:	68b9      	ldr	r1, [r7, #8]
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7fe ff96 	bl	800f870 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8010944:	6478      	str	r0, [r7, #68]	; 0x44
 8010946:	e051      	b.n	80109ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8010948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801094a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801094e:	2b00      	cmp	r3, #0
 8010950:	d018      	beq.n	8010984 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8010952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010956:	1d1a      	adds	r2, r3, #4
 8010958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010960:	9205      	str	r2, [sp, #20]
 8010962:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010964:	9204      	str	r2, [sp, #16]
 8010966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010968:	9203      	str	r2, [sp, #12]
 801096a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801096c:	9202      	str	r2, [sp, #8]
 801096e:	2200      	movs	r2, #0
 8010970:	9201      	str	r2, [sp, #4]
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010978:	68b9      	ldr	r1, [r7, #8]
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f7fe ff11 	bl	800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8010980:	6478      	str	r0, [r7, #68]	; 0x44
 8010982:	e033      	b.n	80109ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8010984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801098a:	2b00      	cmp	r3, #0
 801098c:	d007      	beq.n	801099e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 801098e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010992:	1d1a      	adds	r2, r3, #4
 8010994:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	b2db      	uxtb	r3, r3
 801099c:	e012      	b.n	80109c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 801099e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d007      	beq.n	80109b8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 80109a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109ac:	1d1a      	adds	r2, r3, #4
 80109ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	e005      	b.n	80109c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 80109b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109bc:	1d1a      	adds	r2, r3, #4
 80109be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80109c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109c8:	9305      	str	r3, [sp, #20]
 80109ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109cc:	9304      	str	r3, [sp, #16]
 80109ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109d0:	9303      	str	r3, [sp, #12]
 80109d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109d4:	9302      	str	r3, [sp, #8]
 80109d6:	2300      	movs	r3, #0
 80109d8:	9301      	str	r3, [sp, #4]
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	9300      	str	r3, [sp, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109e2:	68b9      	ldr	r1, [r7, #8]
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7fe fedc 	bl	800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80109ea:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	3301      	adds	r3, #1
 80109f0:	603b      	str	r3, [r7, #0]
        break;
 80109f2:	e159      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	2b46      	cmp	r3, #70	; 0x46
 80109fa:	d103      	bne.n	8010a04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 80109fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109fe:	f043 0320 	orr.w	r3, r3, #32
 8010a02:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8010a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a08:	3307      	adds	r3, #7
 8010a0a:	f023 0307 	bic.w	r3, r3, #7
 8010a0e:	f103 0208 	add.w	r2, r3, #8
 8010a12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010a16:	ed93 7b00 	vldr	d7, [r3]
 8010a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a1c:	9302      	str	r3, [sp, #8]
 8010a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a20:	9301      	str	r3, [sp, #4]
 8010a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	eeb0 0a47 	vmov.f32	s0, s14
 8010a2a:	eef0 0a67 	vmov.f32	s1, s15
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a32:	68b9      	ldr	r1, [r7, #8]
 8010a34:	68f8      	ldr	r0, [r7, #12]
 8010a36:	f7fe ff8b 	bl	800f950 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8010a3a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	603b      	str	r3, [r7, #0]
        break;
 8010a42:	e131      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	2b67      	cmp	r3, #103	; 0x67
 8010a4a:	d003      	beq.n	8010a54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	2b47      	cmp	r3, #71	; 0x47
 8010a52:	d103      	bne.n	8010a5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 8010a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010a5a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	2b45      	cmp	r3, #69	; 0x45
 8010a62:	d003      	beq.n	8010a6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	2b47      	cmp	r3, #71	; 0x47
 8010a6a:	d103      	bne.n	8010a74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 8010a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a6e:	f043 0320 	orr.w	r3, r3, #32
 8010a72:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8010a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a78:	3307      	adds	r3, #7
 8010a7a:	f023 0307 	bic.w	r3, r3, #7
 8010a7e:	f103 0208 	add.w	r2, r3, #8
 8010a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010a86:	ed93 7b00 	vldr	d7, [r3]
 8010a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a8c:	9302      	str	r3, [sp, #8]
 8010a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a90:	9301      	str	r3, [sp, #4]
 8010a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	eeb0 0a47 	vmov.f32	s0, s14
 8010a9a:	eef0 0a67 	vmov.f32	s1, s15
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010aa2:	68b9      	ldr	r1, [r7, #8]
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	f7ff f9b7 	bl	800fe18 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8010aaa:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	603b      	str	r3, [r7, #0]
        break;
 8010ab2:	e0f9      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8010ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aba:	f003 0302 	and.w	r3, r3, #2
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d113      	bne.n	8010aea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8010ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010ac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010aca:	429a      	cmp	r2, r3
 8010acc:	bf8c      	ite	hi
 8010ace:	2301      	movhi	r3, #1
 8010ad0:	2300      	movls	r3, #0
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d008      	beq.n	8010aea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8010ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ada:	1c53      	adds	r3, r2, #1
 8010adc:	647b      	str	r3, [r7, #68]	; 0x44
 8010ade:	68fe      	ldr	r6, [r7, #12]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	68b9      	ldr	r1, [r7, #8]
 8010ae4:	2020      	movs	r0, #32
 8010ae6:	47b0      	blx	r6
          while (l++ < width) {
 8010ae8:	e7eb      	b.n	8010ac2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8010aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010aee:	1d1a      	adds	r2, r3, #4
 8010af0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	b2d8      	uxtb	r0, r3
 8010af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010afa:	1c53      	adds	r3, r2, #1
 8010afc:	647b      	str	r3, [r7, #68]	; 0x44
 8010afe:	68fe      	ldr	r6, [r7, #12]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 8010b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b08:	f003 0302 	and.w	r3, r3, #2
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d013      	beq.n	8010b38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8010b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b12:	1c5a      	adds	r2, r3, #1
 8010b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	bf8c      	ite	hi
 8010b1c:	2301      	movhi	r3, #1
 8010b1e:	2300      	movls	r3, #0
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d008      	beq.n	8010b38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 8010b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b28:	1c53      	adds	r3, r2, #1
 8010b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8010b2c:	68fe      	ldr	r6, [r7, #12]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	2020      	movs	r0, #32
 8010b34:	47b0      	blx	r6
          while (l++ < width) {
 8010b36:	e7eb      	b.n	8010b10 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	603b      	str	r3, [r7, #0]
        break;
 8010b3e:	e0b3      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8010b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b44:	1d1a      	adds	r2, r3, #4
 8010b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8010b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 8010b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b56:	e001      	b.n	8010b5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8010b58:	f04f 33ff 	mov.w	r3, #4294967295
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b60:	f7fe fc99 	bl	800f496 <_ZL10_strnlen_sPKcj>
 8010b64:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8010b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d007      	beq.n	8010b80 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8010b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d201      	bcs.n	8010b7c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8010b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7a:	e000      	b.n	8010b7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 8010b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8010b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d113      	bne.n	8010bb2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 8010b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	637a      	str	r2, [r7, #52]	; 0x34
 8010b90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b92:	429a      	cmp	r2, r3
 8010b94:	bf8c      	ite	hi
 8010b96:	2301      	movhi	r3, #1
 8010b98:	2300      	movls	r3, #0
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d008      	beq.n	8010bb2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8010ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ba2:	1c53      	adds	r3, r2, #1
 8010ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8010ba6:	68fe      	ldr	r6, [r7, #12]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68b9      	ldr	r1, [r7, #8]
 8010bac:	2020      	movs	r0, #32
 8010bae:	47b0      	blx	r6
          while (l++ < width) {
 8010bb0:	e7eb      	b.n	8010b8a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8010bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00b      	beq.n	8010bd2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8010bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d004      	beq.n	8010bce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8010bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bc6:	1e5a      	subs	r2, r3, #1
 8010bc8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d001      	beq.n	8010bd2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e000      	b.n	8010bd4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d00b      	beq.n	8010bf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8010bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bda:	1c5a      	adds	r2, r3, #1
 8010bdc:	63ba      	str	r2, [r7, #56]	; 0x38
 8010bde:	7818      	ldrb	r0, [r3, #0]
 8010be0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010be2:	1c53      	adds	r3, r2, #1
 8010be4:	647b      	str	r3, [r7, #68]	; 0x44
 8010be6:	68fe      	ldr	r6, [r7, #12]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	68b9      	ldr	r1, [r7, #8]
 8010bec:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8010bee:	e7e0      	b.n	8010bb2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8010bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf2:	f003 0302 	and.w	r3, r3, #2
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d013      	beq.n	8010c22 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8010bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bfc:	1c5a      	adds	r2, r3, #1
 8010bfe:	637a      	str	r2, [r7, #52]	; 0x34
 8010c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c02:	429a      	cmp	r2, r3
 8010c04:	bf8c      	ite	hi
 8010c06:	2301      	movhi	r3, #1
 8010c08:	2300      	movls	r3, #0
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d008      	beq.n	8010c22 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8010c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c12:	1c53      	adds	r3, r2, #1
 8010c14:	647b      	str	r3, [r7, #68]	; 0x44
 8010c16:	68fe      	ldr	r6, [r7, #12]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	68b9      	ldr	r1, [r7, #8]
 8010c1c:	2020      	movs	r0, #32
 8010c1e:	47b0      	blx	r6
          while (l++ < width) {
 8010c20:	e7eb      	b.n	8010bfa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	3301      	adds	r3, #1
 8010c26:	603b      	str	r3, [r7, #0]
        break;
 8010c28:	e03e      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8010c2a:	2308      	movs	r3, #8
 8010c2c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8010c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c30:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8010c34:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8010c36:	2300      	movs	r3, #0
 8010c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8010c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c40:	1d1a      	adds	r2, r3, #4
 8010c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	461a      	mov	r2, r3
 8010c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c4c:	9305      	str	r3, [sp, #20]
 8010c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c50:	9304      	str	r3, [sp, #16]
 8010c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c54:	9303      	str	r3, [sp, #12]
 8010c56:	2310      	movs	r3, #16
 8010c58:	9302      	str	r3, [sp, #8]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	9301      	str	r3, [sp, #4]
 8010c5e:	9200      	str	r2, [sp, #0]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c64:	68b9      	ldr	r1, [r7, #8]
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f7fe fd9b 	bl	800f7a2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8010c6c:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	3301      	adds	r3, #1
 8010c72:	603b      	str	r3, [r7, #0]
        break;
 8010c74:	e018      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8010c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c78:	1c53      	adds	r3, r2, #1
 8010c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8010c7c:	68fe      	ldr	r6, [r7, #12]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	68b9      	ldr	r1, [r7, #8]
 8010c82:	2025      	movs	r0, #37	; 0x25
 8010c84:	47b0      	blx	r6
        format++;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	603b      	str	r3, [r7, #0]
        break;
 8010c8c:	e00c      	b.n	8010ca8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	7818      	ldrb	r0, [r3, #0]
 8010c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c94:	1c53      	adds	r3, r2, #1
 8010c96:	647b      	str	r3, [r7, #68]	; 0x44
 8010c98:	68fe      	ldr	r6, [r7, #12]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	68b9      	ldr	r1, [r7, #8]
 8010c9e:	47b0      	blx	r6
        format++;
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	603b      	str	r3, [r7, #0]
        break;
 8010ca6:	bf00      	nop
  while (*format)
 8010ca8:	f7ff bb4d 	b.w	8010346 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8010cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d302      	bcc.n	8010cba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	1e5a      	subs	r2, r3, #1
 8010cb8:	e000      	b.n	8010cbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8010cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cbc:	68fc      	ldr	r4, [r7, #12]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68b9      	ldr	r1, [r7, #8]
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8010cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	375c      	adds	r7, #92	; 0x5c
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd2:	bf00      	nop

08010cd4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8010cd4:	b40f      	push	{r0, r1, r2, r3}
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b086      	sub	sp, #24
 8010cda:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8010cdc:	f107 031c 	add.w	r3, r7, #28
 8010ce0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8010ce2:	1d39      	adds	r1, r7, #4
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	f04f 32ff 	mov.w	r2, #4294967295
 8010cee:	4806      	ldr	r0, [pc, #24]	; (8010d08 <printf_+0x34>)
 8010cf0:	f7ff fb1a 	bl	8010328 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8010cf4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3710      	adds	r7, #16
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d02:	b004      	add	sp, #16
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	0800f471 	.word	0x0800f471

08010d0c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010d14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010d18:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8010d24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010d28:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8010d2c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <ITM_SendChar+0x2c>
 8010d34:	2301      	movs	r3, #1
 8010d36:	e000      	b.n	8010d3a <ITM_SendChar+0x2e>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d010      	beq.n	8010d60 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8010d3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	bf0c      	ite	eq
 8010d48:	2301      	moveq	r3, #1
 8010d4a:	2300      	movne	r3, #0
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d001      	beq.n	8010d56 <ITM_SendChar+0x4a>
    {
      __NOP();
 8010d52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8010d54:	e7f3      	b.n	8010d3e <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8010d56:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	b2d2      	uxtb	r2, r2
 8010d5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8010d60:	687b      	ldr	r3, [r7, #4]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	370c      	adds	r7, #12
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr

08010d6e <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b082      	sub	sp, #8
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	4603      	mov	r3, r0
 8010d76:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8010d78:	79fb      	ldrb	r3, [r7, #7]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7ff ffc6 	bl	8010d0c <ITM_SendChar>
}
 8010d80:	bf00      	nop
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <__NVIC_SetPriority>:
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	4603      	mov	r3, r0
 8010d90:	6039      	str	r1, [r7, #0]
 8010d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	db0a      	blt.n	8010db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	b2da      	uxtb	r2, r3
 8010da0:	490c      	ldr	r1, [pc, #48]	; (8010dd4 <__NVIC_SetPriority+0x4c>)
 8010da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010da6:	0112      	lsls	r2, r2, #4
 8010da8:	b2d2      	uxtb	r2, r2
 8010daa:	440b      	add	r3, r1
 8010dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010db0:	e00a      	b.n	8010dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	b2da      	uxtb	r2, r3
 8010db6:	4908      	ldr	r1, [pc, #32]	; (8010dd8 <__NVIC_SetPriority+0x50>)
 8010db8:	79fb      	ldrb	r3, [r7, #7]
 8010dba:	f003 030f 	and.w	r3, r3, #15
 8010dbe:	3b04      	subs	r3, #4
 8010dc0:	0112      	lsls	r2, r2, #4
 8010dc2:	b2d2      	uxtb	r2, r2
 8010dc4:	440b      	add	r3, r1
 8010dc6:	761a      	strb	r2, [r3, #24]
}
 8010dc8:	bf00      	nop
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr
 8010dd4:	e000e100 	.word	0xe000e100
 8010dd8:	e000ed00 	.word	0xe000ed00

08010ddc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010de0:	4b05      	ldr	r3, [pc, #20]	; (8010df8 <SysTick_Handler+0x1c>)
 8010de2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010de4:	f003 f8a8 	bl	8013f38 <xTaskGetSchedulerState>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d001      	beq.n	8010df2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010dee:	f004 f8d3 	bl	8014f98 <xPortSysTickHandler>
  }
}
 8010df2:	bf00      	nop
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop
 8010df8:	e000e010 	.word	0xe000e010

08010dfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010e00:	2100      	movs	r1, #0
 8010e02:	f06f 0004 	mvn.w	r0, #4
 8010e06:	f7ff ffbf 	bl	8010d88 <__NVIC_SetPriority>
#endif
}
 8010e0a:	bf00      	nop
 8010e0c:	bd80      	pop	{r7, pc}
	...

08010e10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e16:	f3ef 8305 	mrs	r3, IPSR
 8010e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8010e1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d003      	beq.n	8010e2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010e22:	f06f 0305 	mvn.w	r3, #5
 8010e26:	607b      	str	r3, [r7, #4]
 8010e28:	e00c      	b.n	8010e44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010e2a:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <osKernelInitialize+0x44>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d105      	bne.n	8010e3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010e32:	4b08      	ldr	r3, [pc, #32]	; (8010e54 <osKernelInitialize+0x44>)
 8010e34:	2201      	movs	r2, #1
 8010e36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	607b      	str	r3, [r7, #4]
 8010e3c:	e002      	b.n	8010e44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010e44:	687b      	ldr	r3, [r7, #4]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	370c      	adds	r7, #12
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	200015e4 	.word	0x200015e4

08010e58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e5e:	f3ef 8305 	mrs	r3, IPSR
 8010e62:	603b      	str	r3, [r7, #0]
  return(result);
 8010e64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8010e6a:	f06f 0305 	mvn.w	r3, #5
 8010e6e:	607b      	str	r3, [r7, #4]
 8010e70:	e010      	b.n	8010e94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010e72:	4b0b      	ldr	r3, [pc, #44]	; (8010ea0 <osKernelStart+0x48>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d109      	bne.n	8010e8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010e7a:	f7ff ffbf 	bl	8010dfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010e7e:	4b08      	ldr	r3, [pc, #32]	; (8010ea0 <osKernelStart+0x48>)
 8010e80:	2202      	movs	r2, #2
 8010e82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010e84:	f002 fb98 	bl	80135b8 <vTaskStartScheduler>
      stat = osOK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	607b      	str	r3, [r7, #4]
 8010e8c:	e002      	b.n	8010e94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010e94:	687b      	ldr	r3, [r7, #4]
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	200015e4 	.word	0x200015e4

08010ea4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b08e      	sub	sp, #56	; 0x38
 8010ea8:	af04      	add	r7, sp, #16
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010eb4:	f3ef 8305 	mrs	r3, IPSR
 8010eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8010eba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d17e      	bne.n	8010fbe <osThreadNew+0x11a>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d07b      	beq.n	8010fbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010ec6:	2380      	movs	r3, #128	; 0x80
 8010ec8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010eca:	2318      	movs	r3, #24
 8010ecc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ed6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d045      	beq.n	8010f6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d002      	beq.n	8010eec <osThreadNew+0x48>
        name = attr->name;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	699b      	ldr	r3, [r3, #24]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	699b      	ldr	r3, [r3, #24]
 8010ef8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d008      	beq.n	8010f12 <osThreadNew+0x6e>
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	2b38      	cmp	r3, #56	; 0x38
 8010f04:	d805      	bhi.n	8010f12 <osThreadNew+0x6e>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	f003 0301 	and.w	r3, r3, #1
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d001      	beq.n	8010f16 <osThreadNew+0x72>
        return (NULL);
 8010f12:	2300      	movs	r3, #0
 8010f14:	e054      	b.n	8010fc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	695b      	ldr	r3, [r3, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d003      	beq.n	8010f26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	695b      	ldr	r3, [r3, #20]
 8010f22:	089b      	lsrs	r3, r3, #2
 8010f24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	689b      	ldr	r3, [r3, #8]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00e      	beq.n	8010f4c <osThreadNew+0xa8>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	2bbf      	cmp	r3, #191	; 0xbf
 8010f34:	d90a      	bls.n	8010f4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d006      	beq.n	8010f4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d002      	beq.n	8010f4c <osThreadNew+0xa8>
        mem = 1;
 8010f46:	2301      	movs	r3, #1
 8010f48:	61bb      	str	r3, [r7, #24]
 8010f4a:	e010      	b.n	8010f6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d10c      	bne.n	8010f6e <osThreadNew+0xca>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d108      	bne.n	8010f6e <osThreadNew+0xca>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d104      	bne.n	8010f6e <osThreadNew+0xca>
          mem = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	61bb      	str	r3, [r7, #24]
 8010f68:	e001      	b.n	8010f6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d110      	bne.n	8010f96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f7c:	9202      	str	r2, [sp, #8]
 8010f7e:	9301      	str	r3, [sp, #4]
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	6a3a      	ldr	r2, [r7, #32]
 8010f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f002 f924 	bl	80131d8 <xTaskCreateStatic>
 8010f90:	4603      	mov	r3, r0
 8010f92:	613b      	str	r3, [r7, #16]
 8010f94:	e013      	b.n	8010fbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d110      	bne.n	8010fbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010f9c:	6a3b      	ldr	r3, [r7, #32]
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	f107 0310 	add.w	r3, r7, #16
 8010fa4:	9301      	str	r3, [sp, #4]
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f002 f96f 	bl	8013292 <xTaskCreate>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d001      	beq.n	8010fbe <osThreadNew+0x11a>
            hTask = NULL;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010fbe:	693b      	ldr	r3, [r7, #16]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3728      	adds	r7, #40	; 0x28
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fd0:	f3ef 8305 	mrs	r3, IPSR
 8010fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d003      	beq.n	8010fe4 <osDelay+0x1c>
    stat = osErrorISR;
 8010fdc:	f06f 0305 	mvn.w	r3, #5
 8010fe0:	60fb      	str	r3, [r7, #12]
 8010fe2:	e007      	b.n	8010ff4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d002      	beq.n	8010ff4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f002 faae 	bl	8013550 <vTaskDelay>
    }
  }

  return (stat);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b088      	sub	sp, #32
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8011006:	2300      	movs	r3, #0
 8011008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801100a:	f3ef 8305 	mrs	r3, IPSR
 801100e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011010:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8011012:	2b00      	cmp	r3, #0
 8011014:	d174      	bne.n	8011100 <osMutexNew+0x102>
    if (attr != NULL) {
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d003      	beq.n	8011024 <osMutexNew+0x26>
      type = attr->attr_bits;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	61bb      	str	r3, [r7, #24]
 8011022:	e001      	b.n	8011028 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8011024:	2300      	movs	r3, #0
 8011026:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	f003 0301 	and.w	r3, r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	d002      	beq.n	8011038 <osMutexNew+0x3a>
      rmtx = 1U;
 8011032:	2301      	movs	r3, #1
 8011034:	617b      	str	r3, [r7, #20]
 8011036:	e001      	b.n	801103c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8011038:	2300      	movs	r3, #0
 801103a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801103c:	69bb      	ldr	r3, [r7, #24]
 801103e:	f003 0308 	and.w	r3, r3, #8
 8011042:	2b00      	cmp	r3, #0
 8011044:	d15c      	bne.n	8011100 <osMutexNew+0x102>
      mem = -1;
 8011046:	f04f 33ff 	mov.w	r3, #4294967295
 801104a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d015      	beq.n	801107e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d006      	beq.n	8011068 <osMutexNew+0x6a>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	2b4f      	cmp	r3, #79	; 0x4f
 8011060:	d902      	bls.n	8011068 <osMutexNew+0x6a>
          mem = 1;
 8011062:	2301      	movs	r3, #1
 8011064:	613b      	str	r3, [r7, #16]
 8011066:	e00c      	b.n	8011082 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d108      	bne.n	8011082 <osMutexNew+0x84>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d104      	bne.n	8011082 <osMutexNew+0x84>
            mem = 0;
 8011078:	2300      	movs	r3, #0
 801107a:	613b      	str	r3, [r7, #16]
 801107c:	e001      	b.n	8011082 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801107e:	2300      	movs	r3, #0
 8011080:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d112      	bne.n	80110ae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d007      	beq.n	801109e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	4619      	mov	r1, r3
 8011094:	2004      	movs	r0, #4
 8011096:	f000 fd88 	bl	8011baa <xQueueCreateMutexStatic>
 801109a:	61f8      	str	r0, [r7, #28]
 801109c:	e016      	b.n	80110cc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	4619      	mov	r1, r3
 80110a4:	2001      	movs	r0, #1
 80110a6:	f000 fd80 	bl	8011baa <xQueueCreateMutexStatic>
 80110aa:	61f8      	str	r0, [r7, #28]
 80110ac:	e00e      	b.n	80110cc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d10b      	bne.n	80110cc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d004      	beq.n	80110c4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80110ba:	2004      	movs	r0, #4
 80110bc:	f000 fd5d 	bl	8011b7a <xQueueCreateMutex>
 80110c0:	61f8      	str	r0, [r7, #28]
 80110c2:	e003      	b.n	80110cc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80110c4:	2001      	movs	r0, #1
 80110c6:	f000 fd58 	bl	8011b7a <xQueueCreateMutex>
 80110ca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00c      	beq.n	80110ec <osMutexNew+0xee>
        if (attr != NULL) {
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d003      	beq.n	80110e0 <osMutexNew+0xe2>
          name = attr->name;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	60fb      	str	r3, [r7, #12]
 80110de:	e001      	b.n	80110e4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80110e0:	2300      	movs	r3, #0
 80110e2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80110e4:	68f9      	ldr	r1, [r7, #12]
 80110e6:	69f8      	ldr	r0, [r7, #28]
 80110e8:	f001 fc68 	bl	80129bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d006      	beq.n	8011100 <osMutexNew+0x102>
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d003      	beq.n	8011100 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	f043 0301 	orr.w	r3, r3, #1
 80110fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011100:	69fb      	ldr	r3, [r7, #28]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3720      	adds	r7, #32
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801110a:	b580      	push	{r7, lr}
 801110c:	b086      	sub	sp, #24
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
 8011112:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f023 0301 	bic.w	r3, r3, #1
 801111a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8011124:	2300      	movs	r3, #0
 8011126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011128:	f3ef 8305 	mrs	r3, IPSR
 801112c:	60bb      	str	r3, [r7, #8]
  return(result);
 801112e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8011130:	2b00      	cmp	r3, #0
 8011132:	d003      	beq.n	801113c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8011134:	f06f 0305 	mvn.w	r3, #5
 8011138:	617b      	str	r3, [r7, #20]
 801113a:	e02c      	b.n	8011196 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d103      	bne.n	801114a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8011142:	f06f 0303 	mvn.w	r3, #3
 8011146:	617b      	str	r3, [r7, #20]
 8011148:	e025      	b.n	8011196 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d011      	beq.n	8011174 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011150:	6839      	ldr	r1, [r7, #0]
 8011152:	6938      	ldr	r0, [r7, #16]
 8011154:	f000 fd78 	bl	8011c48 <xQueueTakeMutexRecursive>
 8011158:	4603      	mov	r3, r0
 801115a:	2b01      	cmp	r3, #1
 801115c:	d01b      	beq.n	8011196 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8011164:	f06f 0301 	mvn.w	r3, #1
 8011168:	617b      	str	r3, [r7, #20]
 801116a:	e014      	b.n	8011196 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801116c:	f06f 0302 	mvn.w	r3, #2
 8011170:	617b      	str	r3, [r7, #20]
 8011172:	e010      	b.n	8011196 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011174:	6839      	ldr	r1, [r7, #0]
 8011176:	6938      	ldr	r0, [r7, #16]
 8011178:	f001 f90c 	bl	8012394 <xQueueSemaphoreTake>
 801117c:	4603      	mov	r3, r0
 801117e:	2b01      	cmp	r3, #1
 8011180:	d009      	beq.n	8011196 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d003      	beq.n	8011190 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8011188:	f06f 0301 	mvn.w	r3, #1
 801118c:	617b      	str	r3, [r7, #20]
 801118e:	e002      	b.n	8011196 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8011190:	f06f 0302 	mvn.w	r3, #2
 8011194:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8011196:	697b      	ldr	r3, [r7, #20]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3718      	adds	r7, #24
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b086      	sub	sp, #24
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f023 0301 	bic.w	r3, r3, #1
 80111ae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80111b8:	2300      	movs	r3, #0
 80111ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111bc:	f3ef 8305 	mrs	r3, IPSR
 80111c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80111c2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d003      	beq.n	80111d0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80111c8:	f06f 0305 	mvn.w	r3, #5
 80111cc:	617b      	str	r3, [r7, #20]
 80111ce:	e01f      	b.n	8011210 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d103      	bne.n	80111de <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80111d6:	f06f 0303 	mvn.w	r3, #3
 80111da:	617b      	str	r3, [r7, #20]
 80111dc:	e018      	b.n	8011210 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d009      	beq.n	80111f8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80111e4:	6938      	ldr	r0, [r7, #16]
 80111e6:	f000 fcfb 	bl	8011be0 <xQueueGiveMutexRecursive>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d00f      	beq.n	8011210 <osMutexRelease+0x70>
        stat = osErrorResource;
 80111f0:	f06f 0302 	mvn.w	r3, #2
 80111f4:	617b      	str	r3, [r7, #20]
 80111f6:	e00b      	b.n	8011210 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80111f8:	2300      	movs	r3, #0
 80111fa:	2200      	movs	r2, #0
 80111fc:	2100      	movs	r1, #0
 80111fe:	6938      	ldr	r0, [r7, #16]
 8011200:	f000 fdc2 	bl	8011d88 <xQueueGenericSend>
 8011204:	4603      	mov	r3, r0
 8011206:	2b01      	cmp	r3, #1
 8011208:	d002      	beq.n	8011210 <osMutexRelease+0x70>
        stat = osErrorResource;
 801120a:	f06f 0302 	mvn.w	r3, #2
 801120e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011210:	697b      	ldr	r3, [r7, #20]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3718      	adds	r7, #24
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801121a:	b580      	push	{r7, lr}
 801121c:	b08a      	sub	sp, #40	; 0x28
 801121e:	af02      	add	r7, sp, #8
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801122a:	f3ef 8305 	mrs	r3, IPSR
 801122e:	613b      	str	r3, [r7, #16]
  return(result);
 8011230:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011232:	2b00      	cmp	r3, #0
 8011234:	d175      	bne.n	8011322 <osSemaphoreNew+0x108>
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d072      	beq.n	8011322 <osSemaphoreNew+0x108>
 801123c:	68ba      	ldr	r2, [r7, #8]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	429a      	cmp	r2, r3
 8011242:	d86e      	bhi.n	8011322 <osSemaphoreNew+0x108>
    mem = -1;
 8011244:	f04f 33ff 	mov.w	r3, #4294967295
 8011248:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d015      	beq.n	801127c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d006      	beq.n	8011266 <osSemaphoreNew+0x4c>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	2b4f      	cmp	r3, #79	; 0x4f
 801125e:	d902      	bls.n	8011266 <osSemaphoreNew+0x4c>
        mem = 1;
 8011260:	2301      	movs	r3, #1
 8011262:	61bb      	str	r3, [r7, #24]
 8011264:	e00c      	b.n	8011280 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d108      	bne.n	8011280 <osSemaphoreNew+0x66>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d104      	bne.n	8011280 <osSemaphoreNew+0x66>
          mem = 0;
 8011276:	2300      	movs	r3, #0
 8011278:	61bb      	str	r3, [r7, #24]
 801127a:	e001      	b.n	8011280 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801127c:	2300      	movs	r3, #0
 801127e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011280:	69bb      	ldr	r3, [r7, #24]
 8011282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011286:	d04c      	beq.n	8011322 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d128      	bne.n	80112e0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d10a      	bne.n	80112aa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	689b      	ldr	r3, [r3, #8]
 8011298:	2203      	movs	r2, #3
 801129a:	9200      	str	r2, [sp, #0]
 801129c:	2200      	movs	r2, #0
 801129e:	2100      	movs	r1, #0
 80112a0:	2001      	movs	r0, #1
 80112a2:	f000 fb7b 	bl	801199c <xQueueGenericCreateStatic>
 80112a6:	61f8      	str	r0, [r7, #28]
 80112a8:	e005      	b.n	80112b6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80112aa:	2203      	movs	r2, #3
 80112ac:	2100      	movs	r1, #0
 80112ae:	2001      	movs	r0, #1
 80112b0:	f000 fbec 	bl	8011a8c <xQueueGenericCreate>
 80112b4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d022      	beq.n	8011302 <osSemaphoreNew+0xe8>
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d01f      	beq.n	8011302 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80112c2:	2300      	movs	r3, #0
 80112c4:	2200      	movs	r2, #0
 80112c6:	2100      	movs	r1, #0
 80112c8:	69f8      	ldr	r0, [r7, #28]
 80112ca:	f000 fd5d 	bl	8011d88 <xQueueGenericSend>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d016      	beq.n	8011302 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80112d4:	69f8      	ldr	r0, [r7, #28]
 80112d6:	f001 fa25 	bl	8012724 <vQueueDelete>
            hSemaphore = NULL;
 80112da:	2300      	movs	r3, #0
 80112dc:	61fb      	str	r3, [r7, #28]
 80112de:	e010      	b.n	8011302 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d108      	bne.n	80112f8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	461a      	mov	r2, r3
 80112ec:	68b9      	ldr	r1, [r7, #8]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f000 fce0 	bl	8011cb4 <xQueueCreateCountingSemaphoreStatic>
 80112f4:	61f8      	str	r0, [r7, #28]
 80112f6:	e004      	b.n	8011302 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80112f8:	68b9      	ldr	r1, [r7, #8]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f000 fd11 	bl	8011d22 <xQueueCreateCountingSemaphore>
 8011300:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00c      	beq.n	8011322 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d003      	beq.n	8011316 <osSemaphoreNew+0xfc>
          name = attr->name;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	617b      	str	r3, [r7, #20]
 8011314:	e001      	b.n	801131a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801131a:	6979      	ldr	r1, [r7, #20]
 801131c:	69f8      	ldr	r0, [r7, #28]
 801131e:	f001 fb4d 	bl	80129bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011322:	69fb      	ldr	r3, [r7, #28]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3720      	adds	r7, #32
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801132c:	b580      	push	{r7, lr}
 801132e:	b086      	sub	sp, #24
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801133a:	2300      	movs	r3, #0
 801133c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d103      	bne.n	801134c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011344:	f06f 0303 	mvn.w	r3, #3
 8011348:	617b      	str	r3, [r7, #20]
 801134a:	e039      	b.n	80113c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801134c:	f3ef 8305 	mrs	r3, IPSR
 8011350:	60fb      	str	r3, [r7, #12]
  return(result);
 8011352:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011354:	2b00      	cmp	r3, #0
 8011356:	d022      	beq.n	801139e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d003      	beq.n	8011366 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801135e:	f06f 0303 	mvn.w	r3, #3
 8011362:	617b      	str	r3, [r7, #20]
 8011364:	e02c      	b.n	80113c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011366:	2300      	movs	r3, #0
 8011368:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801136a:	f107 0308 	add.w	r3, r7, #8
 801136e:	461a      	mov	r2, r3
 8011370:	2100      	movs	r1, #0
 8011372:	6938      	ldr	r0, [r7, #16]
 8011374:	f001 f91a 	bl	80125ac <xQueueReceiveFromISR>
 8011378:	4603      	mov	r3, r0
 801137a:	2b01      	cmp	r3, #1
 801137c:	d003      	beq.n	8011386 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801137e:	f06f 0302 	mvn.w	r3, #2
 8011382:	617b      	str	r3, [r7, #20]
 8011384:	e01c      	b.n	80113c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d019      	beq.n	80113c0 <osSemaphoreAcquire+0x94>
 801138c:	4b0f      	ldr	r3, [pc, #60]	; (80113cc <osSemaphoreAcquire+0xa0>)
 801138e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011392:	601a      	str	r2, [r3, #0]
 8011394:	f3bf 8f4f 	dsb	sy
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	e010      	b.n	80113c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801139e:	6839      	ldr	r1, [r7, #0]
 80113a0:	6938      	ldr	r0, [r7, #16]
 80113a2:	f000 fff7 	bl	8012394 <xQueueSemaphoreTake>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d009      	beq.n	80113c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d003      	beq.n	80113ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80113b2:	f06f 0301 	mvn.w	r3, #1
 80113b6:	617b      	str	r3, [r7, #20]
 80113b8:	e002      	b.n	80113c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80113ba:	f06f 0302 	mvn.w	r3, #2
 80113be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80113c0:	697b      	ldr	r3, [r7, #20]
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3718      	adds	r7, #24
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	e000ed04 	.word	0xe000ed04

080113d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80113dc:	2300      	movs	r3, #0
 80113de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d103      	bne.n	80113ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80113e6:	f06f 0303 	mvn.w	r3, #3
 80113ea:	617b      	str	r3, [r7, #20]
 80113ec:	e02c      	b.n	8011448 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113ee:	f3ef 8305 	mrs	r3, IPSR
 80113f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80113f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d01a      	beq.n	8011430 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80113fa:	2300      	movs	r3, #0
 80113fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80113fe:	f107 0308 	add.w	r3, r7, #8
 8011402:	4619      	mov	r1, r3
 8011404:	6938      	ldr	r0, [r7, #16]
 8011406:	f000 fe58 	bl	80120ba <xQueueGiveFromISR>
 801140a:	4603      	mov	r3, r0
 801140c:	2b01      	cmp	r3, #1
 801140e:	d003      	beq.n	8011418 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011410:	f06f 0302 	mvn.w	r3, #2
 8011414:	617b      	str	r3, [r7, #20]
 8011416:	e017      	b.n	8011448 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d014      	beq.n	8011448 <osSemaphoreRelease+0x78>
 801141e:	4b0d      	ldr	r3, [pc, #52]	; (8011454 <osSemaphoreRelease+0x84>)
 8011420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	f3bf 8f4f 	dsb	sy
 801142a:	f3bf 8f6f 	isb	sy
 801142e:	e00b      	b.n	8011448 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011430:	2300      	movs	r3, #0
 8011432:	2200      	movs	r2, #0
 8011434:	2100      	movs	r1, #0
 8011436:	6938      	ldr	r0, [r7, #16]
 8011438:	f000 fca6 	bl	8011d88 <xQueueGenericSend>
 801143c:	4603      	mov	r3, r0
 801143e:	2b01      	cmp	r3, #1
 8011440:	d002      	beq.n	8011448 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011442:	f06f 0302 	mvn.w	r3, #2
 8011446:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011448:	697b      	ldr	r3, [r7, #20]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3718      	adds	r7, #24
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	e000ed04 	.word	0xe000ed04

08011458 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d102      	bne.n	8011470 <osSemaphoreGetCount+0x18>
    count = 0U;
 801146a:	2300      	movs	r3, #0
 801146c:	617b      	str	r3, [r7, #20]
 801146e:	e00e      	b.n	801148e <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011470:	f3ef 8305 	mrs	r3, IPSR
 8011474:	60fb      	str	r3, [r7, #12]
  return(result);
 8011476:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011478:	2b00      	cmp	r3, #0
 801147a:	d004      	beq.n	8011486 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 801147c:	6938      	ldr	r0, [r7, #16]
 801147e:	f001 f933 	bl	80126e8 <uxQueueMessagesWaitingFromISR>
 8011482:	6178      	str	r0, [r7, #20]
 8011484:	e003      	b.n	801148e <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8011486:	6938      	ldr	r0, [r7, #16]
 8011488:	f001 f910 	bl	80126ac <uxQueueMessagesWaiting>
 801148c:	6178      	str	r0, [r7, #20]
  }

  return (count);
 801148e:	697b      	ldr	r3, [r7, #20]
}
 8011490:	4618      	mov	r0, r3
 8011492:	3718      	adds	r7, #24
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011498:	b580      	push	{r7, lr}
 801149a:	b08a      	sub	sp, #40	; 0x28
 801149c:	af02      	add	r7, sp, #8
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80114a4:	2300      	movs	r3, #0
 80114a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114a8:	f3ef 8305 	mrs	r3, IPSR
 80114ac:	613b      	str	r3, [r7, #16]
  return(result);
 80114ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d15f      	bne.n	8011574 <osMessageQueueNew+0xdc>
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d05c      	beq.n	8011574 <osMessageQueueNew+0xdc>
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d059      	beq.n	8011574 <osMessageQueueNew+0xdc>
    mem = -1;
 80114c0:	f04f 33ff 	mov.w	r3, #4294967295
 80114c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d029      	beq.n	8011520 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d012      	beq.n	80114fa <osMessageQueueNew+0x62>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	2b4f      	cmp	r3, #79	; 0x4f
 80114da:	d90e      	bls.n	80114fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00a      	beq.n	80114fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	695a      	ldr	r2, [r3, #20]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	68b9      	ldr	r1, [r7, #8]
 80114ec:	fb01 f303 	mul.w	r3, r1, r3
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d302      	bcc.n	80114fa <osMessageQueueNew+0x62>
        mem = 1;
 80114f4:	2301      	movs	r3, #1
 80114f6:	61bb      	str	r3, [r7, #24]
 80114f8:	e014      	b.n	8011524 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d110      	bne.n	8011524 <osMessageQueueNew+0x8c>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d10c      	bne.n	8011524 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801150e:	2b00      	cmp	r3, #0
 8011510:	d108      	bne.n	8011524 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	695b      	ldr	r3, [r3, #20]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d104      	bne.n	8011524 <osMessageQueueNew+0x8c>
          mem = 0;
 801151a:	2300      	movs	r3, #0
 801151c:	61bb      	str	r3, [r7, #24]
 801151e:	e001      	b.n	8011524 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011520:	2300      	movs	r3, #0
 8011522:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	2b01      	cmp	r3, #1
 8011528:	d10b      	bne.n	8011542 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	691a      	ldr	r2, [r3, #16]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	2100      	movs	r1, #0
 8011534:	9100      	str	r1, [sp, #0]
 8011536:	68b9      	ldr	r1, [r7, #8]
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	f000 fa2f 	bl	801199c <xQueueGenericCreateStatic>
 801153e:	61f8      	str	r0, [r7, #28]
 8011540:	e008      	b.n	8011554 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d105      	bne.n	8011554 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011548:	2200      	movs	r2, #0
 801154a:	68b9      	ldr	r1, [r7, #8]
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	f000 fa9d 	bl	8011a8c <xQueueGenericCreate>
 8011552:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00c      	beq.n	8011574 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	617b      	str	r3, [r7, #20]
 8011566:	e001      	b.n	801156c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011568:	2300      	movs	r3, #0
 801156a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801156c:	6979      	ldr	r1, [r7, #20]
 801156e:	69f8      	ldr	r0, [r7, #28]
 8011570:	f001 fa24 	bl	80129bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011574:	69fb      	ldr	r3, [r7, #28]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3720      	adds	r7, #32
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
	...

08011580 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011580:	b580      	push	{r7, lr}
 8011582:	b088      	sub	sp, #32
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	603b      	str	r3, [r7, #0]
 801158c:	4613      	mov	r3, r2
 801158e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011594:	2300      	movs	r3, #0
 8011596:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011598:	f3ef 8305 	mrs	r3, IPSR
 801159c:	617b      	str	r3, [r7, #20]
  return(result);
 801159e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d028      	beq.n	80115f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115a4:	69bb      	ldr	r3, [r7, #24]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d005      	beq.n	80115b6 <osMessageQueuePut+0x36>
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <osMessageQueuePut+0x36>
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d003      	beq.n	80115be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80115b6:	f06f 0303 	mvn.w	r3, #3
 80115ba:	61fb      	str	r3, [r7, #28]
 80115bc:	e038      	b.n	8011630 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80115be:	2300      	movs	r3, #0
 80115c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80115c2:	f107 0210 	add.w	r2, r7, #16
 80115c6:	2300      	movs	r3, #0
 80115c8:	68b9      	ldr	r1, [r7, #8]
 80115ca:	69b8      	ldr	r0, [r7, #24]
 80115cc:	f000 fcda 	bl	8011f84 <xQueueGenericSendFromISR>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d003      	beq.n	80115de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80115d6:	f06f 0302 	mvn.w	r3, #2
 80115da:	61fb      	str	r3, [r7, #28]
 80115dc:	e028      	b.n	8011630 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d025      	beq.n	8011630 <osMessageQueuePut+0xb0>
 80115e4:	4b15      	ldr	r3, [pc, #84]	; (801163c <osMessageQueuePut+0xbc>)
 80115e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115ea:	601a      	str	r2, [r3, #0]
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	e01c      	b.n	8011630 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <osMessageQueuePut+0x82>
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d103      	bne.n	801160a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011602:	f06f 0303 	mvn.w	r3, #3
 8011606:	61fb      	str	r3, [r7, #28]
 8011608:	e012      	b.n	8011630 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801160a:	2300      	movs	r3, #0
 801160c:	683a      	ldr	r2, [r7, #0]
 801160e:	68b9      	ldr	r1, [r7, #8]
 8011610:	69b8      	ldr	r0, [r7, #24]
 8011612:	f000 fbb9 	bl	8011d88 <xQueueGenericSend>
 8011616:	4603      	mov	r3, r0
 8011618:	2b01      	cmp	r3, #1
 801161a:	d009      	beq.n	8011630 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d003      	beq.n	801162a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011622:	f06f 0301 	mvn.w	r3, #1
 8011626:	61fb      	str	r3, [r7, #28]
 8011628:	e002      	b.n	8011630 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801162a:	f06f 0302 	mvn.w	r3, #2
 801162e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011630:	69fb      	ldr	r3, [r7, #28]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3720      	adds	r7, #32
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	e000ed04 	.word	0xe000ed04

08011640 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011640:	b580      	push	{r7, lr}
 8011642:	b088      	sub	sp, #32
 8011644:	af00      	add	r7, sp, #0
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
 801164c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011652:	2300      	movs	r3, #0
 8011654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011656:	f3ef 8305 	mrs	r3, IPSR
 801165a:	617b      	str	r3, [r7, #20]
  return(result);
 801165c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801165e:	2b00      	cmp	r3, #0
 8011660:	d028      	beq.n	80116b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d005      	beq.n	8011674 <osMessageQueueGet+0x34>
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d002      	beq.n	8011674 <osMessageQueueGet+0x34>
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d003      	beq.n	801167c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011674:	f06f 0303 	mvn.w	r3, #3
 8011678:	61fb      	str	r3, [r7, #28]
 801167a:	e037      	b.n	80116ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801167c:	2300      	movs	r3, #0
 801167e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011680:	f107 0310 	add.w	r3, r7, #16
 8011684:	461a      	mov	r2, r3
 8011686:	68b9      	ldr	r1, [r7, #8]
 8011688:	69b8      	ldr	r0, [r7, #24]
 801168a:	f000 ff8f 	bl	80125ac <xQueueReceiveFromISR>
 801168e:	4603      	mov	r3, r0
 8011690:	2b01      	cmp	r3, #1
 8011692:	d003      	beq.n	801169c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011694:	f06f 0302 	mvn.w	r3, #2
 8011698:	61fb      	str	r3, [r7, #28]
 801169a:	e027      	b.n	80116ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d024      	beq.n	80116ec <osMessageQueueGet+0xac>
 80116a2:	4b15      	ldr	r3, [pc, #84]	; (80116f8 <osMessageQueueGet+0xb8>)
 80116a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	e01b      	b.n	80116ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d002      	beq.n	80116c0 <osMessageQueueGet+0x80>
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d103      	bne.n	80116c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80116c0:	f06f 0303 	mvn.w	r3, #3
 80116c4:	61fb      	str	r3, [r7, #28]
 80116c6:	e011      	b.n	80116ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	68b9      	ldr	r1, [r7, #8]
 80116cc:	69b8      	ldr	r0, [r7, #24]
 80116ce:	f000 fd81 	bl	80121d4 <xQueueReceive>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d009      	beq.n	80116ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80116de:	f06f 0301 	mvn.w	r3, #1
 80116e2:	61fb      	str	r3, [r7, #28]
 80116e4:	e002      	b.n	80116ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80116e6:	f06f 0302 	mvn.w	r3, #2
 80116ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80116ec:	69fb      	ldr	r3, [r7, #28]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3720      	adds	r7, #32
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	e000ed04 	.word	0xe000ed04

080116fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80116fc:	b480      	push	{r7}
 80116fe:	b085      	sub	sp, #20
 8011700:	af00      	add	r7, sp, #0
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	4a07      	ldr	r2, [pc, #28]	; (8011728 <vApplicationGetIdleTaskMemory+0x2c>)
 801170c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	4a06      	ldr	r2, [pc, #24]	; (801172c <vApplicationGetIdleTaskMemory+0x30>)
 8011712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2280      	movs	r2, #128	; 0x80
 8011718:	601a      	str	r2, [r3, #0]
}
 801171a:	bf00      	nop
 801171c:	3714      	adds	r7, #20
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	200015e8 	.word	0x200015e8
 801172c:	200016a8 	.word	0x200016a8

08011730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	4a07      	ldr	r2, [pc, #28]	; (801175c <vApplicationGetTimerTaskMemory+0x2c>)
 8011740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	4a06      	ldr	r2, [pc, #24]	; (8011760 <vApplicationGetTimerTaskMemory+0x30>)
 8011746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801174e:	601a      	str	r2, [r3, #0]
}
 8011750:	bf00      	nop
 8011752:	3714      	adds	r7, #20
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr
 801175c:	200018a8 	.word	0x200018a8
 8011760:	20001968 	.word	0x20001968

08011764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f103 0208 	add.w	r2, r3, #8
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f04f 32ff 	mov.w	r2, #4294967295
 801177c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f103 0208 	add.w	r2, r3, #8
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f103 0208 	add.w	r2, r3, #8
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2200      	movs	r2, #0
 8011796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2200      	movs	r2, #0
 80117b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80117b2:	bf00      	nop
 80117b4:	370c      	adds	r7, #12
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr

080117be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80117be:	b480      	push	{r7}
 80117c0:	b085      	sub	sp, #20
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	689a      	ldr	r2, [r3, #8]
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	683a      	ldr	r2, [r7, #0]
 80117e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	683a      	ldr	r2, [r7, #0]
 80117e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	1c5a      	adds	r2, r3, #1
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	601a      	str	r2, [r3, #0]
}
 80117fa:	bf00      	nop
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011806:	b480      	push	{r7}
 8011808:	b085      	sub	sp, #20
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
 801180e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181c:	d103      	bne.n	8011826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	691b      	ldr	r3, [r3, #16]
 8011822:	60fb      	str	r3, [r7, #12]
 8011824:	e00c      	b.n	8011840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	3308      	adds	r3, #8
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	e002      	b.n	8011834 <vListInsert+0x2e>
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	60fb      	str	r3, [r7, #12]
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	68ba      	ldr	r2, [r7, #8]
 801183c:	429a      	cmp	r2, r3
 801183e:	d2f6      	bcs.n	801182e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	685a      	ldr	r2, [r3, #4]
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	683a      	ldr	r2, [r7, #0]
 801184e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	683a      	ldr	r2, [r7, #0]
 801185a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	601a      	str	r2, [r3, #0]
}
 801186c:	bf00      	nop
 801186e:	3714      	adds	r7, #20
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr

08011878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	691b      	ldr	r3, [r3, #16]
 8011884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	6892      	ldr	r2, [r2, #8]
 801188e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	6852      	ldr	r2, [r2, #4]
 8011898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d103      	bne.n	80118ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	689a      	ldr	r2, [r3, #8]
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	1e5a      	subs	r2, r3, #1
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d10a      	bne.n	80118f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80118e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e4:	f383 8811 	msr	BASEPRI, r3
 80118e8:	f3bf 8f6f 	isb	sy
 80118ec:	f3bf 8f4f 	dsb	sy
 80118f0:	60bb      	str	r3, [r7, #8]
}
 80118f2:	bf00      	nop
 80118f4:	e7fe      	b.n	80118f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80118f6:	f003 fabd 	bl	8014e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011902:	68f9      	ldr	r1, [r7, #12]
 8011904:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011906:	fb01 f303 	mul.w	r3, r1, r3
 801190a:	441a      	add	r2, r3
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011926:	3b01      	subs	r3, #1
 8011928:	68f9      	ldr	r1, [r7, #12]
 801192a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801192c:	fb01 f303 	mul.w	r3, r1, r3
 8011930:	441a      	add	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	22ff      	movs	r2, #255	; 0xff
 801193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	22ff      	movs	r2, #255	; 0xff
 8011942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d114      	bne.n	8011976 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	691b      	ldr	r3, [r3, #16]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d01a      	beq.n	801198a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	3310      	adds	r3, #16
 8011958:	4618      	mov	r0, r3
 801195a:	f002 f8f5 	bl	8013b48 <xTaskRemoveFromEventList>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d012      	beq.n	801198a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011964:	4b0c      	ldr	r3, [pc, #48]	; (8011998 <xQueueGenericReset+0xcc>)
 8011966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801196a:	601a      	str	r2, [r3, #0]
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	f3bf 8f6f 	isb	sy
 8011974:	e009      	b.n	801198a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	3310      	adds	r3, #16
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff fef2 	bl	8011764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	3324      	adds	r3, #36	; 0x24
 8011984:	4618      	mov	r0, r3
 8011986:	f7ff feed 	bl	8011764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801198a:	f003 faa3 	bl	8014ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801198e:	2301      	movs	r3, #1
}
 8011990:	4618      	mov	r0, r3
 8011992:	3710      	adds	r7, #16
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	e000ed04 	.word	0xe000ed04

0801199c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08e      	sub	sp, #56	; 0x38
 80119a0:	af02      	add	r7, sp, #8
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10a      	bne.n	80119c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80119c2:	bf00      	nop
 80119c4:	e7fe      	b.n	80119c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d10a      	bne.n	80119e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80119cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d0:	f383 8811 	msr	BASEPRI, r3
 80119d4:	f3bf 8f6f 	isb	sy
 80119d8:	f3bf 8f4f 	dsb	sy
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80119de:	bf00      	nop
 80119e0:	e7fe      	b.n	80119e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <xQueueGenericCreateStatic+0x52>
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d001      	beq.n	80119f2 <xQueueGenericCreateStatic+0x56>
 80119ee:	2301      	movs	r3, #1
 80119f0:	e000      	b.n	80119f4 <xQueueGenericCreateStatic+0x58>
 80119f2:	2300      	movs	r3, #0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d10a      	bne.n	8011a0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80119f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119fc:	f383 8811 	msr	BASEPRI, r3
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	623b      	str	r3, [r7, #32]
}
 8011a0a:	bf00      	nop
 8011a0c:	e7fe      	b.n	8011a0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d102      	bne.n	8011a1a <xQueueGenericCreateStatic+0x7e>
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <xQueueGenericCreateStatic+0x82>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	e000      	b.n	8011a20 <xQueueGenericCreateStatic+0x84>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d10a      	bne.n	8011a3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a28:	f383 8811 	msr	BASEPRI, r3
 8011a2c:	f3bf 8f6f 	isb	sy
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	61fb      	str	r3, [r7, #28]
}
 8011a36:	bf00      	nop
 8011a38:	e7fe      	b.n	8011a38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011a3a:	2350      	movs	r3, #80	; 0x50
 8011a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	2b50      	cmp	r3, #80	; 0x50
 8011a42:	d00a      	beq.n	8011a5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	f383 8811 	msr	BASEPRI, r3
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	61bb      	str	r3, [r7, #24]
}
 8011a56:	bf00      	nop
 8011a58:	e7fe      	b.n	8011a58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011a5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d00d      	beq.n	8011a82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a68:	2201      	movs	r2, #1
 8011a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	4613      	mov	r3, r2
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	68b9      	ldr	r1, [r7, #8]
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f000 f83f 	bl	8011b00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3730      	adds	r7, #48	; 0x30
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	af02      	add	r7, sp, #8
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	4613      	mov	r3, r2
 8011a98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d10a      	bne.n	8011ab6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa4:	f383 8811 	msr	BASEPRI, r3
 8011aa8:	f3bf 8f6f 	isb	sy
 8011aac:	f3bf 8f4f 	dsb	sy
 8011ab0:	613b      	str	r3, [r7, #16]
}
 8011ab2:	bf00      	nop
 8011ab4:	e7fe      	b.n	8011ab4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	fb02 f303 	mul.w	r3, r2, r3
 8011abe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	3350      	adds	r3, #80	; 0x50
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f003 faf7 	bl	80150b8 <pvPortMalloc>
 8011aca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d011      	beq.n	8011af6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	3350      	adds	r3, #80	; 0x50
 8011ada:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ae4:	79fa      	ldrb	r2, [r7, #7]
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	4613      	mov	r3, r2
 8011aec:	697a      	ldr	r2, [r7, #20]
 8011aee:	68b9      	ldr	r1, [r7, #8]
 8011af0:	68f8      	ldr	r0, [r7, #12]
 8011af2:	f000 f805 	bl	8011b00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011af6:	69bb      	ldr	r3, [r7, #24]
	}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3720      	adds	r7, #32
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
 8011b0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d103      	bne.n	8011b1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	69ba      	ldr	r2, [r7, #24]
 8011b18:	601a      	str	r2, [r3, #0]
 8011b1a:	e002      	b.n	8011b22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	68fa      	ldr	r2, [r7, #12]
 8011b26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011b2e:	2101      	movs	r1, #1
 8011b30:	69b8      	ldr	r0, [r7, #24]
 8011b32:	f7ff fecb 	bl	80118cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	78fa      	ldrb	r2, [r7, #3]
 8011b3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011b3e:	bf00      	nop
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b082      	sub	sp, #8
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00e      	beq.n	8011b72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2200      	movs	r2, #0
 8011b58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2200      	movs	r2, #0
 8011b64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011b66:	2300      	movs	r3, #0
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f000 f90b 	bl	8011d88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011b72:	bf00      	nop
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b086      	sub	sp, #24
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	4603      	mov	r3, r0
 8011b82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011b84:	2301      	movs	r3, #1
 8011b86:	617b      	str	r3, [r7, #20]
 8011b88:	2300      	movs	r3, #0
 8011b8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011b8c:	79fb      	ldrb	r3, [r7, #7]
 8011b8e:	461a      	mov	r2, r3
 8011b90:	6939      	ldr	r1, [r7, #16]
 8011b92:	6978      	ldr	r0, [r7, #20]
 8011b94:	f7ff ff7a 	bl	8011a8c <xQueueGenericCreate>
 8011b98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f7ff ffd3 	bl	8011b46 <prvInitialiseMutex>

		return xNewQueue;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
	}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3718      	adds	r7, #24
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b088      	sub	sp, #32
 8011bae:	af02      	add	r7, sp, #8
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	6039      	str	r1, [r7, #0]
 8011bb4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	617b      	str	r3, [r7, #20]
 8011bba:	2300      	movs	r3, #0
 8011bbc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011bbe:	79fb      	ldrb	r3, [r7, #7]
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	6939      	ldr	r1, [r7, #16]
 8011bc8:	6978      	ldr	r0, [r7, #20]
 8011bca:	f7ff fee7 	bl	801199c <xQueueGenericCreateStatic>
 8011bce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f7ff ffb8 	bl	8011b46 <prvInitialiseMutex>

		return xNewQueue;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
	}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3718      	adds	r7, #24
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011be0:	b590      	push	{r4, r7, lr}
 8011be2:	b087      	sub	sp, #28
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d10a      	bne.n	8011c08 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8011bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf6:	f383 8811 	msr	BASEPRI, r3
 8011bfa:	f3bf 8f6f 	isb	sy
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	60fb      	str	r3, [r7, #12]
}
 8011c04:	bf00      	nop
 8011c06:	e7fe      	b.n	8011c06 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	689c      	ldr	r4, [r3, #8]
 8011c0c:	f002 f984 	bl	8013f18 <xTaskGetCurrentTaskHandle>
 8011c10:	4603      	mov	r3, r0
 8011c12:	429c      	cmp	r4, r3
 8011c14:	d111      	bne.n	8011c3a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	1e5a      	subs	r2, r3, #1
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d105      	bne.n	8011c34 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011c28:	2300      	movs	r3, #0
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	2100      	movs	r1, #0
 8011c2e:	6938      	ldr	r0, [r7, #16]
 8011c30:	f000 f8aa 	bl	8011d88 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011c34:	2301      	movs	r3, #1
 8011c36:	617b      	str	r3, [r7, #20]
 8011c38:	e001      	b.n	8011c3e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011c3e:	697b      	ldr	r3, [r7, #20]
	}
 8011c40:	4618      	mov	r0, r3
 8011c42:	371c      	adds	r7, #28
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd90      	pop	{r4, r7, pc}

08011c48 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011c48:	b590      	push	{r4, r7, lr}
 8011c4a:	b087      	sub	sp, #28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d10a      	bne.n	8011c72 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8011c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c60:	f383 8811 	msr	BASEPRI, r3
 8011c64:	f3bf 8f6f 	isb	sy
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	60fb      	str	r3, [r7, #12]
}
 8011c6e:	bf00      	nop
 8011c70:	e7fe      	b.n	8011c70 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	689c      	ldr	r4, [r3, #8]
 8011c76:	f002 f94f 	bl	8013f18 <xTaskGetCurrentTaskHandle>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	429c      	cmp	r4, r3
 8011c7e:	d107      	bne.n	8011c90 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	1c5a      	adds	r2, r3, #1
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	617b      	str	r3, [r7, #20]
 8011c8e:	e00c      	b.n	8011caa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6938      	ldr	r0, [r7, #16]
 8011c94:	f000 fb7e 	bl	8012394 <xQueueSemaphoreTake>
 8011c98:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d004      	beq.n	8011caa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	1c5a      	adds	r2, r3, #1
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011caa:	697b      	ldr	r3, [r7, #20]
	}
 8011cac:	4618      	mov	r0, r3
 8011cae:	371c      	adds	r7, #28
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd90      	pop	{r4, r7, pc}

08011cb4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b08a      	sub	sp, #40	; 0x28
 8011cb8:	af02      	add	r7, sp, #8
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10a      	bne.n	8011cdc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8011cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cca:	f383 8811 	msr	BASEPRI, r3
 8011cce:	f3bf 8f6f 	isb	sy
 8011cd2:	f3bf 8f4f 	dsb	sy
 8011cd6:	61bb      	str	r3, [r7, #24]
}
 8011cd8:	bf00      	nop
 8011cda:	e7fe      	b.n	8011cda <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011cdc:	68ba      	ldr	r2, [r7, #8]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d90a      	bls.n	8011cfa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8011ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce8:	f383 8811 	msr	BASEPRI, r3
 8011cec:	f3bf 8f6f 	isb	sy
 8011cf0:	f3bf 8f4f 	dsb	sy
 8011cf4:	617b      	str	r3, [r7, #20]
}
 8011cf6:	bf00      	nop
 8011cf8:	e7fe      	b.n	8011cf8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	9300      	str	r3, [sp, #0]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2200      	movs	r2, #0
 8011d02:	2100      	movs	r1, #0
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	f7ff fe49 	bl	801199c <xQueueGenericCreateStatic>
 8011d0a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d002      	beq.n	8011d18 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011d18:	69fb      	ldr	r3, [r7, #28]
	}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3720      	adds	r7, #32
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b086      	sub	sp, #24
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
 8011d2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d10a      	bne.n	8011d48 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8011d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d36:	f383 8811 	msr	BASEPRI, r3
 8011d3a:	f3bf 8f6f 	isb	sy
 8011d3e:	f3bf 8f4f 	dsb	sy
 8011d42:	613b      	str	r3, [r7, #16]
}
 8011d44:	bf00      	nop
 8011d46:	e7fe      	b.n	8011d46 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d90a      	bls.n	8011d66 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8011d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d54:	f383 8811 	msr	BASEPRI, r3
 8011d58:	f3bf 8f6f 	isb	sy
 8011d5c:	f3bf 8f4f 	dsb	sy
 8011d60:	60fb      	str	r3, [r7, #12]
}
 8011d62:	bf00      	nop
 8011d64:	e7fe      	b.n	8011d64 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011d66:	2202      	movs	r2, #2
 8011d68:	2100      	movs	r1, #0
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f7ff fe8e 	bl	8011a8c <xQueueGenericCreate>
 8011d70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d002      	beq.n	8011d7e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011d7e:	697b      	ldr	r3, [r7, #20]
	}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3718      	adds	r7, #24
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b08e      	sub	sp, #56	; 0x38
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	607a      	str	r2, [r7, #4]
 8011d94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d96:	2300      	movs	r3, #0
 8011d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d10a      	bne.n	8011dba <xQueueGenericSend+0x32>
	__asm volatile
 8011da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da8:	f383 8811 	msr	BASEPRI, r3
 8011dac:	f3bf 8f6f 	isb	sy
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011db6:	bf00      	nop
 8011db8:	e7fe      	b.n	8011db8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d103      	bne.n	8011dc8 <xQueueGenericSend+0x40>
 8011dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <xQueueGenericSend+0x44>
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e000      	b.n	8011dce <xQueueGenericSend+0x46>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d10a      	bne.n	8011de8 <xQueueGenericSend+0x60>
	__asm volatile
 8011dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd6:	f383 8811 	msr	BASEPRI, r3
 8011dda:	f3bf 8f6f 	isb	sy
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011de4:	bf00      	nop
 8011de6:	e7fe      	b.n	8011de6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	2b02      	cmp	r3, #2
 8011dec:	d103      	bne.n	8011df6 <xQueueGenericSend+0x6e>
 8011dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d101      	bne.n	8011dfa <xQueueGenericSend+0x72>
 8011df6:	2301      	movs	r3, #1
 8011df8:	e000      	b.n	8011dfc <xQueueGenericSend+0x74>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d10a      	bne.n	8011e16 <xQueueGenericSend+0x8e>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	623b      	str	r3, [r7, #32]
}
 8011e12:	bf00      	nop
 8011e14:	e7fe      	b.n	8011e14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e16:	f002 f88f 	bl	8013f38 <xTaskGetSchedulerState>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d102      	bne.n	8011e26 <xQueueGenericSend+0x9e>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d101      	bne.n	8011e2a <xQueueGenericSend+0xa2>
 8011e26:	2301      	movs	r3, #1
 8011e28:	e000      	b.n	8011e2c <xQueueGenericSend+0xa4>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10a      	bne.n	8011e46 <xQueueGenericSend+0xbe>
	__asm volatile
 8011e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e34:	f383 8811 	msr	BASEPRI, r3
 8011e38:	f3bf 8f6f 	isb	sy
 8011e3c:	f3bf 8f4f 	dsb	sy
 8011e40:	61fb      	str	r3, [r7, #28]
}
 8011e42:	bf00      	nop
 8011e44:	e7fe      	b.n	8011e44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e46:	f003 f815 	bl	8014e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d302      	bcc.n	8011e5c <xQueueGenericSend+0xd4>
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d129      	bne.n	8011eb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011e5c:	683a      	ldr	r2, [r7, #0]
 8011e5e:	68b9      	ldr	r1, [r7, #8]
 8011e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e62:	f000 fc9a 	bl	801279a <prvCopyDataToQueue>
 8011e66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d010      	beq.n	8011e92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e72:	3324      	adds	r3, #36	; 0x24
 8011e74:	4618      	mov	r0, r3
 8011e76:	f001 fe67 	bl	8013b48 <xTaskRemoveFromEventList>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d013      	beq.n	8011ea8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e80:	4b3f      	ldr	r3, [pc, #252]	; (8011f80 <xQueueGenericSend+0x1f8>)
 8011e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e86:	601a      	str	r2, [r3, #0]
 8011e88:	f3bf 8f4f 	dsb	sy
 8011e8c:	f3bf 8f6f 	isb	sy
 8011e90:	e00a      	b.n	8011ea8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d007      	beq.n	8011ea8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e98:	4b39      	ldr	r3, [pc, #228]	; (8011f80 <xQueueGenericSend+0x1f8>)
 8011e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e9e:	601a      	str	r2, [r3, #0]
 8011ea0:	f3bf 8f4f 	dsb	sy
 8011ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011ea8:	f003 f814 	bl	8014ed4 <vPortExitCritical>
				return pdPASS;
 8011eac:	2301      	movs	r3, #1
 8011eae:	e063      	b.n	8011f78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d103      	bne.n	8011ebe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011eb6:	f003 f80d 	bl	8014ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	e05c      	b.n	8011f78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d106      	bne.n	8011ed2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ec4:	f107 0314 	add.w	r3, r7, #20
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f001 fec7 	bl	8013c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011ed2:	f002 ffff 	bl	8014ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ed6:	f001 fbe1 	bl	801369c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011eda:	f002 ffcb 	bl	8014e74 <vPortEnterCritical>
 8011ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ee4:	b25b      	sxtb	r3, r3
 8011ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eea:	d103      	bne.n	8011ef4 <xQueueGenericSend+0x16c>
 8011eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011efa:	b25b      	sxtb	r3, r3
 8011efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f00:	d103      	bne.n	8011f0a <xQueueGenericSend+0x182>
 8011f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f0a:	f002 ffe3 	bl	8014ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f0e:	1d3a      	adds	r2, r7, #4
 8011f10:	f107 0314 	add.w	r3, r7, #20
 8011f14:	4611      	mov	r1, r2
 8011f16:	4618      	mov	r0, r3
 8011f18:	f001 feb6 	bl	8013c88 <xTaskCheckForTimeOut>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d124      	bne.n	8011f6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f24:	f000 fd31 	bl	801298a <prvIsQueueFull>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d018      	beq.n	8011f60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f30:	3310      	adds	r3, #16
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	4611      	mov	r1, r2
 8011f36:	4618      	mov	r0, r3
 8011f38:	f001 fdb6 	bl	8013aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f3e:	f000 fcbc 	bl	80128ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011f42:	f001 fbb9 	bl	80136b8 <xTaskResumeAll>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f47f af7c 	bne.w	8011e46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011f4e:	4b0c      	ldr	r3, [pc, #48]	; (8011f80 <xQueueGenericSend+0x1f8>)
 8011f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f54:	601a      	str	r2, [r3, #0]
 8011f56:	f3bf 8f4f 	dsb	sy
 8011f5a:	f3bf 8f6f 	isb	sy
 8011f5e:	e772      	b.n	8011e46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f62:	f000 fcaa 	bl	80128ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f66:	f001 fba7 	bl	80136b8 <xTaskResumeAll>
 8011f6a:	e76c      	b.n	8011e46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f6e:	f000 fca4 	bl	80128ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f72:	f001 fba1 	bl	80136b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011f76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3738      	adds	r7, #56	; 0x38
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	e000ed04 	.word	0xe000ed04

08011f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b090      	sub	sp, #64	; 0x40
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	607a      	str	r2, [r7, #4]
 8011f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d10a      	bne.n	8011fb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa0:	f383 8811 	msr	BASEPRI, r3
 8011fa4:	f3bf 8f6f 	isb	sy
 8011fa8:	f3bf 8f4f 	dsb	sy
 8011fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011fae:	bf00      	nop
 8011fb0:	e7fe      	b.n	8011fb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d103      	bne.n	8011fc0 <xQueueGenericSendFromISR+0x3c>
 8011fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d101      	bne.n	8011fc4 <xQueueGenericSendFromISR+0x40>
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	e000      	b.n	8011fc6 <xQueueGenericSendFromISR+0x42>
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10a      	bne.n	8011fe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011fdc:	bf00      	nop
 8011fde:	e7fe      	b.n	8011fde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	d103      	bne.n	8011fee <xQueueGenericSendFromISR+0x6a>
 8011fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d101      	bne.n	8011ff2 <xQueueGenericSendFromISR+0x6e>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e000      	b.n	8011ff4 <xQueueGenericSendFromISR+0x70>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d10a      	bne.n	801200e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffc:	f383 8811 	msr	BASEPRI, r3
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	f3bf 8f4f 	dsb	sy
 8012008:	623b      	str	r3, [r7, #32]
}
 801200a:	bf00      	nop
 801200c:	e7fe      	b.n	801200c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801200e:	f003 f813 	bl	8015038 <vPortValidateInterruptPriority>
	__asm volatile
 8012012:	f3ef 8211 	mrs	r2, BASEPRI
 8012016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201a:	f383 8811 	msr	BASEPRI, r3
 801201e:	f3bf 8f6f 	isb	sy
 8012022:	f3bf 8f4f 	dsb	sy
 8012026:	61fa      	str	r2, [r7, #28]
 8012028:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801202a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801202c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012036:	429a      	cmp	r2, r3
 8012038:	d302      	bcc.n	8012040 <xQueueGenericSendFromISR+0xbc>
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	2b02      	cmp	r3, #2
 801203e:	d12f      	bne.n	80120a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801204e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012050:	683a      	ldr	r2, [r7, #0]
 8012052:	68b9      	ldr	r1, [r7, #8]
 8012054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012056:	f000 fba0 	bl	801279a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801205a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012062:	d112      	bne.n	801208a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012068:	2b00      	cmp	r3, #0
 801206a:	d016      	beq.n	801209a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206e:	3324      	adds	r3, #36	; 0x24
 8012070:	4618      	mov	r0, r3
 8012072:	f001 fd69 	bl	8013b48 <xTaskRemoveFromEventList>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00e      	beq.n	801209a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00b      	beq.n	801209a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2201      	movs	r2, #1
 8012086:	601a      	str	r2, [r3, #0]
 8012088:	e007      	b.n	801209a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801208a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801208e:	3301      	adds	r3, #1
 8012090:	b2db      	uxtb	r3, r3
 8012092:	b25a      	sxtb	r2, r3
 8012094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801209a:	2301      	movs	r3, #1
 801209c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801209e:	e001      	b.n	80120a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	f383 8811 	msr	BASEPRI, r3
}
 80120ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3740      	adds	r7, #64	; 0x40
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b08e      	sub	sp, #56	; 0x38
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80120c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10a      	bne.n	80120e4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	623b      	str	r3, [r7, #32]
}
 80120e0:	bf00      	nop
 80120e2:	e7fe      	b.n	80120e2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80120e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00a      	beq.n	8012102 <xQueueGiveFromISR+0x48>
	__asm volatile
 80120ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f0:	f383 8811 	msr	BASEPRI, r3
 80120f4:	f3bf 8f6f 	isb	sy
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	61fb      	str	r3, [r7, #28]
}
 80120fe:	bf00      	nop
 8012100:	e7fe      	b.n	8012100 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <xQueueGiveFromISR+0x58>
 801210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d101      	bne.n	8012116 <xQueueGiveFromISR+0x5c>
 8012112:	2301      	movs	r3, #1
 8012114:	e000      	b.n	8012118 <xQueueGiveFromISR+0x5e>
 8012116:	2300      	movs	r3, #0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d10a      	bne.n	8012132 <xQueueGiveFromISR+0x78>
	__asm volatile
 801211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012120:	f383 8811 	msr	BASEPRI, r3
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	61bb      	str	r3, [r7, #24]
}
 801212e:	bf00      	nop
 8012130:	e7fe      	b.n	8012130 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012132:	f002 ff81 	bl	8015038 <vPortValidateInterruptPriority>
	__asm volatile
 8012136:	f3ef 8211 	mrs	r2, BASEPRI
 801213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213e:	f383 8811 	msr	BASEPRI, r3
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	617a      	str	r2, [r7, #20]
 801214c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801214e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801215c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801215e:	429a      	cmp	r2, r3
 8012160:	d22b      	bcs.n	80121ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216e:	1c5a      	adds	r2, r3, #1
 8012170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012172:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801217c:	d112      	bne.n	80121a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012182:	2b00      	cmp	r3, #0
 8012184:	d016      	beq.n	80121b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012188:	3324      	adds	r3, #36	; 0x24
 801218a:	4618      	mov	r0, r3
 801218c:	f001 fcdc 	bl	8013b48 <xTaskRemoveFromEventList>
 8012190:	4603      	mov	r3, r0
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00e      	beq.n	80121b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d00b      	beq.n	80121b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2201      	movs	r2, #1
 80121a0:	601a      	str	r2, [r3, #0]
 80121a2:	e007      	b.n	80121b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80121a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121a8:	3301      	adds	r3, #1
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	b25a      	sxtb	r2, r3
 80121ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80121b4:	2301      	movs	r3, #1
 80121b6:	637b      	str	r3, [r7, #52]	; 0x34
 80121b8:	e001      	b.n	80121be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80121ba:	2300      	movs	r3, #0
 80121bc:	637b      	str	r3, [r7, #52]	; 0x34
 80121be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f383 8811 	msr	BASEPRI, r3
}
 80121c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3738      	adds	r7, #56	; 0x38
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b08c      	sub	sp, #48	; 0x30
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80121e0:	2300      	movs	r3, #0
 80121e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80121e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d10a      	bne.n	8012204 <xQueueReceive+0x30>
	__asm volatile
 80121ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f2:	f383 8811 	msr	BASEPRI, r3
 80121f6:	f3bf 8f6f 	isb	sy
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	623b      	str	r3, [r7, #32]
}
 8012200:	bf00      	nop
 8012202:	e7fe      	b.n	8012202 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d103      	bne.n	8012212 <xQueueReceive+0x3e>
 801220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801220e:	2b00      	cmp	r3, #0
 8012210:	d101      	bne.n	8012216 <xQueueReceive+0x42>
 8012212:	2301      	movs	r3, #1
 8012214:	e000      	b.n	8012218 <xQueueReceive+0x44>
 8012216:	2300      	movs	r3, #0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d10a      	bne.n	8012232 <xQueueReceive+0x5e>
	__asm volatile
 801221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012220:	f383 8811 	msr	BASEPRI, r3
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	61fb      	str	r3, [r7, #28]
}
 801222e:	bf00      	nop
 8012230:	e7fe      	b.n	8012230 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012232:	f001 fe81 	bl	8013f38 <xTaskGetSchedulerState>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d102      	bne.n	8012242 <xQueueReceive+0x6e>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d101      	bne.n	8012246 <xQueueReceive+0x72>
 8012242:	2301      	movs	r3, #1
 8012244:	e000      	b.n	8012248 <xQueueReceive+0x74>
 8012246:	2300      	movs	r3, #0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d10a      	bne.n	8012262 <xQueueReceive+0x8e>
	__asm volatile
 801224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012250:	f383 8811 	msr	BASEPRI, r3
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	61bb      	str	r3, [r7, #24]
}
 801225e:	bf00      	nop
 8012260:	e7fe      	b.n	8012260 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012262:	f002 fe07 	bl	8014e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801226a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	2b00      	cmp	r3, #0
 8012270:	d01f      	beq.n	80122b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012272:	68b9      	ldr	r1, [r7, #8]
 8012274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012276:	f000 fafa 	bl	801286e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227c:	1e5a      	subs	r2, r3, #1
 801227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012280:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012284:	691b      	ldr	r3, [r3, #16]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00f      	beq.n	80122aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228c:	3310      	adds	r3, #16
 801228e:	4618      	mov	r0, r3
 8012290:	f001 fc5a 	bl	8013b48 <xTaskRemoveFromEventList>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d007      	beq.n	80122aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801229a:	4b3d      	ldr	r3, [pc, #244]	; (8012390 <xQueueReceive+0x1bc>)
 801229c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	f3bf 8f4f 	dsb	sy
 80122a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80122aa:	f002 fe13 	bl	8014ed4 <vPortExitCritical>
				return pdPASS;
 80122ae:	2301      	movs	r3, #1
 80122b0:	e069      	b.n	8012386 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d103      	bne.n	80122c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80122b8:	f002 fe0c 	bl	8014ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80122bc:	2300      	movs	r3, #0
 80122be:	e062      	b.n	8012386 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d106      	bne.n	80122d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122c6:	f107 0310 	add.w	r3, r7, #16
 80122ca:	4618      	mov	r0, r3
 80122cc:	f001 fcc6 	bl	8013c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122d0:	2301      	movs	r3, #1
 80122d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122d4:	f002 fdfe 	bl	8014ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122d8:	f001 f9e0 	bl	801369c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122dc:	f002 fdca 	bl	8014e74 <vPortEnterCritical>
 80122e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122e6:	b25b      	sxtb	r3, r3
 80122e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ec:	d103      	bne.n	80122f6 <xQueueReceive+0x122>
 80122ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f0:	2200      	movs	r2, #0
 80122f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122fc:	b25b      	sxtb	r3, r3
 80122fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012302:	d103      	bne.n	801230c <xQueueReceive+0x138>
 8012304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012306:	2200      	movs	r2, #0
 8012308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801230c:	f002 fde2 	bl	8014ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012310:	1d3a      	adds	r2, r7, #4
 8012312:	f107 0310 	add.w	r3, r7, #16
 8012316:	4611      	mov	r1, r2
 8012318:	4618      	mov	r0, r3
 801231a:	f001 fcb5 	bl	8013c88 <xTaskCheckForTimeOut>
 801231e:	4603      	mov	r3, r0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d123      	bne.n	801236c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012326:	f000 fb1a 	bl	801295e <prvIsQueueEmpty>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d017      	beq.n	8012360 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012332:	3324      	adds	r3, #36	; 0x24
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	4611      	mov	r1, r2
 8012338:	4618      	mov	r0, r3
 801233a:	f001 fbb5 	bl	8013aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801233e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012340:	f000 fabb 	bl	80128ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012344:	f001 f9b8 	bl	80136b8 <xTaskResumeAll>
 8012348:	4603      	mov	r3, r0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d189      	bne.n	8012262 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801234e:	4b10      	ldr	r3, [pc, #64]	; (8012390 <xQueueReceive+0x1bc>)
 8012350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	e780      	b.n	8012262 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012362:	f000 faaa 	bl	80128ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012366:	f001 f9a7 	bl	80136b8 <xTaskResumeAll>
 801236a:	e77a      	b.n	8012262 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801236c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801236e:	f000 faa4 	bl	80128ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012372:	f001 f9a1 	bl	80136b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012378:	f000 faf1 	bl	801295e <prvIsQueueEmpty>
 801237c:	4603      	mov	r3, r0
 801237e:	2b00      	cmp	r3, #0
 8012380:	f43f af6f 	beq.w	8012262 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012386:	4618      	mov	r0, r3
 8012388:	3730      	adds	r7, #48	; 0x30
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	e000ed04 	.word	0xe000ed04

08012394 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b08e      	sub	sp, #56	; 0x38
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801239e:	2300      	movs	r3, #0
 80123a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80123a6:	2300      	movs	r3, #0
 80123a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80123aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d10a      	bne.n	80123c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80123b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	623b      	str	r3, [r7, #32]
}
 80123c2:	bf00      	nop
 80123c4:	e7fe      	b.n	80123c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80123c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d00a      	beq.n	80123e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80123ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d2:	f383 8811 	msr	BASEPRI, r3
 80123d6:	f3bf 8f6f 	isb	sy
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	61fb      	str	r3, [r7, #28]
}
 80123e0:	bf00      	nop
 80123e2:	e7fe      	b.n	80123e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123e4:	f001 fda8 	bl	8013f38 <xTaskGetSchedulerState>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d102      	bne.n	80123f4 <xQueueSemaphoreTake+0x60>
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d101      	bne.n	80123f8 <xQueueSemaphoreTake+0x64>
 80123f4:	2301      	movs	r3, #1
 80123f6:	e000      	b.n	80123fa <xQueueSemaphoreTake+0x66>
 80123f8:	2300      	movs	r3, #0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10a      	bne.n	8012414 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80123fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012402:	f383 8811 	msr	BASEPRI, r3
 8012406:	f3bf 8f6f 	isb	sy
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	61bb      	str	r3, [r7, #24]
}
 8012410:	bf00      	nop
 8012412:	e7fe      	b.n	8012412 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012414:	f002 fd2e 	bl	8014e74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801241c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012420:	2b00      	cmp	r3, #0
 8012422:	d024      	beq.n	801246e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012426:	1e5a      	subs	r2, r3, #1
 8012428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d104      	bne.n	801243e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012434:	f001 fef6 	bl	8014224 <pvTaskIncrementMutexHeldCount>
 8012438:	4602      	mov	r2, r0
 801243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012440:	691b      	ldr	r3, [r3, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d00f      	beq.n	8012466 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012448:	3310      	adds	r3, #16
 801244a:	4618      	mov	r0, r3
 801244c:	f001 fb7c 	bl	8013b48 <xTaskRemoveFromEventList>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d007      	beq.n	8012466 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012456:	4b54      	ldr	r3, [pc, #336]	; (80125a8 <xQueueSemaphoreTake+0x214>)
 8012458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801245c:	601a      	str	r2, [r3, #0]
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012466:	f002 fd35 	bl	8014ed4 <vPortExitCritical>
				return pdPASS;
 801246a:	2301      	movs	r3, #1
 801246c:	e097      	b.n	801259e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d111      	bne.n	8012498 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012476:	2b00      	cmp	r3, #0
 8012478:	d00a      	beq.n	8012490 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247e:	f383 8811 	msr	BASEPRI, r3
 8012482:	f3bf 8f6f 	isb	sy
 8012486:	f3bf 8f4f 	dsb	sy
 801248a:	617b      	str	r3, [r7, #20]
}
 801248c:	bf00      	nop
 801248e:	e7fe      	b.n	801248e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012490:	f002 fd20 	bl	8014ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012494:	2300      	movs	r3, #0
 8012496:	e082      	b.n	801259e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249a:	2b00      	cmp	r3, #0
 801249c:	d106      	bne.n	80124ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801249e:	f107 030c 	add.w	r3, r7, #12
 80124a2:	4618      	mov	r0, r3
 80124a4:	f001 fbda 	bl	8013c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80124a8:	2301      	movs	r3, #1
 80124aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80124ac:	f002 fd12 	bl	8014ed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124b0:	f001 f8f4 	bl	801369c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124b4:	f002 fcde 	bl	8014e74 <vPortEnterCritical>
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124be:	b25b      	sxtb	r3, r3
 80124c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c4:	d103      	bne.n	80124ce <xQueueSemaphoreTake+0x13a>
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	2200      	movs	r2, #0
 80124ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124d4:	b25b      	sxtb	r3, r3
 80124d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124da:	d103      	bne.n	80124e4 <xQueueSemaphoreTake+0x150>
 80124dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124e4:	f002 fcf6 	bl	8014ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124e8:	463a      	mov	r2, r7
 80124ea:	f107 030c 	add.w	r3, r7, #12
 80124ee:	4611      	mov	r1, r2
 80124f0:	4618      	mov	r0, r3
 80124f2:	f001 fbc9 	bl	8013c88 <xTaskCheckForTimeOut>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d132      	bne.n	8012562 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80124fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124fe:	f000 fa2e 	bl	801295e <prvIsQueueEmpty>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d026      	beq.n	8012556 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d109      	bne.n	8012524 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012510:	f002 fcb0 	bl	8014e74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	4618      	mov	r0, r3
 801251a:	f001 fd2b 	bl	8013f74 <xTaskPriorityInherit>
 801251e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012520:	f002 fcd8 	bl	8014ed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012526:	3324      	adds	r3, #36	; 0x24
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	4611      	mov	r1, r2
 801252c:	4618      	mov	r0, r3
 801252e:	f001 fabb 	bl	8013aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012534:	f000 f9c1 	bl	80128ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012538:	f001 f8be 	bl	80136b8 <xTaskResumeAll>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	f47f af68 	bne.w	8012414 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012544:	4b18      	ldr	r3, [pc, #96]	; (80125a8 <xQueueSemaphoreTake+0x214>)
 8012546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	f3bf 8f6f 	isb	sy
 8012554:	e75e      	b.n	8012414 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012558:	f000 f9af 	bl	80128ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801255c:	f001 f8ac 	bl	80136b8 <xTaskResumeAll>
 8012560:	e758      	b.n	8012414 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012564:	f000 f9a9 	bl	80128ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012568:	f001 f8a6 	bl	80136b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801256c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801256e:	f000 f9f6 	bl	801295e <prvIsQueueEmpty>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	f43f af4d 	beq.w	8012414 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	2b00      	cmp	r3, #0
 801257e:	d00d      	beq.n	801259c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012580:	f002 fc78 	bl	8014e74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012586:	f000 f8f0 	bl	801276a <prvGetDisinheritPriorityAfterTimeout>
 801258a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258e:	689b      	ldr	r3, [r3, #8]
 8012590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012592:	4618      	mov	r0, r3
 8012594:	f001 fdc4 	bl	8014120 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012598:	f002 fc9c 	bl	8014ed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801259c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3738      	adds	r7, #56	; 0x38
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	e000ed04 	.word	0xe000ed04

080125ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b08e      	sub	sp, #56	; 0x38
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80125bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10a      	bne.n	80125d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80125c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c6:	f383 8811 	msr	BASEPRI, r3
 80125ca:	f3bf 8f6f 	isb	sy
 80125ce:	f3bf 8f4f 	dsb	sy
 80125d2:	623b      	str	r3, [r7, #32]
}
 80125d4:	bf00      	nop
 80125d6:	e7fe      	b.n	80125d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d103      	bne.n	80125e6 <xQueueReceiveFromISR+0x3a>
 80125de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d101      	bne.n	80125ea <xQueueReceiveFromISR+0x3e>
 80125e6:	2301      	movs	r3, #1
 80125e8:	e000      	b.n	80125ec <xQueueReceiveFromISR+0x40>
 80125ea:	2300      	movs	r3, #0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10a      	bne.n	8012606 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80125f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	61fb      	str	r3, [r7, #28]
}
 8012602:	bf00      	nop
 8012604:	e7fe      	b.n	8012604 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012606:	f002 fd17 	bl	8015038 <vPortValidateInterruptPriority>
	__asm volatile
 801260a:	f3ef 8211 	mrs	r2, BASEPRI
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	61ba      	str	r2, [r7, #24]
 8012620:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012622:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012624:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801262a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262e:	2b00      	cmp	r3, #0
 8012630:	d02f      	beq.n	8012692 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801263c:	68b9      	ldr	r1, [r7, #8]
 801263e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012640:	f000 f915 	bl	801286e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012646:	1e5a      	subs	r2, r3, #1
 8012648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801264c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012654:	d112      	bne.n	801267c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012658:	691b      	ldr	r3, [r3, #16]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d016      	beq.n	801268c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	3310      	adds	r3, #16
 8012662:	4618      	mov	r0, r3
 8012664:	f001 fa70 	bl	8013b48 <xTaskRemoveFromEventList>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00e      	beq.n	801268c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d00b      	beq.n	801268c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2201      	movs	r2, #1
 8012678:	601a      	str	r2, [r3, #0]
 801267a:	e007      	b.n	801268c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801267c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012680:	3301      	adds	r3, #1
 8012682:	b2db      	uxtb	r3, r3
 8012684:	b25a      	sxtb	r2, r3
 8012686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801268c:	2301      	movs	r3, #1
 801268e:	637b      	str	r3, [r7, #52]	; 0x34
 8012690:	e001      	b.n	8012696 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012692:	2300      	movs	r3, #0
 8012694:	637b      	str	r3, [r7, #52]	; 0x34
 8012696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012698:	613b      	str	r3, [r7, #16]
	__asm volatile
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	f383 8811 	msr	BASEPRI, r3
}
 80126a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80126a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3738      	adds	r7, #56	; 0x38
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10a      	bne.n	80126d0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	60bb      	str	r3, [r7, #8]
}
 80126cc:	bf00      	nop
 80126ce:	e7fe      	b.n	80126ce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80126d0:	f002 fbd0 	bl	8014e74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80126da:	f002 fbfb 	bl	8014ed4 <vPortExitCritical>

	return uxReturn;
 80126de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80126e0:	4618      	mov	r0, r3
 80126e2:	3710      	adds	r7, #16
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80126e8:	b480      	push	{r7}
 80126ea:	b087      	sub	sp, #28
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10a      	bne.n	8012710 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80126fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	60fb      	str	r3, [r7, #12]
}
 801270c:	bf00      	nop
 801270e:	e7fe      	b.n	801270e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012714:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012716:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012718:	4618      	mov	r0, r3
 801271a:	371c      	adds	r7, #28
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr

08012724 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d10a      	bne.n	801274c <vQueueDelete+0x28>
	__asm volatile
 8012736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273a:	f383 8811 	msr	BASEPRI, r3
 801273e:	f3bf 8f6f 	isb	sy
 8012742:	f3bf 8f4f 	dsb	sy
 8012746:	60bb      	str	r3, [r7, #8]
}
 8012748:	bf00      	nop
 801274a:	e7fe      	b.n	801274a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f000 f95f 	bl	8012a10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012758:	2b00      	cmp	r3, #0
 801275a:	d102      	bne.n	8012762 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f002 fd7b 	bl	8015258 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012762:	bf00      	nop
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801276a:	b480      	push	{r7}
 801276c:	b085      	sub	sp, #20
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012776:	2b00      	cmp	r3, #0
 8012778:	d006      	beq.n	8012788 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012784:	60fb      	str	r3, [r7, #12]
 8012786:	e001      	b.n	801278c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012788:	2300      	movs	r3, #0
 801278a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801278c:	68fb      	ldr	r3, [r7, #12]
	}
 801278e:	4618      	mov	r0, r3
 8012790:	3714      	adds	r7, #20
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr

0801279a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801279a:	b580      	push	{r7, lr}
 801279c:	b086      	sub	sp, #24
 801279e:	af00      	add	r7, sp, #0
 80127a0:	60f8      	str	r0, [r7, #12]
 80127a2:	60b9      	str	r1, [r7, #8]
 80127a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80127a6:	2300      	movs	r3, #0
 80127a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d10d      	bne.n	80127d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d14d      	bne.n	801285c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f001 fc3d 	bl	8014044 <xTaskPriorityDisinherit>
 80127ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2200      	movs	r2, #0
 80127d0:	609a      	str	r2, [r3, #8]
 80127d2:	e043      	b.n	801285c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d119      	bne.n	801280e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	6858      	ldr	r0, [r3, #4]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127e2:	461a      	mov	r2, r3
 80127e4:	68b9      	ldr	r1, [r7, #8]
 80127e6:	f003 f9fd 	bl	8015be4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	685a      	ldr	r2, [r3, #4]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127f2:	441a      	add	r2, r3
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	685a      	ldr	r2, [r3, #4]
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	689b      	ldr	r3, [r3, #8]
 8012800:	429a      	cmp	r2, r3
 8012802:	d32b      	bcc.n	801285c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	605a      	str	r2, [r3, #4]
 801280c:	e026      	b.n	801285c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	68d8      	ldr	r0, [r3, #12]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012816:	461a      	mov	r2, r3
 8012818:	68b9      	ldr	r1, [r7, #8]
 801281a:	f003 f9e3 	bl	8015be4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	68da      	ldr	r2, [r3, #12]
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012826:	425b      	negs	r3, r3
 8012828:	441a      	add	r2, r3
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	68da      	ldr	r2, [r3, #12]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	429a      	cmp	r2, r3
 8012838:	d207      	bcs.n	801284a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	689a      	ldr	r2, [r3, #8]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012842:	425b      	negs	r3, r3
 8012844:	441a      	add	r2, r3
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2b02      	cmp	r3, #2
 801284e:	d105      	bne.n	801285c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d002      	beq.n	801285c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	3b01      	subs	r3, #1
 801285a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	1c5a      	adds	r2, r3, #1
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012864:	697b      	ldr	r3, [r7, #20]
}
 8012866:	4618      	mov	r0, r3
 8012868:	3718      	adds	r7, #24
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801286e:	b580      	push	{r7, lr}
 8012870:	b082      	sub	sp, #8
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801287c:	2b00      	cmp	r3, #0
 801287e:	d018      	beq.n	80128b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	68da      	ldr	r2, [r3, #12]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012888:	441a      	add	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	68da      	ldr	r2, [r3, #12]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	429a      	cmp	r2, r3
 8012898:	d303      	bcc.n	80128a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	68d9      	ldr	r1, [r3, #12]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128aa:	461a      	mov	r2, r3
 80128ac:	6838      	ldr	r0, [r7, #0]
 80128ae:	f003 f999 	bl	8015be4 <memcpy>
	}
}
 80128b2:	bf00      	nop
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80128ba:	b580      	push	{r7, lr}
 80128bc:	b084      	sub	sp, #16
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80128c2:	f002 fad7 	bl	8014e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128ce:	e011      	b.n	80128f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d012      	beq.n	80128fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	3324      	adds	r3, #36	; 0x24
 80128dc:	4618      	mov	r0, r3
 80128de:	f001 f933 	bl	8013b48 <xTaskRemoveFromEventList>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d001      	beq.n	80128ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80128e8:	f001 fa30 	bl	8013d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80128ec:	7bfb      	ldrb	r3, [r7, #15]
 80128ee:	3b01      	subs	r3, #1
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	dce9      	bgt.n	80128d0 <prvUnlockQueue+0x16>
 80128fc:	e000      	b.n	8012900 <prvUnlockQueue+0x46>
					break;
 80128fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	22ff      	movs	r2, #255	; 0xff
 8012904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012908:	f002 fae4 	bl	8014ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801290c:	f002 fab2 	bl	8014e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012916:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012918:	e011      	b.n	801293e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	691b      	ldr	r3, [r3, #16]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d012      	beq.n	8012948 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	3310      	adds	r3, #16
 8012926:	4618      	mov	r0, r3
 8012928:	f001 f90e 	bl	8013b48 <xTaskRemoveFromEventList>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012932:	f001 fa0b 	bl	8013d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012936:	7bbb      	ldrb	r3, [r7, #14]
 8012938:	3b01      	subs	r3, #1
 801293a:	b2db      	uxtb	r3, r3
 801293c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801293e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012942:	2b00      	cmp	r3, #0
 8012944:	dce9      	bgt.n	801291a <prvUnlockQueue+0x60>
 8012946:	e000      	b.n	801294a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012948:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	22ff      	movs	r2, #255	; 0xff
 801294e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012952:	f002 fabf 	bl	8014ed4 <vPortExitCritical>
}
 8012956:	bf00      	nop
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b084      	sub	sp, #16
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012966:	f002 fa85 	bl	8014e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801296e:	2b00      	cmp	r3, #0
 8012970:	d102      	bne.n	8012978 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012972:	2301      	movs	r3, #1
 8012974:	60fb      	str	r3, [r7, #12]
 8012976:	e001      	b.n	801297c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012978:	2300      	movs	r3, #0
 801297a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801297c:	f002 faaa 	bl	8014ed4 <vPortExitCritical>

	return xReturn;
 8012980:	68fb      	ldr	r3, [r7, #12]
}
 8012982:	4618      	mov	r0, r3
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b084      	sub	sp, #16
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012992:	f002 fa6f 	bl	8014e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801299e:	429a      	cmp	r2, r3
 80129a0:	d102      	bne.n	80129a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80129a2:	2301      	movs	r3, #1
 80129a4:	60fb      	str	r3, [r7, #12]
 80129a6:	e001      	b.n	80129ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80129a8:	2300      	movs	r3, #0
 80129aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80129ac:	f002 fa92 	bl	8014ed4 <vPortExitCritical>

	return xReturn;
 80129b0:	68fb      	ldr	r3, [r7, #12]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
	...

080129bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80129bc:	b480      	push	{r7}
 80129be:	b085      	sub	sp, #20
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80129c6:	2300      	movs	r3, #0
 80129c8:	60fb      	str	r3, [r7, #12]
 80129ca:	e014      	b.n	80129f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80129cc:	4a0f      	ldr	r2, [pc, #60]	; (8012a0c <vQueueAddToRegistry+0x50>)
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d10b      	bne.n	80129f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80129d8:	490c      	ldr	r1, [pc, #48]	; (8012a0c <vQueueAddToRegistry+0x50>)
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	683a      	ldr	r2, [r7, #0]
 80129de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80129e2:	4a0a      	ldr	r2, [pc, #40]	; (8012a0c <vQueueAddToRegistry+0x50>)
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	00db      	lsls	r3, r3, #3
 80129e8:	4413      	add	r3, r2
 80129ea:	687a      	ldr	r2, [r7, #4]
 80129ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80129ee:	e006      	b.n	80129fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	3301      	adds	r3, #1
 80129f4:	60fb      	str	r3, [r7, #12]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2b07      	cmp	r3, #7
 80129fa:	d9e7      	bls.n	80129cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80129fc:	bf00      	nop
 80129fe:	bf00      	nop
 8012a00:	3714      	adds	r7, #20
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	20001d68 	.word	0x20001d68

08012a10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012a10:	b480      	push	{r7}
 8012a12:	b085      	sub	sp, #20
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a18:	2300      	movs	r3, #0
 8012a1a:	60fb      	str	r3, [r7, #12]
 8012a1c:	e016      	b.n	8012a4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012a1e:	4a10      	ldr	r2, [pc, #64]	; (8012a60 <vQueueUnregisterQueue+0x50>)
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	4413      	add	r3, r2
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	687a      	ldr	r2, [r7, #4]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d10b      	bne.n	8012a46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012a2e:	4a0c      	ldr	r2, [pc, #48]	; (8012a60 <vQueueUnregisterQueue+0x50>)
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2100      	movs	r1, #0
 8012a34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012a38:	4a09      	ldr	r2, [pc, #36]	; (8012a60 <vQueueUnregisterQueue+0x50>)
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	00db      	lsls	r3, r3, #3
 8012a3e:	4413      	add	r3, r2
 8012a40:	2200      	movs	r2, #0
 8012a42:	605a      	str	r2, [r3, #4]
				break;
 8012a44:	e006      	b.n	8012a54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	3301      	adds	r3, #1
 8012a4a:	60fb      	str	r3, [r7, #12]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2b07      	cmp	r3, #7
 8012a50:	d9e5      	bls.n	8012a1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012a52:	bf00      	nop
 8012a54:	bf00      	nop
 8012a56:	3714      	adds	r7, #20
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr
 8012a60:	20001d68 	.word	0x20001d68

08012a64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b086      	sub	sp, #24
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012a74:	f002 f9fe 	bl	8014e74 <vPortEnterCritical>
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a7e:	b25b      	sxtb	r3, r3
 8012a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a84:	d103      	bne.n	8012a8e <vQueueWaitForMessageRestricted+0x2a>
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a94:	b25b      	sxtb	r3, r3
 8012a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9a:	d103      	bne.n	8012aa4 <vQueueWaitForMessageRestricted+0x40>
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012aa4:	f002 fa16 	bl	8014ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d106      	bne.n	8012abe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	3324      	adds	r3, #36	; 0x24
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	68b9      	ldr	r1, [r7, #8]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f001 f819 	bl	8013af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012abe:	6978      	ldr	r0, [r7, #20]
 8012ac0:	f7ff fefb 	bl	80128ba <prvUnlockQueue>
	}
 8012ac4:	bf00      	nop
 8012ac6:	3718      	adds	r7, #24
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b08c      	sub	sp, #48	; 0x30
 8012ad0:	af02      	add	r7, sp, #8
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	60b9      	str	r1, [r7, #8]
 8012ad6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	d110      	bne.n	8012b00 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2b04      	cmp	r3, #4
 8012ae8:	d81b      	bhi.n	8012b22 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8012aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	61fb      	str	r3, [r7, #28]
}
 8012afc:	bf00      	nop
 8012afe:	e7fe      	b.n	8012afe <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8012b00:	2300      	movs	r3, #0
 8012b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d10a      	bne.n	8012b22 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8012b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b10:	f383 8811 	msr	BASEPRI, r3
 8012b14:	f3bf 8f6f 	isb	sy
 8012b18:	f3bf 8f4f 	dsb	sy
 8012b1c:	61bb      	str	r3, [r7, #24]
}
 8012b1e:	bf00      	nop
 8012b20:	e7fe      	b.n	8012b20 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8012b22:	68ba      	ldr	r2, [r7, #8]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d90a      	bls.n	8012b40 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8012b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b2e:	f383 8811 	msr	BASEPRI, r3
 8012b32:	f3bf 8f6f 	isb	sy
 8012b36:	f3bf 8f4f 	dsb	sy
 8012b3a:	617b      	str	r3, [r7, #20]
}
 8012b3c:	bf00      	nop
 8012b3e:	e7fe      	b.n	8012b3e <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d101      	bne.n	8012b4a <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8012b46:	2301      	movs	r3, #1
 8012b48:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	3324      	adds	r3, #36	; 0x24
 8012b54:	4618      	mov	r0, r3
 8012b56:	f002 faaf 	bl	80150b8 <pvPortMalloc>
 8012b5a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8012b5c:	6a3b      	ldr	r3, [r7, #32]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d00a      	beq.n	8012b78 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8012b62:	6a3b      	ldr	r3, [r7, #32]
 8012b64:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	68fa      	ldr	r2, [r7, #12]
 8012b72:	6a38      	ldr	r0, [r7, #32]
 8012b74:	f000 fafd 	bl	8013172 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8012b78:	6a3b      	ldr	r3, [r7, #32]
	}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3728      	adds	r7, #40	; 0x28
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8012b82:	b480      	push	{r7}
 8012b84:	b087      	sub	sp, #28
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10a      	bne.n	8012baa <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	60fb      	str	r3, [r7, #12]
}
 8012ba6:	bf00      	nop
 8012ba8:	e7fe      	b.n	8012ba8 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	689a      	ldr	r2, [r3, #8]
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	697a      	ldr	r2, [r7, #20]
 8012bbc:	1ad3      	subs	r3, r2, r3
 8012bbe:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	689b      	ldr	r3, [r3, #8]
 8012bca:	697a      	ldr	r2, [r7, #20]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d304      	bcc.n	8012bda <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	697a      	ldr	r2, [r7, #20]
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8012bda:	697b      	ldr	r3, [r7, #20]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	371c      	adds	r7, #28
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr

08012be8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b090      	sub	sp, #64	; 0x40
 8012bec:	af02      	add	r7, sp, #8
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
 8012bf4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d10a      	bne.n	8012c1e <xStreamBufferSend+0x36>
	__asm volatile
 8012c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c0c:	f383 8811 	msr	BASEPRI, r3
 8012c10:	f3bf 8f6f 	isb	sy
 8012c14:	f3bf 8f4f 	dsb	sy
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012c1a:	bf00      	nop
 8012c1c:	e7fe      	b.n	8012c1c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8012c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d10a      	bne.n	8012c3a <xStreamBufferSend+0x52>
	__asm volatile
 8012c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c28:	f383 8811 	msr	BASEPRI, r3
 8012c2c:	f3bf 8f6f 	isb	sy
 8012c30:	f3bf 8f4f 	dsb	sy
 8012c34:	623b      	str	r3, [r7, #32]
}
 8012c36:	bf00      	nop
 8012c38:	e7fe      	b.n	8012c38 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8012c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3c:	7f1b      	ldrb	r3, [r3, #28]
 8012c3e:	f003 0301 	and.w	r3, r3, #1
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d011      	beq.n	8012c6a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8012c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c48:	3304      	adds	r3, #4
 8012c4a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8012c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d80a      	bhi.n	8012c6a <xStreamBufferSend+0x82>
	__asm volatile
 8012c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	61fb      	str	r3, [r7, #28]
}
 8012c66:	bf00      	nop
 8012c68:	e7fe      	b.n	8012c68 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d03e      	beq.n	8012cee <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8012c70:	f107 0310 	add.w	r3, r7, #16
 8012c74:	4618      	mov	r0, r3
 8012c76:	f000 ffcb 	bl	8013c10 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8012c7a:	f002 f8fb 	bl	8014e74 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8012c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c80:	f7ff ff7f 	bl	8012b82 <xStreamBufferSpacesAvailable>
 8012c84:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8012c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d217      	bcs.n	8012cbe <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8012c8e:	2000      	movs	r0, #0
 8012c90:	f001 fbfa 	bl	8014488 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8012c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c96:	695b      	ldr	r3, [r3, #20]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d00a      	beq.n	8012cb2 <xStreamBufferSend+0xca>
	__asm volatile
 8012c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca0:	f383 8811 	msr	BASEPRI, r3
 8012ca4:	f3bf 8f6f 	isb	sy
 8012ca8:	f3bf 8f4f 	dsb	sy
 8012cac:	61bb      	str	r3, [r7, #24]
}
 8012cae:	bf00      	nop
 8012cb0:	e7fe      	b.n	8012cb0 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8012cb2:	f001 f931 	bl	8013f18 <xTaskGetCurrentTaskHandle>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	615a      	str	r2, [r3, #20]
 8012cbc:	e002      	b.n	8012cc4 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8012cbe:	f002 f909 	bl	8014ed4 <vPortExitCritical>
					break;
 8012cc2:	e014      	b.n	8012cee <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8012cc4:	f002 f906 	bl	8014ed4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	2100      	movs	r1, #0
 8012cce:	2000      	movs	r0, #0
 8012cd0:	f001 fabc 	bl	801424c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8012cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8012cda:	463a      	mov	r2, r7
 8012cdc:	f107 0310 	add.w	r3, r7, #16
 8012ce0:	4611      	mov	r1, r2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 ffd0 	bl	8013c88 <xTaskCheckForTimeOut>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d0c5      	beq.n	8012c7a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8012cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d103      	bne.n	8012cfc <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8012cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cf6:	f7ff ff44 	bl	8012b82 <xStreamBufferSpacesAvailable>
 8012cfa:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d08:	f000 f823 	bl	8012d52 <prvWriteMessageToBuffer>
 8012d0c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8012d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d019      	beq.n	8012d48 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8012d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d16:	f000 fa0c 	bl	8013132 <prvBytesInBuffer>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d311      	bcc.n	8012d48 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8012d24:	f000 fcba 	bl	801369c <vTaskSuspendAll>
 8012d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d2a:	691b      	ldr	r3, [r3, #16]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d009      	beq.n	8012d44 <xStreamBufferSend+0x15c>
 8012d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d32:	6918      	ldr	r0, [r3, #16]
 8012d34:	2300      	movs	r3, #0
 8012d36:	2200      	movs	r2, #0
 8012d38:	2100      	movs	r1, #0
 8012d3a:	f001 fae7 	bl	801430c <xTaskGenericNotify>
 8012d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d40:	2200      	movs	r2, #0
 8012d42:	611a      	str	r2, [r3, #16]
 8012d44:	f000 fcb8 	bl	80136b8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8012d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3738      	adds	r7, #56	; 0x38
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b086      	sub	sp, #24
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	60f8      	str	r0, [r7, #12]
 8012d5a:	60b9      	str	r1, [r7, #8]
 8012d5c:	607a      	str	r2, [r7, #4]
 8012d5e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d102      	bne.n	8012d6c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8012d66:	2300      	movs	r3, #0
 8012d68:	617b      	str	r3, [r7, #20]
 8012d6a:	e01d      	b.n	8012da8 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	7f1b      	ldrb	r3, [r3, #28]
 8012d70:	f003 0301 	and.w	r3, r3, #1
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d108      	bne.n	8012d8a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8012d78:	2301      	movs	r3, #1
 8012d7a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	4293      	cmp	r3, r2
 8012d82:	bf28      	it	cs
 8012d84:	4613      	movcs	r3, r2
 8012d86:	607b      	str	r3, [r7, #4]
 8012d88:	e00e      	b.n	8012da8 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8012d8a:	683a      	ldr	r2, [r7, #0]
 8012d8c:	6a3b      	ldr	r3, [r7, #32]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d308      	bcc.n	8012da4 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8012d92:	2301      	movs	r3, #1
 8012d94:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8012d96:	1d3b      	adds	r3, r7, #4
 8012d98:	2204      	movs	r2, #4
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f000 f8dc 	bl	8012f5a <prvWriteBytesToBuffer>
 8012da2:	e001      	b.n	8012da8 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8012da4:	2300      	movs	r3, #0
 8012da6:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d007      	beq.n	8012dbe <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	461a      	mov	r2, r3
 8012db2:	68b9      	ldr	r1, [r7, #8]
 8012db4:	68f8      	ldr	r0, [r7, #12]
 8012db6:	f000 f8d0 	bl	8012f5a <prvWriteBytesToBuffer>
 8012dba:	6138      	str	r0, [r7, #16]
 8012dbc:	e001      	b.n	8012dc2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8012dc2:	693b      	ldr	r3, [r7, #16]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3718      	adds	r7, #24
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b08e      	sub	sp, #56	; 0x38
 8012dd0:	af02      	add	r7, sp, #8
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
 8012dd8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8012dde:	2300      	movs	r3, #0
 8012de0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10a      	bne.n	8012dfe <xStreamBufferReceive+0x32>
	__asm volatile
 8012de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	61fb      	str	r3, [r7, #28]
}
 8012dfa:	bf00      	nop
 8012dfc:	e7fe      	b.n	8012dfc <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8012dfe:	6a3b      	ldr	r3, [r7, #32]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d10a      	bne.n	8012e1a <xStreamBufferReceive+0x4e>
	__asm volatile
 8012e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e08:	f383 8811 	msr	BASEPRI, r3
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	61bb      	str	r3, [r7, #24]
}
 8012e16:	bf00      	nop
 8012e18:	e7fe      	b.n	8012e18 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8012e1a:	6a3b      	ldr	r3, [r7, #32]
 8012e1c:	7f1b      	ldrb	r3, [r3, #28]
 8012e1e:	f003 0301 	and.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d002      	beq.n	8012e2c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8012e26:	2304      	movs	r3, #4
 8012e28:	627b      	str	r3, [r7, #36]	; 0x24
 8012e2a:	e001      	b.n	8012e30 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d034      	beq.n	8012ea0 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8012e36:	f002 f81d 	bl	8014e74 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8012e3a:	6a38      	ldr	r0, [r7, #32]
 8012e3c:	f000 f979 	bl	8013132 <prvBytesInBuffer>
 8012e40:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8012e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d816      	bhi.n	8012e78 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8012e4a:	2000      	movs	r0, #0
 8012e4c:	f001 fb1c 	bl	8014488 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8012e50:	6a3b      	ldr	r3, [r7, #32]
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d00a      	beq.n	8012e6e <xStreamBufferReceive+0xa2>
	__asm volatile
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	617b      	str	r3, [r7, #20]
}
 8012e6a:	bf00      	nop
 8012e6c:	e7fe      	b.n	8012e6c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8012e6e:	f001 f853 	bl	8013f18 <xTaskGetCurrentTaskHandle>
 8012e72:	4602      	mov	r2, r0
 8012e74:	6a3b      	ldr	r3, [r7, #32]
 8012e76:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012e78:	f002 f82c 	bl	8014ed4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8012e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d811      	bhi.n	8012ea8 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	2200      	movs	r2, #0
 8012e88:	2100      	movs	r1, #0
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	f001 f9de 	bl	801424c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8012e90:	6a3b      	ldr	r3, [r7, #32]
 8012e92:	2200      	movs	r2, #0
 8012e94:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8012e96:	6a38      	ldr	r0, [r7, #32]
 8012e98:	f000 f94b 	bl	8013132 <prvBytesInBuffer>
 8012e9c:	62b8      	str	r0, [r7, #40]	; 0x28
 8012e9e:	e003      	b.n	8012ea8 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8012ea0:	6a38      	ldr	r0, [r7, #32]
 8012ea2:	f000 f946 	bl	8013132 <prvBytesInBuffer>
 8012ea6:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8012ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d91d      	bls.n	8012eec <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8012eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb2:	9300      	str	r3, [sp, #0]
 8012eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	68b9      	ldr	r1, [r7, #8]
 8012eba:	6a38      	ldr	r0, [r7, #32]
 8012ebc:	f000 f81b 	bl	8012ef6 <prvReadMessageFromBuffer>
 8012ec0:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8012ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d011      	beq.n	8012eec <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8012ec8:	f000 fbe8 	bl	801369c <vTaskSuspendAll>
 8012ecc:	6a3b      	ldr	r3, [r7, #32]
 8012ece:	695b      	ldr	r3, [r3, #20]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d009      	beq.n	8012ee8 <xStreamBufferReceive+0x11c>
 8012ed4:	6a3b      	ldr	r3, [r7, #32]
 8012ed6:	6958      	ldr	r0, [r3, #20]
 8012ed8:	2300      	movs	r3, #0
 8012eda:	2200      	movs	r2, #0
 8012edc:	2100      	movs	r1, #0
 8012ede:	f001 fa15 	bl	801430c <xTaskGenericNotify>
 8012ee2:	6a3b      	ldr	r3, [r7, #32]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	615a      	str	r2, [r3, #20]
 8012ee8:	f000 fbe6 	bl	80136b8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8012eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3730      	adds	r7, #48	; 0x30
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8012ef6:	b580      	push	{r7, lr}
 8012ef8:	b088      	sub	sp, #32
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	60f8      	str	r0, [r7, #12]
 8012efe:	60b9      	str	r1, [r7, #8]
 8012f00:	607a      	str	r2, [r7, #4]
 8012f02:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8012f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d019      	beq.n	8012f3e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8012f10:	f107 0110 	add.w	r1, r7, #16
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f18:	68f8      	ldr	r0, [r7, #12]
 8012f1a:	f000 f890 	bl	801303e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8012f22:	683a      	ldr	r2, [r7, #0]
 8012f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f26:	1ad3      	subs	r3, r2, r3
 8012f28:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8012f2a:	69fa      	ldr	r2, [r7, #28]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d907      	bls.n	8012f42 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	69ba      	ldr	r2, [r7, #24]
 8012f36:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	61fb      	str	r3, [r7, #28]
 8012f3c:	e001      	b.n	8012f42 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	69fa      	ldr	r2, [r7, #28]
 8012f46:	68b9      	ldr	r1, [r7, #8]
 8012f48:	68f8      	ldr	r0, [r7, #12]
 8012f4a:	f000 f878 	bl	801303e <prvReadBytesFromBuffer>
 8012f4e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8012f50:	697b      	ldr	r3, [r7, #20]
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3720      	adds	r7, #32
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b08a      	sub	sp, #40	; 0x28
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	60f8      	str	r0, [r7, #12]
 8012f62:	60b9      	str	r1, [r7, #8]
 8012f64:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d10a      	bne.n	8012f82 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8012f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	61fb      	str	r3, [r7, #28]
}
 8012f7e:	bf00      	nop
 8012f80:	e7fe      	b.n	8012f80 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	689a      	ldr	r2, [r3, #8]
 8012f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	4293      	cmp	r3, r2
 8012f94:	bf28      	it	cs
 8012f96:	4613      	movcs	r3, r2
 8012f98:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8012f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f9c:	6a3b      	ldr	r3, [r7, #32]
 8012f9e:	441a      	add	r2, r3
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d90a      	bls.n	8012fbe <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8012fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fac:	f383 8811 	msr	BASEPRI, r3
 8012fb0:	f3bf 8f6f 	isb	sy
 8012fb4:	f3bf 8f4f 	dsb	sy
 8012fb8:	61bb      	str	r3, [r7, #24]
}
 8012fba:	bf00      	nop
 8012fbc:	e7fe      	b.n	8012fbc <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	699a      	ldr	r2, [r3, #24]
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	4413      	add	r3, r2
 8012fc6:	6a3a      	ldr	r2, [r7, #32]
 8012fc8:	68b9      	ldr	r1, [r7, #8]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f002 fe0a 	bl	8015be4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d91c      	bls.n	8013012 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	6a3b      	ldr	r3, [r7, #32]
 8012fdc:	1ad2      	subs	r2, r2, r3
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d90a      	bls.n	8012ffc <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8012fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	617b      	str	r3, [r7, #20]
}
 8012ff8:	bf00      	nop
 8012ffa:	e7fe      	b.n	8012ffa <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	6998      	ldr	r0, [r3, #24]
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	6a3b      	ldr	r3, [r7, #32]
 8013004:	18d1      	adds	r1, r2, r3
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	6a3b      	ldr	r3, [r7, #32]
 801300a:	1ad3      	subs	r3, r2, r3
 801300c:	461a      	mov	r2, r3
 801300e:	f002 fde9 	bl	8015be4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8013012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	4413      	add	r3, r2
 8013018:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	689b      	ldr	r3, [r3, #8]
 801301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013020:	429a      	cmp	r2, r3
 8013022:	d304      	bcc.n	801302e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013032:	605a      	str	r2, [r3, #4]

	return xCount;
 8013034:	687b      	ldr	r3, [r7, #4]
}
 8013036:	4618      	mov	r0, r3
 8013038:	3728      	adds	r7, #40	; 0x28
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b08a      	sub	sp, #40	; 0x28
 8013042:	af00      	add	r7, sp, #0
 8013044:	60f8      	str	r0, [r7, #12]
 8013046:	60b9      	str	r1, [r7, #8]
 8013048:	607a      	str	r2, [r7, #4]
 801304a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	4293      	cmp	r3, r2
 8013052:	bf28      	it	cs
 8013054:	4613      	movcs	r3, r2
 8013056:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d064      	beq.n	8013128 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	689a      	ldr	r2, [r3, #8]
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	1ad3      	subs	r3, r2, r3
 801306c:	6a3a      	ldr	r2, [r7, #32]
 801306e:	4293      	cmp	r3, r2
 8013070:	bf28      	it	cs
 8013072:	4613      	movcs	r3, r2
 8013074:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8013076:	69fa      	ldr	r2, [r7, #28]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	429a      	cmp	r2, r3
 801307c:	d90a      	bls.n	8013094 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	61bb      	str	r3, [r7, #24]
}
 8013090:	bf00      	nop
 8013092:	e7fe      	b.n	8013092 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8013094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	441a      	add	r2, r3
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	689b      	ldr	r3, [r3, #8]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d90a      	bls.n	80130b8 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80130a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	617b      	str	r3, [r7, #20]
}
 80130b4:	bf00      	nop
 80130b6:	e7fe      	b.n	80130b6 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	699a      	ldr	r2, [r3, #24]
 80130bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130be:	4413      	add	r3, r2
 80130c0:	69fa      	ldr	r2, [r7, #28]
 80130c2:	4619      	mov	r1, r3
 80130c4:	68b8      	ldr	r0, [r7, #8]
 80130c6:	f002 fd8d 	bl	8015be4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80130ca:	6a3a      	ldr	r2, [r7, #32]
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d919      	bls.n	8013106 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80130d2:	6a3a      	ldr	r2, [r7, #32]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d90a      	bls.n	80130f0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80130da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130de:	f383 8811 	msr	BASEPRI, r3
 80130e2:	f3bf 8f6f 	isb	sy
 80130e6:	f3bf 8f4f 	dsb	sy
 80130ea:	613b      	str	r3, [r7, #16]
}
 80130ec:	bf00      	nop
 80130ee:	e7fe      	b.n	80130ee <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80130f0:	68ba      	ldr	r2, [r7, #8]
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	18d0      	adds	r0, r2, r3
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	6999      	ldr	r1, [r3, #24]
 80130fa:	6a3a      	ldr	r2, [r7, #32]
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	461a      	mov	r2, r3
 8013102:	f002 fd6f 	bl	8015be4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8013106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013108:	6a3b      	ldr	r3, [r7, #32]
 801310a:	4413      	add	r3, r2
 801310c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013114:	429a      	cmp	r2, r3
 8013116:	d304      	bcc.n	8013122 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801311e:	1ad3      	subs	r3, r2, r3
 8013120:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013126:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8013128:	6a3b      	ldr	r3, [r7, #32]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3728      	adds	r7, #40	; 0x28
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8013132:	b480      	push	{r7}
 8013134:	b085      	sub	sp, #20
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	689a      	ldr	r2, [r3, #8]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	4413      	add	r3, r2
 8013144:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	68fa      	ldr	r2, [r7, #12]
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	429a      	cmp	r2, r3
 8013158:	d304      	bcc.n	8013164 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	689b      	ldr	r3, [r3, #8]
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	1ad3      	subs	r3, r2, r3
 8013162:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8013164:	68fb      	ldr	r3, [r7, #12]
}
 8013166:	4618      	mov	r0, r3
 8013168:	3714      	adds	r7, #20
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr

08013172 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b086      	sub	sp, #24
 8013176:	af00      	add	r7, sp, #0
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	60b9      	str	r1, [r7, #8]
 801317c:	607a      	str	r2, [r7, #4]
 801317e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8013180:	2355      	movs	r3, #85	; 0x55
 8013182:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	6979      	ldr	r1, [r7, #20]
 8013188:	68b8      	ldr	r0, [r7, #8]
 801318a:	f002 fd39 	bl	8015c00 <memset>
 801318e:	4602      	mov	r2, r0
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	4293      	cmp	r3, r2
 8013194:	d00a      	beq.n	80131ac <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	f383 8811 	msr	BASEPRI, r3
 801319e:	f3bf 8f6f 	isb	sy
 80131a2:	f3bf 8f4f 	dsb	sy
 80131a6:	613b      	str	r3, [r7, #16]
}
 80131a8:	bf00      	nop
 80131aa:	e7fe      	b.n	80131aa <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80131ac:	2224      	movs	r2, #36	; 0x24
 80131ae:	2100      	movs	r1, #0
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f002 fd25 	bl	8015c00 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	68ba      	ldr	r2, [r7, #8]
 80131ba:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	683a      	ldr	r2, [r7, #0]
 80131c6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80131ce:	771a      	strb	r2, [r3, #28]
}
 80131d0:	bf00      	nop
 80131d2:	3718      	adds	r7, #24
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b08e      	sub	sp, #56	; 0x38
 80131dc:	af04      	add	r7, sp, #16
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
 80131e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80131e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d10a      	bne.n	8013202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	623b      	str	r3, [r7, #32]
}
 80131fe:	bf00      	nop
 8013200:	e7fe      	b.n	8013200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013204:	2b00      	cmp	r3, #0
 8013206:	d10a      	bne.n	801321e <xTaskCreateStatic+0x46>
	__asm volatile
 8013208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320c:	f383 8811 	msr	BASEPRI, r3
 8013210:	f3bf 8f6f 	isb	sy
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	61fb      	str	r3, [r7, #28]
}
 801321a:	bf00      	nop
 801321c:	e7fe      	b.n	801321c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801321e:	23c0      	movs	r3, #192	; 0xc0
 8013220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	2bc0      	cmp	r3, #192	; 0xc0
 8013226:	d00a      	beq.n	801323e <xTaskCreateStatic+0x66>
	__asm volatile
 8013228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322c:	f383 8811 	msr	BASEPRI, r3
 8013230:	f3bf 8f6f 	isb	sy
 8013234:	f3bf 8f4f 	dsb	sy
 8013238:	61bb      	str	r3, [r7, #24]
}
 801323a:	bf00      	nop
 801323c:	e7fe      	b.n	801323c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801323e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013242:	2b00      	cmp	r3, #0
 8013244:	d01e      	beq.n	8013284 <xTaskCreateStatic+0xac>
 8013246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013248:	2b00      	cmp	r3, #0
 801324a:	d01b      	beq.n	8013284 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013254:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013258:	2202      	movs	r2, #2
 801325a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801325e:	2300      	movs	r3, #0
 8013260:	9303      	str	r3, [sp, #12]
 8013262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013264:	9302      	str	r3, [sp, #8]
 8013266:	f107 0314 	add.w	r3, r7, #20
 801326a:	9301      	str	r3, [sp, #4]
 801326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	68b9      	ldr	r1, [r7, #8]
 8013276:	68f8      	ldr	r0, [r7, #12]
 8013278:	f000 f850 	bl	801331c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801327c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801327e:	f000 f8f7 	bl	8013470 <prvAddNewTaskToReadyList>
 8013282:	e001      	b.n	8013288 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013284:	2300      	movs	r3, #0
 8013286:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013288:	697b      	ldr	r3, [r7, #20]
	}
 801328a:	4618      	mov	r0, r3
 801328c:	3728      	adds	r7, #40	; 0x28
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013292:	b580      	push	{r7, lr}
 8013294:	b08c      	sub	sp, #48	; 0x30
 8013296:	af04      	add	r7, sp, #16
 8013298:	60f8      	str	r0, [r7, #12]
 801329a:	60b9      	str	r1, [r7, #8]
 801329c:	603b      	str	r3, [r7, #0]
 801329e:	4613      	mov	r3, r2
 80132a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80132a2:	88fb      	ldrh	r3, [r7, #6]
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	4618      	mov	r0, r3
 80132a8:	f001 ff06 	bl	80150b8 <pvPortMalloc>
 80132ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00e      	beq.n	80132d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80132b4:	20c0      	movs	r0, #192	; 0xc0
 80132b6:	f001 feff 	bl	80150b8 <pvPortMalloc>
 80132ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d003      	beq.n	80132ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80132c2:	69fb      	ldr	r3, [r7, #28]
 80132c4:	697a      	ldr	r2, [r7, #20]
 80132c6:	631a      	str	r2, [r3, #48]	; 0x30
 80132c8:	e005      	b.n	80132d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80132ca:	6978      	ldr	r0, [r7, #20]
 80132cc:	f001 ffc4 	bl	8015258 <vPortFree>
 80132d0:	e001      	b.n	80132d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80132d2:	2300      	movs	r3, #0
 80132d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80132d6:	69fb      	ldr	r3, [r7, #28]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d017      	beq.n	801330c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	2200      	movs	r2, #0
 80132e0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80132e4:	88fa      	ldrh	r2, [r7, #6]
 80132e6:	2300      	movs	r3, #0
 80132e8:	9303      	str	r3, [sp, #12]
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	9302      	str	r3, [sp, #8]
 80132ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f4:	9300      	str	r3, [sp, #0]
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	68b9      	ldr	r1, [r7, #8]
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	f000 f80e 	bl	801331c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013300:	69f8      	ldr	r0, [r7, #28]
 8013302:	f000 f8b5 	bl	8013470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013306:	2301      	movs	r3, #1
 8013308:	61bb      	str	r3, [r7, #24]
 801330a:	e002      	b.n	8013312 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801330c:	f04f 33ff 	mov.w	r3, #4294967295
 8013310:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013312:	69bb      	ldr	r3, [r7, #24]
	}
 8013314:	4618      	mov	r0, r3
 8013316:	3720      	adds	r7, #32
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b088      	sub	sp, #32
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
 8013328:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801332c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	461a      	mov	r2, r3
 8013334:	21a5      	movs	r1, #165	; 0xa5
 8013336:	f002 fc63 	bl	8015c00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013344:	3b01      	subs	r3, #1
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	4413      	add	r3, r2
 801334a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	f023 0307 	bic.w	r3, r3, #7
 8013352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	f003 0307 	and.w	r3, r3, #7
 801335a:	2b00      	cmp	r3, #0
 801335c:	d00a      	beq.n	8013374 <prvInitialiseNewTask+0x58>
	__asm volatile
 801335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013362:	f383 8811 	msr	BASEPRI, r3
 8013366:	f3bf 8f6f 	isb	sy
 801336a:	f3bf 8f4f 	dsb	sy
 801336e:	617b      	str	r3, [r7, #20]
}
 8013370:	bf00      	nop
 8013372:	e7fe      	b.n	8013372 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d01f      	beq.n	80133ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801337a:	2300      	movs	r3, #0
 801337c:	61fb      	str	r3, [r7, #28]
 801337e:	e012      	b.n	80133a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013380:	68ba      	ldr	r2, [r7, #8]
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	4413      	add	r3, r2
 8013386:	7819      	ldrb	r1, [r3, #0]
 8013388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	4413      	add	r3, r2
 801338e:	3334      	adds	r3, #52	; 0x34
 8013390:	460a      	mov	r2, r1
 8013392:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013394:	68ba      	ldr	r2, [r7, #8]
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	4413      	add	r3, r2
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d006      	beq.n	80133ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	3301      	adds	r3, #1
 80133a4:	61fb      	str	r3, [r7, #28]
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	2b0f      	cmp	r3, #15
 80133aa:	d9e9      	bls.n	8013380 <prvInitialiseNewTask+0x64>
 80133ac:	e000      	b.n	80133b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80133ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80133b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b2:	2200      	movs	r2, #0
 80133b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80133b8:	e003      	b.n	80133c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80133ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133bc:	2200      	movs	r2, #0
 80133be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80133c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c4:	2b37      	cmp	r3, #55	; 0x37
 80133c6:	d901      	bls.n	80133cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80133c8:	2337      	movs	r3, #55	; 0x37
 80133ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80133cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80133d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80133d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133da:	2200      	movs	r2, #0
 80133dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80133de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e0:	3304      	adds	r3, #4
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7fe f9de 	bl	80117a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80133e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ea:	3318      	adds	r3, #24
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fe f9d9 	bl	80117a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80133f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80133fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013400:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013406:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340a:	2200      	movs	r2, #0
 801340c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013410:	2200      	movs	r2, #0
 8013412:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013418:	2200      	movs	r2, #0
 801341a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013420:	3358      	adds	r3, #88	; 0x58
 8013422:	2260      	movs	r2, #96	; 0x60
 8013424:	2100      	movs	r1, #0
 8013426:	4618      	mov	r0, r3
 8013428:	f002 fbea 	bl	8015c00 <memset>
 801342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801342e:	4a0d      	ldr	r2, [pc, #52]	; (8013464 <prvInitialiseNewTask+0x148>)
 8013430:	65da      	str	r2, [r3, #92]	; 0x5c
 8013432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013434:	4a0c      	ldr	r2, [pc, #48]	; (8013468 <prvInitialiseNewTask+0x14c>)
 8013436:	661a      	str	r2, [r3, #96]	; 0x60
 8013438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801343a:	4a0c      	ldr	r2, [pc, #48]	; (801346c <prvInitialiseNewTask+0x150>)
 801343c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801343e:	683a      	ldr	r2, [r7, #0]
 8013440:	68f9      	ldr	r1, [r7, #12]
 8013442:	69b8      	ldr	r0, [r7, #24]
 8013444:	f001 fbe8 	bl	8014c18 <pxPortInitialiseStack>
 8013448:	4602      	mov	r2, r0
 801344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801345a:	bf00      	nop
 801345c:	3720      	adds	r7, #32
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	08018a48 	.word	0x08018a48
 8013468:	08018a68 	.word	0x08018a68
 801346c:	08018a28 	.word	0x08018a28

08013470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013478:	f001 fcfc 	bl	8014e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801347c:	4b2d      	ldr	r3, [pc, #180]	; (8013534 <prvAddNewTaskToReadyList+0xc4>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	3301      	adds	r3, #1
 8013482:	4a2c      	ldr	r2, [pc, #176]	; (8013534 <prvAddNewTaskToReadyList+0xc4>)
 8013484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013486:	4b2c      	ldr	r3, [pc, #176]	; (8013538 <prvAddNewTaskToReadyList+0xc8>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d109      	bne.n	80134a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801348e:	4a2a      	ldr	r2, [pc, #168]	; (8013538 <prvAddNewTaskToReadyList+0xc8>)
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013494:	4b27      	ldr	r3, [pc, #156]	; (8013534 <prvAddNewTaskToReadyList+0xc4>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b01      	cmp	r3, #1
 801349a:	d110      	bne.n	80134be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801349c:	f000 fc7a 	bl	8013d94 <prvInitialiseTaskLists>
 80134a0:	e00d      	b.n	80134be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80134a2:	4b26      	ldr	r3, [pc, #152]	; (801353c <prvAddNewTaskToReadyList+0xcc>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d109      	bne.n	80134be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80134aa:	4b23      	ldr	r3, [pc, #140]	; (8013538 <prvAddNewTaskToReadyList+0xc8>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d802      	bhi.n	80134be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80134b8:	4a1f      	ldr	r2, [pc, #124]	; (8013538 <prvAddNewTaskToReadyList+0xc8>)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80134be:	4b20      	ldr	r3, [pc, #128]	; (8013540 <prvAddNewTaskToReadyList+0xd0>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	3301      	adds	r3, #1
 80134c4:	4a1e      	ldr	r2, [pc, #120]	; (8013540 <prvAddNewTaskToReadyList+0xd0>)
 80134c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80134c8:	4b1d      	ldr	r3, [pc, #116]	; (8013540 <prvAddNewTaskToReadyList+0xd0>)
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d4:	4b1b      	ldr	r3, [pc, #108]	; (8013544 <prvAddNewTaskToReadyList+0xd4>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d903      	bls.n	80134e4 <prvAddNewTaskToReadyList+0x74>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e0:	4a18      	ldr	r2, [pc, #96]	; (8013544 <prvAddNewTaskToReadyList+0xd4>)
 80134e2:	6013      	str	r3, [r2, #0]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e8:	4613      	mov	r3, r2
 80134ea:	009b      	lsls	r3, r3, #2
 80134ec:	4413      	add	r3, r2
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4a15      	ldr	r2, [pc, #84]	; (8013548 <prvAddNewTaskToReadyList+0xd8>)
 80134f2:	441a      	add	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	3304      	adds	r3, #4
 80134f8:	4619      	mov	r1, r3
 80134fa:	4610      	mov	r0, r2
 80134fc:	f7fe f95f 	bl	80117be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013500:	f001 fce8 	bl	8014ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013504:	4b0d      	ldr	r3, [pc, #52]	; (801353c <prvAddNewTaskToReadyList+0xcc>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00e      	beq.n	801352a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801350c:	4b0a      	ldr	r3, [pc, #40]	; (8013538 <prvAddNewTaskToReadyList+0xc8>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013516:	429a      	cmp	r2, r3
 8013518:	d207      	bcs.n	801352a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801351a:	4b0c      	ldr	r3, [pc, #48]	; (801354c <prvAddNewTaskToReadyList+0xdc>)
 801351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013520:	601a      	str	r2, [r3, #0]
 8013522:	f3bf 8f4f 	dsb	sy
 8013526:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801352a:	bf00      	nop
 801352c:	3708      	adds	r7, #8
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	2000227c 	.word	0x2000227c
 8013538:	20001da8 	.word	0x20001da8
 801353c:	20002288 	.word	0x20002288
 8013540:	20002298 	.word	0x20002298
 8013544:	20002284 	.word	0x20002284
 8013548:	20001dac 	.word	0x20001dac
 801354c:	e000ed04 	.word	0xe000ed04

08013550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013558:	2300      	movs	r3, #0
 801355a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d017      	beq.n	8013592 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013562:	4b13      	ldr	r3, [pc, #76]	; (80135b0 <vTaskDelay+0x60>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d00a      	beq.n	8013580 <vTaskDelay+0x30>
	__asm volatile
 801356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801356e:	f383 8811 	msr	BASEPRI, r3
 8013572:	f3bf 8f6f 	isb	sy
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	60bb      	str	r3, [r7, #8]
}
 801357c:	bf00      	nop
 801357e:	e7fe      	b.n	801357e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013580:	f000 f88c 	bl	801369c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013584:	2100      	movs	r1, #0
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f000 ffa4 	bl	80144d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801358c:	f000 f894 	bl	80136b8 <xTaskResumeAll>
 8013590:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d107      	bne.n	80135a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013598:	4b06      	ldr	r3, [pc, #24]	; (80135b4 <vTaskDelay+0x64>)
 801359a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801359e:	601a      	str	r2, [r3, #0]
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135a8:	bf00      	nop
 80135aa:	3710      	adds	r7, #16
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	200022a4 	.word	0x200022a4
 80135b4:	e000ed04 	.word	0xe000ed04

080135b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08a      	sub	sp, #40	; 0x28
 80135bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80135be:	2300      	movs	r3, #0
 80135c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80135c2:	2300      	movs	r3, #0
 80135c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80135c6:	463a      	mov	r2, r7
 80135c8:	1d39      	adds	r1, r7, #4
 80135ca:	f107 0308 	add.w	r3, r7, #8
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7fe f894 	bl	80116fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80135d4:	6839      	ldr	r1, [r7, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	9202      	str	r2, [sp, #8]
 80135dc:	9301      	str	r3, [sp, #4]
 80135de:	2300      	movs	r3, #0
 80135e0:	9300      	str	r3, [sp, #0]
 80135e2:	2300      	movs	r3, #0
 80135e4:	460a      	mov	r2, r1
 80135e6:	4925      	ldr	r1, [pc, #148]	; (801367c <vTaskStartScheduler+0xc4>)
 80135e8:	4825      	ldr	r0, [pc, #148]	; (8013680 <vTaskStartScheduler+0xc8>)
 80135ea:	f7ff fdf5 	bl	80131d8 <xTaskCreateStatic>
 80135ee:	4603      	mov	r3, r0
 80135f0:	4a24      	ldr	r2, [pc, #144]	; (8013684 <vTaskStartScheduler+0xcc>)
 80135f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80135f4:	4b23      	ldr	r3, [pc, #140]	; (8013684 <vTaskStartScheduler+0xcc>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d002      	beq.n	8013602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80135fc:	2301      	movs	r3, #1
 80135fe:	617b      	str	r3, [r7, #20]
 8013600:	e001      	b.n	8013606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013602:	2300      	movs	r3, #0
 8013604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	2b01      	cmp	r3, #1
 801360a:	d102      	bne.n	8013612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801360c:	f000 ffb6 	bl	801457c <xTimerCreateTimerTask>
 8013610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2b01      	cmp	r3, #1
 8013616:	d11d      	bne.n	8013654 <vTaskStartScheduler+0x9c>
	__asm volatile
 8013618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361c:	f383 8811 	msr	BASEPRI, r3
 8013620:	f3bf 8f6f 	isb	sy
 8013624:	f3bf 8f4f 	dsb	sy
 8013628:	613b      	str	r3, [r7, #16]
}
 801362a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801362c:	4b16      	ldr	r3, [pc, #88]	; (8013688 <vTaskStartScheduler+0xd0>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	3358      	adds	r3, #88	; 0x58
 8013632:	4a16      	ldr	r2, [pc, #88]	; (801368c <vTaskStartScheduler+0xd4>)
 8013634:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013636:	4b16      	ldr	r3, [pc, #88]	; (8013690 <vTaskStartScheduler+0xd8>)
 8013638:	f04f 32ff 	mov.w	r2, #4294967295
 801363c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801363e:	4b15      	ldr	r3, [pc, #84]	; (8013694 <vTaskStartScheduler+0xdc>)
 8013640:	2201      	movs	r2, #1
 8013642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013644:	4b14      	ldr	r3, [pc, #80]	; (8013698 <vTaskStartScheduler+0xe0>)
 8013646:	2200      	movs	r2, #0
 8013648:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801364a:	f7f5 fd07 	bl	800905c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801364e:	f001 fb6f 	bl	8014d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013652:	e00e      	b.n	8013672 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801365a:	d10a      	bne.n	8013672 <vTaskStartScheduler+0xba>
	__asm volatile
 801365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013660:	f383 8811 	msr	BASEPRI, r3
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	f3bf 8f4f 	dsb	sy
 801366c:	60fb      	str	r3, [r7, #12]
}
 801366e:	bf00      	nop
 8013670:	e7fe      	b.n	8013670 <vTaskStartScheduler+0xb8>
}
 8013672:	bf00      	nop
 8013674:	3718      	adds	r7, #24
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	080187c8 	.word	0x080187c8
 8013680:	08013d65 	.word	0x08013d65
 8013684:	200022a0 	.word	0x200022a0
 8013688:	20001da8 	.word	0x20001da8
 801368c:	20000040 	.word	0x20000040
 8013690:	2000229c 	.word	0x2000229c
 8013694:	20002288 	.word	0x20002288
 8013698:	20002280 	.word	0x20002280

0801369c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801369c:	b480      	push	{r7}
 801369e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80136a0:	4b04      	ldr	r3, [pc, #16]	; (80136b4 <vTaskSuspendAll+0x18>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	3301      	adds	r3, #1
 80136a6:	4a03      	ldr	r2, [pc, #12]	; (80136b4 <vTaskSuspendAll+0x18>)
 80136a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80136aa:	bf00      	nop
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr
 80136b4:	200022a4 	.word	0x200022a4

080136b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80136be:	2300      	movs	r3, #0
 80136c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80136c2:	2300      	movs	r3, #0
 80136c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80136c6:	4b42      	ldr	r3, [pc, #264]	; (80137d0 <xTaskResumeAll+0x118>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d10a      	bne.n	80136e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80136ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	603b      	str	r3, [r7, #0]
}
 80136e0:	bf00      	nop
 80136e2:	e7fe      	b.n	80136e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80136e4:	f001 fbc6 	bl	8014e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80136e8:	4b39      	ldr	r3, [pc, #228]	; (80137d0 <xTaskResumeAll+0x118>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3b01      	subs	r3, #1
 80136ee:	4a38      	ldr	r2, [pc, #224]	; (80137d0 <xTaskResumeAll+0x118>)
 80136f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80136f2:	4b37      	ldr	r3, [pc, #220]	; (80137d0 <xTaskResumeAll+0x118>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d162      	bne.n	80137c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80136fa:	4b36      	ldr	r3, [pc, #216]	; (80137d4 <xTaskResumeAll+0x11c>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d05e      	beq.n	80137c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013702:	e02f      	b.n	8013764 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013704:	4b34      	ldr	r3, [pc, #208]	; (80137d8 <xTaskResumeAll+0x120>)
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	3318      	adds	r3, #24
 8013710:	4618      	mov	r0, r3
 8013712:	f7fe f8b1 	bl	8011878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	3304      	adds	r3, #4
 801371a:	4618      	mov	r0, r3
 801371c:	f7fe f8ac 	bl	8011878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013724:	4b2d      	ldr	r3, [pc, #180]	; (80137dc <xTaskResumeAll+0x124>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	429a      	cmp	r2, r3
 801372a:	d903      	bls.n	8013734 <xTaskResumeAll+0x7c>
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013730:	4a2a      	ldr	r2, [pc, #168]	; (80137dc <xTaskResumeAll+0x124>)
 8013732:	6013      	str	r3, [r2, #0]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013738:	4613      	mov	r3, r2
 801373a:	009b      	lsls	r3, r3, #2
 801373c:	4413      	add	r3, r2
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	4a27      	ldr	r2, [pc, #156]	; (80137e0 <xTaskResumeAll+0x128>)
 8013742:	441a      	add	r2, r3
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	3304      	adds	r3, #4
 8013748:	4619      	mov	r1, r3
 801374a:	4610      	mov	r0, r2
 801374c:	f7fe f837 	bl	80117be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013754:	4b23      	ldr	r3, [pc, #140]	; (80137e4 <xTaskResumeAll+0x12c>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801375a:	429a      	cmp	r2, r3
 801375c:	d302      	bcc.n	8013764 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801375e:	4b22      	ldr	r3, [pc, #136]	; (80137e8 <xTaskResumeAll+0x130>)
 8013760:	2201      	movs	r2, #1
 8013762:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013764:	4b1c      	ldr	r3, [pc, #112]	; (80137d8 <xTaskResumeAll+0x120>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d1cb      	bne.n	8013704 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d001      	beq.n	8013776 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013772:	f000 fbb1 	bl	8013ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013776:	4b1d      	ldr	r3, [pc, #116]	; (80137ec <xTaskResumeAll+0x134>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d010      	beq.n	80137a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013782:	f000 f847 	bl	8013814 <xTaskIncrementTick>
 8013786:	4603      	mov	r3, r0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d002      	beq.n	8013792 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801378c:	4b16      	ldr	r3, [pc, #88]	; (80137e8 <xTaskResumeAll+0x130>)
 801378e:	2201      	movs	r2, #1
 8013790:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	3b01      	subs	r3, #1
 8013796:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1f1      	bne.n	8013782 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801379e:	4b13      	ldr	r3, [pc, #76]	; (80137ec <xTaskResumeAll+0x134>)
 80137a0:	2200      	movs	r2, #0
 80137a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80137a4:	4b10      	ldr	r3, [pc, #64]	; (80137e8 <xTaskResumeAll+0x130>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d009      	beq.n	80137c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80137ac:	2301      	movs	r3, #1
 80137ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80137b0:	4b0f      	ldr	r3, [pc, #60]	; (80137f0 <xTaskResumeAll+0x138>)
 80137b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137b6:	601a      	str	r2, [r3, #0]
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137c0:	f001 fb88 	bl	8014ed4 <vPortExitCritical>

	return xAlreadyYielded;
 80137c4:	68bb      	ldr	r3, [r7, #8]
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3710      	adds	r7, #16
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	200022a4 	.word	0x200022a4
 80137d4:	2000227c 	.word	0x2000227c
 80137d8:	2000223c 	.word	0x2000223c
 80137dc:	20002284 	.word	0x20002284
 80137e0:	20001dac 	.word	0x20001dac
 80137e4:	20001da8 	.word	0x20001da8
 80137e8:	20002290 	.word	0x20002290
 80137ec:	2000228c 	.word	0x2000228c
 80137f0:	e000ed04 	.word	0xe000ed04

080137f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80137fa:	4b05      	ldr	r3, [pc, #20]	; (8013810 <xTaskGetTickCount+0x1c>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013800:	687b      	ldr	r3, [r7, #4]
}
 8013802:	4618      	mov	r0, r3
 8013804:	370c      	adds	r7, #12
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	20002280 	.word	0x20002280

08013814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b086      	sub	sp, #24
 8013818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801381a:	2300      	movs	r3, #0
 801381c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801381e:	4b4f      	ldr	r3, [pc, #316]	; (801395c <xTaskIncrementTick+0x148>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	f040 808f 	bne.w	8013946 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013828:	4b4d      	ldr	r3, [pc, #308]	; (8013960 <xTaskIncrementTick+0x14c>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	3301      	adds	r3, #1
 801382e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013830:	4a4b      	ldr	r2, [pc, #300]	; (8013960 <xTaskIncrementTick+0x14c>)
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d120      	bne.n	801387e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801383c:	4b49      	ldr	r3, [pc, #292]	; (8013964 <xTaskIncrementTick+0x150>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d00a      	beq.n	801385c <xTaskIncrementTick+0x48>
	__asm volatile
 8013846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384a:	f383 8811 	msr	BASEPRI, r3
 801384e:	f3bf 8f6f 	isb	sy
 8013852:	f3bf 8f4f 	dsb	sy
 8013856:	603b      	str	r3, [r7, #0]
}
 8013858:	bf00      	nop
 801385a:	e7fe      	b.n	801385a <xTaskIncrementTick+0x46>
 801385c:	4b41      	ldr	r3, [pc, #260]	; (8013964 <xTaskIncrementTick+0x150>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	60fb      	str	r3, [r7, #12]
 8013862:	4b41      	ldr	r3, [pc, #260]	; (8013968 <xTaskIncrementTick+0x154>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	4a3f      	ldr	r2, [pc, #252]	; (8013964 <xTaskIncrementTick+0x150>)
 8013868:	6013      	str	r3, [r2, #0]
 801386a:	4a3f      	ldr	r2, [pc, #252]	; (8013968 <xTaskIncrementTick+0x154>)
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	6013      	str	r3, [r2, #0]
 8013870:	4b3e      	ldr	r3, [pc, #248]	; (801396c <xTaskIncrementTick+0x158>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	3301      	adds	r3, #1
 8013876:	4a3d      	ldr	r2, [pc, #244]	; (801396c <xTaskIncrementTick+0x158>)
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	f000 fb2d 	bl	8013ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801387e:	4b3c      	ldr	r3, [pc, #240]	; (8013970 <xTaskIncrementTick+0x15c>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	693a      	ldr	r2, [r7, #16]
 8013884:	429a      	cmp	r2, r3
 8013886:	d349      	bcc.n	801391c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013888:	4b36      	ldr	r3, [pc, #216]	; (8013964 <xTaskIncrementTick+0x150>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d104      	bne.n	801389c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013892:	4b37      	ldr	r3, [pc, #220]	; (8013970 <xTaskIncrementTick+0x15c>)
 8013894:	f04f 32ff 	mov.w	r2, #4294967295
 8013898:	601a      	str	r2, [r3, #0]
					break;
 801389a:	e03f      	b.n	801391c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801389c:	4b31      	ldr	r3, [pc, #196]	; (8013964 <xTaskIncrementTick+0x150>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80138ac:	693a      	ldr	r2, [r7, #16]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d203      	bcs.n	80138bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80138b4:	4a2e      	ldr	r2, [pc, #184]	; (8013970 <xTaskIncrementTick+0x15c>)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80138ba:	e02f      	b.n	801391c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	3304      	adds	r3, #4
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fd ffd9 	bl	8011878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d004      	beq.n	80138d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	3318      	adds	r3, #24
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fd ffd0 	bl	8011878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138dc:	4b25      	ldr	r3, [pc, #148]	; (8013974 <xTaskIncrementTick+0x160>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d903      	bls.n	80138ec <xTaskIncrementTick+0xd8>
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e8:	4a22      	ldr	r2, [pc, #136]	; (8013974 <xTaskIncrementTick+0x160>)
 80138ea:	6013      	str	r3, [r2, #0]
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138f0:	4613      	mov	r3, r2
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	4413      	add	r3, r2
 80138f6:	009b      	lsls	r3, r3, #2
 80138f8:	4a1f      	ldr	r2, [pc, #124]	; (8013978 <xTaskIncrementTick+0x164>)
 80138fa:	441a      	add	r2, r3
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	3304      	adds	r3, #4
 8013900:	4619      	mov	r1, r3
 8013902:	4610      	mov	r0, r2
 8013904:	f7fd ff5b 	bl	80117be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801390c:	4b1b      	ldr	r3, [pc, #108]	; (801397c <xTaskIncrementTick+0x168>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013912:	429a      	cmp	r2, r3
 8013914:	d3b8      	bcc.n	8013888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013916:	2301      	movs	r3, #1
 8013918:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801391a:	e7b5      	b.n	8013888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801391c:	4b17      	ldr	r3, [pc, #92]	; (801397c <xTaskIncrementTick+0x168>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013922:	4915      	ldr	r1, [pc, #84]	; (8013978 <xTaskIncrementTick+0x164>)
 8013924:	4613      	mov	r3, r2
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	4413      	add	r3, r2
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	440b      	add	r3, r1
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d901      	bls.n	8013938 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013934:	2301      	movs	r3, #1
 8013936:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013938:	4b11      	ldr	r3, [pc, #68]	; (8013980 <xTaskIncrementTick+0x16c>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d007      	beq.n	8013950 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013940:	2301      	movs	r3, #1
 8013942:	617b      	str	r3, [r7, #20]
 8013944:	e004      	b.n	8013950 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013946:	4b0f      	ldr	r3, [pc, #60]	; (8013984 <xTaskIncrementTick+0x170>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	3301      	adds	r3, #1
 801394c:	4a0d      	ldr	r2, [pc, #52]	; (8013984 <xTaskIncrementTick+0x170>)
 801394e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013950:	697b      	ldr	r3, [r7, #20]
}
 8013952:	4618      	mov	r0, r3
 8013954:	3718      	adds	r7, #24
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	200022a4 	.word	0x200022a4
 8013960:	20002280 	.word	0x20002280
 8013964:	20002234 	.word	0x20002234
 8013968:	20002238 	.word	0x20002238
 801396c:	20002294 	.word	0x20002294
 8013970:	2000229c 	.word	0x2000229c
 8013974:	20002284 	.word	0x20002284
 8013978:	20001dac 	.word	0x20001dac
 801397c:	20001da8 	.word	0x20001da8
 8013980:	20002290 	.word	0x20002290
 8013984:	2000228c 	.word	0x2000228c

08013988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801398e:	4b3e      	ldr	r3, [pc, #248]	; (8013a88 <vTaskSwitchContext+0x100>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d003      	beq.n	801399e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013996:	4b3d      	ldr	r3, [pc, #244]	; (8013a8c <vTaskSwitchContext+0x104>)
 8013998:	2201      	movs	r2, #1
 801399a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801399c:	e070      	b.n	8013a80 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801399e:	4b3b      	ldr	r3, [pc, #236]	; (8013a8c <vTaskSwitchContext+0x104>)
 80139a0:	2200      	movs	r2, #0
 80139a2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80139a4:	f7f5 fb61 	bl	800906a <getRunTimeCounterValue>
 80139a8:	4603      	mov	r3, r0
 80139aa:	4a39      	ldr	r2, [pc, #228]	; (8013a90 <vTaskSwitchContext+0x108>)
 80139ac:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80139ae:	4b38      	ldr	r3, [pc, #224]	; (8013a90 <vTaskSwitchContext+0x108>)
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	4b38      	ldr	r3, [pc, #224]	; (8013a94 <vTaskSwitchContext+0x10c>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d909      	bls.n	80139ce <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80139ba:	4b37      	ldr	r3, [pc, #220]	; (8013a98 <vTaskSwitchContext+0x110>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80139c0:	4a33      	ldr	r2, [pc, #204]	; (8013a90 <vTaskSwitchContext+0x108>)
 80139c2:	6810      	ldr	r0, [r2, #0]
 80139c4:	4a33      	ldr	r2, [pc, #204]	; (8013a94 <vTaskSwitchContext+0x10c>)
 80139c6:	6812      	ldr	r2, [r2, #0]
 80139c8:	1a82      	subs	r2, r0, r2
 80139ca:	440a      	add	r2, r1
 80139cc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80139ce:	4b30      	ldr	r3, [pc, #192]	; (8013a90 <vTaskSwitchContext+0x108>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	4a30      	ldr	r2, [pc, #192]	; (8013a94 <vTaskSwitchContext+0x10c>)
 80139d4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80139d6:	4b30      	ldr	r3, [pc, #192]	; (8013a98 <vTaskSwitchContext+0x110>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	4b2e      	ldr	r3, [pc, #184]	; (8013a98 <vTaskSwitchContext+0x110>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d808      	bhi.n	80139f8 <vTaskSwitchContext+0x70>
 80139e6:	4b2c      	ldr	r3, [pc, #176]	; (8013a98 <vTaskSwitchContext+0x110>)
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	4b2b      	ldr	r3, [pc, #172]	; (8013a98 <vTaskSwitchContext+0x110>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3334      	adds	r3, #52	; 0x34
 80139f0:	4619      	mov	r1, r3
 80139f2:	4610      	mov	r0, r2
 80139f4:	f7f5 fb41 	bl	800907a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139f8:	4b28      	ldr	r3, [pc, #160]	; (8013a9c <vTaskSwitchContext+0x114>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	60fb      	str	r3, [r7, #12]
 80139fe:	e010      	b.n	8013a22 <vTaskSwitchContext+0x9a>
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d10a      	bne.n	8013a1c <vTaskSwitchContext+0x94>
	__asm volatile
 8013a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0a:	f383 8811 	msr	BASEPRI, r3
 8013a0e:	f3bf 8f6f 	isb	sy
 8013a12:	f3bf 8f4f 	dsb	sy
 8013a16:	607b      	str	r3, [r7, #4]
}
 8013a18:	bf00      	nop
 8013a1a:	e7fe      	b.n	8013a1a <vTaskSwitchContext+0x92>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	3b01      	subs	r3, #1
 8013a20:	60fb      	str	r3, [r7, #12]
 8013a22:	491f      	ldr	r1, [pc, #124]	; (8013aa0 <vTaskSwitchContext+0x118>)
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	4613      	mov	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	4413      	add	r3, r2
 8013a2c:	009b      	lsls	r3, r3, #2
 8013a2e:	440b      	add	r3, r1
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d0e4      	beq.n	8013a00 <vTaskSwitchContext+0x78>
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	4613      	mov	r3, r2
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	4413      	add	r3, r2
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	4a17      	ldr	r2, [pc, #92]	; (8013aa0 <vTaskSwitchContext+0x118>)
 8013a42:	4413      	add	r3, r2
 8013a44:	60bb      	str	r3, [r7, #8]
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	685b      	ldr	r3, [r3, #4]
 8013a4a:	685a      	ldr	r2, [r3, #4]
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	605a      	str	r2, [r3, #4]
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	685a      	ldr	r2, [r3, #4]
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	3308      	adds	r3, #8
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d104      	bne.n	8013a66 <vTaskSwitchContext+0xde>
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	685a      	ldr	r2, [r3, #4]
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	605a      	str	r2, [r3, #4]
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	4a0a      	ldr	r2, [pc, #40]	; (8013a98 <vTaskSwitchContext+0x110>)
 8013a6e:	6013      	str	r3, [r2, #0]
 8013a70:	4a0a      	ldr	r2, [pc, #40]	; (8013a9c <vTaskSwitchContext+0x114>)
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013a76:	4b08      	ldr	r3, [pc, #32]	; (8013a98 <vTaskSwitchContext+0x110>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	3358      	adds	r3, #88	; 0x58
 8013a7c:	4a09      	ldr	r2, [pc, #36]	; (8013aa4 <vTaskSwitchContext+0x11c>)
 8013a7e:	6013      	str	r3, [r2, #0]
}
 8013a80:	bf00      	nop
 8013a82:	3710      	adds	r7, #16
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	200022a4 	.word	0x200022a4
 8013a8c:	20002290 	.word	0x20002290
 8013a90:	200022ac 	.word	0x200022ac
 8013a94:	200022a8 	.word	0x200022a8
 8013a98:	20001da8 	.word	0x20001da8
 8013a9c:	20002284 	.word	0x20002284
 8013aa0:	20001dac 	.word	0x20001dac
 8013aa4:	20000040 	.word	0x20000040

08013aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b084      	sub	sp, #16
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
 8013ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d10a      	bne.n	8013ace <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013abc:	f383 8811 	msr	BASEPRI, r3
 8013ac0:	f3bf 8f6f 	isb	sy
 8013ac4:	f3bf 8f4f 	dsb	sy
 8013ac8:	60fb      	str	r3, [r7, #12]
}
 8013aca:	bf00      	nop
 8013acc:	e7fe      	b.n	8013acc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013ace:	4b07      	ldr	r3, [pc, #28]	; (8013aec <vTaskPlaceOnEventList+0x44>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	3318      	adds	r3, #24
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f7fd fe95 	bl	8011806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013adc:	2101      	movs	r1, #1
 8013ade:	6838      	ldr	r0, [r7, #0]
 8013ae0:	f000 fcf8 	bl	80144d4 <prvAddCurrentTaskToDelayedList>
}
 8013ae4:	bf00      	nop
 8013ae6:	3710      	adds	r7, #16
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	20001da8 	.word	0x20001da8

08013af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	60b9      	str	r1, [r7, #8]
 8013afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d10a      	bne.n	8013b18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	617b      	str	r3, [r7, #20]
}
 8013b14:	bf00      	nop
 8013b16:	e7fe      	b.n	8013b16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b18:	4b0a      	ldr	r3, [pc, #40]	; (8013b44 <vTaskPlaceOnEventListRestricted+0x54>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	3318      	adds	r3, #24
 8013b1e:	4619      	mov	r1, r3
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f7fd fe4c 	bl	80117be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013b32:	6879      	ldr	r1, [r7, #4]
 8013b34:	68b8      	ldr	r0, [r7, #8]
 8013b36:	f000 fccd 	bl	80144d4 <prvAddCurrentTaskToDelayedList>
	}
 8013b3a:	bf00      	nop
 8013b3c:	3718      	adds	r7, #24
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	20001da8 	.word	0x20001da8

08013b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b086      	sub	sp, #24
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d10a      	bne.n	8013b74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	60fb      	str	r3, [r7, #12]
}
 8013b70:	bf00      	nop
 8013b72:	e7fe      	b.n	8013b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013b74:	693b      	ldr	r3, [r7, #16]
 8013b76:	3318      	adds	r3, #24
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fd fe7d 	bl	8011878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b7e:	4b1e      	ldr	r3, [pc, #120]	; (8013bf8 <xTaskRemoveFromEventList+0xb0>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d11d      	bne.n	8013bc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	3304      	adds	r3, #4
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fd fe74 	bl	8011878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b94:	4b19      	ldr	r3, [pc, #100]	; (8013bfc <xTaskRemoveFromEventList+0xb4>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d903      	bls.n	8013ba4 <xTaskRemoveFromEventList+0x5c>
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ba0:	4a16      	ldr	r2, [pc, #88]	; (8013bfc <xTaskRemoveFromEventList+0xb4>)
 8013ba2:	6013      	str	r3, [r2, #0]
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba8:	4613      	mov	r3, r2
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	4413      	add	r3, r2
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	4a13      	ldr	r2, [pc, #76]	; (8013c00 <xTaskRemoveFromEventList+0xb8>)
 8013bb2:	441a      	add	r2, r3
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	3304      	adds	r3, #4
 8013bb8:	4619      	mov	r1, r3
 8013bba:	4610      	mov	r0, r2
 8013bbc:	f7fd fdff 	bl	80117be <vListInsertEnd>
 8013bc0:	e005      	b.n	8013bce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	3318      	adds	r3, #24
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	480e      	ldr	r0, [pc, #56]	; (8013c04 <xTaskRemoveFromEventList+0xbc>)
 8013bca:	f7fd fdf8 	bl	80117be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd2:	4b0d      	ldr	r3, [pc, #52]	; (8013c08 <xTaskRemoveFromEventList+0xc0>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d905      	bls.n	8013be8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013be0:	4b0a      	ldr	r3, [pc, #40]	; (8013c0c <xTaskRemoveFromEventList+0xc4>)
 8013be2:	2201      	movs	r2, #1
 8013be4:	601a      	str	r2, [r3, #0]
 8013be6:	e001      	b.n	8013bec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013be8:	2300      	movs	r3, #0
 8013bea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013bec:	697b      	ldr	r3, [r7, #20]
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3718      	adds	r7, #24
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	200022a4 	.word	0x200022a4
 8013bfc:	20002284 	.word	0x20002284
 8013c00:	20001dac 	.word	0x20001dac
 8013c04:	2000223c 	.word	0x2000223c
 8013c08:	20001da8 	.word	0x20001da8
 8013c0c:	20002290 	.word	0x20002290

08013c10 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d10a      	bne.n	8013c34 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8013c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	60fb      	str	r3, [r7, #12]
}
 8013c30:	bf00      	nop
 8013c32:	e7fe      	b.n	8013c32 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8013c34:	f001 f91e 	bl	8014e74 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c38:	4b06      	ldr	r3, [pc, #24]	; (8013c54 <vTaskSetTimeOutState+0x44>)
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8013c40:	4b05      	ldr	r3, [pc, #20]	; (8013c58 <vTaskSetTimeOutState+0x48>)
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8013c48:	f001 f944 	bl	8014ed4 <vPortExitCritical>
}
 8013c4c:	bf00      	nop
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	20002294 	.word	0x20002294
 8013c58:	20002280 	.word	0x20002280

08013c5c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c64:	4b06      	ldr	r3, [pc, #24]	; (8013c80 <vTaskInternalSetTimeOutState+0x24>)
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013c6c:	4b05      	ldr	r3, [pc, #20]	; (8013c84 <vTaskInternalSetTimeOutState+0x28>)
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	605a      	str	r2, [r3, #4]
}
 8013c74:	bf00      	nop
 8013c76:	370c      	adds	r7, #12
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr
 8013c80:	20002294 	.word	0x20002294
 8013c84:	20002280 	.word	0x20002280

08013c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d10a      	bne.n	8013cae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c9c:	f383 8811 	msr	BASEPRI, r3
 8013ca0:	f3bf 8f6f 	isb	sy
 8013ca4:	f3bf 8f4f 	dsb	sy
 8013ca8:	613b      	str	r3, [r7, #16]
}
 8013caa:	bf00      	nop
 8013cac:	e7fe      	b.n	8013cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d10a      	bne.n	8013cca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb8:	f383 8811 	msr	BASEPRI, r3
 8013cbc:	f3bf 8f6f 	isb	sy
 8013cc0:	f3bf 8f4f 	dsb	sy
 8013cc4:	60fb      	str	r3, [r7, #12]
}
 8013cc6:	bf00      	nop
 8013cc8:	e7fe      	b.n	8013cc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013cca:	f001 f8d3 	bl	8014e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013cce:	4b1d      	ldr	r3, [pc, #116]	; (8013d44 <xTaskCheckForTimeOut+0xbc>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	685b      	ldr	r3, [r3, #4]
 8013cd8:	69ba      	ldr	r2, [r7, #24]
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce6:	d102      	bne.n	8013cee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	61fb      	str	r3, [r7, #28]
 8013cec:	e023      	b.n	8013d36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	4b15      	ldr	r3, [pc, #84]	; (8013d48 <xTaskCheckForTimeOut+0xc0>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d007      	beq.n	8013d0a <xTaskCheckForTimeOut+0x82>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	69ba      	ldr	r2, [r7, #24]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d302      	bcc.n	8013d0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d04:	2301      	movs	r3, #1
 8013d06:	61fb      	str	r3, [r7, #28]
 8013d08:	e015      	b.n	8013d36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d20b      	bcs.n	8013d2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	1ad2      	subs	r2, r2, r3
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7ff ff9b 	bl	8013c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d26:	2300      	movs	r3, #0
 8013d28:	61fb      	str	r3, [r7, #28]
 8013d2a:	e004      	b.n	8013d36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d32:	2301      	movs	r3, #1
 8013d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d36:	f001 f8cd 	bl	8014ed4 <vPortExitCritical>

	return xReturn;
 8013d3a:	69fb      	ldr	r3, [r7, #28]
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3720      	adds	r7, #32
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	20002280 	.word	0x20002280
 8013d48:	20002294 	.word	0x20002294

08013d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013d50:	4b03      	ldr	r3, [pc, #12]	; (8013d60 <vTaskMissedYield+0x14>)
 8013d52:	2201      	movs	r2, #1
 8013d54:	601a      	str	r2, [r3, #0]
}
 8013d56:	bf00      	nop
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5e:	4770      	bx	lr
 8013d60:	20002290 	.word	0x20002290

08013d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013d6c:	f000 f852 	bl	8013e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013d70:	4b06      	ldr	r3, [pc, #24]	; (8013d8c <prvIdleTask+0x28>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	d9f9      	bls.n	8013d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013d78:	4b05      	ldr	r3, [pc, #20]	; (8013d90 <prvIdleTask+0x2c>)
 8013d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d7e:	601a      	str	r2, [r3, #0]
 8013d80:	f3bf 8f4f 	dsb	sy
 8013d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013d88:	e7f0      	b.n	8013d6c <prvIdleTask+0x8>
 8013d8a:	bf00      	nop
 8013d8c:	20001dac 	.word	0x20001dac
 8013d90:	e000ed04 	.word	0xe000ed04

08013d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	607b      	str	r3, [r7, #4]
 8013d9e:	e00c      	b.n	8013dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	4613      	mov	r3, r2
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	4413      	add	r3, r2
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	4a12      	ldr	r2, [pc, #72]	; (8013df4 <prvInitialiseTaskLists+0x60>)
 8013dac:	4413      	add	r3, r2
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fd fcd8 	bl	8011764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	3301      	adds	r3, #1
 8013db8:	607b      	str	r3, [r7, #4]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2b37      	cmp	r3, #55	; 0x37
 8013dbe:	d9ef      	bls.n	8013da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013dc0:	480d      	ldr	r0, [pc, #52]	; (8013df8 <prvInitialiseTaskLists+0x64>)
 8013dc2:	f7fd fccf 	bl	8011764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013dc6:	480d      	ldr	r0, [pc, #52]	; (8013dfc <prvInitialiseTaskLists+0x68>)
 8013dc8:	f7fd fccc 	bl	8011764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013dcc:	480c      	ldr	r0, [pc, #48]	; (8013e00 <prvInitialiseTaskLists+0x6c>)
 8013dce:	f7fd fcc9 	bl	8011764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013dd2:	480c      	ldr	r0, [pc, #48]	; (8013e04 <prvInitialiseTaskLists+0x70>)
 8013dd4:	f7fd fcc6 	bl	8011764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013dd8:	480b      	ldr	r0, [pc, #44]	; (8013e08 <prvInitialiseTaskLists+0x74>)
 8013dda:	f7fd fcc3 	bl	8011764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013dde:	4b0b      	ldr	r3, [pc, #44]	; (8013e0c <prvInitialiseTaskLists+0x78>)
 8013de0:	4a05      	ldr	r2, [pc, #20]	; (8013df8 <prvInitialiseTaskLists+0x64>)
 8013de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013de4:	4b0a      	ldr	r3, [pc, #40]	; (8013e10 <prvInitialiseTaskLists+0x7c>)
 8013de6:	4a05      	ldr	r2, [pc, #20]	; (8013dfc <prvInitialiseTaskLists+0x68>)
 8013de8:	601a      	str	r2, [r3, #0]
}
 8013dea:	bf00      	nop
 8013dec:	3708      	adds	r7, #8
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	20001dac 	.word	0x20001dac
 8013df8:	2000220c 	.word	0x2000220c
 8013dfc:	20002220 	.word	0x20002220
 8013e00:	2000223c 	.word	0x2000223c
 8013e04:	20002250 	.word	0x20002250
 8013e08:	20002268 	.word	0x20002268
 8013e0c:	20002234 	.word	0x20002234
 8013e10:	20002238 	.word	0x20002238

08013e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e1a:	e019      	b.n	8013e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e1c:	f001 f82a 	bl	8014e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e20:	4b10      	ldr	r3, [pc, #64]	; (8013e64 <prvCheckTasksWaitingTermination+0x50>)
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	3304      	adds	r3, #4
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fd fd23 	bl	8011878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e32:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <prvCheckTasksWaitingTermination+0x54>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3b01      	subs	r3, #1
 8013e38:	4a0b      	ldr	r2, [pc, #44]	; (8013e68 <prvCheckTasksWaitingTermination+0x54>)
 8013e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e3c:	4b0b      	ldr	r3, [pc, #44]	; (8013e6c <prvCheckTasksWaitingTermination+0x58>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	4a0a      	ldr	r2, [pc, #40]	; (8013e6c <prvCheckTasksWaitingTermination+0x58>)
 8013e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e46:	f001 f845 	bl	8014ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f810 	bl	8013e70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e50:	4b06      	ldr	r3, [pc, #24]	; (8013e6c <prvCheckTasksWaitingTermination+0x58>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1e1      	bne.n	8013e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013e58:	bf00      	nop
 8013e5a:	bf00      	nop
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	20002250 	.word	0x20002250
 8013e68:	2000227c 	.word	0x2000227c
 8013e6c:	20002264 	.word	0x20002264

08013e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	3358      	adds	r3, #88	; 0x58
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f002 fc1f 	bl	80166c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d108      	bne.n	8013e9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e90:	4618      	mov	r0, r3
 8013e92:	f001 f9e1 	bl	8015258 <vPortFree>
				vPortFree( pxTCB );
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f001 f9de 	bl	8015258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013e9c:	e018      	b.n	8013ed0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8013ea4:	2b01      	cmp	r3, #1
 8013ea6:	d103      	bne.n	8013eb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f001 f9d5 	bl	8015258 <vPortFree>
	}
 8013eae:	e00f      	b.n	8013ed0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8013eb6:	2b02      	cmp	r3, #2
 8013eb8:	d00a      	beq.n	8013ed0 <prvDeleteTCB+0x60>
	__asm volatile
 8013eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebe:	f383 8811 	msr	BASEPRI, r3
 8013ec2:	f3bf 8f6f 	isb	sy
 8013ec6:	f3bf 8f4f 	dsb	sy
 8013eca:	60fb      	str	r3, [r7, #12]
}
 8013ecc:	bf00      	nop
 8013ece:	e7fe      	b.n	8013ece <prvDeleteTCB+0x5e>
	}
 8013ed0:	bf00      	nop
 8013ed2:	3710      	adds	r7, #16
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b083      	sub	sp, #12
 8013edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ede:	4b0c      	ldr	r3, [pc, #48]	; (8013f10 <prvResetNextTaskUnblockTime+0x38>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d104      	bne.n	8013ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013ee8:	4b0a      	ldr	r3, [pc, #40]	; (8013f14 <prvResetNextTaskUnblockTime+0x3c>)
 8013eea:	f04f 32ff 	mov.w	r2, #4294967295
 8013eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013ef0:	e008      	b.n	8013f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef2:	4b07      	ldr	r3, [pc, #28]	; (8013f10 <prvResetNextTaskUnblockTime+0x38>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	4a04      	ldr	r2, [pc, #16]	; (8013f14 <prvResetNextTaskUnblockTime+0x3c>)
 8013f02:	6013      	str	r3, [r2, #0]
}
 8013f04:	bf00      	nop
 8013f06:	370c      	adds	r7, #12
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr
 8013f10:	20002234 	.word	0x20002234
 8013f14:	2000229c 	.word	0x2000229c

08013f18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013f1e:	4b05      	ldr	r3, [pc, #20]	; (8013f34 <xTaskGetCurrentTaskHandle+0x1c>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013f24:	687b      	ldr	r3, [r7, #4]
	}
 8013f26:	4618      	mov	r0, r3
 8013f28:	370c      	adds	r7, #12
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	20001da8 	.word	0x20001da8

08013f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f38:	b480      	push	{r7}
 8013f3a:	b083      	sub	sp, #12
 8013f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f3e:	4b0b      	ldr	r3, [pc, #44]	; (8013f6c <xTaskGetSchedulerState+0x34>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d102      	bne.n	8013f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013f46:	2301      	movs	r3, #1
 8013f48:	607b      	str	r3, [r7, #4]
 8013f4a:	e008      	b.n	8013f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f4c:	4b08      	ldr	r3, [pc, #32]	; (8013f70 <xTaskGetSchedulerState+0x38>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d102      	bne.n	8013f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013f54:	2302      	movs	r3, #2
 8013f56:	607b      	str	r3, [r7, #4]
 8013f58:	e001      	b.n	8013f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013f5e:	687b      	ldr	r3, [r7, #4]
	}
 8013f60:	4618      	mov	r0, r3
 8013f62:	370c      	adds	r7, #12
 8013f64:	46bd      	mov	sp, r7
 8013f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6a:	4770      	bx	lr
 8013f6c:	20002288 	.word	0x20002288
 8013f70:	200022a4 	.word	0x200022a4

08013f74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013f80:	2300      	movs	r3, #0
 8013f82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d051      	beq.n	801402e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f8e:	4b2a      	ldr	r3, [pc, #168]	; (8014038 <xTaskPriorityInherit+0xc4>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d241      	bcs.n	801401c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	699b      	ldr	r3, [r3, #24]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	db06      	blt.n	8013fae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fa0:	4b25      	ldr	r3, [pc, #148]	; (8014038 <xTaskPriorityInherit+0xc4>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	6959      	ldr	r1, [r3, #20]
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	4413      	add	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4a1f      	ldr	r2, [pc, #124]	; (801403c <xTaskPriorityInherit+0xc8>)
 8013fc0:	4413      	add	r3, r2
 8013fc2:	4299      	cmp	r1, r3
 8013fc4:	d122      	bne.n	801400c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	3304      	adds	r3, #4
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fd fc54 	bl	8011878 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013fd0:	4b19      	ldr	r3, [pc, #100]	; (8014038 <xTaskPriorityInherit+0xc4>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fde:	4b18      	ldr	r3, [pc, #96]	; (8014040 <xTaskPriorityInherit+0xcc>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d903      	bls.n	8013fee <xTaskPriorityInherit+0x7a>
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fea:	4a15      	ldr	r2, [pc, #84]	; (8014040 <xTaskPriorityInherit+0xcc>)
 8013fec:	6013      	str	r3, [r2, #0]
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff2:	4613      	mov	r3, r2
 8013ff4:	009b      	lsls	r3, r3, #2
 8013ff6:	4413      	add	r3, r2
 8013ff8:	009b      	lsls	r3, r3, #2
 8013ffa:	4a10      	ldr	r2, [pc, #64]	; (801403c <xTaskPriorityInherit+0xc8>)
 8013ffc:	441a      	add	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	3304      	adds	r3, #4
 8014002:	4619      	mov	r1, r3
 8014004:	4610      	mov	r0, r2
 8014006:	f7fd fbda 	bl	80117be <vListInsertEnd>
 801400a:	e004      	b.n	8014016 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801400c:	4b0a      	ldr	r3, [pc, #40]	; (8014038 <xTaskPriorityInherit+0xc4>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014016:	2301      	movs	r3, #1
 8014018:	60fb      	str	r3, [r7, #12]
 801401a:	e008      	b.n	801402e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014020:	4b05      	ldr	r3, [pc, #20]	; (8014038 <xTaskPriorityInherit+0xc4>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014026:	429a      	cmp	r2, r3
 8014028:	d201      	bcs.n	801402e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801402a:	2301      	movs	r3, #1
 801402c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801402e:	68fb      	ldr	r3, [r7, #12]
	}
 8014030:	4618      	mov	r0, r3
 8014032:	3710      	adds	r7, #16
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}
 8014038:	20001da8 	.word	0x20001da8
 801403c:	20001dac 	.word	0x20001dac
 8014040:	20002284 	.word	0x20002284

08014044 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014044:	b580      	push	{r7, lr}
 8014046:	b086      	sub	sp, #24
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014050:	2300      	movs	r3, #0
 8014052:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d056      	beq.n	8014108 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801405a:	4b2e      	ldr	r3, [pc, #184]	; (8014114 <xTaskPriorityDisinherit+0xd0>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	693a      	ldr	r2, [r7, #16]
 8014060:	429a      	cmp	r2, r3
 8014062:	d00a      	beq.n	801407a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014068:	f383 8811 	msr	BASEPRI, r3
 801406c:	f3bf 8f6f 	isb	sy
 8014070:	f3bf 8f4f 	dsb	sy
 8014074:	60fb      	str	r3, [r7, #12]
}
 8014076:	bf00      	nop
 8014078:	e7fe      	b.n	8014078 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10a      	bne.n	8014098 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	60bb      	str	r3, [r7, #8]
}
 8014094:	bf00      	nop
 8014096:	e7fe      	b.n	8014096 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801409c:	1e5a      	subs	r2, r3, #1
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d02c      	beq.n	8014108 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d128      	bne.n	8014108 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	3304      	adds	r3, #4
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fd fbdc 	bl	8011878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d8:	4b0f      	ldr	r3, [pc, #60]	; (8014118 <xTaskPriorityDisinherit+0xd4>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d903      	bls.n	80140e8 <xTaskPriorityDisinherit+0xa4>
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e4:	4a0c      	ldr	r2, [pc, #48]	; (8014118 <xTaskPriorityDisinherit+0xd4>)
 80140e6:	6013      	str	r3, [r2, #0]
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ec:	4613      	mov	r3, r2
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	4413      	add	r3, r2
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	4a09      	ldr	r2, [pc, #36]	; (801411c <xTaskPriorityDisinherit+0xd8>)
 80140f6:	441a      	add	r2, r3
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	3304      	adds	r3, #4
 80140fc:	4619      	mov	r1, r3
 80140fe:	4610      	mov	r0, r2
 8014100:	f7fd fb5d 	bl	80117be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014104:	2301      	movs	r3, #1
 8014106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014108:	697b      	ldr	r3, [r7, #20]
	}
 801410a:	4618      	mov	r0, r3
 801410c:	3718      	adds	r7, #24
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	20001da8 	.word	0x20001da8
 8014118:	20002284 	.word	0x20002284
 801411c:	20001dac 	.word	0x20001dac

08014120 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014120:	b580      	push	{r7, lr}
 8014122:	b088      	sub	sp, #32
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801412e:	2301      	movs	r3, #1
 8014130:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d06a      	beq.n	801420e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801413c:	2b00      	cmp	r3, #0
 801413e:	d10a      	bne.n	8014156 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014144:	f383 8811 	msr	BASEPRI, r3
 8014148:	f3bf 8f6f 	isb	sy
 801414c:	f3bf 8f4f 	dsb	sy
 8014150:	60fb      	str	r3, [r7, #12]
}
 8014152:	bf00      	nop
 8014154:	e7fe      	b.n	8014154 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801415a:	683a      	ldr	r2, [r7, #0]
 801415c:	429a      	cmp	r2, r3
 801415e:	d902      	bls.n	8014166 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	61fb      	str	r3, [r7, #28]
 8014164:	e002      	b.n	801416c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801416a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014170:	69fa      	ldr	r2, [r7, #28]
 8014172:	429a      	cmp	r2, r3
 8014174:	d04b      	beq.n	801420e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014176:	69bb      	ldr	r3, [r7, #24]
 8014178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801417a:	697a      	ldr	r2, [r7, #20]
 801417c:	429a      	cmp	r2, r3
 801417e:	d146      	bne.n	801420e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014180:	4b25      	ldr	r3, [pc, #148]	; (8014218 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	69ba      	ldr	r2, [r7, #24]
 8014186:	429a      	cmp	r2, r3
 8014188:	d10a      	bne.n	80141a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418e:	f383 8811 	msr	BASEPRI, r3
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	f3bf 8f4f 	dsb	sy
 801419a:	60bb      	str	r3, [r7, #8]
}
 801419c:	bf00      	nop
 801419e:	e7fe      	b.n	801419e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	69fa      	ldr	r2, [r7, #28]
 80141aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	db04      	blt.n	80141be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141b4:	69fb      	ldr	r3, [r7, #28]
 80141b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80141ba:	69bb      	ldr	r3, [r7, #24]
 80141bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	6959      	ldr	r1, [r3, #20]
 80141c2:	693a      	ldr	r2, [r7, #16]
 80141c4:	4613      	mov	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	4413      	add	r3, r2
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	4a13      	ldr	r2, [pc, #76]	; (801421c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80141ce:	4413      	add	r3, r2
 80141d0:	4299      	cmp	r1, r3
 80141d2:	d11c      	bne.n	801420e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141d4:	69bb      	ldr	r3, [r7, #24]
 80141d6:	3304      	adds	r3, #4
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fd fb4d 	bl	8011878 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80141de:	69bb      	ldr	r3, [r7, #24]
 80141e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141e2:	4b0f      	ldr	r3, [pc, #60]	; (8014220 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d903      	bls.n	80141f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ee:	4a0c      	ldr	r2, [pc, #48]	; (8014220 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80141f0:	6013      	str	r3, [r2, #0]
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141f6:	4613      	mov	r3, r2
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	4413      	add	r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	4a07      	ldr	r2, [pc, #28]	; (801421c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014200:	441a      	add	r2, r3
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	3304      	adds	r3, #4
 8014206:	4619      	mov	r1, r3
 8014208:	4610      	mov	r0, r2
 801420a:	f7fd fad8 	bl	80117be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801420e:	bf00      	nop
 8014210:	3720      	adds	r7, #32
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
 8014216:	bf00      	nop
 8014218:	20001da8 	.word	0x20001da8
 801421c:	20001dac 	.word	0x20001dac
 8014220:	20002284 	.word	0x20002284

08014224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014224:	b480      	push	{r7}
 8014226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014228:	4b07      	ldr	r3, [pc, #28]	; (8014248 <pvTaskIncrementMutexHeldCount+0x24>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d004      	beq.n	801423a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014230:	4b05      	ldr	r3, [pc, #20]	; (8014248 <pvTaskIncrementMutexHeldCount+0x24>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014236:	3201      	adds	r2, #1
 8014238:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801423a:	4b03      	ldr	r3, [pc, #12]	; (8014248 <pvTaskIncrementMutexHeldCount+0x24>)
 801423c:	681b      	ldr	r3, [r3, #0]
	}
 801423e:	4618      	mov	r0, r3
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	20001da8 	.word	0x20001da8

0801424c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801424c:	b580      	push	{r7, lr}
 801424e:	b086      	sub	sp, #24
 8014250:	af00      	add	r7, sp, #0
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
 8014258:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801425a:	f000 fe0b 	bl	8014e74 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801425e:	4b29      	ldr	r3, [pc, #164]	; (8014304 <xTaskNotifyWait+0xb8>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8014266:	b2db      	uxtb	r3, r3
 8014268:	2b02      	cmp	r3, #2
 801426a:	d01c      	beq.n	80142a6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801426c:	4b25      	ldr	r3, [pc, #148]	; (8014304 <xTaskNotifyWait+0xb8>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8014274:	68fa      	ldr	r2, [r7, #12]
 8014276:	43d2      	mvns	r2, r2
 8014278:	400a      	ands	r2, r1
 801427a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801427e:	4b21      	ldr	r3, [pc, #132]	; (8014304 <xTaskNotifyWait+0xb8>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	2201      	movs	r2, #1
 8014284:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d00b      	beq.n	80142a6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801428e:	2101      	movs	r1, #1
 8014290:	6838      	ldr	r0, [r7, #0]
 8014292:	f000 f91f 	bl	80144d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014296:	4b1c      	ldr	r3, [pc, #112]	; (8014308 <xTaskNotifyWait+0xbc>)
 8014298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801429c:	601a      	str	r2, [r3, #0]
 801429e:	f3bf 8f4f 	dsb	sy
 80142a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80142a6:	f000 fe15 	bl	8014ed4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80142aa:	f000 fde3 	bl	8014e74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d005      	beq.n	80142c0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80142b4:	4b13      	ldr	r3, [pc, #76]	; (8014304 <xTaskNotifyWait+0xb8>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80142c0:	4b10      	ldr	r3, [pc, #64]	; (8014304 <xTaskNotifyWait+0xb8>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	2b02      	cmp	r3, #2
 80142cc:	d002      	beq.n	80142d4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80142ce:	2300      	movs	r3, #0
 80142d0:	617b      	str	r3, [r7, #20]
 80142d2:	e00a      	b.n	80142ea <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80142d4:	4b0b      	ldr	r3, [pc, #44]	; (8014304 <xTaskNotifyWait+0xb8>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80142dc:	68ba      	ldr	r2, [r7, #8]
 80142de:	43d2      	mvns	r2, r2
 80142e0:	400a      	ands	r2, r1
 80142e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 80142e6:	2301      	movs	r3, #1
 80142e8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80142ea:	4b06      	ldr	r3, [pc, #24]	; (8014304 <xTaskNotifyWait+0xb8>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	2200      	movs	r2, #0
 80142f0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 80142f4:	f000 fdee 	bl	8014ed4 <vPortExitCritical>

		return xReturn;
 80142f8:	697b      	ldr	r3, [r7, #20]
	}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3718      	adds	r7, #24
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}
 8014302:	bf00      	nop
 8014304:	20001da8 	.word	0x20001da8
 8014308:	e000ed04 	.word	0xe000ed04

0801430c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801430c:	b580      	push	{r7, lr}
 801430e:	b08a      	sub	sp, #40	; 0x28
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	603b      	str	r3, [r7, #0]
 8014318:	4613      	mov	r3, r2
 801431a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801431c:	2301      	movs	r3, #1
 801431e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d10a      	bne.n	801433c <xTaskGenericNotify+0x30>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	61bb      	str	r3, [r7, #24]
}
 8014338:	bf00      	nop
 801433a:	e7fe      	b.n	801433a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014340:	f000 fd98 	bl	8014e74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d004      	beq.n	8014354 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801434a:	6a3b      	ldr	r3, [r7, #32]
 801434c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014354:	6a3b      	ldr	r3, [r7, #32]
 8014356:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801435a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801435c:	6a3b      	ldr	r3, [r7, #32]
 801435e:	2202      	movs	r2, #2
 8014360:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8014364:	79fb      	ldrb	r3, [r7, #7]
 8014366:	2b04      	cmp	r3, #4
 8014368:	d82d      	bhi.n	80143c6 <xTaskGenericNotify+0xba>
 801436a:	a201      	add	r2, pc, #4	; (adr r2, 8014370 <xTaskGenericNotify+0x64>)
 801436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014370:	080143e9 	.word	0x080143e9
 8014374:	08014385 	.word	0x08014385
 8014378:	08014397 	.word	0x08014397
 801437c:	080143a7 	.word	0x080143a7
 8014380:	080143b1 	.word	0x080143b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014384:	6a3b      	ldr	r3, [r7, #32]
 8014386:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	431a      	orrs	r2, r3
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8014394:	e02b      	b.n	80143ee <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014396:	6a3b      	ldr	r3, [r7, #32]
 8014398:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801439c:	1c5a      	adds	r2, r3, #1
 801439e:	6a3b      	ldr	r3, [r7, #32]
 80143a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80143a4:	e023      	b.n	80143ee <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80143a6:	6a3b      	ldr	r3, [r7, #32]
 80143a8:	68ba      	ldr	r2, [r7, #8]
 80143aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80143ae:	e01e      	b.n	80143ee <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80143b0:	7ffb      	ldrb	r3, [r7, #31]
 80143b2:	2b02      	cmp	r3, #2
 80143b4:	d004      	beq.n	80143c0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80143b6:	6a3b      	ldr	r3, [r7, #32]
 80143b8:	68ba      	ldr	r2, [r7, #8]
 80143ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80143be:	e016      	b.n	80143ee <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80143c0:	2300      	movs	r3, #0
 80143c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80143c4:	e013      	b.n	80143ee <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80143c6:	6a3b      	ldr	r3, [r7, #32]
 80143c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80143cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d0:	d00c      	beq.n	80143ec <xTaskGenericNotify+0xe0>
	__asm volatile
 80143d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d6:	f383 8811 	msr	BASEPRI, r3
 80143da:	f3bf 8f6f 	isb	sy
 80143de:	f3bf 8f4f 	dsb	sy
 80143e2:	617b      	str	r3, [r7, #20]
}
 80143e4:	bf00      	nop
 80143e6:	e7fe      	b.n	80143e6 <xTaskGenericNotify+0xda>
					break;
 80143e8:	bf00      	nop
 80143ea:	e000      	b.n	80143ee <xTaskGenericNotify+0xe2>

					break;
 80143ec:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80143ee:	7ffb      	ldrb	r3, [r7, #31]
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d13a      	bne.n	801446a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143f4:	6a3b      	ldr	r3, [r7, #32]
 80143f6:	3304      	adds	r3, #4
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7fd fa3d 	bl	8011878 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80143fe:	6a3b      	ldr	r3, [r7, #32]
 8014400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014402:	4b1d      	ldr	r3, [pc, #116]	; (8014478 <xTaskGenericNotify+0x16c>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	429a      	cmp	r2, r3
 8014408:	d903      	bls.n	8014412 <xTaskGenericNotify+0x106>
 801440a:	6a3b      	ldr	r3, [r7, #32]
 801440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801440e:	4a1a      	ldr	r2, [pc, #104]	; (8014478 <xTaskGenericNotify+0x16c>)
 8014410:	6013      	str	r3, [r2, #0]
 8014412:	6a3b      	ldr	r3, [r7, #32]
 8014414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014416:	4613      	mov	r3, r2
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	4413      	add	r3, r2
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	4a17      	ldr	r2, [pc, #92]	; (801447c <xTaskGenericNotify+0x170>)
 8014420:	441a      	add	r2, r3
 8014422:	6a3b      	ldr	r3, [r7, #32]
 8014424:	3304      	adds	r3, #4
 8014426:	4619      	mov	r1, r3
 8014428:	4610      	mov	r0, r2
 801442a:	f7fd f9c8 	bl	80117be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801442e:	6a3b      	ldr	r3, [r7, #32]
 8014430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014432:	2b00      	cmp	r3, #0
 8014434:	d00a      	beq.n	801444c <xTaskGenericNotify+0x140>
	__asm volatile
 8014436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443a:	f383 8811 	msr	BASEPRI, r3
 801443e:	f3bf 8f6f 	isb	sy
 8014442:	f3bf 8f4f 	dsb	sy
 8014446:	613b      	str	r3, [r7, #16]
}
 8014448:	bf00      	nop
 801444a:	e7fe      	b.n	801444a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801444c:	6a3b      	ldr	r3, [r7, #32]
 801444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014450:	4b0b      	ldr	r3, [pc, #44]	; (8014480 <xTaskGenericNotify+0x174>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014456:	429a      	cmp	r2, r3
 8014458:	d907      	bls.n	801446a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801445a:	4b0a      	ldr	r3, [pc, #40]	; (8014484 <xTaskGenericNotify+0x178>)
 801445c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014460:	601a      	str	r2, [r3, #0]
 8014462:	f3bf 8f4f 	dsb	sy
 8014466:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801446a:	f000 fd33 	bl	8014ed4 <vPortExitCritical>

		return xReturn;
 801446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014470:	4618      	mov	r0, r3
 8014472:	3728      	adds	r7, #40	; 0x28
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	20002284 	.word	0x20002284
 801447c:	20001dac 	.word	0x20001dac
 8014480:	20001da8 	.word	0x20001da8
 8014484:	e000ed04 	.word	0xe000ed04

08014488 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d102      	bne.n	801449c <xTaskNotifyStateClear+0x14>
 8014496:	4b0e      	ldr	r3, [pc, #56]	; (80144d0 <xTaskNotifyStateClear+0x48>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	e000      	b.n	801449e <xTaskNotifyStateClear+0x16>
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80144a0:	f000 fce8 	bl	8014e74 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	2b02      	cmp	r3, #2
 80144ae:	d106      	bne.n	80144be <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2200      	movs	r2, #0
 80144b4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 80144b8:	2301      	movs	r3, #1
 80144ba:	60fb      	str	r3, [r7, #12]
 80144bc:	e001      	b.n	80144c2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80144be:	2300      	movs	r3, #0
 80144c0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80144c2:	f000 fd07 	bl	8014ed4 <vPortExitCritical>

		return xReturn;
 80144c6:	68fb      	ldr	r3, [r7, #12]
	}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	20001da8 	.word	0x20001da8

080144d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80144de:	4b21      	ldr	r3, [pc, #132]	; (8014564 <prvAddCurrentTaskToDelayedList+0x90>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144e4:	4b20      	ldr	r3, [pc, #128]	; (8014568 <prvAddCurrentTaskToDelayedList+0x94>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	3304      	adds	r3, #4
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fd f9c4 	bl	8011878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144f6:	d10a      	bne.n	801450e <prvAddCurrentTaskToDelayedList+0x3a>
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d007      	beq.n	801450e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80144fe:	4b1a      	ldr	r3, [pc, #104]	; (8014568 <prvAddCurrentTaskToDelayedList+0x94>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	3304      	adds	r3, #4
 8014504:	4619      	mov	r1, r3
 8014506:	4819      	ldr	r0, [pc, #100]	; (801456c <prvAddCurrentTaskToDelayedList+0x98>)
 8014508:	f7fd f959 	bl	80117be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801450c:	e026      	b.n	801455c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801450e:	68fa      	ldr	r2, [r7, #12]
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	4413      	add	r3, r2
 8014514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014516:	4b14      	ldr	r3, [pc, #80]	; (8014568 <prvAddCurrentTaskToDelayedList+0x94>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	68ba      	ldr	r2, [r7, #8]
 801451c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801451e:	68ba      	ldr	r2, [r7, #8]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	429a      	cmp	r2, r3
 8014524:	d209      	bcs.n	801453a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014526:	4b12      	ldr	r3, [pc, #72]	; (8014570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	4b0f      	ldr	r3, [pc, #60]	; (8014568 <prvAddCurrentTaskToDelayedList+0x94>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	3304      	adds	r3, #4
 8014530:	4619      	mov	r1, r3
 8014532:	4610      	mov	r0, r2
 8014534:	f7fd f967 	bl	8011806 <vListInsert>
}
 8014538:	e010      	b.n	801455c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801453a:	4b0e      	ldr	r3, [pc, #56]	; (8014574 <prvAddCurrentTaskToDelayedList+0xa0>)
 801453c:	681a      	ldr	r2, [r3, #0]
 801453e:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <prvAddCurrentTaskToDelayedList+0x94>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	3304      	adds	r3, #4
 8014544:	4619      	mov	r1, r3
 8014546:	4610      	mov	r0, r2
 8014548:	f7fd f95d 	bl	8011806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801454c:	4b0a      	ldr	r3, [pc, #40]	; (8014578 <prvAddCurrentTaskToDelayedList+0xa4>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	429a      	cmp	r2, r3
 8014554:	d202      	bcs.n	801455c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014556:	4a08      	ldr	r2, [pc, #32]	; (8014578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	6013      	str	r3, [r2, #0]
}
 801455c:	bf00      	nop
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	20002280 	.word	0x20002280
 8014568:	20001da8 	.word	0x20001da8
 801456c:	20002268 	.word	0x20002268
 8014570:	20002238 	.word	0x20002238
 8014574:	20002234 	.word	0x20002234
 8014578:	2000229c 	.word	0x2000229c

0801457c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b08a      	sub	sp, #40	; 0x28
 8014580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014582:	2300      	movs	r3, #0
 8014584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014586:	f000 fb07 	bl	8014b98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801458a:	4b1c      	ldr	r3, [pc, #112]	; (80145fc <xTimerCreateTimerTask+0x80>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d021      	beq.n	80145d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014592:	2300      	movs	r3, #0
 8014594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014596:	2300      	movs	r3, #0
 8014598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801459a:	1d3a      	adds	r2, r7, #4
 801459c:	f107 0108 	add.w	r1, r7, #8
 80145a0:	f107 030c 	add.w	r3, r7, #12
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fd f8c3 	bl	8011730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80145aa:	6879      	ldr	r1, [r7, #4]
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	9202      	str	r2, [sp, #8]
 80145b2:	9301      	str	r3, [sp, #4]
 80145b4:	2302      	movs	r3, #2
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	2300      	movs	r3, #0
 80145ba:	460a      	mov	r2, r1
 80145bc:	4910      	ldr	r1, [pc, #64]	; (8014600 <xTimerCreateTimerTask+0x84>)
 80145be:	4811      	ldr	r0, [pc, #68]	; (8014604 <xTimerCreateTimerTask+0x88>)
 80145c0:	f7fe fe0a 	bl	80131d8 <xTaskCreateStatic>
 80145c4:	4603      	mov	r3, r0
 80145c6:	4a10      	ldr	r2, [pc, #64]	; (8014608 <xTimerCreateTimerTask+0x8c>)
 80145c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80145ca:	4b0f      	ldr	r3, [pc, #60]	; (8014608 <xTimerCreateTimerTask+0x8c>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d001      	beq.n	80145d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80145d2:	2301      	movs	r3, #1
 80145d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d10a      	bne.n	80145f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80145dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e0:	f383 8811 	msr	BASEPRI, r3
 80145e4:	f3bf 8f6f 	isb	sy
 80145e8:	f3bf 8f4f 	dsb	sy
 80145ec:	613b      	str	r3, [r7, #16]
}
 80145ee:	bf00      	nop
 80145f0:	e7fe      	b.n	80145f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80145f2:	697b      	ldr	r3, [r7, #20]
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3718      	adds	r7, #24
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	200022e0 	.word	0x200022e0
 8014600:	080187f8 	.word	0x080187f8
 8014604:	08014741 	.word	0x08014741
 8014608:	200022e4 	.word	0x200022e4

0801460c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b08a      	sub	sp, #40	; 0x28
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801461a:	2300      	movs	r3, #0
 801461c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10a      	bne.n	801463a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014628:	f383 8811 	msr	BASEPRI, r3
 801462c:	f3bf 8f6f 	isb	sy
 8014630:	f3bf 8f4f 	dsb	sy
 8014634:	623b      	str	r3, [r7, #32]
}
 8014636:	bf00      	nop
 8014638:	e7fe      	b.n	8014638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801463a:	4b1a      	ldr	r3, [pc, #104]	; (80146a4 <xTimerGenericCommand+0x98>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d02a      	beq.n	8014698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	2b05      	cmp	r3, #5
 8014652:	dc18      	bgt.n	8014686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014654:	f7ff fc70 	bl	8013f38 <xTaskGetSchedulerState>
 8014658:	4603      	mov	r3, r0
 801465a:	2b02      	cmp	r3, #2
 801465c:	d109      	bne.n	8014672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801465e:	4b11      	ldr	r3, [pc, #68]	; (80146a4 <xTimerGenericCommand+0x98>)
 8014660:	6818      	ldr	r0, [r3, #0]
 8014662:	f107 0110 	add.w	r1, r7, #16
 8014666:	2300      	movs	r3, #0
 8014668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801466a:	f7fd fb8d 	bl	8011d88 <xQueueGenericSend>
 801466e:	6278      	str	r0, [r7, #36]	; 0x24
 8014670:	e012      	b.n	8014698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014672:	4b0c      	ldr	r3, [pc, #48]	; (80146a4 <xTimerGenericCommand+0x98>)
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	f107 0110 	add.w	r1, r7, #16
 801467a:	2300      	movs	r3, #0
 801467c:	2200      	movs	r2, #0
 801467e:	f7fd fb83 	bl	8011d88 <xQueueGenericSend>
 8014682:	6278      	str	r0, [r7, #36]	; 0x24
 8014684:	e008      	b.n	8014698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014686:	4b07      	ldr	r3, [pc, #28]	; (80146a4 <xTimerGenericCommand+0x98>)
 8014688:	6818      	ldr	r0, [r3, #0]
 801468a:	f107 0110 	add.w	r1, r7, #16
 801468e:	2300      	movs	r3, #0
 8014690:	683a      	ldr	r2, [r7, #0]
 8014692:	f7fd fc77 	bl	8011f84 <xQueueGenericSendFromISR>
 8014696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801469a:	4618      	mov	r0, r3
 801469c:	3728      	adds	r7, #40	; 0x28
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	200022e0 	.word	0x200022e0

080146a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b088      	sub	sp, #32
 80146ac:	af02      	add	r7, sp, #8
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146b2:	4b22      	ldr	r3, [pc, #136]	; (801473c <prvProcessExpiredTimer+0x94>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	68db      	ldr	r3, [r3, #12]
 80146b8:	68db      	ldr	r3, [r3, #12]
 80146ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	3304      	adds	r3, #4
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fd f8d9 	bl	8011878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146cc:	f003 0304 	and.w	r3, r3, #4
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d022      	beq.n	801471a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	699a      	ldr	r2, [r3, #24]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	18d1      	adds	r1, r2, r3
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	683a      	ldr	r2, [r7, #0]
 80146e0:	6978      	ldr	r0, [r7, #20]
 80146e2:	f000 f8d1 	bl	8014888 <prvInsertTimerInActiveList>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d01f      	beq.n	801472c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80146ec:	2300      	movs	r3, #0
 80146ee:	9300      	str	r3, [sp, #0]
 80146f0:	2300      	movs	r3, #0
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	2100      	movs	r1, #0
 80146f6:	6978      	ldr	r0, [r7, #20]
 80146f8:	f7ff ff88 	bl	801460c <xTimerGenericCommand>
 80146fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d113      	bne.n	801472c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014708:	f383 8811 	msr	BASEPRI, r3
 801470c:	f3bf 8f6f 	isb	sy
 8014710:	f3bf 8f4f 	dsb	sy
 8014714:	60fb      	str	r3, [r7, #12]
}
 8014716:	bf00      	nop
 8014718:	e7fe      	b.n	8014718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014720:	f023 0301 	bic.w	r3, r3, #1
 8014724:	b2da      	uxtb	r2, r3
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	6a1b      	ldr	r3, [r3, #32]
 8014730:	6978      	ldr	r0, [r7, #20]
 8014732:	4798      	blx	r3
}
 8014734:	bf00      	nop
 8014736:	3718      	adds	r7, #24
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	200022d8 	.word	0x200022d8

08014740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014748:	f107 0308 	add.w	r3, r7, #8
 801474c:	4618      	mov	r0, r3
 801474e:	f000 f857 	bl	8014800 <prvGetNextExpireTime>
 8014752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	4619      	mov	r1, r3
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 f803 	bl	8014764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801475e:	f000 f8d5 	bl	801490c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014762:	e7f1      	b.n	8014748 <prvTimerTask+0x8>

08014764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801476e:	f7fe ff95 	bl	801369c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4618      	mov	r0, r3
 8014778:	f000 f866 	bl	8014848 <prvSampleTimeNow>
 801477c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d130      	bne.n	80147e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d10a      	bne.n	80147a0 <prvProcessTimerOrBlockTask+0x3c>
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	429a      	cmp	r2, r3
 8014790:	d806      	bhi.n	80147a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014792:	f7fe ff91 	bl	80136b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014796:	68f9      	ldr	r1, [r7, #12]
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f7ff ff85 	bl	80146a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801479e:	e024      	b.n	80147ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d008      	beq.n	80147b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80147a6:	4b13      	ldr	r3, [pc, #76]	; (80147f4 <prvProcessTimerOrBlockTask+0x90>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d101      	bne.n	80147b4 <prvProcessTimerOrBlockTask+0x50>
 80147b0:	2301      	movs	r3, #1
 80147b2:	e000      	b.n	80147b6 <prvProcessTimerOrBlockTask+0x52>
 80147b4:	2300      	movs	r3, #0
 80147b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80147b8:	4b0f      	ldr	r3, [pc, #60]	; (80147f8 <prvProcessTimerOrBlockTask+0x94>)
 80147ba:	6818      	ldr	r0, [r3, #0]
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	1ad3      	subs	r3, r2, r3
 80147c2:	683a      	ldr	r2, [r7, #0]
 80147c4:	4619      	mov	r1, r3
 80147c6:	f7fe f94d 	bl	8012a64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80147ca:	f7fe ff75 	bl	80136b8 <xTaskResumeAll>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d10a      	bne.n	80147ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80147d4:	4b09      	ldr	r3, [pc, #36]	; (80147fc <prvProcessTimerOrBlockTask+0x98>)
 80147d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147da:	601a      	str	r2, [r3, #0]
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	f3bf 8f6f 	isb	sy
}
 80147e4:	e001      	b.n	80147ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80147e6:	f7fe ff67 	bl	80136b8 <xTaskResumeAll>
}
 80147ea:	bf00      	nop
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	200022dc 	.word	0x200022dc
 80147f8:	200022e0 	.word	0x200022e0
 80147fc:	e000ed04 	.word	0xe000ed04

08014800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014800:	b480      	push	{r7}
 8014802:	b085      	sub	sp, #20
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014808:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <prvGetNextExpireTime+0x44>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d101      	bne.n	8014816 <prvGetNextExpireTime+0x16>
 8014812:	2201      	movs	r2, #1
 8014814:	e000      	b.n	8014818 <prvGetNextExpireTime+0x18>
 8014816:	2200      	movs	r2, #0
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d105      	bne.n	8014830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014824:	4b07      	ldr	r3, [pc, #28]	; (8014844 <prvGetNextExpireTime+0x44>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	68db      	ldr	r3, [r3, #12]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	60fb      	str	r3, [r7, #12]
 801482e:	e001      	b.n	8014834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014830:	2300      	movs	r3, #0
 8014832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014834:	68fb      	ldr	r3, [r7, #12]
}
 8014836:	4618      	mov	r0, r3
 8014838:	3714      	adds	r7, #20
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr
 8014842:	bf00      	nop
 8014844:	200022d8 	.word	0x200022d8

08014848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014850:	f7fe ffd0 	bl	80137f4 <xTaskGetTickCount>
 8014854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014856:	4b0b      	ldr	r3, [pc, #44]	; (8014884 <prvSampleTimeNow+0x3c>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	429a      	cmp	r2, r3
 801485e:	d205      	bcs.n	801486c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014860:	f000 f936 	bl	8014ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2201      	movs	r2, #1
 8014868:	601a      	str	r2, [r3, #0]
 801486a:	e002      	b.n	8014872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2200      	movs	r2, #0
 8014870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014872:	4a04      	ldr	r2, [pc, #16]	; (8014884 <prvSampleTimeNow+0x3c>)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014878:	68fb      	ldr	r3, [r7, #12]
}
 801487a:	4618      	mov	r0, r3
 801487c:	3710      	adds	r7, #16
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	200022e8 	.word	0x200022e8

08014888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	607a      	str	r2, [r7, #4]
 8014894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014896:	2300      	movs	r3, #0
 8014898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	68fa      	ldr	r2, [r7, #12]
 80148a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80148a6:	68ba      	ldr	r2, [r7, #8]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d812      	bhi.n	80148d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	1ad2      	subs	r2, r2, r3
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	699b      	ldr	r3, [r3, #24]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d302      	bcc.n	80148c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80148bc:	2301      	movs	r3, #1
 80148be:	617b      	str	r3, [r7, #20]
 80148c0:	e01b      	b.n	80148fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80148c2:	4b10      	ldr	r3, [pc, #64]	; (8014904 <prvInsertTimerInActiveList+0x7c>)
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	3304      	adds	r3, #4
 80148ca:	4619      	mov	r1, r3
 80148cc:	4610      	mov	r0, r2
 80148ce:	f7fc ff9a 	bl	8011806 <vListInsert>
 80148d2:	e012      	b.n	80148fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d206      	bcs.n	80148ea <prvInsertTimerInActiveList+0x62>
 80148dc:	68ba      	ldr	r2, [r7, #8]
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d302      	bcc.n	80148ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80148e4:	2301      	movs	r3, #1
 80148e6:	617b      	str	r3, [r7, #20]
 80148e8:	e007      	b.n	80148fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80148ea:	4b07      	ldr	r3, [pc, #28]	; (8014908 <prvInsertTimerInActiveList+0x80>)
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	3304      	adds	r3, #4
 80148f2:	4619      	mov	r1, r3
 80148f4:	4610      	mov	r0, r2
 80148f6:	f7fc ff86 	bl	8011806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80148fa:	697b      	ldr	r3, [r7, #20]
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	3718      	adds	r7, #24
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}
 8014904:	200022dc 	.word	0x200022dc
 8014908:	200022d8 	.word	0x200022d8

0801490c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b08e      	sub	sp, #56	; 0x38
 8014910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014912:	e0ca      	b.n	8014aaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2b00      	cmp	r3, #0
 8014918:	da18      	bge.n	801494c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801491a:	1d3b      	adds	r3, r7, #4
 801491c:	3304      	adds	r3, #4
 801491e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014922:	2b00      	cmp	r3, #0
 8014924:	d10a      	bne.n	801493c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801492a:	f383 8811 	msr	BASEPRI, r3
 801492e:	f3bf 8f6f 	isb	sy
 8014932:	f3bf 8f4f 	dsb	sy
 8014936:	61fb      	str	r3, [r7, #28]
}
 8014938:	bf00      	nop
 801493a:	e7fe      	b.n	801493a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014942:	6850      	ldr	r0, [r2, #4]
 8014944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014946:	6892      	ldr	r2, [r2, #8]
 8014948:	4611      	mov	r1, r2
 801494a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2b00      	cmp	r3, #0
 8014950:	f2c0 80aa 	blt.w	8014aa8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495a:	695b      	ldr	r3, [r3, #20]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d004      	beq.n	801496a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014962:	3304      	adds	r3, #4
 8014964:	4618      	mov	r0, r3
 8014966:	f7fc ff87 	bl	8011878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801496a:	463b      	mov	r3, r7
 801496c:	4618      	mov	r0, r3
 801496e:	f7ff ff6b 	bl	8014848 <prvSampleTimeNow>
 8014972:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b09      	cmp	r3, #9
 8014978:	f200 8097 	bhi.w	8014aaa <prvProcessReceivedCommands+0x19e>
 801497c:	a201      	add	r2, pc, #4	; (adr r2, 8014984 <prvProcessReceivedCommands+0x78>)
 801497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014982:	bf00      	nop
 8014984:	080149ad 	.word	0x080149ad
 8014988:	080149ad 	.word	0x080149ad
 801498c:	080149ad 	.word	0x080149ad
 8014990:	08014a21 	.word	0x08014a21
 8014994:	08014a35 	.word	0x08014a35
 8014998:	08014a7f 	.word	0x08014a7f
 801499c:	080149ad 	.word	0x080149ad
 80149a0:	080149ad 	.word	0x080149ad
 80149a4:	08014a21 	.word	0x08014a21
 80149a8:	08014a35 	.word	0x08014a35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149b2:	f043 0301 	orr.w	r3, r3, #1
 80149b6:	b2da      	uxtb	r2, r3
 80149b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80149be:	68ba      	ldr	r2, [r7, #8]
 80149c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c2:	699b      	ldr	r3, [r3, #24]
 80149c4:	18d1      	adds	r1, r2, r3
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149cc:	f7ff ff5c 	bl	8014888 <prvInsertTimerInActiveList>
 80149d0:	4603      	mov	r3, r0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d069      	beq.n	8014aaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	6a1b      	ldr	r3, [r3, #32]
 80149da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80149de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149e4:	f003 0304 	and.w	r3, r3, #4
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d05e      	beq.n	8014aaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80149ec:	68ba      	ldr	r2, [r7, #8]
 80149ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f0:	699b      	ldr	r3, [r3, #24]
 80149f2:	441a      	add	r2, r3
 80149f4:	2300      	movs	r3, #0
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	2300      	movs	r3, #0
 80149fa:	2100      	movs	r1, #0
 80149fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149fe:	f7ff fe05 	bl	801460c <xTimerGenericCommand>
 8014a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014a04:	6a3b      	ldr	r3, [r7, #32]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d14f      	bne.n	8014aaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a0e:	f383 8811 	msr	BASEPRI, r3
 8014a12:	f3bf 8f6f 	isb	sy
 8014a16:	f3bf 8f4f 	dsb	sy
 8014a1a:	61bb      	str	r3, [r7, #24]
}
 8014a1c:	bf00      	nop
 8014a1e:	e7fe      	b.n	8014a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a26:	f023 0301 	bic.w	r3, r3, #1
 8014a2a:	b2da      	uxtb	r2, r3
 8014a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014a32:	e03a      	b.n	8014aaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a3a:	f043 0301 	orr.w	r3, r3, #1
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014a46:	68ba      	ldr	r2, [r7, #8]
 8014a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4e:	699b      	ldr	r3, [r3, #24]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d10a      	bne.n	8014a6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a58:	f383 8811 	msr	BASEPRI, r3
 8014a5c:	f3bf 8f6f 	isb	sy
 8014a60:	f3bf 8f4f 	dsb	sy
 8014a64:	617b      	str	r3, [r7, #20]
}
 8014a66:	bf00      	nop
 8014a68:	e7fe      	b.n	8014a68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a6c:	699a      	ldr	r2, [r3, #24]
 8014a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a70:	18d1      	adds	r1, r2, r3
 8014a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a78:	f7ff ff06 	bl	8014888 <prvInsertTimerInActiveList>
					break;
 8014a7c:	e015      	b.n	8014aaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a84:	f003 0302 	and.w	r3, r3, #2
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d103      	bne.n	8014a94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a8e:	f000 fbe3 	bl	8015258 <vPortFree>
 8014a92:	e00a      	b.n	8014aaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a9a:	f023 0301 	bic.w	r3, r3, #1
 8014a9e:	b2da      	uxtb	r2, r3
 8014aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014aa6:	e000      	b.n	8014aaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014aaa:	4b08      	ldr	r3, [pc, #32]	; (8014acc <prvProcessReceivedCommands+0x1c0>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	1d39      	adds	r1, r7, #4
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fd fb8e 	bl	80121d4 <xQueueReceive>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	f47f af2a 	bne.w	8014914 <prvProcessReceivedCommands+0x8>
	}
}
 8014ac0:	bf00      	nop
 8014ac2:	bf00      	nop
 8014ac4:	3730      	adds	r7, #48	; 0x30
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	200022e0 	.word	0x200022e0

08014ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b088      	sub	sp, #32
 8014ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014ad6:	e048      	b.n	8014b6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014ad8:	4b2d      	ldr	r3, [pc, #180]	; (8014b90 <prvSwitchTimerLists+0xc0>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ae2:	4b2b      	ldr	r3, [pc, #172]	; (8014b90 <prvSwitchTimerLists+0xc0>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	3304      	adds	r3, #4
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7fc fec1 	bl	8011878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	6a1b      	ldr	r3, [r3, #32]
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b04:	f003 0304 	and.w	r3, r3, #4
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d02e      	beq.n	8014b6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	699b      	ldr	r3, [r3, #24]
 8014b10:	693a      	ldr	r2, [r7, #16]
 8014b12:	4413      	add	r3, r2
 8014b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014b16:	68ba      	ldr	r2, [r7, #8]
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d90e      	bls.n	8014b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	68ba      	ldr	r2, [r7, #8]
 8014b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014b2a:	4b19      	ldr	r3, [pc, #100]	; (8014b90 <prvSwitchTimerLists+0xc0>)
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3304      	adds	r3, #4
 8014b32:	4619      	mov	r1, r3
 8014b34:	4610      	mov	r0, r2
 8014b36:	f7fc fe66 	bl	8011806 <vListInsert>
 8014b3a:	e016      	b.n	8014b6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	2300      	movs	r3, #0
 8014b42:	693a      	ldr	r2, [r7, #16]
 8014b44:	2100      	movs	r1, #0
 8014b46:	68f8      	ldr	r0, [r7, #12]
 8014b48:	f7ff fd60 	bl	801460c <xTimerGenericCommand>
 8014b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d10a      	bne.n	8014b6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b58:	f383 8811 	msr	BASEPRI, r3
 8014b5c:	f3bf 8f6f 	isb	sy
 8014b60:	f3bf 8f4f 	dsb	sy
 8014b64:	603b      	str	r3, [r7, #0]
}
 8014b66:	bf00      	nop
 8014b68:	e7fe      	b.n	8014b68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b6a:	4b09      	ldr	r3, [pc, #36]	; (8014b90 <prvSwitchTimerLists+0xc0>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d1b1      	bne.n	8014ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014b74:	4b06      	ldr	r3, [pc, #24]	; (8014b90 <prvSwitchTimerLists+0xc0>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014b7a:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <prvSwitchTimerLists+0xc4>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	4a04      	ldr	r2, [pc, #16]	; (8014b90 <prvSwitchTimerLists+0xc0>)
 8014b80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014b82:	4a04      	ldr	r2, [pc, #16]	; (8014b94 <prvSwitchTimerLists+0xc4>)
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	6013      	str	r3, [r2, #0]
}
 8014b88:	bf00      	nop
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	200022d8 	.word	0x200022d8
 8014b94:	200022dc 	.word	0x200022dc

08014b98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014b9e:	f000 f969 	bl	8014e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014ba2:	4b15      	ldr	r3, [pc, #84]	; (8014bf8 <prvCheckForValidListAndQueue+0x60>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d120      	bne.n	8014bec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014baa:	4814      	ldr	r0, [pc, #80]	; (8014bfc <prvCheckForValidListAndQueue+0x64>)
 8014bac:	f7fc fdda 	bl	8011764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014bb0:	4813      	ldr	r0, [pc, #76]	; (8014c00 <prvCheckForValidListAndQueue+0x68>)
 8014bb2:	f7fc fdd7 	bl	8011764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014bb6:	4b13      	ldr	r3, [pc, #76]	; (8014c04 <prvCheckForValidListAndQueue+0x6c>)
 8014bb8:	4a10      	ldr	r2, [pc, #64]	; (8014bfc <prvCheckForValidListAndQueue+0x64>)
 8014bba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014bbc:	4b12      	ldr	r3, [pc, #72]	; (8014c08 <prvCheckForValidListAndQueue+0x70>)
 8014bbe:	4a10      	ldr	r2, [pc, #64]	; (8014c00 <prvCheckForValidListAndQueue+0x68>)
 8014bc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	4b11      	ldr	r3, [pc, #68]	; (8014c0c <prvCheckForValidListAndQueue+0x74>)
 8014bc8:	4a11      	ldr	r2, [pc, #68]	; (8014c10 <prvCheckForValidListAndQueue+0x78>)
 8014bca:	2110      	movs	r1, #16
 8014bcc:	200a      	movs	r0, #10
 8014bce:	f7fc fee5 	bl	801199c <xQueueGenericCreateStatic>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	4a08      	ldr	r2, [pc, #32]	; (8014bf8 <prvCheckForValidListAndQueue+0x60>)
 8014bd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014bd8:	4b07      	ldr	r3, [pc, #28]	; (8014bf8 <prvCheckForValidListAndQueue+0x60>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d005      	beq.n	8014bec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014be0:	4b05      	ldr	r3, [pc, #20]	; (8014bf8 <prvCheckForValidListAndQueue+0x60>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	490b      	ldr	r1, [pc, #44]	; (8014c14 <prvCheckForValidListAndQueue+0x7c>)
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fd fee8 	bl	80129bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014bec:	f000 f972 	bl	8014ed4 <vPortExitCritical>
}
 8014bf0:	bf00      	nop
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	200022e0 	.word	0x200022e0
 8014bfc:	200022b0 	.word	0x200022b0
 8014c00:	200022c4 	.word	0x200022c4
 8014c04:	200022d8 	.word	0x200022d8
 8014c08:	200022dc 	.word	0x200022dc
 8014c0c:	2000238c 	.word	0x2000238c
 8014c10:	200022ec 	.word	0x200022ec
 8014c14:	08018800 	.word	0x08018800

08014c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b085      	sub	sp, #20
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	3b04      	subs	r3, #4
 8014c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	3b04      	subs	r3, #4
 8014c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	f023 0201 	bic.w	r2, r3, #1
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	3b04      	subs	r3, #4
 8014c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014c48:	4a0c      	ldr	r2, [pc, #48]	; (8014c7c <pxPortInitialiseStack+0x64>)
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	3b14      	subs	r3, #20
 8014c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	3b04      	subs	r3, #4
 8014c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f06f 0202 	mvn.w	r2, #2
 8014c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	3b20      	subs	r3, #32
 8014c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3714      	adds	r7, #20
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr
 8014c7c:	08014c81 	.word	0x08014c81

08014c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014c80:	b480      	push	{r7}
 8014c82:	b085      	sub	sp, #20
 8014c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014c86:	2300      	movs	r3, #0
 8014c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014c8a:	4b12      	ldr	r3, [pc, #72]	; (8014cd4 <prvTaskExitError+0x54>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c92:	d00a      	beq.n	8014caa <prvTaskExitError+0x2a>
	__asm volatile
 8014c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c98:	f383 8811 	msr	BASEPRI, r3
 8014c9c:	f3bf 8f6f 	isb	sy
 8014ca0:	f3bf 8f4f 	dsb	sy
 8014ca4:	60fb      	str	r3, [r7, #12]
}
 8014ca6:	bf00      	nop
 8014ca8:	e7fe      	b.n	8014ca8 <prvTaskExitError+0x28>
	__asm volatile
 8014caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cae:	f383 8811 	msr	BASEPRI, r3
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	f3bf 8f4f 	dsb	sy
 8014cba:	60bb      	str	r3, [r7, #8]
}
 8014cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014cbe:	bf00      	nop
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d0fc      	beq.n	8014cc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014cc6:	bf00      	nop
 8014cc8:	bf00      	nop
 8014cca:	3714      	adds	r7, #20
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr
 8014cd4:	2000003c 	.word	0x2000003c
	...

08014ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ce0:	4b07      	ldr	r3, [pc, #28]	; (8014d00 <pxCurrentTCBConst2>)
 8014ce2:	6819      	ldr	r1, [r3, #0]
 8014ce4:	6808      	ldr	r0, [r1, #0]
 8014ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cea:	f380 8809 	msr	PSP, r0
 8014cee:	f3bf 8f6f 	isb	sy
 8014cf2:	f04f 0000 	mov.w	r0, #0
 8014cf6:	f380 8811 	msr	BASEPRI, r0
 8014cfa:	4770      	bx	lr
 8014cfc:	f3af 8000 	nop.w

08014d00 <pxCurrentTCBConst2>:
 8014d00:	20001da8 	.word	0x20001da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d04:	bf00      	nop
 8014d06:	bf00      	nop

08014d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d08:	4808      	ldr	r0, [pc, #32]	; (8014d2c <prvPortStartFirstTask+0x24>)
 8014d0a:	6800      	ldr	r0, [r0, #0]
 8014d0c:	6800      	ldr	r0, [r0, #0]
 8014d0e:	f380 8808 	msr	MSP, r0
 8014d12:	f04f 0000 	mov.w	r0, #0
 8014d16:	f380 8814 	msr	CONTROL, r0
 8014d1a:	b662      	cpsie	i
 8014d1c:	b661      	cpsie	f
 8014d1e:	f3bf 8f4f 	dsb	sy
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	df00      	svc	0
 8014d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d2a:	bf00      	nop
 8014d2c:	e000ed08 	.word	0xe000ed08

08014d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b086      	sub	sp, #24
 8014d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014d36:	4b46      	ldr	r3, [pc, #280]	; (8014e50 <xPortStartScheduler+0x120>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4a46      	ldr	r2, [pc, #280]	; (8014e54 <xPortStartScheduler+0x124>)
 8014d3c:	4293      	cmp	r3, r2
 8014d3e:	d10a      	bne.n	8014d56 <xPortStartScheduler+0x26>
	__asm volatile
 8014d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d44:	f383 8811 	msr	BASEPRI, r3
 8014d48:	f3bf 8f6f 	isb	sy
 8014d4c:	f3bf 8f4f 	dsb	sy
 8014d50:	613b      	str	r3, [r7, #16]
}
 8014d52:	bf00      	nop
 8014d54:	e7fe      	b.n	8014d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014d56:	4b3e      	ldr	r3, [pc, #248]	; (8014e50 <xPortStartScheduler+0x120>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4a3f      	ldr	r2, [pc, #252]	; (8014e58 <xPortStartScheduler+0x128>)
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d10a      	bne.n	8014d76 <xPortStartScheduler+0x46>
	__asm volatile
 8014d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d64:	f383 8811 	msr	BASEPRI, r3
 8014d68:	f3bf 8f6f 	isb	sy
 8014d6c:	f3bf 8f4f 	dsb	sy
 8014d70:	60fb      	str	r3, [r7, #12]
}
 8014d72:	bf00      	nop
 8014d74:	e7fe      	b.n	8014d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014d76:	4b39      	ldr	r3, [pc, #228]	; (8014e5c <xPortStartScheduler+0x12c>)
 8014d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	22ff      	movs	r2, #255	; 0xff
 8014d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d90:	78fb      	ldrb	r3, [r7, #3]
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014d98:	b2da      	uxtb	r2, r3
 8014d9a:	4b31      	ldr	r3, [pc, #196]	; (8014e60 <xPortStartScheduler+0x130>)
 8014d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d9e:	4b31      	ldr	r3, [pc, #196]	; (8014e64 <xPortStartScheduler+0x134>)
 8014da0:	2207      	movs	r2, #7
 8014da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014da4:	e009      	b.n	8014dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014da6:	4b2f      	ldr	r3, [pc, #188]	; (8014e64 <xPortStartScheduler+0x134>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	3b01      	subs	r3, #1
 8014dac:	4a2d      	ldr	r2, [pc, #180]	; (8014e64 <xPortStartScheduler+0x134>)
 8014dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014db0:	78fb      	ldrb	r3, [r7, #3]
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	005b      	lsls	r3, r3, #1
 8014db6:	b2db      	uxtb	r3, r3
 8014db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dba:	78fb      	ldrb	r3, [r7, #3]
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014dc2:	2b80      	cmp	r3, #128	; 0x80
 8014dc4:	d0ef      	beq.n	8014da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014dc6:	4b27      	ldr	r3, [pc, #156]	; (8014e64 <xPortStartScheduler+0x134>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f1c3 0307 	rsb	r3, r3, #7
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	d00a      	beq.n	8014de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd6:	f383 8811 	msr	BASEPRI, r3
 8014dda:	f3bf 8f6f 	isb	sy
 8014dde:	f3bf 8f4f 	dsb	sy
 8014de2:	60bb      	str	r3, [r7, #8]
}
 8014de4:	bf00      	nop
 8014de6:	e7fe      	b.n	8014de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014de8:	4b1e      	ldr	r3, [pc, #120]	; (8014e64 <xPortStartScheduler+0x134>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	021b      	lsls	r3, r3, #8
 8014dee:	4a1d      	ldr	r2, [pc, #116]	; (8014e64 <xPortStartScheduler+0x134>)
 8014df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014df2:	4b1c      	ldr	r3, [pc, #112]	; (8014e64 <xPortStartScheduler+0x134>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014dfa:	4a1a      	ldr	r2, [pc, #104]	; (8014e64 <xPortStartScheduler+0x134>)
 8014dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	b2da      	uxtb	r2, r3
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e06:	4b18      	ldr	r3, [pc, #96]	; (8014e68 <xPortStartScheduler+0x138>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	4a17      	ldr	r2, [pc, #92]	; (8014e68 <xPortStartScheduler+0x138>)
 8014e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e12:	4b15      	ldr	r3, [pc, #84]	; (8014e68 <xPortStartScheduler+0x138>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	4a14      	ldr	r2, [pc, #80]	; (8014e68 <xPortStartScheduler+0x138>)
 8014e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e1e:	f000 f8dd 	bl	8014fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e22:	4b12      	ldr	r3, [pc, #72]	; (8014e6c <xPortStartScheduler+0x13c>)
 8014e24:	2200      	movs	r2, #0
 8014e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e28:	f000 f8fc 	bl	8015024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e2c:	4b10      	ldr	r3, [pc, #64]	; (8014e70 <xPortStartScheduler+0x140>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4a0f      	ldr	r2, [pc, #60]	; (8014e70 <xPortStartScheduler+0x140>)
 8014e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e38:	f7ff ff66 	bl	8014d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e3c:	f7fe fda4 	bl	8013988 <vTaskSwitchContext>
	prvTaskExitError();
 8014e40:	f7ff ff1e 	bl	8014c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e44:	2300      	movs	r3, #0
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3718      	adds	r7, #24
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	e000ed00 	.word	0xe000ed00
 8014e54:	410fc271 	.word	0x410fc271
 8014e58:	410fc270 	.word	0x410fc270
 8014e5c:	e000e400 	.word	0xe000e400
 8014e60:	200023dc 	.word	0x200023dc
 8014e64:	200023e0 	.word	0x200023e0
 8014e68:	e000ed20 	.word	0xe000ed20
 8014e6c:	2000003c 	.word	0x2000003c
 8014e70:	e000ef34 	.word	0xe000ef34

08014e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014e74:	b480      	push	{r7}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af00      	add	r7, sp, #0
	__asm volatile
 8014e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7e:	f383 8811 	msr	BASEPRI, r3
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	607b      	str	r3, [r7, #4]
}
 8014e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014e8e:	4b0f      	ldr	r3, [pc, #60]	; (8014ecc <vPortEnterCritical+0x58>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	3301      	adds	r3, #1
 8014e94:	4a0d      	ldr	r2, [pc, #52]	; (8014ecc <vPortEnterCritical+0x58>)
 8014e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014e98:	4b0c      	ldr	r3, [pc, #48]	; (8014ecc <vPortEnterCritical+0x58>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d10f      	bne.n	8014ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014ea0:	4b0b      	ldr	r3, [pc, #44]	; (8014ed0 <vPortEnterCritical+0x5c>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00a      	beq.n	8014ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eae:	f383 8811 	msr	BASEPRI, r3
 8014eb2:	f3bf 8f6f 	isb	sy
 8014eb6:	f3bf 8f4f 	dsb	sy
 8014eba:	603b      	str	r3, [r7, #0]
}
 8014ebc:	bf00      	nop
 8014ebe:	e7fe      	b.n	8014ebe <vPortEnterCritical+0x4a>
	}
}
 8014ec0:	bf00      	nop
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	2000003c 	.word	0x2000003c
 8014ed0:	e000ed04 	.word	0xe000ed04

08014ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014eda:	4b12      	ldr	r3, [pc, #72]	; (8014f24 <vPortExitCritical+0x50>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d10a      	bne.n	8014ef8 <vPortExitCritical+0x24>
	__asm volatile
 8014ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee6:	f383 8811 	msr	BASEPRI, r3
 8014eea:	f3bf 8f6f 	isb	sy
 8014eee:	f3bf 8f4f 	dsb	sy
 8014ef2:	607b      	str	r3, [r7, #4]
}
 8014ef4:	bf00      	nop
 8014ef6:	e7fe      	b.n	8014ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014ef8:	4b0a      	ldr	r3, [pc, #40]	; (8014f24 <vPortExitCritical+0x50>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	3b01      	subs	r3, #1
 8014efe:	4a09      	ldr	r2, [pc, #36]	; (8014f24 <vPortExitCritical+0x50>)
 8014f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f02:	4b08      	ldr	r3, [pc, #32]	; (8014f24 <vPortExitCritical+0x50>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d105      	bne.n	8014f16 <vPortExitCritical+0x42>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	f383 8811 	msr	BASEPRI, r3
}
 8014f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f16:	bf00      	nop
 8014f18:	370c      	adds	r7, #12
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop
 8014f24:	2000003c 	.word	0x2000003c
	...

08014f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f30:	f3ef 8009 	mrs	r0, PSP
 8014f34:	f3bf 8f6f 	isb	sy
 8014f38:	4b15      	ldr	r3, [pc, #84]	; (8014f90 <pxCurrentTCBConst>)
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	f01e 0f10 	tst.w	lr, #16
 8014f40:	bf08      	it	eq
 8014f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f4a:	6010      	str	r0, [r2, #0]
 8014f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014f54:	f380 8811 	msr	BASEPRI, r0
 8014f58:	f3bf 8f4f 	dsb	sy
 8014f5c:	f3bf 8f6f 	isb	sy
 8014f60:	f7fe fd12 	bl	8013988 <vTaskSwitchContext>
 8014f64:	f04f 0000 	mov.w	r0, #0
 8014f68:	f380 8811 	msr	BASEPRI, r0
 8014f6c:	bc09      	pop	{r0, r3}
 8014f6e:	6819      	ldr	r1, [r3, #0]
 8014f70:	6808      	ldr	r0, [r1, #0]
 8014f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f76:	f01e 0f10 	tst.w	lr, #16
 8014f7a:	bf08      	it	eq
 8014f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014f80:	f380 8809 	msr	PSP, r0
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	4770      	bx	lr
 8014f8a:	bf00      	nop
 8014f8c:	f3af 8000 	nop.w

08014f90 <pxCurrentTCBConst>:
 8014f90:	20001da8 	.word	0x20001da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014f94:	bf00      	nop
 8014f96:	bf00      	nop

08014f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8014f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa2:	f383 8811 	msr	BASEPRI, r3
 8014fa6:	f3bf 8f6f 	isb	sy
 8014faa:	f3bf 8f4f 	dsb	sy
 8014fae:	607b      	str	r3, [r7, #4]
}
 8014fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014fb2:	f7fe fc2f 	bl	8013814 <xTaskIncrementTick>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d003      	beq.n	8014fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014fbc:	4b06      	ldr	r3, [pc, #24]	; (8014fd8 <xPortSysTickHandler+0x40>)
 8014fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fc2:	601a      	str	r2, [r3, #0]
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	f383 8811 	msr	BASEPRI, r3
}
 8014fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014fd0:	bf00      	nop
 8014fd2:	3708      	adds	r7, #8
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	e000ed04 	.word	0xe000ed04

08014fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014fdc:	b480      	push	{r7}
 8014fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014fe0:	4b0b      	ldr	r3, [pc, #44]	; (8015010 <vPortSetupTimerInterrupt+0x34>)
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014fe6:	4b0b      	ldr	r3, [pc, #44]	; (8015014 <vPortSetupTimerInterrupt+0x38>)
 8014fe8:	2200      	movs	r2, #0
 8014fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014fec:	4b0a      	ldr	r3, [pc, #40]	; (8015018 <vPortSetupTimerInterrupt+0x3c>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	4a0a      	ldr	r2, [pc, #40]	; (801501c <vPortSetupTimerInterrupt+0x40>)
 8014ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ff6:	099b      	lsrs	r3, r3, #6
 8014ff8:	4a09      	ldr	r2, [pc, #36]	; (8015020 <vPortSetupTimerInterrupt+0x44>)
 8014ffa:	3b01      	subs	r3, #1
 8014ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014ffe:	4b04      	ldr	r3, [pc, #16]	; (8015010 <vPortSetupTimerInterrupt+0x34>)
 8015000:	2207      	movs	r2, #7
 8015002:	601a      	str	r2, [r3, #0]
}
 8015004:	bf00      	nop
 8015006:	46bd      	mov	sp, r7
 8015008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500c:	4770      	bx	lr
 801500e:	bf00      	nop
 8015010:	e000e010 	.word	0xe000e010
 8015014:	e000e018 	.word	0xe000e018
 8015018:	20000030 	.word	0x20000030
 801501c:	10624dd3 	.word	0x10624dd3
 8015020:	e000e014 	.word	0xe000e014

08015024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015034 <vPortEnableVFP+0x10>
 8015028:	6801      	ldr	r1, [r0, #0]
 801502a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801502e:	6001      	str	r1, [r0, #0]
 8015030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015032:	bf00      	nop
 8015034:	e000ed88 	.word	0xe000ed88

08015038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015038:	b480      	push	{r7}
 801503a:	b085      	sub	sp, #20
 801503c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801503e:	f3ef 8305 	mrs	r3, IPSR
 8015042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	2b0f      	cmp	r3, #15
 8015048:	d914      	bls.n	8015074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801504a:	4a17      	ldr	r2, [pc, #92]	; (80150a8 <vPortValidateInterruptPriority+0x70>)
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	4413      	add	r3, r2
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015054:	4b15      	ldr	r3, [pc, #84]	; (80150ac <vPortValidateInterruptPriority+0x74>)
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	7afa      	ldrb	r2, [r7, #11]
 801505a:	429a      	cmp	r2, r3
 801505c:	d20a      	bcs.n	8015074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015062:	f383 8811 	msr	BASEPRI, r3
 8015066:	f3bf 8f6f 	isb	sy
 801506a:	f3bf 8f4f 	dsb	sy
 801506e:	607b      	str	r3, [r7, #4]
}
 8015070:	bf00      	nop
 8015072:	e7fe      	b.n	8015072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015074:	4b0e      	ldr	r3, [pc, #56]	; (80150b0 <vPortValidateInterruptPriority+0x78>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801507c:	4b0d      	ldr	r3, [pc, #52]	; (80150b4 <vPortValidateInterruptPriority+0x7c>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	429a      	cmp	r2, r3
 8015082:	d90a      	bls.n	801509a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015088:	f383 8811 	msr	BASEPRI, r3
 801508c:	f3bf 8f6f 	isb	sy
 8015090:	f3bf 8f4f 	dsb	sy
 8015094:	603b      	str	r3, [r7, #0]
}
 8015096:	bf00      	nop
 8015098:	e7fe      	b.n	8015098 <vPortValidateInterruptPriority+0x60>
	}
 801509a:	bf00      	nop
 801509c:	3714      	adds	r7, #20
 801509e:	46bd      	mov	sp, r7
 80150a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a4:	4770      	bx	lr
 80150a6:	bf00      	nop
 80150a8:	e000e3f0 	.word	0xe000e3f0
 80150ac:	200023dc 	.word	0x200023dc
 80150b0:	e000ed0c 	.word	0xe000ed0c
 80150b4:	200023e0 	.word	0x200023e0

080150b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b08a      	sub	sp, #40	; 0x28
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80150c0:	2300      	movs	r3, #0
 80150c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80150c4:	f7fe faea 	bl	801369c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80150c8:	4b5d      	ldr	r3, [pc, #372]	; (8015240 <pvPortMalloc+0x188>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d101      	bne.n	80150d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80150d0:	f000 f930 	bl	8015334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80150d4:	4b5b      	ldr	r3, [pc, #364]	; (8015244 <pvPortMalloc+0x18c>)
 80150d6:	681a      	ldr	r2, [r3, #0]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4013      	ands	r3, r2
 80150dc:	2b00      	cmp	r3, #0
 80150de:	f040 8093 	bne.w	8015208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d01d      	beq.n	8015124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80150e8:	2208      	movs	r2, #8
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	4413      	add	r3, r2
 80150ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f003 0307 	and.w	r3, r3, #7
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d014      	beq.n	8015124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f023 0307 	bic.w	r3, r3, #7
 8015100:	3308      	adds	r3, #8
 8015102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f003 0307 	and.w	r3, r3, #7
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00a      	beq.n	8015124 <pvPortMalloc+0x6c>
	__asm volatile
 801510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	617b      	str	r3, [r7, #20]
}
 8015120:	bf00      	nop
 8015122:	e7fe      	b.n	8015122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d06e      	beq.n	8015208 <pvPortMalloc+0x150>
 801512a:	4b47      	ldr	r3, [pc, #284]	; (8015248 <pvPortMalloc+0x190>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	429a      	cmp	r2, r3
 8015132:	d869      	bhi.n	8015208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015134:	4b45      	ldr	r3, [pc, #276]	; (801524c <pvPortMalloc+0x194>)
 8015136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015138:	4b44      	ldr	r3, [pc, #272]	; (801524c <pvPortMalloc+0x194>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801513e:	e004      	b.n	801514a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	687a      	ldr	r2, [r7, #4]
 8015150:	429a      	cmp	r2, r3
 8015152:	d903      	bls.n	801515c <pvPortMalloc+0xa4>
 8015154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d1f1      	bne.n	8015140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801515c:	4b38      	ldr	r3, [pc, #224]	; (8015240 <pvPortMalloc+0x188>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015162:	429a      	cmp	r2, r3
 8015164:	d050      	beq.n	8015208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015166:	6a3b      	ldr	r3, [r7, #32]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2208      	movs	r2, #8
 801516c:	4413      	add	r3, r2
 801516e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	6a3b      	ldr	r3, [r7, #32]
 8015176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517a:	685a      	ldr	r2, [r3, #4]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	1ad2      	subs	r2, r2, r3
 8015180:	2308      	movs	r3, #8
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	429a      	cmp	r2, r3
 8015186:	d91f      	bls.n	80151c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	4413      	add	r3, r2
 801518e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	f003 0307 	and.w	r3, r3, #7
 8015196:	2b00      	cmp	r3, #0
 8015198:	d00a      	beq.n	80151b0 <pvPortMalloc+0xf8>
	__asm volatile
 801519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519e:	f383 8811 	msr	BASEPRI, r3
 80151a2:	f3bf 8f6f 	isb	sy
 80151a6:	f3bf 8f4f 	dsb	sy
 80151aa:	613b      	str	r3, [r7, #16]
}
 80151ac:	bf00      	nop
 80151ae:	e7fe      	b.n	80151ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	685a      	ldr	r2, [r3, #4]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	1ad2      	subs	r2, r2, r3
 80151b8:	69bb      	ldr	r3, [r7, #24]
 80151ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80151bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80151c2:	69b8      	ldr	r0, [r7, #24]
 80151c4:	f000 f918 	bl	80153f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80151c8:	4b1f      	ldr	r3, [pc, #124]	; (8015248 <pvPortMalloc+0x190>)
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	4a1d      	ldr	r2, [pc, #116]	; (8015248 <pvPortMalloc+0x190>)
 80151d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80151d6:	4b1c      	ldr	r3, [pc, #112]	; (8015248 <pvPortMalloc+0x190>)
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	4b1d      	ldr	r3, [pc, #116]	; (8015250 <pvPortMalloc+0x198>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	429a      	cmp	r2, r3
 80151e0:	d203      	bcs.n	80151ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80151e2:	4b19      	ldr	r3, [pc, #100]	; (8015248 <pvPortMalloc+0x190>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	4a1a      	ldr	r2, [pc, #104]	; (8015250 <pvPortMalloc+0x198>)
 80151e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80151ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ec:	685a      	ldr	r2, [r3, #4]
 80151ee:	4b15      	ldr	r3, [pc, #84]	; (8015244 <pvPortMalloc+0x18c>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	431a      	orrs	r2, r3
 80151f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80151f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fa:	2200      	movs	r2, #0
 80151fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80151fe:	4b15      	ldr	r3, [pc, #84]	; (8015254 <pvPortMalloc+0x19c>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	3301      	adds	r3, #1
 8015204:	4a13      	ldr	r2, [pc, #76]	; (8015254 <pvPortMalloc+0x19c>)
 8015206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015208:	f7fe fa56 	bl	80136b8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d101      	bne.n	8015216 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015212:	f7f3 ff3d 	bl	8009090 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015216:	69fb      	ldr	r3, [r7, #28]
 8015218:	f003 0307 	and.w	r3, r3, #7
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00a      	beq.n	8015236 <pvPortMalloc+0x17e>
	__asm volatile
 8015220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015224:	f383 8811 	msr	BASEPRI, r3
 8015228:	f3bf 8f6f 	isb	sy
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	60fb      	str	r3, [r7, #12]
}
 8015232:	bf00      	nop
 8015234:	e7fe      	b.n	8015234 <pvPortMalloc+0x17c>
	return pvReturn;
 8015236:	69fb      	ldr	r3, [r7, #28]
}
 8015238:	4618      	mov	r0, r3
 801523a:	3728      	adds	r7, #40	; 0x28
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	200073ec 	.word	0x200073ec
 8015244:	20007400 	.word	0x20007400
 8015248:	200073f0 	.word	0x200073f0
 801524c:	200073e4 	.word	0x200073e4
 8015250:	200073f4 	.word	0x200073f4
 8015254:	200073f8 	.word	0x200073f8

08015258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b086      	sub	sp, #24
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d04d      	beq.n	8015306 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801526a:	2308      	movs	r3, #8
 801526c:	425b      	negs	r3, r3
 801526e:	697a      	ldr	r2, [r7, #20]
 8015270:	4413      	add	r3, r2
 8015272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	685a      	ldr	r2, [r3, #4]
 801527c:	4b24      	ldr	r3, [pc, #144]	; (8015310 <vPortFree+0xb8>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	4013      	ands	r3, r2
 8015282:	2b00      	cmp	r3, #0
 8015284:	d10a      	bne.n	801529c <vPortFree+0x44>
	__asm volatile
 8015286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801528a:	f383 8811 	msr	BASEPRI, r3
 801528e:	f3bf 8f6f 	isb	sy
 8015292:	f3bf 8f4f 	dsb	sy
 8015296:	60fb      	str	r3, [r7, #12]
}
 8015298:	bf00      	nop
 801529a:	e7fe      	b.n	801529a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d00a      	beq.n	80152ba <vPortFree+0x62>
	__asm volatile
 80152a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a8:	f383 8811 	msr	BASEPRI, r3
 80152ac:	f3bf 8f6f 	isb	sy
 80152b0:	f3bf 8f4f 	dsb	sy
 80152b4:	60bb      	str	r3, [r7, #8]
}
 80152b6:	bf00      	nop
 80152b8:	e7fe      	b.n	80152b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	685a      	ldr	r2, [r3, #4]
 80152be:	4b14      	ldr	r3, [pc, #80]	; (8015310 <vPortFree+0xb8>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	4013      	ands	r3, r2
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d01e      	beq.n	8015306 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d11a      	bne.n	8015306 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	685a      	ldr	r2, [r3, #4]
 80152d4:	4b0e      	ldr	r3, [pc, #56]	; (8015310 <vPortFree+0xb8>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	43db      	mvns	r3, r3
 80152da:	401a      	ands	r2, r3
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80152e0:	f7fe f9dc 	bl	801369c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	685a      	ldr	r2, [r3, #4]
 80152e8:	4b0a      	ldr	r3, [pc, #40]	; (8015314 <vPortFree+0xbc>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4413      	add	r3, r2
 80152ee:	4a09      	ldr	r2, [pc, #36]	; (8015314 <vPortFree+0xbc>)
 80152f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80152f2:	6938      	ldr	r0, [r7, #16]
 80152f4:	f000 f880 	bl	80153f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80152f8:	4b07      	ldr	r3, [pc, #28]	; (8015318 <vPortFree+0xc0>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	3301      	adds	r3, #1
 80152fe:	4a06      	ldr	r2, [pc, #24]	; (8015318 <vPortFree+0xc0>)
 8015300:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015302:	f7fe f9d9 	bl	80136b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015306:	bf00      	nop
 8015308:	3718      	adds	r7, #24
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	20007400 	.word	0x20007400
 8015314:	200073f0 	.word	0x200073f0
 8015318:	200073fc 	.word	0x200073fc

0801531c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801531c:	b480      	push	{r7}
 801531e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8015320:	4b03      	ldr	r3, [pc, #12]	; (8015330 <xPortGetFreeHeapSize+0x14>)
 8015322:	681b      	ldr	r3, [r3, #0]
}
 8015324:	4618      	mov	r0, r3
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr
 801532e:	bf00      	nop
 8015330:	200073f0 	.word	0x200073f0

08015334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015334:	b480      	push	{r7}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801533a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801533e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015340:	4b27      	ldr	r3, [pc, #156]	; (80153e0 <prvHeapInit+0xac>)
 8015342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f003 0307 	and.w	r3, r3, #7
 801534a:	2b00      	cmp	r3, #0
 801534c:	d00c      	beq.n	8015368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	3307      	adds	r3, #7
 8015352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f023 0307 	bic.w	r3, r3, #7
 801535a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	1ad3      	subs	r3, r2, r3
 8015362:	4a1f      	ldr	r2, [pc, #124]	; (80153e0 <prvHeapInit+0xac>)
 8015364:	4413      	add	r3, r2
 8015366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801536c:	4a1d      	ldr	r2, [pc, #116]	; (80153e4 <prvHeapInit+0xb0>)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015372:	4b1c      	ldr	r3, [pc, #112]	; (80153e4 <prvHeapInit+0xb0>)
 8015374:	2200      	movs	r2, #0
 8015376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	68ba      	ldr	r2, [r7, #8]
 801537c:	4413      	add	r3, r2
 801537e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015380:	2208      	movs	r2, #8
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	1a9b      	subs	r3, r3, r2
 8015386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f023 0307 	bic.w	r3, r3, #7
 801538e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	4a15      	ldr	r2, [pc, #84]	; (80153e8 <prvHeapInit+0xb4>)
 8015394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015396:	4b14      	ldr	r3, [pc, #80]	; (80153e8 <prvHeapInit+0xb4>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	2200      	movs	r2, #0
 801539c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801539e:	4b12      	ldr	r3, [pc, #72]	; (80153e8 <prvHeapInit+0xb4>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2200      	movs	r2, #0
 80153a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	1ad2      	subs	r2, r2, r3
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80153b4:	4b0c      	ldr	r3, [pc, #48]	; (80153e8 <prvHeapInit+0xb4>)
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	4a0a      	ldr	r2, [pc, #40]	; (80153ec <prvHeapInit+0xb8>)
 80153c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	685b      	ldr	r3, [r3, #4]
 80153c8:	4a09      	ldr	r2, [pc, #36]	; (80153f0 <prvHeapInit+0xbc>)
 80153ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80153cc:	4b09      	ldr	r3, [pc, #36]	; (80153f4 <prvHeapInit+0xc0>)
 80153ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80153d2:	601a      	str	r2, [r3, #0]
}
 80153d4:	bf00      	nop
 80153d6:	3714      	adds	r7, #20
 80153d8:	46bd      	mov	sp, r7
 80153da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153de:	4770      	bx	lr
 80153e0:	200023e4 	.word	0x200023e4
 80153e4:	200073e4 	.word	0x200073e4
 80153e8:	200073ec 	.word	0x200073ec
 80153ec:	200073f4 	.word	0x200073f4
 80153f0:	200073f0 	.word	0x200073f0
 80153f4:	20007400 	.word	0x20007400

080153f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015400:	4b28      	ldr	r3, [pc, #160]	; (80154a4 <prvInsertBlockIntoFreeList+0xac>)
 8015402:	60fb      	str	r3, [r7, #12]
 8015404:	e002      	b.n	801540c <prvInsertBlockIntoFreeList+0x14>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	60fb      	str	r3, [r7, #12]
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	687a      	ldr	r2, [r7, #4]
 8015412:	429a      	cmp	r2, r3
 8015414:	d8f7      	bhi.n	8015406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	68ba      	ldr	r2, [r7, #8]
 8015420:	4413      	add	r3, r2
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	429a      	cmp	r2, r3
 8015426:	d108      	bne.n	801543a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	685a      	ldr	r2, [r3, #4]
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	685b      	ldr	r3, [r3, #4]
 8015430:	441a      	add	r2, r3
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	441a      	add	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	429a      	cmp	r2, r3
 801544c:	d118      	bne.n	8015480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	4b15      	ldr	r3, [pc, #84]	; (80154a8 <prvInsertBlockIntoFreeList+0xb0>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	429a      	cmp	r2, r3
 8015458:	d00d      	beq.n	8015476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	685a      	ldr	r2, [r3, #4]
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	441a      	add	r2, r3
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	681a      	ldr	r2, [r3, #0]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	601a      	str	r2, [r3, #0]
 8015474:	e008      	b.n	8015488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015476:	4b0c      	ldr	r3, [pc, #48]	; (80154a8 <prvInsertBlockIntoFreeList+0xb0>)
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	e003      	b.n	8015488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015488:	68fa      	ldr	r2, [r7, #12]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	429a      	cmp	r2, r3
 801548e:	d002      	beq.n	8015496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015496:	bf00      	nop
 8015498:	3714      	adds	r7, #20
 801549a:	46bd      	mov	sp, r7
 801549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a0:	4770      	bx	lr
 80154a2:	bf00      	nop
 80154a4:	200073e4 	.word	0x200073e4
 80154a8:	200073ec 	.word	0x200073ec

080154ac <_ZdaPv>:
 80154ac:	f000 b814 	b.w	80154d8 <_ZdlPv>

080154b0 <__cxa_guard_acquire>:
 80154b0:	6803      	ldr	r3, [r0, #0]
 80154b2:	07db      	lsls	r3, r3, #31
 80154b4:	d406      	bmi.n	80154c4 <__cxa_guard_acquire+0x14>
 80154b6:	7843      	ldrb	r3, [r0, #1]
 80154b8:	b103      	cbz	r3, 80154bc <__cxa_guard_acquire+0xc>
 80154ba:	deff      	udf	#255	; 0xff
 80154bc:	2301      	movs	r3, #1
 80154be:	7043      	strb	r3, [r0, #1]
 80154c0:	4618      	mov	r0, r3
 80154c2:	4770      	bx	lr
 80154c4:	2000      	movs	r0, #0
 80154c6:	4770      	bx	lr

080154c8 <__cxa_guard_release>:
 80154c8:	2301      	movs	r3, #1
 80154ca:	6003      	str	r3, [r0, #0]
 80154cc:	4770      	bx	lr

080154ce <_Znaj>:
 80154ce:	f000 b805 	b.w	80154dc <_Znwj>

080154d2 <_ZSt25__throw_bad_function_callv>:
 80154d2:	b508      	push	{r3, lr}
 80154d4:	f000 fa44 	bl	8015960 <abort>

080154d8 <_ZdlPv>:
 80154d8:	f000 bb7c 	b.w	8015bd4 <free>

080154dc <_Znwj>:
 80154dc:	2801      	cmp	r0, #1
 80154de:	bf38      	it	cc
 80154e0:	2001      	movcc	r0, #1
 80154e2:	b510      	push	{r4, lr}
 80154e4:	4604      	mov	r4, r0
 80154e6:	4620      	mov	r0, r4
 80154e8:	f000 fb6c 	bl	8015bc4 <malloc>
 80154ec:	b930      	cbnz	r0, 80154fc <_Znwj+0x20>
 80154ee:	f000 f807 	bl	8015500 <_ZSt15get_new_handlerv>
 80154f2:	b908      	cbnz	r0, 80154f8 <_Znwj+0x1c>
 80154f4:	f000 fa34 	bl	8015960 <abort>
 80154f8:	4780      	blx	r0
 80154fa:	e7f4      	b.n	80154e6 <_Znwj+0xa>
 80154fc:	bd10      	pop	{r4, pc}
	...

08015500 <_ZSt15get_new_handlerv>:
 8015500:	4b02      	ldr	r3, [pc, #8]	; (801550c <_ZSt15get_new_handlerv+0xc>)
 8015502:	6818      	ldr	r0, [r3, #0]
 8015504:	f3bf 8f5b 	dmb	ish
 8015508:	4770      	bx	lr
 801550a:	bf00      	nop
 801550c:	20007404 	.word	0x20007404

08015510 <roundf>:
 8015510:	ee10 0a10 	vmov	r0, s0
 8015514:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015518:	3a7f      	subs	r2, #127	; 0x7f
 801551a:	2a16      	cmp	r2, #22
 801551c:	dc15      	bgt.n	801554a <roundf+0x3a>
 801551e:	2a00      	cmp	r2, #0
 8015520:	da08      	bge.n	8015534 <roundf+0x24>
 8015522:	3201      	adds	r2, #1
 8015524:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015528:	d101      	bne.n	801552e <roundf+0x1e>
 801552a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801552e:	ee00 3a10 	vmov	s0, r3
 8015532:	4770      	bx	lr
 8015534:	4907      	ldr	r1, [pc, #28]	; (8015554 <roundf+0x44>)
 8015536:	4111      	asrs	r1, r2
 8015538:	4208      	tst	r0, r1
 801553a:	d0fa      	beq.n	8015532 <roundf+0x22>
 801553c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015540:	4113      	asrs	r3, r2
 8015542:	4403      	add	r3, r0
 8015544:	ea23 0301 	bic.w	r3, r3, r1
 8015548:	e7f1      	b.n	801552e <roundf+0x1e>
 801554a:	2a80      	cmp	r2, #128	; 0x80
 801554c:	d1f1      	bne.n	8015532 <roundf+0x22>
 801554e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015552:	4770      	bx	lr
 8015554:	007fffff 	.word	0x007fffff

08015558 <log>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	ed2d 8b02 	vpush	{d8}
 801555e:	ec55 4b10 	vmov	r4, r5, d0
 8015562:	f000 f839 	bl	80155d8 <__ieee754_log>
 8015566:	4622      	mov	r2, r4
 8015568:	462b      	mov	r3, r5
 801556a:	4620      	mov	r0, r4
 801556c:	4629      	mov	r1, r5
 801556e:	eeb0 8a40 	vmov.f32	s16, s0
 8015572:	eef0 8a60 	vmov.f32	s17, s1
 8015576:	f7eb fad9 	bl	8000b2c <__aeabi_dcmpun>
 801557a:	b998      	cbnz	r0, 80155a4 <log+0x4c>
 801557c:	2200      	movs	r2, #0
 801557e:	2300      	movs	r3, #0
 8015580:	4620      	mov	r0, r4
 8015582:	4629      	mov	r1, r5
 8015584:	f7eb fac8 	bl	8000b18 <__aeabi_dcmpgt>
 8015588:	b960      	cbnz	r0, 80155a4 <log+0x4c>
 801558a:	2200      	movs	r2, #0
 801558c:	2300      	movs	r3, #0
 801558e:	4620      	mov	r0, r4
 8015590:	4629      	mov	r1, r5
 8015592:	f7eb fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8015596:	b160      	cbz	r0, 80155b2 <log+0x5a>
 8015598:	f000 f9f0 	bl	801597c <__errno>
 801559c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80155c8 <log+0x70>
 80155a0:	2322      	movs	r3, #34	; 0x22
 80155a2:	6003      	str	r3, [r0, #0]
 80155a4:	eeb0 0a48 	vmov.f32	s0, s16
 80155a8:	eef0 0a68 	vmov.f32	s1, s17
 80155ac:	ecbd 8b02 	vpop	{d8}
 80155b0:	bd38      	pop	{r3, r4, r5, pc}
 80155b2:	f000 f9e3 	bl	801597c <__errno>
 80155b6:	ecbd 8b02 	vpop	{d8}
 80155ba:	2321      	movs	r3, #33	; 0x21
 80155bc:	6003      	str	r3, [r0, #0]
 80155be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155c2:	4803      	ldr	r0, [pc, #12]	; (80155d0 <log+0x78>)
 80155c4:	f000 b9c4 	b.w	8015950 <nan>
 80155c8:	00000000 	.word	0x00000000
 80155cc:	fff00000 	.word	0xfff00000
 80155d0:	08018ce7 	.word	0x08018ce7
 80155d4:	00000000 	.word	0x00000000

080155d8 <__ieee754_log>:
 80155d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155dc:	ec51 0b10 	vmov	r0, r1, d0
 80155e0:	ed2d 8b04 	vpush	{d8-d9}
 80155e4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80155e8:	b083      	sub	sp, #12
 80155ea:	460d      	mov	r5, r1
 80155ec:	da29      	bge.n	8015642 <__ieee754_log+0x6a>
 80155ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155f2:	4303      	orrs	r3, r0
 80155f4:	ee10 2a10 	vmov	r2, s0
 80155f8:	d10c      	bne.n	8015614 <__ieee754_log+0x3c>
 80155fa:	49cf      	ldr	r1, [pc, #828]	; (8015938 <__ieee754_log+0x360>)
 80155fc:	2200      	movs	r2, #0
 80155fe:	2300      	movs	r3, #0
 8015600:	2000      	movs	r0, #0
 8015602:	f7eb f923 	bl	800084c <__aeabi_ddiv>
 8015606:	ec41 0b10 	vmov	d0, r0, r1
 801560a:	b003      	add	sp, #12
 801560c:	ecbd 8b04 	vpop	{d8-d9}
 8015610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015614:	2900      	cmp	r1, #0
 8015616:	da05      	bge.n	8015624 <__ieee754_log+0x4c>
 8015618:	460b      	mov	r3, r1
 801561a:	f7ea fe35 	bl	8000288 <__aeabi_dsub>
 801561e:	2200      	movs	r2, #0
 8015620:	2300      	movs	r3, #0
 8015622:	e7ee      	b.n	8015602 <__ieee754_log+0x2a>
 8015624:	4bc5      	ldr	r3, [pc, #788]	; (801593c <__ieee754_log+0x364>)
 8015626:	2200      	movs	r2, #0
 8015628:	f7ea ffe6 	bl	80005f8 <__aeabi_dmul>
 801562c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015630:	460d      	mov	r5, r1
 8015632:	4ac3      	ldr	r2, [pc, #780]	; (8015940 <__ieee754_log+0x368>)
 8015634:	4295      	cmp	r5, r2
 8015636:	dd06      	ble.n	8015646 <__ieee754_log+0x6e>
 8015638:	4602      	mov	r2, r0
 801563a:	460b      	mov	r3, r1
 801563c:	f7ea fe26 	bl	800028c <__adddf3>
 8015640:	e7e1      	b.n	8015606 <__ieee754_log+0x2e>
 8015642:	2300      	movs	r3, #0
 8015644:	e7f5      	b.n	8015632 <__ieee754_log+0x5a>
 8015646:	152c      	asrs	r4, r5, #20
 8015648:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801564c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015650:	441c      	add	r4, r3
 8015652:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8015656:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801565a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801565e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8015662:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8015666:	ea42 0105 	orr.w	r1, r2, r5
 801566a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801566e:	2200      	movs	r2, #0
 8015670:	4bb4      	ldr	r3, [pc, #720]	; (8015944 <__ieee754_log+0x36c>)
 8015672:	f7ea fe09 	bl	8000288 <__aeabi_dsub>
 8015676:	1cab      	adds	r3, r5, #2
 8015678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801567c:	2b02      	cmp	r3, #2
 801567e:	4682      	mov	sl, r0
 8015680:	468b      	mov	fp, r1
 8015682:	f04f 0200 	mov.w	r2, #0
 8015686:	dc53      	bgt.n	8015730 <__ieee754_log+0x158>
 8015688:	2300      	movs	r3, #0
 801568a:	f7eb fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 801568e:	b1d0      	cbz	r0, 80156c6 <__ieee754_log+0xee>
 8015690:	2c00      	cmp	r4, #0
 8015692:	f000 8122 	beq.w	80158da <__ieee754_log+0x302>
 8015696:	4620      	mov	r0, r4
 8015698:	f7ea ff44 	bl	8000524 <__aeabi_i2d>
 801569c:	a390      	add	r3, pc, #576	; (adr r3, 80158e0 <__ieee754_log+0x308>)
 801569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a2:	4606      	mov	r6, r0
 80156a4:	460f      	mov	r7, r1
 80156a6:	f7ea ffa7 	bl	80005f8 <__aeabi_dmul>
 80156aa:	a38f      	add	r3, pc, #572	; (adr r3, 80158e8 <__ieee754_log+0x310>)
 80156ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b0:	4604      	mov	r4, r0
 80156b2:	460d      	mov	r5, r1
 80156b4:	4630      	mov	r0, r6
 80156b6:	4639      	mov	r1, r7
 80156b8:	f7ea ff9e 	bl	80005f8 <__aeabi_dmul>
 80156bc:	4602      	mov	r2, r0
 80156be:	460b      	mov	r3, r1
 80156c0:	4620      	mov	r0, r4
 80156c2:	4629      	mov	r1, r5
 80156c4:	e7ba      	b.n	801563c <__ieee754_log+0x64>
 80156c6:	a38a      	add	r3, pc, #552	; (adr r3, 80158f0 <__ieee754_log+0x318>)
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	4650      	mov	r0, sl
 80156ce:	4659      	mov	r1, fp
 80156d0:	f7ea ff92 	bl	80005f8 <__aeabi_dmul>
 80156d4:	4602      	mov	r2, r0
 80156d6:	460b      	mov	r3, r1
 80156d8:	2000      	movs	r0, #0
 80156da:	499b      	ldr	r1, [pc, #620]	; (8015948 <__ieee754_log+0x370>)
 80156dc:	f7ea fdd4 	bl	8000288 <__aeabi_dsub>
 80156e0:	4652      	mov	r2, sl
 80156e2:	4606      	mov	r6, r0
 80156e4:	460f      	mov	r7, r1
 80156e6:	465b      	mov	r3, fp
 80156e8:	4650      	mov	r0, sl
 80156ea:	4659      	mov	r1, fp
 80156ec:	f7ea ff84 	bl	80005f8 <__aeabi_dmul>
 80156f0:	4602      	mov	r2, r0
 80156f2:	460b      	mov	r3, r1
 80156f4:	4630      	mov	r0, r6
 80156f6:	4639      	mov	r1, r7
 80156f8:	f7ea ff7e 	bl	80005f8 <__aeabi_dmul>
 80156fc:	4606      	mov	r6, r0
 80156fe:	460f      	mov	r7, r1
 8015700:	b914      	cbnz	r4, 8015708 <__ieee754_log+0x130>
 8015702:	4632      	mov	r2, r6
 8015704:	463b      	mov	r3, r7
 8015706:	e0a2      	b.n	801584e <__ieee754_log+0x276>
 8015708:	4620      	mov	r0, r4
 801570a:	f7ea ff0b 	bl	8000524 <__aeabi_i2d>
 801570e:	a374      	add	r3, pc, #464	; (adr r3, 80158e0 <__ieee754_log+0x308>)
 8015710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015714:	4680      	mov	r8, r0
 8015716:	4689      	mov	r9, r1
 8015718:	f7ea ff6e 	bl	80005f8 <__aeabi_dmul>
 801571c:	a372      	add	r3, pc, #456	; (adr r3, 80158e8 <__ieee754_log+0x310>)
 801571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015722:	4604      	mov	r4, r0
 8015724:	460d      	mov	r5, r1
 8015726:	4640      	mov	r0, r8
 8015728:	4649      	mov	r1, r9
 801572a:	f7ea ff65 	bl	80005f8 <__aeabi_dmul>
 801572e:	e0a7      	b.n	8015880 <__ieee754_log+0x2a8>
 8015730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015734:	f7ea fdaa 	bl	800028c <__adddf3>
 8015738:	4602      	mov	r2, r0
 801573a:	460b      	mov	r3, r1
 801573c:	4650      	mov	r0, sl
 801573e:	4659      	mov	r1, fp
 8015740:	f7eb f884 	bl	800084c <__aeabi_ddiv>
 8015744:	ec41 0b18 	vmov	d8, r0, r1
 8015748:	4620      	mov	r0, r4
 801574a:	f7ea feeb 	bl	8000524 <__aeabi_i2d>
 801574e:	ec53 2b18 	vmov	r2, r3, d8
 8015752:	ec41 0b19 	vmov	d9, r0, r1
 8015756:	ec51 0b18 	vmov	r0, r1, d8
 801575a:	f7ea ff4d 	bl	80005f8 <__aeabi_dmul>
 801575e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8015762:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8015766:	9301      	str	r3, [sp, #4]
 8015768:	4602      	mov	r2, r0
 801576a:	460b      	mov	r3, r1
 801576c:	4680      	mov	r8, r0
 801576e:	4689      	mov	r9, r1
 8015770:	f7ea ff42 	bl	80005f8 <__aeabi_dmul>
 8015774:	a360      	add	r3, pc, #384	; (adr r3, 80158f8 <__ieee754_log+0x320>)
 8015776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577a:	4606      	mov	r6, r0
 801577c:	460f      	mov	r7, r1
 801577e:	f7ea ff3b 	bl	80005f8 <__aeabi_dmul>
 8015782:	a35f      	add	r3, pc, #380	; (adr r3, 8015900 <__ieee754_log+0x328>)
 8015784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015788:	f7ea fd80 	bl	800028c <__adddf3>
 801578c:	4632      	mov	r2, r6
 801578e:	463b      	mov	r3, r7
 8015790:	f7ea ff32 	bl	80005f8 <__aeabi_dmul>
 8015794:	a35c      	add	r3, pc, #368	; (adr r3, 8015908 <__ieee754_log+0x330>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	f7ea fd77 	bl	800028c <__adddf3>
 801579e:	4632      	mov	r2, r6
 80157a0:	463b      	mov	r3, r7
 80157a2:	f7ea ff29 	bl	80005f8 <__aeabi_dmul>
 80157a6:	a35a      	add	r3, pc, #360	; (adr r3, 8015910 <__ieee754_log+0x338>)
 80157a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ac:	f7ea fd6e 	bl	800028c <__adddf3>
 80157b0:	4642      	mov	r2, r8
 80157b2:	464b      	mov	r3, r9
 80157b4:	f7ea ff20 	bl	80005f8 <__aeabi_dmul>
 80157b8:	a357      	add	r3, pc, #348	; (adr r3, 8015918 <__ieee754_log+0x340>)
 80157ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157be:	4680      	mov	r8, r0
 80157c0:	4689      	mov	r9, r1
 80157c2:	4630      	mov	r0, r6
 80157c4:	4639      	mov	r1, r7
 80157c6:	f7ea ff17 	bl	80005f8 <__aeabi_dmul>
 80157ca:	a355      	add	r3, pc, #340	; (adr r3, 8015920 <__ieee754_log+0x348>)
 80157cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d0:	f7ea fd5c 	bl	800028c <__adddf3>
 80157d4:	4632      	mov	r2, r6
 80157d6:	463b      	mov	r3, r7
 80157d8:	f7ea ff0e 	bl	80005f8 <__aeabi_dmul>
 80157dc:	a352      	add	r3, pc, #328	; (adr r3, 8015928 <__ieee754_log+0x350>)
 80157de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e2:	f7ea fd53 	bl	800028c <__adddf3>
 80157e6:	4632      	mov	r2, r6
 80157e8:	463b      	mov	r3, r7
 80157ea:	f7ea ff05 	bl	80005f8 <__aeabi_dmul>
 80157ee:	460b      	mov	r3, r1
 80157f0:	4602      	mov	r2, r0
 80157f2:	4649      	mov	r1, r9
 80157f4:	4640      	mov	r0, r8
 80157f6:	f7ea fd49 	bl	800028c <__adddf3>
 80157fa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80157fe:	9b01      	ldr	r3, [sp, #4]
 8015800:	3551      	adds	r5, #81	; 0x51
 8015802:	431d      	orrs	r5, r3
 8015804:	2d00      	cmp	r5, #0
 8015806:	4680      	mov	r8, r0
 8015808:	4689      	mov	r9, r1
 801580a:	dd48      	ble.n	801589e <__ieee754_log+0x2c6>
 801580c:	4b4e      	ldr	r3, [pc, #312]	; (8015948 <__ieee754_log+0x370>)
 801580e:	2200      	movs	r2, #0
 8015810:	4650      	mov	r0, sl
 8015812:	4659      	mov	r1, fp
 8015814:	f7ea fef0 	bl	80005f8 <__aeabi_dmul>
 8015818:	4652      	mov	r2, sl
 801581a:	465b      	mov	r3, fp
 801581c:	f7ea feec 	bl	80005f8 <__aeabi_dmul>
 8015820:	4602      	mov	r2, r0
 8015822:	460b      	mov	r3, r1
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	4640      	mov	r0, r8
 801582a:	4649      	mov	r1, r9
 801582c:	f7ea fd2e 	bl	800028c <__adddf3>
 8015830:	ec53 2b18 	vmov	r2, r3, d8
 8015834:	f7ea fee0 	bl	80005f8 <__aeabi_dmul>
 8015838:	4680      	mov	r8, r0
 801583a:	4689      	mov	r9, r1
 801583c:	b964      	cbnz	r4, 8015858 <__ieee754_log+0x280>
 801583e:	4602      	mov	r2, r0
 8015840:	460b      	mov	r3, r1
 8015842:	4630      	mov	r0, r6
 8015844:	4639      	mov	r1, r7
 8015846:	f7ea fd1f 	bl	8000288 <__aeabi_dsub>
 801584a:	4602      	mov	r2, r0
 801584c:	460b      	mov	r3, r1
 801584e:	4650      	mov	r0, sl
 8015850:	4659      	mov	r1, fp
 8015852:	f7ea fd19 	bl	8000288 <__aeabi_dsub>
 8015856:	e6d6      	b.n	8015606 <__ieee754_log+0x2e>
 8015858:	a321      	add	r3, pc, #132	; (adr r3, 80158e0 <__ieee754_log+0x308>)
 801585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801585e:	ec51 0b19 	vmov	r0, r1, d9
 8015862:	f7ea fec9 	bl	80005f8 <__aeabi_dmul>
 8015866:	a320      	add	r3, pc, #128	; (adr r3, 80158e8 <__ieee754_log+0x310>)
 8015868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801586c:	4604      	mov	r4, r0
 801586e:	460d      	mov	r5, r1
 8015870:	ec51 0b19 	vmov	r0, r1, d9
 8015874:	f7ea fec0 	bl	80005f8 <__aeabi_dmul>
 8015878:	4642      	mov	r2, r8
 801587a:	464b      	mov	r3, r9
 801587c:	f7ea fd06 	bl	800028c <__adddf3>
 8015880:	4602      	mov	r2, r0
 8015882:	460b      	mov	r3, r1
 8015884:	4630      	mov	r0, r6
 8015886:	4639      	mov	r1, r7
 8015888:	f7ea fcfe 	bl	8000288 <__aeabi_dsub>
 801588c:	4652      	mov	r2, sl
 801588e:	465b      	mov	r3, fp
 8015890:	f7ea fcfa 	bl	8000288 <__aeabi_dsub>
 8015894:	4602      	mov	r2, r0
 8015896:	460b      	mov	r3, r1
 8015898:	4620      	mov	r0, r4
 801589a:	4629      	mov	r1, r5
 801589c:	e7d9      	b.n	8015852 <__ieee754_log+0x27a>
 801589e:	4602      	mov	r2, r0
 80158a0:	460b      	mov	r3, r1
 80158a2:	4650      	mov	r0, sl
 80158a4:	4659      	mov	r1, fp
 80158a6:	f7ea fcef 	bl	8000288 <__aeabi_dsub>
 80158aa:	ec53 2b18 	vmov	r2, r3, d8
 80158ae:	f7ea fea3 	bl	80005f8 <__aeabi_dmul>
 80158b2:	4606      	mov	r6, r0
 80158b4:	460f      	mov	r7, r1
 80158b6:	2c00      	cmp	r4, #0
 80158b8:	f43f af23 	beq.w	8015702 <__ieee754_log+0x12a>
 80158bc:	a308      	add	r3, pc, #32	; (adr r3, 80158e0 <__ieee754_log+0x308>)
 80158be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c2:	ec51 0b19 	vmov	r0, r1, d9
 80158c6:	f7ea fe97 	bl	80005f8 <__aeabi_dmul>
 80158ca:	a307      	add	r3, pc, #28	; (adr r3, 80158e8 <__ieee754_log+0x310>)
 80158cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d0:	4604      	mov	r4, r0
 80158d2:	460d      	mov	r5, r1
 80158d4:	ec51 0b19 	vmov	r0, r1, d9
 80158d8:	e727      	b.n	801572a <__ieee754_log+0x152>
 80158da:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8015930 <__ieee754_log+0x358>
 80158de:	e694      	b.n	801560a <__ieee754_log+0x32>
 80158e0:	fee00000 	.word	0xfee00000
 80158e4:	3fe62e42 	.word	0x3fe62e42
 80158e8:	35793c76 	.word	0x35793c76
 80158ec:	3dea39ef 	.word	0x3dea39ef
 80158f0:	55555555 	.word	0x55555555
 80158f4:	3fd55555 	.word	0x3fd55555
 80158f8:	df3e5244 	.word	0xdf3e5244
 80158fc:	3fc2f112 	.word	0x3fc2f112
 8015900:	96cb03de 	.word	0x96cb03de
 8015904:	3fc74664 	.word	0x3fc74664
 8015908:	94229359 	.word	0x94229359
 801590c:	3fd24924 	.word	0x3fd24924
 8015910:	55555593 	.word	0x55555593
 8015914:	3fe55555 	.word	0x3fe55555
 8015918:	d078c69f 	.word	0xd078c69f
 801591c:	3fc39a09 	.word	0x3fc39a09
 8015920:	1d8e78af 	.word	0x1d8e78af
 8015924:	3fcc71c5 	.word	0x3fcc71c5
 8015928:	9997fa04 	.word	0x9997fa04
 801592c:	3fd99999 	.word	0x3fd99999
	...
 8015938:	c3500000 	.word	0xc3500000
 801593c:	43500000 	.word	0x43500000
 8015940:	7fefffff 	.word	0x7fefffff
 8015944:	3ff00000 	.word	0x3ff00000
 8015948:	3fe00000 	.word	0x3fe00000
 801594c:	00000000 	.word	0x00000000

08015950 <nan>:
 8015950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015958 <nan+0x8>
 8015954:	4770      	bx	lr
 8015956:	bf00      	nop
 8015958:	00000000 	.word	0x00000000
 801595c:	7ff80000 	.word	0x7ff80000

08015960 <abort>:
 8015960:	b508      	push	{r3, lr}
 8015962:	2006      	movs	r0, #6
 8015964:	f000 ff40 	bl	80167e8 <raise>
 8015968:	2001      	movs	r0, #1
 801596a:	f7f3 fed3 	bl	8009714 <_exit>

0801596e <atexit>:
 801596e:	2300      	movs	r3, #0
 8015970:	4601      	mov	r1, r0
 8015972:	461a      	mov	r2, r3
 8015974:	4618      	mov	r0, r3
 8015976:	f000 bfa9 	b.w	80168cc <__register_exitproc>
	...

0801597c <__errno>:
 801597c:	4b01      	ldr	r3, [pc, #4]	; (8015984 <__errno+0x8>)
 801597e:	6818      	ldr	r0, [r3, #0]
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop
 8015984:	20000040 	.word	0x20000040

08015988 <std>:
 8015988:	2300      	movs	r3, #0
 801598a:	b510      	push	{r4, lr}
 801598c:	4604      	mov	r4, r0
 801598e:	e9c0 3300 	strd	r3, r3, [r0]
 8015992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015996:	6083      	str	r3, [r0, #8]
 8015998:	8181      	strh	r1, [r0, #12]
 801599a:	6643      	str	r3, [r0, #100]	; 0x64
 801599c:	81c2      	strh	r2, [r0, #14]
 801599e:	6183      	str	r3, [r0, #24]
 80159a0:	4619      	mov	r1, r3
 80159a2:	2208      	movs	r2, #8
 80159a4:	305c      	adds	r0, #92	; 0x5c
 80159a6:	f000 f92b 	bl	8015c00 <memset>
 80159aa:	4b05      	ldr	r3, [pc, #20]	; (80159c0 <std+0x38>)
 80159ac:	6263      	str	r3, [r4, #36]	; 0x24
 80159ae:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <std+0x3c>)
 80159b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80159b2:	4b05      	ldr	r3, [pc, #20]	; (80159c8 <std+0x40>)
 80159b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80159b6:	4b05      	ldr	r3, [pc, #20]	; (80159cc <std+0x44>)
 80159b8:	6224      	str	r4, [r4, #32]
 80159ba:	6323      	str	r3, [r4, #48]	; 0x30
 80159bc:	bd10      	pop	{r4, pc}
 80159be:	bf00      	nop
 80159c0:	08016821 	.word	0x08016821
 80159c4:	08016843 	.word	0x08016843
 80159c8:	0801687b 	.word	0x0801687b
 80159cc:	0801689f 	.word	0x0801689f

080159d0 <_cleanup_r>:
 80159d0:	4901      	ldr	r1, [pc, #4]	; (80159d8 <_cleanup_r+0x8>)
 80159d2:	f000 b8af 	b.w	8015b34 <_fwalk_reent>
 80159d6:	bf00      	nop
 80159d8:	080177b1 	.word	0x080177b1

080159dc <__sfmoreglue>:
 80159dc:	b570      	push	{r4, r5, r6, lr}
 80159de:	2268      	movs	r2, #104	; 0x68
 80159e0:	1e4d      	subs	r5, r1, #1
 80159e2:	4355      	muls	r5, r2
 80159e4:	460e      	mov	r6, r1
 80159e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80159ea:	f000 f97d 	bl	8015ce8 <_malloc_r>
 80159ee:	4604      	mov	r4, r0
 80159f0:	b140      	cbz	r0, 8015a04 <__sfmoreglue+0x28>
 80159f2:	2100      	movs	r1, #0
 80159f4:	e9c0 1600 	strd	r1, r6, [r0]
 80159f8:	300c      	adds	r0, #12
 80159fa:	60a0      	str	r0, [r4, #8]
 80159fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015a00:	f000 f8fe 	bl	8015c00 <memset>
 8015a04:	4620      	mov	r0, r4
 8015a06:	bd70      	pop	{r4, r5, r6, pc}

08015a08 <__sfp_lock_acquire>:
 8015a08:	4801      	ldr	r0, [pc, #4]	; (8015a10 <__sfp_lock_acquire+0x8>)
 8015a0a:	f000 b8d8 	b.w	8015bbe <__retarget_lock_acquire_recursive>
 8015a0e:	bf00      	nop
 8015a10:	2000740a 	.word	0x2000740a

08015a14 <__sfp_lock_release>:
 8015a14:	4801      	ldr	r0, [pc, #4]	; (8015a1c <__sfp_lock_release+0x8>)
 8015a16:	f000 b8d4 	b.w	8015bc2 <__retarget_lock_release_recursive>
 8015a1a:	bf00      	nop
 8015a1c:	2000740a 	.word	0x2000740a

08015a20 <__sinit_lock_acquire>:
 8015a20:	4801      	ldr	r0, [pc, #4]	; (8015a28 <__sinit_lock_acquire+0x8>)
 8015a22:	f000 b8cc 	b.w	8015bbe <__retarget_lock_acquire_recursive>
 8015a26:	bf00      	nop
 8015a28:	2000740b 	.word	0x2000740b

08015a2c <__sinit_lock_release>:
 8015a2c:	4801      	ldr	r0, [pc, #4]	; (8015a34 <__sinit_lock_release+0x8>)
 8015a2e:	f000 b8c8 	b.w	8015bc2 <__retarget_lock_release_recursive>
 8015a32:	bf00      	nop
 8015a34:	2000740b 	.word	0x2000740b

08015a38 <__sinit>:
 8015a38:	b510      	push	{r4, lr}
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	f7ff fff0 	bl	8015a20 <__sinit_lock_acquire>
 8015a40:	69a3      	ldr	r3, [r4, #24]
 8015a42:	b11b      	cbz	r3, 8015a4c <__sinit+0x14>
 8015a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a48:	f7ff bff0 	b.w	8015a2c <__sinit_lock_release>
 8015a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015a50:	6523      	str	r3, [r4, #80]	; 0x50
 8015a52:	4b13      	ldr	r3, [pc, #76]	; (8015aa0 <__sinit+0x68>)
 8015a54:	4a13      	ldr	r2, [pc, #76]	; (8015aa4 <__sinit+0x6c>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8015a5a:	42a3      	cmp	r3, r4
 8015a5c:	bf04      	itt	eq
 8015a5e:	2301      	moveq	r3, #1
 8015a60:	61a3      	streq	r3, [r4, #24]
 8015a62:	4620      	mov	r0, r4
 8015a64:	f000 f820 	bl	8015aa8 <__sfp>
 8015a68:	6060      	str	r0, [r4, #4]
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f000 f81c 	bl	8015aa8 <__sfp>
 8015a70:	60a0      	str	r0, [r4, #8]
 8015a72:	4620      	mov	r0, r4
 8015a74:	f000 f818 	bl	8015aa8 <__sfp>
 8015a78:	2200      	movs	r2, #0
 8015a7a:	60e0      	str	r0, [r4, #12]
 8015a7c:	2104      	movs	r1, #4
 8015a7e:	6860      	ldr	r0, [r4, #4]
 8015a80:	f7ff ff82 	bl	8015988 <std>
 8015a84:	68a0      	ldr	r0, [r4, #8]
 8015a86:	2201      	movs	r2, #1
 8015a88:	2109      	movs	r1, #9
 8015a8a:	f7ff ff7d 	bl	8015988 <std>
 8015a8e:	68e0      	ldr	r0, [r4, #12]
 8015a90:	2202      	movs	r2, #2
 8015a92:	2112      	movs	r1, #18
 8015a94:	f7ff ff78 	bl	8015988 <std>
 8015a98:	2301      	movs	r3, #1
 8015a9a:	61a3      	str	r3, [r4, #24]
 8015a9c:	e7d2      	b.n	8015a44 <__sinit+0xc>
 8015a9e:	bf00      	nop
 8015aa0:	08018a88 	.word	0x08018a88
 8015aa4:	080159d1 	.word	0x080159d1

08015aa8 <__sfp>:
 8015aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aaa:	4607      	mov	r7, r0
 8015aac:	f7ff ffac 	bl	8015a08 <__sfp_lock_acquire>
 8015ab0:	4b1e      	ldr	r3, [pc, #120]	; (8015b2c <__sfp+0x84>)
 8015ab2:	681e      	ldr	r6, [r3, #0]
 8015ab4:	69b3      	ldr	r3, [r6, #24]
 8015ab6:	b913      	cbnz	r3, 8015abe <__sfp+0x16>
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f7ff ffbd 	bl	8015a38 <__sinit>
 8015abe:	3648      	adds	r6, #72	; 0x48
 8015ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015ac4:	3b01      	subs	r3, #1
 8015ac6:	d503      	bpl.n	8015ad0 <__sfp+0x28>
 8015ac8:	6833      	ldr	r3, [r6, #0]
 8015aca:	b30b      	cbz	r3, 8015b10 <__sfp+0x68>
 8015acc:	6836      	ldr	r6, [r6, #0]
 8015ace:	e7f7      	b.n	8015ac0 <__sfp+0x18>
 8015ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ad4:	b9d5      	cbnz	r5, 8015b0c <__sfp+0x64>
 8015ad6:	4b16      	ldr	r3, [pc, #88]	; (8015b30 <__sfp+0x88>)
 8015ad8:	60e3      	str	r3, [r4, #12]
 8015ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015ade:	6665      	str	r5, [r4, #100]	; 0x64
 8015ae0:	f000 f86c 	bl	8015bbc <__retarget_lock_init_recursive>
 8015ae4:	f7ff ff96 	bl	8015a14 <__sfp_lock_release>
 8015ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015af0:	6025      	str	r5, [r4, #0]
 8015af2:	61a5      	str	r5, [r4, #24]
 8015af4:	2208      	movs	r2, #8
 8015af6:	4629      	mov	r1, r5
 8015af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015afc:	f000 f880 	bl	8015c00 <memset>
 8015b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015b08:	4620      	mov	r0, r4
 8015b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b0c:	3468      	adds	r4, #104	; 0x68
 8015b0e:	e7d9      	b.n	8015ac4 <__sfp+0x1c>
 8015b10:	2104      	movs	r1, #4
 8015b12:	4638      	mov	r0, r7
 8015b14:	f7ff ff62 	bl	80159dc <__sfmoreglue>
 8015b18:	4604      	mov	r4, r0
 8015b1a:	6030      	str	r0, [r6, #0]
 8015b1c:	2800      	cmp	r0, #0
 8015b1e:	d1d5      	bne.n	8015acc <__sfp+0x24>
 8015b20:	f7ff ff78 	bl	8015a14 <__sfp_lock_release>
 8015b24:	230c      	movs	r3, #12
 8015b26:	603b      	str	r3, [r7, #0]
 8015b28:	e7ee      	b.n	8015b08 <__sfp+0x60>
 8015b2a:	bf00      	nop
 8015b2c:	08018a88 	.word	0x08018a88
 8015b30:	ffff0001 	.word	0xffff0001

08015b34 <_fwalk_reent>:
 8015b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b38:	4606      	mov	r6, r0
 8015b3a:	4688      	mov	r8, r1
 8015b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b40:	2700      	movs	r7, #0
 8015b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b46:	f1b9 0901 	subs.w	r9, r9, #1
 8015b4a:	d505      	bpl.n	8015b58 <_fwalk_reent+0x24>
 8015b4c:	6824      	ldr	r4, [r4, #0]
 8015b4e:	2c00      	cmp	r4, #0
 8015b50:	d1f7      	bne.n	8015b42 <_fwalk_reent+0xe>
 8015b52:	4638      	mov	r0, r7
 8015b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b58:	89ab      	ldrh	r3, [r5, #12]
 8015b5a:	2b01      	cmp	r3, #1
 8015b5c:	d907      	bls.n	8015b6e <_fwalk_reent+0x3a>
 8015b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b62:	3301      	adds	r3, #1
 8015b64:	d003      	beq.n	8015b6e <_fwalk_reent+0x3a>
 8015b66:	4629      	mov	r1, r5
 8015b68:	4630      	mov	r0, r6
 8015b6a:	47c0      	blx	r8
 8015b6c:	4307      	orrs	r7, r0
 8015b6e:	3568      	adds	r5, #104	; 0x68
 8015b70:	e7e9      	b.n	8015b46 <_fwalk_reent+0x12>
	...

08015b74 <__libc_init_array>:
 8015b74:	b570      	push	{r4, r5, r6, lr}
 8015b76:	4d0d      	ldr	r5, [pc, #52]	; (8015bac <__libc_init_array+0x38>)
 8015b78:	4c0d      	ldr	r4, [pc, #52]	; (8015bb0 <__libc_init_array+0x3c>)
 8015b7a:	1b64      	subs	r4, r4, r5
 8015b7c:	10a4      	asrs	r4, r4, #2
 8015b7e:	2600      	movs	r6, #0
 8015b80:	42a6      	cmp	r6, r4
 8015b82:	d109      	bne.n	8015b98 <__libc_init_array+0x24>
 8015b84:	4d0b      	ldr	r5, [pc, #44]	; (8015bb4 <__libc_init_array+0x40>)
 8015b86:	4c0c      	ldr	r4, [pc, #48]	; (8015bb8 <__libc_init_array+0x44>)
 8015b88:	f002 fd0e 	bl	80185a8 <_init>
 8015b8c:	1b64      	subs	r4, r4, r5
 8015b8e:	10a4      	asrs	r4, r4, #2
 8015b90:	2600      	movs	r6, #0
 8015b92:	42a6      	cmp	r6, r4
 8015b94:	d105      	bne.n	8015ba2 <__libc_init_array+0x2e>
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
 8015b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b9c:	4798      	blx	r3
 8015b9e:	3601      	adds	r6, #1
 8015ba0:	e7ee      	b.n	8015b80 <__libc_init_array+0xc>
 8015ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ba6:	4798      	blx	r3
 8015ba8:	3601      	adds	r6, #1
 8015baa:	e7f2      	b.n	8015b92 <__libc_init_array+0x1e>
 8015bac:	08018e0c 	.word	0x08018e0c
 8015bb0:	08018e0c 	.word	0x08018e0c
 8015bb4:	08018e0c 	.word	0x08018e0c
 8015bb8:	08018e30 	.word	0x08018e30

08015bbc <__retarget_lock_init_recursive>:
 8015bbc:	4770      	bx	lr

08015bbe <__retarget_lock_acquire_recursive>:
 8015bbe:	4770      	bx	lr

08015bc0 <__retarget_lock_release>:
 8015bc0:	4770      	bx	lr

08015bc2 <__retarget_lock_release_recursive>:
 8015bc2:	4770      	bx	lr

08015bc4 <malloc>:
 8015bc4:	4b02      	ldr	r3, [pc, #8]	; (8015bd0 <malloc+0xc>)
 8015bc6:	4601      	mov	r1, r0
 8015bc8:	6818      	ldr	r0, [r3, #0]
 8015bca:	f000 b88d 	b.w	8015ce8 <_malloc_r>
 8015bce:	bf00      	nop
 8015bd0:	20000040 	.word	0x20000040

08015bd4 <free>:
 8015bd4:	4b02      	ldr	r3, [pc, #8]	; (8015be0 <free+0xc>)
 8015bd6:	4601      	mov	r1, r0
 8015bd8:	6818      	ldr	r0, [r3, #0]
 8015bda:	f000 b819 	b.w	8015c10 <_free_r>
 8015bde:	bf00      	nop
 8015be0:	20000040 	.word	0x20000040

08015be4 <memcpy>:
 8015be4:	440a      	add	r2, r1
 8015be6:	4291      	cmp	r1, r2
 8015be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8015bec:	d100      	bne.n	8015bf0 <memcpy+0xc>
 8015bee:	4770      	bx	lr
 8015bf0:	b510      	push	{r4, lr}
 8015bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015bfa:	4291      	cmp	r1, r2
 8015bfc:	d1f9      	bne.n	8015bf2 <memcpy+0xe>
 8015bfe:	bd10      	pop	{r4, pc}

08015c00 <memset>:
 8015c00:	4402      	add	r2, r0
 8015c02:	4603      	mov	r3, r0
 8015c04:	4293      	cmp	r3, r2
 8015c06:	d100      	bne.n	8015c0a <memset+0xa>
 8015c08:	4770      	bx	lr
 8015c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8015c0e:	e7f9      	b.n	8015c04 <memset+0x4>

08015c10 <_free_r>:
 8015c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c12:	2900      	cmp	r1, #0
 8015c14:	d044      	beq.n	8015ca0 <_free_r+0x90>
 8015c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c1a:	9001      	str	r0, [sp, #4]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8015c22:	bfb8      	it	lt
 8015c24:	18e4      	addlt	r4, r4, r3
 8015c26:	f001 fe15 	bl	8017854 <__malloc_lock>
 8015c2a:	4a1e      	ldr	r2, [pc, #120]	; (8015ca4 <_free_r+0x94>)
 8015c2c:	9801      	ldr	r0, [sp, #4]
 8015c2e:	6813      	ldr	r3, [r2, #0]
 8015c30:	b933      	cbnz	r3, 8015c40 <_free_r+0x30>
 8015c32:	6063      	str	r3, [r4, #4]
 8015c34:	6014      	str	r4, [r2, #0]
 8015c36:	b003      	add	sp, #12
 8015c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c3c:	f001 be10 	b.w	8017860 <__malloc_unlock>
 8015c40:	42a3      	cmp	r3, r4
 8015c42:	d908      	bls.n	8015c56 <_free_r+0x46>
 8015c44:	6825      	ldr	r5, [r4, #0]
 8015c46:	1961      	adds	r1, r4, r5
 8015c48:	428b      	cmp	r3, r1
 8015c4a:	bf01      	itttt	eq
 8015c4c:	6819      	ldreq	r1, [r3, #0]
 8015c4e:	685b      	ldreq	r3, [r3, #4]
 8015c50:	1949      	addeq	r1, r1, r5
 8015c52:	6021      	streq	r1, [r4, #0]
 8015c54:	e7ed      	b.n	8015c32 <_free_r+0x22>
 8015c56:	461a      	mov	r2, r3
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	b10b      	cbz	r3, 8015c60 <_free_r+0x50>
 8015c5c:	42a3      	cmp	r3, r4
 8015c5e:	d9fa      	bls.n	8015c56 <_free_r+0x46>
 8015c60:	6811      	ldr	r1, [r2, #0]
 8015c62:	1855      	adds	r5, r2, r1
 8015c64:	42a5      	cmp	r5, r4
 8015c66:	d10b      	bne.n	8015c80 <_free_r+0x70>
 8015c68:	6824      	ldr	r4, [r4, #0]
 8015c6a:	4421      	add	r1, r4
 8015c6c:	1854      	adds	r4, r2, r1
 8015c6e:	42a3      	cmp	r3, r4
 8015c70:	6011      	str	r1, [r2, #0]
 8015c72:	d1e0      	bne.n	8015c36 <_free_r+0x26>
 8015c74:	681c      	ldr	r4, [r3, #0]
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	6053      	str	r3, [r2, #4]
 8015c7a:	4421      	add	r1, r4
 8015c7c:	6011      	str	r1, [r2, #0]
 8015c7e:	e7da      	b.n	8015c36 <_free_r+0x26>
 8015c80:	d902      	bls.n	8015c88 <_free_r+0x78>
 8015c82:	230c      	movs	r3, #12
 8015c84:	6003      	str	r3, [r0, #0]
 8015c86:	e7d6      	b.n	8015c36 <_free_r+0x26>
 8015c88:	6825      	ldr	r5, [r4, #0]
 8015c8a:	1961      	adds	r1, r4, r5
 8015c8c:	428b      	cmp	r3, r1
 8015c8e:	bf04      	itt	eq
 8015c90:	6819      	ldreq	r1, [r3, #0]
 8015c92:	685b      	ldreq	r3, [r3, #4]
 8015c94:	6063      	str	r3, [r4, #4]
 8015c96:	bf04      	itt	eq
 8015c98:	1949      	addeq	r1, r1, r5
 8015c9a:	6021      	streq	r1, [r4, #0]
 8015c9c:	6054      	str	r4, [r2, #4]
 8015c9e:	e7ca      	b.n	8015c36 <_free_r+0x26>
 8015ca0:	b003      	add	sp, #12
 8015ca2:	bd30      	pop	{r4, r5, pc}
 8015ca4:	2000740c 	.word	0x2000740c

08015ca8 <sbrk_aligned>:
 8015ca8:	b570      	push	{r4, r5, r6, lr}
 8015caa:	4e0e      	ldr	r6, [pc, #56]	; (8015ce4 <sbrk_aligned+0x3c>)
 8015cac:	460c      	mov	r4, r1
 8015cae:	6831      	ldr	r1, [r6, #0]
 8015cb0:	4605      	mov	r5, r0
 8015cb2:	b911      	cbnz	r1, 8015cba <sbrk_aligned+0x12>
 8015cb4:	f000 fd60 	bl	8016778 <_sbrk_r>
 8015cb8:	6030      	str	r0, [r6, #0]
 8015cba:	4621      	mov	r1, r4
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	f000 fd5b 	bl	8016778 <_sbrk_r>
 8015cc2:	1c43      	adds	r3, r0, #1
 8015cc4:	d00a      	beq.n	8015cdc <sbrk_aligned+0x34>
 8015cc6:	1cc4      	adds	r4, r0, #3
 8015cc8:	f024 0403 	bic.w	r4, r4, #3
 8015ccc:	42a0      	cmp	r0, r4
 8015cce:	d007      	beq.n	8015ce0 <sbrk_aligned+0x38>
 8015cd0:	1a21      	subs	r1, r4, r0
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	f000 fd50 	bl	8016778 <_sbrk_r>
 8015cd8:	3001      	adds	r0, #1
 8015cda:	d101      	bne.n	8015ce0 <sbrk_aligned+0x38>
 8015cdc:	f04f 34ff 	mov.w	r4, #4294967295
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	bd70      	pop	{r4, r5, r6, pc}
 8015ce4:	20007410 	.word	0x20007410

08015ce8 <_malloc_r>:
 8015ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cec:	1ccd      	adds	r5, r1, #3
 8015cee:	f025 0503 	bic.w	r5, r5, #3
 8015cf2:	3508      	adds	r5, #8
 8015cf4:	2d0c      	cmp	r5, #12
 8015cf6:	bf38      	it	cc
 8015cf8:	250c      	movcc	r5, #12
 8015cfa:	2d00      	cmp	r5, #0
 8015cfc:	4607      	mov	r7, r0
 8015cfe:	db01      	blt.n	8015d04 <_malloc_r+0x1c>
 8015d00:	42a9      	cmp	r1, r5
 8015d02:	d905      	bls.n	8015d10 <_malloc_r+0x28>
 8015d04:	230c      	movs	r3, #12
 8015d06:	603b      	str	r3, [r7, #0]
 8015d08:	2600      	movs	r6, #0
 8015d0a:	4630      	mov	r0, r6
 8015d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d10:	4e2e      	ldr	r6, [pc, #184]	; (8015dcc <_malloc_r+0xe4>)
 8015d12:	f001 fd9f 	bl	8017854 <__malloc_lock>
 8015d16:	6833      	ldr	r3, [r6, #0]
 8015d18:	461c      	mov	r4, r3
 8015d1a:	bb34      	cbnz	r4, 8015d6a <_malloc_r+0x82>
 8015d1c:	4629      	mov	r1, r5
 8015d1e:	4638      	mov	r0, r7
 8015d20:	f7ff ffc2 	bl	8015ca8 <sbrk_aligned>
 8015d24:	1c43      	adds	r3, r0, #1
 8015d26:	4604      	mov	r4, r0
 8015d28:	d14d      	bne.n	8015dc6 <_malloc_r+0xde>
 8015d2a:	6834      	ldr	r4, [r6, #0]
 8015d2c:	4626      	mov	r6, r4
 8015d2e:	2e00      	cmp	r6, #0
 8015d30:	d140      	bne.n	8015db4 <_malloc_r+0xcc>
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	4631      	mov	r1, r6
 8015d36:	4638      	mov	r0, r7
 8015d38:	eb04 0803 	add.w	r8, r4, r3
 8015d3c:	f000 fd1c 	bl	8016778 <_sbrk_r>
 8015d40:	4580      	cmp	r8, r0
 8015d42:	d13a      	bne.n	8015dba <_malloc_r+0xd2>
 8015d44:	6821      	ldr	r1, [r4, #0]
 8015d46:	3503      	adds	r5, #3
 8015d48:	1a6d      	subs	r5, r5, r1
 8015d4a:	f025 0503 	bic.w	r5, r5, #3
 8015d4e:	3508      	adds	r5, #8
 8015d50:	2d0c      	cmp	r5, #12
 8015d52:	bf38      	it	cc
 8015d54:	250c      	movcc	r5, #12
 8015d56:	4629      	mov	r1, r5
 8015d58:	4638      	mov	r0, r7
 8015d5a:	f7ff ffa5 	bl	8015ca8 <sbrk_aligned>
 8015d5e:	3001      	adds	r0, #1
 8015d60:	d02b      	beq.n	8015dba <_malloc_r+0xd2>
 8015d62:	6823      	ldr	r3, [r4, #0]
 8015d64:	442b      	add	r3, r5
 8015d66:	6023      	str	r3, [r4, #0]
 8015d68:	e00e      	b.n	8015d88 <_malloc_r+0xa0>
 8015d6a:	6822      	ldr	r2, [r4, #0]
 8015d6c:	1b52      	subs	r2, r2, r5
 8015d6e:	d41e      	bmi.n	8015dae <_malloc_r+0xc6>
 8015d70:	2a0b      	cmp	r2, #11
 8015d72:	d916      	bls.n	8015da2 <_malloc_r+0xba>
 8015d74:	1961      	adds	r1, r4, r5
 8015d76:	42a3      	cmp	r3, r4
 8015d78:	6025      	str	r5, [r4, #0]
 8015d7a:	bf18      	it	ne
 8015d7c:	6059      	strne	r1, [r3, #4]
 8015d7e:	6863      	ldr	r3, [r4, #4]
 8015d80:	bf08      	it	eq
 8015d82:	6031      	streq	r1, [r6, #0]
 8015d84:	5162      	str	r2, [r4, r5]
 8015d86:	604b      	str	r3, [r1, #4]
 8015d88:	4638      	mov	r0, r7
 8015d8a:	f104 060b 	add.w	r6, r4, #11
 8015d8e:	f001 fd67 	bl	8017860 <__malloc_unlock>
 8015d92:	f026 0607 	bic.w	r6, r6, #7
 8015d96:	1d23      	adds	r3, r4, #4
 8015d98:	1af2      	subs	r2, r6, r3
 8015d9a:	d0b6      	beq.n	8015d0a <_malloc_r+0x22>
 8015d9c:	1b9b      	subs	r3, r3, r6
 8015d9e:	50a3      	str	r3, [r4, r2]
 8015da0:	e7b3      	b.n	8015d0a <_malloc_r+0x22>
 8015da2:	6862      	ldr	r2, [r4, #4]
 8015da4:	42a3      	cmp	r3, r4
 8015da6:	bf0c      	ite	eq
 8015da8:	6032      	streq	r2, [r6, #0]
 8015daa:	605a      	strne	r2, [r3, #4]
 8015dac:	e7ec      	b.n	8015d88 <_malloc_r+0xa0>
 8015dae:	4623      	mov	r3, r4
 8015db0:	6864      	ldr	r4, [r4, #4]
 8015db2:	e7b2      	b.n	8015d1a <_malloc_r+0x32>
 8015db4:	4634      	mov	r4, r6
 8015db6:	6876      	ldr	r6, [r6, #4]
 8015db8:	e7b9      	b.n	8015d2e <_malloc_r+0x46>
 8015dba:	230c      	movs	r3, #12
 8015dbc:	603b      	str	r3, [r7, #0]
 8015dbe:	4638      	mov	r0, r7
 8015dc0:	f001 fd4e 	bl	8017860 <__malloc_unlock>
 8015dc4:	e7a1      	b.n	8015d0a <_malloc_r+0x22>
 8015dc6:	6025      	str	r5, [r4, #0]
 8015dc8:	e7de      	b.n	8015d88 <_malloc_r+0xa0>
 8015dca:	bf00      	nop
 8015dcc:	2000740c 	.word	0x2000740c

08015dd0 <__cvt>:
 8015dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd4:	ec55 4b10 	vmov	r4, r5, d0
 8015dd8:	2d00      	cmp	r5, #0
 8015dda:	460e      	mov	r6, r1
 8015ddc:	4619      	mov	r1, r3
 8015dde:	462b      	mov	r3, r5
 8015de0:	bfbb      	ittet	lt
 8015de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015de6:	461d      	movlt	r5, r3
 8015de8:	2300      	movge	r3, #0
 8015dea:	232d      	movlt	r3, #45	; 0x2d
 8015dec:	700b      	strb	r3, [r1, #0]
 8015dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015df4:	4691      	mov	r9, r2
 8015df6:	f023 0820 	bic.w	r8, r3, #32
 8015dfa:	bfbc      	itt	lt
 8015dfc:	4622      	movlt	r2, r4
 8015dfe:	4614      	movlt	r4, r2
 8015e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e04:	d005      	beq.n	8015e12 <__cvt+0x42>
 8015e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015e0a:	d100      	bne.n	8015e0e <__cvt+0x3e>
 8015e0c:	3601      	adds	r6, #1
 8015e0e:	2102      	movs	r1, #2
 8015e10:	e000      	b.n	8015e14 <__cvt+0x44>
 8015e12:	2103      	movs	r1, #3
 8015e14:	ab03      	add	r3, sp, #12
 8015e16:	9301      	str	r3, [sp, #4]
 8015e18:	ab02      	add	r3, sp, #8
 8015e1a:	9300      	str	r3, [sp, #0]
 8015e1c:	ec45 4b10 	vmov	d0, r4, r5
 8015e20:	4653      	mov	r3, sl
 8015e22:	4632      	mov	r2, r6
 8015e24:	f000 fe50 	bl	8016ac8 <_dtoa_r>
 8015e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015e2c:	4607      	mov	r7, r0
 8015e2e:	d102      	bne.n	8015e36 <__cvt+0x66>
 8015e30:	f019 0f01 	tst.w	r9, #1
 8015e34:	d022      	beq.n	8015e7c <__cvt+0xac>
 8015e36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e3a:	eb07 0906 	add.w	r9, r7, r6
 8015e3e:	d110      	bne.n	8015e62 <__cvt+0x92>
 8015e40:	783b      	ldrb	r3, [r7, #0]
 8015e42:	2b30      	cmp	r3, #48	; 0x30
 8015e44:	d10a      	bne.n	8015e5c <__cvt+0x8c>
 8015e46:	2200      	movs	r2, #0
 8015e48:	2300      	movs	r3, #0
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	4629      	mov	r1, r5
 8015e4e:	f7ea fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e52:	b918      	cbnz	r0, 8015e5c <__cvt+0x8c>
 8015e54:	f1c6 0601 	rsb	r6, r6, #1
 8015e58:	f8ca 6000 	str.w	r6, [sl]
 8015e5c:	f8da 3000 	ldr.w	r3, [sl]
 8015e60:	4499      	add	r9, r3
 8015e62:	2200      	movs	r2, #0
 8015e64:	2300      	movs	r3, #0
 8015e66:	4620      	mov	r0, r4
 8015e68:	4629      	mov	r1, r5
 8015e6a:	f7ea fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e6e:	b108      	cbz	r0, 8015e74 <__cvt+0xa4>
 8015e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8015e74:	2230      	movs	r2, #48	; 0x30
 8015e76:	9b03      	ldr	r3, [sp, #12]
 8015e78:	454b      	cmp	r3, r9
 8015e7a:	d307      	bcc.n	8015e8c <__cvt+0xbc>
 8015e7c:	9b03      	ldr	r3, [sp, #12]
 8015e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e80:	1bdb      	subs	r3, r3, r7
 8015e82:	4638      	mov	r0, r7
 8015e84:	6013      	str	r3, [r2, #0]
 8015e86:	b004      	add	sp, #16
 8015e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e8c:	1c59      	adds	r1, r3, #1
 8015e8e:	9103      	str	r1, [sp, #12]
 8015e90:	701a      	strb	r2, [r3, #0]
 8015e92:	e7f0      	b.n	8015e76 <__cvt+0xa6>

08015e94 <__exponent>:
 8015e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e96:	4603      	mov	r3, r0
 8015e98:	2900      	cmp	r1, #0
 8015e9a:	bfb8      	it	lt
 8015e9c:	4249      	neglt	r1, r1
 8015e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8015ea2:	bfb4      	ite	lt
 8015ea4:	222d      	movlt	r2, #45	; 0x2d
 8015ea6:	222b      	movge	r2, #43	; 0x2b
 8015ea8:	2909      	cmp	r1, #9
 8015eaa:	7042      	strb	r2, [r0, #1]
 8015eac:	dd2a      	ble.n	8015f04 <__exponent+0x70>
 8015eae:	f10d 0407 	add.w	r4, sp, #7
 8015eb2:	46a4      	mov	ip, r4
 8015eb4:	270a      	movs	r7, #10
 8015eb6:	46a6      	mov	lr, r4
 8015eb8:	460a      	mov	r2, r1
 8015eba:	fb91 f6f7 	sdiv	r6, r1, r7
 8015ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8015ec2:	3530      	adds	r5, #48	; 0x30
 8015ec4:	2a63      	cmp	r2, #99	; 0x63
 8015ec6:	f104 34ff 	add.w	r4, r4, #4294967295
 8015eca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015ece:	4631      	mov	r1, r6
 8015ed0:	dcf1      	bgt.n	8015eb6 <__exponent+0x22>
 8015ed2:	3130      	adds	r1, #48	; 0x30
 8015ed4:	f1ae 0502 	sub.w	r5, lr, #2
 8015ed8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015edc:	1c44      	adds	r4, r0, #1
 8015ede:	4629      	mov	r1, r5
 8015ee0:	4561      	cmp	r1, ip
 8015ee2:	d30a      	bcc.n	8015efa <__exponent+0x66>
 8015ee4:	f10d 0209 	add.w	r2, sp, #9
 8015ee8:	eba2 020e 	sub.w	r2, r2, lr
 8015eec:	4565      	cmp	r5, ip
 8015eee:	bf88      	it	hi
 8015ef0:	2200      	movhi	r2, #0
 8015ef2:	4413      	add	r3, r2
 8015ef4:	1a18      	subs	r0, r3, r0
 8015ef6:	b003      	add	sp, #12
 8015ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015efe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015f02:	e7ed      	b.n	8015ee0 <__exponent+0x4c>
 8015f04:	2330      	movs	r3, #48	; 0x30
 8015f06:	3130      	adds	r1, #48	; 0x30
 8015f08:	7083      	strb	r3, [r0, #2]
 8015f0a:	70c1      	strb	r1, [r0, #3]
 8015f0c:	1d03      	adds	r3, r0, #4
 8015f0e:	e7f1      	b.n	8015ef4 <__exponent+0x60>

08015f10 <_printf_float>:
 8015f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f14:	ed2d 8b02 	vpush	{d8}
 8015f18:	b08d      	sub	sp, #52	; 0x34
 8015f1a:	460c      	mov	r4, r1
 8015f1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015f20:	4616      	mov	r6, r2
 8015f22:	461f      	mov	r7, r3
 8015f24:	4605      	mov	r5, r0
 8015f26:	f001 fc7f 	bl	8017828 <_localeconv_r>
 8015f2a:	f8d0 a000 	ldr.w	sl, [r0]
 8015f2e:	4650      	mov	r0, sl
 8015f30:	f7ea f94e 	bl	80001d0 <strlen>
 8015f34:	2300      	movs	r3, #0
 8015f36:	930a      	str	r3, [sp, #40]	; 0x28
 8015f38:	6823      	ldr	r3, [r4, #0]
 8015f3a:	9305      	str	r3, [sp, #20]
 8015f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8015f40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015f44:	3307      	adds	r3, #7
 8015f46:	f023 0307 	bic.w	r3, r3, #7
 8015f4a:	f103 0208 	add.w	r2, r3, #8
 8015f4e:	f8c8 2000 	str.w	r2, [r8]
 8015f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015f5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015f5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015f62:	9307      	str	r3, [sp, #28]
 8015f64:	f8cd 8018 	str.w	r8, [sp, #24]
 8015f68:	ee08 0a10 	vmov	s16, r0
 8015f6c:	4b9f      	ldr	r3, [pc, #636]	; (80161ec <_printf_float+0x2dc>)
 8015f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f72:	f04f 32ff 	mov.w	r2, #4294967295
 8015f76:	f7ea fdd9 	bl	8000b2c <__aeabi_dcmpun>
 8015f7a:	bb88      	cbnz	r0, 8015fe0 <_printf_float+0xd0>
 8015f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f80:	4b9a      	ldr	r3, [pc, #616]	; (80161ec <_printf_float+0x2dc>)
 8015f82:	f04f 32ff 	mov.w	r2, #4294967295
 8015f86:	f7ea fdb3 	bl	8000af0 <__aeabi_dcmple>
 8015f8a:	bb48      	cbnz	r0, 8015fe0 <_printf_float+0xd0>
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	2300      	movs	r3, #0
 8015f90:	4640      	mov	r0, r8
 8015f92:	4649      	mov	r1, r9
 8015f94:	f7ea fda2 	bl	8000adc <__aeabi_dcmplt>
 8015f98:	b110      	cbz	r0, 8015fa0 <_printf_float+0x90>
 8015f9a:	232d      	movs	r3, #45	; 0x2d
 8015f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fa0:	4b93      	ldr	r3, [pc, #588]	; (80161f0 <_printf_float+0x2e0>)
 8015fa2:	4894      	ldr	r0, [pc, #592]	; (80161f4 <_printf_float+0x2e4>)
 8015fa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015fa8:	bf94      	ite	ls
 8015faa:	4698      	movls	r8, r3
 8015fac:	4680      	movhi	r8, r0
 8015fae:	2303      	movs	r3, #3
 8015fb0:	6123      	str	r3, [r4, #16]
 8015fb2:	9b05      	ldr	r3, [sp, #20]
 8015fb4:	f023 0204 	bic.w	r2, r3, #4
 8015fb8:	6022      	str	r2, [r4, #0]
 8015fba:	f04f 0900 	mov.w	r9, #0
 8015fbe:	9700      	str	r7, [sp, #0]
 8015fc0:	4633      	mov	r3, r6
 8015fc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8015fc4:	4621      	mov	r1, r4
 8015fc6:	4628      	mov	r0, r5
 8015fc8:	f000 f9d8 	bl	801637c <_printf_common>
 8015fcc:	3001      	adds	r0, #1
 8015fce:	f040 8090 	bne.w	80160f2 <_printf_float+0x1e2>
 8015fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8015fd6:	b00d      	add	sp, #52	; 0x34
 8015fd8:	ecbd 8b02 	vpop	{d8}
 8015fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe0:	4642      	mov	r2, r8
 8015fe2:	464b      	mov	r3, r9
 8015fe4:	4640      	mov	r0, r8
 8015fe6:	4649      	mov	r1, r9
 8015fe8:	f7ea fda0 	bl	8000b2c <__aeabi_dcmpun>
 8015fec:	b140      	cbz	r0, 8016000 <_printf_float+0xf0>
 8015fee:	464b      	mov	r3, r9
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	bfbc      	itt	lt
 8015ff4:	232d      	movlt	r3, #45	; 0x2d
 8015ff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015ffa:	487f      	ldr	r0, [pc, #508]	; (80161f8 <_printf_float+0x2e8>)
 8015ffc:	4b7f      	ldr	r3, [pc, #508]	; (80161fc <_printf_float+0x2ec>)
 8015ffe:	e7d1      	b.n	8015fa4 <_printf_float+0x94>
 8016000:	6863      	ldr	r3, [r4, #4]
 8016002:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016006:	9206      	str	r2, [sp, #24]
 8016008:	1c5a      	adds	r2, r3, #1
 801600a:	d13f      	bne.n	801608c <_printf_float+0x17c>
 801600c:	2306      	movs	r3, #6
 801600e:	6063      	str	r3, [r4, #4]
 8016010:	9b05      	ldr	r3, [sp, #20]
 8016012:	6861      	ldr	r1, [r4, #4]
 8016014:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016018:	2300      	movs	r3, #0
 801601a:	9303      	str	r3, [sp, #12]
 801601c:	ab0a      	add	r3, sp, #40	; 0x28
 801601e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016022:	ab09      	add	r3, sp, #36	; 0x24
 8016024:	ec49 8b10 	vmov	d0, r8, r9
 8016028:	9300      	str	r3, [sp, #0]
 801602a:	6022      	str	r2, [r4, #0]
 801602c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016030:	4628      	mov	r0, r5
 8016032:	f7ff fecd 	bl	8015dd0 <__cvt>
 8016036:	9b06      	ldr	r3, [sp, #24]
 8016038:	9909      	ldr	r1, [sp, #36]	; 0x24
 801603a:	2b47      	cmp	r3, #71	; 0x47
 801603c:	4680      	mov	r8, r0
 801603e:	d108      	bne.n	8016052 <_printf_float+0x142>
 8016040:	1cc8      	adds	r0, r1, #3
 8016042:	db02      	blt.n	801604a <_printf_float+0x13a>
 8016044:	6863      	ldr	r3, [r4, #4]
 8016046:	4299      	cmp	r1, r3
 8016048:	dd41      	ble.n	80160ce <_printf_float+0x1be>
 801604a:	f1ab 0b02 	sub.w	fp, fp, #2
 801604e:	fa5f fb8b 	uxtb.w	fp, fp
 8016052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016056:	d820      	bhi.n	801609a <_printf_float+0x18a>
 8016058:	3901      	subs	r1, #1
 801605a:	465a      	mov	r2, fp
 801605c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016060:	9109      	str	r1, [sp, #36]	; 0x24
 8016062:	f7ff ff17 	bl	8015e94 <__exponent>
 8016066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016068:	1813      	adds	r3, r2, r0
 801606a:	2a01      	cmp	r2, #1
 801606c:	4681      	mov	r9, r0
 801606e:	6123      	str	r3, [r4, #16]
 8016070:	dc02      	bgt.n	8016078 <_printf_float+0x168>
 8016072:	6822      	ldr	r2, [r4, #0]
 8016074:	07d2      	lsls	r2, r2, #31
 8016076:	d501      	bpl.n	801607c <_printf_float+0x16c>
 8016078:	3301      	adds	r3, #1
 801607a:	6123      	str	r3, [r4, #16]
 801607c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016080:	2b00      	cmp	r3, #0
 8016082:	d09c      	beq.n	8015fbe <_printf_float+0xae>
 8016084:	232d      	movs	r3, #45	; 0x2d
 8016086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801608a:	e798      	b.n	8015fbe <_printf_float+0xae>
 801608c:	9a06      	ldr	r2, [sp, #24]
 801608e:	2a47      	cmp	r2, #71	; 0x47
 8016090:	d1be      	bne.n	8016010 <_printf_float+0x100>
 8016092:	2b00      	cmp	r3, #0
 8016094:	d1bc      	bne.n	8016010 <_printf_float+0x100>
 8016096:	2301      	movs	r3, #1
 8016098:	e7b9      	b.n	801600e <_printf_float+0xfe>
 801609a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801609e:	d118      	bne.n	80160d2 <_printf_float+0x1c2>
 80160a0:	2900      	cmp	r1, #0
 80160a2:	6863      	ldr	r3, [r4, #4]
 80160a4:	dd0b      	ble.n	80160be <_printf_float+0x1ae>
 80160a6:	6121      	str	r1, [r4, #16]
 80160a8:	b913      	cbnz	r3, 80160b0 <_printf_float+0x1a0>
 80160aa:	6822      	ldr	r2, [r4, #0]
 80160ac:	07d0      	lsls	r0, r2, #31
 80160ae:	d502      	bpl.n	80160b6 <_printf_float+0x1a6>
 80160b0:	3301      	adds	r3, #1
 80160b2:	440b      	add	r3, r1
 80160b4:	6123      	str	r3, [r4, #16]
 80160b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80160b8:	f04f 0900 	mov.w	r9, #0
 80160bc:	e7de      	b.n	801607c <_printf_float+0x16c>
 80160be:	b913      	cbnz	r3, 80160c6 <_printf_float+0x1b6>
 80160c0:	6822      	ldr	r2, [r4, #0]
 80160c2:	07d2      	lsls	r2, r2, #31
 80160c4:	d501      	bpl.n	80160ca <_printf_float+0x1ba>
 80160c6:	3302      	adds	r3, #2
 80160c8:	e7f4      	b.n	80160b4 <_printf_float+0x1a4>
 80160ca:	2301      	movs	r3, #1
 80160cc:	e7f2      	b.n	80160b4 <_printf_float+0x1a4>
 80160ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80160d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160d4:	4299      	cmp	r1, r3
 80160d6:	db05      	blt.n	80160e4 <_printf_float+0x1d4>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	6121      	str	r1, [r4, #16]
 80160dc:	07d8      	lsls	r0, r3, #31
 80160de:	d5ea      	bpl.n	80160b6 <_printf_float+0x1a6>
 80160e0:	1c4b      	adds	r3, r1, #1
 80160e2:	e7e7      	b.n	80160b4 <_printf_float+0x1a4>
 80160e4:	2900      	cmp	r1, #0
 80160e6:	bfd4      	ite	le
 80160e8:	f1c1 0202 	rsble	r2, r1, #2
 80160ec:	2201      	movgt	r2, #1
 80160ee:	4413      	add	r3, r2
 80160f0:	e7e0      	b.n	80160b4 <_printf_float+0x1a4>
 80160f2:	6823      	ldr	r3, [r4, #0]
 80160f4:	055a      	lsls	r2, r3, #21
 80160f6:	d407      	bmi.n	8016108 <_printf_float+0x1f8>
 80160f8:	6923      	ldr	r3, [r4, #16]
 80160fa:	4642      	mov	r2, r8
 80160fc:	4631      	mov	r1, r6
 80160fe:	4628      	mov	r0, r5
 8016100:	47b8      	blx	r7
 8016102:	3001      	adds	r0, #1
 8016104:	d12c      	bne.n	8016160 <_printf_float+0x250>
 8016106:	e764      	b.n	8015fd2 <_printf_float+0xc2>
 8016108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801610c:	f240 80e0 	bls.w	80162d0 <_printf_float+0x3c0>
 8016110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016114:	2200      	movs	r2, #0
 8016116:	2300      	movs	r3, #0
 8016118:	f7ea fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801611c:	2800      	cmp	r0, #0
 801611e:	d034      	beq.n	801618a <_printf_float+0x27a>
 8016120:	4a37      	ldr	r2, [pc, #220]	; (8016200 <_printf_float+0x2f0>)
 8016122:	2301      	movs	r3, #1
 8016124:	4631      	mov	r1, r6
 8016126:	4628      	mov	r0, r5
 8016128:	47b8      	blx	r7
 801612a:	3001      	adds	r0, #1
 801612c:	f43f af51 	beq.w	8015fd2 <_printf_float+0xc2>
 8016130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016134:	429a      	cmp	r2, r3
 8016136:	db02      	blt.n	801613e <_printf_float+0x22e>
 8016138:	6823      	ldr	r3, [r4, #0]
 801613a:	07d8      	lsls	r0, r3, #31
 801613c:	d510      	bpl.n	8016160 <_printf_float+0x250>
 801613e:	ee18 3a10 	vmov	r3, s16
 8016142:	4652      	mov	r2, sl
 8016144:	4631      	mov	r1, r6
 8016146:	4628      	mov	r0, r5
 8016148:	47b8      	blx	r7
 801614a:	3001      	adds	r0, #1
 801614c:	f43f af41 	beq.w	8015fd2 <_printf_float+0xc2>
 8016150:	f04f 0800 	mov.w	r8, #0
 8016154:	f104 091a 	add.w	r9, r4, #26
 8016158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801615a:	3b01      	subs	r3, #1
 801615c:	4543      	cmp	r3, r8
 801615e:	dc09      	bgt.n	8016174 <_printf_float+0x264>
 8016160:	6823      	ldr	r3, [r4, #0]
 8016162:	079b      	lsls	r3, r3, #30
 8016164:	f100 8105 	bmi.w	8016372 <_printf_float+0x462>
 8016168:	68e0      	ldr	r0, [r4, #12]
 801616a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801616c:	4298      	cmp	r0, r3
 801616e:	bfb8      	it	lt
 8016170:	4618      	movlt	r0, r3
 8016172:	e730      	b.n	8015fd6 <_printf_float+0xc6>
 8016174:	2301      	movs	r3, #1
 8016176:	464a      	mov	r2, r9
 8016178:	4631      	mov	r1, r6
 801617a:	4628      	mov	r0, r5
 801617c:	47b8      	blx	r7
 801617e:	3001      	adds	r0, #1
 8016180:	f43f af27 	beq.w	8015fd2 <_printf_float+0xc2>
 8016184:	f108 0801 	add.w	r8, r8, #1
 8016188:	e7e6      	b.n	8016158 <_printf_float+0x248>
 801618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801618c:	2b00      	cmp	r3, #0
 801618e:	dc39      	bgt.n	8016204 <_printf_float+0x2f4>
 8016190:	4a1b      	ldr	r2, [pc, #108]	; (8016200 <_printf_float+0x2f0>)
 8016192:	2301      	movs	r3, #1
 8016194:	4631      	mov	r1, r6
 8016196:	4628      	mov	r0, r5
 8016198:	47b8      	blx	r7
 801619a:	3001      	adds	r0, #1
 801619c:	f43f af19 	beq.w	8015fd2 <_printf_float+0xc2>
 80161a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80161a4:	4313      	orrs	r3, r2
 80161a6:	d102      	bne.n	80161ae <_printf_float+0x29e>
 80161a8:	6823      	ldr	r3, [r4, #0]
 80161aa:	07d9      	lsls	r1, r3, #31
 80161ac:	d5d8      	bpl.n	8016160 <_printf_float+0x250>
 80161ae:	ee18 3a10 	vmov	r3, s16
 80161b2:	4652      	mov	r2, sl
 80161b4:	4631      	mov	r1, r6
 80161b6:	4628      	mov	r0, r5
 80161b8:	47b8      	blx	r7
 80161ba:	3001      	adds	r0, #1
 80161bc:	f43f af09 	beq.w	8015fd2 <_printf_float+0xc2>
 80161c0:	f04f 0900 	mov.w	r9, #0
 80161c4:	f104 0a1a 	add.w	sl, r4, #26
 80161c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ca:	425b      	negs	r3, r3
 80161cc:	454b      	cmp	r3, r9
 80161ce:	dc01      	bgt.n	80161d4 <_printf_float+0x2c4>
 80161d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d2:	e792      	b.n	80160fa <_printf_float+0x1ea>
 80161d4:	2301      	movs	r3, #1
 80161d6:	4652      	mov	r2, sl
 80161d8:	4631      	mov	r1, r6
 80161da:	4628      	mov	r0, r5
 80161dc:	47b8      	blx	r7
 80161de:	3001      	adds	r0, #1
 80161e0:	f43f aef7 	beq.w	8015fd2 <_printf_float+0xc2>
 80161e4:	f109 0901 	add.w	r9, r9, #1
 80161e8:	e7ee      	b.n	80161c8 <_printf_float+0x2b8>
 80161ea:	bf00      	nop
 80161ec:	7fefffff 	.word	0x7fefffff
 80161f0:	08018a8c 	.word	0x08018a8c
 80161f4:	08018a90 	.word	0x08018a90
 80161f8:	08018a98 	.word	0x08018a98
 80161fc:	08018a94 	.word	0x08018a94
 8016200:	08018a9c 	.word	0x08018a9c
 8016204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016208:	429a      	cmp	r2, r3
 801620a:	bfa8      	it	ge
 801620c:	461a      	movge	r2, r3
 801620e:	2a00      	cmp	r2, #0
 8016210:	4691      	mov	r9, r2
 8016212:	dc37      	bgt.n	8016284 <_printf_float+0x374>
 8016214:	f04f 0b00 	mov.w	fp, #0
 8016218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801621c:	f104 021a 	add.w	r2, r4, #26
 8016220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016222:	9305      	str	r3, [sp, #20]
 8016224:	eba3 0309 	sub.w	r3, r3, r9
 8016228:	455b      	cmp	r3, fp
 801622a:	dc33      	bgt.n	8016294 <_printf_float+0x384>
 801622c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016230:	429a      	cmp	r2, r3
 8016232:	db3b      	blt.n	80162ac <_printf_float+0x39c>
 8016234:	6823      	ldr	r3, [r4, #0]
 8016236:	07da      	lsls	r2, r3, #31
 8016238:	d438      	bmi.n	80162ac <_printf_float+0x39c>
 801623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801623c:	9a05      	ldr	r2, [sp, #20]
 801623e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016240:	1a9a      	subs	r2, r3, r2
 8016242:	eba3 0901 	sub.w	r9, r3, r1
 8016246:	4591      	cmp	r9, r2
 8016248:	bfa8      	it	ge
 801624a:	4691      	movge	r9, r2
 801624c:	f1b9 0f00 	cmp.w	r9, #0
 8016250:	dc35      	bgt.n	80162be <_printf_float+0x3ae>
 8016252:	f04f 0800 	mov.w	r8, #0
 8016256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801625a:	f104 0a1a 	add.w	sl, r4, #26
 801625e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016262:	1a9b      	subs	r3, r3, r2
 8016264:	eba3 0309 	sub.w	r3, r3, r9
 8016268:	4543      	cmp	r3, r8
 801626a:	f77f af79 	ble.w	8016160 <_printf_float+0x250>
 801626e:	2301      	movs	r3, #1
 8016270:	4652      	mov	r2, sl
 8016272:	4631      	mov	r1, r6
 8016274:	4628      	mov	r0, r5
 8016276:	47b8      	blx	r7
 8016278:	3001      	adds	r0, #1
 801627a:	f43f aeaa 	beq.w	8015fd2 <_printf_float+0xc2>
 801627e:	f108 0801 	add.w	r8, r8, #1
 8016282:	e7ec      	b.n	801625e <_printf_float+0x34e>
 8016284:	4613      	mov	r3, r2
 8016286:	4631      	mov	r1, r6
 8016288:	4642      	mov	r2, r8
 801628a:	4628      	mov	r0, r5
 801628c:	47b8      	blx	r7
 801628e:	3001      	adds	r0, #1
 8016290:	d1c0      	bne.n	8016214 <_printf_float+0x304>
 8016292:	e69e      	b.n	8015fd2 <_printf_float+0xc2>
 8016294:	2301      	movs	r3, #1
 8016296:	4631      	mov	r1, r6
 8016298:	4628      	mov	r0, r5
 801629a:	9205      	str	r2, [sp, #20]
 801629c:	47b8      	blx	r7
 801629e:	3001      	adds	r0, #1
 80162a0:	f43f ae97 	beq.w	8015fd2 <_printf_float+0xc2>
 80162a4:	9a05      	ldr	r2, [sp, #20]
 80162a6:	f10b 0b01 	add.w	fp, fp, #1
 80162aa:	e7b9      	b.n	8016220 <_printf_float+0x310>
 80162ac:	ee18 3a10 	vmov	r3, s16
 80162b0:	4652      	mov	r2, sl
 80162b2:	4631      	mov	r1, r6
 80162b4:	4628      	mov	r0, r5
 80162b6:	47b8      	blx	r7
 80162b8:	3001      	adds	r0, #1
 80162ba:	d1be      	bne.n	801623a <_printf_float+0x32a>
 80162bc:	e689      	b.n	8015fd2 <_printf_float+0xc2>
 80162be:	9a05      	ldr	r2, [sp, #20]
 80162c0:	464b      	mov	r3, r9
 80162c2:	4442      	add	r2, r8
 80162c4:	4631      	mov	r1, r6
 80162c6:	4628      	mov	r0, r5
 80162c8:	47b8      	blx	r7
 80162ca:	3001      	adds	r0, #1
 80162cc:	d1c1      	bne.n	8016252 <_printf_float+0x342>
 80162ce:	e680      	b.n	8015fd2 <_printf_float+0xc2>
 80162d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162d2:	2a01      	cmp	r2, #1
 80162d4:	dc01      	bgt.n	80162da <_printf_float+0x3ca>
 80162d6:	07db      	lsls	r3, r3, #31
 80162d8:	d538      	bpl.n	801634c <_printf_float+0x43c>
 80162da:	2301      	movs	r3, #1
 80162dc:	4642      	mov	r2, r8
 80162de:	4631      	mov	r1, r6
 80162e0:	4628      	mov	r0, r5
 80162e2:	47b8      	blx	r7
 80162e4:	3001      	adds	r0, #1
 80162e6:	f43f ae74 	beq.w	8015fd2 <_printf_float+0xc2>
 80162ea:	ee18 3a10 	vmov	r3, s16
 80162ee:	4652      	mov	r2, sl
 80162f0:	4631      	mov	r1, r6
 80162f2:	4628      	mov	r0, r5
 80162f4:	47b8      	blx	r7
 80162f6:	3001      	adds	r0, #1
 80162f8:	f43f ae6b 	beq.w	8015fd2 <_printf_float+0xc2>
 80162fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016300:	2200      	movs	r2, #0
 8016302:	2300      	movs	r3, #0
 8016304:	f7ea fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8016308:	b9d8      	cbnz	r0, 8016342 <_printf_float+0x432>
 801630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801630c:	f108 0201 	add.w	r2, r8, #1
 8016310:	3b01      	subs	r3, #1
 8016312:	4631      	mov	r1, r6
 8016314:	4628      	mov	r0, r5
 8016316:	47b8      	blx	r7
 8016318:	3001      	adds	r0, #1
 801631a:	d10e      	bne.n	801633a <_printf_float+0x42a>
 801631c:	e659      	b.n	8015fd2 <_printf_float+0xc2>
 801631e:	2301      	movs	r3, #1
 8016320:	4652      	mov	r2, sl
 8016322:	4631      	mov	r1, r6
 8016324:	4628      	mov	r0, r5
 8016326:	47b8      	blx	r7
 8016328:	3001      	adds	r0, #1
 801632a:	f43f ae52 	beq.w	8015fd2 <_printf_float+0xc2>
 801632e:	f108 0801 	add.w	r8, r8, #1
 8016332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016334:	3b01      	subs	r3, #1
 8016336:	4543      	cmp	r3, r8
 8016338:	dcf1      	bgt.n	801631e <_printf_float+0x40e>
 801633a:	464b      	mov	r3, r9
 801633c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016340:	e6dc      	b.n	80160fc <_printf_float+0x1ec>
 8016342:	f04f 0800 	mov.w	r8, #0
 8016346:	f104 0a1a 	add.w	sl, r4, #26
 801634a:	e7f2      	b.n	8016332 <_printf_float+0x422>
 801634c:	2301      	movs	r3, #1
 801634e:	4642      	mov	r2, r8
 8016350:	e7df      	b.n	8016312 <_printf_float+0x402>
 8016352:	2301      	movs	r3, #1
 8016354:	464a      	mov	r2, r9
 8016356:	4631      	mov	r1, r6
 8016358:	4628      	mov	r0, r5
 801635a:	47b8      	blx	r7
 801635c:	3001      	adds	r0, #1
 801635e:	f43f ae38 	beq.w	8015fd2 <_printf_float+0xc2>
 8016362:	f108 0801 	add.w	r8, r8, #1
 8016366:	68e3      	ldr	r3, [r4, #12]
 8016368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801636a:	1a5b      	subs	r3, r3, r1
 801636c:	4543      	cmp	r3, r8
 801636e:	dcf0      	bgt.n	8016352 <_printf_float+0x442>
 8016370:	e6fa      	b.n	8016168 <_printf_float+0x258>
 8016372:	f04f 0800 	mov.w	r8, #0
 8016376:	f104 0919 	add.w	r9, r4, #25
 801637a:	e7f4      	b.n	8016366 <_printf_float+0x456>

0801637c <_printf_common>:
 801637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016380:	4616      	mov	r6, r2
 8016382:	4699      	mov	r9, r3
 8016384:	688a      	ldr	r2, [r1, #8]
 8016386:	690b      	ldr	r3, [r1, #16]
 8016388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801638c:	4293      	cmp	r3, r2
 801638e:	bfb8      	it	lt
 8016390:	4613      	movlt	r3, r2
 8016392:	6033      	str	r3, [r6, #0]
 8016394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016398:	4607      	mov	r7, r0
 801639a:	460c      	mov	r4, r1
 801639c:	b10a      	cbz	r2, 80163a2 <_printf_common+0x26>
 801639e:	3301      	adds	r3, #1
 80163a0:	6033      	str	r3, [r6, #0]
 80163a2:	6823      	ldr	r3, [r4, #0]
 80163a4:	0699      	lsls	r1, r3, #26
 80163a6:	bf42      	ittt	mi
 80163a8:	6833      	ldrmi	r3, [r6, #0]
 80163aa:	3302      	addmi	r3, #2
 80163ac:	6033      	strmi	r3, [r6, #0]
 80163ae:	6825      	ldr	r5, [r4, #0]
 80163b0:	f015 0506 	ands.w	r5, r5, #6
 80163b4:	d106      	bne.n	80163c4 <_printf_common+0x48>
 80163b6:	f104 0a19 	add.w	sl, r4, #25
 80163ba:	68e3      	ldr	r3, [r4, #12]
 80163bc:	6832      	ldr	r2, [r6, #0]
 80163be:	1a9b      	subs	r3, r3, r2
 80163c0:	42ab      	cmp	r3, r5
 80163c2:	dc26      	bgt.n	8016412 <_printf_common+0x96>
 80163c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80163c8:	1e13      	subs	r3, r2, #0
 80163ca:	6822      	ldr	r2, [r4, #0]
 80163cc:	bf18      	it	ne
 80163ce:	2301      	movne	r3, #1
 80163d0:	0692      	lsls	r2, r2, #26
 80163d2:	d42b      	bmi.n	801642c <_printf_common+0xb0>
 80163d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163d8:	4649      	mov	r1, r9
 80163da:	4638      	mov	r0, r7
 80163dc:	47c0      	blx	r8
 80163de:	3001      	adds	r0, #1
 80163e0:	d01e      	beq.n	8016420 <_printf_common+0xa4>
 80163e2:	6823      	ldr	r3, [r4, #0]
 80163e4:	68e5      	ldr	r5, [r4, #12]
 80163e6:	6832      	ldr	r2, [r6, #0]
 80163e8:	f003 0306 	and.w	r3, r3, #6
 80163ec:	2b04      	cmp	r3, #4
 80163ee:	bf08      	it	eq
 80163f0:	1aad      	subeq	r5, r5, r2
 80163f2:	68a3      	ldr	r3, [r4, #8]
 80163f4:	6922      	ldr	r2, [r4, #16]
 80163f6:	bf0c      	ite	eq
 80163f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80163fc:	2500      	movne	r5, #0
 80163fe:	4293      	cmp	r3, r2
 8016400:	bfc4      	itt	gt
 8016402:	1a9b      	subgt	r3, r3, r2
 8016404:	18ed      	addgt	r5, r5, r3
 8016406:	2600      	movs	r6, #0
 8016408:	341a      	adds	r4, #26
 801640a:	42b5      	cmp	r5, r6
 801640c:	d11a      	bne.n	8016444 <_printf_common+0xc8>
 801640e:	2000      	movs	r0, #0
 8016410:	e008      	b.n	8016424 <_printf_common+0xa8>
 8016412:	2301      	movs	r3, #1
 8016414:	4652      	mov	r2, sl
 8016416:	4649      	mov	r1, r9
 8016418:	4638      	mov	r0, r7
 801641a:	47c0      	blx	r8
 801641c:	3001      	adds	r0, #1
 801641e:	d103      	bne.n	8016428 <_printf_common+0xac>
 8016420:	f04f 30ff 	mov.w	r0, #4294967295
 8016424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016428:	3501      	adds	r5, #1
 801642a:	e7c6      	b.n	80163ba <_printf_common+0x3e>
 801642c:	18e1      	adds	r1, r4, r3
 801642e:	1c5a      	adds	r2, r3, #1
 8016430:	2030      	movs	r0, #48	; 0x30
 8016432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016436:	4422      	add	r2, r4
 8016438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801643c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016440:	3302      	adds	r3, #2
 8016442:	e7c7      	b.n	80163d4 <_printf_common+0x58>
 8016444:	2301      	movs	r3, #1
 8016446:	4622      	mov	r2, r4
 8016448:	4649      	mov	r1, r9
 801644a:	4638      	mov	r0, r7
 801644c:	47c0      	blx	r8
 801644e:	3001      	adds	r0, #1
 8016450:	d0e6      	beq.n	8016420 <_printf_common+0xa4>
 8016452:	3601      	adds	r6, #1
 8016454:	e7d9      	b.n	801640a <_printf_common+0x8e>
	...

08016458 <_printf_i>:
 8016458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801645c:	7e0f      	ldrb	r7, [r1, #24]
 801645e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016460:	2f78      	cmp	r7, #120	; 0x78
 8016462:	4691      	mov	r9, r2
 8016464:	4680      	mov	r8, r0
 8016466:	460c      	mov	r4, r1
 8016468:	469a      	mov	sl, r3
 801646a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801646e:	d807      	bhi.n	8016480 <_printf_i+0x28>
 8016470:	2f62      	cmp	r7, #98	; 0x62
 8016472:	d80a      	bhi.n	801648a <_printf_i+0x32>
 8016474:	2f00      	cmp	r7, #0
 8016476:	f000 80d8 	beq.w	801662a <_printf_i+0x1d2>
 801647a:	2f58      	cmp	r7, #88	; 0x58
 801647c:	f000 80a3 	beq.w	80165c6 <_printf_i+0x16e>
 8016480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016488:	e03a      	b.n	8016500 <_printf_i+0xa8>
 801648a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801648e:	2b15      	cmp	r3, #21
 8016490:	d8f6      	bhi.n	8016480 <_printf_i+0x28>
 8016492:	a101      	add	r1, pc, #4	; (adr r1, 8016498 <_printf_i+0x40>)
 8016494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016498:	080164f1 	.word	0x080164f1
 801649c:	08016505 	.word	0x08016505
 80164a0:	08016481 	.word	0x08016481
 80164a4:	08016481 	.word	0x08016481
 80164a8:	08016481 	.word	0x08016481
 80164ac:	08016481 	.word	0x08016481
 80164b0:	08016505 	.word	0x08016505
 80164b4:	08016481 	.word	0x08016481
 80164b8:	08016481 	.word	0x08016481
 80164bc:	08016481 	.word	0x08016481
 80164c0:	08016481 	.word	0x08016481
 80164c4:	08016611 	.word	0x08016611
 80164c8:	08016535 	.word	0x08016535
 80164cc:	080165f3 	.word	0x080165f3
 80164d0:	08016481 	.word	0x08016481
 80164d4:	08016481 	.word	0x08016481
 80164d8:	08016633 	.word	0x08016633
 80164dc:	08016481 	.word	0x08016481
 80164e0:	08016535 	.word	0x08016535
 80164e4:	08016481 	.word	0x08016481
 80164e8:	08016481 	.word	0x08016481
 80164ec:	080165fb 	.word	0x080165fb
 80164f0:	682b      	ldr	r3, [r5, #0]
 80164f2:	1d1a      	adds	r2, r3, #4
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	602a      	str	r2, [r5, #0]
 80164f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016500:	2301      	movs	r3, #1
 8016502:	e0a3      	b.n	801664c <_printf_i+0x1f4>
 8016504:	6820      	ldr	r0, [r4, #0]
 8016506:	6829      	ldr	r1, [r5, #0]
 8016508:	0606      	lsls	r6, r0, #24
 801650a:	f101 0304 	add.w	r3, r1, #4
 801650e:	d50a      	bpl.n	8016526 <_printf_i+0xce>
 8016510:	680e      	ldr	r6, [r1, #0]
 8016512:	602b      	str	r3, [r5, #0]
 8016514:	2e00      	cmp	r6, #0
 8016516:	da03      	bge.n	8016520 <_printf_i+0xc8>
 8016518:	232d      	movs	r3, #45	; 0x2d
 801651a:	4276      	negs	r6, r6
 801651c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016520:	485e      	ldr	r0, [pc, #376]	; (801669c <_printf_i+0x244>)
 8016522:	230a      	movs	r3, #10
 8016524:	e019      	b.n	801655a <_printf_i+0x102>
 8016526:	680e      	ldr	r6, [r1, #0]
 8016528:	602b      	str	r3, [r5, #0]
 801652a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801652e:	bf18      	it	ne
 8016530:	b236      	sxthne	r6, r6
 8016532:	e7ef      	b.n	8016514 <_printf_i+0xbc>
 8016534:	682b      	ldr	r3, [r5, #0]
 8016536:	6820      	ldr	r0, [r4, #0]
 8016538:	1d19      	adds	r1, r3, #4
 801653a:	6029      	str	r1, [r5, #0]
 801653c:	0601      	lsls	r1, r0, #24
 801653e:	d501      	bpl.n	8016544 <_printf_i+0xec>
 8016540:	681e      	ldr	r6, [r3, #0]
 8016542:	e002      	b.n	801654a <_printf_i+0xf2>
 8016544:	0646      	lsls	r6, r0, #25
 8016546:	d5fb      	bpl.n	8016540 <_printf_i+0xe8>
 8016548:	881e      	ldrh	r6, [r3, #0]
 801654a:	4854      	ldr	r0, [pc, #336]	; (801669c <_printf_i+0x244>)
 801654c:	2f6f      	cmp	r7, #111	; 0x6f
 801654e:	bf0c      	ite	eq
 8016550:	2308      	moveq	r3, #8
 8016552:	230a      	movne	r3, #10
 8016554:	2100      	movs	r1, #0
 8016556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801655a:	6865      	ldr	r5, [r4, #4]
 801655c:	60a5      	str	r5, [r4, #8]
 801655e:	2d00      	cmp	r5, #0
 8016560:	bfa2      	ittt	ge
 8016562:	6821      	ldrge	r1, [r4, #0]
 8016564:	f021 0104 	bicge.w	r1, r1, #4
 8016568:	6021      	strge	r1, [r4, #0]
 801656a:	b90e      	cbnz	r6, 8016570 <_printf_i+0x118>
 801656c:	2d00      	cmp	r5, #0
 801656e:	d04d      	beq.n	801660c <_printf_i+0x1b4>
 8016570:	4615      	mov	r5, r2
 8016572:	fbb6 f1f3 	udiv	r1, r6, r3
 8016576:	fb03 6711 	mls	r7, r3, r1, r6
 801657a:	5dc7      	ldrb	r7, [r0, r7]
 801657c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016580:	4637      	mov	r7, r6
 8016582:	42bb      	cmp	r3, r7
 8016584:	460e      	mov	r6, r1
 8016586:	d9f4      	bls.n	8016572 <_printf_i+0x11a>
 8016588:	2b08      	cmp	r3, #8
 801658a:	d10b      	bne.n	80165a4 <_printf_i+0x14c>
 801658c:	6823      	ldr	r3, [r4, #0]
 801658e:	07de      	lsls	r6, r3, #31
 8016590:	d508      	bpl.n	80165a4 <_printf_i+0x14c>
 8016592:	6923      	ldr	r3, [r4, #16]
 8016594:	6861      	ldr	r1, [r4, #4]
 8016596:	4299      	cmp	r1, r3
 8016598:	bfde      	ittt	le
 801659a:	2330      	movle	r3, #48	; 0x30
 801659c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80165a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80165a4:	1b52      	subs	r2, r2, r5
 80165a6:	6122      	str	r2, [r4, #16]
 80165a8:	f8cd a000 	str.w	sl, [sp]
 80165ac:	464b      	mov	r3, r9
 80165ae:	aa03      	add	r2, sp, #12
 80165b0:	4621      	mov	r1, r4
 80165b2:	4640      	mov	r0, r8
 80165b4:	f7ff fee2 	bl	801637c <_printf_common>
 80165b8:	3001      	adds	r0, #1
 80165ba:	d14c      	bne.n	8016656 <_printf_i+0x1fe>
 80165bc:	f04f 30ff 	mov.w	r0, #4294967295
 80165c0:	b004      	add	sp, #16
 80165c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165c6:	4835      	ldr	r0, [pc, #212]	; (801669c <_printf_i+0x244>)
 80165c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80165cc:	6829      	ldr	r1, [r5, #0]
 80165ce:	6823      	ldr	r3, [r4, #0]
 80165d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80165d4:	6029      	str	r1, [r5, #0]
 80165d6:	061d      	lsls	r5, r3, #24
 80165d8:	d514      	bpl.n	8016604 <_printf_i+0x1ac>
 80165da:	07df      	lsls	r7, r3, #31
 80165dc:	bf44      	itt	mi
 80165de:	f043 0320 	orrmi.w	r3, r3, #32
 80165e2:	6023      	strmi	r3, [r4, #0]
 80165e4:	b91e      	cbnz	r6, 80165ee <_printf_i+0x196>
 80165e6:	6823      	ldr	r3, [r4, #0]
 80165e8:	f023 0320 	bic.w	r3, r3, #32
 80165ec:	6023      	str	r3, [r4, #0]
 80165ee:	2310      	movs	r3, #16
 80165f0:	e7b0      	b.n	8016554 <_printf_i+0xfc>
 80165f2:	6823      	ldr	r3, [r4, #0]
 80165f4:	f043 0320 	orr.w	r3, r3, #32
 80165f8:	6023      	str	r3, [r4, #0]
 80165fa:	2378      	movs	r3, #120	; 0x78
 80165fc:	4828      	ldr	r0, [pc, #160]	; (80166a0 <_printf_i+0x248>)
 80165fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016602:	e7e3      	b.n	80165cc <_printf_i+0x174>
 8016604:	0659      	lsls	r1, r3, #25
 8016606:	bf48      	it	mi
 8016608:	b2b6      	uxthmi	r6, r6
 801660a:	e7e6      	b.n	80165da <_printf_i+0x182>
 801660c:	4615      	mov	r5, r2
 801660e:	e7bb      	b.n	8016588 <_printf_i+0x130>
 8016610:	682b      	ldr	r3, [r5, #0]
 8016612:	6826      	ldr	r6, [r4, #0]
 8016614:	6961      	ldr	r1, [r4, #20]
 8016616:	1d18      	adds	r0, r3, #4
 8016618:	6028      	str	r0, [r5, #0]
 801661a:	0635      	lsls	r5, r6, #24
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	d501      	bpl.n	8016624 <_printf_i+0x1cc>
 8016620:	6019      	str	r1, [r3, #0]
 8016622:	e002      	b.n	801662a <_printf_i+0x1d2>
 8016624:	0670      	lsls	r0, r6, #25
 8016626:	d5fb      	bpl.n	8016620 <_printf_i+0x1c8>
 8016628:	8019      	strh	r1, [r3, #0]
 801662a:	2300      	movs	r3, #0
 801662c:	6123      	str	r3, [r4, #16]
 801662e:	4615      	mov	r5, r2
 8016630:	e7ba      	b.n	80165a8 <_printf_i+0x150>
 8016632:	682b      	ldr	r3, [r5, #0]
 8016634:	1d1a      	adds	r2, r3, #4
 8016636:	602a      	str	r2, [r5, #0]
 8016638:	681d      	ldr	r5, [r3, #0]
 801663a:	6862      	ldr	r2, [r4, #4]
 801663c:	2100      	movs	r1, #0
 801663e:	4628      	mov	r0, r5
 8016640:	f7e9 fdce 	bl	80001e0 <memchr>
 8016644:	b108      	cbz	r0, 801664a <_printf_i+0x1f2>
 8016646:	1b40      	subs	r0, r0, r5
 8016648:	6060      	str	r0, [r4, #4]
 801664a:	6863      	ldr	r3, [r4, #4]
 801664c:	6123      	str	r3, [r4, #16]
 801664e:	2300      	movs	r3, #0
 8016650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016654:	e7a8      	b.n	80165a8 <_printf_i+0x150>
 8016656:	6923      	ldr	r3, [r4, #16]
 8016658:	462a      	mov	r2, r5
 801665a:	4649      	mov	r1, r9
 801665c:	4640      	mov	r0, r8
 801665e:	47d0      	blx	sl
 8016660:	3001      	adds	r0, #1
 8016662:	d0ab      	beq.n	80165bc <_printf_i+0x164>
 8016664:	6823      	ldr	r3, [r4, #0]
 8016666:	079b      	lsls	r3, r3, #30
 8016668:	d413      	bmi.n	8016692 <_printf_i+0x23a>
 801666a:	68e0      	ldr	r0, [r4, #12]
 801666c:	9b03      	ldr	r3, [sp, #12]
 801666e:	4298      	cmp	r0, r3
 8016670:	bfb8      	it	lt
 8016672:	4618      	movlt	r0, r3
 8016674:	e7a4      	b.n	80165c0 <_printf_i+0x168>
 8016676:	2301      	movs	r3, #1
 8016678:	4632      	mov	r2, r6
 801667a:	4649      	mov	r1, r9
 801667c:	4640      	mov	r0, r8
 801667e:	47d0      	blx	sl
 8016680:	3001      	adds	r0, #1
 8016682:	d09b      	beq.n	80165bc <_printf_i+0x164>
 8016684:	3501      	adds	r5, #1
 8016686:	68e3      	ldr	r3, [r4, #12]
 8016688:	9903      	ldr	r1, [sp, #12]
 801668a:	1a5b      	subs	r3, r3, r1
 801668c:	42ab      	cmp	r3, r5
 801668e:	dcf2      	bgt.n	8016676 <_printf_i+0x21e>
 8016690:	e7eb      	b.n	801666a <_printf_i+0x212>
 8016692:	2500      	movs	r5, #0
 8016694:	f104 0619 	add.w	r6, r4, #25
 8016698:	e7f5      	b.n	8016686 <_printf_i+0x22e>
 801669a:	bf00      	nop
 801669c:	08018a9e 	.word	0x08018a9e
 80166a0:	08018aaf 	.word	0x08018aaf

080166a4 <cleanup_glue>:
 80166a4:	b538      	push	{r3, r4, r5, lr}
 80166a6:	460c      	mov	r4, r1
 80166a8:	6809      	ldr	r1, [r1, #0]
 80166aa:	4605      	mov	r5, r0
 80166ac:	b109      	cbz	r1, 80166b2 <cleanup_glue+0xe>
 80166ae:	f7ff fff9 	bl	80166a4 <cleanup_glue>
 80166b2:	4621      	mov	r1, r4
 80166b4:	4628      	mov	r0, r5
 80166b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166ba:	f7ff baa9 	b.w	8015c10 <_free_r>
	...

080166c0 <_reclaim_reent>:
 80166c0:	4b2c      	ldr	r3, [pc, #176]	; (8016774 <_reclaim_reent+0xb4>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4283      	cmp	r3, r0
 80166c6:	b570      	push	{r4, r5, r6, lr}
 80166c8:	4604      	mov	r4, r0
 80166ca:	d051      	beq.n	8016770 <_reclaim_reent+0xb0>
 80166cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80166ce:	b143      	cbz	r3, 80166e2 <_reclaim_reent+0x22>
 80166d0:	68db      	ldr	r3, [r3, #12]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d14a      	bne.n	801676c <_reclaim_reent+0xac>
 80166d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166d8:	6819      	ldr	r1, [r3, #0]
 80166da:	b111      	cbz	r1, 80166e2 <_reclaim_reent+0x22>
 80166dc:	4620      	mov	r0, r4
 80166de:	f7ff fa97 	bl	8015c10 <_free_r>
 80166e2:	6961      	ldr	r1, [r4, #20]
 80166e4:	b111      	cbz	r1, 80166ec <_reclaim_reent+0x2c>
 80166e6:	4620      	mov	r0, r4
 80166e8:	f7ff fa92 	bl	8015c10 <_free_r>
 80166ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80166ee:	b111      	cbz	r1, 80166f6 <_reclaim_reent+0x36>
 80166f0:	4620      	mov	r0, r4
 80166f2:	f7ff fa8d 	bl	8015c10 <_free_r>
 80166f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80166f8:	b111      	cbz	r1, 8016700 <_reclaim_reent+0x40>
 80166fa:	4620      	mov	r0, r4
 80166fc:	f7ff fa88 	bl	8015c10 <_free_r>
 8016700:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016702:	b111      	cbz	r1, 801670a <_reclaim_reent+0x4a>
 8016704:	4620      	mov	r0, r4
 8016706:	f7ff fa83 	bl	8015c10 <_free_r>
 801670a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801670c:	b111      	cbz	r1, 8016714 <_reclaim_reent+0x54>
 801670e:	4620      	mov	r0, r4
 8016710:	f7ff fa7e 	bl	8015c10 <_free_r>
 8016714:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016716:	b111      	cbz	r1, 801671e <_reclaim_reent+0x5e>
 8016718:	4620      	mov	r0, r4
 801671a:	f7ff fa79 	bl	8015c10 <_free_r>
 801671e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016720:	b111      	cbz	r1, 8016728 <_reclaim_reent+0x68>
 8016722:	4620      	mov	r0, r4
 8016724:	f7ff fa74 	bl	8015c10 <_free_r>
 8016728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801672a:	b111      	cbz	r1, 8016732 <_reclaim_reent+0x72>
 801672c:	4620      	mov	r0, r4
 801672e:	f7ff fa6f 	bl	8015c10 <_free_r>
 8016732:	69a3      	ldr	r3, [r4, #24]
 8016734:	b1e3      	cbz	r3, 8016770 <_reclaim_reent+0xb0>
 8016736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016738:	4620      	mov	r0, r4
 801673a:	4798      	blx	r3
 801673c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801673e:	b1b9      	cbz	r1, 8016770 <_reclaim_reent+0xb0>
 8016740:	4620      	mov	r0, r4
 8016742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016746:	f7ff bfad 	b.w	80166a4 <cleanup_glue>
 801674a:	5949      	ldr	r1, [r1, r5]
 801674c:	b941      	cbnz	r1, 8016760 <_reclaim_reent+0xa0>
 801674e:	3504      	adds	r5, #4
 8016750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016752:	2d80      	cmp	r5, #128	; 0x80
 8016754:	68d9      	ldr	r1, [r3, #12]
 8016756:	d1f8      	bne.n	801674a <_reclaim_reent+0x8a>
 8016758:	4620      	mov	r0, r4
 801675a:	f7ff fa59 	bl	8015c10 <_free_r>
 801675e:	e7ba      	b.n	80166d6 <_reclaim_reent+0x16>
 8016760:	680e      	ldr	r6, [r1, #0]
 8016762:	4620      	mov	r0, r4
 8016764:	f7ff fa54 	bl	8015c10 <_free_r>
 8016768:	4631      	mov	r1, r6
 801676a:	e7ef      	b.n	801674c <_reclaim_reent+0x8c>
 801676c:	2500      	movs	r5, #0
 801676e:	e7ef      	b.n	8016750 <_reclaim_reent+0x90>
 8016770:	bd70      	pop	{r4, r5, r6, pc}
 8016772:	bf00      	nop
 8016774:	20000040 	.word	0x20000040

08016778 <_sbrk_r>:
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	4d06      	ldr	r5, [pc, #24]	; (8016794 <_sbrk_r+0x1c>)
 801677c:	2300      	movs	r3, #0
 801677e:	4604      	mov	r4, r0
 8016780:	4608      	mov	r0, r1
 8016782:	602b      	str	r3, [r5, #0]
 8016784:	f7f3 f83e 	bl	8009804 <_sbrk>
 8016788:	1c43      	adds	r3, r0, #1
 801678a:	d102      	bne.n	8016792 <_sbrk_r+0x1a>
 801678c:	682b      	ldr	r3, [r5, #0]
 801678e:	b103      	cbz	r3, 8016792 <_sbrk_r+0x1a>
 8016790:	6023      	str	r3, [r4, #0]
 8016792:	bd38      	pop	{r3, r4, r5, pc}
 8016794:	20007414 	.word	0x20007414

08016798 <_raise_r>:
 8016798:	291f      	cmp	r1, #31
 801679a:	b538      	push	{r3, r4, r5, lr}
 801679c:	4604      	mov	r4, r0
 801679e:	460d      	mov	r5, r1
 80167a0:	d904      	bls.n	80167ac <_raise_r+0x14>
 80167a2:	2316      	movs	r3, #22
 80167a4:	6003      	str	r3, [r0, #0]
 80167a6:	f04f 30ff 	mov.w	r0, #4294967295
 80167aa:	bd38      	pop	{r3, r4, r5, pc}
 80167ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80167ae:	b112      	cbz	r2, 80167b6 <_raise_r+0x1e>
 80167b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80167b4:	b94b      	cbnz	r3, 80167ca <_raise_r+0x32>
 80167b6:	4620      	mov	r0, r4
 80167b8:	f000 f830 	bl	801681c <_getpid_r>
 80167bc:	462a      	mov	r2, r5
 80167be:	4601      	mov	r1, r0
 80167c0:	4620      	mov	r0, r4
 80167c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167c6:	f000 b817 	b.w	80167f8 <_kill_r>
 80167ca:	2b01      	cmp	r3, #1
 80167cc:	d00a      	beq.n	80167e4 <_raise_r+0x4c>
 80167ce:	1c59      	adds	r1, r3, #1
 80167d0:	d103      	bne.n	80167da <_raise_r+0x42>
 80167d2:	2316      	movs	r3, #22
 80167d4:	6003      	str	r3, [r0, #0]
 80167d6:	2001      	movs	r0, #1
 80167d8:	e7e7      	b.n	80167aa <_raise_r+0x12>
 80167da:	2400      	movs	r4, #0
 80167dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80167e0:	4628      	mov	r0, r5
 80167e2:	4798      	blx	r3
 80167e4:	2000      	movs	r0, #0
 80167e6:	e7e0      	b.n	80167aa <_raise_r+0x12>

080167e8 <raise>:
 80167e8:	4b02      	ldr	r3, [pc, #8]	; (80167f4 <raise+0xc>)
 80167ea:	4601      	mov	r1, r0
 80167ec:	6818      	ldr	r0, [r3, #0]
 80167ee:	f7ff bfd3 	b.w	8016798 <_raise_r>
 80167f2:	bf00      	nop
 80167f4:	20000040 	.word	0x20000040

080167f8 <_kill_r>:
 80167f8:	b538      	push	{r3, r4, r5, lr}
 80167fa:	4d07      	ldr	r5, [pc, #28]	; (8016818 <_kill_r+0x20>)
 80167fc:	2300      	movs	r3, #0
 80167fe:	4604      	mov	r4, r0
 8016800:	4608      	mov	r0, r1
 8016802:	4611      	mov	r1, r2
 8016804:	602b      	str	r3, [r5, #0]
 8016806:	f7f2 ff75 	bl	80096f4 <_kill>
 801680a:	1c43      	adds	r3, r0, #1
 801680c:	d102      	bne.n	8016814 <_kill_r+0x1c>
 801680e:	682b      	ldr	r3, [r5, #0]
 8016810:	b103      	cbz	r3, 8016814 <_kill_r+0x1c>
 8016812:	6023      	str	r3, [r4, #0]
 8016814:	bd38      	pop	{r3, r4, r5, pc}
 8016816:	bf00      	nop
 8016818:	20007414 	.word	0x20007414

0801681c <_getpid_r>:
 801681c:	f7f2 bf62 	b.w	80096e4 <_getpid>

08016820 <__sread>:
 8016820:	b510      	push	{r4, lr}
 8016822:	460c      	mov	r4, r1
 8016824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016828:	f001 fbba 	bl	8017fa0 <_read_r>
 801682c:	2800      	cmp	r0, #0
 801682e:	bfab      	itete	ge
 8016830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016832:	89a3      	ldrhlt	r3, [r4, #12]
 8016834:	181b      	addge	r3, r3, r0
 8016836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801683a:	bfac      	ite	ge
 801683c:	6563      	strge	r3, [r4, #84]	; 0x54
 801683e:	81a3      	strhlt	r3, [r4, #12]
 8016840:	bd10      	pop	{r4, pc}

08016842 <__swrite>:
 8016842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016846:	461f      	mov	r7, r3
 8016848:	898b      	ldrh	r3, [r1, #12]
 801684a:	05db      	lsls	r3, r3, #23
 801684c:	4605      	mov	r5, r0
 801684e:	460c      	mov	r4, r1
 8016850:	4616      	mov	r6, r2
 8016852:	d505      	bpl.n	8016860 <__swrite+0x1e>
 8016854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016858:	2302      	movs	r3, #2
 801685a:	2200      	movs	r2, #0
 801685c:	f000 ffe8 	bl	8017830 <_lseek_r>
 8016860:	89a3      	ldrh	r3, [r4, #12]
 8016862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801686a:	81a3      	strh	r3, [r4, #12]
 801686c:	4632      	mov	r2, r6
 801686e:	463b      	mov	r3, r7
 8016870:	4628      	mov	r0, r5
 8016872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016876:	f000 b817 	b.w	80168a8 <_write_r>

0801687a <__sseek>:
 801687a:	b510      	push	{r4, lr}
 801687c:	460c      	mov	r4, r1
 801687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016882:	f000 ffd5 	bl	8017830 <_lseek_r>
 8016886:	1c43      	adds	r3, r0, #1
 8016888:	89a3      	ldrh	r3, [r4, #12]
 801688a:	bf15      	itete	ne
 801688c:	6560      	strne	r0, [r4, #84]	; 0x54
 801688e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016896:	81a3      	strheq	r3, [r4, #12]
 8016898:	bf18      	it	ne
 801689a:	81a3      	strhne	r3, [r4, #12]
 801689c:	bd10      	pop	{r4, pc}

0801689e <__sclose>:
 801689e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168a2:	f000 b875 	b.w	8016990 <_close_r>
	...

080168a8 <_write_r>:
 80168a8:	b538      	push	{r3, r4, r5, lr}
 80168aa:	4d07      	ldr	r5, [pc, #28]	; (80168c8 <_write_r+0x20>)
 80168ac:	4604      	mov	r4, r0
 80168ae:	4608      	mov	r0, r1
 80168b0:	4611      	mov	r1, r2
 80168b2:	2200      	movs	r2, #0
 80168b4:	602a      	str	r2, [r5, #0]
 80168b6:	461a      	mov	r2, r3
 80168b8:	f7f2 ff53 	bl	8009762 <_write>
 80168bc:	1c43      	adds	r3, r0, #1
 80168be:	d102      	bne.n	80168c6 <_write_r+0x1e>
 80168c0:	682b      	ldr	r3, [r5, #0]
 80168c2:	b103      	cbz	r3, 80168c6 <_write_r+0x1e>
 80168c4:	6023      	str	r3, [r4, #0]
 80168c6:	bd38      	pop	{r3, r4, r5, pc}
 80168c8:	20007414 	.word	0x20007414

080168cc <__register_exitproc>:
 80168cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801698c <__register_exitproc+0xc0>
 80168d4:	4606      	mov	r6, r0
 80168d6:	f8d8 0000 	ldr.w	r0, [r8]
 80168da:	461f      	mov	r7, r3
 80168dc:	460d      	mov	r5, r1
 80168de:	4691      	mov	r9, r2
 80168e0:	f7ff f96d 	bl	8015bbe <__retarget_lock_acquire_recursive>
 80168e4:	4b25      	ldr	r3, [pc, #148]	; (801697c <__register_exitproc+0xb0>)
 80168e6:	681c      	ldr	r4, [r3, #0]
 80168e8:	b934      	cbnz	r4, 80168f8 <__register_exitproc+0x2c>
 80168ea:	4c25      	ldr	r4, [pc, #148]	; (8016980 <__register_exitproc+0xb4>)
 80168ec:	601c      	str	r4, [r3, #0]
 80168ee:	4b25      	ldr	r3, [pc, #148]	; (8016984 <__register_exitproc+0xb8>)
 80168f0:	b113      	cbz	r3, 80168f8 <__register_exitproc+0x2c>
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80168f8:	6863      	ldr	r3, [r4, #4]
 80168fa:	2b1f      	cmp	r3, #31
 80168fc:	dd07      	ble.n	801690e <__register_exitproc+0x42>
 80168fe:	f8d8 0000 	ldr.w	r0, [r8]
 8016902:	f7ff f95e 	bl	8015bc2 <__retarget_lock_release_recursive>
 8016906:	f04f 30ff 	mov.w	r0, #4294967295
 801690a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801690e:	b34e      	cbz	r6, 8016964 <__register_exitproc+0x98>
 8016910:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8016914:	b988      	cbnz	r0, 801693a <__register_exitproc+0x6e>
 8016916:	4b1c      	ldr	r3, [pc, #112]	; (8016988 <__register_exitproc+0xbc>)
 8016918:	b923      	cbnz	r3, 8016924 <__register_exitproc+0x58>
 801691a:	f8d8 0000 	ldr.w	r0, [r8]
 801691e:	f7ff f94f 	bl	8015bc0 <__retarget_lock_release>
 8016922:	e7f0      	b.n	8016906 <__register_exitproc+0x3a>
 8016924:	f44f 7084 	mov.w	r0, #264	; 0x108
 8016928:	f7ff f94c 	bl	8015bc4 <malloc>
 801692c:	2800      	cmp	r0, #0
 801692e:	d0f4      	beq.n	801691a <__register_exitproc+0x4e>
 8016930:	2300      	movs	r3, #0
 8016932:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8016936:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801693a:	6863      	ldr	r3, [r4, #4]
 801693c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8016940:	2201      	movs	r2, #1
 8016942:	409a      	lsls	r2, r3
 8016944:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8016948:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801694c:	4313      	orrs	r3, r2
 801694e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8016952:	2e02      	cmp	r6, #2
 8016954:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8016958:	bf02      	ittt	eq
 801695a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801695e:	4313      	orreq	r3, r2
 8016960:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8016964:	6863      	ldr	r3, [r4, #4]
 8016966:	f8d8 0000 	ldr.w	r0, [r8]
 801696a:	1c5a      	adds	r2, r3, #1
 801696c:	3302      	adds	r3, #2
 801696e:	6062      	str	r2, [r4, #4]
 8016970:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016974:	f7ff f925 	bl	8015bc2 <__retarget_lock_release_recursive>
 8016978:	2000      	movs	r0, #0
 801697a:	e7c6      	b.n	801690a <__register_exitproc+0x3e>
 801697c:	200074a4 	.word	0x200074a4
 8016980:	20007418 	.word	0x20007418
 8016984:	00000000 	.word	0x00000000
 8016988:	08015bc5 	.word	0x08015bc5
 801698c:	200000a4 	.word	0x200000a4

08016990 <_close_r>:
 8016990:	b538      	push	{r3, r4, r5, lr}
 8016992:	4d06      	ldr	r5, [pc, #24]	; (80169ac <_close_r+0x1c>)
 8016994:	2300      	movs	r3, #0
 8016996:	4604      	mov	r4, r0
 8016998:	4608      	mov	r0, r1
 801699a:	602b      	str	r3, [r5, #0]
 801699c:	f7f2 fefd 	bl	800979a <_close>
 80169a0:	1c43      	adds	r3, r0, #1
 80169a2:	d102      	bne.n	80169aa <_close_r+0x1a>
 80169a4:	682b      	ldr	r3, [r5, #0]
 80169a6:	b103      	cbz	r3, 80169aa <_close_r+0x1a>
 80169a8:	6023      	str	r3, [r4, #0]
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	20007414 	.word	0x20007414

080169b0 <quorem>:
 80169b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b4:	6903      	ldr	r3, [r0, #16]
 80169b6:	690c      	ldr	r4, [r1, #16]
 80169b8:	42a3      	cmp	r3, r4
 80169ba:	4607      	mov	r7, r0
 80169bc:	f2c0 8081 	blt.w	8016ac2 <quorem+0x112>
 80169c0:	3c01      	subs	r4, #1
 80169c2:	f101 0814 	add.w	r8, r1, #20
 80169c6:	f100 0514 	add.w	r5, r0, #20
 80169ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80169ce:	9301      	str	r3, [sp, #4]
 80169d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80169d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80169d8:	3301      	adds	r3, #1
 80169da:	429a      	cmp	r2, r3
 80169dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80169e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80169e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80169e8:	d331      	bcc.n	8016a4e <quorem+0x9e>
 80169ea:	f04f 0e00 	mov.w	lr, #0
 80169ee:	4640      	mov	r0, r8
 80169f0:	46ac      	mov	ip, r5
 80169f2:	46f2      	mov	sl, lr
 80169f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80169f8:	b293      	uxth	r3, r2
 80169fa:	fb06 e303 	mla	r3, r6, r3, lr
 80169fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	ebaa 0303 	sub.w	r3, sl, r3
 8016a08:	f8dc a000 	ldr.w	sl, [ip]
 8016a0c:	0c12      	lsrs	r2, r2, #16
 8016a0e:	fa13 f38a 	uxtah	r3, r3, sl
 8016a12:	fb06 e202 	mla	r2, r6, r2, lr
 8016a16:	9300      	str	r3, [sp, #0]
 8016a18:	9b00      	ldr	r3, [sp, #0]
 8016a1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016a1e:	b292      	uxth	r2, r2
 8016a20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016a24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a28:	f8bd 3000 	ldrh.w	r3, [sp]
 8016a2c:	4581      	cmp	r9, r0
 8016a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a32:	f84c 3b04 	str.w	r3, [ip], #4
 8016a36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016a3a:	d2db      	bcs.n	80169f4 <quorem+0x44>
 8016a3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8016a40:	b92b      	cbnz	r3, 8016a4e <quorem+0x9e>
 8016a42:	9b01      	ldr	r3, [sp, #4]
 8016a44:	3b04      	subs	r3, #4
 8016a46:	429d      	cmp	r5, r3
 8016a48:	461a      	mov	r2, r3
 8016a4a:	d32e      	bcc.n	8016aaa <quorem+0xfa>
 8016a4c:	613c      	str	r4, [r7, #16]
 8016a4e:	4638      	mov	r0, r7
 8016a50:	f001 f98e 	bl	8017d70 <__mcmp>
 8016a54:	2800      	cmp	r0, #0
 8016a56:	db24      	blt.n	8016aa2 <quorem+0xf2>
 8016a58:	3601      	adds	r6, #1
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	f04f 0c00 	mov.w	ip, #0
 8016a60:	f858 2b04 	ldr.w	r2, [r8], #4
 8016a64:	f8d0 e000 	ldr.w	lr, [r0]
 8016a68:	b293      	uxth	r3, r2
 8016a6a:	ebac 0303 	sub.w	r3, ip, r3
 8016a6e:	0c12      	lsrs	r2, r2, #16
 8016a70:	fa13 f38e 	uxtah	r3, r3, lr
 8016a74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016a78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a82:	45c1      	cmp	r9, r8
 8016a84:	f840 3b04 	str.w	r3, [r0], #4
 8016a88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016a8c:	d2e8      	bcs.n	8016a60 <quorem+0xb0>
 8016a8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016a96:	b922      	cbnz	r2, 8016aa2 <quorem+0xf2>
 8016a98:	3b04      	subs	r3, #4
 8016a9a:	429d      	cmp	r5, r3
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	d30a      	bcc.n	8016ab6 <quorem+0x106>
 8016aa0:	613c      	str	r4, [r7, #16]
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	b003      	add	sp, #12
 8016aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aaa:	6812      	ldr	r2, [r2, #0]
 8016aac:	3b04      	subs	r3, #4
 8016aae:	2a00      	cmp	r2, #0
 8016ab0:	d1cc      	bne.n	8016a4c <quorem+0x9c>
 8016ab2:	3c01      	subs	r4, #1
 8016ab4:	e7c7      	b.n	8016a46 <quorem+0x96>
 8016ab6:	6812      	ldr	r2, [r2, #0]
 8016ab8:	3b04      	subs	r3, #4
 8016aba:	2a00      	cmp	r2, #0
 8016abc:	d1f0      	bne.n	8016aa0 <quorem+0xf0>
 8016abe:	3c01      	subs	r4, #1
 8016ac0:	e7eb      	b.n	8016a9a <quorem+0xea>
 8016ac2:	2000      	movs	r0, #0
 8016ac4:	e7ee      	b.n	8016aa4 <quorem+0xf4>
	...

08016ac8 <_dtoa_r>:
 8016ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016acc:	ed2d 8b04 	vpush	{d8-d9}
 8016ad0:	ec57 6b10 	vmov	r6, r7, d0
 8016ad4:	b093      	sub	sp, #76	; 0x4c
 8016ad6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016ad8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016adc:	9106      	str	r1, [sp, #24]
 8016ade:	ee10 aa10 	vmov	sl, s0
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8016ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ae8:	46bb      	mov	fp, r7
 8016aea:	b975      	cbnz	r5, 8016b0a <_dtoa_r+0x42>
 8016aec:	2010      	movs	r0, #16
 8016aee:	f7ff f869 	bl	8015bc4 <malloc>
 8016af2:	4602      	mov	r2, r0
 8016af4:	6260      	str	r0, [r4, #36]	; 0x24
 8016af6:	b920      	cbnz	r0, 8016b02 <_dtoa_r+0x3a>
 8016af8:	4ba7      	ldr	r3, [pc, #668]	; (8016d98 <_dtoa_r+0x2d0>)
 8016afa:	21ea      	movs	r1, #234	; 0xea
 8016afc:	48a7      	ldr	r0, [pc, #668]	; (8016d9c <_dtoa_r+0x2d4>)
 8016afe:	f001 fa61 	bl	8017fc4 <__assert_func>
 8016b02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016b06:	6005      	str	r5, [r0, #0]
 8016b08:	60c5      	str	r5, [r0, #12]
 8016b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b0c:	6819      	ldr	r1, [r3, #0]
 8016b0e:	b151      	cbz	r1, 8016b26 <_dtoa_r+0x5e>
 8016b10:	685a      	ldr	r2, [r3, #4]
 8016b12:	604a      	str	r2, [r1, #4]
 8016b14:	2301      	movs	r3, #1
 8016b16:	4093      	lsls	r3, r2
 8016b18:	608b      	str	r3, [r1, #8]
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f000 fee6 	bl	80178ec <_Bfree>
 8016b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b22:	2200      	movs	r2, #0
 8016b24:	601a      	str	r2, [r3, #0]
 8016b26:	1e3b      	subs	r3, r7, #0
 8016b28:	bfaa      	itet	ge
 8016b2a:	2300      	movge	r3, #0
 8016b2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016b30:	f8c8 3000 	strge.w	r3, [r8]
 8016b34:	4b9a      	ldr	r3, [pc, #616]	; (8016da0 <_dtoa_r+0x2d8>)
 8016b36:	bfbc      	itt	lt
 8016b38:	2201      	movlt	r2, #1
 8016b3a:	f8c8 2000 	strlt.w	r2, [r8]
 8016b3e:	ea33 030b 	bics.w	r3, r3, fp
 8016b42:	d11b      	bne.n	8016b7c <_dtoa_r+0xb4>
 8016b44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b46:	f242 730f 	movw	r3, #9999	; 0x270f
 8016b4a:	6013      	str	r3, [r2, #0]
 8016b4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b50:	4333      	orrs	r3, r6
 8016b52:	f000 8592 	beq.w	801767a <_dtoa_r+0xbb2>
 8016b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b58:	b963      	cbnz	r3, 8016b74 <_dtoa_r+0xac>
 8016b5a:	4b92      	ldr	r3, [pc, #584]	; (8016da4 <_dtoa_r+0x2dc>)
 8016b5c:	e022      	b.n	8016ba4 <_dtoa_r+0xdc>
 8016b5e:	4b92      	ldr	r3, [pc, #584]	; (8016da8 <_dtoa_r+0x2e0>)
 8016b60:	9301      	str	r3, [sp, #4]
 8016b62:	3308      	adds	r3, #8
 8016b64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016b66:	6013      	str	r3, [r2, #0]
 8016b68:	9801      	ldr	r0, [sp, #4]
 8016b6a:	b013      	add	sp, #76	; 0x4c
 8016b6c:	ecbd 8b04 	vpop	{d8-d9}
 8016b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b74:	4b8b      	ldr	r3, [pc, #556]	; (8016da4 <_dtoa_r+0x2dc>)
 8016b76:	9301      	str	r3, [sp, #4]
 8016b78:	3303      	adds	r3, #3
 8016b7a:	e7f3      	b.n	8016b64 <_dtoa_r+0x9c>
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	2300      	movs	r3, #0
 8016b80:	4650      	mov	r0, sl
 8016b82:	4659      	mov	r1, fp
 8016b84:	f7e9 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8016b88:	ec4b ab19 	vmov	d9, sl, fp
 8016b8c:	4680      	mov	r8, r0
 8016b8e:	b158      	cbz	r0, 8016ba8 <_dtoa_r+0xe0>
 8016b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b92:	2301      	movs	r3, #1
 8016b94:	6013      	str	r3, [r2, #0]
 8016b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f000 856b 	beq.w	8017674 <_dtoa_r+0xbac>
 8016b9e:	4883      	ldr	r0, [pc, #524]	; (8016dac <_dtoa_r+0x2e4>)
 8016ba0:	6018      	str	r0, [r3, #0]
 8016ba2:	1e43      	subs	r3, r0, #1
 8016ba4:	9301      	str	r3, [sp, #4]
 8016ba6:	e7df      	b.n	8016b68 <_dtoa_r+0xa0>
 8016ba8:	ec4b ab10 	vmov	d0, sl, fp
 8016bac:	aa10      	add	r2, sp, #64	; 0x40
 8016bae:	a911      	add	r1, sp, #68	; 0x44
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	f001 f983 	bl	8017ebc <__d2b>
 8016bb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016bba:	ee08 0a10 	vmov	s16, r0
 8016bbe:	2d00      	cmp	r5, #0
 8016bc0:	f000 8084 	beq.w	8016ccc <_dtoa_r+0x204>
 8016bc4:	ee19 3a90 	vmov	r3, s19
 8016bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016bd0:	4656      	mov	r6, sl
 8016bd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016bd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016bda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016bde:	4b74      	ldr	r3, [pc, #464]	; (8016db0 <_dtoa_r+0x2e8>)
 8016be0:	2200      	movs	r2, #0
 8016be2:	4630      	mov	r0, r6
 8016be4:	4639      	mov	r1, r7
 8016be6:	f7e9 fb4f 	bl	8000288 <__aeabi_dsub>
 8016bea:	a365      	add	r3, pc, #404	; (adr r3, 8016d80 <_dtoa_r+0x2b8>)
 8016bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf0:	f7e9 fd02 	bl	80005f8 <__aeabi_dmul>
 8016bf4:	a364      	add	r3, pc, #400	; (adr r3, 8016d88 <_dtoa_r+0x2c0>)
 8016bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bfa:	f7e9 fb47 	bl	800028c <__adddf3>
 8016bfe:	4606      	mov	r6, r0
 8016c00:	4628      	mov	r0, r5
 8016c02:	460f      	mov	r7, r1
 8016c04:	f7e9 fc8e 	bl	8000524 <__aeabi_i2d>
 8016c08:	a361      	add	r3, pc, #388	; (adr r3, 8016d90 <_dtoa_r+0x2c8>)
 8016c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0e:	f7e9 fcf3 	bl	80005f8 <__aeabi_dmul>
 8016c12:	4602      	mov	r2, r0
 8016c14:	460b      	mov	r3, r1
 8016c16:	4630      	mov	r0, r6
 8016c18:	4639      	mov	r1, r7
 8016c1a:	f7e9 fb37 	bl	800028c <__adddf3>
 8016c1e:	4606      	mov	r6, r0
 8016c20:	460f      	mov	r7, r1
 8016c22:	f7e9 ff99 	bl	8000b58 <__aeabi_d2iz>
 8016c26:	2200      	movs	r2, #0
 8016c28:	9000      	str	r0, [sp, #0]
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	4639      	mov	r1, r7
 8016c30:	f7e9 ff54 	bl	8000adc <__aeabi_dcmplt>
 8016c34:	b150      	cbz	r0, 8016c4c <_dtoa_r+0x184>
 8016c36:	9800      	ldr	r0, [sp, #0]
 8016c38:	f7e9 fc74 	bl	8000524 <__aeabi_i2d>
 8016c3c:	4632      	mov	r2, r6
 8016c3e:	463b      	mov	r3, r7
 8016c40:	f7e9 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c44:	b910      	cbnz	r0, 8016c4c <_dtoa_r+0x184>
 8016c46:	9b00      	ldr	r3, [sp, #0]
 8016c48:	3b01      	subs	r3, #1
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	9b00      	ldr	r3, [sp, #0]
 8016c4e:	2b16      	cmp	r3, #22
 8016c50:	d85a      	bhi.n	8016d08 <_dtoa_r+0x240>
 8016c52:	9a00      	ldr	r2, [sp, #0]
 8016c54:	4b57      	ldr	r3, [pc, #348]	; (8016db4 <_dtoa_r+0x2ec>)
 8016c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5e:	ec51 0b19 	vmov	r0, r1, d9
 8016c62:	f7e9 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8016c66:	2800      	cmp	r0, #0
 8016c68:	d050      	beq.n	8016d0c <_dtoa_r+0x244>
 8016c6a:	9b00      	ldr	r3, [sp, #0]
 8016c6c:	3b01      	subs	r3, #1
 8016c6e:	9300      	str	r3, [sp, #0]
 8016c70:	2300      	movs	r3, #0
 8016c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c76:	1b5d      	subs	r5, r3, r5
 8016c78:	1e6b      	subs	r3, r5, #1
 8016c7a:	9305      	str	r3, [sp, #20]
 8016c7c:	bf45      	ittet	mi
 8016c7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8016c82:	9304      	strmi	r3, [sp, #16]
 8016c84:	2300      	movpl	r3, #0
 8016c86:	2300      	movmi	r3, #0
 8016c88:	bf4c      	ite	mi
 8016c8a:	9305      	strmi	r3, [sp, #20]
 8016c8c:	9304      	strpl	r3, [sp, #16]
 8016c8e:	9b00      	ldr	r3, [sp, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	db3d      	blt.n	8016d10 <_dtoa_r+0x248>
 8016c94:	9b05      	ldr	r3, [sp, #20]
 8016c96:	9a00      	ldr	r2, [sp, #0]
 8016c98:	920a      	str	r2, [sp, #40]	; 0x28
 8016c9a:	4413      	add	r3, r2
 8016c9c:	9305      	str	r3, [sp, #20]
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	9307      	str	r3, [sp, #28]
 8016ca2:	9b06      	ldr	r3, [sp, #24]
 8016ca4:	2b09      	cmp	r3, #9
 8016ca6:	f200 8089 	bhi.w	8016dbc <_dtoa_r+0x2f4>
 8016caa:	2b05      	cmp	r3, #5
 8016cac:	bfc4      	itt	gt
 8016cae:	3b04      	subgt	r3, #4
 8016cb0:	9306      	strgt	r3, [sp, #24]
 8016cb2:	9b06      	ldr	r3, [sp, #24]
 8016cb4:	f1a3 0302 	sub.w	r3, r3, #2
 8016cb8:	bfcc      	ite	gt
 8016cba:	2500      	movgt	r5, #0
 8016cbc:	2501      	movle	r5, #1
 8016cbe:	2b03      	cmp	r3, #3
 8016cc0:	f200 8087 	bhi.w	8016dd2 <_dtoa_r+0x30a>
 8016cc4:	e8df f003 	tbb	[pc, r3]
 8016cc8:	59383a2d 	.word	0x59383a2d
 8016ccc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016cd0:	441d      	add	r5, r3
 8016cd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016cd6:	2b20      	cmp	r3, #32
 8016cd8:	bfc1      	itttt	gt
 8016cda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016cde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016ce2:	fa0b f303 	lslgt.w	r3, fp, r3
 8016ce6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016cea:	bfda      	itte	le
 8016cec:	f1c3 0320 	rsble	r3, r3, #32
 8016cf0:	fa06 f003 	lslle.w	r0, r6, r3
 8016cf4:	4318      	orrgt	r0, r3
 8016cf6:	f7e9 fc05 	bl	8000504 <__aeabi_ui2d>
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	4606      	mov	r6, r0
 8016cfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016d02:	3d01      	subs	r5, #1
 8016d04:	930e      	str	r3, [sp, #56]	; 0x38
 8016d06:	e76a      	b.n	8016bde <_dtoa_r+0x116>
 8016d08:	2301      	movs	r3, #1
 8016d0a:	e7b2      	b.n	8016c72 <_dtoa_r+0x1aa>
 8016d0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8016d0e:	e7b1      	b.n	8016c74 <_dtoa_r+0x1ac>
 8016d10:	9b04      	ldr	r3, [sp, #16]
 8016d12:	9a00      	ldr	r2, [sp, #0]
 8016d14:	1a9b      	subs	r3, r3, r2
 8016d16:	9304      	str	r3, [sp, #16]
 8016d18:	4253      	negs	r3, r2
 8016d1a:	9307      	str	r3, [sp, #28]
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d20:	e7bf      	b.n	8016ca2 <_dtoa_r+0x1da>
 8016d22:	2300      	movs	r3, #0
 8016d24:	9308      	str	r3, [sp, #32]
 8016d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	dc55      	bgt.n	8016dd8 <_dtoa_r+0x310>
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016d32:	461a      	mov	r2, r3
 8016d34:	9209      	str	r2, [sp, #36]	; 0x24
 8016d36:	e00c      	b.n	8016d52 <_dtoa_r+0x28a>
 8016d38:	2301      	movs	r3, #1
 8016d3a:	e7f3      	b.n	8016d24 <_dtoa_r+0x25c>
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d40:	9308      	str	r3, [sp, #32]
 8016d42:	9b00      	ldr	r3, [sp, #0]
 8016d44:	4413      	add	r3, r2
 8016d46:	9302      	str	r3, [sp, #8]
 8016d48:	3301      	adds	r3, #1
 8016d4a:	2b01      	cmp	r3, #1
 8016d4c:	9303      	str	r3, [sp, #12]
 8016d4e:	bfb8      	it	lt
 8016d50:	2301      	movlt	r3, #1
 8016d52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016d54:	2200      	movs	r2, #0
 8016d56:	6042      	str	r2, [r0, #4]
 8016d58:	2204      	movs	r2, #4
 8016d5a:	f102 0614 	add.w	r6, r2, #20
 8016d5e:	429e      	cmp	r6, r3
 8016d60:	6841      	ldr	r1, [r0, #4]
 8016d62:	d93d      	bls.n	8016de0 <_dtoa_r+0x318>
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 fd81 	bl	801786c <_Balloc>
 8016d6a:	9001      	str	r0, [sp, #4]
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	d13b      	bne.n	8016de8 <_dtoa_r+0x320>
 8016d70:	4b11      	ldr	r3, [pc, #68]	; (8016db8 <_dtoa_r+0x2f0>)
 8016d72:	4602      	mov	r2, r0
 8016d74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016d78:	e6c0      	b.n	8016afc <_dtoa_r+0x34>
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	e7df      	b.n	8016d3e <_dtoa_r+0x276>
 8016d7e:	bf00      	nop
 8016d80:	636f4361 	.word	0x636f4361
 8016d84:	3fd287a7 	.word	0x3fd287a7
 8016d88:	8b60c8b3 	.word	0x8b60c8b3
 8016d8c:	3fc68a28 	.word	0x3fc68a28
 8016d90:	509f79fb 	.word	0x509f79fb
 8016d94:	3fd34413 	.word	0x3fd34413
 8016d98:	08018acd 	.word	0x08018acd
 8016d9c:	08018ae4 	.word	0x08018ae4
 8016da0:	7ff00000 	.word	0x7ff00000
 8016da4:	08018ac9 	.word	0x08018ac9
 8016da8:	08018ac0 	.word	0x08018ac0
 8016dac:	08018a9d 	.word	0x08018a9d
 8016db0:	3ff80000 	.word	0x3ff80000
 8016db4:	08018bd8 	.word	0x08018bd8
 8016db8:	08018b3f 	.word	0x08018b3f
 8016dbc:	2501      	movs	r5, #1
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	9306      	str	r3, [sp, #24]
 8016dc2:	9508      	str	r5, [sp, #32]
 8016dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8016dc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016dcc:	2200      	movs	r2, #0
 8016dce:	2312      	movs	r3, #18
 8016dd0:	e7b0      	b.n	8016d34 <_dtoa_r+0x26c>
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	9308      	str	r3, [sp, #32]
 8016dd6:	e7f5      	b.n	8016dc4 <_dtoa_r+0x2fc>
 8016dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016dde:	e7b8      	b.n	8016d52 <_dtoa_r+0x28a>
 8016de0:	3101      	adds	r1, #1
 8016de2:	6041      	str	r1, [r0, #4]
 8016de4:	0052      	lsls	r2, r2, #1
 8016de6:	e7b8      	b.n	8016d5a <_dtoa_r+0x292>
 8016de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dea:	9a01      	ldr	r2, [sp, #4]
 8016dec:	601a      	str	r2, [r3, #0]
 8016dee:	9b03      	ldr	r3, [sp, #12]
 8016df0:	2b0e      	cmp	r3, #14
 8016df2:	f200 809d 	bhi.w	8016f30 <_dtoa_r+0x468>
 8016df6:	2d00      	cmp	r5, #0
 8016df8:	f000 809a 	beq.w	8016f30 <_dtoa_r+0x468>
 8016dfc:	9b00      	ldr	r3, [sp, #0]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	dd32      	ble.n	8016e68 <_dtoa_r+0x3a0>
 8016e02:	4ab7      	ldr	r2, [pc, #732]	; (80170e0 <_dtoa_r+0x618>)
 8016e04:	f003 030f 	and.w	r3, r3, #15
 8016e08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016e0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016e10:	9b00      	ldr	r3, [sp, #0]
 8016e12:	05d8      	lsls	r0, r3, #23
 8016e14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016e18:	d516      	bpl.n	8016e48 <_dtoa_r+0x380>
 8016e1a:	4bb2      	ldr	r3, [pc, #712]	; (80170e4 <_dtoa_r+0x61c>)
 8016e1c:	ec51 0b19 	vmov	r0, r1, d9
 8016e20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016e24:	f7e9 fd12 	bl	800084c <__aeabi_ddiv>
 8016e28:	f007 070f 	and.w	r7, r7, #15
 8016e2c:	4682      	mov	sl, r0
 8016e2e:	468b      	mov	fp, r1
 8016e30:	2503      	movs	r5, #3
 8016e32:	4eac      	ldr	r6, [pc, #688]	; (80170e4 <_dtoa_r+0x61c>)
 8016e34:	b957      	cbnz	r7, 8016e4c <_dtoa_r+0x384>
 8016e36:	4642      	mov	r2, r8
 8016e38:	464b      	mov	r3, r9
 8016e3a:	4650      	mov	r0, sl
 8016e3c:	4659      	mov	r1, fp
 8016e3e:	f7e9 fd05 	bl	800084c <__aeabi_ddiv>
 8016e42:	4682      	mov	sl, r0
 8016e44:	468b      	mov	fp, r1
 8016e46:	e028      	b.n	8016e9a <_dtoa_r+0x3d2>
 8016e48:	2502      	movs	r5, #2
 8016e4a:	e7f2      	b.n	8016e32 <_dtoa_r+0x36a>
 8016e4c:	07f9      	lsls	r1, r7, #31
 8016e4e:	d508      	bpl.n	8016e62 <_dtoa_r+0x39a>
 8016e50:	4640      	mov	r0, r8
 8016e52:	4649      	mov	r1, r9
 8016e54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016e58:	f7e9 fbce 	bl	80005f8 <__aeabi_dmul>
 8016e5c:	3501      	adds	r5, #1
 8016e5e:	4680      	mov	r8, r0
 8016e60:	4689      	mov	r9, r1
 8016e62:	107f      	asrs	r7, r7, #1
 8016e64:	3608      	adds	r6, #8
 8016e66:	e7e5      	b.n	8016e34 <_dtoa_r+0x36c>
 8016e68:	f000 809b 	beq.w	8016fa2 <_dtoa_r+0x4da>
 8016e6c:	9b00      	ldr	r3, [sp, #0]
 8016e6e:	4f9d      	ldr	r7, [pc, #628]	; (80170e4 <_dtoa_r+0x61c>)
 8016e70:	425e      	negs	r6, r3
 8016e72:	4b9b      	ldr	r3, [pc, #620]	; (80170e0 <_dtoa_r+0x618>)
 8016e74:	f006 020f 	and.w	r2, r6, #15
 8016e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e80:	ec51 0b19 	vmov	r0, r1, d9
 8016e84:	f7e9 fbb8 	bl	80005f8 <__aeabi_dmul>
 8016e88:	1136      	asrs	r6, r6, #4
 8016e8a:	4682      	mov	sl, r0
 8016e8c:	468b      	mov	fp, r1
 8016e8e:	2300      	movs	r3, #0
 8016e90:	2502      	movs	r5, #2
 8016e92:	2e00      	cmp	r6, #0
 8016e94:	d17a      	bne.n	8016f8c <_dtoa_r+0x4c4>
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d1d3      	bne.n	8016e42 <_dtoa_r+0x37a>
 8016e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	f000 8082 	beq.w	8016fa6 <_dtoa_r+0x4de>
 8016ea2:	4b91      	ldr	r3, [pc, #580]	; (80170e8 <_dtoa_r+0x620>)
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	4650      	mov	r0, sl
 8016ea8:	4659      	mov	r1, fp
 8016eaa:	f7e9 fe17 	bl	8000adc <__aeabi_dcmplt>
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	d079      	beq.n	8016fa6 <_dtoa_r+0x4de>
 8016eb2:	9b03      	ldr	r3, [sp, #12]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d076      	beq.n	8016fa6 <_dtoa_r+0x4de>
 8016eb8:	9b02      	ldr	r3, [sp, #8]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	dd36      	ble.n	8016f2c <_dtoa_r+0x464>
 8016ebe:	9b00      	ldr	r3, [sp, #0]
 8016ec0:	4650      	mov	r0, sl
 8016ec2:	4659      	mov	r1, fp
 8016ec4:	1e5f      	subs	r7, r3, #1
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	4b88      	ldr	r3, [pc, #544]	; (80170ec <_dtoa_r+0x624>)
 8016eca:	f7e9 fb95 	bl	80005f8 <__aeabi_dmul>
 8016ece:	9e02      	ldr	r6, [sp, #8]
 8016ed0:	4682      	mov	sl, r0
 8016ed2:	468b      	mov	fp, r1
 8016ed4:	3501      	adds	r5, #1
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	f7e9 fb24 	bl	8000524 <__aeabi_i2d>
 8016edc:	4652      	mov	r2, sl
 8016ede:	465b      	mov	r3, fp
 8016ee0:	f7e9 fb8a 	bl	80005f8 <__aeabi_dmul>
 8016ee4:	4b82      	ldr	r3, [pc, #520]	; (80170f0 <_dtoa_r+0x628>)
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	f7e9 f9d0 	bl	800028c <__adddf3>
 8016eec:	46d0      	mov	r8, sl
 8016eee:	46d9      	mov	r9, fp
 8016ef0:	4682      	mov	sl, r0
 8016ef2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016ef6:	2e00      	cmp	r6, #0
 8016ef8:	d158      	bne.n	8016fac <_dtoa_r+0x4e4>
 8016efa:	4b7e      	ldr	r3, [pc, #504]	; (80170f4 <_dtoa_r+0x62c>)
 8016efc:	2200      	movs	r2, #0
 8016efe:	4640      	mov	r0, r8
 8016f00:	4649      	mov	r1, r9
 8016f02:	f7e9 f9c1 	bl	8000288 <__aeabi_dsub>
 8016f06:	4652      	mov	r2, sl
 8016f08:	465b      	mov	r3, fp
 8016f0a:	4680      	mov	r8, r0
 8016f0c:	4689      	mov	r9, r1
 8016f0e:	f7e9 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 8016f12:	2800      	cmp	r0, #0
 8016f14:	f040 8295 	bne.w	8017442 <_dtoa_r+0x97a>
 8016f18:	4652      	mov	r2, sl
 8016f1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016f1e:	4640      	mov	r0, r8
 8016f20:	4649      	mov	r1, r9
 8016f22:	f7e9 fddb 	bl	8000adc <__aeabi_dcmplt>
 8016f26:	2800      	cmp	r0, #0
 8016f28:	f040 8289 	bne.w	801743e <_dtoa_r+0x976>
 8016f2c:	ec5b ab19 	vmov	sl, fp, d9
 8016f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	f2c0 8148 	blt.w	80171c8 <_dtoa_r+0x700>
 8016f38:	9a00      	ldr	r2, [sp, #0]
 8016f3a:	2a0e      	cmp	r2, #14
 8016f3c:	f300 8144 	bgt.w	80171c8 <_dtoa_r+0x700>
 8016f40:	4b67      	ldr	r3, [pc, #412]	; (80170e0 <_dtoa_r+0x618>)
 8016f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	f280 80d5 	bge.w	80170fc <_dtoa_r+0x634>
 8016f52:	9b03      	ldr	r3, [sp, #12]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	f300 80d1 	bgt.w	80170fc <_dtoa_r+0x634>
 8016f5a:	f040 826f 	bne.w	801743c <_dtoa_r+0x974>
 8016f5e:	4b65      	ldr	r3, [pc, #404]	; (80170f4 <_dtoa_r+0x62c>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	4640      	mov	r0, r8
 8016f64:	4649      	mov	r1, r9
 8016f66:	f7e9 fb47 	bl	80005f8 <__aeabi_dmul>
 8016f6a:	4652      	mov	r2, sl
 8016f6c:	465b      	mov	r3, fp
 8016f6e:	f7e9 fdc9 	bl	8000b04 <__aeabi_dcmpge>
 8016f72:	9e03      	ldr	r6, [sp, #12]
 8016f74:	4637      	mov	r7, r6
 8016f76:	2800      	cmp	r0, #0
 8016f78:	f040 8245 	bne.w	8017406 <_dtoa_r+0x93e>
 8016f7c:	9d01      	ldr	r5, [sp, #4]
 8016f7e:	2331      	movs	r3, #49	; 0x31
 8016f80:	f805 3b01 	strb.w	r3, [r5], #1
 8016f84:	9b00      	ldr	r3, [sp, #0]
 8016f86:	3301      	adds	r3, #1
 8016f88:	9300      	str	r3, [sp, #0]
 8016f8a:	e240      	b.n	801740e <_dtoa_r+0x946>
 8016f8c:	07f2      	lsls	r2, r6, #31
 8016f8e:	d505      	bpl.n	8016f9c <_dtoa_r+0x4d4>
 8016f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f94:	f7e9 fb30 	bl	80005f8 <__aeabi_dmul>
 8016f98:	3501      	adds	r5, #1
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	1076      	asrs	r6, r6, #1
 8016f9e:	3708      	adds	r7, #8
 8016fa0:	e777      	b.n	8016e92 <_dtoa_r+0x3ca>
 8016fa2:	2502      	movs	r5, #2
 8016fa4:	e779      	b.n	8016e9a <_dtoa_r+0x3d2>
 8016fa6:	9f00      	ldr	r7, [sp, #0]
 8016fa8:	9e03      	ldr	r6, [sp, #12]
 8016faa:	e794      	b.n	8016ed6 <_dtoa_r+0x40e>
 8016fac:	9901      	ldr	r1, [sp, #4]
 8016fae:	4b4c      	ldr	r3, [pc, #304]	; (80170e0 <_dtoa_r+0x618>)
 8016fb0:	4431      	add	r1, r6
 8016fb2:	910d      	str	r1, [sp, #52]	; 0x34
 8016fb4:	9908      	ldr	r1, [sp, #32]
 8016fb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016fba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016fbe:	2900      	cmp	r1, #0
 8016fc0:	d043      	beq.n	801704a <_dtoa_r+0x582>
 8016fc2:	494d      	ldr	r1, [pc, #308]	; (80170f8 <_dtoa_r+0x630>)
 8016fc4:	2000      	movs	r0, #0
 8016fc6:	f7e9 fc41 	bl	800084c <__aeabi_ddiv>
 8016fca:	4652      	mov	r2, sl
 8016fcc:	465b      	mov	r3, fp
 8016fce:	f7e9 f95b 	bl	8000288 <__aeabi_dsub>
 8016fd2:	9d01      	ldr	r5, [sp, #4]
 8016fd4:	4682      	mov	sl, r0
 8016fd6:	468b      	mov	fp, r1
 8016fd8:	4649      	mov	r1, r9
 8016fda:	4640      	mov	r0, r8
 8016fdc:	f7e9 fdbc 	bl	8000b58 <__aeabi_d2iz>
 8016fe0:	4606      	mov	r6, r0
 8016fe2:	f7e9 fa9f 	bl	8000524 <__aeabi_i2d>
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	460b      	mov	r3, r1
 8016fea:	4640      	mov	r0, r8
 8016fec:	4649      	mov	r1, r9
 8016fee:	f7e9 f94b 	bl	8000288 <__aeabi_dsub>
 8016ff2:	3630      	adds	r6, #48	; 0x30
 8016ff4:	f805 6b01 	strb.w	r6, [r5], #1
 8016ff8:	4652      	mov	r2, sl
 8016ffa:	465b      	mov	r3, fp
 8016ffc:	4680      	mov	r8, r0
 8016ffe:	4689      	mov	r9, r1
 8017000:	f7e9 fd6c 	bl	8000adc <__aeabi_dcmplt>
 8017004:	2800      	cmp	r0, #0
 8017006:	d163      	bne.n	80170d0 <_dtoa_r+0x608>
 8017008:	4642      	mov	r2, r8
 801700a:	464b      	mov	r3, r9
 801700c:	4936      	ldr	r1, [pc, #216]	; (80170e8 <_dtoa_r+0x620>)
 801700e:	2000      	movs	r0, #0
 8017010:	f7e9 f93a 	bl	8000288 <__aeabi_dsub>
 8017014:	4652      	mov	r2, sl
 8017016:	465b      	mov	r3, fp
 8017018:	f7e9 fd60 	bl	8000adc <__aeabi_dcmplt>
 801701c:	2800      	cmp	r0, #0
 801701e:	f040 80b5 	bne.w	801718c <_dtoa_r+0x6c4>
 8017022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017024:	429d      	cmp	r5, r3
 8017026:	d081      	beq.n	8016f2c <_dtoa_r+0x464>
 8017028:	4b30      	ldr	r3, [pc, #192]	; (80170ec <_dtoa_r+0x624>)
 801702a:	2200      	movs	r2, #0
 801702c:	4650      	mov	r0, sl
 801702e:	4659      	mov	r1, fp
 8017030:	f7e9 fae2 	bl	80005f8 <__aeabi_dmul>
 8017034:	4b2d      	ldr	r3, [pc, #180]	; (80170ec <_dtoa_r+0x624>)
 8017036:	4682      	mov	sl, r0
 8017038:	468b      	mov	fp, r1
 801703a:	4640      	mov	r0, r8
 801703c:	4649      	mov	r1, r9
 801703e:	2200      	movs	r2, #0
 8017040:	f7e9 fada 	bl	80005f8 <__aeabi_dmul>
 8017044:	4680      	mov	r8, r0
 8017046:	4689      	mov	r9, r1
 8017048:	e7c6      	b.n	8016fd8 <_dtoa_r+0x510>
 801704a:	4650      	mov	r0, sl
 801704c:	4659      	mov	r1, fp
 801704e:	f7e9 fad3 	bl	80005f8 <__aeabi_dmul>
 8017052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017054:	9d01      	ldr	r5, [sp, #4]
 8017056:	930f      	str	r3, [sp, #60]	; 0x3c
 8017058:	4682      	mov	sl, r0
 801705a:	468b      	mov	fp, r1
 801705c:	4649      	mov	r1, r9
 801705e:	4640      	mov	r0, r8
 8017060:	f7e9 fd7a 	bl	8000b58 <__aeabi_d2iz>
 8017064:	4606      	mov	r6, r0
 8017066:	f7e9 fa5d 	bl	8000524 <__aeabi_i2d>
 801706a:	3630      	adds	r6, #48	; 0x30
 801706c:	4602      	mov	r2, r0
 801706e:	460b      	mov	r3, r1
 8017070:	4640      	mov	r0, r8
 8017072:	4649      	mov	r1, r9
 8017074:	f7e9 f908 	bl	8000288 <__aeabi_dsub>
 8017078:	f805 6b01 	strb.w	r6, [r5], #1
 801707c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801707e:	429d      	cmp	r5, r3
 8017080:	4680      	mov	r8, r0
 8017082:	4689      	mov	r9, r1
 8017084:	f04f 0200 	mov.w	r2, #0
 8017088:	d124      	bne.n	80170d4 <_dtoa_r+0x60c>
 801708a:	4b1b      	ldr	r3, [pc, #108]	; (80170f8 <_dtoa_r+0x630>)
 801708c:	4650      	mov	r0, sl
 801708e:	4659      	mov	r1, fp
 8017090:	f7e9 f8fc 	bl	800028c <__adddf3>
 8017094:	4602      	mov	r2, r0
 8017096:	460b      	mov	r3, r1
 8017098:	4640      	mov	r0, r8
 801709a:	4649      	mov	r1, r9
 801709c:	f7e9 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d173      	bne.n	801718c <_dtoa_r+0x6c4>
 80170a4:	4652      	mov	r2, sl
 80170a6:	465b      	mov	r3, fp
 80170a8:	4913      	ldr	r1, [pc, #76]	; (80170f8 <_dtoa_r+0x630>)
 80170aa:	2000      	movs	r0, #0
 80170ac:	f7e9 f8ec 	bl	8000288 <__aeabi_dsub>
 80170b0:	4602      	mov	r2, r0
 80170b2:	460b      	mov	r3, r1
 80170b4:	4640      	mov	r0, r8
 80170b6:	4649      	mov	r1, r9
 80170b8:	f7e9 fd10 	bl	8000adc <__aeabi_dcmplt>
 80170bc:	2800      	cmp	r0, #0
 80170be:	f43f af35 	beq.w	8016f2c <_dtoa_r+0x464>
 80170c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80170c4:	1e6b      	subs	r3, r5, #1
 80170c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80170c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80170cc:	2b30      	cmp	r3, #48	; 0x30
 80170ce:	d0f8      	beq.n	80170c2 <_dtoa_r+0x5fa>
 80170d0:	9700      	str	r7, [sp, #0]
 80170d2:	e049      	b.n	8017168 <_dtoa_r+0x6a0>
 80170d4:	4b05      	ldr	r3, [pc, #20]	; (80170ec <_dtoa_r+0x624>)
 80170d6:	f7e9 fa8f 	bl	80005f8 <__aeabi_dmul>
 80170da:	4680      	mov	r8, r0
 80170dc:	4689      	mov	r9, r1
 80170de:	e7bd      	b.n	801705c <_dtoa_r+0x594>
 80170e0:	08018bd8 	.word	0x08018bd8
 80170e4:	08018bb0 	.word	0x08018bb0
 80170e8:	3ff00000 	.word	0x3ff00000
 80170ec:	40240000 	.word	0x40240000
 80170f0:	401c0000 	.word	0x401c0000
 80170f4:	40140000 	.word	0x40140000
 80170f8:	3fe00000 	.word	0x3fe00000
 80170fc:	9d01      	ldr	r5, [sp, #4]
 80170fe:	4656      	mov	r6, sl
 8017100:	465f      	mov	r7, fp
 8017102:	4642      	mov	r2, r8
 8017104:	464b      	mov	r3, r9
 8017106:	4630      	mov	r0, r6
 8017108:	4639      	mov	r1, r7
 801710a:	f7e9 fb9f 	bl	800084c <__aeabi_ddiv>
 801710e:	f7e9 fd23 	bl	8000b58 <__aeabi_d2iz>
 8017112:	4682      	mov	sl, r0
 8017114:	f7e9 fa06 	bl	8000524 <__aeabi_i2d>
 8017118:	4642      	mov	r2, r8
 801711a:	464b      	mov	r3, r9
 801711c:	f7e9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8017120:	4602      	mov	r2, r0
 8017122:	460b      	mov	r3, r1
 8017124:	4630      	mov	r0, r6
 8017126:	4639      	mov	r1, r7
 8017128:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801712c:	f7e9 f8ac 	bl	8000288 <__aeabi_dsub>
 8017130:	f805 6b01 	strb.w	r6, [r5], #1
 8017134:	9e01      	ldr	r6, [sp, #4]
 8017136:	9f03      	ldr	r7, [sp, #12]
 8017138:	1bae      	subs	r6, r5, r6
 801713a:	42b7      	cmp	r7, r6
 801713c:	4602      	mov	r2, r0
 801713e:	460b      	mov	r3, r1
 8017140:	d135      	bne.n	80171ae <_dtoa_r+0x6e6>
 8017142:	f7e9 f8a3 	bl	800028c <__adddf3>
 8017146:	4642      	mov	r2, r8
 8017148:	464b      	mov	r3, r9
 801714a:	4606      	mov	r6, r0
 801714c:	460f      	mov	r7, r1
 801714e:	f7e9 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 8017152:	b9d0      	cbnz	r0, 801718a <_dtoa_r+0x6c2>
 8017154:	4642      	mov	r2, r8
 8017156:	464b      	mov	r3, r9
 8017158:	4630      	mov	r0, r6
 801715a:	4639      	mov	r1, r7
 801715c:	f7e9 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8017160:	b110      	cbz	r0, 8017168 <_dtoa_r+0x6a0>
 8017162:	f01a 0f01 	tst.w	sl, #1
 8017166:	d110      	bne.n	801718a <_dtoa_r+0x6c2>
 8017168:	4620      	mov	r0, r4
 801716a:	ee18 1a10 	vmov	r1, s16
 801716e:	f000 fbbd 	bl	80178ec <_Bfree>
 8017172:	2300      	movs	r3, #0
 8017174:	9800      	ldr	r0, [sp, #0]
 8017176:	702b      	strb	r3, [r5, #0]
 8017178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801717a:	3001      	adds	r0, #1
 801717c:	6018      	str	r0, [r3, #0]
 801717e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017180:	2b00      	cmp	r3, #0
 8017182:	f43f acf1 	beq.w	8016b68 <_dtoa_r+0xa0>
 8017186:	601d      	str	r5, [r3, #0]
 8017188:	e4ee      	b.n	8016b68 <_dtoa_r+0xa0>
 801718a:	9f00      	ldr	r7, [sp, #0]
 801718c:	462b      	mov	r3, r5
 801718e:	461d      	mov	r5, r3
 8017190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017194:	2a39      	cmp	r2, #57	; 0x39
 8017196:	d106      	bne.n	80171a6 <_dtoa_r+0x6de>
 8017198:	9a01      	ldr	r2, [sp, #4]
 801719a:	429a      	cmp	r2, r3
 801719c:	d1f7      	bne.n	801718e <_dtoa_r+0x6c6>
 801719e:	9901      	ldr	r1, [sp, #4]
 80171a0:	2230      	movs	r2, #48	; 0x30
 80171a2:	3701      	adds	r7, #1
 80171a4:	700a      	strb	r2, [r1, #0]
 80171a6:	781a      	ldrb	r2, [r3, #0]
 80171a8:	3201      	adds	r2, #1
 80171aa:	701a      	strb	r2, [r3, #0]
 80171ac:	e790      	b.n	80170d0 <_dtoa_r+0x608>
 80171ae:	4ba6      	ldr	r3, [pc, #664]	; (8017448 <_dtoa_r+0x980>)
 80171b0:	2200      	movs	r2, #0
 80171b2:	f7e9 fa21 	bl	80005f8 <__aeabi_dmul>
 80171b6:	2200      	movs	r2, #0
 80171b8:	2300      	movs	r3, #0
 80171ba:	4606      	mov	r6, r0
 80171bc:	460f      	mov	r7, r1
 80171be:	f7e9 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80171c2:	2800      	cmp	r0, #0
 80171c4:	d09d      	beq.n	8017102 <_dtoa_r+0x63a>
 80171c6:	e7cf      	b.n	8017168 <_dtoa_r+0x6a0>
 80171c8:	9a08      	ldr	r2, [sp, #32]
 80171ca:	2a00      	cmp	r2, #0
 80171cc:	f000 80d7 	beq.w	801737e <_dtoa_r+0x8b6>
 80171d0:	9a06      	ldr	r2, [sp, #24]
 80171d2:	2a01      	cmp	r2, #1
 80171d4:	f300 80ba 	bgt.w	801734c <_dtoa_r+0x884>
 80171d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80171da:	2a00      	cmp	r2, #0
 80171dc:	f000 80b2 	beq.w	8017344 <_dtoa_r+0x87c>
 80171e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80171e4:	9e07      	ldr	r6, [sp, #28]
 80171e6:	9d04      	ldr	r5, [sp, #16]
 80171e8:	9a04      	ldr	r2, [sp, #16]
 80171ea:	441a      	add	r2, r3
 80171ec:	9204      	str	r2, [sp, #16]
 80171ee:	9a05      	ldr	r2, [sp, #20]
 80171f0:	2101      	movs	r1, #1
 80171f2:	441a      	add	r2, r3
 80171f4:	4620      	mov	r0, r4
 80171f6:	9205      	str	r2, [sp, #20]
 80171f8:	f000 fc30 	bl	8017a5c <__i2b>
 80171fc:	4607      	mov	r7, r0
 80171fe:	2d00      	cmp	r5, #0
 8017200:	dd0c      	ble.n	801721c <_dtoa_r+0x754>
 8017202:	9b05      	ldr	r3, [sp, #20]
 8017204:	2b00      	cmp	r3, #0
 8017206:	dd09      	ble.n	801721c <_dtoa_r+0x754>
 8017208:	42ab      	cmp	r3, r5
 801720a:	9a04      	ldr	r2, [sp, #16]
 801720c:	bfa8      	it	ge
 801720e:	462b      	movge	r3, r5
 8017210:	1ad2      	subs	r2, r2, r3
 8017212:	9204      	str	r2, [sp, #16]
 8017214:	9a05      	ldr	r2, [sp, #20]
 8017216:	1aed      	subs	r5, r5, r3
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	9305      	str	r3, [sp, #20]
 801721c:	9b07      	ldr	r3, [sp, #28]
 801721e:	b31b      	cbz	r3, 8017268 <_dtoa_r+0x7a0>
 8017220:	9b08      	ldr	r3, [sp, #32]
 8017222:	2b00      	cmp	r3, #0
 8017224:	f000 80af 	beq.w	8017386 <_dtoa_r+0x8be>
 8017228:	2e00      	cmp	r6, #0
 801722a:	dd13      	ble.n	8017254 <_dtoa_r+0x78c>
 801722c:	4639      	mov	r1, r7
 801722e:	4632      	mov	r2, r6
 8017230:	4620      	mov	r0, r4
 8017232:	f000 fcd3 	bl	8017bdc <__pow5mult>
 8017236:	ee18 2a10 	vmov	r2, s16
 801723a:	4601      	mov	r1, r0
 801723c:	4607      	mov	r7, r0
 801723e:	4620      	mov	r0, r4
 8017240:	f000 fc22 	bl	8017a88 <__multiply>
 8017244:	ee18 1a10 	vmov	r1, s16
 8017248:	4680      	mov	r8, r0
 801724a:	4620      	mov	r0, r4
 801724c:	f000 fb4e 	bl	80178ec <_Bfree>
 8017250:	ee08 8a10 	vmov	s16, r8
 8017254:	9b07      	ldr	r3, [sp, #28]
 8017256:	1b9a      	subs	r2, r3, r6
 8017258:	d006      	beq.n	8017268 <_dtoa_r+0x7a0>
 801725a:	ee18 1a10 	vmov	r1, s16
 801725e:	4620      	mov	r0, r4
 8017260:	f000 fcbc 	bl	8017bdc <__pow5mult>
 8017264:	ee08 0a10 	vmov	s16, r0
 8017268:	2101      	movs	r1, #1
 801726a:	4620      	mov	r0, r4
 801726c:	f000 fbf6 	bl	8017a5c <__i2b>
 8017270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017272:	2b00      	cmp	r3, #0
 8017274:	4606      	mov	r6, r0
 8017276:	f340 8088 	ble.w	801738a <_dtoa_r+0x8c2>
 801727a:	461a      	mov	r2, r3
 801727c:	4601      	mov	r1, r0
 801727e:	4620      	mov	r0, r4
 8017280:	f000 fcac 	bl	8017bdc <__pow5mult>
 8017284:	9b06      	ldr	r3, [sp, #24]
 8017286:	2b01      	cmp	r3, #1
 8017288:	4606      	mov	r6, r0
 801728a:	f340 8081 	ble.w	8017390 <_dtoa_r+0x8c8>
 801728e:	f04f 0800 	mov.w	r8, #0
 8017292:	6933      	ldr	r3, [r6, #16]
 8017294:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017298:	6918      	ldr	r0, [r3, #16]
 801729a:	f000 fb8f 	bl	80179bc <__hi0bits>
 801729e:	f1c0 0020 	rsb	r0, r0, #32
 80172a2:	9b05      	ldr	r3, [sp, #20]
 80172a4:	4418      	add	r0, r3
 80172a6:	f010 001f 	ands.w	r0, r0, #31
 80172aa:	f000 8092 	beq.w	80173d2 <_dtoa_r+0x90a>
 80172ae:	f1c0 0320 	rsb	r3, r0, #32
 80172b2:	2b04      	cmp	r3, #4
 80172b4:	f340 808a 	ble.w	80173cc <_dtoa_r+0x904>
 80172b8:	f1c0 001c 	rsb	r0, r0, #28
 80172bc:	9b04      	ldr	r3, [sp, #16]
 80172be:	4403      	add	r3, r0
 80172c0:	9304      	str	r3, [sp, #16]
 80172c2:	9b05      	ldr	r3, [sp, #20]
 80172c4:	4403      	add	r3, r0
 80172c6:	4405      	add	r5, r0
 80172c8:	9305      	str	r3, [sp, #20]
 80172ca:	9b04      	ldr	r3, [sp, #16]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	dd07      	ble.n	80172e0 <_dtoa_r+0x818>
 80172d0:	ee18 1a10 	vmov	r1, s16
 80172d4:	461a      	mov	r2, r3
 80172d6:	4620      	mov	r0, r4
 80172d8:	f000 fcda 	bl	8017c90 <__lshift>
 80172dc:	ee08 0a10 	vmov	s16, r0
 80172e0:	9b05      	ldr	r3, [sp, #20]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	dd05      	ble.n	80172f2 <_dtoa_r+0x82a>
 80172e6:	4631      	mov	r1, r6
 80172e8:	461a      	mov	r2, r3
 80172ea:	4620      	mov	r0, r4
 80172ec:	f000 fcd0 	bl	8017c90 <__lshift>
 80172f0:	4606      	mov	r6, r0
 80172f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d06e      	beq.n	80173d6 <_dtoa_r+0x90e>
 80172f8:	ee18 0a10 	vmov	r0, s16
 80172fc:	4631      	mov	r1, r6
 80172fe:	f000 fd37 	bl	8017d70 <__mcmp>
 8017302:	2800      	cmp	r0, #0
 8017304:	da67      	bge.n	80173d6 <_dtoa_r+0x90e>
 8017306:	9b00      	ldr	r3, [sp, #0]
 8017308:	3b01      	subs	r3, #1
 801730a:	ee18 1a10 	vmov	r1, s16
 801730e:	9300      	str	r3, [sp, #0]
 8017310:	220a      	movs	r2, #10
 8017312:	2300      	movs	r3, #0
 8017314:	4620      	mov	r0, r4
 8017316:	f000 fb0b 	bl	8017930 <__multadd>
 801731a:	9b08      	ldr	r3, [sp, #32]
 801731c:	ee08 0a10 	vmov	s16, r0
 8017320:	2b00      	cmp	r3, #0
 8017322:	f000 81b1 	beq.w	8017688 <_dtoa_r+0xbc0>
 8017326:	2300      	movs	r3, #0
 8017328:	4639      	mov	r1, r7
 801732a:	220a      	movs	r2, #10
 801732c:	4620      	mov	r0, r4
 801732e:	f000 faff 	bl	8017930 <__multadd>
 8017332:	9b02      	ldr	r3, [sp, #8]
 8017334:	2b00      	cmp	r3, #0
 8017336:	4607      	mov	r7, r0
 8017338:	f300 808e 	bgt.w	8017458 <_dtoa_r+0x990>
 801733c:	9b06      	ldr	r3, [sp, #24]
 801733e:	2b02      	cmp	r3, #2
 8017340:	dc51      	bgt.n	80173e6 <_dtoa_r+0x91e>
 8017342:	e089      	b.n	8017458 <_dtoa_r+0x990>
 8017344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801734a:	e74b      	b.n	80171e4 <_dtoa_r+0x71c>
 801734c:	9b03      	ldr	r3, [sp, #12]
 801734e:	1e5e      	subs	r6, r3, #1
 8017350:	9b07      	ldr	r3, [sp, #28]
 8017352:	42b3      	cmp	r3, r6
 8017354:	bfbf      	itttt	lt
 8017356:	9b07      	ldrlt	r3, [sp, #28]
 8017358:	9607      	strlt	r6, [sp, #28]
 801735a:	1af2      	sublt	r2, r6, r3
 801735c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801735e:	bfb6      	itet	lt
 8017360:	189b      	addlt	r3, r3, r2
 8017362:	1b9e      	subge	r6, r3, r6
 8017364:	930a      	strlt	r3, [sp, #40]	; 0x28
 8017366:	9b03      	ldr	r3, [sp, #12]
 8017368:	bfb8      	it	lt
 801736a:	2600      	movlt	r6, #0
 801736c:	2b00      	cmp	r3, #0
 801736e:	bfb7      	itett	lt
 8017370:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017374:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017378:	1a9d      	sublt	r5, r3, r2
 801737a:	2300      	movlt	r3, #0
 801737c:	e734      	b.n	80171e8 <_dtoa_r+0x720>
 801737e:	9e07      	ldr	r6, [sp, #28]
 8017380:	9d04      	ldr	r5, [sp, #16]
 8017382:	9f08      	ldr	r7, [sp, #32]
 8017384:	e73b      	b.n	80171fe <_dtoa_r+0x736>
 8017386:	9a07      	ldr	r2, [sp, #28]
 8017388:	e767      	b.n	801725a <_dtoa_r+0x792>
 801738a:	9b06      	ldr	r3, [sp, #24]
 801738c:	2b01      	cmp	r3, #1
 801738e:	dc18      	bgt.n	80173c2 <_dtoa_r+0x8fa>
 8017390:	f1ba 0f00 	cmp.w	sl, #0
 8017394:	d115      	bne.n	80173c2 <_dtoa_r+0x8fa>
 8017396:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801739a:	b993      	cbnz	r3, 80173c2 <_dtoa_r+0x8fa>
 801739c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80173a0:	0d1b      	lsrs	r3, r3, #20
 80173a2:	051b      	lsls	r3, r3, #20
 80173a4:	b183      	cbz	r3, 80173c8 <_dtoa_r+0x900>
 80173a6:	9b04      	ldr	r3, [sp, #16]
 80173a8:	3301      	adds	r3, #1
 80173aa:	9304      	str	r3, [sp, #16]
 80173ac:	9b05      	ldr	r3, [sp, #20]
 80173ae:	3301      	adds	r3, #1
 80173b0:	9305      	str	r3, [sp, #20]
 80173b2:	f04f 0801 	mov.w	r8, #1
 80173b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	f47f af6a 	bne.w	8017292 <_dtoa_r+0x7ca>
 80173be:	2001      	movs	r0, #1
 80173c0:	e76f      	b.n	80172a2 <_dtoa_r+0x7da>
 80173c2:	f04f 0800 	mov.w	r8, #0
 80173c6:	e7f6      	b.n	80173b6 <_dtoa_r+0x8ee>
 80173c8:	4698      	mov	r8, r3
 80173ca:	e7f4      	b.n	80173b6 <_dtoa_r+0x8ee>
 80173cc:	f43f af7d 	beq.w	80172ca <_dtoa_r+0x802>
 80173d0:	4618      	mov	r0, r3
 80173d2:	301c      	adds	r0, #28
 80173d4:	e772      	b.n	80172bc <_dtoa_r+0x7f4>
 80173d6:	9b03      	ldr	r3, [sp, #12]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	dc37      	bgt.n	801744c <_dtoa_r+0x984>
 80173dc:	9b06      	ldr	r3, [sp, #24]
 80173de:	2b02      	cmp	r3, #2
 80173e0:	dd34      	ble.n	801744c <_dtoa_r+0x984>
 80173e2:	9b03      	ldr	r3, [sp, #12]
 80173e4:	9302      	str	r3, [sp, #8]
 80173e6:	9b02      	ldr	r3, [sp, #8]
 80173e8:	b96b      	cbnz	r3, 8017406 <_dtoa_r+0x93e>
 80173ea:	4631      	mov	r1, r6
 80173ec:	2205      	movs	r2, #5
 80173ee:	4620      	mov	r0, r4
 80173f0:	f000 fa9e 	bl	8017930 <__multadd>
 80173f4:	4601      	mov	r1, r0
 80173f6:	4606      	mov	r6, r0
 80173f8:	ee18 0a10 	vmov	r0, s16
 80173fc:	f000 fcb8 	bl	8017d70 <__mcmp>
 8017400:	2800      	cmp	r0, #0
 8017402:	f73f adbb 	bgt.w	8016f7c <_dtoa_r+0x4b4>
 8017406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017408:	9d01      	ldr	r5, [sp, #4]
 801740a:	43db      	mvns	r3, r3
 801740c:	9300      	str	r3, [sp, #0]
 801740e:	f04f 0800 	mov.w	r8, #0
 8017412:	4631      	mov	r1, r6
 8017414:	4620      	mov	r0, r4
 8017416:	f000 fa69 	bl	80178ec <_Bfree>
 801741a:	2f00      	cmp	r7, #0
 801741c:	f43f aea4 	beq.w	8017168 <_dtoa_r+0x6a0>
 8017420:	f1b8 0f00 	cmp.w	r8, #0
 8017424:	d005      	beq.n	8017432 <_dtoa_r+0x96a>
 8017426:	45b8      	cmp	r8, r7
 8017428:	d003      	beq.n	8017432 <_dtoa_r+0x96a>
 801742a:	4641      	mov	r1, r8
 801742c:	4620      	mov	r0, r4
 801742e:	f000 fa5d 	bl	80178ec <_Bfree>
 8017432:	4639      	mov	r1, r7
 8017434:	4620      	mov	r0, r4
 8017436:	f000 fa59 	bl	80178ec <_Bfree>
 801743a:	e695      	b.n	8017168 <_dtoa_r+0x6a0>
 801743c:	2600      	movs	r6, #0
 801743e:	4637      	mov	r7, r6
 8017440:	e7e1      	b.n	8017406 <_dtoa_r+0x93e>
 8017442:	9700      	str	r7, [sp, #0]
 8017444:	4637      	mov	r7, r6
 8017446:	e599      	b.n	8016f7c <_dtoa_r+0x4b4>
 8017448:	40240000 	.word	0x40240000
 801744c:	9b08      	ldr	r3, [sp, #32]
 801744e:	2b00      	cmp	r3, #0
 8017450:	f000 80ca 	beq.w	80175e8 <_dtoa_r+0xb20>
 8017454:	9b03      	ldr	r3, [sp, #12]
 8017456:	9302      	str	r3, [sp, #8]
 8017458:	2d00      	cmp	r5, #0
 801745a:	dd05      	ble.n	8017468 <_dtoa_r+0x9a0>
 801745c:	4639      	mov	r1, r7
 801745e:	462a      	mov	r2, r5
 8017460:	4620      	mov	r0, r4
 8017462:	f000 fc15 	bl	8017c90 <__lshift>
 8017466:	4607      	mov	r7, r0
 8017468:	f1b8 0f00 	cmp.w	r8, #0
 801746c:	d05b      	beq.n	8017526 <_dtoa_r+0xa5e>
 801746e:	6879      	ldr	r1, [r7, #4]
 8017470:	4620      	mov	r0, r4
 8017472:	f000 f9fb 	bl	801786c <_Balloc>
 8017476:	4605      	mov	r5, r0
 8017478:	b928      	cbnz	r0, 8017486 <_dtoa_r+0x9be>
 801747a:	4b87      	ldr	r3, [pc, #540]	; (8017698 <_dtoa_r+0xbd0>)
 801747c:	4602      	mov	r2, r0
 801747e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017482:	f7ff bb3b 	b.w	8016afc <_dtoa_r+0x34>
 8017486:	693a      	ldr	r2, [r7, #16]
 8017488:	3202      	adds	r2, #2
 801748a:	0092      	lsls	r2, r2, #2
 801748c:	f107 010c 	add.w	r1, r7, #12
 8017490:	300c      	adds	r0, #12
 8017492:	f7fe fba7 	bl	8015be4 <memcpy>
 8017496:	2201      	movs	r2, #1
 8017498:	4629      	mov	r1, r5
 801749a:	4620      	mov	r0, r4
 801749c:	f000 fbf8 	bl	8017c90 <__lshift>
 80174a0:	9b01      	ldr	r3, [sp, #4]
 80174a2:	f103 0901 	add.w	r9, r3, #1
 80174a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80174aa:	4413      	add	r3, r2
 80174ac:	9305      	str	r3, [sp, #20]
 80174ae:	f00a 0301 	and.w	r3, sl, #1
 80174b2:	46b8      	mov	r8, r7
 80174b4:	9304      	str	r3, [sp, #16]
 80174b6:	4607      	mov	r7, r0
 80174b8:	4631      	mov	r1, r6
 80174ba:	ee18 0a10 	vmov	r0, s16
 80174be:	f7ff fa77 	bl	80169b0 <quorem>
 80174c2:	4641      	mov	r1, r8
 80174c4:	9002      	str	r0, [sp, #8]
 80174c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80174ca:	ee18 0a10 	vmov	r0, s16
 80174ce:	f000 fc4f 	bl	8017d70 <__mcmp>
 80174d2:	463a      	mov	r2, r7
 80174d4:	9003      	str	r0, [sp, #12]
 80174d6:	4631      	mov	r1, r6
 80174d8:	4620      	mov	r0, r4
 80174da:	f000 fc65 	bl	8017da8 <__mdiff>
 80174de:	68c2      	ldr	r2, [r0, #12]
 80174e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80174e4:	4605      	mov	r5, r0
 80174e6:	bb02      	cbnz	r2, 801752a <_dtoa_r+0xa62>
 80174e8:	4601      	mov	r1, r0
 80174ea:	ee18 0a10 	vmov	r0, s16
 80174ee:	f000 fc3f 	bl	8017d70 <__mcmp>
 80174f2:	4602      	mov	r2, r0
 80174f4:	4629      	mov	r1, r5
 80174f6:	4620      	mov	r0, r4
 80174f8:	9207      	str	r2, [sp, #28]
 80174fa:	f000 f9f7 	bl	80178ec <_Bfree>
 80174fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017502:	ea43 0102 	orr.w	r1, r3, r2
 8017506:	9b04      	ldr	r3, [sp, #16]
 8017508:	430b      	orrs	r3, r1
 801750a:	464d      	mov	r5, r9
 801750c:	d10f      	bne.n	801752e <_dtoa_r+0xa66>
 801750e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017512:	d02a      	beq.n	801756a <_dtoa_r+0xaa2>
 8017514:	9b03      	ldr	r3, [sp, #12]
 8017516:	2b00      	cmp	r3, #0
 8017518:	dd02      	ble.n	8017520 <_dtoa_r+0xa58>
 801751a:	9b02      	ldr	r3, [sp, #8]
 801751c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017520:	f88b a000 	strb.w	sl, [fp]
 8017524:	e775      	b.n	8017412 <_dtoa_r+0x94a>
 8017526:	4638      	mov	r0, r7
 8017528:	e7ba      	b.n	80174a0 <_dtoa_r+0x9d8>
 801752a:	2201      	movs	r2, #1
 801752c:	e7e2      	b.n	80174f4 <_dtoa_r+0xa2c>
 801752e:	9b03      	ldr	r3, [sp, #12]
 8017530:	2b00      	cmp	r3, #0
 8017532:	db04      	blt.n	801753e <_dtoa_r+0xa76>
 8017534:	9906      	ldr	r1, [sp, #24]
 8017536:	430b      	orrs	r3, r1
 8017538:	9904      	ldr	r1, [sp, #16]
 801753a:	430b      	orrs	r3, r1
 801753c:	d122      	bne.n	8017584 <_dtoa_r+0xabc>
 801753e:	2a00      	cmp	r2, #0
 8017540:	ddee      	ble.n	8017520 <_dtoa_r+0xa58>
 8017542:	ee18 1a10 	vmov	r1, s16
 8017546:	2201      	movs	r2, #1
 8017548:	4620      	mov	r0, r4
 801754a:	f000 fba1 	bl	8017c90 <__lshift>
 801754e:	4631      	mov	r1, r6
 8017550:	ee08 0a10 	vmov	s16, r0
 8017554:	f000 fc0c 	bl	8017d70 <__mcmp>
 8017558:	2800      	cmp	r0, #0
 801755a:	dc03      	bgt.n	8017564 <_dtoa_r+0xa9c>
 801755c:	d1e0      	bne.n	8017520 <_dtoa_r+0xa58>
 801755e:	f01a 0f01 	tst.w	sl, #1
 8017562:	d0dd      	beq.n	8017520 <_dtoa_r+0xa58>
 8017564:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017568:	d1d7      	bne.n	801751a <_dtoa_r+0xa52>
 801756a:	2339      	movs	r3, #57	; 0x39
 801756c:	f88b 3000 	strb.w	r3, [fp]
 8017570:	462b      	mov	r3, r5
 8017572:	461d      	mov	r5, r3
 8017574:	3b01      	subs	r3, #1
 8017576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801757a:	2a39      	cmp	r2, #57	; 0x39
 801757c:	d071      	beq.n	8017662 <_dtoa_r+0xb9a>
 801757e:	3201      	adds	r2, #1
 8017580:	701a      	strb	r2, [r3, #0]
 8017582:	e746      	b.n	8017412 <_dtoa_r+0x94a>
 8017584:	2a00      	cmp	r2, #0
 8017586:	dd07      	ble.n	8017598 <_dtoa_r+0xad0>
 8017588:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801758c:	d0ed      	beq.n	801756a <_dtoa_r+0xaa2>
 801758e:	f10a 0301 	add.w	r3, sl, #1
 8017592:	f88b 3000 	strb.w	r3, [fp]
 8017596:	e73c      	b.n	8017412 <_dtoa_r+0x94a>
 8017598:	9b05      	ldr	r3, [sp, #20]
 801759a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801759e:	4599      	cmp	r9, r3
 80175a0:	d047      	beq.n	8017632 <_dtoa_r+0xb6a>
 80175a2:	ee18 1a10 	vmov	r1, s16
 80175a6:	2300      	movs	r3, #0
 80175a8:	220a      	movs	r2, #10
 80175aa:	4620      	mov	r0, r4
 80175ac:	f000 f9c0 	bl	8017930 <__multadd>
 80175b0:	45b8      	cmp	r8, r7
 80175b2:	ee08 0a10 	vmov	s16, r0
 80175b6:	f04f 0300 	mov.w	r3, #0
 80175ba:	f04f 020a 	mov.w	r2, #10
 80175be:	4641      	mov	r1, r8
 80175c0:	4620      	mov	r0, r4
 80175c2:	d106      	bne.n	80175d2 <_dtoa_r+0xb0a>
 80175c4:	f000 f9b4 	bl	8017930 <__multadd>
 80175c8:	4680      	mov	r8, r0
 80175ca:	4607      	mov	r7, r0
 80175cc:	f109 0901 	add.w	r9, r9, #1
 80175d0:	e772      	b.n	80174b8 <_dtoa_r+0x9f0>
 80175d2:	f000 f9ad 	bl	8017930 <__multadd>
 80175d6:	4639      	mov	r1, r7
 80175d8:	4680      	mov	r8, r0
 80175da:	2300      	movs	r3, #0
 80175dc:	220a      	movs	r2, #10
 80175de:	4620      	mov	r0, r4
 80175e0:	f000 f9a6 	bl	8017930 <__multadd>
 80175e4:	4607      	mov	r7, r0
 80175e6:	e7f1      	b.n	80175cc <_dtoa_r+0xb04>
 80175e8:	9b03      	ldr	r3, [sp, #12]
 80175ea:	9302      	str	r3, [sp, #8]
 80175ec:	9d01      	ldr	r5, [sp, #4]
 80175ee:	ee18 0a10 	vmov	r0, s16
 80175f2:	4631      	mov	r1, r6
 80175f4:	f7ff f9dc 	bl	80169b0 <quorem>
 80175f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80175fc:	9b01      	ldr	r3, [sp, #4]
 80175fe:	f805 ab01 	strb.w	sl, [r5], #1
 8017602:	1aea      	subs	r2, r5, r3
 8017604:	9b02      	ldr	r3, [sp, #8]
 8017606:	4293      	cmp	r3, r2
 8017608:	dd09      	ble.n	801761e <_dtoa_r+0xb56>
 801760a:	ee18 1a10 	vmov	r1, s16
 801760e:	2300      	movs	r3, #0
 8017610:	220a      	movs	r2, #10
 8017612:	4620      	mov	r0, r4
 8017614:	f000 f98c 	bl	8017930 <__multadd>
 8017618:	ee08 0a10 	vmov	s16, r0
 801761c:	e7e7      	b.n	80175ee <_dtoa_r+0xb26>
 801761e:	9b02      	ldr	r3, [sp, #8]
 8017620:	2b00      	cmp	r3, #0
 8017622:	bfc8      	it	gt
 8017624:	461d      	movgt	r5, r3
 8017626:	9b01      	ldr	r3, [sp, #4]
 8017628:	bfd8      	it	le
 801762a:	2501      	movle	r5, #1
 801762c:	441d      	add	r5, r3
 801762e:	f04f 0800 	mov.w	r8, #0
 8017632:	ee18 1a10 	vmov	r1, s16
 8017636:	2201      	movs	r2, #1
 8017638:	4620      	mov	r0, r4
 801763a:	f000 fb29 	bl	8017c90 <__lshift>
 801763e:	4631      	mov	r1, r6
 8017640:	ee08 0a10 	vmov	s16, r0
 8017644:	f000 fb94 	bl	8017d70 <__mcmp>
 8017648:	2800      	cmp	r0, #0
 801764a:	dc91      	bgt.n	8017570 <_dtoa_r+0xaa8>
 801764c:	d102      	bne.n	8017654 <_dtoa_r+0xb8c>
 801764e:	f01a 0f01 	tst.w	sl, #1
 8017652:	d18d      	bne.n	8017570 <_dtoa_r+0xaa8>
 8017654:	462b      	mov	r3, r5
 8017656:	461d      	mov	r5, r3
 8017658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801765c:	2a30      	cmp	r2, #48	; 0x30
 801765e:	d0fa      	beq.n	8017656 <_dtoa_r+0xb8e>
 8017660:	e6d7      	b.n	8017412 <_dtoa_r+0x94a>
 8017662:	9a01      	ldr	r2, [sp, #4]
 8017664:	429a      	cmp	r2, r3
 8017666:	d184      	bne.n	8017572 <_dtoa_r+0xaaa>
 8017668:	9b00      	ldr	r3, [sp, #0]
 801766a:	3301      	adds	r3, #1
 801766c:	9300      	str	r3, [sp, #0]
 801766e:	2331      	movs	r3, #49	; 0x31
 8017670:	7013      	strb	r3, [r2, #0]
 8017672:	e6ce      	b.n	8017412 <_dtoa_r+0x94a>
 8017674:	4b09      	ldr	r3, [pc, #36]	; (801769c <_dtoa_r+0xbd4>)
 8017676:	f7ff ba95 	b.w	8016ba4 <_dtoa_r+0xdc>
 801767a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801767c:	2b00      	cmp	r3, #0
 801767e:	f47f aa6e 	bne.w	8016b5e <_dtoa_r+0x96>
 8017682:	4b07      	ldr	r3, [pc, #28]	; (80176a0 <_dtoa_r+0xbd8>)
 8017684:	f7ff ba8e 	b.w	8016ba4 <_dtoa_r+0xdc>
 8017688:	9b02      	ldr	r3, [sp, #8]
 801768a:	2b00      	cmp	r3, #0
 801768c:	dcae      	bgt.n	80175ec <_dtoa_r+0xb24>
 801768e:	9b06      	ldr	r3, [sp, #24]
 8017690:	2b02      	cmp	r3, #2
 8017692:	f73f aea8 	bgt.w	80173e6 <_dtoa_r+0x91e>
 8017696:	e7a9      	b.n	80175ec <_dtoa_r+0xb24>
 8017698:	08018b3f 	.word	0x08018b3f
 801769c:	08018a9c 	.word	0x08018a9c
 80176a0:	08018ac0 	.word	0x08018ac0

080176a4 <__sflush_r>:
 80176a4:	898a      	ldrh	r2, [r1, #12]
 80176a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176aa:	4605      	mov	r5, r0
 80176ac:	0710      	lsls	r0, r2, #28
 80176ae:	460c      	mov	r4, r1
 80176b0:	d458      	bmi.n	8017764 <__sflush_r+0xc0>
 80176b2:	684b      	ldr	r3, [r1, #4]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	dc05      	bgt.n	80176c4 <__sflush_r+0x20>
 80176b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	dc02      	bgt.n	80176c4 <__sflush_r+0x20>
 80176be:	2000      	movs	r0, #0
 80176c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176c6:	2e00      	cmp	r6, #0
 80176c8:	d0f9      	beq.n	80176be <__sflush_r+0x1a>
 80176ca:	2300      	movs	r3, #0
 80176cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80176d0:	682f      	ldr	r7, [r5, #0]
 80176d2:	602b      	str	r3, [r5, #0]
 80176d4:	d032      	beq.n	801773c <__sflush_r+0x98>
 80176d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80176d8:	89a3      	ldrh	r3, [r4, #12]
 80176da:	075a      	lsls	r2, r3, #29
 80176dc:	d505      	bpl.n	80176ea <__sflush_r+0x46>
 80176de:	6863      	ldr	r3, [r4, #4]
 80176e0:	1ac0      	subs	r0, r0, r3
 80176e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80176e4:	b10b      	cbz	r3, 80176ea <__sflush_r+0x46>
 80176e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176e8:	1ac0      	subs	r0, r0, r3
 80176ea:	2300      	movs	r3, #0
 80176ec:	4602      	mov	r2, r0
 80176ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176f0:	6a21      	ldr	r1, [r4, #32]
 80176f2:	4628      	mov	r0, r5
 80176f4:	47b0      	blx	r6
 80176f6:	1c43      	adds	r3, r0, #1
 80176f8:	89a3      	ldrh	r3, [r4, #12]
 80176fa:	d106      	bne.n	801770a <__sflush_r+0x66>
 80176fc:	6829      	ldr	r1, [r5, #0]
 80176fe:	291d      	cmp	r1, #29
 8017700:	d82c      	bhi.n	801775c <__sflush_r+0xb8>
 8017702:	4a2a      	ldr	r2, [pc, #168]	; (80177ac <__sflush_r+0x108>)
 8017704:	40ca      	lsrs	r2, r1
 8017706:	07d6      	lsls	r6, r2, #31
 8017708:	d528      	bpl.n	801775c <__sflush_r+0xb8>
 801770a:	2200      	movs	r2, #0
 801770c:	6062      	str	r2, [r4, #4]
 801770e:	04d9      	lsls	r1, r3, #19
 8017710:	6922      	ldr	r2, [r4, #16]
 8017712:	6022      	str	r2, [r4, #0]
 8017714:	d504      	bpl.n	8017720 <__sflush_r+0x7c>
 8017716:	1c42      	adds	r2, r0, #1
 8017718:	d101      	bne.n	801771e <__sflush_r+0x7a>
 801771a:	682b      	ldr	r3, [r5, #0]
 801771c:	b903      	cbnz	r3, 8017720 <__sflush_r+0x7c>
 801771e:	6560      	str	r0, [r4, #84]	; 0x54
 8017720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017722:	602f      	str	r7, [r5, #0]
 8017724:	2900      	cmp	r1, #0
 8017726:	d0ca      	beq.n	80176be <__sflush_r+0x1a>
 8017728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801772c:	4299      	cmp	r1, r3
 801772e:	d002      	beq.n	8017736 <__sflush_r+0x92>
 8017730:	4628      	mov	r0, r5
 8017732:	f7fe fa6d 	bl	8015c10 <_free_r>
 8017736:	2000      	movs	r0, #0
 8017738:	6360      	str	r0, [r4, #52]	; 0x34
 801773a:	e7c1      	b.n	80176c0 <__sflush_r+0x1c>
 801773c:	6a21      	ldr	r1, [r4, #32]
 801773e:	2301      	movs	r3, #1
 8017740:	4628      	mov	r0, r5
 8017742:	47b0      	blx	r6
 8017744:	1c41      	adds	r1, r0, #1
 8017746:	d1c7      	bne.n	80176d8 <__sflush_r+0x34>
 8017748:	682b      	ldr	r3, [r5, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d0c4      	beq.n	80176d8 <__sflush_r+0x34>
 801774e:	2b1d      	cmp	r3, #29
 8017750:	d001      	beq.n	8017756 <__sflush_r+0xb2>
 8017752:	2b16      	cmp	r3, #22
 8017754:	d101      	bne.n	801775a <__sflush_r+0xb6>
 8017756:	602f      	str	r7, [r5, #0]
 8017758:	e7b1      	b.n	80176be <__sflush_r+0x1a>
 801775a:	89a3      	ldrh	r3, [r4, #12]
 801775c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017760:	81a3      	strh	r3, [r4, #12]
 8017762:	e7ad      	b.n	80176c0 <__sflush_r+0x1c>
 8017764:	690f      	ldr	r7, [r1, #16]
 8017766:	2f00      	cmp	r7, #0
 8017768:	d0a9      	beq.n	80176be <__sflush_r+0x1a>
 801776a:	0793      	lsls	r3, r2, #30
 801776c:	680e      	ldr	r6, [r1, #0]
 801776e:	bf08      	it	eq
 8017770:	694b      	ldreq	r3, [r1, #20]
 8017772:	600f      	str	r7, [r1, #0]
 8017774:	bf18      	it	ne
 8017776:	2300      	movne	r3, #0
 8017778:	eba6 0807 	sub.w	r8, r6, r7
 801777c:	608b      	str	r3, [r1, #8]
 801777e:	f1b8 0f00 	cmp.w	r8, #0
 8017782:	dd9c      	ble.n	80176be <__sflush_r+0x1a>
 8017784:	6a21      	ldr	r1, [r4, #32]
 8017786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017788:	4643      	mov	r3, r8
 801778a:	463a      	mov	r2, r7
 801778c:	4628      	mov	r0, r5
 801778e:	47b0      	blx	r6
 8017790:	2800      	cmp	r0, #0
 8017792:	dc06      	bgt.n	80177a2 <__sflush_r+0xfe>
 8017794:	89a3      	ldrh	r3, [r4, #12]
 8017796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801779a:	81a3      	strh	r3, [r4, #12]
 801779c:	f04f 30ff 	mov.w	r0, #4294967295
 80177a0:	e78e      	b.n	80176c0 <__sflush_r+0x1c>
 80177a2:	4407      	add	r7, r0
 80177a4:	eba8 0800 	sub.w	r8, r8, r0
 80177a8:	e7e9      	b.n	801777e <__sflush_r+0xda>
 80177aa:	bf00      	nop
 80177ac:	20400001 	.word	0x20400001

080177b0 <_fflush_r>:
 80177b0:	b538      	push	{r3, r4, r5, lr}
 80177b2:	690b      	ldr	r3, [r1, #16]
 80177b4:	4605      	mov	r5, r0
 80177b6:	460c      	mov	r4, r1
 80177b8:	b913      	cbnz	r3, 80177c0 <_fflush_r+0x10>
 80177ba:	2500      	movs	r5, #0
 80177bc:	4628      	mov	r0, r5
 80177be:	bd38      	pop	{r3, r4, r5, pc}
 80177c0:	b118      	cbz	r0, 80177ca <_fflush_r+0x1a>
 80177c2:	6983      	ldr	r3, [r0, #24]
 80177c4:	b90b      	cbnz	r3, 80177ca <_fflush_r+0x1a>
 80177c6:	f7fe f937 	bl	8015a38 <__sinit>
 80177ca:	4b14      	ldr	r3, [pc, #80]	; (801781c <_fflush_r+0x6c>)
 80177cc:	429c      	cmp	r4, r3
 80177ce:	d11b      	bne.n	8017808 <_fflush_r+0x58>
 80177d0:	686c      	ldr	r4, [r5, #4]
 80177d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d0ef      	beq.n	80177ba <_fflush_r+0xa>
 80177da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80177dc:	07d0      	lsls	r0, r2, #31
 80177de:	d404      	bmi.n	80177ea <_fflush_r+0x3a>
 80177e0:	0599      	lsls	r1, r3, #22
 80177e2:	d402      	bmi.n	80177ea <_fflush_r+0x3a>
 80177e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177e6:	f7fe f9ea 	bl	8015bbe <__retarget_lock_acquire_recursive>
 80177ea:	4628      	mov	r0, r5
 80177ec:	4621      	mov	r1, r4
 80177ee:	f7ff ff59 	bl	80176a4 <__sflush_r>
 80177f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177f4:	07da      	lsls	r2, r3, #31
 80177f6:	4605      	mov	r5, r0
 80177f8:	d4e0      	bmi.n	80177bc <_fflush_r+0xc>
 80177fa:	89a3      	ldrh	r3, [r4, #12]
 80177fc:	059b      	lsls	r3, r3, #22
 80177fe:	d4dd      	bmi.n	80177bc <_fflush_r+0xc>
 8017800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017802:	f7fe f9de 	bl	8015bc2 <__retarget_lock_release_recursive>
 8017806:	e7d9      	b.n	80177bc <_fflush_r+0xc>
 8017808:	4b05      	ldr	r3, [pc, #20]	; (8017820 <_fflush_r+0x70>)
 801780a:	429c      	cmp	r4, r3
 801780c:	d101      	bne.n	8017812 <_fflush_r+0x62>
 801780e:	68ac      	ldr	r4, [r5, #8]
 8017810:	e7df      	b.n	80177d2 <_fflush_r+0x22>
 8017812:	4b04      	ldr	r3, [pc, #16]	; (8017824 <_fflush_r+0x74>)
 8017814:	429c      	cmp	r4, r3
 8017816:	bf08      	it	eq
 8017818:	68ec      	ldreq	r4, [r5, #12]
 801781a:	e7da      	b.n	80177d2 <_fflush_r+0x22>
 801781c:	08018a48 	.word	0x08018a48
 8017820:	08018a68 	.word	0x08018a68
 8017824:	08018a28 	.word	0x08018a28

08017828 <_localeconv_r>:
 8017828:	4800      	ldr	r0, [pc, #0]	; (801782c <_localeconv_r+0x4>)
 801782a:	4770      	bx	lr
 801782c:	20000198 	.word	0x20000198

08017830 <_lseek_r>:
 8017830:	b538      	push	{r3, r4, r5, lr}
 8017832:	4d07      	ldr	r5, [pc, #28]	; (8017850 <_lseek_r+0x20>)
 8017834:	4604      	mov	r4, r0
 8017836:	4608      	mov	r0, r1
 8017838:	4611      	mov	r1, r2
 801783a:	2200      	movs	r2, #0
 801783c:	602a      	str	r2, [r5, #0]
 801783e:	461a      	mov	r2, r3
 8017840:	f7f1 ffd2 	bl	80097e8 <_lseek>
 8017844:	1c43      	adds	r3, r0, #1
 8017846:	d102      	bne.n	801784e <_lseek_r+0x1e>
 8017848:	682b      	ldr	r3, [r5, #0]
 801784a:	b103      	cbz	r3, 801784e <_lseek_r+0x1e>
 801784c:	6023      	str	r3, [r4, #0]
 801784e:	bd38      	pop	{r3, r4, r5, pc}
 8017850:	20007414 	.word	0x20007414

08017854 <__malloc_lock>:
 8017854:	4801      	ldr	r0, [pc, #4]	; (801785c <__malloc_lock+0x8>)
 8017856:	f7fe b9b2 	b.w	8015bbe <__retarget_lock_acquire_recursive>
 801785a:	bf00      	nop
 801785c:	20007409 	.word	0x20007409

08017860 <__malloc_unlock>:
 8017860:	4801      	ldr	r0, [pc, #4]	; (8017868 <__malloc_unlock+0x8>)
 8017862:	f7fe b9ae 	b.w	8015bc2 <__retarget_lock_release_recursive>
 8017866:	bf00      	nop
 8017868:	20007409 	.word	0x20007409

0801786c <_Balloc>:
 801786c:	b570      	push	{r4, r5, r6, lr}
 801786e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017870:	4604      	mov	r4, r0
 8017872:	460d      	mov	r5, r1
 8017874:	b976      	cbnz	r6, 8017894 <_Balloc+0x28>
 8017876:	2010      	movs	r0, #16
 8017878:	f7fe f9a4 	bl	8015bc4 <malloc>
 801787c:	4602      	mov	r2, r0
 801787e:	6260      	str	r0, [r4, #36]	; 0x24
 8017880:	b920      	cbnz	r0, 801788c <_Balloc+0x20>
 8017882:	4b18      	ldr	r3, [pc, #96]	; (80178e4 <_Balloc+0x78>)
 8017884:	4818      	ldr	r0, [pc, #96]	; (80178e8 <_Balloc+0x7c>)
 8017886:	2166      	movs	r1, #102	; 0x66
 8017888:	f000 fb9c 	bl	8017fc4 <__assert_func>
 801788c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017890:	6006      	str	r6, [r0, #0]
 8017892:	60c6      	str	r6, [r0, #12]
 8017894:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017896:	68f3      	ldr	r3, [r6, #12]
 8017898:	b183      	cbz	r3, 80178bc <_Balloc+0x50>
 801789a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801789c:	68db      	ldr	r3, [r3, #12]
 801789e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80178a2:	b9b8      	cbnz	r0, 80178d4 <_Balloc+0x68>
 80178a4:	2101      	movs	r1, #1
 80178a6:	fa01 f605 	lsl.w	r6, r1, r5
 80178aa:	1d72      	adds	r2, r6, #5
 80178ac:	0092      	lsls	r2, r2, #2
 80178ae:	4620      	mov	r0, r4
 80178b0:	f000 fb60 	bl	8017f74 <_calloc_r>
 80178b4:	b160      	cbz	r0, 80178d0 <_Balloc+0x64>
 80178b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80178ba:	e00e      	b.n	80178da <_Balloc+0x6e>
 80178bc:	2221      	movs	r2, #33	; 0x21
 80178be:	2104      	movs	r1, #4
 80178c0:	4620      	mov	r0, r4
 80178c2:	f000 fb57 	bl	8017f74 <_calloc_r>
 80178c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178c8:	60f0      	str	r0, [r6, #12]
 80178ca:	68db      	ldr	r3, [r3, #12]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d1e4      	bne.n	801789a <_Balloc+0x2e>
 80178d0:	2000      	movs	r0, #0
 80178d2:	bd70      	pop	{r4, r5, r6, pc}
 80178d4:	6802      	ldr	r2, [r0, #0]
 80178d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80178da:	2300      	movs	r3, #0
 80178dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80178e0:	e7f7      	b.n	80178d2 <_Balloc+0x66>
 80178e2:	bf00      	nop
 80178e4:	08018acd 	.word	0x08018acd
 80178e8:	08018b50 	.word	0x08018b50

080178ec <_Bfree>:
 80178ec:	b570      	push	{r4, r5, r6, lr}
 80178ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80178f0:	4605      	mov	r5, r0
 80178f2:	460c      	mov	r4, r1
 80178f4:	b976      	cbnz	r6, 8017914 <_Bfree+0x28>
 80178f6:	2010      	movs	r0, #16
 80178f8:	f7fe f964 	bl	8015bc4 <malloc>
 80178fc:	4602      	mov	r2, r0
 80178fe:	6268      	str	r0, [r5, #36]	; 0x24
 8017900:	b920      	cbnz	r0, 801790c <_Bfree+0x20>
 8017902:	4b09      	ldr	r3, [pc, #36]	; (8017928 <_Bfree+0x3c>)
 8017904:	4809      	ldr	r0, [pc, #36]	; (801792c <_Bfree+0x40>)
 8017906:	218a      	movs	r1, #138	; 0x8a
 8017908:	f000 fb5c 	bl	8017fc4 <__assert_func>
 801790c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017910:	6006      	str	r6, [r0, #0]
 8017912:	60c6      	str	r6, [r0, #12]
 8017914:	b13c      	cbz	r4, 8017926 <_Bfree+0x3a>
 8017916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017918:	6862      	ldr	r2, [r4, #4]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017920:	6021      	str	r1, [r4, #0]
 8017922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017926:	bd70      	pop	{r4, r5, r6, pc}
 8017928:	08018acd 	.word	0x08018acd
 801792c:	08018b50 	.word	0x08018b50

08017930 <__multadd>:
 8017930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017934:	690d      	ldr	r5, [r1, #16]
 8017936:	4607      	mov	r7, r0
 8017938:	460c      	mov	r4, r1
 801793a:	461e      	mov	r6, r3
 801793c:	f101 0c14 	add.w	ip, r1, #20
 8017940:	2000      	movs	r0, #0
 8017942:	f8dc 3000 	ldr.w	r3, [ip]
 8017946:	b299      	uxth	r1, r3
 8017948:	fb02 6101 	mla	r1, r2, r1, r6
 801794c:	0c1e      	lsrs	r6, r3, #16
 801794e:	0c0b      	lsrs	r3, r1, #16
 8017950:	fb02 3306 	mla	r3, r2, r6, r3
 8017954:	b289      	uxth	r1, r1
 8017956:	3001      	adds	r0, #1
 8017958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801795c:	4285      	cmp	r5, r0
 801795e:	f84c 1b04 	str.w	r1, [ip], #4
 8017962:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017966:	dcec      	bgt.n	8017942 <__multadd+0x12>
 8017968:	b30e      	cbz	r6, 80179ae <__multadd+0x7e>
 801796a:	68a3      	ldr	r3, [r4, #8]
 801796c:	42ab      	cmp	r3, r5
 801796e:	dc19      	bgt.n	80179a4 <__multadd+0x74>
 8017970:	6861      	ldr	r1, [r4, #4]
 8017972:	4638      	mov	r0, r7
 8017974:	3101      	adds	r1, #1
 8017976:	f7ff ff79 	bl	801786c <_Balloc>
 801797a:	4680      	mov	r8, r0
 801797c:	b928      	cbnz	r0, 801798a <__multadd+0x5a>
 801797e:	4602      	mov	r2, r0
 8017980:	4b0c      	ldr	r3, [pc, #48]	; (80179b4 <__multadd+0x84>)
 8017982:	480d      	ldr	r0, [pc, #52]	; (80179b8 <__multadd+0x88>)
 8017984:	21b5      	movs	r1, #181	; 0xb5
 8017986:	f000 fb1d 	bl	8017fc4 <__assert_func>
 801798a:	6922      	ldr	r2, [r4, #16]
 801798c:	3202      	adds	r2, #2
 801798e:	f104 010c 	add.w	r1, r4, #12
 8017992:	0092      	lsls	r2, r2, #2
 8017994:	300c      	adds	r0, #12
 8017996:	f7fe f925 	bl	8015be4 <memcpy>
 801799a:	4621      	mov	r1, r4
 801799c:	4638      	mov	r0, r7
 801799e:	f7ff ffa5 	bl	80178ec <_Bfree>
 80179a2:	4644      	mov	r4, r8
 80179a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80179a8:	3501      	adds	r5, #1
 80179aa:	615e      	str	r6, [r3, #20]
 80179ac:	6125      	str	r5, [r4, #16]
 80179ae:	4620      	mov	r0, r4
 80179b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b4:	08018b3f 	.word	0x08018b3f
 80179b8:	08018b50 	.word	0x08018b50

080179bc <__hi0bits>:
 80179bc:	0c03      	lsrs	r3, r0, #16
 80179be:	041b      	lsls	r3, r3, #16
 80179c0:	b9d3      	cbnz	r3, 80179f8 <__hi0bits+0x3c>
 80179c2:	0400      	lsls	r0, r0, #16
 80179c4:	2310      	movs	r3, #16
 80179c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80179ca:	bf04      	itt	eq
 80179cc:	0200      	lsleq	r0, r0, #8
 80179ce:	3308      	addeq	r3, #8
 80179d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80179d4:	bf04      	itt	eq
 80179d6:	0100      	lsleq	r0, r0, #4
 80179d8:	3304      	addeq	r3, #4
 80179da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80179de:	bf04      	itt	eq
 80179e0:	0080      	lsleq	r0, r0, #2
 80179e2:	3302      	addeq	r3, #2
 80179e4:	2800      	cmp	r0, #0
 80179e6:	db05      	blt.n	80179f4 <__hi0bits+0x38>
 80179e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80179ec:	f103 0301 	add.w	r3, r3, #1
 80179f0:	bf08      	it	eq
 80179f2:	2320      	moveq	r3, #32
 80179f4:	4618      	mov	r0, r3
 80179f6:	4770      	bx	lr
 80179f8:	2300      	movs	r3, #0
 80179fa:	e7e4      	b.n	80179c6 <__hi0bits+0xa>

080179fc <__lo0bits>:
 80179fc:	6803      	ldr	r3, [r0, #0]
 80179fe:	f013 0207 	ands.w	r2, r3, #7
 8017a02:	4601      	mov	r1, r0
 8017a04:	d00b      	beq.n	8017a1e <__lo0bits+0x22>
 8017a06:	07da      	lsls	r2, r3, #31
 8017a08:	d423      	bmi.n	8017a52 <__lo0bits+0x56>
 8017a0a:	0798      	lsls	r0, r3, #30
 8017a0c:	bf49      	itett	mi
 8017a0e:	085b      	lsrmi	r3, r3, #1
 8017a10:	089b      	lsrpl	r3, r3, #2
 8017a12:	2001      	movmi	r0, #1
 8017a14:	600b      	strmi	r3, [r1, #0]
 8017a16:	bf5c      	itt	pl
 8017a18:	600b      	strpl	r3, [r1, #0]
 8017a1a:	2002      	movpl	r0, #2
 8017a1c:	4770      	bx	lr
 8017a1e:	b298      	uxth	r0, r3
 8017a20:	b9a8      	cbnz	r0, 8017a4e <__lo0bits+0x52>
 8017a22:	0c1b      	lsrs	r3, r3, #16
 8017a24:	2010      	movs	r0, #16
 8017a26:	b2da      	uxtb	r2, r3
 8017a28:	b90a      	cbnz	r2, 8017a2e <__lo0bits+0x32>
 8017a2a:	3008      	adds	r0, #8
 8017a2c:	0a1b      	lsrs	r3, r3, #8
 8017a2e:	071a      	lsls	r2, r3, #28
 8017a30:	bf04      	itt	eq
 8017a32:	091b      	lsreq	r3, r3, #4
 8017a34:	3004      	addeq	r0, #4
 8017a36:	079a      	lsls	r2, r3, #30
 8017a38:	bf04      	itt	eq
 8017a3a:	089b      	lsreq	r3, r3, #2
 8017a3c:	3002      	addeq	r0, #2
 8017a3e:	07da      	lsls	r2, r3, #31
 8017a40:	d403      	bmi.n	8017a4a <__lo0bits+0x4e>
 8017a42:	085b      	lsrs	r3, r3, #1
 8017a44:	f100 0001 	add.w	r0, r0, #1
 8017a48:	d005      	beq.n	8017a56 <__lo0bits+0x5a>
 8017a4a:	600b      	str	r3, [r1, #0]
 8017a4c:	4770      	bx	lr
 8017a4e:	4610      	mov	r0, r2
 8017a50:	e7e9      	b.n	8017a26 <__lo0bits+0x2a>
 8017a52:	2000      	movs	r0, #0
 8017a54:	4770      	bx	lr
 8017a56:	2020      	movs	r0, #32
 8017a58:	4770      	bx	lr
	...

08017a5c <__i2b>:
 8017a5c:	b510      	push	{r4, lr}
 8017a5e:	460c      	mov	r4, r1
 8017a60:	2101      	movs	r1, #1
 8017a62:	f7ff ff03 	bl	801786c <_Balloc>
 8017a66:	4602      	mov	r2, r0
 8017a68:	b928      	cbnz	r0, 8017a76 <__i2b+0x1a>
 8017a6a:	4b05      	ldr	r3, [pc, #20]	; (8017a80 <__i2b+0x24>)
 8017a6c:	4805      	ldr	r0, [pc, #20]	; (8017a84 <__i2b+0x28>)
 8017a6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017a72:	f000 faa7 	bl	8017fc4 <__assert_func>
 8017a76:	2301      	movs	r3, #1
 8017a78:	6144      	str	r4, [r0, #20]
 8017a7a:	6103      	str	r3, [r0, #16]
 8017a7c:	bd10      	pop	{r4, pc}
 8017a7e:	bf00      	nop
 8017a80:	08018b3f 	.word	0x08018b3f
 8017a84:	08018b50 	.word	0x08018b50

08017a88 <__multiply>:
 8017a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a8c:	4691      	mov	r9, r2
 8017a8e:	690a      	ldr	r2, [r1, #16]
 8017a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	bfb8      	it	lt
 8017a98:	460b      	movlt	r3, r1
 8017a9a:	460c      	mov	r4, r1
 8017a9c:	bfbc      	itt	lt
 8017a9e:	464c      	movlt	r4, r9
 8017aa0:	4699      	movlt	r9, r3
 8017aa2:	6927      	ldr	r7, [r4, #16]
 8017aa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017aa8:	68a3      	ldr	r3, [r4, #8]
 8017aaa:	6861      	ldr	r1, [r4, #4]
 8017aac:	eb07 060a 	add.w	r6, r7, sl
 8017ab0:	42b3      	cmp	r3, r6
 8017ab2:	b085      	sub	sp, #20
 8017ab4:	bfb8      	it	lt
 8017ab6:	3101      	addlt	r1, #1
 8017ab8:	f7ff fed8 	bl	801786c <_Balloc>
 8017abc:	b930      	cbnz	r0, 8017acc <__multiply+0x44>
 8017abe:	4602      	mov	r2, r0
 8017ac0:	4b44      	ldr	r3, [pc, #272]	; (8017bd4 <__multiply+0x14c>)
 8017ac2:	4845      	ldr	r0, [pc, #276]	; (8017bd8 <__multiply+0x150>)
 8017ac4:	f240 115d 	movw	r1, #349	; 0x15d
 8017ac8:	f000 fa7c 	bl	8017fc4 <__assert_func>
 8017acc:	f100 0514 	add.w	r5, r0, #20
 8017ad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017ad4:	462b      	mov	r3, r5
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	4543      	cmp	r3, r8
 8017ada:	d321      	bcc.n	8017b20 <__multiply+0x98>
 8017adc:	f104 0314 	add.w	r3, r4, #20
 8017ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017ae4:	f109 0314 	add.w	r3, r9, #20
 8017ae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017aec:	9202      	str	r2, [sp, #8]
 8017aee:	1b3a      	subs	r2, r7, r4
 8017af0:	3a15      	subs	r2, #21
 8017af2:	f022 0203 	bic.w	r2, r2, #3
 8017af6:	3204      	adds	r2, #4
 8017af8:	f104 0115 	add.w	r1, r4, #21
 8017afc:	428f      	cmp	r7, r1
 8017afe:	bf38      	it	cc
 8017b00:	2204      	movcc	r2, #4
 8017b02:	9201      	str	r2, [sp, #4]
 8017b04:	9a02      	ldr	r2, [sp, #8]
 8017b06:	9303      	str	r3, [sp, #12]
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d80c      	bhi.n	8017b26 <__multiply+0x9e>
 8017b0c:	2e00      	cmp	r6, #0
 8017b0e:	dd03      	ble.n	8017b18 <__multiply+0x90>
 8017b10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d05a      	beq.n	8017bce <__multiply+0x146>
 8017b18:	6106      	str	r6, [r0, #16]
 8017b1a:	b005      	add	sp, #20
 8017b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b20:	f843 2b04 	str.w	r2, [r3], #4
 8017b24:	e7d8      	b.n	8017ad8 <__multiply+0x50>
 8017b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8017b2a:	f1ba 0f00 	cmp.w	sl, #0
 8017b2e:	d024      	beq.n	8017b7a <__multiply+0xf2>
 8017b30:	f104 0e14 	add.w	lr, r4, #20
 8017b34:	46a9      	mov	r9, r5
 8017b36:	f04f 0c00 	mov.w	ip, #0
 8017b3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017b3e:	f8d9 1000 	ldr.w	r1, [r9]
 8017b42:	fa1f fb82 	uxth.w	fp, r2
 8017b46:	b289      	uxth	r1, r1
 8017b48:	fb0a 110b 	mla	r1, sl, fp, r1
 8017b4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017b50:	f8d9 2000 	ldr.w	r2, [r9]
 8017b54:	4461      	add	r1, ip
 8017b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8017b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017b62:	b289      	uxth	r1, r1
 8017b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017b68:	4577      	cmp	r7, lr
 8017b6a:	f849 1b04 	str.w	r1, [r9], #4
 8017b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b72:	d8e2      	bhi.n	8017b3a <__multiply+0xb2>
 8017b74:	9a01      	ldr	r2, [sp, #4]
 8017b76:	f845 c002 	str.w	ip, [r5, r2]
 8017b7a:	9a03      	ldr	r2, [sp, #12]
 8017b7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017b80:	3304      	adds	r3, #4
 8017b82:	f1b9 0f00 	cmp.w	r9, #0
 8017b86:	d020      	beq.n	8017bca <__multiply+0x142>
 8017b88:	6829      	ldr	r1, [r5, #0]
 8017b8a:	f104 0c14 	add.w	ip, r4, #20
 8017b8e:	46ae      	mov	lr, r5
 8017b90:	f04f 0a00 	mov.w	sl, #0
 8017b94:	f8bc b000 	ldrh.w	fp, [ip]
 8017b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8017ba0:	4492      	add	sl, r2
 8017ba2:	b289      	uxth	r1, r1
 8017ba4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8017bac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017bb0:	f8be 1000 	ldrh.w	r1, [lr]
 8017bb4:	0c12      	lsrs	r2, r2, #16
 8017bb6:	fb09 1102 	mla	r1, r9, r2, r1
 8017bba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017bbe:	4567      	cmp	r7, ip
 8017bc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017bc4:	d8e6      	bhi.n	8017b94 <__multiply+0x10c>
 8017bc6:	9a01      	ldr	r2, [sp, #4]
 8017bc8:	50a9      	str	r1, [r5, r2]
 8017bca:	3504      	adds	r5, #4
 8017bcc:	e79a      	b.n	8017b04 <__multiply+0x7c>
 8017bce:	3e01      	subs	r6, #1
 8017bd0:	e79c      	b.n	8017b0c <__multiply+0x84>
 8017bd2:	bf00      	nop
 8017bd4:	08018b3f 	.word	0x08018b3f
 8017bd8:	08018b50 	.word	0x08018b50

08017bdc <__pow5mult>:
 8017bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017be0:	4615      	mov	r5, r2
 8017be2:	f012 0203 	ands.w	r2, r2, #3
 8017be6:	4606      	mov	r6, r0
 8017be8:	460f      	mov	r7, r1
 8017bea:	d007      	beq.n	8017bfc <__pow5mult+0x20>
 8017bec:	4c25      	ldr	r4, [pc, #148]	; (8017c84 <__pow5mult+0xa8>)
 8017bee:	3a01      	subs	r2, #1
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017bf6:	f7ff fe9b 	bl	8017930 <__multadd>
 8017bfa:	4607      	mov	r7, r0
 8017bfc:	10ad      	asrs	r5, r5, #2
 8017bfe:	d03d      	beq.n	8017c7c <__pow5mult+0xa0>
 8017c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017c02:	b97c      	cbnz	r4, 8017c24 <__pow5mult+0x48>
 8017c04:	2010      	movs	r0, #16
 8017c06:	f7fd ffdd 	bl	8015bc4 <malloc>
 8017c0a:	4602      	mov	r2, r0
 8017c0c:	6270      	str	r0, [r6, #36]	; 0x24
 8017c0e:	b928      	cbnz	r0, 8017c1c <__pow5mult+0x40>
 8017c10:	4b1d      	ldr	r3, [pc, #116]	; (8017c88 <__pow5mult+0xac>)
 8017c12:	481e      	ldr	r0, [pc, #120]	; (8017c8c <__pow5mult+0xb0>)
 8017c14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017c18:	f000 f9d4 	bl	8017fc4 <__assert_func>
 8017c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c20:	6004      	str	r4, [r0, #0]
 8017c22:	60c4      	str	r4, [r0, #12]
 8017c24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c2c:	b94c      	cbnz	r4, 8017c42 <__pow5mult+0x66>
 8017c2e:	f240 2171 	movw	r1, #625	; 0x271
 8017c32:	4630      	mov	r0, r6
 8017c34:	f7ff ff12 	bl	8017a5c <__i2b>
 8017c38:	2300      	movs	r3, #0
 8017c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c3e:	4604      	mov	r4, r0
 8017c40:	6003      	str	r3, [r0, #0]
 8017c42:	f04f 0900 	mov.w	r9, #0
 8017c46:	07eb      	lsls	r3, r5, #31
 8017c48:	d50a      	bpl.n	8017c60 <__pow5mult+0x84>
 8017c4a:	4639      	mov	r1, r7
 8017c4c:	4622      	mov	r2, r4
 8017c4e:	4630      	mov	r0, r6
 8017c50:	f7ff ff1a 	bl	8017a88 <__multiply>
 8017c54:	4639      	mov	r1, r7
 8017c56:	4680      	mov	r8, r0
 8017c58:	4630      	mov	r0, r6
 8017c5a:	f7ff fe47 	bl	80178ec <_Bfree>
 8017c5e:	4647      	mov	r7, r8
 8017c60:	106d      	asrs	r5, r5, #1
 8017c62:	d00b      	beq.n	8017c7c <__pow5mult+0xa0>
 8017c64:	6820      	ldr	r0, [r4, #0]
 8017c66:	b938      	cbnz	r0, 8017c78 <__pow5mult+0x9c>
 8017c68:	4622      	mov	r2, r4
 8017c6a:	4621      	mov	r1, r4
 8017c6c:	4630      	mov	r0, r6
 8017c6e:	f7ff ff0b 	bl	8017a88 <__multiply>
 8017c72:	6020      	str	r0, [r4, #0]
 8017c74:	f8c0 9000 	str.w	r9, [r0]
 8017c78:	4604      	mov	r4, r0
 8017c7a:	e7e4      	b.n	8017c46 <__pow5mult+0x6a>
 8017c7c:	4638      	mov	r0, r7
 8017c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c82:	bf00      	nop
 8017c84:	08018ca0 	.word	0x08018ca0
 8017c88:	08018acd 	.word	0x08018acd
 8017c8c:	08018b50 	.word	0x08018b50

08017c90 <__lshift>:
 8017c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c94:	460c      	mov	r4, r1
 8017c96:	6849      	ldr	r1, [r1, #4]
 8017c98:	6923      	ldr	r3, [r4, #16]
 8017c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017c9e:	68a3      	ldr	r3, [r4, #8]
 8017ca0:	4607      	mov	r7, r0
 8017ca2:	4691      	mov	r9, r2
 8017ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017ca8:	f108 0601 	add.w	r6, r8, #1
 8017cac:	42b3      	cmp	r3, r6
 8017cae:	db0b      	blt.n	8017cc8 <__lshift+0x38>
 8017cb0:	4638      	mov	r0, r7
 8017cb2:	f7ff fddb 	bl	801786c <_Balloc>
 8017cb6:	4605      	mov	r5, r0
 8017cb8:	b948      	cbnz	r0, 8017cce <__lshift+0x3e>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	4b2a      	ldr	r3, [pc, #168]	; (8017d68 <__lshift+0xd8>)
 8017cbe:	482b      	ldr	r0, [pc, #172]	; (8017d6c <__lshift+0xdc>)
 8017cc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017cc4:	f000 f97e 	bl	8017fc4 <__assert_func>
 8017cc8:	3101      	adds	r1, #1
 8017cca:	005b      	lsls	r3, r3, #1
 8017ccc:	e7ee      	b.n	8017cac <__lshift+0x1c>
 8017cce:	2300      	movs	r3, #0
 8017cd0:	f100 0114 	add.w	r1, r0, #20
 8017cd4:	f100 0210 	add.w	r2, r0, #16
 8017cd8:	4618      	mov	r0, r3
 8017cda:	4553      	cmp	r3, sl
 8017cdc:	db37      	blt.n	8017d4e <__lshift+0xbe>
 8017cde:	6920      	ldr	r0, [r4, #16]
 8017ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ce4:	f104 0314 	add.w	r3, r4, #20
 8017ce8:	f019 091f 	ands.w	r9, r9, #31
 8017cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017cf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017cf4:	d02f      	beq.n	8017d56 <__lshift+0xc6>
 8017cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8017cfa:	468a      	mov	sl, r1
 8017cfc:	f04f 0c00 	mov.w	ip, #0
 8017d00:	681a      	ldr	r2, [r3, #0]
 8017d02:	fa02 f209 	lsl.w	r2, r2, r9
 8017d06:	ea42 020c 	orr.w	r2, r2, ip
 8017d0a:	f84a 2b04 	str.w	r2, [sl], #4
 8017d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d12:	4298      	cmp	r0, r3
 8017d14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017d18:	d8f2      	bhi.n	8017d00 <__lshift+0x70>
 8017d1a:	1b03      	subs	r3, r0, r4
 8017d1c:	3b15      	subs	r3, #21
 8017d1e:	f023 0303 	bic.w	r3, r3, #3
 8017d22:	3304      	adds	r3, #4
 8017d24:	f104 0215 	add.w	r2, r4, #21
 8017d28:	4290      	cmp	r0, r2
 8017d2a:	bf38      	it	cc
 8017d2c:	2304      	movcc	r3, #4
 8017d2e:	f841 c003 	str.w	ip, [r1, r3]
 8017d32:	f1bc 0f00 	cmp.w	ip, #0
 8017d36:	d001      	beq.n	8017d3c <__lshift+0xac>
 8017d38:	f108 0602 	add.w	r6, r8, #2
 8017d3c:	3e01      	subs	r6, #1
 8017d3e:	4638      	mov	r0, r7
 8017d40:	612e      	str	r6, [r5, #16]
 8017d42:	4621      	mov	r1, r4
 8017d44:	f7ff fdd2 	bl	80178ec <_Bfree>
 8017d48:	4628      	mov	r0, r5
 8017d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017d52:	3301      	adds	r3, #1
 8017d54:	e7c1      	b.n	8017cda <__lshift+0x4a>
 8017d56:	3904      	subs	r1, #4
 8017d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d60:	4298      	cmp	r0, r3
 8017d62:	d8f9      	bhi.n	8017d58 <__lshift+0xc8>
 8017d64:	e7ea      	b.n	8017d3c <__lshift+0xac>
 8017d66:	bf00      	nop
 8017d68:	08018b3f 	.word	0x08018b3f
 8017d6c:	08018b50 	.word	0x08018b50

08017d70 <__mcmp>:
 8017d70:	b530      	push	{r4, r5, lr}
 8017d72:	6902      	ldr	r2, [r0, #16]
 8017d74:	690c      	ldr	r4, [r1, #16]
 8017d76:	1b12      	subs	r2, r2, r4
 8017d78:	d10e      	bne.n	8017d98 <__mcmp+0x28>
 8017d7a:	f100 0314 	add.w	r3, r0, #20
 8017d7e:	3114      	adds	r1, #20
 8017d80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017d84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017d88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017d8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017d90:	42a5      	cmp	r5, r4
 8017d92:	d003      	beq.n	8017d9c <__mcmp+0x2c>
 8017d94:	d305      	bcc.n	8017da2 <__mcmp+0x32>
 8017d96:	2201      	movs	r2, #1
 8017d98:	4610      	mov	r0, r2
 8017d9a:	bd30      	pop	{r4, r5, pc}
 8017d9c:	4283      	cmp	r3, r0
 8017d9e:	d3f3      	bcc.n	8017d88 <__mcmp+0x18>
 8017da0:	e7fa      	b.n	8017d98 <__mcmp+0x28>
 8017da2:	f04f 32ff 	mov.w	r2, #4294967295
 8017da6:	e7f7      	b.n	8017d98 <__mcmp+0x28>

08017da8 <__mdiff>:
 8017da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dac:	460c      	mov	r4, r1
 8017dae:	4606      	mov	r6, r0
 8017db0:	4611      	mov	r1, r2
 8017db2:	4620      	mov	r0, r4
 8017db4:	4690      	mov	r8, r2
 8017db6:	f7ff ffdb 	bl	8017d70 <__mcmp>
 8017dba:	1e05      	subs	r5, r0, #0
 8017dbc:	d110      	bne.n	8017de0 <__mdiff+0x38>
 8017dbe:	4629      	mov	r1, r5
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	f7ff fd53 	bl	801786c <_Balloc>
 8017dc6:	b930      	cbnz	r0, 8017dd6 <__mdiff+0x2e>
 8017dc8:	4b3a      	ldr	r3, [pc, #232]	; (8017eb4 <__mdiff+0x10c>)
 8017dca:	4602      	mov	r2, r0
 8017dcc:	f240 2132 	movw	r1, #562	; 0x232
 8017dd0:	4839      	ldr	r0, [pc, #228]	; (8017eb8 <__mdiff+0x110>)
 8017dd2:	f000 f8f7 	bl	8017fc4 <__assert_func>
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de0:	bfa4      	itt	ge
 8017de2:	4643      	movge	r3, r8
 8017de4:	46a0      	movge	r8, r4
 8017de6:	4630      	mov	r0, r6
 8017de8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017dec:	bfa6      	itte	ge
 8017dee:	461c      	movge	r4, r3
 8017df0:	2500      	movge	r5, #0
 8017df2:	2501      	movlt	r5, #1
 8017df4:	f7ff fd3a 	bl	801786c <_Balloc>
 8017df8:	b920      	cbnz	r0, 8017e04 <__mdiff+0x5c>
 8017dfa:	4b2e      	ldr	r3, [pc, #184]	; (8017eb4 <__mdiff+0x10c>)
 8017dfc:	4602      	mov	r2, r0
 8017dfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017e02:	e7e5      	b.n	8017dd0 <__mdiff+0x28>
 8017e04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017e08:	6926      	ldr	r6, [r4, #16]
 8017e0a:	60c5      	str	r5, [r0, #12]
 8017e0c:	f104 0914 	add.w	r9, r4, #20
 8017e10:	f108 0514 	add.w	r5, r8, #20
 8017e14:	f100 0e14 	add.w	lr, r0, #20
 8017e18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017e1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017e20:	f108 0210 	add.w	r2, r8, #16
 8017e24:	46f2      	mov	sl, lr
 8017e26:	2100      	movs	r1, #0
 8017e28:	f859 3b04 	ldr.w	r3, [r9], #4
 8017e2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017e30:	fa1f f883 	uxth.w	r8, r3
 8017e34:	fa11 f18b 	uxtah	r1, r1, fp
 8017e38:	0c1b      	lsrs	r3, r3, #16
 8017e3a:	eba1 0808 	sub.w	r8, r1, r8
 8017e3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017e42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017e46:	fa1f f888 	uxth.w	r8, r8
 8017e4a:	1419      	asrs	r1, r3, #16
 8017e4c:	454e      	cmp	r6, r9
 8017e4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017e52:	f84a 3b04 	str.w	r3, [sl], #4
 8017e56:	d8e7      	bhi.n	8017e28 <__mdiff+0x80>
 8017e58:	1b33      	subs	r3, r6, r4
 8017e5a:	3b15      	subs	r3, #21
 8017e5c:	f023 0303 	bic.w	r3, r3, #3
 8017e60:	3304      	adds	r3, #4
 8017e62:	3415      	adds	r4, #21
 8017e64:	42a6      	cmp	r6, r4
 8017e66:	bf38      	it	cc
 8017e68:	2304      	movcc	r3, #4
 8017e6a:	441d      	add	r5, r3
 8017e6c:	4473      	add	r3, lr
 8017e6e:	469e      	mov	lr, r3
 8017e70:	462e      	mov	r6, r5
 8017e72:	4566      	cmp	r6, ip
 8017e74:	d30e      	bcc.n	8017e94 <__mdiff+0xec>
 8017e76:	f10c 0203 	add.w	r2, ip, #3
 8017e7a:	1b52      	subs	r2, r2, r5
 8017e7c:	f022 0203 	bic.w	r2, r2, #3
 8017e80:	3d03      	subs	r5, #3
 8017e82:	45ac      	cmp	ip, r5
 8017e84:	bf38      	it	cc
 8017e86:	2200      	movcc	r2, #0
 8017e88:	441a      	add	r2, r3
 8017e8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017e8e:	b17b      	cbz	r3, 8017eb0 <__mdiff+0x108>
 8017e90:	6107      	str	r7, [r0, #16]
 8017e92:	e7a3      	b.n	8017ddc <__mdiff+0x34>
 8017e94:	f856 8b04 	ldr.w	r8, [r6], #4
 8017e98:	fa11 f288 	uxtah	r2, r1, r8
 8017e9c:	1414      	asrs	r4, r2, #16
 8017e9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017ea2:	b292      	uxth	r2, r2
 8017ea4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017ea8:	f84e 2b04 	str.w	r2, [lr], #4
 8017eac:	1421      	asrs	r1, r4, #16
 8017eae:	e7e0      	b.n	8017e72 <__mdiff+0xca>
 8017eb0:	3f01      	subs	r7, #1
 8017eb2:	e7ea      	b.n	8017e8a <__mdiff+0xe2>
 8017eb4:	08018b3f 	.word	0x08018b3f
 8017eb8:	08018b50 	.word	0x08018b50

08017ebc <__d2b>:
 8017ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ec0:	4689      	mov	r9, r1
 8017ec2:	2101      	movs	r1, #1
 8017ec4:	ec57 6b10 	vmov	r6, r7, d0
 8017ec8:	4690      	mov	r8, r2
 8017eca:	f7ff fccf 	bl	801786c <_Balloc>
 8017ece:	4604      	mov	r4, r0
 8017ed0:	b930      	cbnz	r0, 8017ee0 <__d2b+0x24>
 8017ed2:	4602      	mov	r2, r0
 8017ed4:	4b25      	ldr	r3, [pc, #148]	; (8017f6c <__d2b+0xb0>)
 8017ed6:	4826      	ldr	r0, [pc, #152]	; (8017f70 <__d2b+0xb4>)
 8017ed8:	f240 310a 	movw	r1, #778	; 0x30a
 8017edc:	f000 f872 	bl	8017fc4 <__assert_func>
 8017ee0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017ee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017ee8:	bb35      	cbnz	r5, 8017f38 <__d2b+0x7c>
 8017eea:	2e00      	cmp	r6, #0
 8017eec:	9301      	str	r3, [sp, #4]
 8017eee:	d028      	beq.n	8017f42 <__d2b+0x86>
 8017ef0:	4668      	mov	r0, sp
 8017ef2:	9600      	str	r6, [sp, #0]
 8017ef4:	f7ff fd82 	bl	80179fc <__lo0bits>
 8017ef8:	9900      	ldr	r1, [sp, #0]
 8017efa:	b300      	cbz	r0, 8017f3e <__d2b+0x82>
 8017efc:	9a01      	ldr	r2, [sp, #4]
 8017efe:	f1c0 0320 	rsb	r3, r0, #32
 8017f02:	fa02 f303 	lsl.w	r3, r2, r3
 8017f06:	430b      	orrs	r3, r1
 8017f08:	40c2      	lsrs	r2, r0
 8017f0a:	6163      	str	r3, [r4, #20]
 8017f0c:	9201      	str	r2, [sp, #4]
 8017f0e:	9b01      	ldr	r3, [sp, #4]
 8017f10:	61a3      	str	r3, [r4, #24]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	bf14      	ite	ne
 8017f16:	2202      	movne	r2, #2
 8017f18:	2201      	moveq	r2, #1
 8017f1a:	6122      	str	r2, [r4, #16]
 8017f1c:	b1d5      	cbz	r5, 8017f54 <__d2b+0x98>
 8017f1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017f22:	4405      	add	r5, r0
 8017f24:	f8c9 5000 	str.w	r5, [r9]
 8017f28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017f2c:	f8c8 0000 	str.w	r0, [r8]
 8017f30:	4620      	mov	r0, r4
 8017f32:	b003      	add	sp, #12
 8017f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f3c:	e7d5      	b.n	8017eea <__d2b+0x2e>
 8017f3e:	6161      	str	r1, [r4, #20]
 8017f40:	e7e5      	b.n	8017f0e <__d2b+0x52>
 8017f42:	a801      	add	r0, sp, #4
 8017f44:	f7ff fd5a 	bl	80179fc <__lo0bits>
 8017f48:	9b01      	ldr	r3, [sp, #4]
 8017f4a:	6163      	str	r3, [r4, #20]
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	6122      	str	r2, [r4, #16]
 8017f50:	3020      	adds	r0, #32
 8017f52:	e7e3      	b.n	8017f1c <__d2b+0x60>
 8017f54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017f58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017f5c:	f8c9 0000 	str.w	r0, [r9]
 8017f60:	6918      	ldr	r0, [r3, #16]
 8017f62:	f7ff fd2b 	bl	80179bc <__hi0bits>
 8017f66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017f6a:	e7df      	b.n	8017f2c <__d2b+0x70>
 8017f6c:	08018b3f 	.word	0x08018b3f
 8017f70:	08018b50 	.word	0x08018b50

08017f74 <_calloc_r>:
 8017f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f76:	fba1 2402 	umull	r2, r4, r1, r2
 8017f7a:	b94c      	cbnz	r4, 8017f90 <_calloc_r+0x1c>
 8017f7c:	4611      	mov	r1, r2
 8017f7e:	9201      	str	r2, [sp, #4]
 8017f80:	f7fd feb2 	bl	8015ce8 <_malloc_r>
 8017f84:	9a01      	ldr	r2, [sp, #4]
 8017f86:	4605      	mov	r5, r0
 8017f88:	b930      	cbnz	r0, 8017f98 <_calloc_r+0x24>
 8017f8a:	4628      	mov	r0, r5
 8017f8c:	b003      	add	sp, #12
 8017f8e:	bd30      	pop	{r4, r5, pc}
 8017f90:	220c      	movs	r2, #12
 8017f92:	6002      	str	r2, [r0, #0]
 8017f94:	2500      	movs	r5, #0
 8017f96:	e7f8      	b.n	8017f8a <_calloc_r+0x16>
 8017f98:	4621      	mov	r1, r4
 8017f9a:	f7fd fe31 	bl	8015c00 <memset>
 8017f9e:	e7f4      	b.n	8017f8a <_calloc_r+0x16>

08017fa0 <_read_r>:
 8017fa0:	b538      	push	{r3, r4, r5, lr}
 8017fa2:	4d07      	ldr	r5, [pc, #28]	; (8017fc0 <_read_r+0x20>)
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	4608      	mov	r0, r1
 8017fa8:	4611      	mov	r1, r2
 8017faa:	2200      	movs	r2, #0
 8017fac:	602a      	str	r2, [r5, #0]
 8017fae:	461a      	mov	r2, r3
 8017fb0:	f7f1 fbba 	bl	8009728 <_read>
 8017fb4:	1c43      	adds	r3, r0, #1
 8017fb6:	d102      	bne.n	8017fbe <_read_r+0x1e>
 8017fb8:	682b      	ldr	r3, [r5, #0]
 8017fba:	b103      	cbz	r3, 8017fbe <_read_r+0x1e>
 8017fbc:	6023      	str	r3, [r4, #0]
 8017fbe:	bd38      	pop	{r3, r4, r5, pc}
 8017fc0:	20007414 	.word	0x20007414

08017fc4 <__assert_func>:
 8017fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017fc6:	4614      	mov	r4, r2
 8017fc8:	461a      	mov	r2, r3
 8017fca:	4b09      	ldr	r3, [pc, #36]	; (8017ff0 <__assert_func+0x2c>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4605      	mov	r5, r0
 8017fd0:	68d8      	ldr	r0, [r3, #12]
 8017fd2:	b14c      	cbz	r4, 8017fe8 <__assert_func+0x24>
 8017fd4:	4b07      	ldr	r3, [pc, #28]	; (8017ff4 <__assert_func+0x30>)
 8017fd6:	9100      	str	r1, [sp, #0]
 8017fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017fdc:	4906      	ldr	r1, [pc, #24]	; (8017ff8 <__assert_func+0x34>)
 8017fde:	462b      	mov	r3, r5
 8017fe0:	f000 f80e 	bl	8018000 <fiprintf>
 8017fe4:	f7fd fcbc 	bl	8015960 <abort>
 8017fe8:	4b04      	ldr	r3, [pc, #16]	; (8017ffc <__assert_func+0x38>)
 8017fea:	461c      	mov	r4, r3
 8017fec:	e7f3      	b.n	8017fd6 <__assert_func+0x12>
 8017fee:	bf00      	nop
 8017ff0:	20000040 	.word	0x20000040
 8017ff4:	08018cac 	.word	0x08018cac
 8017ff8:	08018cb9 	.word	0x08018cb9
 8017ffc:	08018ce7 	.word	0x08018ce7

08018000 <fiprintf>:
 8018000:	b40e      	push	{r1, r2, r3}
 8018002:	b503      	push	{r0, r1, lr}
 8018004:	4601      	mov	r1, r0
 8018006:	ab03      	add	r3, sp, #12
 8018008:	4805      	ldr	r0, [pc, #20]	; (8018020 <fiprintf+0x20>)
 801800a:	f853 2b04 	ldr.w	r2, [r3], #4
 801800e:	6800      	ldr	r0, [r0, #0]
 8018010:	9301      	str	r3, [sp, #4]
 8018012:	f000 f843 	bl	801809c <_vfiprintf_r>
 8018016:	b002      	add	sp, #8
 8018018:	f85d eb04 	ldr.w	lr, [sp], #4
 801801c:	b003      	add	sp, #12
 801801e:	4770      	bx	lr
 8018020:	20000040 	.word	0x20000040

08018024 <__ascii_mbtowc>:
 8018024:	b082      	sub	sp, #8
 8018026:	b901      	cbnz	r1, 801802a <__ascii_mbtowc+0x6>
 8018028:	a901      	add	r1, sp, #4
 801802a:	b142      	cbz	r2, 801803e <__ascii_mbtowc+0x1a>
 801802c:	b14b      	cbz	r3, 8018042 <__ascii_mbtowc+0x1e>
 801802e:	7813      	ldrb	r3, [r2, #0]
 8018030:	600b      	str	r3, [r1, #0]
 8018032:	7812      	ldrb	r2, [r2, #0]
 8018034:	1e10      	subs	r0, r2, #0
 8018036:	bf18      	it	ne
 8018038:	2001      	movne	r0, #1
 801803a:	b002      	add	sp, #8
 801803c:	4770      	bx	lr
 801803e:	4610      	mov	r0, r2
 8018040:	e7fb      	b.n	801803a <__ascii_mbtowc+0x16>
 8018042:	f06f 0001 	mvn.w	r0, #1
 8018046:	e7f8      	b.n	801803a <__ascii_mbtowc+0x16>

08018048 <__sfputc_r>:
 8018048:	6893      	ldr	r3, [r2, #8]
 801804a:	3b01      	subs	r3, #1
 801804c:	2b00      	cmp	r3, #0
 801804e:	b410      	push	{r4}
 8018050:	6093      	str	r3, [r2, #8]
 8018052:	da08      	bge.n	8018066 <__sfputc_r+0x1e>
 8018054:	6994      	ldr	r4, [r2, #24]
 8018056:	42a3      	cmp	r3, r4
 8018058:	db01      	blt.n	801805e <__sfputc_r+0x16>
 801805a:	290a      	cmp	r1, #10
 801805c:	d103      	bne.n	8018066 <__sfputc_r+0x1e>
 801805e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018062:	f000 b94b 	b.w	80182fc <__swbuf_r>
 8018066:	6813      	ldr	r3, [r2, #0]
 8018068:	1c58      	adds	r0, r3, #1
 801806a:	6010      	str	r0, [r2, #0]
 801806c:	7019      	strb	r1, [r3, #0]
 801806e:	4608      	mov	r0, r1
 8018070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018074:	4770      	bx	lr

08018076 <__sfputs_r>:
 8018076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018078:	4606      	mov	r6, r0
 801807a:	460f      	mov	r7, r1
 801807c:	4614      	mov	r4, r2
 801807e:	18d5      	adds	r5, r2, r3
 8018080:	42ac      	cmp	r4, r5
 8018082:	d101      	bne.n	8018088 <__sfputs_r+0x12>
 8018084:	2000      	movs	r0, #0
 8018086:	e007      	b.n	8018098 <__sfputs_r+0x22>
 8018088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801808c:	463a      	mov	r2, r7
 801808e:	4630      	mov	r0, r6
 8018090:	f7ff ffda 	bl	8018048 <__sfputc_r>
 8018094:	1c43      	adds	r3, r0, #1
 8018096:	d1f3      	bne.n	8018080 <__sfputs_r+0xa>
 8018098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801809c <_vfiprintf_r>:
 801809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180a0:	460d      	mov	r5, r1
 80180a2:	b09d      	sub	sp, #116	; 0x74
 80180a4:	4614      	mov	r4, r2
 80180a6:	4698      	mov	r8, r3
 80180a8:	4606      	mov	r6, r0
 80180aa:	b118      	cbz	r0, 80180b4 <_vfiprintf_r+0x18>
 80180ac:	6983      	ldr	r3, [r0, #24]
 80180ae:	b90b      	cbnz	r3, 80180b4 <_vfiprintf_r+0x18>
 80180b0:	f7fd fcc2 	bl	8015a38 <__sinit>
 80180b4:	4b89      	ldr	r3, [pc, #548]	; (80182dc <_vfiprintf_r+0x240>)
 80180b6:	429d      	cmp	r5, r3
 80180b8:	d11b      	bne.n	80180f2 <_vfiprintf_r+0x56>
 80180ba:	6875      	ldr	r5, [r6, #4]
 80180bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80180be:	07d9      	lsls	r1, r3, #31
 80180c0:	d405      	bmi.n	80180ce <_vfiprintf_r+0x32>
 80180c2:	89ab      	ldrh	r3, [r5, #12]
 80180c4:	059a      	lsls	r2, r3, #22
 80180c6:	d402      	bmi.n	80180ce <_vfiprintf_r+0x32>
 80180c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80180ca:	f7fd fd78 	bl	8015bbe <__retarget_lock_acquire_recursive>
 80180ce:	89ab      	ldrh	r3, [r5, #12]
 80180d0:	071b      	lsls	r3, r3, #28
 80180d2:	d501      	bpl.n	80180d8 <_vfiprintf_r+0x3c>
 80180d4:	692b      	ldr	r3, [r5, #16]
 80180d6:	b9eb      	cbnz	r3, 8018114 <_vfiprintf_r+0x78>
 80180d8:	4629      	mov	r1, r5
 80180da:	4630      	mov	r0, r6
 80180dc:	f000 f96e 	bl	80183bc <__swsetup_r>
 80180e0:	b1c0      	cbz	r0, 8018114 <_vfiprintf_r+0x78>
 80180e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80180e4:	07dc      	lsls	r4, r3, #31
 80180e6:	d50e      	bpl.n	8018106 <_vfiprintf_r+0x6a>
 80180e8:	f04f 30ff 	mov.w	r0, #4294967295
 80180ec:	b01d      	add	sp, #116	; 0x74
 80180ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f2:	4b7b      	ldr	r3, [pc, #492]	; (80182e0 <_vfiprintf_r+0x244>)
 80180f4:	429d      	cmp	r5, r3
 80180f6:	d101      	bne.n	80180fc <_vfiprintf_r+0x60>
 80180f8:	68b5      	ldr	r5, [r6, #8]
 80180fa:	e7df      	b.n	80180bc <_vfiprintf_r+0x20>
 80180fc:	4b79      	ldr	r3, [pc, #484]	; (80182e4 <_vfiprintf_r+0x248>)
 80180fe:	429d      	cmp	r5, r3
 8018100:	bf08      	it	eq
 8018102:	68f5      	ldreq	r5, [r6, #12]
 8018104:	e7da      	b.n	80180bc <_vfiprintf_r+0x20>
 8018106:	89ab      	ldrh	r3, [r5, #12]
 8018108:	0598      	lsls	r0, r3, #22
 801810a:	d4ed      	bmi.n	80180e8 <_vfiprintf_r+0x4c>
 801810c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801810e:	f7fd fd58 	bl	8015bc2 <__retarget_lock_release_recursive>
 8018112:	e7e9      	b.n	80180e8 <_vfiprintf_r+0x4c>
 8018114:	2300      	movs	r3, #0
 8018116:	9309      	str	r3, [sp, #36]	; 0x24
 8018118:	2320      	movs	r3, #32
 801811a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801811e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018122:	2330      	movs	r3, #48	; 0x30
 8018124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80182e8 <_vfiprintf_r+0x24c>
 8018128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801812c:	f04f 0901 	mov.w	r9, #1
 8018130:	4623      	mov	r3, r4
 8018132:	469a      	mov	sl, r3
 8018134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018138:	b10a      	cbz	r2, 801813e <_vfiprintf_r+0xa2>
 801813a:	2a25      	cmp	r2, #37	; 0x25
 801813c:	d1f9      	bne.n	8018132 <_vfiprintf_r+0x96>
 801813e:	ebba 0b04 	subs.w	fp, sl, r4
 8018142:	d00b      	beq.n	801815c <_vfiprintf_r+0xc0>
 8018144:	465b      	mov	r3, fp
 8018146:	4622      	mov	r2, r4
 8018148:	4629      	mov	r1, r5
 801814a:	4630      	mov	r0, r6
 801814c:	f7ff ff93 	bl	8018076 <__sfputs_r>
 8018150:	3001      	adds	r0, #1
 8018152:	f000 80aa 	beq.w	80182aa <_vfiprintf_r+0x20e>
 8018156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018158:	445a      	add	r2, fp
 801815a:	9209      	str	r2, [sp, #36]	; 0x24
 801815c:	f89a 3000 	ldrb.w	r3, [sl]
 8018160:	2b00      	cmp	r3, #0
 8018162:	f000 80a2 	beq.w	80182aa <_vfiprintf_r+0x20e>
 8018166:	2300      	movs	r3, #0
 8018168:	f04f 32ff 	mov.w	r2, #4294967295
 801816c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018170:	f10a 0a01 	add.w	sl, sl, #1
 8018174:	9304      	str	r3, [sp, #16]
 8018176:	9307      	str	r3, [sp, #28]
 8018178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801817c:	931a      	str	r3, [sp, #104]	; 0x68
 801817e:	4654      	mov	r4, sl
 8018180:	2205      	movs	r2, #5
 8018182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018186:	4858      	ldr	r0, [pc, #352]	; (80182e8 <_vfiprintf_r+0x24c>)
 8018188:	f7e8 f82a 	bl	80001e0 <memchr>
 801818c:	9a04      	ldr	r2, [sp, #16]
 801818e:	b9d8      	cbnz	r0, 80181c8 <_vfiprintf_r+0x12c>
 8018190:	06d1      	lsls	r1, r2, #27
 8018192:	bf44      	itt	mi
 8018194:	2320      	movmi	r3, #32
 8018196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801819a:	0713      	lsls	r3, r2, #28
 801819c:	bf44      	itt	mi
 801819e:	232b      	movmi	r3, #43	; 0x2b
 80181a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181a4:	f89a 3000 	ldrb.w	r3, [sl]
 80181a8:	2b2a      	cmp	r3, #42	; 0x2a
 80181aa:	d015      	beq.n	80181d8 <_vfiprintf_r+0x13c>
 80181ac:	9a07      	ldr	r2, [sp, #28]
 80181ae:	4654      	mov	r4, sl
 80181b0:	2000      	movs	r0, #0
 80181b2:	f04f 0c0a 	mov.w	ip, #10
 80181b6:	4621      	mov	r1, r4
 80181b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181bc:	3b30      	subs	r3, #48	; 0x30
 80181be:	2b09      	cmp	r3, #9
 80181c0:	d94e      	bls.n	8018260 <_vfiprintf_r+0x1c4>
 80181c2:	b1b0      	cbz	r0, 80181f2 <_vfiprintf_r+0x156>
 80181c4:	9207      	str	r2, [sp, #28]
 80181c6:	e014      	b.n	80181f2 <_vfiprintf_r+0x156>
 80181c8:	eba0 0308 	sub.w	r3, r0, r8
 80181cc:	fa09 f303 	lsl.w	r3, r9, r3
 80181d0:	4313      	orrs	r3, r2
 80181d2:	9304      	str	r3, [sp, #16]
 80181d4:	46a2      	mov	sl, r4
 80181d6:	e7d2      	b.n	801817e <_vfiprintf_r+0xe2>
 80181d8:	9b03      	ldr	r3, [sp, #12]
 80181da:	1d19      	adds	r1, r3, #4
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	9103      	str	r1, [sp, #12]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	bfbb      	ittet	lt
 80181e4:	425b      	neglt	r3, r3
 80181e6:	f042 0202 	orrlt.w	r2, r2, #2
 80181ea:	9307      	strge	r3, [sp, #28]
 80181ec:	9307      	strlt	r3, [sp, #28]
 80181ee:	bfb8      	it	lt
 80181f0:	9204      	strlt	r2, [sp, #16]
 80181f2:	7823      	ldrb	r3, [r4, #0]
 80181f4:	2b2e      	cmp	r3, #46	; 0x2e
 80181f6:	d10c      	bne.n	8018212 <_vfiprintf_r+0x176>
 80181f8:	7863      	ldrb	r3, [r4, #1]
 80181fa:	2b2a      	cmp	r3, #42	; 0x2a
 80181fc:	d135      	bne.n	801826a <_vfiprintf_r+0x1ce>
 80181fe:	9b03      	ldr	r3, [sp, #12]
 8018200:	1d1a      	adds	r2, r3, #4
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	9203      	str	r2, [sp, #12]
 8018206:	2b00      	cmp	r3, #0
 8018208:	bfb8      	it	lt
 801820a:	f04f 33ff 	movlt.w	r3, #4294967295
 801820e:	3402      	adds	r4, #2
 8018210:	9305      	str	r3, [sp, #20]
 8018212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80182f8 <_vfiprintf_r+0x25c>
 8018216:	7821      	ldrb	r1, [r4, #0]
 8018218:	2203      	movs	r2, #3
 801821a:	4650      	mov	r0, sl
 801821c:	f7e7 ffe0 	bl	80001e0 <memchr>
 8018220:	b140      	cbz	r0, 8018234 <_vfiprintf_r+0x198>
 8018222:	2340      	movs	r3, #64	; 0x40
 8018224:	eba0 000a 	sub.w	r0, r0, sl
 8018228:	fa03 f000 	lsl.w	r0, r3, r0
 801822c:	9b04      	ldr	r3, [sp, #16]
 801822e:	4303      	orrs	r3, r0
 8018230:	3401      	adds	r4, #1
 8018232:	9304      	str	r3, [sp, #16]
 8018234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018238:	482c      	ldr	r0, [pc, #176]	; (80182ec <_vfiprintf_r+0x250>)
 801823a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801823e:	2206      	movs	r2, #6
 8018240:	f7e7 ffce 	bl	80001e0 <memchr>
 8018244:	2800      	cmp	r0, #0
 8018246:	d03f      	beq.n	80182c8 <_vfiprintf_r+0x22c>
 8018248:	4b29      	ldr	r3, [pc, #164]	; (80182f0 <_vfiprintf_r+0x254>)
 801824a:	bb1b      	cbnz	r3, 8018294 <_vfiprintf_r+0x1f8>
 801824c:	9b03      	ldr	r3, [sp, #12]
 801824e:	3307      	adds	r3, #7
 8018250:	f023 0307 	bic.w	r3, r3, #7
 8018254:	3308      	adds	r3, #8
 8018256:	9303      	str	r3, [sp, #12]
 8018258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801825a:	443b      	add	r3, r7
 801825c:	9309      	str	r3, [sp, #36]	; 0x24
 801825e:	e767      	b.n	8018130 <_vfiprintf_r+0x94>
 8018260:	fb0c 3202 	mla	r2, ip, r2, r3
 8018264:	460c      	mov	r4, r1
 8018266:	2001      	movs	r0, #1
 8018268:	e7a5      	b.n	80181b6 <_vfiprintf_r+0x11a>
 801826a:	2300      	movs	r3, #0
 801826c:	3401      	adds	r4, #1
 801826e:	9305      	str	r3, [sp, #20]
 8018270:	4619      	mov	r1, r3
 8018272:	f04f 0c0a 	mov.w	ip, #10
 8018276:	4620      	mov	r0, r4
 8018278:	f810 2b01 	ldrb.w	r2, [r0], #1
 801827c:	3a30      	subs	r2, #48	; 0x30
 801827e:	2a09      	cmp	r2, #9
 8018280:	d903      	bls.n	801828a <_vfiprintf_r+0x1ee>
 8018282:	2b00      	cmp	r3, #0
 8018284:	d0c5      	beq.n	8018212 <_vfiprintf_r+0x176>
 8018286:	9105      	str	r1, [sp, #20]
 8018288:	e7c3      	b.n	8018212 <_vfiprintf_r+0x176>
 801828a:	fb0c 2101 	mla	r1, ip, r1, r2
 801828e:	4604      	mov	r4, r0
 8018290:	2301      	movs	r3, #1
 8018292:	e7f0      	b.n	8018276 <_vfiprintf_r+0x1da>
 8018294:	ab03      	add	r3, sp, #12
 8018296:	9300      	str	r3, [sp, #0]
 8018298:	462a      	mov	r2, r5
 801829a:	4b16      	ldr	r3, [pc, #88]	; (80182f4 <_vfiprintf_r+0x258>)
 801829c:	a904      	add	r1, sp, #16
 801829e:	4630      	mov	r0, r6
 80182a0:	f7fd fe36 	bl	8015f10 <_printf_float>
 80182a4:	4607      	mov	r7, r0
 80182a6:	1c78      	adds	r0, r7, #1
 80182a8:	d1d6      	bne.n	8018258 <_vfiprintf_r+0x1bc>
 80182aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182ac:	07d9      	lsls	r1, r3, #31
 80182ae:	d405      	bmi.n	80182bc <_vfiprintf_r+0x220>
 80182b0:	89ab      	ldrh	r3, [r5, #12]
 80182b2:	059a      	lsls	r2, r3, #22
 80182b4:	d402      	bmi.n	80182bc <_vfiprintf_r+0x220>
 80182b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182b8:	f7fd fc83 	bl	8015bc2 <__retarget_lock_release_recursive>
 80182bc:	89ab      	ldrh	r3, [r5, #12]
 80182be:	065b      	lsls	r3, r3, #25
 80182c0:	f53f af12 	bmi.w	80180e8 <_vfiprintf_r+0x4c>
 80182c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80182c6:	e711      	b.n	80180ec <_vfiprintf_r+0x50>
 80182c8:	ab03      	add	r3, sp, #12
 80182ca:	9300      	str	r3, [sp, #0]
 80182cc:	462a      	mov	r2, r5
 80182ce:	4b09      	ldr	r3, [pc, #36]	; (80182f4 <_vfiprintf_r+0x258>)
 80182d0:	a904      	add	r1, sp, #16
 80182d2:	4630      	mov	r0, r6
 80182d4:	f7fe f8c0 	bl	8016458 <_printf_i>
 80182d8:	e7e4      	b.n	80182a4 <_vfiprintf_r+0x208>
 80182da:	bf00      	nop
 80182dc:	08018a48 	.word	0x08018a48
 80182e0:	08018a68 	.word	0x08018a68
 80182e4:	08018a28 	.word	0x08018a28
 80182e8:	08018cf2 	.word	0x08018cf2
 80182ec:	08018cfc 	.word	0x08018cfc
 80182f0:	08015f11 	.word	0x08015f11
 80182f4:	08018077 	.word	0x08018077
 80182f8:	08018cf8 	.word	0x08018cf8

080182fc <__swbuf_r>:
 80182fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182fe:	460e      	mov	r6, r1
 8018300:	4614      	mov	r4, r2
 8018302:	4605      	mov	r5, r0
 8018304:	b118      	cbz	r0, 801830e <__swbuf_r+0x12>
 8018306:	6983      	ldr	r3, [r0, #24]
 8018308:	b90b      	cbnz	r3, 801830e <__swbuf_r+0x12>
 801830a:	f7fd fb95 	bl	8015a38 <__sinit>
 801830e:	4b21      	ldr	r3, [pc, #132]	; (8018394 <__swbuf_r+0x98>)
 8018310:	429c      	cmp	r4, r3
 8018312:	d12b      	bne.n	801836c <__swbuf_r+0x70>
 8018314:	686c      	ldr	r4, [r5, #4]
 8018316:	69a3      	ldr	r3, [r4, #24]
 8018318:	60a3      	str	r3, [r4, #8]
 801831a:	89a3      	ldrh	r3, [r4, #12]
 801831c:	071a      	lsls	r2, r3, #28
 801831e:	d52f      	bpl.n	8018380 <__swbuf_r+0x84>
 8018320:	6923      	ldr	r3, [r4, #16]
 8018322:	b36b      	cbz	r3, 8018380 <__swbuf_r+0x84>
 8018324:	6923      	ldr	r3, [r4, #16]
 8018326:	6820      	ldr	r0, [r4, #0]
 8018328:	1ac0      	subs	r0, r0, r3
 801832a:	6963      	ldr	r3, [r4, #20]
 801832c:	b2f6      	uxtb	r6, r6
 801832e:	4283      	cmp	r3, r0
 8018330:	4637      	mov	r7, r6
 8018332:	dc04      	bgt.n	801833e <__swbuf_r+0x42>
 8018334:	4621      	mov	r1, r4
 8018336:	4628      	mov	r0, r5
 8018338:	f7ff fa3a 	bl	80177b0 <_fflush_r>
 801833c:	bb30      	cbnz	r0, 801838c <__swbuf_r+0x90>
 801833e:	68a3      	ldr	r3, [r4, #8]
 8018340:	3b01      	subs	r3, #1
 8018342:	60a3      	str	r3, [r4, #8]
 8018344:	6823      	ldr	r3, [r4, #0]
 8018346:	1c5a      	adds	r2, r3, #1
 8018348:	6022      	str	r2, [r4, #0]
 801834a:	701e      	strb	r6, [r3, #0]
 801834c:	6963      	ldr	r3, [r4, #20]
 801834e:	3001      	adds	r0, #1
 8018350:	4283      	cmp	r3, r0
 8018352:	d004      	beq.n	801835e <__swbuf_r+0x62>
 8018354:	89a3      	ldrh	r3, [r4, #12]
 8018356:	07db      	lsls	r3, r3, #31
 8018358:	d506      	bpl.n	8018368 <__swbuf_r+0x6c>
 801835a:	2e0a      	cmp	r6, #10
 801835c:	d104      	bne.n	8018368 <__swbuf_r+0x6c>
 801835e:	4621      	mov	r1, r4
 8018360:	4628      	mov	r0, r5
 8018362:	f7ff fa25 	bl	80177b0 <_fflush_r>
 8018366:	b988      	cbnz	r0, 801838c <__swbuf_r+0x90>
 8018368:	4638      	mov	r0, r7
 801836a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801836c:	4b0a      	ldr	r3, [pc, #40]	; (8018398 <__swbuf_r+0x9c>)
 801836e:	429c      	cmp	r4, r3
 8018370:	d101      	bne.n	8018376 <__swbuf_r+0x7a>
 8018372:	68ac      	ldr	r4, [r5, #8]
 8018374:	e7cf      	b.n	8018316 <__swbuf_r+0x1a>
 8018376:	4b09      	ldr	r3, [pc, #36]	; (801839c <__swbuf_r+0xa0>)
 8018378:	429c      	cmp	r4, r3
 801837a:	bf08      	it	eq
 801837c:	68ec      	ldreq	r4, [r5, #12]
 801837e:	e7ca      	b.n	8018316 <__swbuf_r+0x1a>
 8018380:	4621      	mov	r1, r4
 8018382:	4628      	mov	r0, r5
 8018384:	f000 f81a 	bl	80183bc <__swsetup_r>
 8018388:	2800      	cmp	r0, #0
 801838a:	d0cb      	beq.n	8018324 <__swbuf_r+0x28>
 801838c:	f04f 37ff 	mov.w	r7, #4294967295
 8018390:	e7ea      	b.n	8018368 <__swbuf_r+0x6c>
 8018392:	bf00      	nop
 8018394:	08018a48 	.word	0x08018a48
 8018398:	08018a68 	.word	0x08018a68
 801839c:	08018a28 	.word	0x08018a28

080183a0 <__ascii_wctomb>:
 80183a0:	b149      	cbz	r1, 80183b6 <__ascii_wctomb+0x16>
 80183a2:	2aff      	cmp	r2, #255	; 0xff
 80183a4:	bf85      	ittet	hi
 80183a6:	238a      	movhi	r3, #138	; 0x8a
 80183a8:	6003      	strhi	r3, [r0, #0]
 80183aa:	700a      	strbls	r2, [r1, #0]
 80183ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80183b0:	bf98      	it	ls
 80183b2:	2001      	movls	r0, #1
 80183b4:	4770      	bx	lr
 80183b6:	4608      	mov	r0, r1
 80183b8:	4770      	bx	lr
	...

080183bc <__swsetup_r>:
 80183bc:	4b32      	ldr	r3, [pc, #200]	; (8018488 <__swsetup_r+0xcc>)
 80183be:	b570      	push	{r4, r5, r6, lr}
 80183c0:	681d      	ldr	r5, [r3, #0]
 80183c2:	4606      	mov	r6, r0
 80183c4:	460c      	mov	r4, r1
 80183c6:	b125      	cbz	r5, 80183d2 <__swsetup_r+0x16>
 80183c8:	69ab      	ldr	r3, [r5, #24]
 80183ca:	b913      	cbnz	r3, 80183d2 <__swsetup_r+0x16>
 80183cc:	4628      	mov	r0, r5
 80183ce:	f7fd fb33 	bl	8015a38 <__sinit>
 80183d2:	4b2e      	ldr	r3, [pc, #184]	; (801848c <__swsetup_r+0xd0>)
 80183d4:	429c      	cmp	r4, r3
 80183d6:	d10f      	bne.n	80183f8 <__swsetup_r+0x3c>
 80183d8:	686c      	ldr	r4, [r5, #4]
 80183da:	89a3      	ldrh	r3, [r4, #12]
 80183dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80183e0:	0719      	lsls	r1, r3, #28
 80183e2:	d42c      	bmi.n	801843e <__swsetup_r+0x82>
 80183e4:	06dd      	lsls	r5, r3, #27
 80183e6:	d411      	bmi.n	801840c <__swsetup_r+0x50>
 80183e8:	2309      	movs	r3, #9
 80183ea:	6033      	str	r3, [r6, #0]
 80183ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80183f0:	81a3      	strh	r3, [r4, #12]
 80183f2:	f04f 30ff 	mov.w	r0, #4294967295
 80183f6:	e03e      	b.n	8018476 <__swsetup_r+0xba>
 80183f8:	4b25      	ldr	r3, [pc, #148]	; (8018490 <__swsetup_r+0xd4>)
 80183fa:	429c      	cmp	r4, r3
 80183fc:	d101      	bne.n	8018402 <__swsetup_r+0x46>
 80183fe:	68ac      	ldr	r4, [r5, #8]
 8018400:	e7eb      	b.n	80183da <__swsetup_r+0x1e>
 8018402:	4b24      	ldr	r3, [pc, #144]	; (8018494 <__swsetup_r+0xd8>)
 8018404:	429c      	cmp	r4, r3
 8018406:	bf08      	it	eq
 8018408:	68ec      	ldreq	r4, [r5, #12]
 801840a:	e7e6      	b.n	80183da <__swsetup_r+0x1e>
 801840c:	0758      	lsls	r0, r3, #29
 801840e:	d512      	bpl.n	8018436 <__swsetup_r+0x7a>
 8018410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018412:	b141      	cbz	r1, 8018426 <__swsetup_r+0x6a>
 8018414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018418:	4299      	cmp	r1, r3
 801841a:	d002      	beq.n	8018422 <__swsetup_r+0x66>
 801841c:	4630      	mov	r0, r6
 801841e:	f7fd fbf7 	bl	8015c10 <_free_r>
 8018422:	2300      	movs	r3, #0
 8018424:	6363      	str	r3, [r4, #52]	; 0x34
 8018426:	89a3      	ldrh	r3, [r4, #12]
 8018428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801842c:	81a3      	strh	r3, [r4, #12]
 801842e:	2300      	movs	r3, #0
 8018430:	6063      	str	r3, [r4, #4]
 8018432:	6923      	ldr	r3, [r4, #16]
 8018434:	6023      	str	r3, [r4, #0]
 8018436:	89a3      	ldrh	r3, [r4, #12]
 8018438:	f043 0308 	orr.w	r3, r3, #8
 801843c:	81a3      	strh	r3, [r4, #12]
 801843e:	6923      	ldr	r3, [r4, #16]
 8018440:	b94b      	cbnz	r3, 8018456 <__swsetup_r+0x9a>
 8018442:	89a3      	ldrh	r3, [r4, #12]
 8018444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801844c:	d003      	beq.n	8018456 <__swsetup_r+0x9a>
 801844e:	4621      	mov	r1, r4
 8018450:	4630      	mov	r0, r6
 8018452:	f000 f847 	bl	80184e4 <__smakebuf_r>
 8018456:	89a0      	ldrh	r0, [r4, #12]
 8018458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801845c:	f010 0301 	ands.w	r3, r0, #1
 8018460:	d00a      	beq.n	8018478 <__swsetup_r+0xbc>
 8018462:	2300      	movs	r3, #0
 8018464:	60a3      	str	r3, [r4, #8]
 8018466:	6963      	ldr	r3, [r4, #20]
 8018468:	425b      	negs	r3, r3
 801846a:	61a3      	str	r3, [r4, #24]
 801846c:	6923      	ldr	r3, [r4, #16]
 801846e:	b943      	cbnz	r3, 8018482 <__swsetup_r+0xc6>
 8018470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018474:	d1ba      	bne.n	80183ec <__swsetup_r+0x30>
 8018476:	bd70      	pop	{r4, r5, r6, pc}
 8018478:	0781      	lsls	r1, r0, #30
 801847a:	bf58      	it	pl
 801847c:	6963      	ldrpl	r3, [r4, #20]
 801847e:	60a3      	str	r3, [r4, #8]
 8018480:	e7f4      	b.n	801846c <__swsetup_r+0xb0>
 8018482:	2000      	movs	r0, #0
 8018484:	e7f7      	b.n	8018476 <__swsetup_r+0xba>
 8018486:	bf00      	nop
 8018488:	20000040 	.word	0x20000040
 801848c:	08018a48 	.word	0x08018a48
 8018490:	08018a68 	.word	0x08018a68
 8018494:	08018a28 	.word	0x08018a28

08018498 <__swhatbuf_r>:
 8018498:	b570      	push	{r4, r5, r6, lr}
 801849a:	460e      	mov	r6, r1
 801849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184a0:	2900      	cmp	r1, #0
 80184a2:	b096      	sub	sp, #88	; 0x58
 80184a4:	4614      	mov	r4, r2
 80184a6:	461d      	mov	r5, r3
 80184a8:	da08      	bge.n	80184bc <__swhatbuf_r+0x24>
 80184aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80184ae:	2200      	movs	r2, #0
 80184b0:	602a      	str	r2, [r5, #0]
 80184b2:	061a      	lsls	r2, r3, #24
 80184b4:	d410      	bmi.n	80184d8 <__swhatbuf_r+0x40>
 80184b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80184ba:	e00e      	b.n	80184da <__swhatbuf_r+0x42>
 80184bc:	466a      	mov	r2, sp
 80184be:	f000 f851 	bl	8018564 <_fstat_r>
 80184c2:	2800      	cmp	r0, #0
 80184c4:	dbf1      	blt.n	80184aa <__swhatbuf_r+0x12>
 80184c6:	9a01      	ldr	r2, [sp, #4]
 80184c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80184cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80184d0:	425a      	negs	r2, r3
 80184d2:	415a      	adcs	r2, r3
 80184d4:	602a      	str	r2, [r5, #0]
 80184d6:	e7ee      	b.n	80184b6 <__swhatbuf_r+0x1e>
 80184d8:	2340      	movs	r3, #64	; 0x40
 80184da:	2000      	movs	r0, #0
 80184dc:	6023      	str	r3, [r4, #0]
 80184de:	b016      	add	sp, #88	; 0x58
 80184e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080184e4 <__smakebuf_r>:
 80184e4:	898b      	ldrh	r3, [r1, #12]
 80184e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80184e8:	079d      	lsls	r5, r3, #30
 80184ea:	4606      	mov	r6, r0
 80184ec:	460c      	mov	r4, r1
 80184ee:	d507      	bpl.n	8018500 <__smakebuf_r+0x1c>
 80184f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80184f4:	6023      	str	r3, [r4, #0]
 80184f6:	6123      	str	r3, [r4, #16]
 80184f8:	2301      	movs	r3, #1
 80184fa:	6163      	str	r3, [r4, #20]
 80184fc:	b002      	add	sp, #8
 80184fe:	bd70      	pop	{r4, r5, r6, pc}
 8018500:	ab01      	add	r3, sp, #4
 8018502:	466a      	mov	r2, sp
 8018504:	f7ff ffc8 	bl	8018498 <__swhatbuf_r>
 8018508:	9900      	ldr	r1, [sp, #0]
 801850a:	4605      	mov	r5, r0
 801850c:	4630      	mov	r0, r6
 801850e:	f7fd fbeb 	bl	8015ce8 <_malloc_r>
 8018512:	b948      	cbnz	r0, 8018528 <__smakebuf_r+0x44>
 8018514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018518:	059a      	lsls	r2, r3, #22
 801851a:	d4ef      	bmi.n	80184fc <__smakebuf_r+0x18>
 801851c:	f023 0303 	bic.w	r3, r3, #3
 8018520:	f043 0302 	orr.w	r3, r3, #2
 8018524:	81a3      	strh	r3, [r4, #12]
 8018526:	e7e3      	b.n	80184f0 <__smakebuf_r+0xc>
 8018528:	4b0d      	ldr	r3, [pc, #52]	; (8018560 <__smakebuf_r+0x7c>)
 801852a:	62b3      	str	r3, [r6, #40]	; 0x28
 801852c:	89a3      	ldrh	r3, [r4, #12]
 801852e:	6020      	str	r0, [r4, #0]
 8018530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018534:	81a3      	strh	r3, [r4, #12]
 8018536:	9b00      	ldr	r3, [sp, #0]
 8018538:	6163      	str	r3, [r4, #20]
 801853a:	9b01      	ldr	r3, [sp, #4]
 801853c:	6120      	str	r0, [r4, #16]
 801853e:	b15b      	cbz	r3, 8018558 <__smakebuf_r+0x74>
 8018540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018544:	4630      	mov	r0, r6
 8018546:	f000 f81f 	bl	8018588 <_isatty_r>
 801854a:	b128      	cbz	r0, 8018558 <__smakebuf_r+0x74>
 801854c:	89a3      	ldrh	r3, [r4, #12]
 801854e:	f023 0303 	bic.w	r3, r3, #3
 8018552:	f043 0301 	orr.w	r3, r3, #1
 8018556:	81a3      	strh	r3, [r4, #12]
 8018558:	89a0      	ldrh	r0, [r4, #12]
 801855a:	4305      	orrs	r5, r0
 801855c:	81a5      	strh	r5, [r4, #12]
 801855e:	e7cd      	b.n	80184fc <__smakebuf_r+0x18>
 8018560:	080159d1 	.word	0x080159d1

08018564 <_fstat_r>:
 8018564:	b538      	push	{r3, r4, r5, lr}
 8018566:	4d07      	ldr	r5, [pc, #28]	; (8018584 <_fstat_r+0x20>)
 8018568:	2300      	movs	r3, #0
 801856a:	4604      	mov	r4, r0
 801856c:	4608      	mov	r0, r1
 801856e:	4611      	mov	r1, r2
 8018570:	602b      	str	r3, [r5, #0]
 8018572:	f7f1 f91e 	bl	80097b2 <_fstat>
 8018576:	1c43      	adds	r3, r0, #1
 8018578:	d102      	bne.n	8018580 <_fstat_r+0x1c>
 801857a:	682b      	ldr	r3, [r5, #0]
 801857c:	b103      	cbz	r3, 8018580 <_fstat_r+0x1c>
 801857e:	6023      	str	r3, [r4, #0]
 8018580:	bd38      	pop	{r3, r4, r5, pc}
 8018582:	bf00      	nop
 8018584:	20007414 	.word	0x20007414

08018588 <_isatty_r>:
 8018588:	b538      	push	{r3, r4, r5, lr}
 801858a:	4d06      	ldr	r5, [pc, #24]	; (80185a4 <_isatty_r+0x1c>)
 801858c:	2300      	movs	r3, #0
 801858e:	4604      	mov	r4, r0
 8018590:	4608      	mov	r0, r1
 8018592:	602b      	str	r3, [r5, #0]
 8018594:	f7f1 f91d 	bl	80097d2 <_isatty>
 8018598:	1c43      	adds	r3, r0, #1
 801859a:	d102      	bne.n	80185a2 <_isatty_r+0x1a>
 801859c:	682b      	ldr	r3, [r5, #0]
 801859e:	b103      	cbz	r3, 80185a2 <_isatty_r+0x1a>
 80185a0:	6023      	str	r3, [r4, #0]
 80185a2:	bd38      	pop	{r3, r4, r5, pc}
 80185a4:	20007414 	.word	0x20007414

080185a8 <_init>:
 80185a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185aa:	bf00      	nop
 80185ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185ae:	bc08      	pop	{r3}
 80185b0:	469e      	mov	lr, r3
 80185b2:	4770      	bx	lr

080185b4 <_fini>:
 80185b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185b6:	bf00      	nop
 80185b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185ba:	bc08      	pop	{r3}
 80185bc:	469e      	mov	lr, r3
 80185be:	4770      	bx	lr
