
pdu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ebe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  0801ed70  0801ed70  0002ed70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f734  0801f734  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  0801f734  0801f734  0002f734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f73c  0801f73c  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0801f73c  0801f73c  0002f73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0801f760  0801f760  0002f760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0801f76c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030214  2**0
                  CONTENTS
 10 .bss          000072fc  20000218  20000218  00030218  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20007514  20007514  00030218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005642c  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ba64  00000000  00000000  00086670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ae0  00000000  00000000  000920d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003758  00000000  00000000  00095bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000315ca  00000000  00000000  00099310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000402b8  00000000  00000000  000ca8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010933b  00000000  00000000  0010ab92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00213ecd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001124c  00000000  00000000  00213f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ed58 	.word	0x0801ed58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0801ed58 	.word	0x0801ed58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f016 fd28 	bl	8017c98 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f01a f9e4 	bl	801b624 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f016 f8c3 	bl	80173ec <printf_>
 8001266:	f01a fa0d 	bl	801b684 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007c4 	.word	0x200007c4
 8001278:	0801ed70 	.word	0x0801ed70

0800127c <_ZN3can7MessageINS_8messages8PDU_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	219a      	movs	r1, #154	; 0x9a
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN7canzero9emergency14consumer_entryEPv>:


osThreadId_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 80012aa:	f019 f9e9 	bl	801a680 <xTaskGetCurrentTaskHandle>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 80012b2:	6013      	str	r3, [r2, #0]

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffdf 	bl	800127c <_ZN3can7MessageINS_8messages8PDU_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f019 fb6f 	bl	801a9b4 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012de:	f001 f87f 	bl	80023e0 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00b      	beq.n	8001308 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	461c      	mov	r4, r3
 80012f6:	4615      	mov	r5, r2
 80012f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff8c 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800130c:	e7db      	b.n	80012c6 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800130e:	bf00      	nop
 8001310:	20000234 	.word	0x20000234

08001314 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff53 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001326:	f240 731a 	movw	r3, #1818	; 0x71a
 800132a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001334:	f000 ff74 	bl	8002220 <_ZN7canzero9getStatusEv>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	f016 fca5 	bl	8017c98 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800134e:	f000 f841 	bl	80013d4 <_ZN7canzero9heartbeat11getIntervalEv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f016 f9ba 	bl	80176e0 <osDelay>
		frame ++;
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	3301      	adds	r3, #1
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001372:	e7df      	b.n	8001334 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001374:	200007c4 	.word	0x200007c4
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 f824 	bl	80013d4 <_ZN7canzero9heartbeat11getIntervalEv>
 800138c:	4603      	mov	r3, r0
 800138e:	3305      	adds	r3, #5
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	4620      	mov	r0, r4
 80013aa:	f018 f89b 	bl	80194e4 <xStreamBufferReceive>
 80013ae:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0e2      	beq.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 ff10 	bl	80021e8 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013c8:	e7dc      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013ca:	bf00      	nop
 80013cc:	20000238 	.word	0x20000238
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013d8:	f004 fbee 	bl	8005bb8 <_Z24OD_HeartbeatInterval_getv>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_Z41__static_initialization_and_destruction_0ii>:
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10c      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d107      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80013fe:	2201      	movs	r2, #1
 8001400:	2100      	movs	r1, #0
 8001402:	20c8      	movs	r0, #200	; 0xc8
 8001404:	f017 feee 	bl	80191e4 <xStreamBufferGenericCreate>
 8001408:	4603      	mov	r3, r0
 800140a:	4a03      	ldr	r2, [pc, #12]	; (8001418 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000238 	.word	0x20000238

0800141c <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
 8001420:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff ffdd 	bl	80013e4 <_Z41__static_initialization_and_destruction_0ii>
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4798      	blx	r3
    }
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffd4 	bl	8001448 <_ZNSt14_Function_baseD1Ev>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f927 	bl	8001708 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZN7canzero10receiver_tD1Ev>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffde 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZN7canzero10receiver_taSERKS0_>:
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f939 	bl	8001766 <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	7d1a      	ldrb	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	751a      	strb	r2, [r3, #20]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b08d      	sub	sp, #52	; 0x34
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	481a      	ldr	r0, [pc, #104]	; (8001594 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 800152a:	f015 ff5f 	bl	80173ec <printf_>
	taskENTER_CRITICAL();
 800152e:	f01a f879 	bl	801b624 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	4917      	ldr	r1, [pc, #92]	; (8001598 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 800153a:	600a      	str	r2, [r1, #0]
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f8ec 	bl	8001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	1c53      	adds	r3, r2, #1
 800155e:	490f      	ldr	r1, [pc, #60]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001560:	600b      	str	r3, [r1, #0]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 800156c:	4413      	add	r3, r2
 800156e:	f107 0210 	add.w	r2, r7, #16
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffb2 	bl	80014de <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 800157a:	f01a f883 	bl	801b684 <vPortExitCritical>
	return id;
 800157e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff9d 	bl	80014c4 <_ZN7canzero10receiver_tD1Ev>
	return id;
 800158a:	4623      	mov	r3, r4
}
 800158c:	4618      	mov	r0, r3
 800158e:	3734      	adds	r7, #52	; 0x34
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	0801eda4 	.word	0x0801eda4
 8001598:	2000023c 	.word	0x2000023c
 800159c:	200007b8 	.word	0x200007b8
 80015a0:	20000240 	.word	0x20000240

080015a4 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80015ac:	2300      	movs	r3, #0
 80015ae:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d12f      	bne.n	8001618 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d258      	bcs.n	8001678 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80015c6:	4930      	ldr	r1, [pc, #192]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3314      	adds	r3, #20
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d119      	bne.n	8001610 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	4829      	ldr	r0, [pc, #164]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4403      	add	r3, r0
 80015ee:	3310      	adds	r3, #16
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4299      	cmp	r1, r3
 80015f4:	d10c      	bne.n	8001610 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001602:	4413      	add	r3, r2
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f8c8 	bl	800179c <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 800160c:	2301      	movs	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	3301      	adds	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e7d1      	b.n	80015bc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	429a      	cmp	r2, r3
 8001624:	d228      	bcs.n	8001678 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 8001626:	4918      	ldr	r1, [pc, #96]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3314      	adds	r3, #20
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d119      	bne.n	8001670 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4403      	add	r3, r0
 800164e:	3310      	adds	r3, #16
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4299      	cmp	r1, r3
 8001654:	d10c      	bne.n	8001670 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4a09      	ldr	r2, [pc, #36]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001662:	4413      	add	r3, r2
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f898 	bl	800179c <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 800166c:	2301      	movs	r3, #1
 800166e:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e7d1      	b.n	800161c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 8001678:	7dfb      	ldrb	r3, [r7, #23]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200007b8 	.word	0x200007b8
 8001688:	20000240 	.word	0x20000240

0800168c <_ZN3can25unregisterMessageReceiverEj>:



namespace can {

void unregisterMessageReceiver(unsigned int id){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	using namespace canzero;
	taskENTER_CRITICAL();
 8001694:	f019 ffc6 	bl	801b624 <vPortEnterCritical>
	for(size_t i = 0;i<g_size;i++){
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d226      	bcs.n	80016f4 <_ZN3can25unregisterMessageReceiverEj+0x68>
		if(g_receivers[i].m_receiverId == id){
 80016a6:	4917      	ldr	r1, [pc, #92]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3318      	adds	r3, #24
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d116      	bne.n	80016ec <_ZN3can25unregisterMessageReceiverEj+0x60>
			g_receivers[i] = g_receivers[--g_size];
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016ca:	1898      	adds	r0, r3, r2
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016e4:	4413      	add	r3, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fef9 	bl	80014de <_ZN7canzero10receiver_taSERKS0_>
	for(size_t i = 0;i<g_size;i++){
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e7d3      	b.n	800169c <_ZN3can25unregisterMessageReceiverEj+0x10>
		}
	}
	taskEXIT_CRITICAL();
 80016f4:	f019 ffc6 	bl	801b684 <vPortExitCritical>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200007b8 	.word	0x200007b8
 8001704:	20000240 	.word	0x20000240

08001708 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe8a 	bl	800142c <_ZNSt14_Function_baseC1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe7c 	bl	800142c <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f000 f84d 	bl	80017d4 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	2202      	movs	r2, #2
 800174a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
	}
    }
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ffd3 	bl	8001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f836 	bl	80017f4 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe7f 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 8001792:	687b      	ldr	r3, [r7, #4]
      }
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe60 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 80017b4:	f01a fa65 	bl	801bc82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68dc      	ldr	r4, [r3, #12]
 80017bc:	687d      	ldr	r5, [r7, #4]
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f000 f839 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4628      	mov	r0, r5
 80017ca:	47a0      	blx	r4
 80017cc:	bf00      	nop
    }
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bdb0      	pop	{r4, r5, r7, pc}

080017d4 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe45 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f82c 	bl	8001862 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f103 0208 	add.w	r2, r3, #8
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3308      	adds	r3, #8
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f000 f855 	bl	80018c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 020c 	add.w	r2, r3, #12
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	330c      	adds	r3, #12
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f000 f876 	bl	800191a <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffed 	bl	800184c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001872:	4602      	mov	r2, r0
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f7ff ffe3 	bl	800184c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001886:	4602      	mov	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffd8 	bl	800184c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800189c:	4602      	mov	r2, r0
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffed 	bl	80018b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018d6:	4603      	mov	r3, r0
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f7ff ffe7 	bl	80018b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018e2:	4603      	mov	r3, r0
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ffde 	bl	80018b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018f4:	4603      	mov	r3, r0
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	601a      	str	r2, [r3, #0]
    }
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffed 	bl	8001904 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800192a:	4603      	mov	r3, r0
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001930:	6838      	ldr	r0, [r7, #0]
 8001932:	f7ff ffe7 	bl	8001904 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001936:	4603      	mov	r3, r0
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ffde 	bl	8001904 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001948:	4603      	mov	r3, r0
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	601a      	str	r2, [r3, #0]
    }
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_Z41__static_initialization_and_destruction_0ii>:

}
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10f      	bne.n	8001988 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196e:	4293      	cmp	r3, r2
 8001970:	d10a      	bne.n	8001988 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001974:	2431      	movs	r4, #49	; 0x31
 8001976:	461d      	mov	r5, r3
 8001978:	2c00      	cmp	r4, #0
 800197a:	db05      	blt.n	8001988 <_Z41__static_initialization_and_destruction_0ii+0x30>
 800197c:	4628      	mov	r0, r5
 800197e:	f7ff fd94 	bl	80014aa <_ZN7canzero10receiver_tC1Ev>
 8001982:	351c      	adds	r5, #28
 8001984:	3c01      	subs	r4, #1
 8001986:	e7f7      	b.n	8001978 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x52>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	4293      	cmp	r3, r2
 8001996:	d108      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001998:	4c07      	ldr	r4, [pc, #28]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800199c:	429c      	cmp	r4, r3
 800199e:	d004      	beq.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x52>
 80019a0:	3c1c      	subs	r4, #28
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fd8e 	bl	80014c4 <_ZN7canzero10receiver_tD1Ev>
 80019a8:	e7f7      	b.n	800199a <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000240 	.word	0x20000240
 80019b8:	200007b8 	.word	0x200007b8

080019bc <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
 80019c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ffc7 	bl	8001958 <_Z41__static_initialization_and_destruction_0ii>
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff ffbf 	bl	8001958 <_Z41__static_initialization_and_destruction_0ii>
 80019da:	bd80      	pop	{r7, pc}

080019dc <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 80019dc:	b084      	sub	sp, #16
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	f107 0c08 	add.w	ip, r7, #8
 80019e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 80019ea:	f107 0008 	add.w	r0, r7, #8
 80019ee:	f000 f835 	bl	8001a5c <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_Z9processRX9RxMessage+0x74>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	230a      	movs	r3, #10
 80019fe:	2224      	movs	r2, #36	; 0x24
 8001a00:	f107 0108 	add.w	r1, r7, #8
 8001a04:	f017 fc7c 	bl	8019300 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001a08:	e01c      	b.n	8001a44 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001a0a:	f107 0008 	add.w	r0, r7, #8
 8001a0e:	f7ff fdc9 	bl	80015a4 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d115      	bne.n	8001a44 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 8001a1e:	f019 fe01 	bl	801b624 <vPortEnterCritical>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4619      	mov	r1, r3
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <_Z9processRX9RxMessage+0x78>)
 8001a28:	f015 fce0 	bl	80173ec <printf_>
 8001a2c:	f019 fe2a 	bl	801b684 <vPortExitCritical>
}
 8001a30:	e008      	b.n	8001a44 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 8001a32:	f019 fdf7 	bl	801b624 <vPortEnterCritical>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <_Z9processRX9RxMessage+0x7c>)
 8001a3c:	f015 fcd6 	bl	80173ec <printf_>
 8001a40:	f019 fe20 	bl	801b684 <vPortExitCritical>
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a4c:	b004      	add	sp, #16
 8001a4e:	4770      	bx	lr
 8001a50:	200007bc 	.word	0x200007bc
 8001a54:	0801edd0 	.word	0x0801edd0
 8001a58:	0801edf4 	.word	0x0801edf4

08001a5c <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d108      	bne.n	8001a7e <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage+0x22>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	e000      	b.n	8001a80 <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a7e:	2300      	movs	r3, #0
    }
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_Z41__static_initialization_and_destruction_0ii>:
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10c      	bne.n	8001ab6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d107      	bne.n	8001ab6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	20c8      	movs	r0, #200	; 0xc8
 8001aac:	f017 fb9a 	bl	80191e4 <xStreamBufferGenericCreate>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001ab4:	6013      	str	r3, [r2, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200007bc 	.word	0x200007bc

08001ac4 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff ffdd 	bl	8001a8c <_Z41__static_initialization_and_destruction_0ii>
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10c      	bne.n	8001afe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d107      	bne.n	8001afe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001aee:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001af0:	2124      	movs	r1, #36	; 0x24
 8001af2:	2010      	movs	r0, #16
 8001af4:	f016 f85c 	bl	8017bb0 <osMessageQueueNew>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0801f090 	.word	0x0801f090
 8001b0c:	200007c0 	.word	0x200007c0

08001b10 <_GLOBAL__sub_I_czReceiveQueue>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff ffdb 	bl	8001ad4 <_Z41__static_initialization_and_destruction_0ii>
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b24:	f3bf 8f4f 	dsb	sy
}
 8001b28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <__NVIC_SystemReset+0x24>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b32:	4904      	ldr	r1, [pc, #16]	; (8001b44 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_SystemReset+0x28>)
 8001b36:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3a:	f3bf 8f4f 	dsb	sy
}
 8001b3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <__NVIC_SystemReset+0x20>
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	05fa0004 	.word	0x05fa0004

08001b4c <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b092      	sub	sp, #72	; 0x48
 8001b50:	af06      	add	r7, sp, #24
 8001b52:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <_Z15cz_receive_taskPv+0xa4>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f107 010c 	add.w	r1, r7, #12
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	2200      	movs	r2, #0
 8001b62:	f016 f8f9 	bl	8017d58 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d136      	bne.n	8001bda <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 f8e3 	bl	8001d3c <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d1e7      	bne.n	8001b54 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001b84:	f7ff ffcc 	bl	8001b20 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f8ee 	bl	8001d6e <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 f9cf 	bl	8004f40 <_Z22handleSDORequestUploadRK9RxMessage>
 8001ba2:	e7d7      	b.n	8001b54 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f8f9 	bl	8001da0 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fd2e 	bl	800461a <_Z24handleSDORequestDownloadRK9RxMessage>
 8001bbe:	e7c9      	b.n	8001b54 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001bc0:	466d      	mov	r5, sp
 8001bc2:	f107 041c 	add.w	r4, r7, #28
 8001bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	602b      	str	r3, [r5, #0]
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd4:	f7ff ff02 	bl	80019dc <_Z9processRX9RxMessage>
 8001bd8:	e7bc      	b.n	8001b54 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d1b9      	bne.n	8001b54 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001be0:	f019 fd20 	bl	801b624 <vPortEnterCritical>
 8001be4:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <_Z15cz_receive_taskPv+0xa8>)
 8001be6:	f015 fc01 	bl	80173ec <printf_>
 8001bea:	f019 fd4b 	bl	801b684 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001bee:	e7b1      	b.n	8001b54 <_Z15cz_receive_taskPv+0x8>
 8001bf0:	200007c0 	.word	0x200007c0
 8001bf4:	0801ee28 	.word	0x0801ee28

08001bf8 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b096      	sub	sp, #88	; 0x58
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001c00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c08:	2100      	movs	r1, #0
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f010 f82a 	bl	8011c64 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c10:	f107 040c 	add.w	r4, r7, #12
 8001c14:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	657b      	str	r3, [r7, #84]	; 0x54
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	dc0e      	bgt.n	8001c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001c2e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	4413      	add	r3, r2
 8001c36:	7819      	ldrb	r1, [r3, #0]
 8001c38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3e:	4413      	add	r3, r2
 8001c40:	460a      	mov	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	3301      	adds	r3, #1
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54
 8001c4a:	e7ed      	b.n	8001c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	2300      	movs	r3, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	f016 f81e 	bl	8017c98 <osMessageQueuePut>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0

	}
}
 8001c60:	bf00      	nop
 8001c62:	3758      	adds	r7, #88	; 0x58
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	200007c0 	.word	0x200007c0

08001c6c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b096      	sub	sp, #88	; 0x58
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f00f fff0 	bl	8011c64 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c84:	f107 040c 	add.w	r4, r7, #12
 8001c88:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	dc0e      	bgt.n	8001cc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001ca2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca8:	4413      	add	r3, r2
 8001caa:	7819      	ldrb	r1, [r3, #0]
 8001cac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	4413      	add	r3, r2
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	3301      	adds	r3, #1
 8001cbc:	657b      	str	r3, [r7, #84]	; 0x54
 8001cbe:	e7ed      	b.n	8001c9c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	f107 010c 	add.w	r1, r7, #12
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f015 ffe4 	bl	8017c98 <osMessageQueuePut>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0

	}
}
 8001cd4:	bf00      	nop
 8001cd6:	3758      	adds	r7, #88	; 0x58
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	200007c0 	.word	0x200007c0

08001ce0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f010 fb04 	bl	80122f6 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001cee:	f3ef 8211 	mrs	r2, BASEPRI
 8001cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	60fa      	str	r2, [r7, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001d06:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <HAL_CAN_ErrorCallback+0x44>)
 8001d0c:	f015 fb6e 	bl	80173ec <printf_>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d1a:	bf00      	nop
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	0801ee40 	.word	0x0801ee40

08001d28 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f240 729a 	movw	r2, #1946	; 0x79a
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e000      	b.n	8001d62 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d60:	2300      	movs	r3, #0
    }
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f240 52da 	movw	r2, #1498	; 0x5da
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bf0c      	ite	eq
 8001d8a:	2301      	moveq	r3, #1
 8001d8c:	2300      	movne	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	e000      	b.n	8001d94 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d92:	2300      	movs	r3, #0
    }
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f240 621a 	movw	r2, #1562	; 0x61a
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e000      	b.n	8001dc6 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001dc4:	2300      	movs	r3, #0
    }
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10c      	bne.n	8001dfe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d107      	bne.n	8001dfe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001df0:	2120      	movs	r1, #32
 8001df2:	2010      	movs	r0, #16
 8001df4:	f015 fedc 	bl	8017bb0 <osMessageQueueNew>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	0801f0a8 	.word	0x0801f0a8
 8001e0c:	200007c4 	.word	0x200007c4

08001e10 <_GLOBAL__sub_I_czSendQueue>:
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff ffdb 	bl	8001dd4 <_Z41__static_initialization_and_destruction_0ii>
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f9cd 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <_Z13cz_send_entryPv+0x164>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f107 010c 	add.w	r1, r7, #12
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	2200      	movs	r2, #0
 8001e44:	f015 ff88 	bl	8017d58 <osMessageQueueGet>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001e58:	f00d fd72 	bl	800f940 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d901      	bls.n	8001e66 <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001e62:	f00d fd6d 	bl	800f940 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d102      	bne.n	8001e82 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001e7c:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <_Z13cz_send_entryPv+0x168>)
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e80:	e010      	b.n	8001ea4 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e88:	d102      	bne.n	8001e90 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001e8a:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <_Z13cz_send_entryPv+0x16c>)
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8e:	e009      	b.n	8001ea4 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <_Z13cz_send_entryPv+0x168>)
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9e:	e001      	b.n	8001ea4 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <_Z13cz_send_entryPv+0x16c>)
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001ea4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ea6:	f00f fea8 	bl	8011bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001eba:	f107 0008 	add.w	r0, r7, #8
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	f103 0218 	add.w	r2, r3, #24
 8001ec6:	f107 010c 	add.w	r1, r7, #12
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ece:	f00f fdb9 	bl	8011a44 <HAL_CAN_AddTxMessage>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d04b      	beq.n	8001f7a <_Z13cz_send_entryPv+0x15a>
				/* Transmission request Error */
				Error_Handler();
 8001ee2:	f00d fd2d 	bl	800f940 <Error_Handler>
 8001ee6:	e048      	b.n	8001f7a <_Z13cz_send_entryPv+0x15a>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <_Z13cz_send_entryPv+0x168>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d105      	bne.n	8001efc <_Z13cz_send_entryPv+0xdc>
				OD_CAN1_DelayedTxMessages++;
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <_Z13cz_send_entryPv+0x170>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <_Z13cz_send_entryPv+0x170>)
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e004      	b.n	8001f06 <_Z13cz_send_entryPv+0xe6>
				//printDebug("WARNING :: can1 tx mailbox overflow.\n")
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <_Z13cz_send_entryPv+0x174>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <_Z13cz_send_entryPv+0x174>)
 8001f04:	6013      	str	r3, [r2, #0]
				//printDebug("WARNING :: can2 tx mailbox overflow.\n")
			}

			osDelay(1);		// Use smallest delay possible
 8001f06:	2001      	movs	r0, #1
 8001f08:	f015 fbea 	bl	80176e0 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001f0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f0e:	f00f fe74 	bl	8011bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d016      	beq.n	8001f50 <_Z13cz_send_entryPv+0x130>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001f22:	f107 0008 	add.w	r0, r7, #8
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	f103 0218 	add.w	r2, r3, #24
 8001f2e:	f107 010c 	add.w	r1, r7, #12
 8001f32:	4603      	mov	r3, r0
 8001f34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f36:	f00f fd85 	bl	8011a44 <HAL_CAN_AddTxMessage>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <_Z13cz_send_entryPv+0x15a>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001f4a:	f000 fa5a 	bl	8002402 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001f4e:	e014      	b.n	8001f7a <_Z13cz_send_entryPv+0x15a>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <_Z13cz_send_entryPv+0x168>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d108      	bne.n	8001f6a <_Z13cz_send_entryPv+0x14a>
					OD_CAN1_DiscardedTxMessages++;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <_Z13cz_send_entryPv+0x178>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <_Z13cz_send_entryPv+0x178>)
 8001f60:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <_Z13cz_send_entryPv+0x168>)
 8001f64:	f000 fa43 	bl	80023ee <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001f68:	e007      	b.n	8001f7a <_Z13cz_send_entryPv+0x15a>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <_Z13cz_send_entryPv+0x17c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <_Z13cz_send_entryPv+0x17c>)
 8001f72:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <_Z13cz_send_entryPv+0x16c>)
 8001f76:	f000 fa3a 	bl	80023ee <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001f80:	e759      	b.n	8001e36 <_Z13cz_send_entryPv+0x16>
 8001f82:	bf00      	nop
 8001f84:	200007c4 	.word	0x200007c4
 8001f88:	20000e5c 	.word	0x20000e5c
 8001f8c:	20000e84 	.word	0x20000e84
 8001f90:	20000824 	.word	0x20000824
 8001f94:	2000083c 	.word	0x2000083c
 8001f98:	2000081c 	.word	0x2000081c
 8001f9c:	20000834 	.word	0x20000834

08001fa0 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001fa6:	2080      	movs	r0, #128	; 0x80
 8001fa8:	f000 f91e 	bl	80021e8 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da4f      	bge.n	8002056 <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	0b5b      	lsrs	r3, r3, #13
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	0b5b      	lsrs	r3, r3, #13
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f043 0306 	orr.w	r3, r3, #6
 8001fe4:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	0fda      	lsrs	r2, r3, #31
 8001fea:	4413      	add	r3, r2
 8001fec:	105b      	asrs	r3, r3, #1
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e001      	b.n	8002000 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8002000:	2301      	movs	r3, #1
 8002002:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002004:	230e      	movs	r3, #14
 8002006:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	4871      	ldr	r0, [pc, #452]	; (80021d8 <_ZN7canzero4initEv+0x238>)
 8002012:	f00f fbf3 	bl	80117fc <HAL_CAN_ConfigFilter>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8002026:	f00d fc8b 	bl	800f940 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	330e      	adds	r3, #14
 800202e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002030:	463b      	mov	r3, r7
 8002032:	4619      	mov	r1, r3
 8002034:	4869      	ldr	r0, [pc, #420]	; (80021dc <_ZN7canzero4initEv+0x23c>)
 8002036:	f00f fbe1 	bl	80117fc <HAL_CAN_ConfigFilter>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 800204a:	f00d fc79 	bl	800f940 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	3301      	adds	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002054:	e7ac      	b.n	8001fb0 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	2b11      	cmp	r3, #17
 800205e:	dc69      	bgt.n	8002134 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	0fda      	lsrs	r2, r3, #31
 8002064:	4413      	add	r3, r2
 8002066:	105b      	asrs	r3, r3, #1
 8002068:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 800206e:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <_ZN7canzero4initEv+0x240>)
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	015b      	lsls	r3, r3, #5
 8002078:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 800207a:	4a5a      	ldr	r2, [pc, #360]	; (80021e4 <_ZN7canzero4initEv+0x244>)
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	f043 0318 	orr.w	r3, r3, #24
 8002088:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	2b11      	cmp	r3, #17
 800208e:	d106      	bne.n	800209e <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002090:	2301      	movs	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8002098:	2306      	movs	r3, #6
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e011      	b.n	80020c2 <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <_ZN7canzero4initEv+0x240>)
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	3301      	adds	r3, #1
 80020b4:	4a4b      	ldr	r2, [pc, #300]	; (80021e4 <_ZN7canzero4initEv+0x244>)
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	f043 0318 	orr.w	r3, r3, #24
 80020c0:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	0fda      	lsrs	r2, r3, #31
 80020c6:	4413      	add	r3, r2
 80020c8:	105b      	asrs	r3, r3, #1
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	e001      	b.n	80020dc <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 80020dc:	2301      	movs	r3, #1
 80020de:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 80020e0:	230e      	movs	r3, #14
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	483b      	ldr	r0, [pc, #236]	; (80021d8 <_ZN7canzero4initEv+0x238>)
 80020ea:	f00f fb87 	bl	80117fc <HAL_CAN_ConfigFilter>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 80020fe:	f00d fc1f 	bl	800f940 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	0fda      	lsrs	r2, r3, #31
 8002106:	4413      	add	r3, r2
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	330e      	adds	r3, #14
 800210c:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 800210e:	463b      	mov	r3, r7
 8002110:	4619      	mov	r1, r3
 8002112:	4832      	ldr	r0, [pc, #200]	; (80021dc <_ZN7canzero4initEv+0x23c>)
 8002114:	f00f fb72 	bl	80117fc <HAL_CAN_ConfigFilter>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8002128:	f00d fc0a 	bl	800f940 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3302      	adds	r3, #2
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
 8002132:	e792      	b.n	800205a <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8002134:	4828      	ldr	r0, [pc, #160]	; (80021d8 <_ZN7canzero4initEv+0x238>)
 8002136:	f00f fc41 	bl	80119bc <HAL_CAN_Start>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <_ZN7canzero4initEv+0x1ac>
 8002140:	4826      	ldr	r0, [pc, #152]	; (80021dc <_ZN7canzero4initEv+0x23c>)
 8002142:	f00f fc3b 	bl	80119bc <HAL_CAN_Start>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <_ZN7canzero4initEv+0x1b0>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <_ZN7canzero4initEv+0x1b2>
 8002150:	2300      	movs	r3, #0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8002156:	f00d fbf3 	bl	800f940 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800215a:	2102      	movs	r1, #2
 800215c:	481e      	ldr	r0, [pc, #120]	; (80021d8 <_ZN7canzero4initEv+0x238>)
 800215e:	f00f fe93 	bl	8011e88 <HAL_CAN_ActivateNotification>
 8002162:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10e      	bne.n	8002186 <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8002168:	2110      	movs	r1, #16
 800216a:	481b      	ldr	r0, [pc, #108]	; (80021d8 <_ZN7canzero4initEv+0x238>)
 800216c:	f00f fe8c 	bl	8011e88 <HAL_CAN_ActivateNotification>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217a:	4817      	ldr	r0, [pc, #92]	; (80021d8 <_ZN7canzero4initEv+0x238>)
 800217c:	f00f fe84 	bl	8011e88 <HAL_CAN_ActivateNotification>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZN7canzero4initEv+0x1ea>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <_ZN7canzero4initEv+0x1ec>
 800218a:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8002190:	f00d fbd6 	bl	800f940 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002194:	2102      	movs	r1, #2
 8002196:	4811      	ldr	r0, [pc, #68]	; (80021dc <_ZN7canzero4initEv+0x23c>)
 8002198:	f00f fe76 	bl	8011e88 <HAL_CAN_ActivateNotification>
 800219c:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10e      	bne.n	80021c0 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80021a2:	2110      	movs	r1, #16
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <_ZN7canzero4initEv+0x23c>)
 80021a6:	f00f fe6f 	bl	8011e88 <HAL_CAN_ActivateNotification>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b4:	4809      	ldr	r0, [pc, #36]	; (80021dc <_ZN7canzero4initEv+0x23c>)
 80021b6:	f00f fe67 	bl	8011e88 <HAL_CAN_ActivateNotification>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <_ZN7canzero4initEv+0x224>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <_ZN7canzero4initEv+0x226>
 80021c4:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 80021ca:	f00d fbb9 	bl	800f940 <Error_Handler>
	}
}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000e5c 	.word	0x20000e5c
 80021dc:	20000e84 	.word	0x20000e84
 80021e0:	0801f108 	.word	0x0801f108
 80021e4:	0801f0c0 	.word	0x0801f0c0

080021e8 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <_ZN7canzero9setStatusE9cz_status+0x30>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f04f 31ff 	mov.w	r1, #4294967295
 80021fa:	4618      	mov	r0, r3
 80021fc:	f015 fb11 	bl	8017822 <osMutexAcquire>
	nodeStatus = new_status;
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <_ZN7canzero9setStatusE9cz_status+0x34>)
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f015 fb54 	bl	80178b8 <osMutexRelease>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200007c8 	.word	0x200007c8
 800221c:	200007cc 	.word	0x200007cc

08002220 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <_ZN7canzero9getStatusEv+0x30>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 31ff 	mov.w	r1, #4294967295
 800222e:	4618      	mov	r0, r3
 8002230:	f015 faf7 	bl	8017822 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <_ZN7canzero9getStatusEv+0x34>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <_ZN7canzero9getStatusEv+0x30>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f015 fb3a 	bl	80178b8 <osMutexRelease>
	return returnValue;
 8002244:	79fb      	ldrb	r3, [r7, #7]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200007c8 	.word	0x200007c8
 8002254:	200007cc 	.word	0x200007cc

08002258 <_Z41__static_initialization_and_destruction_0ii>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10a      	bne.n	800227e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226e:	4293      	cmp	r3, r2
 8002270:	d105      	bne.n	800227e <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002274:	f015 fa4f 	bl	8017716 <osMutexNew>
 8002278:	4603      	mov	r3, r0
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	0801f150 	.word	0x0801f150
 800228c:	200007c8 	.word	0x200007c8

08002290 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
 8002294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff ffdd 	bl	8002258 <_Z41__static_initialization_and_destruction_0ii>
 800229e:	bd80      	pop	{r7, pc}

080022a0 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
	canzero::init();
 80022a8:	f7ff fe7a 	bl	8001fa0 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2320      	movs	r3, #32
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c0:	4939      	ldr	r1, [pc, #228]	; (80023a8 <canzero_start+0x108>)
 80022c2:	483a      	ldr	r0, [pc, #232]	; (80023ac <canzero_start+0x10c>)
 80022c4:	f017 fb99 	bl	80199fa <xTaskCreate>
 80022c8:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityAboveNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d006      	beq.n	80022de <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 80022d0:	f019 f9a8 	bl	801b624 <vPortEnterCritical>
 80022d4:	4836      	ldr	r0, [pc, #216]	; (80023b0 <canzero_start+0x110>)
 80022d6:	f015 f889 	bl	80173ec <printf_>
 80022da:	f019 f9d3 	bl	801b684 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	2320      	movs	r3, #32
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2300      	movs	r3, #0
 80022ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f2:	4930      	ldr	r1, [pc, #192]	; (80023b4 <canzero_start+0x114>)
 80022f4:	4830      	ldr	r0, [pc, #192]	; (80023b8 <canzero_start+0x118>)
 80022f6:	f017 fb80 	bl	80199fa <xTaskCreate>
 80022fa:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityAboveNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d006      	beq.n	8002310 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8002302:	f019 f98f 	bl	801b624 <vPortEnterCritical>
 8002306:	482d      	ldr	r0, [pc, #180]	; (80023bc <canzero_start+0x11c>)
 8002308:	f015 f870 	bl	80173ec <printf_>
 800230c:	f019 f9ba 	bl	801b684 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2319      	movs	r3, #25
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002324:	4926      	ldr	r1, [pc, #152]	; (80023c0 <canzero_start+0x120>)
 8002326:	4827      	ldr	r0, [pc, #156]	; (80023c4 <canzero_start+0x124>)
 8002328:	f017 fb67 	bl	80199fa <xTaskCreate>
 800232c:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal1, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	2b01      	cmp	r3, #1
 8002332:	d006      	beq.n	8002342 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8002334:	f019 f976 	bl	801b624 <vPortEnterCritical>
 8002338:	4823      	ldr	r0, [pc, #140]	; (80023c8 <canzero_start+0x128>)
 800233a:	f015 f857 	bl	80173ec <printf_>
 800233e:	f019 f9a1 	bl	801b684 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2318      	movs	r3, #24
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2300      	movs	r3, #0
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	491d      	ldr	r1, [pc, #116]	; (80023cc <canzero_start+0x12c>)
 8002358:	481d      	ldr	r0, [pc, #116]	; (80023d0 <canzero_start+0x130>)
 800235a:	f017 fb4e 	bl	80199fa <xTaskCreate>
 800235e:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d006      	beq.n	8002374 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 8002366:	f019 f95d 	bl	801b624 <vPortEnterCritical>
 800236a:	481a      	ldr	r0, [pc, #104]	; (80023d4 <canzero_start+0x134>)
 800236c:	f015 f83e 	bl	80173ec <printf_>
 8002370:	f019 f988 	bl	801b684 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2328      	movs	r3, #40	; 0x28
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002388:	4913      	ldr	r1, [pc, #76]	; (80023d8 <canzero_start+0x138>)
 800238a:	4814      	ldr	r0, [pc, #80]	; (80023dc <canzero_start+0x13c>)
 800238c:	f017 fb35 	bl	80199fa <xTaskCreate>
 8002390:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d001      	beq.n	800239c <canzero_start+0xfc>
		Error_Handler();
 8002398:	f00d fad2 	bl	800f940 <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f015 f99e 	bl	80176e0 <osDelay>
 80023a4:	e7fa      	b.n	800239c <canzero_start+0xfc>
 80023a6:	bf00      	nop
 80023a8:	0801ee78 	.word	0x0801ee78
 80023ac:	08001e21 	.word	0x08001e21
 80023b0:	0801ee80 	.word	0x0801ee80
 80023b4:	0801eea4 	.word	0x0801eea4
 80023b8:	08001b4d 	.word	0x08001b4d
 80023bc:	0801eeb0 	.word	0x0801eeb0
 80023c0:	0801eed8 	.word	0x0801eed8
 80023c4:	0800137d 	.word	0x0800137d
 80023c8:	0801eee4 	.word	0x0801eee4
 80023cc:	0801ef14 	.word	0x0801ef14
 80023d0:	08001315 	.word	0x08001315
 80023d4:	0801ef20 	.word	0x0801ef20
 80023d8:	0801ef50 	.word	0x0801ef50
 80023dc:	0800129d 	.word	0x0800129d

080023e0 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_Z25WARN_batterVoltageLow_setv>:


// Warning: W1_batterVoltageLow
bool WARN_batterVoltageLow_status = false;    // Internal value

void WARN_batterVoltageLow_set() {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
    // Only set warning when it is not set yet
    if(!WARN_batterVoltageLow_status) {
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <_Z25WARN_batterVoltageLow_setv+0x2c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <_Z25WARN_batterVoltageLow_setv+0x26>

        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, WARN_batterVoltageLow_FLAG, eSetBits);
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_Z25WARN_batterVoltageLow_setv+0x30>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	2300      	movs	r3, #0
 8002428:	2201      	movs	r2, #1
 800242a:	2102      	movs	r1, #2
 800242c:	f018 fb22 	bl	801aa74 <xTaskGenericNotify>

        // Update internal value
        WARN_batterVoltageLow_status = true;
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <_Z25WARN_batterVoltageLow_setv+0x2c>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
    }
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200007cd 	.word	0x200007cd
 8002440:	20000234 	.word	0x20000234

08002444 <_Z27WARN_batterVoltageLow_clearv>:

void WARN_batterVoltageLow_clear() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    // Only clear warning when it is set
    if(WARN_batterVoltageLow_status) {
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <_Z27WARN_batterVoltageLow_clearv+0x30>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00f      	beq.n	8002470 <_Z27WARN_batterVoltageLow_clearv+0x2c>
        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, WARN_batterVoltageLow_FLAG);
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <_Z27WARN_batterVoltageLow_clearv+0x34>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f018 fbf0 	bl	801ac3c <ulTaskNotifyValueClear>

        // Update internal value
        WARN_batterVoltageLow_status = false;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <_Z27WARN_batterVoltageLow_clearv+0x30>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task manually
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <_Z27WARN_batterVoltageLow_clearv+0x34>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	f018 fb02 	bl	801aa74 <xTaskGenericNotify>
    }
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200007cd 	.word	0x200007cd
 8002478:	20000234 	.word	0x20000234

0800247c <_Z23WARN_batterTempHigh_setv>:


// Warning: W2_batterTempHigh
bool WARN_batterTempHigh_status = false;    // Internal value

void WARN_batterTempHigh_set() {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
    // Only set warning when it is not set yet
    if(!WARN_batterTempHigh_status) {
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <_Z23WARN_batterTempHigh_setv+0x2c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <_Z23WARN_batterTempHigh_setv+0x26>

        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, WARN_batterTempHigh_FLAG, eSetBits);
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <_Z23WARN_batterTempHigh_setv+0x30>)
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	2201      	movs	r2, #1
 8002496:	2104      	movs	r1, #4
 8002498:	f018 faec 	bl	801aa74 <xTaskGenericNotify>

        // Update internal value
        WARN_batterTempHigh_status = true;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <_Z23WARN_batterTempHigh_setv+0x2c>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
    }
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200007ce 	.word	0x200007ce
 80024ac:	20000234 	.word	0x20000234

080024b0 <_Z25WARN_batterTempHigh_clearv>:

void WARN_batterTempHigh_clear() {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
    // Only clear warning when it is set
    if(WARN_batterTempHigh_status) {
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <_Z25WARN_batterTempHigh_clearv+0x30>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <_Z25WARN_batterTempHigh_clearv+0x2c>
        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, WARN_batterTempHigh_FLAG);
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <_Z25WARN_batterTempHigh_clearv+0x34>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2104      	movs	r1, #4
 80024c2:	4618      	mov	r0, r3
 80024c4:	f018 fbba 	bl	801ac3c <ulTaskNotifyValueClear>

        // Update internal value
        WARN_batterTempHigh_status = false;
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <_Z25WARN_batterTempHigh_clearv+0x30>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task manually
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <_Z25WARN_batterTempHigh_clearv+0x34>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	f018 facc 	bl	801aa74 <xTaskGenericNotify>
    }
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200007ce 	.word	0x200007ce
 80024e4:	20000234 	.word	0x20000234

080024e8 <_Z29ERR_batterVoltageCritical_setv>:


// Error: E1_batterVoltageCritical
bool ERR_batterVoltageCritical_status = false;    // Internal value

void ERR_batterVoltageCritical_set() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
    // Only set error when it is not set yet
    if(!ERR_batterVoltageCritical_status) {
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <_Z29ERR_batterVoltageCritical_setv+0x2c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f083 0301 	eor.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <_Z29ERR_batterVoltageCritical_setv+0x28>
            
        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, ERR_batterVoltageCritical_FLAG, eSetBits);
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <_Z29ERR_batterVoltageCritical_setv+0x30>)
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002506:	f018 fab5 	bl	801aa74 <xTaskGenericNotify>

        // Update internal value
        ERR_batterVoltageCritical_status = true;
 800250a:	4b02      	ldr	r3, [pc, #8]	; (8002514 <_Z29ERR_batterVoltageCritical_setv+0x2c>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
    }
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200007cf 	.word	0x200007cf
 8002518:	20000234 	.word	0x20000234

0800251c <_Z31ERR_batterVoltageCritical_clearv>:

void ERR_batterVoltageCritical_clear() {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
    // Only clear error when it is set
    if(ERR_batterVoltageCritical_status) {
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <_Z31ERR_batterVoltageCritical_clearv+0x34>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <_Z31ERR_batterVoltageCritical_clearv+0x2e>

        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, ERR_batterVoltageCritical_FLAG);
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <_Z31ERR_batterVoltageCritical_clearv+0x38>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002530:	4618      	mov	r0, r3
 8002532:	f018 fb83 	bl	801ac3c <ulTaskNotifyValueClear>

        // Update internal value
        ERR_batterVoltageCritical_status = false;
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <_Z31ERR_batterVoltageCritical_clearv+0x34>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <_Z31ERR_batterVoltageCritical_clearv+0x38>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	2300      	movs	r3, #0
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	f018 fa95 	bl	801aa74 <xTaskGenericNotify>
    }
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200007cf 	.word	0x200007cf
 8002554:	20000234 	.word	0x20000234

08002558 <_Z26ERR_batteryOvercurrent_setv>:


// Error: E2_batteryOvercurrent
bool ERR_batteryOvercurrent_status = false;    // Internal value

void ERR_batteryOvercurrent_set() {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    // Only set error when it is not set yet
    if(!ERR_batteryOvercurrent_status) {
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <_Z26ERR_batteryOvercurrent_setv+0x2c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <_Z26ERR_batteryOvercurrent_setv+0x28>
            
        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, ERR_batteryOvercurrent_FLAG, eSetBits);
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <_Z26ERR_batteryOvercurrent_setv+0x30>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002576:	f018 fa7d 	bl	801aa74 <xTaskGenericNotify>

        // Update internal value
        ERR_batteryOvercurrent_status = true;
 800257a:	4b02      	ldr	r3, [pc, #8]	; (8002584 <_Z26ERR_batteryOvercurrent_setv+0x2c>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
    }
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200007d0 	.word	0x200007d0
 8002588:	20000234 	.word	0x20000234

0800258c <_Z28ERR_batteryOvercurrent_clearv>:

void ERR_batteryOvercurrent_clear() {
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    // Only clear error when it is set
    if(ERR_batteryOvercurrent_status) {
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <_Z28ERR_batteryOvercurrent_clearv+0x34>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <_Z28ERR_batteryOvercurrent_clearv+0x2e>

        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, ERR_batteryOvercurrent_FLAG);
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <_Z28ERR_batteryOvercurrent_clearv+0x38>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a0:	4618      	mov	r0, r3
 80025a2:	f018 fb4b 	bl	801ac3c <ulTaskNotifyValueClear>

        // Update internal value
        ERR_batteryOvercurrent_status = false;
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <_Z28ERR_batteryOvercurrent_clearv+0x34>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <_Z28ERR_batteryOvercurrent_clearv+0x38>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	f018 fa5d 	bl	801aa74 <xTaskGenericNotify>
    }
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200007d0 	.word	0x200007d0
 80025c4:	20000234 	.word	0x20000234

080025c8 <_Z26ERR_batterTempCritical_setv>:


// Error: E3_batterTempCritical
bool ERR_batterTempCritical_status = false;    // Internal value

void ERR_batterTempCritical_set() {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
    // Only set error when it is not set yet
    if(!ERR_batterTempCritical_status) {
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <_Z26ERR_batterTempCritical_setv+0x2c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <_Z26ERR_batterTempCritical_setv+0x28>
            
        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, ERR_batterTempCritical_FLAG, eSetBits);
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_Z26ERR_batterTempCritical_setv+0x30>)
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e6:	f018 fa45 	bl	801aa74 <xTaskGenericNotify>

        // Update internal value
        ERR_batterTempCritical_status = true;
 80025ea:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <_Z26ERR_batterTempCritical_setv+0x2c>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    }
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200007d1 	.word	0x200007d1
 80025f8:	20000234 	.word	0x20000234

080025fc <_Z28ERR_watchdogStateMachine_setv>:


// Error: E4_watchdogStateMachine
bool ERR_watchdogStateMachine_status = false;    // Internal value

void ERR_watchdogStateMachine_set() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
    // Only set error when it is not set yet
    if(!ERR_watchdogStateMachine_status) {
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <_Z28ERR_watchdogStateMachine_setv+0x2c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <_Z28ERR_watchdogStateMachine_setv+0x28>
            
        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, ERR_watchdogStateMachine_FLAG, eSetBits);
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <_Z28ERR_watchdogStateMachine_setv+0x30>)
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	2201      	movs	r2, #1
 8002616:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800261a:	f018 fa2b 	bl	801aa74 <xTaskGenericNotify>

        // Update internal value
        ERR_watchdogStateMachine_status = true;
 800261e:	4b02      	ldr	r3, [pc, #8]	; (8002628 <_Z28ERR_watchdogStateMachine_setv+0x2c>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    }
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200007d2 	.word	0x200007d2
 800262c:	20000234 	.word	0x20000234

08002630 <_Z30ERR_watchdogStateMachine_clearv>:

void ERR_watchdogStateMachine_clear() {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
    // Only clear error when it is set
    if(ERR_watchdogStateMachine_status) {
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <_Z30ERR_watchdogStateMachine_clearv+0x34>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <_Z30ERR_watchdogStateMachine_clearv+0x2e>

        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, ERR_watchdogStateMachine_FLAG);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <_Z30ERR_watchdogStateMachine_clearv+0x38>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002644:	4618      	mov	r0, r3
 8002646:	f018 faf9 	bl	801ac3c <ulTaskNotifyValueClear>

        // Update internal value
        ERR_watchdogStateMachine_status = false;
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <_Z30ERR_watchdogStateMachine_clearv+0x34>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <_Z30ERR_watchdogStateMachine_clearv+0x38>)
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	2300      	movs	r3, #0
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	f018 fa0b 	bl	801aa74 <xTaskGenericNotify>
    }
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200007d2 	.word	0x200007d2
 8002668:	20000234 	.word	0x20000234

0800266c <_Z28ERR_watchdogStateMachine_getv>:

bool ERR_watchdogStateMachine_get() {
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
    // Return internal value
    return ERR_watchdogStateMachine_status;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <_Z28ERR_watchdogStateMachine_getv+0x14>)
 8002672:	781b      	ldrb	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200007d2 	.word	0x200007d2

08002684 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	ed87 0a01 	vstr	s0, [r7, #4]
 800268e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002692:	f019 fb15 	bl	801bcc0 <roundf>
 8002696:	eef0 7a40 	vmov.f32	s15, s0
 800269a:	eeb0 0a67 	vmov.f32	s0, s15
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80026a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026a8:	b0a2      	sub	sp, #136	; 0x88
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80026b0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80026b4:	4619      	mov	r1, r3
 80026b6:	4613      	mov	r3, r2
 80026b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026bc:	460b      	mov	r3, r1
 80026be:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80026c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80026d4:	7113      	strb	r3, [r2, #4]
 80026d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026da:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80026de:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 80026e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ec:	3301      	adds	r3, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	441a      	add	r2, r3
 80026f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026f8:	3302      	adds	r3, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	441a      	add	r2, r3
 8002700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002704:	3303      	adds	r3, #3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4413      	add	r3, r2
 800270c:	2200      	movs	r2, #0
 800270e:	461c      	mov	r4, r3
 8002710:	4615      	mov	r5, r2
 8002712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002716:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800271a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002726:	3304      	adds	r3, #4
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2200      	movs	r2, #0
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
 8002730:	677a      	str	r2, [r7, #116]	; 0x74
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800273c:	0019      	movs	r1, r3
 800273e:	2000      	movs	r0, #0
 8002740:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002744:	3305      	adds	r3, #5
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2200      	movs	r2, #0
 800274c:	66bb      	str	r3, [r7, #104]	; 0x68
 800274e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800275a:	0233      	lsls	r3, r6, #8
 800275c:	2200      	movs	r2, #0
 800275e:	eb10 0802 	adds.w	r8, r0, r2
 8002762:	eb41 0903 	adc.w	r9, r1, r3
 8002766:	eb14 0308 	adds.w	r3, r4, r8
 800276a:	663b      	str	r3, [r7, #96]	; 0x60
 800276c:	eb45 0309 	adc.w	r3, r5, r9
 8002770:	667b      	str	r3, [r7, #100]	; 0x64
 8002772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002776:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800277a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 800277e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002782:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800278a:	3306      	adds	r3, #6
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	65bb      	str	r3, [r7, #88]	; 0x58
 8002794:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a0:	0419      	lsls	r1, r3, #16
 80027a2:	2000      	movs	r0, #0
 80027a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027a8:	3307      	adds	r3, #7
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2200      	movs	r2, #0
 80027b0:	653b      	str	r3, [r7, #80]	; 0x50
 80027b2:	657a      	str	r2, [r7, #84]	; 0x54
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80027be:	0633      	lsls	r3, r6, #24
 80027c0:	2200      	movs	r2, #0
 80027c2:	eb10 0a02 	adds.w	sl, r0, r2
 80027c6:	eb41 0b03 	adc.w	fp, r1, r3
 80027ca:	eb14 030a 	adds.w	r3, r4, sl
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d0:	eb45 030b 	adc.w	r3, r5, fp
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80027de:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80027e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e6:	3307      	adds	r3, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f0:	3306      	adds	r3, #6
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	441a      	add	r2, r3
 80027f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027fc:	3305      	adds	r3, #5
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	441a      	add	r2, r3
 8002804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002808:	3304      	adds	r3, #4
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4413      	add	r3, r2
 8002810:	2200      	movs	r2, #0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
 8002814:	647a      	str	r2, [r7, #68]	; 0x44
 8002816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800281e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002826:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800282a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800282e:	3303      	adds	r3, #3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2200      	movs	r2, #0
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
 8002838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	0019      	movs	r1, r3
 8002846:	2000      	movs	r0, #0
 8002848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800284c:	3302      	adds	r3, #2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2200      	movs	r2, #0
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
 8002856:	637a      	str	r2, [r7, #52]	; 0x34
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002862:	0233      	lsls	r3, r6, #8
 8002864:	2200      	movs	r2, #0
 8002866:	1886      	adds	r6, r0, r2
 8002868:	62be      	str	r6, [r7, #40]	; 0x28
 800286a:	eb41 0303 	adc.w	r3, r1, r3
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002870:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002874:	460b      	mov	r3, r1
 8002876:	18e3      	adds	r3, r4, r3
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	4613      	mov	r3, r2
 800287c:	eb45 0303 	adc.w	r3, r5, r3
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
 8002882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002886:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800288a:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 800288e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002892:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800289a:	3301      	adds	r3, #1
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	61fa      	str	r2, [r7, #28]
 80028a6:	f04f 0000 	mov.w	r0, #0
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	0419      	lsls	r1, r3, #16
 80028b2:	2000      	movs	r0, #0
 80028b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	617a      	str	r2, [r7, #20]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	693e      	ldr	r6, [r7, #16]
 80028cc:	0633      	lsls	r3, r6, #24
 80028ce:	2200      	movs	r2, #0
 80028d0:	1886      	adds	r6, r0, r2
 80028d2:	60be      	str	r6, [r7, #8]
 80028d4:	eb41 0303 	adc.w	r3, r1, r3
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80028de:	460b      	mov	r3, r1
 80028e0:	18e3      	adds	r3, r4, r3
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	eb45 0303 	adc.w	r3, r5, r3
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028f4:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 80028f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028fc:	4618      	mov	r0, r3
 80028fe:	3788      	adds	r7, #136	; 0x88
 8002900:	46bd      	mov	sp, r7
 8002902:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002906:	4770      	bx	lr

08002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA, 0x61A };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002908:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d302      	bcc.n	8002926 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002920:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002924:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	8af9      	ldrh	r1, [r7, #22]
 8002932:	2000      	movs	r0, #0
 8002934:	468a      	mov	sl, r1
 8002936:	4683      	mov	fp, r0
 8002938:	f3ca 040b 	ubfx	r4, sl, #0, #12
 800293c:	2500      	movs	r5, #0
 800293e:	ea42 0804 	orr.w	r8, r2, r4
 8002942:	ea43 0905 	orr.w	r9, r3, r5
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800294c:	bf00      	nop
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002956:	4770      	bx	lr

08002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	b293      	uxth	r3, r2
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	81fb      	strh	r3, [r7, #14]
                return value;
 8002970:	89fb      	ldrh	r3, [r7, #14]
            }
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_ZN3can7signals16PDU_SDO_RespCode3setERyS2_Rhh>:
        class PDU_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x59A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800297e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2200      	movs	r2, #0
 800299c:	4698      	mov	r8, r3
 800299e:	4691      	mov	r9, r2
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80029ac:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80029b0:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80029b4:	b294      	uxth	r4, r2
 80029b6:	2500      	movs	r5, #0
 80029b8:	ea40 0a04 	orr.w	sl, r0, r4
 80029bc:	ea41 0b05 	orr.w	fp, r1, r5
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029d0:	4770      	bx	lr

080029d2 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2816            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80029d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2816);
 80029e2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff8c 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2200      	movs	r2, #0
 80029fe:	4698      	mov	r8, r3
 8002a00:	4691      	mov	r9, r2
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002a0e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a12:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002a16:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	ea40 0a04 	orr.w	sl, r0, r4
 8002a20:	ea41 0b05 	orr.w	fp, r1, r5
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	701a      	strb	r2, [r3, #0]
            }
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a3a <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2816) {
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff86 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d000      	beq.n	8002a60 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_+0x26>
                    while(1);
 8002a5e:	e7fe      	b.n	8002a5e <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	0c02      	lsrs	r2, r0, #16
 8002a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a74:	0c0b      	lsrs	r3, r1, #16
 8002a76:	4613      	mov	r3, r2
 8002a78:	73fb      	strb	r3, [r7, #15]
                return value;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN3can7signals18PDU_OD_LedCommands3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2562            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a88:	b088      	sub	sp, #32
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6178      	str	r0, [r7, #20]
 8002a8e:	6139      	str	r1, [r7, #16]
 8002a90:	60fa      	str	r2, [r7, #12]
 8002a92:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2562);
 8002a94:	f640 2302 	movw	r3, #2562	; 0xa02
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f7ff ff33 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	8bf9      	ldrh	r1, [r7, #30]
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4688      	mov	r8, r1
 8002ab2:	4681      	mov	r9, r0
 8002ab4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002ab8:	6079      	str	r1, [r7, #4]
 8002aba:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002abe:	6039      	str	r1, [r7, #0]
 8002ac0:	683c      	ldr	r4, [r7, #0]
 8002ac2:	2500      	movs	r5, #0
 8002ac4:	ea42 0a04 	orr.w	sl, r2, r4
 8002ac8:	ea43 0b05 	orr.w	fp, r3, r5
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	701a      	strb	r2, [r3, #0]
            }
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ae2 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2562) {
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff32 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	f640 2302 	movw	r3, #2562	; 0xa02
 8002afc:	429a      	cmp	r2, r3
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d000      	beq.n	8002b0c <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_+0x2a>
                    while(1);
 8002b0a:	e7fe      	b.n	8002b0a <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	0c02      	lsrs	r2, r0, #16
 8002b1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b20:	0c0b      	lsrs	r3, r1, #16
 8002b22:	4613      	mov	r3, r2
 8002b24:	81fb      	strh	r3, [r7, #14]
                return value;
 8002b26:	89fb      	ldrh	r3, [r7, #14]
            }
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_ZN3can7signals23PDU_OD_projectXXEnabled3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2560            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2560);
 8002b40:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fedd 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4691      	mov	r9, r2
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b6c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b70:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b74:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b78:	2500      	movs	r5, #0
 8002b7a:	ea40 0a04 	orr.w	sl, r0, r4
 8002b7e:	ea41 0b05 	orr.w	fp, r1, r5
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
            }
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b98 <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2560) {
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fed7 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d000      	beq.n	8002bbe <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_+0x26>
                    while(1);
 8002bbc:	e7fe      	b.n	8002bbc <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	0c02      	lsrs	r2, r0, #16
 8002bce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bd2:	0c0b      	lsrs	r3, r1, #16
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	73fb      	strb	r3, [r7, #15]
                return value;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZN3can7signals22PDU_OD_watchdogTimeout3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2306            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002be2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6178      	str	r0, [r7, #20]
 8002bec:	6139      	str	r1, [r7, #16]
 8002bee:	60fa      	str	r2, [r7, #12]
 8002bf0:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2306);
 8002bf2:	f640 1302 	movw	r3, #2306	; 0x902
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff fe84 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	8bf9      	ldrh	r1, [r7, #30]
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	4688      	mov	r8, r1
 8002c10:	4681      	mov	r9, r0
 8002c12:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002c16:	6079      	str	r1, [r7, #4]
 8002c18:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	683c      	ldr	r4, [r7, #0]
 8002c20:	2500      	movs	r5, #0
 8002c22:	ea42 0a04 	orr.w	sl, r2, r4
 8002c26:	ea43 0b05 	orr.w	fp, r3, r5
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2204      	movs	r2, #4
 8002c34:	701a      	strb	r2, [r3, #0]
            }
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c40 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2306) {
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fe83 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	f640 1302 	movw	r3, #2306	; 0x902
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d000      	beq.n	8002c6a <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_+0x2a>
                    while(1);
 8002c68:	e7fe      	b.n	8002c68 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	0c02      	lsrs	r2, r0, #16
 8002c7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c7e:	0c0b      	lsrs	r3, r1, #16
 8002c80:	4613      	mov	r3, r2
 8002c82:	81fb      	strh	r3, [r7, #14]
                return value;
 8002c84:	89fb      	ldrh	r3, [r7, #14]
            }
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZN3can7signals25PDU_OD_statusSendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2305            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002c8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6178      	str	r0, [r7, #20]
 8002c98:	6139      	str	r1, [r7, #16]
 8002c9a:	60fa      	str	r2, [r7, #12]
 8002c9c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2305);
 8002c9e:	f640 1301 	movw	r3, #2305	; 0x901
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6939      	ldr	r1, [r7, #16]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff fe2e 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	8bf9      	ldrh	r1, [r7, #30]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	4688      	mov	r8, r1
 8002cbc:	4681      	mov	r9, r0
 8002cbe:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002cc2:	6079      	str	r1, [r7, #4]
 8002cc4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	683c      	ldr	r4, [r7, #0]
 8002ccc:	2500      	movs	r5, #0
 8002cce:	ea42 0a04 	orr.w	sl, r2, r4
 8002cd2:	ea43 0b05 	orr.w	fp, r3, r5
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
            }
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002cec <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2305) {
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fe2d 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	f640 1301 	movw	r3, #2305	; 0x901
 8002d06:	429a      	cmp	r2, r3
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d000      	beq.n	8002d16 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_+0x2a>
                    while(1);
 8002d14:	e7fe      	b.n	8002d14 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	0c02      	lsrs	r2, r0, #16
 8002d26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d2a:	0c0b      	lsrs	r3, r1, #16
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	81fb      	strh	r3, [r7, #14]
                return value;
 8002d30:	89fb      	ldrh	r3, [r7, #14]
            }
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZN3can7signals26PDU_OD_currentReadInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2304            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002d3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6178      	str	r0, [r7, #20]
 8002d44:	6139      	str	r1, [r7, #16]
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2304);
 8002d4a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff fdd8 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	8bf9      	ldrh	r1, [r7, #30]
 8002d64:	2000      	movs	r0, #0
 8002d66:	4688      	mov	r8, r1
 8002d68:	4681      	mov	r9, r0
 8002d6a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d6e:	6079      	str	r1, [r7, #4]
 8002d70:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	683c      	ldr	r4, [r7, #0]
 8002d78:	2500      	movs	r5, #0
 8002d7a:	ea42 0a04 	orr.w	sl, r2, r4
 8002d7e:	ea43 0b05 	orr.w	fp, r3, r5
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	701a      	strb	r2, [r3, #0]
            }
 8002d8e:	bf00      	nop
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d98 <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2304) {
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fdd7 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d000      	beq.n	8002dbe <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_+0x26>
                    while(1);
 8002dbc:	e7fe      	b.n	8002dbc <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	0c02      	lsrs	r2, r0, #16
 8002dce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dd2:	0c0b      	lsrs	r3, r1, #16
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	81fb      	strh	r3, [r7, #14]
                return value;
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
            }
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6178      	str	r0, [r7, #20]
 8002dee:	6139      	str	r1, [r7, #16]
 8002df0:	60fa      	str	r2, [r7, #12]
 8002df2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dfa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002e8c <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xa8>
 8002dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	dd01      	ble.n	8002e0c <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0x28>
                    value = max;
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xac>)
 8002e0a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	d502      	bpl.n	8002e20 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0x3c>
                    value = min;
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2128);
 8002e20:	f44f 6305 	mov.w	r3, #2128	; 0x850
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	6939      	ldr	r1, [r7, #16]
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f7ff fd6d 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8002e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e32:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002e94 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xb0>
 8002e36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e3e:	f7ff fc21 	bl	8002684 <_ZSt5roundf>
 8002e42:	eef0 7a40 	vmov.f32	s15, s0
 8002e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4a:	ee17 3a90 	vmov	r3, s15
 8002e4e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	8bf9      	ldrh	r1, [r7, #30]
 8002e58:	2000      	movs	r0, #0
 8002e5a:	4688      	mov	r8, r1
 8002e5c:	4681      	mov	r9, r0
 8002e5e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002e62:	6079      	str	r1, [r7, #4]
 8002e64:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	683c      	ldr	r4, [r7, #0]
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	ea42 0a04 	orr.w	sl, r2, r4
 8002e72:	ea43 0b05 	orr.w	fp, r3, r5
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	701a      	strb	r2, [r3, #0]
            }
 8002e82:	bf00      	nop
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8c:	4423d666 	.word	0x4423d666
 8002e90:	4423d666 	.word	0x4423d666
 8002e94:	3c23d70a 	.word	0x3c23d70a

08002e98 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2128) {
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fd57 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d000      	beq.n	8002ebe <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x26>
                    while(1);
 8002ebc:	e7fe      	b.n	8002ebc <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	0c02      	lsrs	r2, r0, #16
 8002ece:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ed2:	0c0b      	lsrs	r3, r1, #16
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8002ed8:	89fb      	ldrh	r3, [r7, #14]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee2:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002ef4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x5c>
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002eea:	eeb0 0a67 	vmov.f32	s0, s15
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	3c23d70a 	.word	0x3c23d70a

08002ef8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(6553.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b088      	sub	sp, #32
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6178      	str	r0, [r7, #20]
 8002f02:	6139      	str	r1, [r7, #16]
 8002f04:	60fa      	str	r2, [r7, #12]
 8002f06:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f0e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002fa0 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xa8>
 8002f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1a:	dd01      	ble.n	8002f20 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0x28>
                    value = max;
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xac>)
 8002f1e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002f20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	d502      	bpl.n	8002f34 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0x3c>
                    value = min;
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2051);
 8002f34:	f640 0303 	movw	r3, #2051	; 0x803
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	6978      	ldr	r0, [r7, #20]
 8002f3e:	f7ff fce3 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.1f)));
 8002f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f46:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002fa8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xb0>
 8002f4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f52:	f7ff fb97 	bl	8002684 <_ZSt5roundf>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f5e:	ee17 3a90 	vmov	r3, s15
 8002f62:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	8bf9      	ldrh	r1, [r7, #30]
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	4688      	mov	r8, r1
 8002f70:	4681      	mov	r9, r0
 8002f72:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002f76:	6079      	str	r1, [r7, #4]
 8002f78:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	683c      	ldr	r4, [r7, #0]
 8002f80:	2500      	movs	r5, #0
 8002f82:	ea42 0a04 	orr.w	sl, r2, r4
 8002f86:	ea43 0b05 	orr.w	fp, r3, r5
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2204      	movs	r2, #4
 8002f94:	701a      	strb	r2, [r3, #0]
            }
 8002f96:	bf00      	nop
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa0:	45cccc00 	.word	0x45cccc00
 8002fa4:	45cccc00 	.word	0x45cccc00
 8002fa8:	3dcccccd 	.word	0x3dcccccd

08002fac <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2051) {
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff fccd 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f640 0303 	movw	r3, #2051	; 0x803
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d000      	beq.n	8002fd6 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x2a>
                    while(1);
 8002fd4:	e7fe      	b.n	8002fd4 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	0c02      	lsrs	r2, r0, #16
 8002fe6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002fea:	0c0b      	lsrs	r3, r1, #16
 8002fec:	4613      	mov	r3, r2
 8002fee:	81fb      	strh	r3, [r7, #14]
                return value * (0.1f);
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffa:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800300c <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x60>
 8002ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003002:	eeb0 0a67 	vmov.f32	s0, s15
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	3dcccccd 	.word	0x3dcccccd

08003010 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(6553.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b088      	sub	sp, #32
 8003016:	af00      	add	r7, sp, #0
 8003018:	6178      	str	r0, [r7, #20]
 800301a:	6139      	str	r1, [r7, #16]
 800301c:	60fa      	str	r2, [r7, #12]
 800301e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003022:	edd7 7a02 	vldr	s15, [r7, #8]
 8003026:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80030b8 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xa8>
 800302a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	dd01      	ble.n	8003038 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0x28>
                    value = max;
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xac>)
 8003036:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003038:	edd7 7a02 	vldr	s15, [r7, #8]
 800303c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d502      	bpl.n	800304c <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0x3c>
                    value = min;
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2050);
 800304c:	f640 0302 	movw	r3, #2050	; 0x802
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	6939      	ldr	r1, [r7, #16]
 8003054:	6978      	ldr	r0, [r7, #20]
 8003056:	f7ff fc57 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.1f)));
 800305a:	edd7 7a02 	vldr	s15, [r7, #8]
 800305e:	eddf 6a18 	vldr	s13, [pc, #96]	; 80030c0 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xb0>
 8003062:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003066:	eeb0 0a47 	vmov.f32	s0, s14
 800306a:	f7ff fb0b 	bl	8002684 <_ZSt5roundf>
 800306e:	eef0 7a40 	vmov.f32	s15, s0
 8003072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003076:	ee17 3a90 	vmov	r3, s15
 800307a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	8bf9      	ldrh	r1, [r7, #30]
 8003084:	2000      	movs	r0, #0
 8003086:	4688      	mov	r8, r1
 8003088:	4681      	mov	r9, r0
 800308a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800308e:	6079      	str	r1, [r7, #4]
 8003090:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	683c      	ldr	r4, [r7, #0]
 8003098:	2500      	movs	r5, #0
 800309a:	ea42 0a04 	orr.w	sl, r2, r4
 800309e:	ea43 0b05 	orr.w	fp, r3, r5
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2204      	movs	r2, #4
 80030ac:	701a      	strb	r2, [r3, #0]
            }
 80030ae:	bf00      	nop
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b8:	45cccc00 	.word	0x45cccc00
 80030bc:	45cccc00 	.word	0x45cccc00
 80030c0:	3dcccccd 	.word	0x3dcccccd

080030c4 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2050) {
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fc41 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	f640 0302 	movw	r3, #2050	; 0x802
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d000      	beq.n	80030ee <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x2a>
                    while(1);
 80030ec:	e7fe      	b.n	80030ec <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	0c02      	lsrs	r2, r0, #16
 80030fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003102:	0c0b      	lsrs	r3, r1, #16
 8003104:	4613      	mov	r3, r2
 8003106:	81fb      	strh	r3, [r7, #14]
                return value * (0.1f);
 8003108:	89fb      	ldrh	r3, [r7, #14]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003112:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003124 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x60>
 8003116:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800311a:	eeb0 0a67 	vmov.f32	s0, s15
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	3dcccccd 	.word	0x3dcccccd

08003128 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b088      	sub	sp, #32
 800312e:	af00      	add	r7, sp, #0
 8003130:	6178      	str	r0, [r7, #20]
 8003132:	6139      	str	r1, [r7, #16]
 8003134:	60fa      	str	r2, [r7, #12]
 8003136:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800313a:	edd7 7a02 	vldr	s15, [r7, #8]
 800313e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80031d0 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xa8>
 8003142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	dd01      	ble.n	8003150 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0x28>
                    value = max;
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xac>)
 800314e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003150:	edd7 7a02 	vldr	s15, [r7, #8]
 8003154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315c:	d502      	bpl.n	8003164 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0x3c>
                    value = min;
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2049);
 8003164:	f640 0301 	movw	r3, #2049	; 0x801
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	6939      	ldr	r1, [r7, #16]
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7ff fbcb 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8003172:	edd7 7a02 	vldr	s15, [r7, #8]
 8003176:	eddf 6a18 	vldr	s13, [pc, #96]	; 80031d8 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xb0>
 800317a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800317e:	eeb0 0a47 	vmov.f32	s0, s14
 8003182:	f7ff fa7f 	bl	8002684 <_ZSt5roundf>
 8003186:	eef0 7a40 	vmov.f32	s15, s0
 800318a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318e:	ee17 3a90 	vmov	r3, s15
 8003192:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	8bf9      	ldrh	r1, [r7, #30]
 800319c:	2000      	movs	r0, #0
 800319e:	4688      	mov	r8, r1
 80031a0:	4681      	mov	r9, r0
 80031a2:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80031a6:	6079      	str	r1, [r7, #4]
 80031a8:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	683c      	ldr	r4, [r7, #0]
 80031b0:	2500      	movs	r5, #0
 80031b2:	ea42 0a04 	orr.w	sl, r2, r4
 80031b6:	ea43 0b05 	orr.w	fp, r3, r5
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
            }
 80031c6:	bf00      	nop
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d0:	4423d666 	.word	0x4423d666
 80031d4:	4423d666 	.word	0x4423d666
 80031d8:	3c23d70a 	.word	0x3c23d70a

080031dc <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2049) {
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fbb5 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	f640 0301 	movw	r3, #2049	; 0x801
 80031f6:	429a      	cmp	r2, r3
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d000      	beq.n	8003206 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x2a>
                    while(1);
 8003204:	e7fe      	b.n	8003204 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	e9d3 0100 	ldrd	r0, r1, [r3]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	0c02      	lsrs	r2, r0, #16
 8003216:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800321a:	0c0b      	lsrs	r3, r1, #16
 800321c:	4613      	mov	r3, r2
 800321e:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800323c <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x60>
 800322e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	3c23d70a 	.word	0x3c23d70a

08003240 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af00      	add	r7, sp, #0
 8003248:	6178      	str	r0, [r7, #20]
 800324a:	6139      	str	r1, [r7, #16]
 800324c:	60fa      	str	r2, [r7, #12]
 800324e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003252:	edd7 7a02 	vldr	s15, [r7, #8]
 8003256:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80032e8 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xa8>
 800325a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	dd01      	ble.n	8003268 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0x28>
                    value = max;
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xac>)
 8003266:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003268:	edd7 7a02 	vldr	s15, [r7, #8]
 800326c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	d502      	bpl.n	800327c <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0x3c>
                    value = min;
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2048);
 800327c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	6939      	ldr	r1, [r7, #16]
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	f7ff fb3f 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 800328a:	edd7 7a02 	vldr	s15, [r7, #8]
 800328e:	eddf 6a18 	vldr	s13, [pc, #96]	; 80032f0 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xb0>
 8003292:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003296:	eeb0 0a47 	vmov.f32	s0, s14
 800329a:	f7ff f9f3 	bl	8002684 <_ZSt5roundf>
 800329e:	eef0 7a40 	vmov.f32	s15, s0
 80032a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a6:	ee17 3a90 	vmov	r3, s15
 80032aa:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	8bf9      	ldrh	r1, [r7, #30]
 80032b4:	2000      	movs	r0, #0
 80032b6:	4688      	mov	r8, r1
 80032b8:	4681      	mov	r9, r0
 80032ba:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80032be:	6079      	str	r1, [r7, #4]
 80032c0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	683c      	ldr	r4, [r7, #0]
 80032c8:	2500      	movs	r5, #0
 80032ca:	ea42 0a04 	orr.w	sl, r2, r4
 80032ce:	ea43 0b05 	orr.w	fp, r3, r5
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2204      	movs	r2, #4
 80032dc:	701a      	strb	r2, [r3, #0]
            }
 80032de:	bf00      	nop
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e8:	4423d666 	.word	0x4423d666
 80032ec:	4423d666 	.word	0x4423d666
 80032f0:	3c23d70a 	.word	0x3c23d70a

080032f4 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2048) {
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fb29 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003306:	4603      	mov	r3, r0
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d000      	beq.n	800331a <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x26>
                    while(1);
 8003318:	e7fe      	b.n	8003318 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	0c02      	lsrs	r2, r0, #16
 800332a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800332e:	0c0b      	lsrs	r3, r1, #16
 8003330:	4613      	mov	r3, r2
 8003332:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8003334:	89fb      	ldrh	r3, [r7, #14]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800333e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003350 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x5c>
 8003342:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003346:	eeb0 0a67 	vmov.f32	s0, s15
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	3c23d70a 	.word	0x3c23d70a

08003354 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b088      	sub	sp, #32
 800335a:	af00      	add	r7, sp, #0
 800335c:	6178      	str	r0, [r7, #20]
 800335e:	6139      	str	r1, [r7, #16]
 8003360:	60fa      	str	r2, [r7, #12]
 8003362:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336a:	d302      	bcc.n	8003372 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800336c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003370:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1129);
 8003372:	f240 4369 	movw	r3, #1129	; 0x469
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6939      	ldr	r1, [r7, #16]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff fac4 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	69f9      	ldr	r1, [r7, #28]
 800338c:	2000      	movs	r0, #0
 800338e:	468a      	mov	sl, r1
 8003390:	4683      	mov	fp, r0
 8003392:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003396:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800339a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800339e:	0424      	lsls	r4, r4, #16
 80033a0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80033a4:	ea42 0104 	orr.w	r1, r2, r4
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	432b      	orrs	r3, r5
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033b4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2205      	movs	r2, #5
 80033bc:	701a      	strb	r2, [r3, #0]
            }
 80033be:	bf00      	nop
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033c8 <_ZN3can7signals23PDU_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1128);
 80033d8:	f44f 638d 	mov.w	r3, #1128	; 0x468
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff fa91 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2200      	movs	r2, #0
 80033f4:	4698      	mov	r8, r3
 80033f6:	4691      	mov	r9, r2
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003404:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003408:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800340c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003410:	2500      	movs	r5, #0
 8003412:	ea40 0a04 	orr.w	sl, r0, r4
 8003416:	ea41 0b05 	orr.w	fp, r1, r5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2203      	movs	r2, #3
 8003424:	701a      	strb	r2, [r3, #0]
            }
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003430 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b088      	sub	sp, #32
 8003436:	af00      	add	r7, sp, #0
 8003438:	6178      	str	r0, [r7, #20]
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	60fa      	str	r2, [r7, #12]
 800343e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003446:	d302      	bcc.n	800344e <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003448:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800344c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1127);
 800344e:	f240 4367 	movw	r3, #1127	; 0x467
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	6939      	ldr	r1, [r7, #16]
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f7ff fa56 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	2000      	movs	r0, #0
 800346a:	468a      	mov	sl, r1
 800346c:	4683      	mov	fp, r0
 800346e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003472:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003476:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800347a:	0424      	lsls	r4, r4, #16
 800347c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003480:	ea42 0104 	orr.w	r1, r2, r4
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	432b      	orrs	r3, r5
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003490:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2205      	movs	r2, #5
 8003498:	701a      	strb	r2, [r3, #0]
            }
 800349a:	bf00      	nop
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034a4 <_ZN3can7signals18PDU_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80034a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1126);
 80034b4:	f240 4366 	movw	r3, #1126	; 0x466
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fa23 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2200      	movs	r2, #0
 80034d0:	4698      	mov	r8, r3
 80034d2:	4691      	mov	r9, r2
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80034e0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80034e4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80034e8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80034ec:	2500      	movs	r5, #0
 80034ee:	ea40 0a04 	orr.w	sl, r0, r4
 80034f2:	ea41 0b05 	orr.w	fp, r1, r5
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2203      	movs	r2, #3
 8003500:	701a      	strb	r2, [r3, #0]
            }
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800350c <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003510:	b088      	sub	sp, #32
 8003512:	af00      	add	r7, sp, #0
 8003514:	6178      	str	r0, [r7, #20]
 8003516:	6139      	str	r1, [r7, #16]
 8003518:	60fa      	str	r2, [r7, #12]
 800351a:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 800351c:	897b      	ldrh	r3, [r7, #10]
 800351e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003522:	d902      	bls.n	800352a <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003528:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	2b7c      	cmp	r3, #124	; 0x7c
 800352e:	d801      	bhi.n	8003534 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003530:	237d      	movs	r3, #125	; 0x7d
 8003532:	817b      	strh	r3, [r7, #10]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1124);
 8003534:	f240 4364 	movw	r3, #1124	; 0x464
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	6939      	ldr	r1, [r7, #16]
 800353c:	6978      	ldr	r0, [r7, #20]
 800353e:	f7ff f9e3 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	8bf9      	ldrh	r1, [r7, #30]
 800354e:	2000      	movs	r0, #0
 8003550:	4688      	mov	r8, r1
 8003552:	4681      	mov	r9, r0
 8003554:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003558:	6079      	str	r1, [r7, #4]
 800355a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800355e:	6039      	str	r1, [r7, #0]
 8003560:	683c      	ldr	r4, [r7, #0]
 8003562:	2500      	movs	r5, #0
 8003564:	ea42 0a04 	orr.w	sl, r2, r4
 8003568:	ea43 0b05 	orr.w	fp, r3, r5
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2204      	movs	r2, #4
 8003576:	701a      	strb	r2, [r3, #0]
            }
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003582 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1124) {
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff f9e2 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	f240 4364 	movw	r3, #1124	; 0x464
 800359c:	429a      	cmp	r2, r3
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d000      	beq.n	80035ac <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 80035aa:	e7fe      	b.n	80035aa <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	0c02      	lsrs	r2, r0, #16
 80035bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035c0:	0c0b      	lsrs	r3, r1, #16
 80035c2:	4613      	mov	r3, r2
 80035c4:	81fb      	strh	r3, [r7, #14]
                return value;
 80035c6:	89fb      	ldrh	r3, [r7, #14]
            }
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80035d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1123);
 80035e0:	f240 4363 	movw	r3, #1123	; 0x463
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff f98d 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2200      	movs	r2, #0
 80035fc:	4698      	mov	r8, r3
 80035fe:	4691      	mov	r9, r2
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800360c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003610:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003614:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003618:	2500      	movs	r5, #0
 800361a:	ea40 0a04 	orr.w	sl, r0, r4
 800361e:	ea41 0b05 	orr.w	fp, r1, r5
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	701a      	strb	r2, [r3, #0]
            }
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003638 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1123) {
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff f987 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	f240 4363 	movw	r3, #1123	; 0x463
 8003652:	429a      	cmp	r2, r3
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d000      	beq.n	8003662 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003660:	e7fe      	b.n	8003660 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	0c02      	lsrs	r2, r0, #16
 8003672:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003676:	0c0b      	lsrs	r3, r1, #16
 8003678:	4613      	mov	r3, r2
 800367a:	73fb      	strb	r3, [r7, #15]
                return value;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800368c:	b088      	sub	sp, #32
 800368e:	af00      	add	r7, sp, #0
 8003690:	6178      	str	r0, [r7, #20]
 8003692:	6139      	str	r1, [r7, #16]
 8003694:	60fa      	str	r2, [r7, #12]
 8003696:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1122);
 8003698:	f240 4362 	movw	r3, #1122	; 0x462
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	6939      	ldr	r1, [r7, #16]
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7ff f931 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	2000      	movs	r0, #0
 80036b4:	468a      	mov	sl, r1
 80036b6:	4683      	mov	fp, r0
 80036b8:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80036bc:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 80036c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036c6:	ea08 0400 	and.w	r4, r8, r0
 80036ca:	ea09 0501 	and.w	r5, r9, r1
 80036ce:	ea42 0104 	orr.w	r1, r2, r4
 80036d2:	6039      	str	r1, [r7, #0]
 80036d4:	432b      	orrs	r3, r5
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036de:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2206      	movs	r2, #6
 80036e6:	701a      	strb	r2, [r3, #0]
            }
 80036e8:	bf00      	nop
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f2:	bf00      	nop
 80036f4:	ffff0000 	.word	0xffff0000

080036f8 <_ZN3can7signals20PDU_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80036f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1121);
 8003708:	f240 4361 	movw	r3, #1121	; 0x461
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7ff f8f9 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2200      	movs	r2, #0
 8003724:	4698      	mov	r8, r3
 8003726:	4691      	mov	r9, r2
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003734:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003738:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800373c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003740:	2500      	movs	r5, #0
 8003742:	ea40 0a04 	orr.w	sl, r0, r4
 8003746:	ea41 0b05 	orr.w	fp, r1, r5
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2203      	movs	r2, #3
 8003754:	701a      	strb	r2, [r3, #0]
            }
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003760 <_ZN3can7signals20PDU_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1120);
 8003770:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff f8c5 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2200      	movs	r2, #0
 800378c:	4698      	mov	r8, r3
 800378e:	4691      	mov	r9, r2
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800379c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80037a0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80037a4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80037a8:	2500      	movs	r5, #0
 80037aa:	ea40 0a04 	orr.w	sl, r0, r4
 80037ae:	ea41 0b05 	orr.w	fp, r1, r5
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2203      	movs	r2, #3
 80037bc:	701a      	strb	r2, [r3, #0]
            }
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037c8 <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80037c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037cc:	b088      	sub	sp, #32
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6178      	str	r0, [r7, #20]
 80037d2:	6139      	str	r1, [r7, #16]
 80037d4:	60fa      	str	r2, [r7, #12]
 80037d6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037de:	d302      	bcc.n	80037e6 <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80037e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80037e4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1113);
 80037e6:	f240 4359 	movw	r3, #1113	; 0x459
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6939      	ldr	r1, [r7, #16]
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7ff f88a 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	69f9      	ldr	r1, [r7, #28]
 8003800:	2000      	movs	r0, #0
 8003802:	468a      	mov	sl, r1
 8003804:	4683      	mov	fp, r0
 8003806:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800380a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800380e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003812:	0424      	lsls	r4, r4, #16
 8003814:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003818:	ea42 0104 	orr.w	r1, r2, r4
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	432b      	orrs	r3, r5
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003828:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2205      	movs	r2, #5
 8003830:	701a      	strb	r2, [r3, #0]
            }
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800383c <_ZN3can7signals23PDU_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800383c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1112);
 800384c:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff f857 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	2200      	movs	r2, #0
 8003868:	4698      	mov	r8, r3
 800386a:	4691      	mov	r9, r2
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003878:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800387c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003880:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003884:	2500      	movs	r5, #0
 8003886:	ea40 0a04 	orr.w	sl, r0, r4
 800388a:	ea41 0b05 	orr.w	fp, r1, r5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2203      	movs	r2, #3
 8003898:	701a      	strb	r2, [r3, #0]
            }
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038a4 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80038a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6178      	str	r0, [r7, #20]
 80038ae:	6139      	str	r1, [r7, #16]
 80038b0:	60fa      	str	r2, [r7, #12]
 80038b2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ba:	d302      	bcc.n	80038c2 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80038bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80038c0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1111);
 80038c2:	f240 4357 	movw	r3, #1111	; 0x457
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6939      	ldr	r1, [r7, #16]
 80038ca:	6978      	ldr	r0, [r7, #20]
 80038cc:	f7ff f81c 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	69f9      	ldr	r1, [r7, #28]
 80038dc:	2000      	movs	r0, #0
 80038de:	468a      	mov	sl, r1
 80038e0:	4683      	mov	fp, r0
 80038e2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80038e6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80038ea:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80038ee:	0424      	lsls	r4, r4, #16
 80038f0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80038f4:	ea42 0104 	orr.w	r1, r2, r4
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	432b      	orrs	r3, r5
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003904:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2205      	movs	r2, #5
 800390c:	701a      	strb	r2, [r3, #0]
            }
 800390e:	bf00      	nop
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003918 <_ZN3can7signals18PDU_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1110);
 8003928:	f240 4356 	movw	r3, #1110	; 0x456
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7fe ffe9 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	2200      	movs	r2, #0
 8003944:	4698      	mov	r8, r3
 8003946:	4691      	mov	r9, r2
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003954:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003958:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800395c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003960:	2500      	movs	r5, #0
 8003962:	ea40 0a04 	orr.w	sl, r0, r4
 8003966:	ea41 0b05 	orr.w	fp, r1, r5
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	701a      	strb	r2, [r3, #0]
            }
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003980 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af00      	add	r7, sp, #0
 8003988:	6178      	str	r0, [r7, #20]
 800398a:	6139      	str	r1, [r7, #16]
 800398c:	60fa      	str	r2, [r7, #12]
 800398e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003990:	897b      	ldrh	r3, [r7, #10]
 8003992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003996:	d902      	bls.n	800399e <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800399c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	2b7c      	cmp	r3, #124	; 0x7c
 80039a2:	d801      	bhi.n	80039a8 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80039a4:	237d      	movs	r3, #125	; 0x7d
 80039a6:	817b      	strh	r3, [r7, #10]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1108);
 80039a8:	f240 4354 	movw	r3, #1108	; 0x454
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7fe ffa9 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	8bf9      	ldrh	r1, [r7, #30]
 80039c2:	2000      	movs	r0, #0
 80039c4:	4688      	mov	r8, r1
 80039c6:	4681      	mov	r9, r0
 80039c8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80039cc:	6079      	str	r1, [r7, #4]
 80039ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80039d2:	6039      	str	r1, [r7, #0]
 80039d4:	683c      	ldr	r4, [r7, #0]
 80039d6:	2500      	movs	r5, #0
 80039d8:	ea42 0a04 	orr.w	sl, r2, r4
 80039dc:	ea43 0b05 	orr.w	fp, r3, r5
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2204      	movs	r2, #4
 80039ea:	701a      	strb	r2, [r3, #0]
            }
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039f6 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1108) {
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fe ffa8 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f240 4354 	movw	r3, #1108	; 0x454
 8003a10:	429a      	cmp	r2, r3
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d000      	beq.n	8003a20 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003a1e:	e7fe      	b.n	8003a1e <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	0c02      	lsrs	r2, r0, #16
 8003a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a34:	0c0b      	lsrs	r3, r1, #16
 8003a36:	4613      	mov	r3, r2
 8003a38:	81fb      	strh	r3, [r7, #14]
                return value;
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
            }
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1107);
 8003a54:	f240 4353 	movw	r3, #1107	; 0x453
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7fe ff53 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4698      	mov	r8, r3
 8003a72:	4691      	mov	r9, r2
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003a80:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003a84:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003a88:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003a8c:	2500      	movs	r5, #0
 8003a8e:	ea40 0a04 	orr.w	sl, r0, r4
 8003a92:	ea41 0b05 	orr.w	fp, r1, r5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	701a      	strb	r2, [r3, #0]
            }
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003aac <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1107) {
 8003ab6:	6839      	ldr	r1, [r7, #0]
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fe ff4d 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f240 4353 	movw	r3, #1107	; 0x453
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d000      	beq.n	8003ad6 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003ad4:	e7fe      	b.n	8003ad4 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	0c02      	lsrs	r2, r0, #16
 8003ae6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003aea:	0c0b      	lsrs	r3, r1, #16
 8003aec:	4613      	mov	r3, r2
 8003aee:	73fb      	strb	r3, [r7, #15]
                return value;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b00:	b088      	sub	sp, #32
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6178      	str	r0, [r7, #20]
 8003b06:	6139      	str	r1, [r7, #16]
 8003b08:	60fa      	str	r2, [r7, #12]
 8003b0a:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1106);
 8003b0c:	f240 4352 	movw	r3, #1106	; 0x452
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6939      	ldr	r1, [r7, #16]
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	f7fe fef7 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	2000      	movs	r0, #0
 8003b28:	468a      	mov	sl, r1
 8003b2a:	4683      	mov	fp, r0
 8003b2c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003b30:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003b34:	480c      	ldr	r0, [pc, #48]	; (8003b68 <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003b36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b3a:	ea08 0400 	and.w	r4, r8, r0
 8003b3e:	ea09 0501 	and.w	r5, r9, r1
 8003b42:	ea42 0104 	orr.w	r1, r2, r4
 8003b46:	6039      	str	r1, [r7, #0]
 8003b48:	432b      	orrs	r3, r5
 8003b4a:	607b      	str	r3, [r7, #4]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b52:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2206      	movs	r2, #6
 8003b5a:	701a      	strb	r2, [r3, #0]
            }
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <_ZN3can7signals20PDU_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b086      	sub	sp, #24
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1105);
 8003b7c:	f240 4351 	movw	r3, #1105	; 0x451
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7fe febf 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2200      	movs	r2, #0
 8003b98:	4698      	mov	r8, r3
 8003b9a:	4691      	mov	r9, r2
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ba8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003bac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003bb0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003bb4:	2500      	movs	r5, #0
 8003bb6:	ea40 0a04 	orr.w	sl, r0, r4
 8003bba:	ea41 0b05 	orr.w	fp, r1, r5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	701a      	strb	r2, [r3, #0]
            }
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003bd4 <_ZN3can7signals20PDU_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1104);
 8003be4:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7fe fe8b 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4698      	mov	r8, r3
 8003c02:	4691      	mov	r9, r2
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003c10:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003c14:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003c18:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	ea40 0a04 	orr.w	sl, r0, r4
 8003c22:	ea41 0b05 	orr.w	fp, r1, r5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	701a      	strb	r2, [r3, #0]
            }
 8003c32:	bf00      	nop
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c3c <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b088      	sub	sp, #32
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6178      	str	r0, [r7, #20]
 8003c46:	6139      	str	r1, [r7, #16]
 8003c48:	60fa      	str	r2, [r7, #12]
 8003c4a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c52:	d302      	bcc.n	8003c5a <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8003c54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003c58:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1073);
 8003c5a:	f240 4331 	movw	r3, #1073	; 0x431
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6939      	ldr	r1, [r7, #16]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7fe fe50 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	69f9      	ldr	r1, [r7, #28]
 8003c74:	2000      	movs	r0, #0
 8003c76:	468a      	mov	sl, r1
 8003c78:	4683      	mov	fp, r0
 8003c7a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003c7e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003c82:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003c86:	0424      	lsls	r4, r4, #16
 8003c88:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003c8c:	ea42 0104 	orr.w	r1, r2, r4
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	432b      	orrs	r3, r5
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c9c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	701a      	strb	r2, [r3, #0]
            }
 8003ca6:	bf00      	nop
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cb0 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb4:	b088      	sub	sp, #32
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6178      	str	r0, [r7, #20]
 8003cba:	6139      	str	r1, [r7, #16]
 8003cbc:	60fa      	str	r2, [r7, #12]
 8003cbe:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1072);
 8003cc0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	6939      	ldr	r1, [r7, #16]
 8003cc8:	6978      	ldr	r0, [r7, #20]
 8003cca:	f7fe fe1d 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	69f9      	ldr	r1, [r7, #28]
 8003cda:	2000      	movs	r0, #0
 8003cdc:	468a      	mov	sl, r1
 8003cde:	4683      	mov	fp, r0
 8003ce0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003ce4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8003cea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cee:	ea08 0400 	and.w	r4, r8, r0
 8003cf2:	ea09 0501 	and.w	r5, r9, r1
 8003cf6:	ea42 0104 	orr.w	r1, r2, r4
 8003cfa:	6039      	str	r1, [r7, #0]
 8003cfc:	432b      	orrs	r3, r5
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d06:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2206      	movs	r2, #6
 8003d0e:	701a      	strb	r2, [r3, #0]
            }
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1a:	bf00      	nop
 8003d1c:	ffff0000 	.word	0xffff0000

08003d20 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003d2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d305      	bcc.n	8003d44 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1057);
 8003d44:	f240 4321 	movw	r3, #1057	; 0x421
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe fddb 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003d52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d56:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	040b      	lsls	r3, r1, #16
 8003d6e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003d72:	0402      	lsls	r2, r0, #16
 8003d74:	ea48 0402 	orr.w	r4, r8, r2
 8003d78:	ea49 0503 	orr.w	r5, r9, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2208      	movs	r2, #8
 8003d86:	701a      	strb	r2, [r3, #0]
            }
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003d92 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003d92:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003da0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d305      	bcc.n	8003db6 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1056);
 8003db6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7fe fda2 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003dc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003dd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	040b      	lsls	r3, r1, #16
 8003de0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003de4:	0402      	lsls	r2, r0, #16
 8003de6:	ea48 0402 	orr.w	r4, r8, r2
 8003dea:	ea49 0503 	orr.w	r5, r9, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2208      	movs	r2, #8
 8003df8:	701a      	strb	r2, [r3, #0]
            }
 8003dfa:	bf00      	nop
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003e04 <_ZN3can7signals13PDU_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1046);
 8003e14:	f240 4316 	movw	r3, #1046	; 0x416
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7fe fd73 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4698      	mov	r8, r3
 8003e32:	4691      	mov	r9, r2
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003e40:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003e44:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003e48:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	ea40 0a04 	orr.w	sl, r0, r4
 8003e52:	ea41 0b05 	orr.w	fp, r1, r5
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	701a      	strb	r2, [r3, #0]
            }
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e6c <_ZN3can7signals12PDU_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1045);
 8003e7c:	f240 4315 	movw	r3, #1045	; 0x415
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7fe fd3f 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2200      	movs	r2, #0
 8003e98:	4698      	mov	r8, r3
 8003e9a:	4691      	mov	r9, r2
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ea8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003eac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003eb0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	ea40 0a04 	orr.w	sl, r0, r4
 8003eba:	ea41 0b05 	orr.w	fp, r1, r5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	701a      	strb	r2, [r3, #0]
            }
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ed4 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed8:	b088      	sub	sp, #32
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6178      	str	r0, [r7, #20]
 8003ede:	6139      	str	r1, [r7, #16]
 8003ee0:	60fa      	str	r2, [r7, #12]
 8003ee2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eea:	d302      	bcc.n	8003ef2 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8003eec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003ef0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1044);
 8003ef2:	f240 4314 	movw	r3, #1044	; 0x414
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6939      	ldr	r1, [r7, #16]
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f7fe fd04 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	69f9      	ldr	r1, [r7, #28]
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	468a      	mov	sl, r1
 8003f10:	4683      	mov	fp, r0
 8003f12:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003f16:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003f1a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003f1e:	0424      	lsls	r4, r4, #16
 8003f20:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003f24:	ea42 0104 	orr.w	r1, r2, r4
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	432b      	orrs	r3, r5
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f34:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2205      	movs	r2, #5
 8003f3c:	701a      	strb	r2, [r3, #0]
            }
 8003f3e:	bf00      	nop
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f48 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f4c:	b088      	sub	sp, #32
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6178      	str	r0, [r7, #20]
 8003f52:	6139      	str	r1, [r7, #16]
 8003f54:	60fa      	str	r2, [r7, #12]
 8003f56:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003ff0 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xa8>
 8003f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	dd01      	ble.n	8003f70 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xac>)
 8003f6e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7c:	d502      	bpl.n	8003f84 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1043);
 8003f84:	f240 4313 	movw	r3, #1043	; 0x413
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7fe fcbb 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8003f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f96:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003ff8 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xb0>
 8003f9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003fa2:	f7fe fb6f 	bl	8002684 <_ZSt5roundf>
 8003fa6:	eef0 7a40 	vmov.f32	s15, s0
 8003faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fae:	ee17 3a90 	vmov	r3, s15
 8003fb2:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	8bf9      	ldrh	r1, [r7, #30]
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	4688      	mov	r8, r1
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003fc6:	6079      	str	r1, [r7, #4]
 8003fc8:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	683c      	ldr	r4, [r7, #0]
 8003fd0:	2500      	movs	r5, #0
 8003fd2:	ea42 0a04 	orr.w	sl, r2, r4
 8003fd6:	ea43 0b05 	orr.w	fp, r3, r5
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	701a      	strb	r2, [r3, #0]
            }
 8003fe6:	bf00      	nop
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff0:	428311ec 	.word	0x428311ec
 8003ff4:	428311ec 	.word	0x428311ec
 8003ff8:	3a83126f 	.word	0x3a83126f

08003ffc <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004000:	b088      	sub	sp, #32
 8004002:	af00      	add	r7, sp, #0
 8004004:	6178      	str	r0, [r7, #20]
 8004006:	6139      	str	r1, [r7, #16]
 8004008:	60fa      	str	r2, [r7, #12]
 800400a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800400e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004012:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80040b0 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8004016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401e:	dd01      	ble.n	8004024 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8004022:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004024:	edd7 7a02 	vldr	s15, [r7, #8]
 8004028:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800402c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	d501      	bpl.n	800403a <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8004038:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1042);
 800403a:	f240 4312 	movw	r3, #1042	; 0x412
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	6939      	ldr	r1, [r7, #16]
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7fe fc60 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8004048:	edd7 7a02 	vldr	s15, [r7, #8]
 800404c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004054:	eddf 6a19 	vldr	s13, [pc, #100]	; 80040bc <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8004058:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800405c:	eeb0 0a47 	vmov.f32	s0, s14
 8004060:	f7fe fb10 	bl	8002684 <_ZSt5roundf>
 8004064:	eef0 7a40 	vmov.f32	s15, s0
 8004068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	8bf9      	ldrh	r1, [r7, #30]
 800407a:	2000      	movs	r0, #0
 800407c:	4688      	mov	r8, r1
 800407e:	4681      	mov	r9, r0
 8004080:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004084:	6079      	str	r1, [r7, #4]
 8004086:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800408a:	6039      	str	r1, [r7, #0]
 800408c:	683c      	ldr	r4, [r7, #0]
 800408e:	2500      	movs	r5, #0
 8004090:	ea42 0a04 	orr.w	sl, r2, r4
 8004094:	ea43 0b05 	orr.w	fp, r3, r5
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2204      	movs	r2, #4
 80040a2:	701a      	strb	r2, [r3, #0]
            }
 80040a4:	bf00      	nop
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ae:	bf00      	nop
 80040b0:	441c5666 	.word	0x441c5666
 80040b4:	441c5666 	.word	0x441c5666
 80040b8:	c1f00000 	.word	0xc1f00000
 80040bc:	3c23d70a 	.word	0x3c23d70a

080040c0 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b088      	sub	sp, #32
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6178      	str	r0, [r7, #20]
 80040ca:	6139      	str	r1, [r7, #16]
 80040cc:	60fa      	str	r2, [r7, #12]
 80040ce:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x6c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 80040d8:	4b14      	ldr	r3, [pc, #80]	; (800412c <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x6c>)
 80040da:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1041);
 80040dc:	f240 4311 	movw	r3, #1041	; 0x411
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	6978      	ldr	r0, [r7, #20]
 80040e6:	f7fe fc0f 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	69f9      	ldr	r1, [r7, #28]
 80040f8:	2000      	movs	r0, #0
 80040fa:	4688      	mov	r8, r1
 80040fc:	4681      	mov	r9, r0
 80040fe:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004102:	6079      	str	r1, [r7, #4]
 8004104:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	683c      	ldr	r4, [r7, #0]
 800410c:	2500      	movs	r5, #0
 800410e:	ea42 0a04 	orr.w	sl, r2, r4
 8004112:	ea43 0b05 	orr.w	fp, r3, r5
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2204      	movs	r2, #4
 8004120:	701a      	strb	r2, [r3, #0]
            }
 8004122:	bf00      	nop
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412c:	0003fffc 	.word	0x0003fffc

08004130 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af00      	add	r7, sp, #0
 8004138:	6178      	str	r0, [r7, #20]
 800413a:	6139      	str	r1, [r7, #16]
 800413c:	60fa      	str	r2, [r7, #12]
 800413e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004142:	edd7 7a02 	vldr	s15, [r7, #8]
 8004146:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80041e4 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0xb4>
 800414a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	dd01      	ble.n	8004158 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8004156:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004158:	edd7 7a02 	vldr	s15, [r7, #8]
 800415c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	d502      	bpl.n	800416c <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1040);
 800416c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	6939      	ldr	r1, [r7, #16]
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f7fe fbc7 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800417a:	edd7 7a02 	vldr	s15, [r7, #8]
 800417e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004182:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004186:	eeb0 0a47 	vmov.f32	s0, s14
 800418a:	f7fe fa7b 	bl	8002684 <_ZSt5roundf>
 800418e:	eef0 7a40 	vmov.f32	s15, s0
 8004192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004196:	edc7 7a01 	vstr	s15, [r7, #4]
 800419a:	793b      	ldrb	r3, [r7, #4]
 800419c:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2200      	movs	r2, #0
 80041a8:	4698      	mov	r8, r3
 80041aa:	4691      	mov	r9, r2
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80041b8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80041bc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80041c0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80041c4:	2500      	movs	r5, #0
 80041c6:	ea40 0a04 	orr.w	sl, r0, r4
 80041ca:	ea41 0b05 	orr.w	fp, r1, r5
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2203      	movs	r2, #3
 80041d8:	701a      	strb	r2, [r3, #0]
            }
 80041da:	bf00      	nop
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e4:	42c80000 	.word	0x42c80000
 80041e8:	42c80000 	.word	0x42c80000

080041ec <_ZN3can7signals26PDU_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80041ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f0:	b088      	sub	sp, #32
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6178      	str	r0, [r7, #20]
 80041f6:	6139      	str	r1, [r7, #16]
 80041f8:	60fa      	str	r2, [r7, #12]
 80041fa:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 33);
 80041fc:	2321      	movs	r3, #33	; 0x21
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6939      	ldr	r1, [r7, #16]
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f7fe fb80 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004208:	897b      	ldrh	r3, [r7, #10]
 800420a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	8bf9      	ldrh	r1, [r7, #30]
 8004214:	2000      	movs	r0, #0
 8004216:	4688      	mov	r8, r1
 8004218:	4681      	mov	r9, r0
 800421a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800421e:	6079      	str	r1, [r7, #4]
 8004220:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	683c      	ldr	r4, [r7, #0]
 8004228:	2500      	movs	r5, #0
 800422a:	ea42 0a04 	orr.w	sl, r2, r4
 800422e:	ea43 0b05 	orr.w	fp, r3, r5
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2204      	movs	r2, #4
 800423c:	701a      	strb	r2, [r3, #0]
            }
 800423e:	bf00      	nop
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004248 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 33) {
 8004252:	6839      	ldr	r1, [r7, #0]
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fe fb7f 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800425a:	4603      	mov	r3, r0
 800425c:	2b21      	cmp	r3, #33	; 0x21
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d000      	beq.n	800426c <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 800426a:	e7fe      	b.n	800426a <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	0c02      	lsrs	r2, r0, #16
 800427c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004280:	0c0b      	lsrs	r3, r1, #16
 8004282:	4613      	mov	r3, r2
 8004284:	81fb      	strh	r3, [r7, #14]
                return value;
 8004286:	89fb      	ldrh	r3, [r7, #14]
            }
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZN3can7signals21PDU_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 32);
 80042a0:	2320      	movs	r3, #32
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7fe fb2e 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2200      	movs	r2, #0
 80042ba:	4698      	mov	r8, r3
 80042bc:	4691      	mov	r9, r2
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80042ca:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80042ce:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80042d2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80042d6:	2500      	movs	r5, #0
 80042d8:	ea40 0a04 	orr.w	sl, r0, r4
 80042dc:	ea41 0b05 	orr.w	fp, r1, r5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2203      	movs	r2, #3
 80042ea:	701a      	strb	r2, [r3, #0]
            }
 80042ec:	bf00      	nop
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042f6 <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 32) {
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fe fb28 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8004308:	4603      	mov	r3, r0
 800430a:	2b20      	cmp	r3, #32
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d000      	beq.n	800431a <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8004318:	e7fe      	b.n	8004318 <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	0c02      	lsrs	r2, r0, #16
 800432a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800432e:	0c0b      	lsrs	r3, r1, #16
 8004330:	4613      	mov	r3, r2
 8004332:	73fb      	strb	r3, [r7, #15]
                return value;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
            }
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <_ZN3can7signals24PDU_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800433e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6178      	str	r0, [r7, #20]
 8004348:	6139      	str	r1, [r7, #16]
 800434a:	60fa      	str	r2, [r7, #12]
 800434c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 16);
 800434e:	2310      	movs	r3, #16
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	6939      	ldr	r1, [r7, #16]
 8004354:	6978      	ldr	r0, [r7, #20]
 8004356:	f7fe fad7 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	8bf9      	ldrh	r1, [r7, #30]
 8004366:	2000      	movs	r0, #0
 8004368:	4688      	mov	r8, r1
 800436a:	4681      	mov	r9, r0
 800436c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004370:	6079      	str	r1, [r7, #4]
 8004372:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004376:	6039      	str	r1, [r7, #0]
 8004378:	683c      	ldr	r4, [r7, #0]
 800437a:	2500      	movs	r5, #0
 800437c:	ea42 0a04 	orr.w	sl, r2, r4
 8004380:	ea43 0b05 	orr.w	fp, r3, r5
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2204      	movs	r2, #4
 800438e:	701a      	strb	r2, [r3, #0]
            }
 8004390:	bf00      	nop
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800439a <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 16) {
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fe fad6 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d000      	beq.n	80043be <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 80043bc:	e7fe      	b.n	80043bc <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	0c02      	lsrs	r2, r0, #16
 80043ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043d2:	0c0b      	lsrs	r3, r1, #16
 80043d4:	4613      	mov	r3, r2
 80043d6:	81fb      	strh	r3, [r7, #14]
                return value;
 80043d8:	89fb      	ldrh	r3, [r7, #14]
            }
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <_ZN3can7signals17PDU_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80043e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6178      	str	r0, [r7, #20]
 80043ec:	6139      	str	r1, [r7, #16]
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 5);
 80043f2:	2305      	movs	r3, #5
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f7fe fa85 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	8bf9      	ldrh	r1, [r7, #30]
 800440a:	2000      	movs	r0, #0
 800440c:	4688      	mov	r8, r1
 800440e:	4681      	mov	r9, r0
 8004410:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004414:	6079      	str	r1, [r7, #4]
 8004416:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800441a:	6039      	str	r1, [r7, #0]
 800441c:	683c      	ldr	r4, [r7, #0]
 800441e:	2500      	movs	r5, #0
 8004420:	ea42 0a04 	orr.w	sl, r2, r4
 8004424:	ea43 0b05 	orr.w	fp, r3, r5
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2204      	movs	r2, #4
 8004432:	701a      	strb	r2, [r3, #0]
            }
 8004434:	bf00      	nop
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800443e <_ZN3can7signals19PDU_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800443e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6178      	str	r0, [r7, #20]
 8004448:	6139      	str	r1, [r7, #16]
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 4);
 800444e:	2304      	movs	r3, #4
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	6939      	ldr	r1, [r7, #16]
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f7fe fa57 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	8bf9      	ldrh	r1, [r7, #30]
 8004466:	2000      	movs	r0, #0
 8004468:	4688      	mov	r8, r1
 800446a:	4681      	mov	r9, r0
 800446c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004470:	6079      	str	r1, [r7, #4]
 8004472:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004476:	6039      	str	r1, [r7, #0]
 8004478:	683c      	ldr	r4, [r7, #0]
 800447a:	2500      	movs	r5, #0
 800447c:	ea42 0a04 	orr.w	sl, r2, r4
 8004480:	ea43 0b05 	orr.w	fp, r3, r5
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2204      	movs	r2, #4
 800448e:	701a      	strb	r2, [r3, #0]
            }
 8004490:	bf00      	nop
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800449a <_ZN3can7signals22PDU_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800449a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6178      	str	r0, [r7, #20]
 80044a4:	6139      	str	r1, [r7, #16]
 80044a6:	60fa      	str	r2, [r7, #12]
 80044a8:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 3);
 80044aa:	2303      	movs	r3, #3
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	6939      	ldr	r1, [r7, #16]
 80044b0:	6978      	ldr	r0, [r7, #20]
 80044b2:	f7fe fa29 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	8bf9      	ldrh	r1, [r7, #30]
 80044c2:	2000      	movs	r0, #0
 80044c4:	4688      	mov	r8, r1
 80044c6:	4681      	mov	r9, r0
 80044c8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80044cc:	6079      	str	r1, [r7, #4]
 80044ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80044d2:	6039      	str	r1, [r7, #0]
 80044d4:	683c      	ldr	r4, [r7, #0]
 80044d6:	2500      	movs	r5, #0
 80044d8:	ea42 0a04 	orr.w	sl, r2, r4
 80044dc:	ea43 0b05 	orr.w	fp, r3, r5
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2204      	movs	r2, #4
 80044ea:	701a      	strb	r2, [r3, #0]
            }
 80044ec:	bf00      	nop
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080044f6 <_ZN3can7signals17PDU_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80044f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2);
 8004506:	2302      	movs	r3, #2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7fe f9fb 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2200      	movs	r2, #0
 8004520:	4698      	mov	r8, r3
 8004522:	4691      	mov	r9, r2
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004530:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004534:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004538:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800453c:	2500      	movs	r5, #0
 800453e:	ea40 0a04 	orr.w	sl, r0, r4
 8004542:	ea41 0b05 	orr.w	fp, r1, r5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2203      	movs	r2, #3
 8004550:	701a      	strb	r2, [r3, #0]
            }
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800455c <_ZN3can7signals13PDU_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1);
 800456c:	2301      	movs	r3, #1
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7fe f9c8 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2200      	movs	r2, #0
 8004586:	4698      	mov	r8, r3
 8004588:	4691      	mov	r9, r2
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004596:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800459a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800459e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80045a2:	2500      	movs	r5, #0
 80045a4:	ea40 0a04 	orr.w	sl, r0, r4
 80045a8:	ea41 0b05 	orr.w	fp, r1, r5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2203      	movs	r2, #3
 80045b6:	701a      	strb	r2, [r3, #0]
            }
 80045b8:	bf00      	nop
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045c2 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	2202      	movs	r2, #2
 80045d8:	f240 611a 	movw	r1, #1562	; 0x61a
 80045dc:	f7fe f862 	bl	80026a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80045e4:	f240 621a 	movw	r2, #1562	; 0x61a
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d000      	beq.n	80045ee <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80045ec:	e7fe      	b.n	80045ec <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	331c      	adds	r3, #28
 8004608:	461a      	mov	r2, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ffd9 	bl	80045c2 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 800461a:	b580      	push	{r7, lr}
 800461c:	b08a      	sub	sp, #40	; 0x28
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::PDU_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ffe5 	bl	80045f8 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::PDU_SDO_ID>();
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f002 f9f4 	bl	8006a20 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>
 8004638:	4603      	mov	r3, r0
 800463a:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 800463c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f814 	bl	800466c <_Z31handleSDORequestDownloadBySDOIDt>
}
 8004644:	bf00      	nop
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	2300      	movs	r3, #0
 8004658:	2208      	movs	r2, #8
 800465a:	f240 519a 	movw	r1, #1434	; 0x59a
 800465e:	f7fc fc95 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 800466c:	b580      	push	{r7, lr}
 800466e:	b092      	sub	sp, #72	; 0x48
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::PDU_SDO_Resp> msgSdoResp;
 8004676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ffe6 	bl	800464c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::PDU_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800468c:	f000 83f8 	beq.w	8004e80 <_Z31handleSDORequestDownloadBySDOIDt+0x814>
 8004690:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004694:	f300 8402 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8004698:	f640 2202 	movw	r2, #2562	; 0xa02
 800469c:	4293      	cmp	r3, r2
 800469e:	f000 83e1 	beq.w	8004e64 <_Z31handleSDORequestDownloadBySDOIDt+0x7f8>
 80046a2:	f640 2202 	movw	r2, #2562	; 0xa02
 80046a6:	4293      	cmp	r3, r2
 80046a8:	f300 83f8 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80046ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80046b0:	f000 83ca 	beq.w	8004e48 <_Z31handleSDORequestDownloadBySDOIDt+0x7dc>
 80046b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80046b8:	f300 83f0 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80046bc:	f640 1202 	movw	r2, #2306	; 0x902
 80046c0:	4293      	cmp	r3, r2
 80046c2:	f000 83b3 	beq.w	8004e2c <_Z31handleSDORequestDownloadBySDOIDt+0x7c0>
 80046c6:	f640 1202 	movw	r2, #2306	; 0x902
 80046ca:	4293      	cmp	r3, r2
 80046cc:	f300 83e6 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80046d0:	f640 1201 	movw	r2, #2305	; 0x901
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f000 839b 	beq.w	8004e10 <_Z31handleSDORequestDownloadBySDOIDt+0x7a4>
 80046da:	f640 1201 	movw	r2, #2305	; 0x901
 80046de:	4293      	cmp	r3, r2
 80046e0:	f300 83dc 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80046e4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80046e8:	f000 8384 	beq.w	8004df4 <_Z31handleSDORequestDownloadBySDOIDt+0x788>
 80046ec:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80046f0:	f300 83d4 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80046f4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80046f8:	f000 836d 	beq.w	8004dd6 <_Z31handleSDORequestDownloadBySDOIDt+0x76a>
 80046fc:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004700:	f300 83cc 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8004704:	f640 0203 	movw	r2, #2051	; 0x803
 8004708:	4293      	cmp	r3, r2
 800470a:	f300 83c7 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800470e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004712:	da06      	bge.n	8004722 <_Z31handleSDORequestDownloadBySDOIDt+0xb6>
 8004714:	2b21      	cmp	r3, #33	; 0x21
 8004716:	f300 811b 	bgt.w	8004950 <_Z31handleSDORequestDownloadBySDOIDt+0x2e4>
 800471a:	2b00      	cmp	r3, #0
 800471c:	f300 80ce 	bgt.w	80048bc <_Z31handleSDORequestDownloadBySDOIDt+0x250>
 8004720:	e3bc      	b.n	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8004722:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004726:	2b03      	cmp	r3, #3
 8004728:	f200 83b8 	bhi.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <_Z31handleSDORequestDownloadBySDOIDt+0xc8>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004d5f 	.word	0x08004d5f
 8004738:	08004d7d 	.word	0x08004d7d
 800473c:	08004d9b 	.word	0x08004d9b
 8004740:	08004db9 	.word	0x08004db9
 8004744:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004748:	2b59      	cmp	r3, #89	; 0x59
 800474a:	f200 83a7 	bhi.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <_Z31handleSDORequestDownloadBySDOIDt+0xe8>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004a45 	.word	0x08004a45
 8004758:	08004a63 	.word	0x08004a63
 800475c:	08004a7d 	.word	0x08004a7d
 8004760:	08004a9b 	.word	0x08004a9b
 8004764:	08004ab9 	.word	0x08004ab9
 8004768:	08004ad3 	.word	0x08004ad3
 800476c:	08004aef 	.word	0x08004aef
 8004770:	08004e9d 	.word	0x08004e9d
 8004774:	08004e9d 	.word	0x08004e9d
 8004778:	08004e9d 	.word	0x08004e9d
 800477c:	08004e9d 	.word	0x08004e9d
 8004780:	08004e9d 	.word	0x08004e9d
 8004784:	08004e9d 	.word	0x08004e9d
 8004788:	08004e9d 	.word	0x08004e9d
 800478c:	08004e9d 	.word	0x08004e9d
 8004790:	08004e9d 	.word	0x08004e9d
 8004794:	08004b0b 	.word	0x08004b0b
 8004798:	08004b25 	.word	0x08004b25
 800479c:	08004e9d 	.word	0x08004e9d
 80047a0:	08004e9d 	.word	0x08004e9d
 80047a4:	08004e9d 	.word	0x08004e9d
 80047a8:	08004e9d 	.word	0x08004e9d
 80047ac:	08004e9d 	.word	0x08004e9d
 80047b0:	08004e9d 	.word	0x08004e9d
 80047b4:	08004e9d 	.word	0x08004e9d
 80047b8:	08004e9d 	.word	0x08004e9d
 80047bc:	08004e9d 	.word	0x08004e9d
 80047c0:	08004e9d 	.word	0x08004e9d
 80047c4:	08004e9d 	.word	0x08004e9d
 80047c8:	08004e9d 	.word	0x08004e9d
 80047cc:	08004e9d 	.word	0x08004e9d
 80047d0:	08004e9d 	.word	0x08004e9d
 80047d4:	08004b3f 	.word	0x08004b3f
 80047d8:	08004b59 	.word	0x08004b59
 80047dc:	08004e9d 	.word	0x08004e9d
 80047e0:	08004e9d 	.word	0x08004e9d
 80047e4:	08004e9d 	.word	0x08004e9d
 80047e8:	08004e9d 	.word	0x08004e9d
 80047ec:	08004e9d 	.word	0x08004e9d
 80047f0:	08004e9d 	.word	0x08004e9d
 80047f4:	08004e9d 	.word	0x08004e9d
 80047f8:	08004e9d 	.word	0x08004e9d
 80047fc:	08004e9d 	.word	0x08004e9d
 8004800:	08004e9d 	.word	0x08004e9d
 8004804:	08004e9d 	.word	0x08004e9d
 8004808:	08004e9d 	.word	0x08004e9d
 800480c:	08004e9d 	.word	0x08004e9d
 8004810:	08004e9d 	.word	0x08004e9d
 8004814:	08004e9d 	.word	0x08004e9d
 8004818:	08004e9d 	.word	0x08004e9d
 800481c:	08004e9d 	.word	0x08004e9d
 8004820:	08004e9d 	.word	0x08004e9d
 8004824:	08004e9d 	.word	0x08004e9d
 8004828:	08004e9d 	.word	0x08004e9d
 800482c:	08004e9d 	.word	0x08004e9d
 8004830:	08004e9d 	.word	0x08004e9d
 8004834:	08004e9d 	.word	0x08004e9d
 8004838:	08004e9d 	.word	0x08004e9d
 800483c:	08004e9d 	.word	0x08004e9d
 8004840:	08004e9d 	.word	0x08004e9d
 8004844:	08004e9d 	.word	0x08004e9d
 8004848:	08004e9d 	.word	0x08004e9d
 800484c:	08004e9d 	.word	0x08004e9d
 8004850:	08004e9d 	.word	0x08004e9d
 8004854:	08004b73 	.word	0x08004b73
 8004858:	08004b8f 	.word	0x08004b8f
 800485c:	08004bab 	.word	0x08004bab
 8004860:	08004bc5 	.word	0x08004bc5
 8004864:	08004be1 	.word	0x08004be1
 8004868:	08004e9d 	.word	0x08004e9d
 800486c:	08004bfd 	.word	0x08004bfd
 8004870:	08004c19 	.word	0x08004c19
 8004874:	08004c33 	.word	0x08004c33
 8004878:	08004c4f 	.word	0x08004c4f
 800487c:	08004e9d 	.word	0x08004e9d
 8004880:	08004e9d 	.word	0x08004e9d
 8004884:	08004e9d 	.word	0x08004e9d
 8004888:	08004e9d 	.word	0x08004e9d
 800488c:	08004e9d 	.word	0x08004e9d
 8004890:	08004e9d 	.word	0x08004e9d
 8004894:	08004c69 	.word	0x08004c69
 8004898:	08004c85 	.word	0x08004c85
 800489c:	08004ca1 	.word	0x08004ca1
 80048a0:	08004cbb 	.word	0x08004cbb
 80048a4:	08004cd7 	.word	0x08004cd7
 80048a8:	08004e9d 	.word	0x08004e9d
 80048ac:	08004cf3 	.word	0x08004cf3
 80048b0:	08004d0f 	.word	0x08004d0f
 80048b4:	08004d29 	.word	0x08004d29
 80048b8:	08004d45 	.word	0x08004d45
 80048bc:	3b01      	subs	r3, #1
 80048be:	2b20      	cmp	r3, #32
 80048c0:	f200 82ec 	bhi.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <_Z31handleSDORequestDownloadBySDOIDt+0x260>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004965 	.word	0x08004965
 80048d0:	08004981 	.word	0x08004981
 80048d4:	0800499d 	.word	0x0800499d
 80048d8:	080049b9 	.word	0x080049b9
 80048dc:	080049d5 	.word	0x080049d5
 80048e0:	08004e9d 	.word	0x08004e9d
 80048e4:	08004e9d 	.word	0x08004e9d
 80048e8:	08004e9d 	.word	0x08004e9d
 80048ec:	08004e9d 	.word	0x08004e9d
 80048f0:	08004e9d 	.word	0x08004e9d
 80048f4:	08004e9d 	.word	0x08004e9d
 80048f8:	08004e9d 	.word	0x08004e9d
 80048fc:	08004e9d 	.word	0x08004e9d
 8004900:	08004e9d 	.word	0x08004e9d
 8004904:	08004e9d 	.word	0x08004e9d
 8004908:	080049f1 	.word	0x080049f1
 800490c:	08004e9d 	.word	0x08004e9d
 8004910:	08004e9d 	.word	0x08004e9d
 8004914:	08004e9d 	.word	0x08004e9d
 8004918:	08004e9d 	.word	0x08004e9d
 800491c:	08004e9d 	.word	0x08004e9d
 8004920:	08004e9d 	.word	0x08004e9d
 8004924:	08004e9d 	.word	0x08004e9d
 8004928:	08004e9d 	.word	0x08004e9d
 800492c:	08004e9d 	.word	0x08004e9d
 8004930:	08004e9d 	.word	0x08004e9d
 8004934:	08004e9d 	.word	0x08004e9d
 8004938:	08004e9d 	.word	0x08004e9d
 800493c:	08004e9d 	.word	0x08004e9d
 8004940:	08004e9d 	.word	0x08004e9d
 8004944:	08004e9d 	.word	0x08004e9d
 8004948:	08004a0d 	.word	0x08004a0d
 800494c:	08004a29 	.word	0x08004a29
 8004950:	f240 4269 	movw	r2, #1129	; 0x469
 8004954:	4293      	cmp	r3, r2
 8004956:	f300 82a1 	bgt.w	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800495a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800495e:	f6bf aef1 	bge.w	8004744 <_Z31handleSDORequestDownloadBySDOIDt+0xd8>
 8004962:	e29b      	b.n	8004e9c <_Z31handleSDORequestDownloadBySDOIDt+0x830>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::PDU_OD_NodeID>(OD_NodeID_get());
 8004964:	f001 f89c 	bl	8005aa0 <_Z13OD_NodeID_getv>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f002 f866 	bl	8006a44 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800497e:	e295      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::PDU_OD_NodeStatus>(OD_NodeStatus_get());
 8004980:	f001 f8aa 	bl	8005ad8 <_Z17OD_NodeStatus_getv>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f002 f86d 	bl	8006a6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800499a:	e287      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::PDU_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 800499c:	f001 f8b8 	bl	8005b10 <_Z22OD_ProtocolVersion_getv>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 f874 	bl	8006a98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80049b6:	e279      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::PDU_OD_StackVersion>(OD_StackVersion_get());
 80049b8:	f001 f8c6 	bl	8005b48 <_Z19OD_StackVersion_getv>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f002 f87b 	bl	8006ac2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80049d2:	e26b      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::PDU_OD_DbcVersion>(OD_DbcVersion_get());
 80049d4:	f001 f8d4 	bl	8005b80 <_Z17OD_DbcVersion_getv>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f002 f882 	bl	8006aec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80049ee:	e25d      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::PDU_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80049f0:	f001 f8e2 	bl	8005bb8 <_Z24OD_HeartbeatInterval_getv>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f002 f889 	bl	8006b16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a0a:	e24f      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::PDU_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004a0c:	f001 f90c 	bl	8005c28 <_Z21OD_SendOdOnBootup_getv>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461a      	mov	r2, r3
 8004a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f002 f890 	bl	8006b40 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a26:	e241      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::PDU_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004a28:	f001 f936 	bl	8005c98 <_Z26OD_OdEntrySendInterval_getv>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 f897 	bl	8006b6a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a42:	e233      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::PDU_OD_CpuUsage>(OD_CpuUsage_get());
 8004a44:	f001 f960 	bl	8005d08 <_Z15OD_CpuUsage_getv>
 8004a48:	eef0 7a40 	vmov.f32	s15, s0
 8004a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a50:	eeb0 0a67 	vmov.f32	s0, s15
 8004a54:	4618      	mov	r0, r3
 8004a56:	f002 f89d 	bl	8006b94 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a60:	e224      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::PDU_OD_MemFree>(OD_MemFree_get());
 8004a62:	f001 f98b 	bl	8005d7c <_Z14OD_MemFree_getv>
 8004a66:	4602      	mov	r2, r0
 8004a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f002 f8a7 	bl	8006bc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a7a:	e217      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::PDU_OD_BoardTemp>(OD_BoardTemp_get());
 8004a7c:	f001 f9b6 	bl	8005dec <_Z16OD_BoardTemp_getv>
 8004a80:	eef0 7a40 	vmov.f32	s15, s0
 8004a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a88:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f002 f8ac 	bl	8006bea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004a98:	e208      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::PDU_OD_InputVoltage>(OD_InputVoltage_get());
 8004a9a:	f001 f9e1 	bl	8005e60 <_Z19OD_InputVoltage_getv>
 8004a9e:	eef0 7a40 	vmov.f32	s15, s0
 8004aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 f8b4 	bl	8006c18 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ab6:	e1f9      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::PDU_OD_runtime>(OD_runtime_get());
 8004ab8:	f001 fa0c 	bl	8005ed4 <_Z14OD_runtime_getv>
 8004abc:	4602      	mov	r2, r0
 8004abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f002 f8be 	bl	8006c46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ad0:	e1ec      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::PDU_OD_SdcIn>(OD_SdcIn_get());
 8004ad2:	f001 fa1b 	bl	8005f0c <_Z12OD_SdcIn_getv>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 f8c4 	bl	8006c6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004aec:	e1de      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::PDU_OD_SdcOut>(OD_SdcOut_get());
 8004aee:	f001 fa29 	bl	8005f44 <_Z13OD_SdcOut_getv>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f002 f8cb 	bl	8006c98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b08:	e1d0      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::PDU_OD_ChipUID1>(OD_ChipUID1_get());
 8004b0a:	f001 fa37 	bl	8005f7c <_Z15OD_ChipUID1_getv>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004b16:	4608      	mov	r0, r1
 8004b18:	f002 f8d3 	bl	8006cc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b22:	e1c3      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::PDU_OD_ChipUID2>(OD_ChipUID2_get());
 8004b24:	f001 fa4a 	bl	8005fbc <_Z15OD_ChipUID2_getv>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004b30:	4608      	mov	r0, r1
 8004b32:	f002 f8df 	bl	8006cf4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b3c:	e1b6      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::PDU_OD_BuildDate>(OD_BuildDate_get());
 8004b3e:	f001 fa5d 	bl	8005ffc <_Z16OD_BuildDate_getv>
 8004b42:	4602      	mov	r2, r0
 8004b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f002 f8eb 	bl	8006d26 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b56:	e1a9      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::PDU_OD_BuildTime>(OD_BuildTime_get());
 8004b58:	f001 fa6c 	bl	8006034 <_Z16OD_BuildTime_getv>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f002 f8f2 	bl	8006d4e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b70:	e19c      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8004b72:	f001 fa7b 	bl	800606c <_Z20OD_CAN1_TxErrCnt_getv>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f002 f8f8 	bl	8006d76 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004b8c:	e18e      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8004b8e:	f001 fa89 	bl	80060a4 <_Z20OD_CAN1_RxErrCnt_getv>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f002 f8ff 	bl	8006da0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ba8:	e180      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::PDU_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8004baa:	f001 fa97 	bl	80060dc <_Z25OD_CAN1_lastErrorCode_getv>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f002 f907 	bl	8006dca <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004bc2:	e173      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::PDU_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8004bc4:	f001 faa6 	bl	8006114 <_Z26OD_CAN1_autoErrorReset_getv>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 f90d 	bl	8006df2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004bde:	e165      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8004be0:	f001 fad0 	bl	8006184 <_Z20OD_CAN1_Baudrate_getv>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f002 f914 	bl	8006e1c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004bfa:	e157      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Status>(OD_CAN1_Status_get());
 8004bfc:	f001 fafa 	bl	80061f4 <_Z18OD_CAN1_Status_getv>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f002 f91b 	bl	8006e46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004c16:	e149      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8004c18:	f001 fb08 	bl	800622c <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f002 f923 	bl	8006e70 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004c30:	e13c      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::PDU_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004c32:	f001 fb17 	bl	8006264 <_Z23OD_CAN1_ErrorStatus_getv>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f002 f929 	bl	8006e98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004c4c:	e12e      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8004c4e:	f001 fb25 	bl	800629c <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004c52:	4602      	mov	r2, r0
 8004c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f002 f931 	bl	8006ec2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004c66:	e121      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004c68:	f001 fb34 	bl	80062d4 <_Z20OD_CAN2_TxErrCnt_getv>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c74:	4611      	mov	r1, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f002 f937 	bl	8006eea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004c82:	e113      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8004c84:	f001 fb42 	bl	800630c <_Z20OD_CAN2_RxErrCnt_getv>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f002 f93e 	bl	8006f14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004c9e:	e105      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::PDU_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004ca0:	f001 fb50 	bl	8006344 <_Z25OD_CAN2_lastErrorCode_getv>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f002 f946 	bl	8006f3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004cb8:	e0f8      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::PDU_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8004cba:	f001 fb5f 	bl	800637c <_Z26OD_CAN2_autoErrorReset_getv>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f002 f94c 	bl	8006f66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004cd4:	e0ea      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8004cd6:	f001 fb89 	bl	80063ec <_Z20OD_CAN2_Baudrate_getv>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f002 f953 	bl	8006f90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004cf0:	e0dc      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Status>(OD_CAN2_Status_get());
 8004cf2:	f001 fbb3 	bl	800645c <_Z18OD_CAN2_Status_getv>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f002 f95a 	bl	8006fba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d0c:	e0ce      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004d0e:	f001 fbc1 	bl	8006494 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f002 f962 	bl	8006fe4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d26:	e0c1      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::PDU_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004d28:	f001 fbd0 	bl	80064cc <_Z23OD_CAN2_ErrorStatus_getv>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 f968 	bl	800700c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d42:	e0b3      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004d44:	f001 fbde 	bl	8006504 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 f970 	bl	8007036 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d5c:	e0a6      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x800:    // OD_batterVoltageLow
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageLow>(OD_batterVoltageLow_get());
 8004d5e:	f001 fbed 	bl	800653c <_Z23OD_batterVoltageLow_getv>
 8004d62:	eef0 7a40 	vmov.f32	s15, s0
 8004d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f002 f975 	bl	800705e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d7a:	e097      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x801:    // OD_batterVoltageCritical
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageCritical>(OD_batterVoltageCritical_get());
 8004d7c:	f001 fc18 	bl	80065b0 <_Z28OD_batterVoltageCritical_getv>
 8004d80:	eef0 7a40 	vmov.f32	s15, s0
 8004d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d88:	eeb0 0a67 	vmov.f32	s0, s15
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 f97d 	bl	800708c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d98:	e088      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x802:    // OD_overTempWarn
            msgSdoResp.set<can::signals::PDU_OD_overTempWarn>(OD_overTempWarn_get());
 8004d9a:	f001 fc43 	bl	8006624 <_Z19OD_overTempWarn_getv>
 8004d9e:	eef0 7a40 	vmov.f32	s15, s0
 8004da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004da6:	eeb0 0a67 	vmov.f32	s0, s15
 8004daa:	4618      	mov	r0, r3
 8004dac:	f002 f985 	bl	80070ba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004db6:	e079      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x803:    // OD_overTempCritical
            msgSdoResp.set<can::signals::PDU_OD_overTempCritical>(OD_overTempCritical_get());
 8004db8:	f001 fc6e 	bl	8006698 <_Z23OD_overTempCritical_getv>
 8004dbc:	eef0 7a40 	vmov.f32	s15, s0
 8004dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f002 f98d 	bl	80070e8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004dd4:	e06a      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x850:    // OD_batteryOvercurrent
            msgSdoResp.set<can::signals::PDU_OD_batteryOvercurrent>(OD_batteryOvercurrent_get());
 8004dd6:	f001 fc99 	bl	800670c <_Z25OD_batteryOvercurrent_getv>
 8004dda:	eef0 7a40 	vmov.f32	s15, s0
 8004dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004de2:	eeb0 0a67 	vmov.f32	s0, s15
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 f995 	bl	8007116 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004df2:	e05b      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x900:    // OD_currentReadInterval
            msgSdoResp.set<can::signals::PDU_OD_currentReadInterval>(OD_currentReadInterval_get());
 8004df4:	f001 fcc4 	bl	8006780 <_Z26OD_currentReadInterval_getv>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 f99e 	bl	8007144 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e0e:	e04d      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x901:    // OD_statusSendInterval
            msgSdoResp.set<can::signals::PDU_OD_statusSendInterval>(OD_statusSendInterval_get());
 8004e10:	f001 fcee 	bl	80067f0 <_Z25OD_statusSendInterval_getv>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 f9a5 	bl	800716e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e2a:	e03f      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x902:    // OD_watchdogTimeout
            msgSdoResp.set<can::signals::PDU_OD_watchdogTimeout>(OD_watchdogTimeout_get());
 8004e2c:	f001 fd18 	bl	8006860 <_Z22OD_watchdogTimeout_getv>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f002 f9ac 	bl	8007198 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e46:	e031      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xA00:    // OD_projectXXEnabled
            msgSdoResp.set<can::signals::PDU_OD_projectXXEnabled>(OD_projectXXEnabled_get());
 8004e48:	f001 fd42 	bl	80068d0 <_Z23OD_projectXXEnabled_getv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 f9b3 	bl	80071c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e62:	e023      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xA02:    // OD_LedCommands
            msgSdoResp.set<can::signals::PDU_OD_LedCommands>(OD_LedCommands_get());
 8004e64:	f001 fd6c 	bl	8006940 <_Z18OD_LedCommands_getv>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 f9ba 	bl	80071ec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e7e:	e015      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xB00:    // OD_CoolingPumpEnabled
            msgSdoResp.set<can::signals::PDU_OD_CoolingPumpEnabled>(OD_CoolingPumpEnabled_get());
 8004e80:	f001 fd96 	bl	80069b0 <_Z25OD_CoolingPumpEnabled_getv>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f002 f9c1 	bl	8007216 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e9a:	e007      	b.n	8004eac <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::PDU_SDO_ID>(sdoId);
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f002 f9cb 	bl	8007240 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004eaa:	bf00      	nop
    }

    msgSdoResp.set<can::signals::PDU_SDO_RespCode>(respCode);
 8004eac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 f9d7 	bl	800726a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004ebc:	f107 0308 	add.w	r3, r7, #8
 8004ec0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc f994 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <_Z31handleSDORequestDownloadBySDOIDt+0x878>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	f107 0108 	add.w	r1, r7, #8
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f012 fede 	bl	8017c98 <osMessageQueuePut>
}
 8004edc:	bf00      	nop
 8004ede:	3748      	adds	r7, #72	; 0x48
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	200007c4 	.word	0x200007c4

08004ee8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	2300      	movs	r3, #0
 8004efc:	2208      	movs	r2, #8
 8004efe:	f240 51da 	movw	r1, #1498	; 0x5da
 8004f02:	f7fd fbcf 	bl	80026a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004f0a:	f240 52da 	movw	r2, #1498	; 0x5da
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d000      	beq.n	8004f14 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004f12:	e7fe      	b.n	8004f12 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	331c      	adds	r3, #28
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ffd9 	bl	8004ee8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b0a4      	sub	sp, #144	; 0x90
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::PDU_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8004f48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ffe5 	bl	8004f1e <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::PDU_SDO_Resp> msgSdoResp;
 8004f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fb77 	bl	800464c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::PDU_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    uint16_t sdoId = msgSdoReq.get<can::signals::PDU_SDO_ID>();
 8004f64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 f993 	bl	8007294 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    switch (sdoId) {
 8004f74:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004f78:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004f7c:	f000 8549 	beq.w	8005a12 <_Z22handleSDORequestUploadRK9RxMessage+0xad2>
 8004f80:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004f84:	f300 8560 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004f88:	f640 2202 	movw	r2, #2562	; 0xa02
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	f000 8525 	beq.w	80059dc <_Z22handleSDORequestUploadRK9RxMessage+0xa9c>
 8004f92:	f640 2202 	movw	r2, #2562	; 0xa02
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f300 8556 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004f9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004fa0:	f000 8501 	beq.w	80059a6 <_Z22handleSDORequestUploadRK9RxMessage+0xa66>
 8004fa4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004fa8:	f300 854e 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004fac:	f640 1202 	movw	r2, #2306	; 0x902
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	f000 84dd 	beq.w	8005970 <_Z22handleSDORequestUploadRK9RxMessage+0xa30>
 8004fb6:	f640 1202 	movw	r2, #2306	; 0x902
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	f300 8544 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004fc0:	f640 1201 	movw	r2, #2305	; 0x901
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	f000 84b8 	beq.w	800593a <_Z22handleSDORequestUploadRK9RxMessage+0x9fa>
 8004fca:	f640 1201 	movw	r2, #2305	; 0x901
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f300 853a 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004fd4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004fd8:	f000 8494 	beq.w	8005904 <_Z22handleSDORequestUploadRK9RxMessage+0x9c4>
 8004fdc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004fe0:	f300 8532 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004fe4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004fe8:	f000 845e 	beq.w	80058a8 <_Z22handleSDORequestUploadRK9RxMessage+0x968>
 8004fec:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004ff0:	f300 852a 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004ff4:	f640 0203 	movw	r2, #2051	; 0x803
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	f300 8525 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005002:	da07      	bge.n	8005014 <_Z22handleSDORequestUploadRK9RxMessage+0xd4>
 8005004:	2b21      	cmp	r3, #33	; 0x21
 8005006:	f300 811b 	bgt.w	8005240 <_Z22handleSDORequestUploadRK9RxMessage+0x300>
 800500a:	2b00      	cmp	r3, #0
 800500c:	f300 80ce 	bgt.w	80051ac <_Z22handleSDORequestUploadRK9RxMessage+0x26c>
 8005010:	f000 bd1a 	b.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8005014:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005018:	2b03      	cmp	r3, #3
 800501a:	f200 8515 	bhi.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <_Z22handleSDORequestUploadRK9RxMessage+0xe4>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005739 	.word	0x08005739
 8005028:	08005795 	.word	0x08005795
 800502c:	080057f1 	.word	0x080057f1
 8005030:	0800584d 	.word	0x0800584d
 8005034:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005038:	2b59      	cmp	r3, #89	; 0x59
 800503a:	f200 8505 	bhi.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <_Z22handleSDORequestUploadRK9RxMessage+0x104>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005383 	.word	0x08005383
 8005048:	080053a1 	.word	0x080053a1
 800504c:	080053bb 	.word	0x080053bb
 8005050:	080053d9 	.word	0x080053d9
 8005054:	080053f7 	.word	0x080053f7
 8005058:	08005411 	.word	0x08005411
 800505c:	0800542d 	.word	0x0800542d
 8005060:	08005a49 	.word	0x08005a49
 8005064:	08005a49 	.word	0x08005a49
 8005068:	08005a49 	.word	0x08005a49
 800506c:	08005a49 	.word	0x08005a49
 8005070:	08005a49 	.word	0x08005a49
 8005074:	08005a49 	.word	0x08005a49
 8005078:	08005a49 	.word	0x08005a49
 800507c:	08005a49 	.word	0x08005a49
 8005080:	08005a49 	.word	0x08005a49
 8005084:	08005449 	.word	0x08005449
 8005088:	08005463 	.word	0x08005463
 800508c:	08005a49 	.word	0x08005a49
 8005090:	08005a49 	.word	0x08005a49
 8005094:	08005a49 	.word	0x08005a49
 8005098:	08005a49 	.word	0x08005a49
 800509c:	08005a49 	.word	0x08005a49
 80050a0:	08005a49 	.word	0x08005a49
 80050a4:	08005a49 	.word	0x08005a49
 80050a8:	08005a49 	.word	0x08005a49
 80050ac:	08005a49 	.word	0x08005a49
 80050b0:	08005a49 	.word	0x08005a49
 80050b4:	08005a49 	.word	0x08005a49
 80050b8:	08005a49 	.word	0x08005a49
 80050bc:	08005a49 	.word	0x08005a49
 80050c0:	08005a49 	.word	0x08005a49
 80050c4:	0800547d 	.word	0x0800547d
 80050c8:	08005497 	.word	0x08005497
 80050cc:	08005a49 	.word	0x08005a49
 80050d0:	08005a49 	.word	0x08005a49
 80050d4:	08005a49 	.word	0x08005a49
 80050d8:	08005a49 	.word	0x08005a49
 80050dc:	08005a49 	.word	0x08005a49
 80050e0:	08005a49 	.word	0x08005a49
 80050e4:	08005a49 	.word	0x08005a49
 80050e8:	08005a49 	.word	0x08005a49
 80050ec:	08005a49 	.word	0x08005a49
 80050f0:	08005a49 	.word	0x08005a49
 80050f4:	08005a49 	.word	0x08005a49
 80050f8:	08005a49 	.word	0x08005a49
 80050fc:	08005a49 	.word	0x08005a49
 8005100:	08005a49 	.word	0x08005a49
 8005104:	08005a49 	.word	0x08005a49
 8005108:	08005a49 	.word	0x08005a49
 800510c:	08005a49 	.word	0x08005a49
 8005110:	08005a49 	.word	0x08005a49
 8005114:	08005a49 	.word	0x08005a49
 8005118:	08005a49 	.word	0x08005a49
 800511c:	08005a49 	.word	0x08005a49
 8005120:	08005a49 	.word	0x08005a49
 8005124:	08005a49 	.word	0x08005a49
 8005128:	08005a49 	.word	0x08005a49
 800512c:	08005a49 	.word	0x08005a49
 8005130:	08005a49 	.word	0x08005a49
 8005134:	08005a49 	.word	0x08005a49
 8005138:	08005a49 	.word	0x08005a49
 800513c:	08005a49 	.word	0x08005a49
 8005140:	08005a49 	.word	0x08005a49
 8005144:	080054b1 	.word	0x080054b1
 8005148:	080054cd 	.word	0x080054cd
 800514c:	080054e9 	.word	0x080054e9
 8005150:	08005503 	.word	0x08005503
 8005154:	08005539 	.word	0x08005539
 8005158:	08005a49 	.word	0x08005a49
 800515c:	08005589 	.word	0x08005589
 8005160:	080055a5 	.word	0x080055a5
 8005164:	080055bf 	.word	0x080055bf
 8005168:	080055db 	.word	0x080055db
 800516c:	08005a49 	.word	0x08005a49
 8005170:	08005a49 	.word	0x08005a49
 8005174:	08005a49 	.word	0x08005a49
 8005178:	08005a49 	.word	0x08005a49
 800517c:	08005a49 	.word	0x08005a49
 8005180:	08005a49 	.word	0x08005a49
 8005184:	080055f5 	.word	0x080055f5
 8005188:	08005611 	.word	0x08005611
 800518c:	0800562d 	.word	0x0800562d
 8005190:	08005647 	.word	0x08005647
 8005194:	0800567d 	.word	0x0800567d
 8005198:	08005a49 	.word	0x08005a49
 800519c:	080056cd 	.word	0x080056cd
 80051a0:	080056e9 	.word	0x080056e9
 80051a4:	08005703 	.word	0x08005703
 80051a8:	0800571f 	.word	0x0800571f
 80051ac:	3b01      	subs	r3, #1
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	f200 844a 	bhi.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <_Z22handleSDORequestUploadRK9RxMessage+0x27c>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	08005255 	.word	0x08005255
 80051c0:	08005271 	.word	0x08005271
 80051c4:	0800528d 	.word	0x0800528d
 80051c8:	080052a9 	.word	0x080052a9
 80051cc:	080052c5 	.word	0x080052c5
 80051d0:	08005a49 	.word	0x08005a49
 80051d4:	08005a49 	.word	0x08005a49
 80051d8:	08005a49 	.word	0x08005a49
 80051dc:	08005a49 	.word	0x08005a49
 80051e0:	08005a49 	.word	0x08005a49
 80051e4:	08005a49 	.word	0x08005a49
 80051e8:	08005a49 	.word	0x08005a49
 80051ec:	08005a49 	.word	0x08005a49
 80051f0:	08005a49 	.word	0x08005a49
 80051f4:	08005a49 	.word	0x08005a49
 80051f8:	080052e1 	.word	0x080052e1
 80051fc:	08005a49 	.word	0x08005a49
 8005200:	08005a49 	.word	0x08005a49
 8005204:	08005a49 	.word	0x08005a49
 8005208:	08005a49 	.word	0x08005a49
 800520c:	08005a49 	.word	0x08005a49
 8005210:	08005a49 	.word	0x08005a49
 8005214:	08005a49 	.word	0x08005a49
 8005218:	08005a49 	.word	0x08005a49
 800521c:	08005a49 	.word	0x08005a49
 8005220:	08005a49 	.word	0x08005a49
 8005224:	08005a49 	.word	0x08005a49
 8005228:	08005a49 	.word	0x08005a49
 800522c:	08005a49 	.word	0x08005a49
 8005230:	08005a49 	.word	0x08005a49
 8005234:	08005a49 	.word	0x08005a49
 8005238:	08005317 	.word	0x08005317
 800523c:	0800534d 	.word	0x0800534d
 8005240:	f240 4269 	movw	r2, #1129	; 0x469
 8005244:	4293      	cmp	r3, r2
 8005246:	f300 83ff 	bgt.w	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 800524a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800524e:	f6bf aef1 	bge.w	8005034 <_Z22handleSDORequestUploadRK9RxMessage+0xf4>
 8005252:	e3f9      	b.n	8005a48 <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005254:	2303      	movs	r3, #3
 8005256:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_NodeID>(OD_NodeID_get());
 800525a:	f000 fc21 	bl	8005aa0 <_Z13OD_NodeID_getv>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fbeb 	bl	8006a44 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800526e:	e3f4      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005270:	2303      	movs	r3, #3
 8005272:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_NodeStatus>(OD_NodeStatus_get());
 8005276:	f000 fc2f 	bl	8005ad8 <_Z17OD_NodeStatus_getv>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f001 fbf2 	bl	8006a6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800528a:	e3e6      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800528c:	2303      	movs	r3, #3
 800528e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8005292:	f000 fc3d 	bl	8005b10 <_Z22OD_ProtocolVersion_getv>
 8005296:	4603      	mov	r3, r0
 8005298:	461a      	mov	r2, r3
 800529a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529e:	4611      	mov	r1, r2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fbf9 	bl	8006a98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 80052a6:	e3d8      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_StackVersion>(OD_StackVersion_get());
 80052ae:	f000 fc4b 	bl	8005b48 <_Z19OD_StackVersion_getv>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 fc00 	bl	8006ac2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80052c2:	e3ca      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_DbcVersion>(OD_DbcVersion_get());
 80052ca:	f000 fc59 	bl	8005b80 <_Z17OD_DbcVersion_getv>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 fc07 	bl	8006aec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80052de:	e3bc      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_HeartbeatInterval>();
 80052e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 ffe7 	bl	80072b8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals24PDU_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80052f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fc7b 	bl	8005bf0 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8005300:	f000 fc5a 	bl	8005bb8 <_Z24OD_HeartbeatInterval_getv>
 8005304:	4603      	mov	r3, r0
 8005306:	461a      	mov	r2, r3
 8005308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fc01 	bl	8006b16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8005314:	e3a1      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_SendOdOnBootup>();
 8005316:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800531a:	4618      	mov	r0, r3
 800531c:	f001 ffde 	bl	80072dc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals21PDU_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8005326:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fc98 	bl	8005c60 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8005336:	f000 fc77 	bl	8005c28 <_Z21OD_SendOdOnBootup_getv>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fbfb 	bl	8006b40 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 800534a:	e386      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_OdEntrySendInterval>();
 800534c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005350:	4618      	mov	r0, r3
 8005352:	f001 ffd5 	bl	8007300 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8005356:	4603      	mov	r3, r0
 8005358:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 800535c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fcb5 	bl	8005cd0 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 800536c:	f000 fc94 	bl	8005c98 <_Z26OD_OdEntrySendInterval_getv>
 8005370:	4603      	mov	r3, r0
 8005372:	461a      	mov	r2, r3
 8005374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fbf5 	bl	8006b6a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8005380:	e36b      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005382:	2303      	movs	r3, #3
 8005384:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CpuUsage>(OD_CpuUsage_get());
 8005388:	f000 fcbe 	bl	8005d08 <_Z15OD_CpuUsage_getv>
 800538c:	eef0 7a40 	vmov.f32	s15, s0
 8005390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005394:	eeb0 0a67 	vmov.f32	s0, s15
 8005398:	4618      	mov	r0, r3
 800539a:	f001 fbfb 	bl	8006b94 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 800539e:	e35c      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_MemFree>(OD_MemFree_get());
 80053a6:	f000 fce9 	bl	8005d7c <_Z14OD_MemFree_getv>
 80053aa:	4602      	mov	r2, r0
 80053ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 fc05 	bl	8006bc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80053b8:	e34f      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BoardTemp>(OD_BoardTemp_get());
 80053c0:	f000 fd14 	bl	8005dec <_Z16OD_BoardTemp_getv>
 80053c4:	eef0 7a40 	vmov.f32	s15, s0
 80053c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053cc:	eeb0 0a67 	vmov.f32	s0, s15
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 fc0a 	bl	8006bea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 80053d6:	e340      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80053d8:	2303      	movs	r3, #3
 80053da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_InputVoltage>(OD_InputVoltage_get());
 80053de:	f000 fd3f 	bl	8005e60 <_Z19OD_InputVoltage_getv>
 80053e2:	eef0 7a40 	vmov.f32	s15, s0
 80053e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ea:	eeb0 0a67 	vmov.f32	s0, s15
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fc12 	bl	8006c18 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80053f4:	e331      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_runtime>(OD_runtime_get());
 80053fc:	f000 fd6a 	bl	8005ed4 <_Z14OD_runtime_getv>
 8005400:	4602      	mov	r2, r0
 8005402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fc1c 	bl	8006c46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>
            break;
 800540e:	e324      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005410:	2303      	movs	r3, #3
 8005412:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SdcIn>(OD_SdcIn_get());
 8005416:	f000 fd79 	bl	8005f0c <_Z12OD_SdcIn_getv>
 800541a:	4603      	mov	r3, r0
 800541c:	461a      	mov	r2, r3
 800541e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fc22 	bl	8006c6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>
            break;
 800542a:	e316      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800542c:	2303      	movs	r3, #3
 800542e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SdcOut>(OD_SdcOut_get());
 8005432:	f000 fd87 	bl	8005f44 <_Z13OD_SdcOut_getv>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f001 fc29 	bl	8006c98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8005446:	e308      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005448:	2303      	movs	r3, #3
 800544a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ChipUID1>(OD_ChipUID1_get());
 800544e:	f000 fd95 	bl	8005f7c <_Z15OD_ChipUID1_getv>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800545a:	4608      	mov	r0, r1
 800545c:	f001 fc31 	bl	8006cc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8005460:	e2fb      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005462:	2303      	movs	r3, #3
 8005464:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ChipUID2>(OD_ChipUID2_get());
 8005468:	f000 fda8 	bl	8005fbc <_Z15OD_ChipUID2_getv>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005474:	4608      	mov	r0, r1
 8005476:	f001 fc3d 	bl	8006cf4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 800547a:	e2ee      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800547c:	2303      	movs	r3, #3
 800547e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BuildDate>(OD_BuildDate_get());
 8005482:	f000 fdbb 	bl	8005ffc <_Z16OD_BuildDate_getv>
 8005486:	4602      	mov	r2, r0
 8005488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f001 fc49 	bl	8006d26 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8005494:	e2e1      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005496:	2303      	movs	r3, #3
 8005498:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BuildTime>(OD_BuildTime_get());
 800549c:	f000 fdca 	bl	8006034 <_Z16OD_BuildTime_getv>
 80054a0:	4602      	mov	r2, r0
 80054a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fc50 	bl	8006d4e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 80054ae:	e2d4      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80054b6:	f000 fdd9 	bl	800606c <_Z20OD_CAN1_TxErrCnt_getv>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fc56 	bl	8006d76 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 80054ca:	e2c6      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80054d2:	f000 fde7 	bl	80060a4 <_Z20OD_CAN1_RxErrCnt_getv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fc5d 	bl	8006da0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 80054e6:	e2b8      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80054ee:	f000 fdf5 	bl	80060dc <_Z25OD_CAN1_lastErrorCode_getv>
 80054f2:	4602      	mov	r2, r0
 80054f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fc65 	bl	8006dca <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005500:	e2ab      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CAN1_autoErrorReset>();
 8005502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005506:	4618      	mov	r0, r3
 8005508:	f001 ff0c 	bl	8007324 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8005512:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fe18 	bl	800614c <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005522:	f000 fdf7 	bl	8006114 <_Z26OD_CAN1_autoErrorReset_getv>
 8005526:	4603      	mov	r3, r0
 8005528:	461a      	mov	r2, r3
 800552a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fc5e 	bl	8006df2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005536:	e290      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_CAN1_Baudrate>();
 8005538:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800553c:	4618      	mov	r0, r3
 800553e:	f001 ff03 	bl	8007348 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8005542:	4603      	mov	r3, r0
 8005544:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8005548:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800554c:	2b7c      	cmp	r3, #124	; 0x7c
 800554e:	d904      	bls.n	800555a <_Z22handleSDORequestUploadRK9RxMessage+0x61a>
 8005550:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005558:	d903      	bls.n	8005562 <_Z22handleSDORequestUploadRK9RxMessage+0x622>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800555a:	2305      	movs	r3, #5
 800555c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005560:	e007      	b.n	8005572 <_Z22handleSDORequestUploadRK9RxMessage+0x632>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8005562:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fe28 	bl	80061bc <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8005572:	f000 fe07 	bl	8006184 <_Z20OD_CAN1_Baudrate_getv>
 8005576:	4603      	mov	r3, r0
 8005578:	461a      	mov	r2, r3
 800557a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fc4b 	bl	8006e1c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8005586:	e268      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005588:	2303      	movs	r3, #3
 800558a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Status>(OD_CAN1_Status_get());
 800558e:	f000 fe31 	bl	80061f4 <_Z18OD_CAN1_Status_getv>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800559a:	4611      	mov	r1, r2
 800559c:	4618      	mov	r0, r3
 800559e:	f001 fc52 	bl	8006e46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 80055a2:	e25a      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80055aa:	f000 fe3f 	bl	800622c <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fc5a 	bl	8006e70 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80055bc:	e24d      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80055be:	2303      	movs	r3, #3
 80055c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80055c4:	f000 fe4e 	bl	8006264 <_Z23OD_CAN1_ErrorStatus_getv>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 fc60 	bl	8006e98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80055d8:	e23f      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80055da:	2303      	movs	r3, #3
 80055dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 80055e0:	f000 fe5c 	bl	800629c <_Z29OD_CAN1_DelayedTxMessages_getv>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f001 fc68 	bl	8006ec2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80055f2:	e232      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80055fa:	f000 fe6b 	bl	80062d4 <_Z20OD_CAN2_TxErrCnt_getv>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fc6e 	bl	8006eea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 800560e:	e224      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005610:	2303      	movs	r3, #3
 8005612:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005616:	f000 fe79 	bl	800630c <_Z20OD_CAN2_RxErrCnt_getv>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fc75 	bl	8006f14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 800562a:	e216      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800562c:	2303      	movs	r3, #3
 800562e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005632:	f000 fe87 	bl	8006344 <_Z25OD_CAN2_lastErrorCode_getv>
 8005636:	4602      	mov	r2, r0
 8005638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f001 fc7d 	bl	8006f3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005644:	e209      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CAN2_autoErrorReset>();
 8005646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fe8e 	bl	800736c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8005656:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800565a:	4618      	mov	r0, r3
 800565c:	f000 feaa 	bl	80063b4 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005666:	f000 fe89 	bl	800637c <_Z26OD_CAN2_autoErrorReset_getv>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005672:	4611      	mov	r1, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fc76 	bl	8006f66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 800567a:	e1ee      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_CAN2_Baudrate>();
 800567c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fe85 	bl	8007390 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8005686:	4603      	mov	r3, r0
 8005688:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 800568c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005690:	2b7c      	cmp	r3, #124	; 0x7c
 8005692:	d904      	bls.n	800569e <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
 8005694:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800569c:	d903      	bls.n	80056a6 <_Z22handleSDORequestUploadRK9RxMessage+0x766>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800569e:	2305      	movs	r3, #5
 80056a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80056a4:	e007      	b.n	80056b6 <_Z22handleSDORequestUploadRK9RxMessage+0x776>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 80056a6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 feba 	bl	8006424 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80056b6:	f000 fe99 	bl	80063ec <_Z20OD_CAN2_Baudrate_getv>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c2:	4611      	mov	r1, r2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fc63 	bl	8006f90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 80056ca:	e1c6      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Status>(OD_CAN2_Status_get());
 80056d2:	f000 fec3 	bl	800645c <_Z18OD_CAN2_Status_getv>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fc6a 	bl	8006fba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 80056e6:	e1b8      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 80056ee:	f000 fed1 	bl	8006494 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 fc72 	bl	8006fe4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005700:	e1ab      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005702:	2303      	movs	r3, #3
 8005704:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005708:	f000 fee0 	bl	80064cc <_Z23OD_CAN2_ErrorStatus_getv>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fc78 	bl	800700c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 800571c:	e19d      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800571e:	2303      	movs	r3, #3
 8005720:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005724:	f000 feee 	bl	8006504 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005728:	4602      	mov	r2, r0
 800572a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fc80 	bl	8007036 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005736:	e190      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x800: {   // OD_batterVoltageLow
            float value = msgSdoReq.get<can::signals::PDU_OD_batterVoltageLow>();
 8005738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fe39 	bl	80073b4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_batterVoltageLowEEENT_8dataTypeEv>
 8005742:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.0f || value > 655.35f) {
 8005746:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800574a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d408      	bmi.n	8005766 <_Z22handleSDORequestUploadRK9RxMessage+0x826>
 8005754:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005758:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8005a94 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 800575c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	dd03      	ble.n	800576e <_Z22handleSDORequestUploadRK9RxMessage+0x82e>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005766:	2305      	movs	r3, #5
 8005768:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800576c:	e006      	b.n	800577c <_Z22handleSDORequestUploadRK9RxMessage+0x83c>
            }
            else {
                OD_batterVoltageLow_set(value);
 800576e:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8005772:	f000 ff01 	bl	8006578 <_Z23OD_batterVoltageLow_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageLow>(OD_batterVoltageLow_get());
 800577c:	f000 fede 	bl	800653c <_Z23OD_batterVoltageLow_getv>
 8005780:	eef0 7a40 	vmov.f32	s15, s0
 8005784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005788:	eeb0 0a67 	vmov.f32	s0, s15
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fc66 	bl	800705e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>
            break;
 8005792:	e162      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x801: {   // OD_batterVoltageCritical
            float value = msgSdoReq.get<can::signals::PDU_OD_batterVoltageCritical>();
 8005794:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005798:	4618      	mov	r0, r3
 800579a:	f001 fe1f 	bl	80073dc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals28PDU_OD_batterVoltageCriticalEEENT_8dataTypeEv>
 800579e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
if (value < 0.0f || value > 655.35f) {
 80057a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80057a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	d408      	bmi.n	80057c2 <_Z22handleSDORequestUploadRK9RxMessage+0x882>
 80057b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80057b4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005a94 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 80057b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c0:	dd03      	ble.n	80057ca <_Z22handleSDORequestUploadRK9RxMessage+0x88a>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80057c2:	2305      	movs	r3, #5
 80057c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80057c8:	e006      	b.n	80057d8 <_Z22handleSDORequestUploadRK9RxMessage+0x898>
            }
            else {
                OD_batterVoltageCritical_set(value);
 80057ca:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 80057ce:	f000 ff0d 	bl	80065ec <_Z28OD_batterVoltageCritical_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageCritical>(OD_batterVoltageCritical_get());
 80057d8:	f000 feea 	bl	80065b0 <_Z28OD_batterVoltageCritical_getv>
 80057dc:	eef0 7a40 	vmov.f32	s15, s0
 80057e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057e4:	eeb0 0a67 	vmov.f32	s0, s15
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fc4f 	bl	800708c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>
            break;
 80057ee:	e134      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x802: {   // OD_overTempWarn
            float value = msgSdoReq.get<can::signals::PDU_OD_overTempWarn>();
 80057f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fe05 	bl	8007404 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals19PDU_OD_overTempWarnEEENT_8dataTypeEv>
 80057fa:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 0.0f || value > 6553.5f) {
 80057fe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580a:	d408      	bmi.n	800581e <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
 800580c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005810:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8005a98 <_Z22handleSDORequestUploadRK9RxMessage+0xb58>
 8005814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	dd03      	ble.n	8005826 <_Z22handleSDORequestUploadRK9RxMessage+0x8e6>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800581e:	2305      	movs	r3, #5
 8005820:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005824:	e006      	b.n	8005834 <_Z22handleSDORequestUploadRK9RxMessage+0x8f4>
            }
            else {
                OD_overTempWarn_set(value);
 8005826:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800582a:	f000 ff19 	bl	8006660 <_Z19OD_overTempWarn_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_overTempWarn>(OD_overTempWarn_get());
 8005834:	f000 fef6 	bl	8006624 <_Z19OD_overTempWarn_getv>
 8005838:	eef0 7a40 	vmov.f32	s15, s0
 800583c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005840:	eeb0 0a67 	vmov.f32	s0, s15
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fc38 	bl	80070ba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>
            break;
 800584a:	e106      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x803: {   // OD_overTempCritical
            float value = msgSdoReq.get<can::signals::PDU_OD_overTempCritical>();
 800584c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005850:	4618      	mov	r0, r3
 8005852:	f001 fdeb 	bl	800742c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_overTempCriticalEEENT_8dataTypeEv>
 8005856:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
if (value < 0.0f || value > 6553.5f) {
 800585a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800585e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d408      	bmi.n	800587a <_Z22handleSDORequestUploadRK9RxMessage+0x93a>
 8005868:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800586c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005a98 <_Z22handleSDORequestUploadRK9RxMessage+0xb58>
 8005870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	dd03      	ble.n	8005882 <_Z22handleSDORequestUploadRK9RxMessage+0x942>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 800587a:	2305      	movs	r3, #5
 800587c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005880:	e006      	b.n	8005890 <_Z22handleSDORequestUploadRK9RxMessage+0x950>
            }
            else {
                OD_overTempCritical_set(value);
 8005882:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8005886:	f000 ff25 	bl	80066d4 <_Z23OD_overTempCritical_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800588a:	2300      	movs	r3, #0
 800588c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_overTempCritical>(OD_overTempCritical_get());
 8005890:	f000 ff02 	bl	8006698 <_Z23OD_overTempCritical_getv>
 8005894:	eef0 7a40 	vmov.f32	s15, s0
 8005898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800589c:	eeb0 0a67 	vmov.f32	s0, s15
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fc21 	bl	80070e8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>
            break;
 80058a6:	e0d8      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x850: {   // OD_batteryOvercurrent
            float value = msgSdoReq.get<can::signals::PDU_OD_batteryOvercurrent>();
 80058a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fdd1 	bl	8007454 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_batteryOvercurrentEEENT_8dataTypeEv>
 80058b2:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
if (value < 0.0f || value > 655.35f) {
 80058b6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	d408      	bmi.n	80058d6 <_Z22handleSDORequestUploadRK9RxMessage+0x996>
 80058c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058c8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005a94 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 80058cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d4:	dd03      	ble.n	80058de <_Z22handleSDORequestUploadRK9RxMessage+0x99e>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80058d6:	2305      	movs	r3, #5
 80058d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80058dc:	e006      	b.n	80058ec <_Z22handleSDORequestUploadRK9RxMessage+0x9ac>
            }
            else {
                OD_batteryOvercurrent_set(value);
 80058de:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80058e2:	f000 ff31 	bl	8006748 <_Z25OD_batteryOvercurrent_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batteryOvercurrent>(OD_batteryOvercurrent_get());
 80058ec:	f000 ff0e 	bl	800670c <_Z25OD_batteryOvercurrent_getv>
 80058f0:	eef0 7a40 	vmov.f32	s15, s0
 80058f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058f8:	eeb0 0a67 	vmov.f32	s0, s15
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fc0a 	bl	8007116 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>
            break;
 8005902:	e0aa      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x900: {   // OD_currentReadInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_currentReadInterval>();
 8005904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005908:	4618      	mov	r0, r3
 800590a:	f001 fdb7 	bl	800747c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_currentReadIntervalEEENT_8dataTypeEv>
 800590e:	4603      	mov	r3, r0
 8005910:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                OD_currentReadInterval_set(value);
 8005914:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff4d 	bl	80067b8 <_Z26OD_currentReadInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_currentReadInterval>(OD_currentReadInterval_get());
 8005924:	f000 ff2c 	bl	8006780 <_Z26OD_currentReadInterval_getv>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fc06 	bl	8007144 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>
            break;
 8005938:	e08f      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x901: {   // OD_statusSendInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_statusSendInterval>();
 800593a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fdae 	bl	80074a0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_statusSendIntervalEEENT_8dataTypeEv>
 8005944:	4603      	mov	r3, r0
 8005946:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                OD_statusSendInterval_set(value);
 800594a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ff6a 	bl	8006828 <_Z25OD_statusSendInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005954:	2300      	movs	r3, #0
 8005956:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_statusSendInterval>(OD_statusSendInterval_get());
 800595a:	f000 ff49 	bl	80067f0 <_Z25OD_statusSendInterval_getv>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 fc00 	bl	800716e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>
            break;
 800596e:	e074      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x902: {   // OD_watchdogTimeout
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_watchdogTimeout>();
 8005970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fda5 	bl	80074c4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals22PDU_OD_watchdogTimeoutEEENT_8dataTypeEv>
 800597a:	4603      	mov	r3, r0
 800597c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                OD_watchdogTimeout_set(value);
 8005980:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005984:	4618      	mov	r0, r3
 8005986:	f000 ff87 	bl	8006898 <_Z22OD_watchdogTimeout_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800598a:	2300      	movs	r3, #0
 800598c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_watchdogTimeout>(OD_watchdogTimeout_get());
 8005990:	f000 ff66 	bl	8006860 <_Z22OD_watchdogTimeout_getv>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800599c:	4611      	mov	r1, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fbfa 	bl	8007198 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>
            break;
 80059a4:	e059      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xA00: {   // OD_projectXXEnabled
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_projectXXEnabled>();
 80059a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 fd9c 	bl	80074e8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_projectXXEnabledEEENT_8dataTypeEv>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                OD_projectXXEnabled_set(value);
 80059b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 ffa4 	bl	8006908 <_Z23OD_projectXXEnabled_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_projectXXEnabled>(OD_projectXXEnabled_get());
 80059c6:	f000 ff83 	bl	80068d0 <_Z23OD_projectXXEnabled_getv>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fbf4 	bl	80071c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>
            break;
 80059da:	e03e      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xA02: {   // OD_LedCommands
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_LedCommands>();
 80059dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fd93 	bl	800750c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals18PDU_OD_LedCommandsEEENT_8dataTypeEv>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                OD_LedCommands_set(value);
 80059ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 ffc1 	bl	8006978 <_Z18OD_LedCommands_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_LedCommands>(OD_LedCommands_get());
 80059fc:	f000 ffa0 	bl	8006940 <_Z18OD_LedCommands_getv>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 fbee 	bl	80071ec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>
            break;
 8005a10:	e023      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xB00: {   // OD_CoolingPumpEnabled
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CoolingPumpEnabled>();
 8005a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fd8a 	bl	8007530 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_CoolingPumpEnabledEEENT_8dataTypeEv>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                OD_CoolingPumpEnabled_set(value);
 8005a22:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 ffde 	bl	80069e8 <_Z25OD_CoolingPumpEnabled_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CoolingPumpEnabled>(OD_CoolingPumpEnabled_get());
 8005a32:	f000 ffbd 	bl	80069b0 <_Z25OD_CoolingPumpEnabled_getv>
 8005a36:	4603      	mov	r3, r0
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fbe8 	bl	8007216 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>
            break;
 8005a46:	e008      	b.n	8005a5a <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::PDU_SDO_ID>(sdoId);
 8005a48:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 fbf4 	bl	8007240 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005a58:	bf00      	nop
    }

    msgSdoResp.set<can::signals::PDU_SDO_RespCode>(respCode);
 8005a5a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8005a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a62:	4611      	mov	r1, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fc00 	bl	800726a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8005a6a:	f107 0308 	add.w	r3, r7, #8
 8005a6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005a72:	2200      	movs	r2, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fb fbbd 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <_Z22handleSDORequestUploadRK9RxMessage+0xb5c>)
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	f107 0108 	add.w	r1, r7, #8
 8005a82:	2300      	movs	r3, #0
 8005a84:	2200      	movs	r2, #0
 8005a86:	f012 f907 	bl	8017c98 <osMessageQueuePut>
}
 8005a8a:	bf00      	nop
 8005a8c:	3790      	adds	r7, #144	; 0x90
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	4423d666 	.word	0x4423d666
 8005a98:	45cccc00 	.word	0x45cccc00
 8005a9c:	200007c4 	.word	0x200007c4

08005aa0 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <_Z13OD_NodeID_getv+0x30>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f011 feb7 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8005ab4:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <_Z13OD_NodeID_getv+0x34>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <_Z13OD_NodeID_getv+0x30>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f011 fefa 	bl	80178b8 <osMutexRelease>
    return value;
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000840 	.word	0x20000840
 8005ad4:	200007d3 	.word	0x200007d3

08005ad8 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <_Z17OD_NodeStatus_getv+0x30>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f011 fe9b 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <_Z17OD_NodeStatus_getv+0x34>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <_Z17OD_NodeStatus_getv+0x30>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f011 fede 	bl	80178b8 <osMutexRelease>
    return value;
 8005afc:	79fb      	ldrb	r3, [r7, #7]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000844 	.word	0x20000844
 8005b0c:	200007d4 	.word	0x200007d4

08005b10 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <_Z22OD_ProtocolVersion_getv+0x30>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f011 fe7f 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <_Z22OD_ProtocolVersion_getv+0x34>)
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <_Z22OD_ProtocolVersion_getv+0x30>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f011 fec2 	bl	80178b8 <osMutexRelease>
    return value;
 8005b34:	88fb      	ldrh	r3, [r7, #6]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000848 	.word	0x20000848
 8005b44:	20000000 	.word	0x20000000

08005b48 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <_Z19OD_StackVersion_getv+0x30>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f04f 31ff 	mov.w	r1, #4294967295
 8005b56:	4618      	mov	r0, r3
 8005b58:	f011 fe63 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_Z19OD_StackVersion_getv+0x34>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <_Z19OD_StackVersion_getv+0x30>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f011 fea6 	bl	80178b8 <osMutexRelease>
    return value;
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	2000084c 	.word	0x2000084c
 8005b7c:	200007d6 	.word	0x200007d6

08005b80 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <_Z17OD_DbcVersion_getv+0x30>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f011 fe47 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <_Z17OD_DbcVersion_getv+0x34>)
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <_Z17OD_DbcVersion_getv+0x30>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f011 fe8a 	bl	80178b8 <osMutexRelease>
    return value;
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000850 	.word	0x20000850
 8005bb4:	200007d8 	.word	0x200007d8

08005bb8 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f011 fe2b 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	; (8005bec <_Z24OD_HeartbeatInterval_getv+0x34>)
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f011 fe6e 	bl	80178b8 <osMutexRelease>
    return value;
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000854 	.word	0x20000854
 8005bec:	20000002 	.word	0x20000002

08005bf0 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8005c02:	4618      	mov	r0, r3
 8005c04:	f011 fe0d 	bl	8017822 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8005c08:	4a06      	ldr	r2, [pc, #24]	; (8005c24 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f011 fe50 	bl	80178b8 <osMutexRelease>
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000854 	.word	0x20000854
 8005c24:	20000002 	.word	0x20000002

08005c28 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f04f 31ff 	mov.w	r1, #4294967295
 8005c36:	4618      	mov	r0, r3
 8005c38:	f011 fdf3 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <_Z21OD_SendOdOnBootup_getv+0x34>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f011 fe36 	bl	80178b8 <osMutexRelease>
    return value;
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000858 	.word	0x20000858
 8005c5c:	200007da 	.word	0x200007da

08005c60 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8005c72:	4618      	mov	r0, r3
 8005c74:	f011 fdd5 	bl	8017822 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8005c78:	4a06      	ldr	r2, [pc, #24]	; (8005c94 <_Z21OD_SendOdOnBootup_seth+0x34>)
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f011 fe18 	bl	80178b8 <osMutexRelease>
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000858 	.word	0x20000858
 8005c94:	200007da 	.word	0x200007da

08005c98 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f011 fdbb 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f011 fdfe 	bl	80178b8 <osMutexRelease>
    return value;
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	2000085c 	.word	0x2000085c
 8005ccc:	20000004 	.word	0x20000004

08005cd0 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f011 fd9d 	bl	8017822 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8005ce8:	4a06      	ldr	r2, [pc, #24]	; (8005d04 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f011 fde0 	bl	80178b8 <osMutexRelease>
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	2000085c 	.word	0x2000085c
 8005d04:	20000004 	.word	0x20000004

08005d08 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <_Z15OD_CpuUsage_getv+0x34>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f04f 31ff 	mov.w	r1, #4294967295
 8005d16:	4618      	mov	r0, r3
 8005d18:	f011 fd83 	bl	8017822 <osMutexAcquire>
    float value = OD_CpuUsage;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <_Z15OD_CpuUsage_getv+0x38>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <_Z15OD_CpuUsage_getv+0x34>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f011 fdc6 	bl	80178b8 <osMutexRelease>
    return value;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	ee07 3a90 	vmov	s15, r3
}
 8005d32:	eeb0 0a67 	vmov.f32	s0, s15
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000860 	.word	0x20000860
 8005d40:	200007dc 	.word	0x200007dc

08005d44 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8005d4e:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <_Z15OD_CpuUsage_setf+0x30>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f04f 31ff 	mov.w	r1, #4294967295
 8005d56:	4618      	mov	r0, r3
 8005d58:	f011 fd63 	bl	8017822 <osMutexAcquire>
    OD_CpuUsage = value;
 8005d5c:	4a06      	ldr	r2, [pc, #24]	; (8005d78 <_Z15OD_CpuUsage_setf+0x34>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <_Z15OD_CpuUsage_setf+0x30>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f011 fda6 	bl	80178b8 <osMutexRelease>
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000860 	.word	0x20000860
 8005d78:	200007dc 	.word	0x200007dc

08005d7c <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <_Z14OD_MemFree_getv+0x30>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f011 fd49 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <_Z14OD_MemFree_getv+0x34>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <_Z14OD_MemFree_getv+0x30>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f011 fd8c 	bl	80178b8 <osMutexRelease>
    return value;
 8005da0:	687b      	ldr	r3, [r7, #4]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000864 	.word	0x20000864
 8005db0:	200007e0 	.word	0x200007e0

08005db4 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <_Z14OD_MemFree_setm+0x30>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f011 fd2c 	bl	8017822 <osMutexAcquire>
    OD_MemFree = value;
 8005dca:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <_Z14OD_MemFree_setm+0x34>)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <_Z14OD_MemFree_setm+0x30>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f011 fd6f 	bl	80178b8 <osMutexRelease>
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000864 	.word	0x20000864
 8005de8:	200007e0 	.word	0x200007e0

08005dec <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <_Z16OD_BoardTemp_getv+0x34>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f04f 31ff 	mov.w	r1, #4294967295
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f011 fd11 	bl	8017822 <osMutexAcquire>
    float value = OD_BoardTemp;
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <_Z16OD_BoardTemp_getv+0x38>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <_Z16OD_BoardTemp_getv+0x34>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f011 fd54 	bl	80178b8 <osMutexRelease>
    return value;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	ee07 3a90 	vmov	s15, r3
}
 8005e16:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000868 	.word	0x20000868
 8005e24:	200007e4 	.word	0x200007e4

08005e28 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <_Z16OD_BoardTemp_setf+0x30>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f04f 31ff 	mov.w	r1, #4294967295
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f011 fcf1 	bl	8017822 <osMutexAcquire>
    OD_BoardTemp = value;
 8005e40:	4a06      	ldr	r2, [pc, #24]	; (8005e5c <_Z16OD_BoardTemp_setf+0x34>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <_Z16OD_BoardTemp_setf+0x30>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f011 fd34 	bl	80178b8 <osMutexRelease>
}
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000868 	.word	0x20000868
 8005e5c:	200007e4 	.word	0x200007e4

08005e60 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <_Z19OD_InputVoltage_getv+0x34>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f011 fcd7 	bl	8017822 <osMutexAcquire>
    float value = OD_InputVoltage;
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <_Z19OD_InputVoltage_getv+0x38>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <_Z19OD_InputVoltage_getv+0x34>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f011 fd1a 	bl	80178b8 <osMutexRelease>
    return value;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	ee07 3a90 	vmov	s15, r3
}
 8005e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	2000086c 	.word	0x2000086c
 8005e98:	200007e8 	.word	0x200007e8

08005e9c <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8005ea6:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <_Z19OD_InputVoltage_setf+0x30>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f011 fcb7 	bl	8017822 <osMutexAcquire>
    OD_InputVoltage = value;
 8005eb4:	4a06      	ldr	r2, [pc, #24]	; (8005ed0 <_Z19OD_InputVoltage_setf+0x34>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <_Z19OD_InputVoltage_setf+0x30>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f011 fcfa 	bl	80178b8 <osMutexRelease>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	2000086c 	.word	0x2000086c
 8005ed0:	200007e8 	.word	0x200007e8

08005ed4 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <_Z14OD_runtime_getv+0x30>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f04f 31ff 	mov.w	r1, #4294967295
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f011 fc9d 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <_Z14OD_runtime_getv+0x34>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <_Z14OD_runtime_getv+0x30>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f011 fce0 	bl	80178b8 <osMutexRelease>
    return value;
 8005ef8:	687b      	ldr	r3, [r7, #4]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000870 	.word	0x20000870
 8005f08:	200007ec 	.word	0x200007ec

08005f0c <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <_Z12OD_SdcIn_getv+0x30>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f011 fc81 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <_Z12OD_SdcIn_getv+0x34>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <_Z12OD_SdcIn_getv+0x30>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f011 fcc4 	bl	80178b8 <osMutexRelease>
    return value;
 8005f30:	79fb      	ldrb	r3, [r7, #7]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000874 	.word	0x20000874
 8005f40:	200007f0 	.word	0x200007f0

08005f44 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <_Z13OD_SdcOut_getv+0x30>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f52:	4618      	mov	r0, r3
 8005f54:	f011 fc65 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <_Z13OD_SdcOut_getv+0x34>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <_Z13OD_SdcOut_getv+0x30>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f011 fca8 	bl	80178b8 <osMutexRelease>
    return value;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000878 	.word	0x20000878
 8005f78:	200007f1 	.word	0x200007f1

08005f7c <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <_Z15OD_ChipUID1_getv+0x38>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f04f 31ff 	mov.w	r1, #4294967295
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f011 fc49 	bl	8017822 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8005f90:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <_Z15OD_ChipUID1_getv+0x3c>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <_Z15OD_ChipUID1_getv+0x38>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f011 fc8a 	bl	80178b8 <osMutexRelease>
    return value;
 8005fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000087c 	.word	0x2000087c
 8005fb8:	200007f8 	.word	0x200007f8

08005fbc <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <_Z15OD_ChipUID2_getv+0x38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f011 fc29 	bl	8017822 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8005fd0:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <_Z15OD_ChipUID2_getv+0x3c>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <_Z15OD_ChipUID2_getv+0x38>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f011 fc6a 	bl	80178b8 <osMutexRelease>
    return value;
 8005fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000880 	.word	0x20000880
 8005ff8:	20000800 	.word	0x20000800

08005ffc <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <_Z16OD_BuildDate_getv+0x30>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f04f 31ff 	mov.w	r1, #4294967295
 800600a:	4618      	mov	r0, r3
 800600c:	f011 fc09 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <_Z16OD_BuildDate_getv+0x34>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <_Z16OD_BuildDate_getv+0x30>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f011 fc4c 	bl	80178b8 <osMutexRelease>
    return value;
 8006020:	687b      	ldr	r3, [r7, #4]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000884 	.word	0x20000884
 8006030:	20000808 	.word	0x20000808

08006034 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 800603a:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <_Z16OD_BuildTime_getv+0x30>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f04f 31ff 	mov.w	r1, #4294967295
 8006042:	4618      	mov	r0, r3
 8006044:	f011 fbed 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <_Z16OD_BuildTime_getv+0x34>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <_Z16OD_BuildTime_getv+0x30>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f011 fc30 	bl	80178b8 <osMutexRelease>
    return value;
 8006058:	687b      	ldr	r3, [r7, #4]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000888 	.word	0x20000888
 8006068:	2000080c 	.word	0x2000080c

0800606c <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f04f 31ff 	mov.w	r1, #4294967295
 800607a:	4618      	mov	r0, r3
 800607c:	f011 fbd1 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f011 fc14 	bl	80178b8 <osMutexRelease>
    return value;
 8006090:	79fb      	ldrb	r3, [r7, #7]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000088c 	.word	0x2000088c
 80060a0:	20000810 	.word	0x20000810

080060a4 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f04f 31ff 	mov.w	r1, #4294967295
 80060b2:	4618      	mov	r0, r3
 80060b4:	f011 fbb5 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f011 fbf8 	bl	80178b8 <osMutexRelease>
    return value;
 80060c8:	79fb      	ldrb	r3, [r7, #7]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000890 	.word	0x20000890
 80060d8:	20000811 	.word	0x20000811

080060dc <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f04f 31ff 	mov.w	r1, #4294967295
 80060ea:	4618      	mov	r0, r3
 80060ec:	f011 fb99 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f011 fbdc 	bl	80178b8 <osMutexRelease>
    return value;
 8006100:	687b      	ldr	r3, [r7, #4]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000894 	.word	0x20000894
 8006110:	20000814 	.word	0x20000814

08006114 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f04f 31ff 	mov.w	r1, #4294967295
 8006122:	4618      	mov	r0, r3
 8006124:	f011 fb7d 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f011 fbc0 	bl	80178b8 <osMutexRelease>
    return value;
 8006138:	79fb      	ldrb	r3, [r7, #7]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000898 	.word	0x20000898
 8006148:	20000006 	.word	0x20000006

0800614c <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f04f 31ff 	mov.w	r1, #4294967295
 800615e:	4618      	mov	r0, r3
 8006160:	f011 fb5f 	bl	8017822 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8006164:	4a06      	ldr	r2, [pc, #24]	; (8006180 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 800616a:	4b04      	ldr	r3, [pc, #16]	; (800617c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f011 fba2 	bl	80178b8 <osMutexRelease>
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000898 	.word	0x20000898
 8006180:	20000006 	.word	0x20000006

08006184 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f04f 31ff 	mov.w	r1, #4294967295
 8006192:	4618      	mov	r0, r3
 8006194:	f011 fb45 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f011 fb88 	bl	80178b8 <osMutexRelease>
    return value;
 80061a8:	88fb      	ldrh	r3, [r7, #6]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	2000089c 	.word	0x2000089c
 80061b8:	20000008 	.word	0x20000008

080061bc <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <_Z20OD_CAN1_Baudrate_sett+0x30>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f04f 31ff 	mov.w	r1, #4294967295
 80061ce:	4618      	mov	r0, r3
 80061d0:	f011 fb27 	bl	8017822 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 80061d4:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <_Z20OD_CAN1_Baudrate_sett+0x30>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f011 fb6a 	bl	80178b8 <osMutexRelease>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000089c 	.word	0x2000089c
 80061f0:	20000008 	.word	0x20000008

080061f4 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <_Z18OD_CAN1_Status_getv+0x30>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006202:	4618      	mov	r0, r3
 8006204:	f011 fb0d 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <_Z18OD_CAN1_Status_getv+0x34>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <_Z18OD_CAN1_Status_getv+0x30>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f011 fb50 	bl	80178b8 <osMutexRelease>
    return value;
 8006218:	79fb      	ldrb	r3, [r7, #7]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200008a0 	.word	0x200008a0
 8006228:	20000818 	.word	0x20000818

0800622c <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f04f 31ff 	mov.w	r1, #4294967295
 800623a:	4618      	mov	r0, r3
 800623c:	f011 faf1 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f011 fb34 	bl	80178b8 <osMutexRelease>
    return value;
 8006250:	687b      	ldr	r3, [r7, #4]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	200008a4 	.word	0x200008a4
 8006260:	2000081c 	.word	0x2000081c

08006264 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 800626a:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f04f 31ff 	mov.w	r1, #4294967295
 8006272:	4618      	mov	r0, r3
 8006274:	f011 fad5 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f011 fb18 	bl	80178b8 <osMutexRelease>
    return value;
 8006288:	79fb      	ldrb	r3, [r7, #7]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	200008a8 	.word	0x200008a8
 8006298:	20000820 	.word	0x20000820

0800629c <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f04f 31ff 	mov.w	r1, #4294967295
 80062aa:	4618      	mov	r0, r3
 80062ac:	f011 fab9 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f011 fafc 	bl	80178b8 <osMutexRelease>
    return value;
 80062c0:	687b      	ldr	r3, [r7, #4]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200008ac 	.word	0x200008ac
 80062d0:	20000824 	.word	0x20000824

080062d4 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 80062da:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f04f 31ff 	mov.w	r1, #4294967295
 80062e2:	4618      	mov	r0, r3
 80062e4:	f011 fa9d 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f011 fae0 	bl	80178b8 <osMutexRelease>
    return value;
 80062f8:	79fb      	ldrb	r3, [r7, #7]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200008b0 	.word	0x200008b0
 8006308:	20000828 	.word	0x20000828

0800630c <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f04f 31ff 	mov.w	r1, #4294967295
 800631a:	4618      	mov	r0, r3
 800631c:	f011 fa81 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f011 fac4 	bl	80178b8 <osMutexRelease>
    return value;
 8006330:	79fb      	ldrb	r3, [r7, #7]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	200008b4 	.word	0x200008b4
 8006340:	20000829 	.word	0x20000829

08006344 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f04f 31ff 	mov.w	r1, #4294967295
 8006352:	4618      	mov	r0, r3
 8006354:	f011 fa65 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f011 faa8 	bl	80178b8 <osMutexRelease>
    return value;
 8006368:	687b      	ldr	r3, [r7, #4]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200008b8 	.word	0x200008b8
 8006378:	2000082c 	.word	0x2000082c

0800637c <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006382:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f04f 31ff 	mov.w	r1, #4294967295
 800638a:	4618      	mov	r0, r3
 800638c:	f011 fa49 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f011 fa8c 	bl	80178b8 <osMutexRelease>
    return value;
 80063a0:	79fb      	ldrb	r3, [r7, #7]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200008bc 	.word	0x200008bc
 80063b0:	2000000a 	.word	0x2000000a

080063b4 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f04f 31ff 	mov.w	r1, #4294967295
 80063c6:	4618      	mov	r0, r3
 80063c8:	f011 fa2b 	bl	8017822 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80063cc:	4a06      	ldr	r2, [pc, #24]	; (80063e8 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80063d2:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f011 fa6e 	bl	80178b8 <osMutexRelease>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	200008bc 	.word	0x200008bc
 80063e8:	2000000a 	.word	0x2000000a

080063ec <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f04f 31ff 	mov.w	r1, #4294967295
 80063fa:	4618      	mov	r0, r3
 80063fc:	f011 fa11 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f011 fa54 	bl	80178b8 <osMutexRelease>
    return value;
 8006410:	88fb      	ldrh	r3, [r7, #6]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	200008c0 	.word	0x200008c0
 8006420:	2000000c 	.word	0x2000000c

08006424 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f04f 31ff 	mov.w	r1, #4294967295
 8006436:	4618      	mov	r0, r3
 8006438:	f011 f9f3 	bl	8017822 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 800643c:	4a06      	ldr	r2, [pc, #24]	; (8006458 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f011 fa36 	bl	80178b8 <osMutexRelease>
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	200008c0 	.word	0x200008c0
 8006458:	2000000c 	.word	0x2000000c

0800645c <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <_Z18OD_CAN2_Status_getv+0x30>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f04f 31ff 	mov.w	r1, #4294967295
 800646a:	4618      	mov	r0, r3
 800646c:	f011 f9d9 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <_Z18OD_CAN2_Status_getv+0x34>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <_Z18OD_CAN2_Status_getv+0x30>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f011 fa1c 	bl	80178b8 <osMutexRelease>
    return value;
 8006480:	79fb      	ldrb	r3, [r7, #7]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200008c4 	.word	0x200008c4
 8006490:	20000830 	.word	0x20000830

08006494 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f04f 31ff 	mov.w	r1, #4294967295
 80064a2:	4618      	mov	r0, r3
 80064a4:	f011 f9bd 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 80064a8:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f011 fa00 	bl	80178b8 <osMutexRelease>
    return value;
 80064b8:	687b      	ldr	r3, [r7, #4]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200008c8 	.word	0x200008c8
 80064c8:	20000834 	.word	0x20000834

080064cc <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f04f 31ff 	mov.w	r1, #4294967295
 80064da:	4618      	mov	r0, r3
 80064dc:	f011 f9a1 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f011 f9e4 	bl	80178b8 <osMutexRelease>
    return value;
 80064f0:	79fb      	ldrb	r3, [r7, #7]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	200008cc 	.word	0x200008cc
 8006500:	20000838 	.word	0x20000838

08006504 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f04f 31ff 	mov.w	r1, #4294967295
 8006512:	4618      	mov	r0, r3
 8006514:	f011 f985 	bl	8017822 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8006518:	4b07      	ldr	r3, [pc, #28]	; (8006538 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f011 f9c8 	bl	80178b8 <osMutexRelease>
    return value;
 8006528:	687b      	ldr	r3, [r7, #4]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	200008d0 	.word	0x200008d0
 8006538:	2000083c 	.word	0x2000083c

0800653c <_Z23OD_batterVoltageLow_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_batterVoltageLow_GET_OVERWRITE
float WEAK_SYMBOL OD_batterVoltageLow_get() {
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batterVoltageLow, portMAX_DELAY);
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <_Z23OD_batterVoltageLow_getv+0x34>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f04f 31ff 	mov.w	r1, #4294967295
 800654a:	4618      	mov	r0, r3
 800654c:	f011 f969 	bl	8017822 <osMutexAcquire>
    float value = OD_batterVoltageLow;
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <_Z23OD_batterVoltageLow_getv+0x38>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batterVoltageLow);
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <_Z23OD_batterVoltageLow_getv+0x34>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f011 f9ac 	bl	80178b8 <osMutexRelease>
    return value;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	ee07 3a90 	vmov	s15, r3
}
 8006566:	eeb0 0a67 	vmov.f32	s0, s15
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	200008d4 	.word	0x200008d4
 8006574:	20000010 	.word	0x20000010

08006578 <_Z23OD_batterVoltageLow_setf>:
#endif
#ifndef OD_batterVoltageLow_SET_OVERWRITE
void WEAK_SYMBOL OD_batterVoltageLow_set(const float value) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batterVoltageLow, portMAX_DELAY);
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <_Z23OD_batterVoltageLow_setf+0x30>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f04f 31ff 	mov.w	r1, #4294967295
 800658a:	4618      	mov	r0, r3
 800658c:	f011 f949 	bl	8017822 <osMutexAcquire>
    OD_batterVoltageLow = value;
 8006590:	4a06      	ldr	r2, [pc, #24]	; (80065ac <_Z23OD_batterVoltageLow_setf+0x34>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batterVoltageLow);
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <_Z23OD_batterVoltageLow_setf+0x30>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f011 f98c 	bl	80178b8 <osMutexRelease>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	200008d4 	.word	0x200008d4
 80065ac:	20000010 	.word	0x20000010

080065b0 <_Z28OD_batterVoltageCritical_getv>:
#endif

#ifndef OD_batterVoltageCritical_GET_OVERWRITE
float WEAK_SYMBOL OD_batterVoltageCritical_get() {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batterVoltageCritical, portMAX_DELAY);
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <_Z28OD_batterVoltageCritical_getv+0x34>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f04f 31ff 	mov.w	r1, #4294967295
 80065be:	4618      	mov	r0, r3
 80065c0:	f011 f92f 	bl	8017822 <osMutexAcquire>
    float value = OD_batterVoltageCritical;
 80065c4:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <_Z28OD_batterVoltageCritical_getv+0x38>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batterVoltageCritical);
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <_Z28OD_batterVoltageCritical_getv+0x34>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f011 f972 	bl	80178b8 <osMutexRelease>
    return value;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	ee07 3a90 	vmov	s15, r3
}
 80065da:	eeb0 0a67 	vmov.f32	s0, s15
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200008d8 	.word	0x200008d8
 80065e8:	20000014 	.word	0x20000014

080065ec <_Z28OD_batterVoltageCritical_setf>:
#endif
#ifndef OD_batterVoltageCritical_SET_OVERWRITE
void WEAK_SYMBOL OD_batterVoltageCritical_set(const float value) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batterVoltageCritical, portMAX_DELAY);
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <_Z28OD_batterVoltageCritical_setf+0x30>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f04f 31ff 	mov.w	r1, #4294967295
 80065fe:	4618      	mov	r0, r3
 8006600:	f011 f90f 	bl	8017822 <osMutexAcquire>
    OD_batterVoltageCritical = value;
 8006604:	4a06      	ldr	r2, [pc, #24]	; (8006620 <_Z28OD_batterVoltageCritical_setf+0x34>)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batterVoltageCritical);
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <_Z28OD_batterVoltageCritical_setf+0x30>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f011 f952 	bl	80178b8 <osMutexRelease>
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200008d8 	.word	0x200008d8
 8006620:	20000014 	.word	0x20000014

08006624 <_Z19OD_overTempWarn_getv>:
#endif

#ifndef OD_overTempWarn_GET_OVERWRITE
float WEAK_SYMBOL OD_overTempWarn_get() {
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_overTempWarn, portMAX_DELAY);
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <_Z19OD_overTempWarn_getv+0x34>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f04f 31ff 	mov.w	r1, #4294967295
 8006632:	4618      	mov	r0, r3
 8006634:	f011 f8f5 	bl	8017822 <osMutexAcquire>
    float value = OD_overTempWarn;
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <_Z19OD_overTempWarn_getv+0x38>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_overTempWarn);
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <_Z19OD_overTempWarn_getv+0x34>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f011 f938 	bl	80178b8 <osMutexRelease>
    return value;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	ee07 3a90 	vmov	s15, r3
}
 800664e:	eeb0 0a67 	vmov.f32	s0, s15
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	200008dc 	.word	0x200008dc
 800665c:	20000018 	.word	0x20000018

08006660 <_Z19OD_overTempWarn_setf>:
#endif
#ifndef OD_overTempWarn_SET_OVERWRITE
void WEAK_SYMBOL OD_overTempWarn_set(const float value) {
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_overTempWarn, portMAX_DELAY);
 800666a:	4b09      	ldr	r3, [pc, #36]	; (8006690 <_Z19OD_overTempWarn_setf+0x30>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f04f 31ff 	mov.w	r1, #4294967295
 8006672:	4618      	mov	r0, r3
 8006674:	f011 f8d5 	bl	8017822 <osMutexAcquire>
    OD_overTempWarn = value;
 8006678:	4a06      	ldr	r2, [pc, #24]	; (8006694 <_Z19OD_overTempWarn_setf+0x34>)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_overTempWarn);
 800667e:	4b04      	ldr	r3, [pc, #16]	; (8006690 <_Z19OD_overTempWarn_setf+0x30>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f011 f918 	bl	80178b8 <osMutexRelease>
}
 8006688:	bf00      	nop
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	200008dc 	.word	0x200008dc
 8006694:	20000018 	.word	0x20000018

08006698 <_Z23OD_overTempCritical_getv>:
#endif

#ifndef OD_overTempCritical_GET_OVERWRITE
float WEAK_SYMBOL OD_overTempCritical_get() {
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_overTempCritical, portMAX_DELAY);
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <_Z23OD_overTempCritical_getv+0x34>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f04f 31ff 	mov.w	r1, #4294967295
 80066a6:	4618      	mov	r0, r3
 80066a8:	f011 f8bb 	bl	8017822 <osMutexAcquire>
    float value = OD_overTempCritical;
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <_Z23OD_overTempCritical_getv+0x38>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_overTempCritical);
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <_Z23OD_overTempCritical_getv+0x34>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f011 f8fe 	bl	80178b8 <osMutexRelease>
    return value;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	ee07 3a90 	vmov	s15, r3
}
 80066c2:	eeb0 0a67 	vmov.f32	s0, s15
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200008e0 	.word	0x200008e0
 80066d0:	2000001c 	.word	0x2000001c

080066d4 <_Z23OD_overTempCritical_setf>:
#endif
#ifndef OD_overTempCritical_SET_OVERWRITE
void WEAK_SYMBOL OD_overTempCritical_set(const float value) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_overTempCritical, portMAX_DELAY);
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <_Z23OD_overTempCritical_setf+0x30>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f04f 31ff 	mov.w	r1, #4294967295
 80066e6:	4618      	mov	r0, r3
 80066e8:	f011 f89b 	bl	8017822 <osMutexAcquire>
    OD_overTempCritical = value;
 80066ec:	4a06      	ldr	r2, [pc, #24]	; (8006708 <_Z23OD_overTempCritical_setf+0x34>)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_overTempCritical);
 80066f2:	4b04      	ldr	r3, [pc, #16]	; (8006704 <_Z23OD_overTempCritical_setf+0x30>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f011 f8de 	bl	80178b8 <osMutexRelease>
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	200008e0 	.word	0x200008e0
 8006708:	2000001c 	.word	0x2000001c

0800670c <_Z25OD_batteryOvercurrent_getv>:
#endif

#ifndef OD_batteryOvercurrent_GET_OVERWRITE
float WEAK_SYMBOL OD_batteryOvercurrent_get() {
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batteryOvercurrent, portMAX_DELAY);
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <_Z25OD_batteryOvercurrent_getv+0x34>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f04f 31ff 	mov.w	r1, #4294967295
 800671a:	4618      	mov	r0, r3
 800671c:	f011 f881 	bl	8017822 <osMutexAcquire>
    float value = OD_batteryOvercurrent;
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <_Z25OD_batteryOvercurrent_getv+0x38>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batteryOvercurrent);
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <_Z25OD_batteryOvercurrent_getv+0x34>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f011 f8c4 	bl	80178b8 <osMutexRelease>
    return value;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	ee07 3a90 	vmov	s15, r3
}
 8006736:	eeb0 0a67 	vmov.f32	s0, s15
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	200008e4 	.word	0x200008e4
 8006744:	20000020 	.word	0x20000020

08006748 <_Z25OD_batteryOvercurrent_setf>:
#endif
#ifndef OD_batteryOvercurrent_SET_OVERWRITE
void WEAK_SYMBOL OD_batteryOvercurrent_set(const float value) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batteryOvercurrent, portMAX_DELAY);
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <_Z25OD_batteryOvercurrent_setf+0x30>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f04f 31ff 	mov.w	r1, #4294967295
 800675a:	4618      	mov	r0, r3
 800675c:	f011 f861 	bl	8017822 <osMutexAcquire>
    OD_batteryOvercurrent = value;
 8006760:	4a06      	ldr	r2, [pc, #24]	; (800677c <_Z25OD_batteryOvercurrent_setf+0x34>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batteryOvercurrent);
 8006766:	4b04      	ldr	r3, [pc, #16]	; (8006778 <_Z25OD_batteryOvercurrent_setf+0x30>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f011 f8a4 	bl	80178b8 <osMutexRelease>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200008e4 	.word	0x200008e4
 800677c:	20000020 	.word	0x20000020

08006780 <_Z26OD_currentReadInterval_getv>:
#endif

#ifndef OD_currentReadInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_currentReadInterval_get() {
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_currentReadInterval, portMAX_DELAY);
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <_Z26OD_currentReadInterval_getv+0x30>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f04f 31ff 	mov.w	r1, #4294967295
 800678e:	4618      	mov	r0, r3
 8006790:	f011 f847 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_currentReadInterval;
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <_Z26OD_currentReadInterval_getv+0x34>)
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_currentReadInterval);
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <_Z26OD_currentReadInterval_getv+0x30>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f011 f88a 	bl	80178b8 <osMutexRelease>
    return value;
 80067a4:	88fb      	ldrh	r3, [r7, #6]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200008e8 	.word	0x200008e8
 80067b4:	20000024 	.word	0x20000024

080067b8 <_Z26OD_currentReadInterval_sett>:
#endif
#ifndef OD_currentReadInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_currentReadInterval_set(const uint16_t value) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_currentReadInterval, portMAX_DELAY);
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <_Z26OD_currentReadInterval_sett+0x30>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f04f 31ff 	mov.w	r1, #4294967295
 80067ca:	4618      	mov	r0, r3
 80067cc:	f011 f829 	bl	8017822 <osMutexAcquire>
    OD_currentReadInterval = value;
 80067d0:	4a06      	ldr	r2, [pc, #24]	; (80067ec <_Z26OD_currentReadInterval_sett+0x34>)
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_currentReadInterval);
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <_Z26OD_currentReadInterval_sett+0x30>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f011 f86c 	bl	80178b8 <osMutexRelease>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	200008e8 	.word	0x200008e8
 80067ec:	20000024 	.word	0x20000024

080067f0 <_Z25OD_statusSendInterval_getv>:
#endif

#ifndef OD_statusSendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_statusSendInterval_get() {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_statusSendInterval, portMAX_DELAY);
 80067f6:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <_Z25OD_statusSendInterval_getv+0x30>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f04f 31ff 	mov.w	r1, #4294967295
 80067fe:	4618      	mov	r0, r3
 8006800:	f011 f80f 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_statusSendInterval;
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <_Z25OD_statusSendInterval_getv+0x34>)
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_statusSendInterval);
 800680a:	4b05      	ldr	r3, [pc, #20]	; (8006820 <_Z25OD_statusSendInterval_getv+0x30>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f011 f852 	bl	80178b8 <osMutexRelease>
    return value;
 8006814:	88fb      	ldrh	r3, [r7, #6]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200008ec 	.word	0x200008ec
 8006824:	20000026 	.word	0x20000026

08006828 <_Z25OD_statusSendInterval_sett>:
#endif
#ifndef OD_statusSendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_statusSendInterval_set(const uint16_t value) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_statusSendInterval, portMAX_DELAY);
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <_Z25OD_statusSendInterval_sett+0x30>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f04f 31ff 	mov.w	r1, #4294967295
 800683a:	4618      	mov	r0, r3
 800683c:	f010 fff1 	bl	8017822 <osMutexAcquire>
    OD_statusSendInterval = value;
 8006840:	4a06      	ldr	r2, [pc, #24]	; (800685c <_Z25OD_statusSendInterval_sett+0x34>)
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_statusSendInterval);
 8006846:	4b04      	ldr	r3, [pc, #16]	; (8006858 <_Z25OD_statusSendInterval_sett+0x30>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f011 f834 	bl	80178b8 <osMutexRelease>
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	200008ec 	.word	0x200008ec
 800685c:	20000026 	.word	0x20000026

08006860 <_Z22OD_watchdogTimeout_getv>:
#endif

#ifndef OD_watchdogTimeout_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_watchdogTimeout_get() {
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_watchdogTimeout, portMAX_DELAY);
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <_Z22OD_watchdogTimeout_getv+0x30>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f04f 31ff 	mov.w	r1, #4294967295
 800686e:	4618      	mov	r0, r3
 8006870:	f010 ffd7 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_watchdogTimeout;
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <_Z22OD_watchdogTimeout_getv+0x34>)
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_watchdogTimeout);
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <_Z22OD_watchdogTimeout_getv+0x30>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f011 f81a 	bl	80178b8 <osMutexRelease>
    return value;
 8006884:	88fb      	ldrh	r3, [r7, #6]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200008f0 	.word	0x200008f0
 8006894:	20000028 	.word	0x20000028

08006898 <_Z22OD_watchdogTimeout_sett>:
#endif
#ifndef OD_watchdogTimeout_SET_OVERWRITE
void WEAK_SYMBOL OD_watchdogTimeout_set(const uint16_t value) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_watchdogTimeout, portMAX_DELAY);
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <_Z22OD_watchdogTimeout_sett+0x30>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f04f 31ff 	mov.w	r1, #4294967295
 80068aa:	4618      	mov	r0, r3
 80068ac:	f010 ffb9 	bl	8017822 <osMutexAcquire>
    OD_watchdogTimeout = value;
 80068b0:	4a06      	ldr	r2, [pc, #24]	; (80068cc <_Z22OD_watchdogTimeout_sett+0x34>)
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_watchdogTimeout);
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <_Z22OD_watchdogTimeout_sett+0x30>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f010 fffc 	bl	80178b8 <osMutexRelease>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200008f0 	.word	0x200008f0
 80068cc:	20000028 	.word	0x20000028

080068d0 <_Z23OD_projectXXEnabled_getv>:
#endif

#ifndef OD_projectXXEnabled_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_projectXXEnabled_get() {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_projectXXEnabled, portMAX_DELAY);
 80068d6:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <_Z23OD_projectXXEnabled_getv+0x30>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f04f 31ff 	mov.w	r1, #4294967295
 80068de:	4618      	mov	r0, r3
 80068e0:	f010 ff9f 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_projectXXEnabled;
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <_Z23OD_projectXXEnabled_getv+0x34>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_projectXXEnabled);
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <_Z23OD_projectXXEnabled_getv+0x30>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f010 ffe2 	bl	80178b8 <osMutexRelease>
    return value;
 80068f4:	79fb      	ldrb	r3, [r7, #7]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	200008f4 	.word	0x200008f4
 8006904:	2000002a 	.word	0x2000002a

08006908 <_Z23OD_projectXXEnabled_seth>:
#endif
#ifndef OD_projectXXEnabled_SET_OVERWRITE
void WEAK_SYMBOL OD_projectXXEnabled_set(const uint8_t value) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_projectXXEnabled, portMAX_DELAY);
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <_Z23OD_projectXXEnabled_seth+0x30>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f04f 31ff 	mov.w	r1, #4294967295
 800691a:	4618      	mov	r0, r3
 800691c:	f010 ff81 	bl	8017822 <osMutexAcquire>
    OD_projectXXEnabled = value;
 8006920:	4a06      	ldr	r2, [pc, #24]	; (800693c <_Z23OD_projectXXEnabled_seth+0x34>)
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_projectXXEnabled);
 8006926:	4b04      	ldr	r3, [pc, #16]	; (8006938 <_Z23OD_projectXXEnabled_seth+0x30>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f010 ffc4 	bl	80178b8 <osMutexRelease>
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200008f4 	.word	0x200008f4
 800693c:	2000002a 	.word	0x2000002a

08006940 <_Z18OD_LedCommands_getv>:
#endif

#ifndef OD_LedCommands_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_LedCommands_get() {
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_LedCommands, portMAX_DELAY);
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <_Z18OD_LedCommands_getv+0x30>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f04f 31ff 	mov.w	r1, #4294967295
 800694e:	4618      	mov	r0, r3
 8006950:	f010 ff67 	bl	8017822 <osMutexAcquire>
    uint16_t value = OD_LedCommands;
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <_Z18OD_LedCommands_getv+0x34>)
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_LedCommands);
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <_Z18OD_LedCommands_getv+0x30>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f010 ffaa 	bl	80178b8 <osMutexRelease>
    return value;
 8006964:	88fb      	ldrh	r3, [r7, #6]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200008f8 	.word	0x200008f8
 8006974:	2000002c 	.word	0x2000002c

08006978 <_Z18OD_LedCommands_sett>:
#endif
#ifndef OD_LedCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_LedCommands_set(const uint16_t value) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_LedCommands, portMAX_DELAY);
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <_Z18OD_LedCommands_sett+0x30>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f04f 31ff 	mov.w	r1, #4294967295
 800698a:	4618      	mov	r0, r3
 800698c:	f010 ff49 	bl	8017822 <osMutexAcquire>
    OD_LedCommands = value;
 8006990:	4a06      	ldr	r2, [pc, #24]	; (80069ac <_Z18OD_LedCommands_sett+0x34>)
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_LedCommands);
 8006996:	4b04      	ldr	r3, [pc, #16]	; (80069a8 <_Z18OD_LedCommands_sett+0x30>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f010 ff8c 	bl	80178b8 <osMutexRelease>
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	200008f8 	.word	0x200008f8
 80069ac:	2000002c 	.word	0x2000002c

080069b0 <_Z25OD_CoolingPumpEnabled_getv>:
#endif

#ifndef OD_CoolingPumpEnabled_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CoolingPumpEnabled_get() {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPumpEnabled, portMAX_DELAY);
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <_Z25OD_CoolingPumpEnabled_getv+0x30>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f04f 31ff 	mov.w	r1, #4294967295
 80069be:	4618      	mov	r0, r3
 80069c0:	f010 ff2f 	bl	8017822 <osMutexAcquire>
    uint8_t value = OD_CoolingPumpEnabled;
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <_Z25OD_CoolingPumpEnabled_getv+0x34>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CoolingPumpEnabled);
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <_Z25OD_CoolingPumpEnabled_getv+0x30>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f010 ff72 	bl	80178b8 <osMutexRelease>
    return value;
 80069d4:	79fb      	ldrb	r3, [r7, #7]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	200008fc 	.word	0x200008fc
 80069e4:	2000002e 	.word	0x2000002e

080069e8 <_Z25OD_CoolingPumpEnabled_seth>:
#endif
#ifndef OD_CoolingPumpEnabled_SET_OVERWRITE
void WEAK_SYMBOL OD_CoolingPumpEnabled_set(const uint8_t value) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CoolingPumpEnabled, portMAX_DELAY);
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <_Z25OD_CoolingPumpEnabled_seth+0x30>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f04f 31ff 	mov.w	r1, #4294967295
 80069fa:	4618      	mov	r0, r3
 80069fc:	f010 ff11 	bl	8017822 <osMutexAcquire>
    OD_CoolingPumpEnabled = value;
 8006a00:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <_Z25OD_CoolingPumpEnabled_seth+0x34>)
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CoolingPumpEnabled);
 8006a06:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <_Z25OD_CoolingPumpEnabled_seth+0x30>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f010 ff54 	bl	80178b8 <osMutexRelease>
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200008fc 	.word	0x200008fc
 8006a1c:	2000002e 	.word	0x2000002e

08006a20 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 0208 	add.w	r2, r3, #8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3310      	adds	r3, #16
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7fb ff8f 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8006a3a:	4603      	mov	r3, r0
        }
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f103 0008 	add.w	r0, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f103 0110 	add.w	r1, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f7fd fd7b 	bl	800455c <_ZN3can7signals13PDU_OD_NodeID3setERyS2_Rhh>
        }
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 0008 	add.w	r0, r3, #8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f103 0110 	add.w	r1, r3, #16
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	1d1a      	adds	r2, r3, #4
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	f7fd fd33 	bl	80044f6 <_ZN3can7signals17PDU_OD_NodeStatus3setERyS2_Rhh>
        }
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f103 0008 	add.w	r0, r3, #8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f103 0110 	add.w	r1, r3, #16
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	887b      	ldrh	r3, [r7, #2]
 8006ab6:	f7fd fcf0 	bl	800449a <_ZN3can7signals22PDU_OD_ProtocolVersion3setERyS2_Rht>
        }
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f103 0008 	add.w	r0, r3, #8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f103 0110 	add.w	r1, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	887b      	ldrh	r3, [r7, #2]
 8006ae0:	f7fd fcad 	bl	800443e <_ZN3can7signals19PDU_OD_StackVersion3setERyS2_Rht>
        }
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f103 0008 	add.w	r0, r3, #8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f103 0110 	add.w	r1, r3, #16
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	887b      	ldrh	r3, [r7, #2]
 8006b0a:	f7fd fc6a 	bl	80043e2 <_ZN3can7signals17PDU_OD_DbcVersion3setERyS2_Rht>
        }
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f103 0008 	add.w	r0, r3, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f103 0110 	add.w	r1, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	887b      	ldrh	r3, [r7, #2]
 8006b34:	f7fd fc03 	bl	800433e <_ZN3can7signals24PDU_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f103 0008 	add.w	r0, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f103 0110 	add.w	r1, r3, #16
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	f7fd fb97 	bl	8004290 <_ZN3can7signals21PDU_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f103 0008 	add.w	r0, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f103 0110 	add.w	r1, r3, #16
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	1d1a      	adds	r2, r3, #4
 8006b86:	887b      	ldrh	r3, [r7, #2]
 8006b88:	f7fd fb30 	bl	80041ec <_ZN3can7signals26PDU_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f103 0008 	add.w	r0, r3, #8
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f103 0110 	add.w	r1, r3, #16
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	ed97 0a00 	vldr	s0, [r7]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f7fd fabb 	bl	8004130 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf>
        }
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f103 0008 	add.w	r0, r3, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f103 0110 	add.w	r1, r3, #16
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	1d1a      	adds	r2, r3, #4
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	f7fd fa6f 	bl	80040c0 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm>
        }
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f103 0008 	add.w	r0, r3, #8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f103 0110 	add.w	r1, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	ed97 0a00 	vldr	s0, [r7]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f7fd f9f6 	bl	8003ffc <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf>
        }
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f103 0008 	add.w	r0, r3, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f103 0110 	add.w	r1, r3, #16
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	ed97 0a00 	vldr	s0, [r7]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f7fd f985 	bl	8003f48 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf>
        }
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f103 0008 	add.w	r0, r3, #8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f103 0110 	add.w	r1, r3, #16
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1d1a      	adds	r2, r3, #4
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f7fd f937 	bl	8003ed4 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm>
        }
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f103 0008 	add.w	r0, r3, #8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f103 0110 	add.w	r1, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	f7fd f8ee 	bl	8003e6c <_ZN3can7signals12PDU_OD_SdcIn3setERyS2_Rhh>
        }
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f103 0008 	add.w	r0, r3, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f103 0110 	add.w	r1, r3, #16
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	f7fd f8a5 	bl	8003e04 <_ZN3can7signals13PDU_OD_SdcOut3setERyS2_Rhh>
        }
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006cc2:	b590      	push	{r4, r7, lr}
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	af02      	add	r7, sp, #8
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f103 0008 	add.w	r0, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f103 0110 	add.w	r1, r3, #16
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1d1c      	adds	r4, r3, #4
 8006cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	f7fd f853 	bl	8003d92 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy>
        }
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd90      	pop	{r4, r7, pc}

08006cf4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f103 0008 	add.w	r0, r3, #8
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f103 0110 	add.w	r1, r3, #16
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1d1c      	adds	r4, r3, #4
 8006d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d14:	e9cd 2300 	strd	r2, r3, [sp]
 8006d18:	4622      	mov	r2, r4
 8006d1a:	f7fd f801 	bl	8003d20 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy>
        }
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd90      	pop	{r4, r7, pc}

08006d26 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f103 0008 	add.w	r0, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f103 0110 	add.w	r1, r3, #16
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	1d1a      	adds	r2, r3, #4
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f7fc ffb5 	bl	8003cb0 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm>
        }
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f103 0008 	add.w	r0, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f103 0110 	add.w	r1, r3, #16
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1d1a      	adds	r2, r3, #4
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f7fc ff67 	bl	8003c3c <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm>
        }
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f103 0008 	add.w	r0, r3, #8
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 0110 	add.w	r1, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1d1a      	adds	r2, r3, #4
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f7fc ff1e 	bl	8003bd4 <_ZN3can7signals20PDU_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8006d98:	bf00      	nop
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f103 0008 	add.w	r0, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f103 0110 	add.w	r1, r3, #16
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	1d1a      	adds	r2, r3, #4
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f7fc fed5 	bl	8003b6c <_ZN3can7signals20PDU_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0008 	add.w	r0, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f103 0110 	add.w	r1, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1d1a      	adds	r2, r3, #4
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f7fc fe89 	bl	8003afc <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f103 0008 	add.w	r0, r3, #8
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f103 0110 	add.w	r1, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	1d1a      	adds	r2, r3, #4
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	f7fc fe18 	bl	8003a44 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f103 0008 	add.w	r0, r3, #8
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f103 0110 	add.w	r1, r3, #16
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	887b      	ldrh	r3, [r7, #2]
 8006e3a:	f7fc fda1 	bl	8003980 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f103 0008 	add.w	r0, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f103 0110 	add.w	r1, r3, #16
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	1d1a      	adds	r2, r3, #4
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	f7fc fd58 	bl	8003918 <_ZN3can7signals18PDU_OD_CAN1_Status3setERyS2_Rhh>
        }
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f103 0008 	add.w	r0, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f103 0110 	add.w	r1, r3, #16
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f7fc fd0a 	bl	80038a4 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f103 0008 	add.w	r0, r3, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f103 0110 	add.w	r1, r3, #16
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	f7fc fcc1 	bl	800383c <_ZN3can7signals23PDU_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f103 0008 	add.w	r0, r3, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f103 0110 	add.w	r1, r3, #16
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	1d1a      	adds	r2, r3, #4
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f7fc fc73 	bl	80037c8 <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f103 0008 	add.w	r0, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f103 0110 	add.w	r1, r3, #16
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	1d1a      	adds	r2, r3, #4
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f7fc fc2a 	bl	8003760 <_ZN3can7signals20PDU_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f103 0008 	add.w	r0, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f103 0110 	add.w	r1, r3, #16
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	f7fc fbe1 	bl	80036f8 <_ZN3can7signals20PDU_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f103 0008 	add.w	r0, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f103 0110 	add.w	r1, r3, #16
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f7fc fb95 	bl	8003688 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f103 0008 	add.w	r0, r3, #8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f103 0110 	add.w	r1, r3, #16
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	1d1a      	adds	r2, r3, #4
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f7fc fb24 	bl	80035d0 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f103 0008 	add.w	r0, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f103 0110 	add.w	r1, r3, #16
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	887b      	ldrh	r3, [r7, #2]
 8006fae:	f7fc faad 	bl	800350c <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f103 0008 	add.w	r0, r3, #8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f103 0110 	add.w	r1, r3, #16
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	1d1a      	adds	r2, r3, #4
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	f7fc fa64 	bl	80034a4 <_ZN3can7signals18PDU_OD_CAN2_Status3setERyS2_Rhh>
        }
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f103 0008 	add.w	r0, r3, #8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f103 0110 	add.w	r1, r3, #16
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	1d1a      	adds	r2, r3, #4
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f7fc fa16 	bl	8003430 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f103 0008 	add.w	r0, r3, #8
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f103 0110 	add.w	r1, r3, #16
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	f7fc f9cd 	bl	80033c8 <_ZN3can7signals23PDU_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f103 0008 	add.w	r0, r3, #8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f103 0110 	add.w	r1, r3, #16
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f7fc f97f 	bl	8003354 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f103 0008 	add.w	r0, r3, #8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0110 	add.w	r1, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	ed97 0a00 	vldr	s0, [r7]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fc f8de 	bl	8003240 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf>
        }
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0008 	add.w	r0, r3, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f103 0110 	add.w	r1, r3, #16
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	ed97 0a00 	vldr	s0, [r7]
 80070ac:	461a      	mov	r2, r3
 80070ae:	f7fc f83b 	bl	8003128 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf>
        }
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0008 	add.w	r0, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f103 0110 	add.w	r1, r3, #16
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3304      	adds	r3, #4
 80070d6:	ed97 0a00 	vldr	s0, [r7]
 80070da:	461a      	mov	r2, r3
 80070dc:	f7fb ff98 	bl	8003010 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf>
        }
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f103 0008 	add.w	r0, r3, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f103 0110 	add.w	r1, r3, #16
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	ed97 0a00 	vldr	s0, [r7]
 8007108:	461a      	mov	r2, r3
 800710a:	f7fb fef5 	bl	8002ef8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf>
        }
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f103 0008 	add.w	r0, r3, #8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f103 0110 	add.w	r1, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	ed97 0a00 	vldr	s0, [r7]
 8007136:	461a      	mov	r2, r3
 8007138:	f7fb fe54 	bl	8002de4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf>
        }
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f103 0008 	add.w	r0, r3, #8
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f103 0110 	add.w	r1, r3, #16
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	887b      	ldrh	r3, [r7, #2]
 8007162:	f7fb fdea 	bl	8002d3a <_ZN3can7signals26PDU_OD_currentReadInterval3setERyS2_Rht>
        }
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 0008 	add.w	r0, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f103 0110 	add.w	r1, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	887b      	ldrh	r3, [r7, #2]
 800718c:	f7fb fd7f 	bl	8002c8e <_ZN3can7signals25PDU_OD_statusSendInterval3setERyS2_Rht>
        }
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0008 	add.w	r0, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f103 0110 	add.w	r1, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	887b      	ldrh	r3, [r7, #2]
 80071b6:	f7fb fd14 	bl	8002be2 <_ZN3can7signals22PDU_OD_watchdogTimeout3setERyS2_Rht>
        }
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f103 0008 	add.w	r0, r3, #8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f103 0110 	add.w	r1, r3, #16
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	1d1a      	adds	r2, r3, #4
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	f7fb fca6 	bl	8002b30 <_ZN3can7signals23PDU_OD_projectXXEnabled3setERyS2_Rhh>
        }
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f103 0008 	add.w	r0, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f103 0110 	add.w	r1, r3, #16
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	f7fb fc3b 	bl	8002a84 <_ZN3can7signals18PDU_OD_LedCommands3setERyS2_Rht>
        }
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f103 0008 	add.w	r0, r3, #8
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f103 0110 	add.w	r1, r3, #16
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	f7fb fbcd 	bl	80029d2 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3setERyS2_Rhh>
        }
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0008 	add.w	r0, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f103 0110 	add.w	r1, r3, #16
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	f7fb fb53 	bl	8002908 <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
        }
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f103 0008 	add.w	r0, r3, #8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f103 0110 	add.w	r1, r3, #16
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	1d1a      	adds	r2, r3, #4
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	f7fb fb79 	bl	800297e <_ZN3can7signals16PDU_SDO_RespCode3setERyS2_Rhh>
        }
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f103 0208 	add.w	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3310      	adds	r3, #16
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f7fb fb55 	bl	8002958 <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80072ae:	4603      	mov	r3, r0
        }
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals24PDU_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f103 0208 	add.w	r2, r3, #8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3310      	adds	r3, #16
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fd f864 	bl	800439a <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_>
 80072d2:	4603      	mov	r3, r0
        }
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals21PDU_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f103 0208 	add.w	r2, r3, #8
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3310      	adds	r3, #16
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fd f800 	bl	80042f6 <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_>
 80072f6:	4603      	mov	r3, r0
        }
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f103 0208 	add.w	r2, r3, #8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3310      	adds	r3, #16
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f7fc ff97 	bl	8004248 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_>
 800731a:	4603      	mov	r3, r0
        }
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f103 0208 	add.w	r2, r3, #8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3310      	adds	r3, #16
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f7fc fbb7 	bl	8003aac <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_>
 800733e:	4603      	mov	r3, r0
        }
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f103 0208 	add.w	r2, r3, #8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3310      	adds	r3, #16
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7fc fb4a 	bl	80039f6 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_>
 8007362:	4603      	mov	r3, r0
        }
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f103 0208 	add.w	r2, r3, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3310      	adds	r3, #16
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fc f959 	bl	8003638 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_>
 8007386:	4603      	mov	r3, r0
        }
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f103 0208 	add.w	r2, r3, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3310      	adds	r3, #16
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fc f8ec 	bl	8003582 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_>
 80073aa:	4603      	mov	r3, r0
        }
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_batterVoltageLowEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f103 0208 	add.w	r2, r3, #8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3310      	adds	r3, #16
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7fb ff93 	bl	80032f4 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_>
 80073ce:	eef0 7a40 	vmov.f32	s15, s0
        }
 80073d2:	eeb0 0a67 	vmov.f32	s0, s15
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals28PDU_OD_batterVoltageCriticalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0208 	add.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3310      	adds	r3, #16
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fb fef3 	bl	80031dc <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_>
 80073f6:	eef0 7a40 	vmov.f32	s15, s0
        }
 80073fa:	eeb0 0a67 	vmov.f32	s0, s15
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals19PDU_OD_overTempWarnEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f103 0208 	add.w	r2, r3, #8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3310      	adds	r3, #16
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f7fb fe53 	bl	80030c4 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_>
 800741e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007422:	eeb0 0a67 	vmov.f32	s0, s15
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_overTempCriticalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f103 0208 	add.w	r2, r3, #8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3310      	adds	r3, #16
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7fb fdb3 	bl	8002fac <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_>
 8007446:	eef0 7a40 	vmov.f32	s15, s0
        }
 800744a:	eeb0 0a67 	vmov.f32	s0, s15
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_batteryOvercurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f103 0208 	add.w	r2, r3, #8
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3310      	adds	r3, #16
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fb fd15 	bl	8002e98 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_>
 800746e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007472:	eeb0 0a67 	vmov.f32	s0, s15
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_currentReadIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f103 0208 	add.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3310      	adds	r3, #16
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7fb fc81 	bl	8002d98 <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_>
 8007496:	4603      	mov	r3, r0
        }
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_statusSendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f103 0208 	add.w	r2, r3, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3310      	adds	r3, #16
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7fb fc19 	bl	8002cec <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_>
 80074ba:	4603      	mov	r3, r0
        }
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals22PDU_OD_watchdogTimeoutEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f103 0208 	add.w	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3310      	adds	r3, #16
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fb fbb1 	bl	8002c40 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_>
 80074de:	4603      	mov	r3, r0
        }
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_projectXXEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f103 0208 	add.w	r2, r3, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3310      	adds	r3, #16
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7fb fb4b 	bl	8002b98 <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_>
 8007502:	4603      	mov	r3, r0
        }
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals18PDU_OD_LedCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f103 0208 	add.w	r2, r3, #8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3310      	adds	r3, #16
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f7fb fade 	bl	8002ae2 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_>
 8007526:	4603      	mov	r3, r0
        }
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_CoolingPumpEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f103 0208 	add.w	r2, r3, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3310      	adds	r3, #16
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f7fb fa78 	bl	8002a3a <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_>
 800754a:	4603      	mov	r3, r0
        }
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b01      	cmp	r3, #1
 8007562:	f040 8126 	bne.w	80077b2 <_Z41__static_initialization_and_destruction_0ii+0x25e>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800756c:	4293      	cmp	r3, r2
 800756e:	f040 8120 	bne.w	80077b2 <_Z41__static_initialization_and_destruction_0ii+0x25e>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8007572:	2000      	movs	r0, #0
 8007574:	f010 f8cf 	bl	8017716 <osMutexNew>
 8007578:	4603      	mov	r3, r0
 800757a:	4a90      	ldr	r2, [pc, #576]	; (80077bc <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800757c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 800757e:	2000      	movs	r0, #0
 8007580:	f010 f8c9 	bl	8017716 <osMutexNew>
 8007584:	4603      	mov	r3, r0
 8007586:	4a8e      	ldr	r2, [pc, #568]	; (80077c0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8007588:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 800758a:	2000      	movs	r0, #0
 800758c:	f010 f8c3 	bl	8017716 <osMutexNew>
 8007590:	4603      	mov	r3, r0
 8007592:	4a8c      	ldr	r2, [pc, #560]	; (80077c4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8007594:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8007596:	2000      	movs	r0, #0
 8007598:	f010 f8bd 	bl	8017716 <osMutexNew>
 800759c:	4603      	mov	r3, r0
 800759e:	4a8a      	ldr	r2, [pc, #552]	; (80077c8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80075a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80075a2:	2000      	movs	r0, #0
 80075a4:	f010 f8b7 	bl	8017716 <osMutexNew>
 80075a8:	4603      	mov	r3, r0
 80075aa:	4a88      	ldr	r2, [pc, #544]	; (80077cc <_Z41__static_initialization_and_destruction_0ii+0x278>)
 80075ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80075ae:	2000      	movs	r0, #0
 80075b0:	f010 f8b1 	bl	8017716 <osMutexNew>
 80075b4:	4603      	mov	r3, r0
 80075b6:	4a86      	ldr	r2, [pc, #536]	; (80077d0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80075b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80075ba:	2000      	movs	r0, #0
 80075bc:	f010 f8ab 	bl	8017716 <osMutexNew>
 80075c0:	4603      	mov	r3, r0
 80075c2:	4a84      	ldr	r2, [pc, #528]	; (80077d4 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80075c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80075c6:	2000      	movs	r0, #0
 80075c8:	f010 f8a5 	bl	8017716 <osMutexNew>
 80075cc:	4603      	mov	r3, r0
 80075ce:	4a82      	ldr	r2, [pc, #520]	; (80077d8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80075d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80075d2:	2000      	movs	r0, #0
 80075d4:	f010 f89f 	bl	8017716 <osMutexNew>
 80075d8:	4603      	mov	r3, r0
 80075da:	4a80      	ldr	r2, [pc, #512]	; (80077dc <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80075dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 80075de:	2000      	movs	r0, #0
 80075e0:	f010 f899 	bl	8017716 <osMutexNew>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4a7e      	ldr	r2, [pc, #504]	; (80077e0 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80075e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 80075ea:	2000      	movs	r0, #0
 80075ec:	f010 f893 	bl	8017716 <osMutexNew>
 80075f0:	4603      	mov	r3, r0
 80075f2:	4a7c      	ldr	r2, [pc, #496]	; (80077e4 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80075f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 80075f6:	2000      	movs	r0, #0
 80075f8:	f010 f88d 	bl	8017716 <osMutexNew>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4a7a      	ldr	r2, [pc, #488]	; (80077e8 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8007600:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8007602:	2000      	movs	r0, #0
 8007604:	f010 f887 	bl	8017716 <osMutexNew>
 8007608:	4603      	mov	r3, r0
 800760a:	4a78      	ldr	r2, [pc, #480]	; (80077ec <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800760c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800760e:	2000      	movs	r0, #0
 8007610:	f010 f881 	bl	8017716 <osMutexNew>
 8007614:	4603      	mov	r3, r0
 8007616:	4a76      	ldr	r2, [pc, #472]	; (80077f0 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007618:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 800761a:	2000      	movs	r0, #0
 800761c:	f010 f87b 	bl	8017716 <osMutexNew>
 8007620:	4603      	mov	r3, r0
 8007622:	4a74      	ldr	r2, [pc, #464]	; (80077f4 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007624:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8007626:	2000      	movs	r0, #0
 8007628:	f010 f875 	bl	8017716 <osMutexNew>
 800762c:	4603      	mov	r3, r0
 800762e:	4a72      	ldr	r2, [pc, #456]	; (80077f8 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007630:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8007632:	2000      	movs	r0, #0
 8007634:	f010 f86f 	bl	8017716 <osMutexNew>
 8007638:	4603      	mov	r3, r0
 800763a:	4a70      	ldr	r2, [pc, #448]	; (80077fc <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800763c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800763e:	2000      	movs	r0, #0
 8007640:	f010 f869 	bl	8017716 <osMutexNew>
 8007644:	4603      	mov	r3, r0
 8007646:	4a6e      	ldr	r2, [pc, #440]	; (8007800 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007648:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 800764a:	2000      	movs	r0, #0
 800764c:	f010 f863 	bl	8017716 <osMutexNew>
 8007650:	4603      	mov	r3, r0
 8007652:	4a6c      	ldr	r2, [pc, #432]	; (8007804 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007654:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8007656:	2000      	movs	r0, #0
 8007658:	f010 f85d 	bl	8017716 <osMutexNew>
 800765c:	4603      	mov	r3, r0
 800765e:	4a6a      	ldr	r2, [pc, #424]	; (8007808 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8007660:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8007662:	2000      	movs	r0, #0
 8007664:	f010 f857 	bl	8017716 <osMutexNew>
 8007668:	4603      	mov	r3, r0
 800766a:	4a68      	ldr	r2, [pc, #416]	; (800780c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800766c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 800766e:	2000      	movs	r0, #0
 8007670:	f010 f851 	bl	8017716 <osMutexNew>
 8007674:	4603      	mov	r3, r0
 8007676:	4a66      	ldr	r2, [pc, #408]	; (8007810 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007678:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 800767a:	2000      	movs	r0, #0
 800767c:	f010 f84b 	bl	8017716 <osMutexNew>
 8007680:	4603      	mov	r3, r0
 8007682:	4a64      	ldr	r2, [pc, #400]	; (8007814 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8007684:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8007686:	2000      	movs	r0, #0
 8007688:	f010 f845 	bl	8017716 <osMutexNew>
 800768c:	4603      	mov	r3, r0
 800768e:	4a62      	ldr	r2, [pc, #392]	; (8007818 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8007690:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8007692:	2000      	movs	r0, #0
 8007694:	f010 f83f 	bl	8017716 <osMutexNew>
 8007698:	4603      	mov	r3, r0
 800769a:	4a60      	ldr	r2, [pc, #384]	; (800781c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800769c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 800769e:	2000      	movs	r0, #0
 80076a0:	f010 f839 	bl	8017716 <osMutexNew>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4a5e      	ldr	r2, [pc, #376]	; (8007820 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80076a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80076aa:	2000      	movs	r0, #0
 80076ac:	f010 f833 	bl	8017716 <osMutexNew>
 80076b0:	4603      	mov	r3, r0
 80076b2:	4a5c      	ldr	r2, [pc, #368]	; (8007824 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80076b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80076b6:	2000      	movs	r0, #0
 80076b8:	f010 f82d 	bl	8017716 <osMutexNew>
 80076bc:	4603      	mov	r3, r0
 80076be:	4a5a      	ldr	r2, [pc, #360]	; (8007828 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80076c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80076c2:	2000      	movs	r0, #0
 80076c4:	f010 f827 	bl	8017716 <osMutexNew>
 80076c8:	4603      	mov	r3, r0
 80076ca:	4a58      	ldr	r2, [pc, #352]	; (800782c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80076cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80076ce:	2000      	movs	r0, #0
 80076d0:	f010 f821 	bl	8017716 <osMutexNew>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4a56      	ldr	r2, [pc, #344]	; (8007830 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80076d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 80076da:	2000      	movs	r0, #0
 80076dc:	f010 f81b 	bl	8017716 <osMutexNew>
 80076e0:	4603      	mov	r3, r0
 80076e2:	4a54      	ldr	r2, [pc, #336]	; (8007834 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80076e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 80076e6:	2000      	movs	r0, #0
 80076e8:	f010 f815 	bl	8017716 <osMutexNew>
 80076ec:	4603      	mov	r3, r0
 80076ee:	4a52      	ldr	r2, [pc, #328]	; (8007838 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80076f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 80076f2:	2000      	movs	r0, #0
 80076f4:	f010 f80f 	bl	8017716 <osMutexNew>
 80076f8:	4603      	mov	r3, r0
 80076fa:	4a50      	ldr	r2, [pc, #320]	; (800783c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80076fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 80076fe:	2000      	movs	r0, #0
 8007700:	f010 f809 	bl	8017716 <osMutexNew>
 8007704:	4603      	mov	r3, r0
 8007706:	4a4e      	ldr	r2, [pc, #312]	; (8007840 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007708:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 800770a:	2000      	movs	r0, #0
 800770c:	f010 f803 	bl	8017716 <osMutexNew>
 8007710:	4603      	mov	r3, r0
 8007712:	4a4c      	ldr	r2, [pc, #304]	; (8007844 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007714:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8007716:	2000      	movs	r0, #0
 8007718:	f00f fffd 	bl	8017716 <osMutexNew>
 800771c:	4603      	mov	r3, r0
 800771e:	4a4a      	ldr	r2, [pc, #296]	; (8007848 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007720:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8007722:	2000      	movs	r0, #0
 8007724:	f00f fff7 	bl	8017716 <osMutexNew>
 8007728:	4603      	mov	r3, r0
 800772a:	4a48      	ldr	r2, [pc, #288]	; (800784c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800772c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batterVoltageLow         = osMutexNew(NULL);
 800772e:	2000      	movs	r0, #0
 8007730:	f00f fff1 	bl	8017716 <osMutexNew>
 8007734:	4603      	mov	r3, r0
 8007736:	4a46      	ldr	r2, [pc, #280]	; (8007850 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007738:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batterVoltageCritical    = osMutexNew(NULL);
 800773a:	2000      	movs	r0, #0
 800773c:	f00f ffeb 	bl	8017716 <osMutexNew>
 8007740:	4603      	mov	r3, r0
 8007742:	4a44      	ldr	r2, [pc, #272]	; (8007854 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007744:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_overTempWarn             = osMutexNew(NULL);
 8007746:	2000      	movs	r0, #0
 8007748:	f00f ffe5 	bl	8017716 <osMutexNew>
 800774c:	4603      	mov	r3, r0
 800774e:	4a42      	ldr	r2, [pc, #264]	; (8007858 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007750:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_overTempCritical         = osMutexNew(NULL);
 8007752:	2000      	movs	r0, #0
 8007754:	f00f ffdf 	bl	8017716 <osMutexNew>
 8007758:	4603      	mov	r3, r0
 800775a:	4a40      	ldr	r2, [pc, #256]	; (800785c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800775c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batteryOvercurrent       = osMutexNew(NULL);
 800775e:	2000      	movs	r0, #0
 8007760:	f00f ffd9 	bl	8017716 <osMutexNew>
 8007764:	4603      	mov	r3, r0
 8007766:	4a3e      	ldr	r2, [pc, #248]	; (8007860 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007768:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_currentReadInterval      = osMutexNew(NULL);
 800776a:	2000      	movs	r0, #0
 800776c:	f00f ffd3 	bl	8017716 <osMutexNew>
 8007770:	4603      	mov	r3, r0
 8007772:	4a3c      	ldr	r2, [pc, #240]	; (8007864 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007774:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_statusSendInterval       = osMutexNew(NULL);
 8007776:	2000      	movs	r0, #0
 8007778:	f00f ffcd 	bl	8017716 <osMutexNew>
 800777c:	4603      	mov	r3, r0
 800777e:	4a3a      	ldr	r2, [pc, #232]	; (8007868 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007780:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_watchdogTimeout          = osMutexNew(NULL);
 8007782:	2000      	movs	r0, #0
 8007784:	f00f ffc7 	bl	8017716 <osMutexNew>
 8007788:	4603      	mov	r3, r0
 800778a:	4a38      	ldr	r2, [pc, #224]	; (800786c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800778c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_projectXXEnabled         = osMutexNew(NULL);
 800778e:	2000      	movs	r0, #0
 8007790:	f00f ffc1 	bl	8017716 <osMutexNew>
 8007794:	4603      	mov	r3, r0
 8007796:	4a36      	ldr	r2, [pc, #216]	; (8007870 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007798:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_LedCommands              = osMutexNew(NULL);
 800779a:	2000      	movs	r0, #0
 800779c:	f00f ffbb 	bl	8017716 <osMutexNew>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4a34      	ldr	r2, [pc, #208]	; (8007874 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80077a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPumpEnabled       = osMutexNew(NULL);
 80077a6:	2000      	movs	r0, #0
 80077a8:	f00f ffb5 	bl	8017716 <osMutexNew>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4a32      	ldr	r2, [pc, #200]	; (8007878 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000840 	.word	0x20000840
 80077c0:	20000844 	.word	0x20000844
 80077c4:	20000848 	.word	0x20000848
 80077c8:	2000084c 	.word	0x2000084c
 80077cc:	20000850 	.word	0x20000850
 80077d0:	20000854 	.word	0x20000854
 80077d4:	20000858 	.word	0x20000858
 80077d8:	2000085c 	.word	0x2000085c
 80077dc:	20000860 	.word	0x20000860
 80077e0:	20000864 	.word	0x20000864
 80077e4:	20000868 	.word	0x20000868
 80077e8:	2000086c 	.word	0x2000086c
 80077ec:	20000870 	.word	0x20000870
 80077f0:	20000874 	.word	0x20000874
 80077f4:	20000878 	.word	0x20000878
 80077f8:	2000087c 	.word	0x2000087c
 80077fc:	20000880 	.word	0x20000880
 8007800:	20000884 	.word	0x20000884
 8007804:	20000888 	.word	0x20000888
 8007808:	2000088c 	.word	0x2000088c
 800780c:	20000890 	.word	0x20000890
 8007810:	20000894 	.word	0x20000894
 8007814:	20000898 	.word	0x20000898
 8007818:	2000089c 	.word	0x2000089c
 800781c:	200008a0 	.word	0x200008a0
 8007820:	200008a4 	.word	0x200008a4
 8007824:	200008a8 	.word	0x200008a8
 8007828:	200008ac 	.word	0x200008ac
 800782c:	200008b0 	.word	0x200008b0
 8007830:	200008b4 	.word	0x200008b4
 8007834:	200008b8 	.word	0x200008b8
 8007838:	200008bc 	.word	0x200008bc
 800783c:	200008c0 	.word	0x200008c0
 8007840:	200008c4 	.word	0x200008c4
 8007844:	200008c8 	.word	0x200008c8
 8007848:	200008cc 	.word	0x200008cc
 800784c:	200008d0 	.word	0x200008d0
 8007850:	200008d4 	.word	0x200008d4
 8007854:	200008d8 	.word	0x200008d8
 8007858:	200008dc 	.word	0x200008dc
 800785c:	200008e0 	.word	0x200008e0
 8007860:	200008e4 	.word	0x200008e4
 8007864:	200008e8 	.word	0x200008e8
 8007868:	200008ec 	.word	0x200008ec
 800786c:	200008f0 	.word	0x200008f0
 8007870:	200008f4 	.word	0x200008f4
 8007874:	200008f8 	.word	0x200008f8
 8007878:	200008fc 	.word	0x200008fc

0800787c <_GLOBAL__sub_I_OD_NodeID>:
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
 8007880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007884:	2001      	movs	r0, #1
 8007886:	f7ff fe65 	bl	8007554 <_Z41__static_initialization_and_destruction_0ii>
 800788a:	bd80      	pop	{r7, pc}

0800788c <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	switch (module) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <_ZL17AdcModuleToHandle9AdcModule+0x16>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d002      	beq.n	80078a6 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 80078a0:	e003      	b.n	80078aa <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 80078a4:	e004      	b.n	80078b0 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 80078a6:	4b05      	ldr	r3, [pc, #20]	; (80078bc <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 80078a8:	e002      	b.n	80078b0 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 80078aa:	f008 f849 	bl	800f940 <Error_Handler>
		return nullptr;
 80078ae:	2300      	movs	r3, #0
	}
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000d0c 	.word	0x20000d0c
 80078bc:	20000d54 	.word	0x20000d54

080078c0 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]

	}
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
		return m_value;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	881b      	ldrh	r3, [r3, #0]
	}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	807b      	strh	r3, [r7, #2]
		m_value = value;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	887a      	ldrh	r2, [r7, #2]
 80078fe:	801a      	strh	r2, [r3, #0]
	}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4618      	mov	r0, r3
 800795c:	f7f9 fd74 	bl	8001448 <_ZNSt14_Function_baseD1Ev>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 800796a:	b5b0      	push	{r4, r5, r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	240f      	movs	r4, #15
 8007976:	461d      	mov	r5, r3
 8007978:	2c00      	cmp	r4, #0
 800797a:	db05      	blt.n	8007988 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 800797c:	4628      	mov	r0, r5
 800797e:	f000 fa0f 	bl	8007da0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8007982:	3510      	adds	r5, #16
 8007984:	3c01      	subs	r4, #1
 8007986:	e7f7      	b.n	8007978 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bdb0      	pop	{r4, r5, r7, pc}

0800799a <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 800799a:	b590      	push	{r4, r7, lr}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	429c      	cmp	r4, r3
 80079b2:	d004      	beq.n	80079be <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80079b4:	3c10      	subs	r4, #16
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff ffca 	bl	8007950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80079bc:	e7f7      	b.n	80079ae <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd90      	pop	{r4, r7, pc}

080079c8 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__tcf_0+0xc>)
 80079ce:	f7ff ffe4 	bl	800799a <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20000900 	.word	0x20000900

080079d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 80079dc:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f3bf 8f5b 	dmb	ish
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf0c      	ite	eq
 80079ee:	2301      	moveq	r3, #1
 80079f0:	2300      	movne	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d013      	beq.n	8007a20 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 80079f8:	480b      	ldr	r0, [pc, #44]	; (8007a28 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80079fa:	f014 f931 	bl	801bc60 <__cxa_guard_acquire>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf14      	ite	ne
 8007a04:	2301      	movne	r3, #1
 8007a06:	2300      	moveq	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d008      	beq.n	8007a20 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8007a0e:	4807      	ldr	r0, [pc, #28]	; (8007a2c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8007a10:	f7ff ffab 	bl	800796a <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8007a14:	4806      	ldr	r0, [pc, #24]	; (8007a30 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8007a16:	f014 fb82 	bl	801c11e <atexit>
 8007a1a:	4803      	ldr	r0, [pc, #12]	; (8007a28 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8007a1c:	f014 f92c 	bl	801bc78 <__cxa_guard_release>
		return instance;
 8007a20:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8007a22:	4618      	mov	r0, r3
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000a04 	.word	0x20000a04
 8007a2c:	20000900 	.word	0x20000900
 8007a30:	080079c9 	.word	0x080079c9

08007a34 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007a44:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007a4c:	1c59      	adds	r1, r3, #1
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f9ac 	bl	8007dba <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 8007a62:	68fb      	ldr	r3, [r7, #12]
	}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	18d0      	adds	r0, r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f000 f995 	bl	8007dba <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f9a6 	bl	8007df0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007aaa:	1e5a      	subs	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d104      	bne.n	8007ada <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 f90a 	bl	8007cee <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8007ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 8007aee:	6838      	ldr	r0, [r7, #0]
 8007af0:	f7ff fecc 	bl	800788c <_ZL17AdcModuleToHandle9AdcModule>
 8007af4:	4602      	mov	r2, r0
					)) {
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69da      	ldr	r2, [r3, #28]
					)) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685c      	ldr	r4, [r3, #4]
 8007b08:	4b2f      	ldr	r3, [pc, #188]	; (8007bc8 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8007b0a:	429c      	cmp	r4, r3
 8007b0c:	d801      	bhi.n	8007b12 <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 8007b0e:	0063      	lsls	r3, r4, #1
 8007b10:	e001      	b.n	8007b16 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	4618      	mov	r0, r3
 8007b18:	f014 f8b1 	bl	801bc7e <_Znaj>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461e      	mov	r6, r3
 8007b20:	4635      	mov	r5, r6
 8007b22:	1e63      	subs	r3, r4, #1
 8007b24:	461c      	mov	r4, r3
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	db05      	blt.n	8007b36 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7ff fec8 	bl	80078c0 <_ZN10AdcChannelC1Ev>
 8007b30:	3502      	adds	r5, #2
 8007b32:	3c01      	subs	r4, #1
 8007b34:	e7f7      	b.n	8007b26 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d801      	bhi.n	8007b48 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	e001      	b.n	8007b4c <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f014 f896 	bl	801bc7e <_Znaj>
 8007b52:	4603      	mov	r3, r0
 8007b54:	461a      	mov	r2, r3
					)) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8007b60:	f7ff ff3a 	bl	80079d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8007b64:	4604      	mov	r4, r0
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	f107 0308 	add.w	r3, r7, #8
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f958 	bl	8007e24 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 8007b74:	f107 0308 	add.w	r3, r7, #8
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff ff5a 	bl	8007a34 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8007b80:	4602      	mov	r2, r0
					)) {
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fee0 	bl	8007950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8007b90:	2200      	movs	r2, #0
 8007b92:	2100      	movs	r1, #0
 8007b94:	2001      	movs	r0, #1
 8007b96:	f00f fecc 	bl	8017932 <osSemaphoreNew>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f009 f958 	bl	8010e68 <HAL_ADC_Start_DMA>
		update();
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f854 	bl	8007c66 <_ZN19AdcModuleController6updateEv>
	}
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc8:	3ffffffc 	.word	0x3ffffffc

08007bcc <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 8007bd4:	f7ff ff00 	bl	80079d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7ff ff43 	bl	8007a6c <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f00f ffc0 	bl	8017b70 <osSemaphoreGetCount>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	f04f 31ff 	mov.w	r1, #4294967295
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f00f ff1b 	bl	8017a44 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <_ZN19AdcModuleControllerD1Ev+0x54>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f014 f81e 	bl	801bc5c <_ZdaPv>
		delete[] m_buffer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <_ZN19AdcModuleControllerD1Ev+0x66>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f014 f815 	bl	801bc5c <_ZdaPv>
	}
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d301      	bcc.n	8007c54 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 8007c50:	f007 fe76 	bl	800f940 <Error_Handler>
		}
		return m_channels + rank;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	4413      	add	r3, r2
	}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZN19AdcModuleController6updateEv>:

	void update() {
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f04f 31ff 	mov.w	r1, #4294967295
 8007c76:	4618      	mov	r0, r3
 8007c78:	f00f fee4 	bl	8017a44 <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d211      	bcs.n	8007cae <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	18d0      	adds	r0, r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f7ff fe24 	bl	80078ee <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e7e8      	b.n	8007c80 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f009 f8d1 	bl	8010e68 <HAL_ADC_Start_DMA>
	}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7c1b      	ldrb	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ffc1 	bl	8007c66 <_ZN19AdcModuleController6updateEv>
 8007ce4:	e000      	b.n	8007ce8 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 8007ce6:	bf00      	nop
	}
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f00f fef1 	bl	8017ae8 <osSemaphoreRelease>
	}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
	switch(module){
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d004      	beq.n	8007d2c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 8007d22:	e007      	b.n	8007d34 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8007d24:	f000 f8b0 	bl	8007e88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	e008      	b.n	8007d3e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8007d2c:	f000 f8e2 	bl	8007ef4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 8007d30:	4603      	mov	r3, r0
 8007d32:	e004      	b.n	8007d3e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 8007d34:	f007 fe04 	bl	800f940 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8007d38:	f000 f8a6 	bl	8007e88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8007d3c:	4603      	mov	r3, r0
	}
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <_ZN20AdcChannelControllerC1E9AdcModulej>:

class AdcChannelController {
public:
	AdcChannelController() : m_module(nullptr), m_channel(nullptr){
	}
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
			m_module(&_getChannelAdcModuleControllerRuntime(module)),
 8007d52:	68b8      	ldr	r0, [r7, #8]
 8007d54:	f7ff ffdb 	bl	8007d0e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8007d58:	4602      	mov	r2, r0
			m_channel(m_module->getChannelByRank(rank)) {
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff ff69 	bl	8007c3c <_ZN19AdcModuleController16getChannelByRankEj>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	605a      	str	r2, [r3, #4]
	}
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
		m_module->weakUpdate();
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ffa1 	bl	8007cce <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff fda0 	bl	80078d6 <_ZN10AdcChannel3getEv>
 8007d96:	4603      	mov	r3, r0
	}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f9 fb3e 	bl	800142c <_ZNSt14_Function_baseC1Ev>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8007dc4:	f107 0308 	add.w	r3, r7, #8
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f8c0 	bl	8007f50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f8dc 	bl	8007f94 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8007ddc:	f107 0308 	add.w	r3, r7, #8
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fdb5 	bl	8007950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8007de6:	687b      	ldr	r3, [r7, #4]
      }
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	4798      	blx	r3
	    _M_manager = nullptr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	60da      	str	r2, [r3, #12]
	return *this;
 8007e1a:	687b      	ldr	r3, [r7, #4]
      }
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7f9 fafb 	bl	800142c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8007e36:	463b      	mov	r3, r7
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f8d7 	bl	8007fec <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00f      	beq.n	8007e64 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8007e44:	687c      	ldr	r4, [r7, #4]
 8007e46:	463b      	mov	r3, r7
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f8da 	bl	8008002 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4619      	mov	r1, r3
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f8e0 	bl	8008018 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a05      	ldr	r2, [pc, #20]	; (8007e70 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 8007e5c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a04      	ldr	r2, [pc, #16]	; (8007e74 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 8007e62:	609a      	str	r2, [r3, #8]
      }
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd90      	pop	{r4, r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	0800803d 	.word	0x0800803d
 8007e74:	08008067 	.word	0x08008067

08007e78 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__tcf_1+0xc>)
 8007e7e:	f7ff fea5 	bl	8007bcc <_ZN19AdcModuleControllerD1Ev>
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000a08 	.word	0x20000a08

08007e88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8007e8c:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f3bf 8f5b 	dmb	ish
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf0c      	ite	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d014      	beq.n	8007ed2 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8007ea8:	480b      	ldr	r0, [pc, #44]	; (8007ed8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8007eaa:	f013 fed9 	bl	801bc60 <__cxa_guard_acquire>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2301      	movne	r3, #1
 8007eb6:	2300      	moveq	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	4806      	ldr	r0, [pc, #24]	; (8007edc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 8007ec2:	f7ff fe0f 	bl	8007ae4 <_ZN19AdcModuleControllerC1E9AdcModule>
 8007ec6:	4806      	ldr	r0, [pc, #24]	; (8007ee0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8007ec8:	f014 f929 	bl	801c11e <atexit>
 8007ecc:	4802      	ldr	r0, [pc, #8]	; (8007ed8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8007ece:	f013 fed3 	bl	801bc78 <__cxa_guard_release>
	return instance;
 8007ed2:	4b02      	ldr	r3, [pc, #8]	; (8007edc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000a24 	.word	0x20000a24
 8007edc:	20000a08 	.word	0x20000a08
 8007ee0:	08007e79 	.word	0x08007e79

08007ee4 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__tcf_2+0xc>)
 8007eea:	f7ff fe6f 	bl	8007bcc <_ZN19AdcModuleControllerD1Ev>
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20000a28 	.word	0x20000a28

08007ef4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f3bf 8f5b 	dmb	ish
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d014      	beq.n	8007f3e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8007f14:	480b      	ldr	r0, [pc, #44]	; (8007f44 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8007f16:	f013 fea3 	bl	801bc60 <__cxa_guard_acquire>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bf14      	ite	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	2300      	moveq	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	4806      	ldr	r0, [pc, #24]	; (8007f48 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 8007f2e:	f7ff fdd9 	bl	8007ae4 <_ZN19AdcModuleControllerC1E9AdcModule>
 8007f32:	4806      	ldr	r0, [pc, #24]	; (8007f4c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 8007f34:	f014 f8f3 	bl	801c11e <atexit>
 8007f38:	4802      	ldr	r0, [pc, #8]	; (8007f44 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8007f3a:	f013 fe9d 	bl	801bc78 <__cxa_guard_release>
	return instance;
 8007f3e:	4b02      	ldr	r3, [pc, #8]	; (8007f48 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000a44 	.word	0x20000a44
 8007f48:	20000a28 	.word	0x20000a28
 8007f4c:	08007ee5 	.word	0x08007ee5

08007f50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7f9 fa65 	bl	800142c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8007f62:	6838      	ldr	r0, [r7, #0]
 8007f64:	f000 f89e 	bl	80080a4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	2202      	movs	r2, #2
 8007f78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	609a      	str	r2, [r3, #8]
    }
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7f9 fc5c 	bl	8001862 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f103 0208 	add.w	r2, r3, #8
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f7f9 fc85 	bl	80018c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f103 020c 	add.w	r2, r3, #12
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f000 f886 	bl	80080da <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	  { return true; }
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8008018:	b590      	push	{r4, r7, lr}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8008022:	6838      	ldr	r0, [r7, #0]
 8008024:	f7ff ffed 	bl	8008002 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8008028:	4603      	mov	r3, r0
 800802a:	4622      	mov	r2, r4
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f872 	bl	8008118 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}

0800803c <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f87f 	bl	800814a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800804c:	4604      	mov	r4, r0
 800804e:	6838      	ldr	r0, [r7, #0]
 8008050:	f7ff ffc1 	bl	8007fd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008054:	4603      	mov	r3, r0
 8008056:	4619      	mov	r1, r3
 8008058:	4620      	mov	r0, r4
 800805a:	f000 f887 	bl	800816c <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 800805e:	bf00      	nop
      }
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	bd90      	pop	{r4, r7, pc}

08008066 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8008066:	b590      	push	{r4, r7, lr}
 8008068:	b085      	sub	sp, #20
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4613      	mov	r3, r2
 8008072:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d109      	bne.n	800808e <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f88c 	bl	8008198 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8008080:	4604      	mov	r4, r0
 8008082:	68b8      	ldr	r0, [r7, #8]
 8008084:	f000 f861 	bl	800814a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8008088:	4603      	mov	r3, r0
 800808a:	6023      	str	r3, [r4, #0]
	    break;
 800808c:	e005      	b.n	800809a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	461a      	mov	r2, r3
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 f88b 	bl	80081b0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 800809a:	2300      	movs	r3, #0
      }
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd90      	pop	{r4, r7, pc}

080080a4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f9 f9dd 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f083 0301 	eor.w	r3, r3, #1
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff ffed 	bl	80080c4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80080ea:	4603      	mov	r3, r0
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f7ff ffe7 	bl	80080c4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80080f6:	4603      	mov	r3, r0
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80080fe:	f107 030c 	add.w	r3, r7, #12
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff ffde 	bl	80080c4 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8008108:	4603      	mov	r3, r0
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	601a      	str	r2, [r3, #0]
    }
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f7ff ff6c 	bl	8008002 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800812a:	4604      	mov	r4, r0
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fbf9 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 8008132:	4603      	mov	r3, r0
 8008134:	4619      	mov	r1, r3
 8008136:	2004      	movs	r0, #4
 8008138:	f7ff fbe8 	bl	800790c <_ZnwjPv>
 800813c:	4602      	mov	r2, r0
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	bf00      	nop
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bd90      	pop	{r4, r7, pc}

0800814a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f857 	bl	8008206 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8008158:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f85f 	bl	800821e <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8008160:	4603      	mov	r3, r0
 8008162:	bf00      	nop
	}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800816c:	b5b0      	push	{r4, r5, r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f85c 	bl	8008234 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 800817c:	4604      	mov	r4, r0
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f7ff ff29 	bl	8007fd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	4621      	mov	r1, r4
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f85d 	bl	800824a <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bdb0      	pop	{r4, r5, r7, pc}

08008198 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fbbf 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 80081a6:	4603      	mov	r3, r0
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d016      	beq.n	80081f2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	dc19      	bgt.n	80081fc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d002      	beq.n	80081d2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d00a      	beq.n	80081e6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 80081d0:	e014      	b.n	80081fc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff ffe0 	bl	8008198 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 80081d8:	4604      	mov	r4, r0
 80081da:	68b8      	ldr	r0, [r7, #8]
 80081dc:	f7ff ffb5 	bl	800814a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80081e0:	4603      	mov	r3, r0
 80081e2:	6023      	str	r3, [r4, #0]
	      break;
 80081e4:	e00a      	b.n	80081fc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80081e6:	462a      	mov	r2, r5
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f844 	bl	8008278 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 80081f0:	e004      	b.n	80081fc <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80081f2:	4621      	mov	r1, r4
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f858 	bl	80082aa <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80081fa:	bf00      	nop
	  return false;
 80081fc:	2300      	movs	r3, #0
	}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bdb0      	pop	{r4, r5, r7, pc}

08008206 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff fb93 	bl	800793a <_ZNKSt9_Any_data9_M_accessEv>
 8008214:	4603      	mov	r3, r0
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800824a:	b590      	push	{r4, r7, lr}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	7338      	strb	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008256:	68b8      	ldr	r0, [r7, #8]
 8008258:	f7ff ffec 	bl	8008234 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 800825c:	4604      	mov	r4, r0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff feb9 	bl	8007fd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008264:	4603      	mov	r3, r0
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	4620      	mov	r0, r4
 800826c:	f7ff fc25 	bl	8007aba <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008284:	68b8      	ldr	r0, [r7, #8]
 8008286:	f7ff ffbe 	bl	8008206 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 800828a:	4604      	mov	r4, r0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f7ff fb49 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 8008292:	4603      	mov	r3, r0
 8008294:	4619      	mov	r1, r3
 8008296:	2004      	movs	r0, #4
 8008298:	f7ff fb38 	bl	800790c <_ZnwjPv>
 800829c:	4602      	mov	r2, r0
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6013      	str	r3, [r2, #0]
	}
 80082a2:	bf00      	nop
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd90      	pop	{r4, r7, pc}

080082aa <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f804 	bl	80082c2 <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fb2a 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 80082d0:	4603      	mov	r3, r0
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <_ZN8WatchdogC1Em>:

/**
 * Constructor for Watchdog class
 * @param timeoutMs Watchdog timeout in milliseconds
 */
Watchdog::Watchdog(uint32_t timeoutMs) : m_timeoutMs{ timeoutMs } {
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	605a      	str	r2, [r3, #4]
}
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <_ZN8Watchdog5resetEv>:

/**
 * Reset the watchdog
 */
void Watchdog::reset() {
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
	m_lastWatchdogReset = xTaskGetTickCount();
 8008306:	f011 fe29 	bl	8019f5c <xTaskGetTickCount>
 800830a:	4602      	mov	r2, r0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	601a      	str	r2, [r3, #0]
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <_ZN8Watchdog10isTimedOutEv>:

/**
 * Check whether the watchdog timed out.
 * @return true if there was a timeout
 */
bool Watchdog::isTimedOut() {
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	//TODO remove me later.
	return false;
 8008320:	2300      	movs	r3, #0
	if(xTaskGetTickCount() - m_lastWatchdogReset > m_timeoutMs) {
		return true;
	} else {
		return false;
	}
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
	...

08008330 <_Z13LED_RGB_Writehhh>:
void LED_RGB_Init() {
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Green LED
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	// Orange LED
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Red LED
}
void LED_RGB_Write(uint8_t green, uint8_t orange, uint8_t red) {
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
 800833a:	460b      	mov	r3, r1
 800833c:	71bb      	strb	r3, [r7, #6]
 800833e:	4613      	mov	r3, r2
 8008340:	717b      	strb	r3, [r7, #5]
	htim4.Instance->CCR1 = 255 - green;
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <_Z13LED_RGB_Writehhh+0x44>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 255 - orange;
 800834e:	79bb      	ldrb	r3, [r7, #6]
 8008350:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <_Z13LED_RGB_Writehhh+0x44>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 255 - red;
 800835a:	797b      	ldrb	r3, [r7, #5]
 800835c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8008360:	4b04      	ldr	r3, [pc, #16]	; (8008374 <_Z13LED_RGB_Writehhh+0x44>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20001278 	.word	0x20001278

08008378 <_Z15LED_Green_Writeh>:

void LED_Green_Write(uint8_t green) {
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR1 = 255 - green;
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <_Z15LED_Green_Writeh+0x24>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20001278 	.word	0x20001278

080083a0 <_Z16LED_Orange_Writeh>:
void LED_Orange_Write(uint8_t orange) {
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR2 = 255 - orange;
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80083b0:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <_Z16LED_Orange_Writeh+0x24>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20001278 	.word	0x20001278

080083c8 <_Z13LED_Red_Writeh>:
void LED_Red_Write(uint8_t red) {
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR3 = 255 - red;
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <_Z13LED_Red_Writeh+0x24>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	20001278 	.word	0x20001278

080083f0 <_ZN3can7signals19PDU_LPCh1_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	4613      	mov	r3, r2
 8008402:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800840e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008412:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008416:	eeb0 0a67 	vmov.f32	s0, s15
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <_ZN3can7signals20PDU_LPCh10_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00ull) >> 8);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	0a02      	lsrs	r2, r0, #8
 800843e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008442:	0a0b      	lsrs	r3, r1, #8
 8008444:	4613      	mov	r3, r2
 8008446:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008456:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800845a:	eeb0 0a67 	vmov.f32	s0, s15
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <_ZN3can7signals19PDU_LPCh2_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	0c02      	lsrs	r2, r0, #16
 8008482:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008486:	0c0b      	lsrs	r3, r1, #16
 8008488:	4613      	mov	r3, r2
 800848a:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008496:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800849a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800849e:	eeb0 0a67 	vmov.f32	s0, s15
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <_ZN3can7signals19PDU_LPCh3_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF000000ull) >> 24);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	0e02      	lsrs	r2, r0, #24
 80084c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80084ca:	0e0b      	lsrs	r3, r1, #24
 80084cc:	4613      	mov	r3, r2
 80084ce:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084de:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80084e2:	eeb0 0a67 	vmov.f32	s0, s15
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <_ZN3can7signals19PDU_LPCh8_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00000000ull) >> 32);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	000a      	movs	r2, r1
 800850a:	2300      	movs	r3, #0
 800850c:	4613      	mov	r3, r2
 800850e:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800851a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800851e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008522:	eeb0 0a67 	vmov.f32	s0, s15
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <_ZN3can7signals19PDU_LPCh9_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000000000ull) >> 40);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	0a0a      	lsrs	r2, r1, #8
 800854a:	2300      	movs	r3, #0
 800854c:	4613      	mov	r3, r2
 800854e:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800855a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800855e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008562:	eeb0 0a67 	vmov.f32	s0, s15
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <_ZN3can7signals19PDU_HPCh1_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	4613      	mov	r3, r2
 8008582:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800858e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008592:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008596:	eeb0 0a67 	vmov.f32	s0, s15
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <_ZN3can7signals19PDU_HPCh2_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00ull) >> 8);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	0a02      	lsrs	r2, r0, #8
 80085be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80085c2:	0a0b      	lsrs	r3, r1, #8
 80085c4:	4613      	mov	r3, r2
 80085c6:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085d6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80085da:	eeb0 0a67 	vmov.f32	s0, s15
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <_ZN3can7signals16PDU_D1_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	0c02      	lsrs	r2, r0, #16
 8008602:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008606:	0c0b      	lsrs	r3, r1, #16
 8008608:	4613      	mov	r3, r2
 800860a:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008616:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800861a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800861e:	eeb0 0a67 	vmov.f32	s0, s15
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <_ZN3can7signals16PDU_D2_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF000000ull) >> 24);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	f04f 0300 	mov.w	r3, #0
 8008644:	0e02      	lsrs	r2, r0, #24
 8008646:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800864a:	0e0b      	lsrs	r3, r1, #24
 800864c:	4613      	mov	r3, r2
 800864e:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800865a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800865e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008662:	eeb0 0a67 	vmov.f32	s0, s15
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <_ZN3can7signals16PDU_D3_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00000000ull) >> 32);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	000a      	movs	r2, r1
 800868a:	2300      	movs	r3, #0
 800868c:	4613      	mov	r3, r2
 800868e:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800869a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800869e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80086a2:	eeb0 0a67 	vmov.f32	s0, s15
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <_ZN3can7signals16PDU_D4_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000000000ull) >> 40);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	0a0a      	lsrs	r2, r1, #8
 80086ca:	2300      	movs	r3, #0
 80086cc:	4613      	mov	r3, r2
 80086ce:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80086de:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80086e2:	eeb0 0a67 	vmov.f32	s0, s15
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <_ZN3can7signals13PDU_RX_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008700:	f000 0201 	and.w	r2, r0, #1
 8008704:	2300      	movs	r3, #0
 8008706:	4313      	orrs	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	bf14      	ite	ne
 800870c:	2301      	movne	r3, #1
 800870e:	2300      	moveq	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
                return value;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <_ZN3can7signals17PDU_RX_ErrorReset3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008730:	f000 0202 	and.w	r2, r0, #2
 8008734:	2300      	movs	r3, #0
 8008736:	4313      	orrs	r3, r2
 8008738:	2b00      	cmp	r3, #0
 800873a:	bf14      	ite	ne
 800873c:	2301      	movne	r3, #1
 800873e:	2300      	moveq	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
                return value;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <_ZN3can7signals17PDU_RX_PEHWEnable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008760:	f000 0204 	and.w	r2, r0, #4
 8008764:	2300      	movs	r3, #0
 8008766:	4313      	orrs	r3, r2
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
                return value;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <_ZN3can7signals14PDU_TX_Enabled3setERyS2_Rhb>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 8008780:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8008784:	b087      	sub	sp, #28
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	7df9      	ldrb	r1, [r7, #23]
 800879c:	2900      	cmp	r1, #0
 800879e:	bf14      	ite	ne
 80087a0:	2101      	movne	r1, #1
 80087a2:	2100      	moveq	r1, #0
 80087a4:	b2c9      	uxtb	r1, r1
 80087a6:	b2c9      	uxtb	r1, r1
 80087a8:	2000      	movs	r0, #0
 80087aa:	460c      	mov	r4, r1
 80087ac:	4605      	mov	r5, r0
 80087ae:	ea42 0804 	orr.w	r8, r2, r4
 80087b2:	ea43 0905 	orr.w	r9, r3, r5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80087bc:	bf00      	nop
 80087be:	371c      	adds	r7, #28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80087c6:	4770      	bx	lr

080087c8 <_ZN3can7signals16PDU_TX_ErrorFlag3setERyS2_Rhb>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 80087c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80087cc:	b089      	sub	sp, #36	; 0x24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6178      	str	r0, [r7, #20]
 80087d2:	6139      	str	r1, [r7, #16]
 80087d4:	60fa      	str	r2, [r7, #12]
 80087d6:	72fb      	strb	r3, [r7, #11]
                bool rawValue = value;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	7ff9      	ldrb	r1, [r7, #31]
 80087e4:	2000      	movs	r0, #0
 80087e6:	460c      	mov	r4, r1
 80087e8:	4605      	mov	r5, r0
 80087ea:	1921      	adds	r1, r4, r4
 80087ec:	6039      	str	r1, [r7, #0]
 80087ee:	eb45 0105 	adc.w	r1, r5, r5
 80087f2:	6079      	str	r1, [r7, #4]
 80087f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087f8:	f000 0802 	and.w	r8, r0, #2
 80087fc:	f04f 0900 	mov.w	r9, #0
 8008800:	ea42 0a08 	orr.w	sl, r2, r8
 8008804:	ea43 0b09 	orr.w	fp, r3, r9
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800880e:	bf00      	nop
 8008810:	3724      	adds	r7, #36	; 0x24
 8008812:	46bd      	mov	sp, r7
 8008814:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008818:	4770      	bx	lr

0800881a <_ZN3can7signals18PDU_TX_PEHWEnabled3setERyS2_Rhb>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800881a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2200      	movs	r2, #0
 8008838:	4698      	mov	r8, r3
 800883a:	4691      	mov	r9, r2
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8008848:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800884c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8008850:	f002 0404 	and.w	r4, r2, #4
 8008854:	2500      	movs	r5, #0
 8008856:	ea40 0a04 	orr.w	sl, r0, r4
 800885a:	ea41 0b05 	orr.w	fp, r1, r5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008864:	bf00      	nop
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800886e:	4770      	bx	lr

08008870 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8008882:	edd7 7a00 	vldr	s15, [r7]
 8008886:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80088fc <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x8c>
 800888a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800888e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008892:	dd01      	ble.n	8008898 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x28>
                    value = max;
 8008894:	4b1a      	ldr	r3, [pc, #104]	; (8008900 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x90>)
 8008896:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8008898:	edd7 7a00 	vldr	s15, [r7]
 800889c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a4:	d502      	bpl.n	80088ac <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 80088ac:	edd7 7a00 	vldr	s15, [r7]
 80088b0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008904 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x94>
 80088b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80088b8:	eeb0 0a47 	vmov.f32	s0, s14
 80088bc:	f7f9 fee2 	bl	8002684 <_ZSt5roundf>
 80088c0:	eef0 7a40 	vmov.f32	s15, s0
 80088c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c8:	ee17 3a90 	vmov	r3, s15
 80088cc:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	8af9      	ldrh	r1, [r7, #22]
 80088d6:	2000      	movs	r0, #0
 80088d8:	468a      	mov	sl, r1
 80088da:	4683      	mov	fp, r0
 80088dc:	f3ca 040b 	ubfx	r4, sl, #0, #12
 80088e0:	2500      	movs	r5, #0
 80088e2:	ea42 0804 	orr.w	r8, r2, r4
 80088e6:	ea43 0905 	orr.w	r9, r3, r5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80088f0:	bf00      	nop
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fa:	bf00      	nop
 80088fc:	41830a3d 	.word	0x41830a3d
 8008900:	41830a3d 	.word	0x41830a3d
 8008904:	3b83126f 	.word	0x3b83126f

08008908 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800890c:	b088      	sub	sp, #32
 800890e:	af00      	add	r7, sp, #0
 8008910:	6178      	str	r0, [r7, #20]
 8008912:	6139      	str	r1, [r7, #16]
 8008914:	60fa      	str	r2, [r7, #12]
 8008916:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800891a:	edd7 7a02 	vldr	s15, [r7, #8]
 800891e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80089a4 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0x9c>
 8008922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892a:	dd01      	ble.n	8008930 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0x28>
                    value = max;
 800892c:	4b1e      	ldr	r3, [pc, #120]	; (80089a8 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0xa0>)
 800892e:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 8008930:	edd7 7a02 	vldr	s15, [r7, #8]
 8008934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893c:	d502      	bpl.n	8008944 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0x3c>
                    value = min;
 800893e:	f04f 0300 	mov.w	r3, #0
 8008942:	60bb      	str	r3, [r7, #8]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 8008944:	edd7 7a02 	vldr	s15, [r7, #8]
 8008948:	eddf 6a18 	vldr	s13, [pc, #96]	; 80089ac <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0xa4>
 800894c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008950:	eeb0 0a47 	vmov.f32	s0, s14
 8008954:	f7f9 fe96 	bl	8002684 <_ZSt5roundf>
 8008958:	eef0 7a40 	vmov.f32	s15, s0
 800895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008960:	ee17 3a90 	vmov	r3, s15
 8008964:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFF0000ull;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	8bf9      	ldrh	r1, [r7, #30]
 800896e:	2000      	movs	r0, #0
 8008970:	4688      	mov	r8, r1
 8008972:	4681      	mov	r9, r0
 8008974:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8008978:	6079      	str	r1, [r7, #4]
 800897a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800897e:	6039      	str	r1, [r7, #0]
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	f021 4470 	bic.w	r4, r1, #4026531840	; 0xf0000000
 8008986:	0c24      	lsrs	r4, r4, #16
 8008988:	0424      	lsls	r4, r4, #16
 800898a:	2500      	movs	r5, #0
 800898c:	ea42 0a04 	orr.w	sl, r2, r4
 8008990:	ea43 0b05 	orr.w	fp, r3, r5
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800899a:	bf00      	nop
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089a4:	41830a3d 	.word	0x41830a3d
 80089a8:	41830a3d 	.word	0x41830a3d
 80089ac:	3b83126f 	.word	0x3b83126f

080089b0 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80089b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
 80089be:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 80089c2:	edd7 7a00 	vldr	s15, [r7]
 80089c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008a48 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x98>
 80089ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d2:	dd01      	ble.n	80089d8 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x28>
                    value = max;
 80089d4:	4b1d      	ldr	r3, [pc, #116]	; (8008a4c <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x9c>)
 80089d6:	603b      	str	r3, [r7, #0]
                if (value < min) {
 80089d8:	edd7 7a00 	vldr	s15, [r7]
 80089dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e4:	d502      	bpl.n	80089ec <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80089e6:	f04f 0300 	mov.w	r3, #0
 80089ea:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 80089ec:	edd7 7a00 	vldr	s15, [r7]
 80089f0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8008a50 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0xa0>
 80089f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80089f8:	eeb0 0a47 	vmov.f32	s0, s14
 80089fc:	f7f9 fe42 	bl	8002684 <_ZSt5roundf>
 8008a00:	eef0 7a40 	vmov.f32	s15, s0
 8008a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a08:	ee17 3a90 	vmov	r3, s15
 8008a0c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFFF00000000ull;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a14:	8afb      	ldrh	r3, [r7, #22]
 8008a16:	2200      	movs	r2, #0
 8008a18:	469a      	mov	sl, r3
 8008a1a:	4693      	mov	fp, r2
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	4653      	mov	r3, sl
 8008a26:	2200      	movs	r2, #0
 8008a28:	2400      	movs	r4, #0
 8008a2a:	f3c3 050b 	ubfx	r5, r3, #0, #12
 8008a2e:	ea40 0804 	orr.w	r8, r0, r4
 8008a32:	ea41 0905 	orr.w	r9, r1, r5
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008a3c:	bf00      	nop
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a46:	bf00      	nop
 8008a48:	41830a3d 	.word	0x41830a3d
 8008a4c:	41830a3d 	.word	0x41830a3d
 8008a50:	3b83126f 	.word	0x3b83126f

08008a54 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8008a66:	edd7 7a00 	vldr	s15, [r7]
 8008a6a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008af0 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0x9c>
 8008a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a76:	dd01      	ble.n	8008a7c <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0x28>
                    value = max;
 8008a78:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0xa0>)
 8008a7a:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8008a7c:	edd7 7a00 	vldr	s15, [r7]
 8008a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a88:	d502      	bpl.n	8008a90 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8008a8a:	f04f 0300 	mov.w	r3, #0
 8008a8e:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 8008a90:	edd7 7a00 	vldr	s15, [r7]
 8008a94:	eddf 6a18 	vldr	s13, [pc, #96]	; 8008af8 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0xa4>
 8008a98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8008aa0:	f7f9 fdf0 	bl	8002684 <_ZSt5roundf>
 8008aa4:	eef0 7a40 	vmov.f32	s15, s0
 8008aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aac:	ee17 3a90 	vmov	r3, s15
 8008ab0:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ab8:	8afb      	ldrh	r3, [r7, #22]
 8008aba:	2200      	movs	r2, #0
 8008abc:	469a      	mov	sl, r3
 8008abe:	4693      	mov	fp, r2
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8008acc:	2200      	movs	r2, #0
 8008ace:	2400      	movs	r4, #0
 8008ad0:	f023 4570 	bic.w	r5, r3, #4026531840	; 0xf0000000
 8008ad4:	0c2d      	lsrs	r5, r5, #16
 8008ad6:	042d      	lsls	r5, r5, #16
 8008ad8:	ea40 0804 	orr.w	r8, r0, r4
 8008adc:	ea41 0905 	orr.w	r9, r1, r5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008ae6:	bf00      	nop
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008af0:	41830a3d 	.word	0x41830a3d
 8008af4:	41830a3d 	.word	0x41830a3d
 8008af8:	3b83126f 	.word	0x3b83126f

08008afc <_ZN3can7signals18PDU_HPCh1_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008afc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	2b0f      	cmp	r3, #15
 8008b10:	d901      	bls.n	8008b16 <_ZN3can7signals18PDU_HPCh1_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008b12:	230f      	movs	r3, #15
 8008b14:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFull;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	7df9      	ldrb	r1, [r7, #23]
 8008b22:	2000      	movs	r0, #0
 8008b24:	468a      	mov	sl, r1
 8008b26:	4683      	mov	fp, r0
 8008b28:	f00a 040f 	and.w	r4, sl, #15
 8008b2c:	2500      	movs	r5, #0
 8008b2e:	ea42 0804 	orr.w	r8, r2, r4
 8008b32:	ea43 0905 	orr.w	r9, r3, r5
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008b3c:	bf00      	nop
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b46:	4770      	bx	lr

08008b48 <_ZN3can7signals15PDU_HPCh1_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008b48:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b4c:	b087      	sub	sp, #28
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d901      	bls.n	8008b62 <_ZN3can7signals15PDU_HPCh1_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 4) & 0x30ull;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4698      	mov	r8, r3
 8008b72:	4691      	mov	r9, r2
 8008b74:	f04f 0200 	mov.w	r2, #0
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8008b80:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8008b84:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8008b88:	f002 0430 	and.w	r4, r2, #48	; 0x30
 8008b8c:	2500      	movs	r5, #0
 8008b8e:	ea40 0a04 	orr.w	sl, r0, r4
 8008b92:	ea41 0b05 	orr.w	fp, r1, r5
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008ba6:	4770      	bx	lr

08008ba8 <_ZN3can7signals15PDU_HPCh2_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008ba8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bac:	b087      	sub	sp, #28
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
 8008bb6:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d901      	bls.n	8008bc2 <_ZN3can7signals15PDU_HPCh2_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 6) & 0xC0ull;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	4691      	mov	r9, r2
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008be0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008be4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008be8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8008bec:	2500      	movs	r5, #0
 8008bee:	ea40 0a04 	orr.w	sl, r0, r4
 8008bf2:	ea41 0b05 	orr.w	fp, r1, r5
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008bfc:	bf00      	nop
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c06:	4770      	bx	lr

08008c08 <_ZN3can7signals18PDU_HPCh2_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008c08:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c0c:	b087      	sub	sp, #28
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
 8008c16:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	2b0f      	cmp	r3, #15
 8008c1c:	d901      	bls.n	8008c22 <_ZN3can7signals18PDU_HPCh2_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008c1e:	230f      	movs	r3, #15
 8008c20:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0xF00ull;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4698      	mov	r8, r3
 8008c32:	4691      	mov	r9, r2
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008c40:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8008c44:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8008c48:	f402 6470 	and.w	r4, r2, #3840	; 0xf00
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	ea40 0a04 	orr.w	sl, r0, r4
 8008c52:	ea41 0b05 	orr.w	fp, r1, r5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008c5c:	bf00      	nop
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c66:	4770      	bx	lr

08008c68 <_ZN3can7signals18PDU_HPCh3_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008c68:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c6c:	b087      	sub	sp, #28
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	2b0f      	cmp	r3, #15
 8008c7c:	d901      	bls.n	8008c82 <_ZN3can7signals18PDU_HPCh3_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008c7e:	230f      	movs	r3, #15
 8008c80:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4698      	mov	r8, r3
 8008c92:	4691      	mov	r9, r2
 8008c94:	f04f 0200 	mov.w	r2, #0
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8008ca0:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8008ca4:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8008ca8:	b294      	uxth	r4, r2
 8008caa:	2500      	movs	r5, #0
 8008cac:	ea40 0a04 	orr.w	sl, r0, r4
 8008cb0:	ea41 0b05 	orr.w	fp, r1, r5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008cc4:	4770      	bx	lr

08008cc6 <_ZN3can7signals15PDU_HPCh3_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008cc6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d901      	bls.n	8008ce0 <_ZN3can7signals15PDU_HPCh3_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0x30000ull;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2200      	movs	r2, #0
 8008cee:	4698      	mov	r8, r3
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	f04f 0200 	mov.w	r2, #0
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8008cfe:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8008d02:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8008d06:	f402 3440 	and.w	r4, r2, #196608	; 0x30000
 8008d0a:	2500      	movs	r5, #0
 8008d0c:	ea40 0a04 	orr.w	sl, r0, r4
 8008d10:	ea41 0b05 	orr.w	fp, r1, r5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d24:	4770      	bx	lr

08008d26 <_ZN3can7signals18PDU_HPCh4_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008d26:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	2b0f      	cmp	r3, #15
 8008d3a:	d901      	bls.n	8008d40 <_ZN3can7signals18PDU_HPCh4_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008d3c:	230f      	movs	r3, #15
 8008d3e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 18) & 0x3C0000ull;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4698      	mov	r8, r3
 8008d50:	4691      	mov	r9, r2
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	ea4f 4389 	mov.w	r3, r9, lsl #18
 8008d5e:	ea43 3398 	orr.w	r3, r3, r8, lsr #14
 8008d62:	ea4f 4288 	mov.w	r2, r8, lsl #18
 8008d66:	f402 1470 	and.w	r4, r2, #3932160	; 0x3c0000
 8008d6a:	2500      	movs	r5, #0
 8008d6c:	ea40 0a04 	orr.w	sl, r0, r4
 8008d70:	ea41 0b05 	orr.w	fp, r1, r5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d84:	4770      	bx	lr

08008d86 <_ZN3can7signals15PDU_HPCh4_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008d86:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d901      	bls.n	8008da0 <_ZN3can7signals15PDU_HPCh4_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 22) & 0xC00000ull;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	2200      	movs	r2, #0
 8008dae:	4698      	mov	r8, r3
 8008db0:	4691      	mov	r9, r2
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	f04f 0300 	mov.w	r3, #0
 8008dba:	ea4f 5389 	mov.w	r3, r9, lsl #22
 8008dbe:	ea43 2398 	orr.w	r3, r3, r8, lsr #10
 8008dc2:	ea4f 5288 	mov.w	r2, r8, lsl #22
 8008dc6:	f402 0440 	and.w	r4, r2, #12582912	; 0xc00000
 8008dca:	2500      	movs	r5, #0
 8008dcc:	ea40 0a04 	orr.w	sl, r0, r4
 8008dd0:	ea41 0b05 	orr.w	fp, r1, r5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008de4:	4770      	bx	lr

08008de6 <_ZN3can7signals16PDU_LPCh1_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df6:	f000 0201 	and.w	r2, r0, #1
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bf14      	ite	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	2300      	moveq	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
                return value;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <_ZN3can7signals16PDU_LPCh2_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e26:	f000 0202 	and.w	r2, r0, #2
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bf14      	ite	ne
 8008e32:	2301      	movne	r3, #1
 8008e34:	2300      	moveq	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
                return value;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <_ZN3can7signals16PDU_LPCh3_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e56:	f000 0204 	and.w	r2, r0, #4
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf14      	ite	ne
 8008e62:	2301      	movne	r3, #1
 8008e64:	2300      	moveq	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
                return value;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <_ZN3can7signals16PDU_LPCh4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8ull) >> 3);
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e86:	f000 0208 	and.w	r2, r0, #8
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
                return value;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <_ZN3can7signals16PDU_LPCh5_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008ea6:	b480      	push	{r7}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x10ull) >> 4);
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb6:	f000 0210 	and.w	r2, r0, #16
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bf14      	ite	ne
 8008ec2:	2301      	movne	r3, #1
 8008ec4:	2300      	moveq	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
                return value;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <_ZN3can7signals16PDU_LPCh6_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008ed6:	b480      	push	{r7}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x20ull) >> 5);
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee6:	f000 0220 	and.w	r2, r0, #32
 8008eea:	2300      	movs	r3, #0
 8008eec:	4313      	orrs	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bf14      	ite	ne
 8008ef2:	2301      	movne	r3, #1
 8008ef4:	2300      	moveq	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
                return value;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <_ZN3can7signals16PDU_LPCh7_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x40ull) >> 6);
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f16:	f000 0240 	and.w	r2, r0, #64	; 0x40
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
                return value;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <_ZN3can7signals16PDU_LPCh8_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x80ull) >> 7);
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f46:	f000 0280 	and.w	r2, r0, #128	; 0x80
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf14      	ite	ne
 8008f52:	2301      	movne	r3, #1
 8008f54:	2300      	moveq	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
                return value;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <_ZN3can7signals16PDU_LPCh9_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x100ull) >> 8);
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f76:	f400 7280 	and.w	r2, r0, #256	; 0x100
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bf14      	ite	ne
 8008f82:	2301      	movne	r3, #1
 8008f84:	2300      	moveq	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
                return value;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <_ZN3can7signals17PDU_LPCh10_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008f96:	b480      	push	{r7}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x200ull) >> 9);
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa6:	f400 7200 	and.w	r2, r0, #512	; 0x200
 8008faa:	2300      	movs	r3, #0
 8008fac:	4313      	orrs	r3, r2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bf14      	ite	ne
 8008fb2:	2301      	movne	r3, #1
 8008fb4:	2300      	moveq	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
                return value;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <_ZN3can7signals16PDU_HPCh1_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008fc6:	b480      	push	{r7}
 8008fc8:	b085      	sub	sp, #20
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x400ull) >> 10);
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd6:	f400 6280 	and.w	r2, r0, #1024	; 0x400
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bf14      	ite	ne
 8008fe2:	2301      	movne	r3, #1
 8008fe4:	2300      	moveq	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
                return value;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <_ZN3can7signals16PDU_HPCh2_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x800ull) >> 11);
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009006:	f400 6200 	and.w	r2, r0, #2048	; 0x800
 800900a:	2300      	movs	r3, #0
 800900c:	4313      	orrs	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	bf14      	ite	ne
 8009012:	2301      	movne	r3, #1
 8009014:	2300      	moveq	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
                return value;
 8009018:	7bfb      	ldrb	r3, [r7, #15]
            }
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <_ZN3can7signals16PDU_HPCh3_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1000ull) >> 12);
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009036:	f400 5280 	and.w	r2, r0, #4096	; 0x1000
 800903a:	2300      	movs	r3, #0
 800903c:	4313      	orrs	r3, r2
 800903e:	2b00      	cmp	r3, #0
 8009040:	bf14      	ite	ne
 8009042:	2301      	movne	r3, #1
 8009044:	2300      	moveq	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
                return value;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
            }
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <_ZN3can7signals16PDU_HPCh4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2000ull) >> 13);
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009066:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 800906a:	2300      	movs	r3, #0
 800906c:	4313      	orrs	r3, r2
 800906e:	2b00      	cmp	r3, #0
 8009070:	bf14      	ite	ne
 8009072:	2301      	movne	r3, #1
 8009074:	2300      	moveq	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
                return value;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
            }
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <_ZN3can7signals13PDU_D1_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4000ull) >> 14);
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009096:	f400 4280 	and.w	r2, r0, #16384	; 0x4000
 800909a:	2300      	movs	r3, #0
 800909c:	4313      	orrs	r3, r2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bf14      	ite	ne
 80090a2:	2301      	movne	r3, #1
 80090a4:	2300      	moveq	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]
                return value;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <_ZN3can7signals13PDU_D2_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8000ull) >> 15);
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c6:	f400 4200 	and.w	r2, r0, #32768	; 0x8000
 80090ca:	2300      	movs	r3, #0
 80090cc:	4313      	orrs	r3, r2
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bf14      	ite	ne
 80090d2:	2301      	movne	r3, #1
 80090d4:	2300      	moveq	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
                return value;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <_ZN3can7signals13PDU_D3_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x10000ull) >> 16);
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f6:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80090fa:	2300      	movs	r3, #0
 80090fc:	4313      	orrs	r3, r2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bf14      	ite	ne
 8009102:	2301      	movne	r3, #1
 8009104:	2300      	moveq	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
                return value;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
            }
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <_ZN3can7signals13PDU_D4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x20000ull) >> 17);
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009126:	f400 3200 	and.w	r2, r0, #131072	; 0x20000
 800912a:	2300      	movs	r3, #0
 800912c:	4313      	orrs	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf14      	ite	ne
 8009132:	2301      	movne	r3, #1
 8009134:	2300      	moveq	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
                return value;
 8009138:	7bfb      	ldrb	r3, [r7, #15]
            }
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <_ZN3can7signals14PDU_SDC_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x40000ull) >> 18);
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009156:	f400 2280 	and.w	r2, r0, #262144	; 0x40000
 800915a:	2300      	movs	r3, #0
 800915c:	4313      	orrs	r3, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	bf14      	ite	ne
 8009162:	2301      	movne	r3, #1
 8009164:	2300      	moveq	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
                return value;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
            }
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <_ZN3can7signals19PDU_LPCh10_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009176:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	2b0f      	cmp	r3, #15
 800918a:	d901      	bls.n	8009190 <_ZN3can7signals19PDU_LPCh10_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 800918c:	230f      	movs	r3, #15
 800918e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFull;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	7df9      	ldrb	r1, [r7, #23]
 800919c:	2000      	movs	r0, #0
 800919e:	468a      	mov	sl, r1
 80091a0:	4683      	mov	fp, r0
 80091a2:	f00a 040f 	and.w	r4, sl, #15
 80091a6:	2500      	movs	r5, #0
 80091a8:	ea42 0804 	orr.w	r8, r2, r4
 80091ac:	ea43 0905 	orr.w	r9, r3, r5
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80091c0:	4770      	bx	lr

080091c2 <_ZN3can7signals18PDU_LPCh1_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80091c2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	2b0f      	cmp	r3, #15
 80091d6:	d901      	bls.n	80091dc <_ZN3can7signals18PDU_LPCh1_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80091d8:	230f      	movs	r3, #15
 80091da:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 4) & 0xF0ull;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	2200      	movs	r2, #0
 80091ea:	4698      	mov	r8, r3
 80091ec:	4691      	mov	r9, r2
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80091fa:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80091fe:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8009202:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8009206:	2500      	movs	r5, #0
 8009208:	ea40 0a04 	orr.w	sl, r0, r4
 800920c:	ea41 0b05 	orr.w	fp, r1, r5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009216:	bf00      	nop
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009220:	4770      	bx	lr

08009222 <_ZN3can7signals18PDU_LPCh2_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009222:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	2b0f      	cmp	r3, #15
 8009236:	d901      	bls.n	800923c <_ZN3can7signals18PDU_LPCh2_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8009238:	230f      	movs	r3, #15
 800923a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0xF00ull;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2200      	movs	r2, #0
 800924a:	4698      	mov	r8, r3
 800924c:	4691      	mov	r9, r2
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800925a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800925e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8009262:	f402 6470 	and.w	r4, r2, #3840	; 0xf00
 8009266:	2500      	movs	r5, #0
 8009268:	ea40 0a04 	orr.w	sl, r0, r4
 800926c:	ea41 0b05 	orr.w	fp, r1, r5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009280:	4770      	bx	lr

08009282 <_ZN3can7signals18PDU_LPCh3_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009282:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	2b0f      	cmp	r3, #15
 8009296:	d901      	bls.n	800929c <_ZN3can7signals18PDU_LPCh3_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8009298:	230f      	movs	r3, #15
 800929a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	2200      	movs	r2, #0
 80092aa:	4698      	mov	r8, r3
 80092ac:	4691      	mov	r9, r2
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80092ba:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80092be:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80092c2:	b294      	uxth	r4, r2
 80092c4:	2500      	movs	r5, #0
 80092c6:	ea40 0a04 	orr.w	sl, r0, r4
 80092ca:	ea41 0b05 	orr.w	fp, r1, r5
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80092d4:	bf00      	nop
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80092de:	4770      	bx	lr

080092e0 <_ZN3can7signals18PDU_LPCh4_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80092e0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80092e4:	b087      	sub	sp, #28
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	2b0f      	cmp	r3, #15
 80092f4:	d901      	bls.n	80092fa <_ZN3can7signals18PDU_LPCh4_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80092f6:	230f      	movs	r3, #15
 80092f8:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xF0000ull;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2200      	movs	r2, #0
 8009308:	4698      	mov	r8, r3
 800930a:	4691      	mov	r9, r2
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8009318:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800931c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8009320:	f402 2470 	and.w	r4, r2, #983040	; 0xf0000
 8009324:	2500      	movs	r5, #0
 8009326:	ea40 0a04 	orr.w	sl, r0, r4
 800932a:	ea41 0b05 	orr.w	fp, r1, r5
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800933e:	4770      	bx	lr

08009340 <_ZN3can7signals18PDU_LPCh5_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009340:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009344:	b087      	sub	sp, #28
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	2b0f      	cmp	r3, #15
 8009354:	d901      	bls.n	800935a <_ZN3can7signals18PDU_LPCh5_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8009356:	230f      	movs	r3, #15
 8009358:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 20) & 0xF00000ull;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2200      	movs	r2, #0
 8009368:	4698      	mov	r8, r3
 800936a:	4691      	mov	r9, r2
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	ea4f 5309 	mov.w	r3, r9, lsl #20
 8009378:	ea43 3318 	orr.w	r3, r3, r8, lsr #12
 800937c:	ea4f 5208 	mov.w	r2, r8, lsl #20
 8009380:	f402 0470 	and.w	r4, r2, #15728640	; 0xf00000
 8009384:	2500      	movs	r5, #0
 8009386:	ea40 0a04 	orr.w	sl, r0, r4
 800938a:	ea41 0b05 	orr.w	fp, r1, r5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009394:	bf00      	nop
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800939e:	4770      	bx	lr

080093a0 <_ZN3can7signals18PDU_LPCh6_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80093a0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80093a4:	b089      	sub	sp, #36	; 0x24
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6178      	str	r0, [r7, #20]
 80093aa:	6139      	str	r1, [r7, #16]
 80093ac:	60fa      	str	r2, [r7, #12]
 80093ae:	72fb      	strb	r3, [r7, #11]
                if (value > max) {
 80093b0:	7afb      	ldrb	r3, [r7, #11]
 80093b2:	2b0f      	cmp	r3, #15
 80093b4:	d901      	bls.n	80093ba <_ZN3can7signals18PDU_LPCh6_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80093b6:	230f      	movs	r3, #15
 80093b8:	72fb      	strb	r3, [r7, #11]
                uint8_t rawValue = (value);
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xF000000ull;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	7ff9      	ldrb	r1, [r7, #31]
 80093c6:	2000      	movs	r0, #0
 80093c8:	4688      	mov	r8, r1
 80093ca:	4681      	mov	r9, r0
 80093cc:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80093d0:	6079      	str	r1, [r7, #4]
 80093d2:	ea4f 6108 	mov.w	r1, r8, lsl #24
 80093d6:	6039      	str	r1, [r7, #0]
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
 80093de:	2500      	movs	r5, #0
 80093e0:	ea42 0a04 	orr.w	sl, r2, r4
 80093e4:	ea43 0b05 	orr.w	fp, r3, r5
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80093ee:	bf00      	nop
 80093f0:	3724      	adds	r7, #36	; 0x24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80093f8:	4770      	bx	lr

080093fa <_ZN3can7signals18PDU_LPCh7_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80093fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80093fe:	b089      	sub	sp, #36	; 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6178      	str	r0, [r7, #20]
 8009404:	6139      	str	r1, [r7, #16]
 8009406:	60fa      	str	r2, [r7, #12]
 8009408:	72fb      	strb	r3, [r7, #11]
                if (value > max) {
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	2b0f      	cmp	r3, #15
 800940e:	d901      	bls.n	8009414 <_ZN3can7signals18PDU_LPCh7_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8009410:	230f      	movs	r3, #15
 8009412:	72fb      	strb	r3, [r7, #11]
                uint8_t rawValue = (value);
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 28) & 0xF0000000ull;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	7ff9      	ldrb	r1, [r7, #31]
 8009420:	2000      	movs	r0, #0
 8009422:	4688      	mov	r8, r1
 8009424:	4681      	mov	r9, r0
 8009426:	ea4f 1118 	mov.w	r1, r8, lsr #4
 800942a:	6079      	str	r1, [r7, #4]
 800942c:	ea4f 7108 	mov.w	r1, r8, lsl #28
 8009430:	6039      	str	r1, [r7, #0]
 8009432:	683c      	ldr	r4, [r7, #0]
 8009434:	2500      	movs	r5, #0
 8009436:	ea42 0a04 	orr.w	sl, r2, r4
 800943a:	ea43 0b05 	orr.w	fp, r3, r5
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009444:	bf00      	nop
 8009446:	3724      	adds	r7, #36	; 0x24
 8009448:	46bd      	mov	sp, r7
 800944a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800944e:	4770      	bx	lr

08009450 <_ZN3can7signals18PDU_LPCh8_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009450:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009454:	b087      	sub	sp, #28
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]
 800945e:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	2b0f      	cmp	r3, #15
 8009464:	d901      	bls.n	800946a <_ZN3can7signals18PDU_LPCh8_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8009466:	230f      	movs	r3, #15
 8009468:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xF00000000ull;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	2200      	movs	r2, #0
 8009478:	469a      	mov	sl, r3
 800947a:	4693      	mov	fp, r2
 800947c:	f04f 0200 	mov.w	r2, #0
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	4653      	mov	r3, sl
 8009486:	2200      	movs	r2, #0
 8009488:	2400      	movs	r4, #0
 800948a:	f003 050f 	and.w	r5, r3, #15
 800948e:	ea40 0804 	orr.w	r8, r0, r4
 8009492:	ea41 0905 	orr.w	r9, r1, r5
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80094a6:	4770      	bx	lr

080094a8 <_ZN3can7signals18PDU_LPCh9_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80094a8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80094ac:	b087      	sub	sp, #28
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
 80094b6:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	2b0f      	cmp	r3, #15
 80094bc:	d901      	bls.n	80094c2 <_ZN3can7signals18PDU_LPCh9_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80094be:	230f      	movs	r3, #15
 80094c0:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xF000000000ull;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	2200      	movs	r2, #0
 80094d0:	469a      	mov	sl, r3
 80094d2:	4693      	mov	fp, r2
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	f04f 0300 	mov.w	r3, #0
 80094dc:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80094e0:	2200      	movs	r2, #0
 80094e2:	2400      	movs	r4, #0
 80094e4:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 80094e8:	ea40 0804 	orr.w	r8, r0, r4
 80094ec:	ea41 0905 	orr.w	r9, r1, r5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009500:	4770      	bx	lr

08009502 <_ZN3can7signals16PDU_LPCh10_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009502:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	2b03      	cmp	r3, #3
 8009516:	d901      	bls.n	800951c <_ZN3can7signals16PDU_LPCh10_State3setERyS2_Rhh+0x1a>
                    value = max;
 8009518:	2303      	movs	r3, #3
 800951a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 40) & 0x30000000000ull;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2200      	movs	r2, #0
 800952a:	469a      	mov	sl, r3
 800952c:	4693      	mov	fp, r2
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	ea4f 230a 	mov.w	r3, sl, lsl #8
 800953a:	2200      	movs	r2, #0
 800953c:	2400      	movs	r4, #0
 800953e:	f403 7540 	and.w	r5, r3, #768	; 0x300
 8009542:	ea40 0804 	orr.w	r8, r0, r4
 8009546:	ea41 0905 	orr.w	r9, r1, r5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009550:	bf00      	nop
 8009552:	371c      	adds	r7, #28
 8009554:	46bd      	mov	sp, r7
 8009556:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800955a:	4770      	bx	lr

0800955c <_ZN3can7signals15PDU_LPCh1_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800955c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009560:	b087      	sub	sp, #28
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	2b03      	cmp	r3, #3
 8009570:	d901      	bls.n	8009576 <_ZN3can7signals15PDU_LPCh1_State3setERyS2_Rhh+0x1a>
                    value = max;
 8009572:	2303      	movs	r3, #3
 8009574:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 42) & 0xC0000000000ull;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2200      	movs	r2, #0
 8009584:	469a      	mov	sl, r3
 8009586:	4693      	mov	fp, r2
 8009588:	f04f 0200 	mov.w	r2, #0
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8009594:	2200      	movs	r2, #0
 8009596:	2400      	movs	r4, #0
 8009598:	f403 6540 	and.w	r5, r3, #3072	; 0xc00
 800959c:	ea40 0804 	orr.w	r8, r0, r4
 80095a0:	ea41 0905 	orr.w	r9, r1, r5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80095b4:	4770      	bx	lr

080095b6 <_ZN3can7signals15PDU_LPCh2_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80095b6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d901      	bls.n	80095d0 <_ZN3can7signals15PDU_LPCh2_State3setERyS2_Rhh+0x1a>
                    value = max;
 80095cc:	2303      	movs	r3, #3
 80095ce:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 44) & 0x300000000000ull;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2200      	movs	r2, #0
 80095de:	469a      	mov	sl, r3
 80095e0:	4693      	mov	fp, r2
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	ea4f 330a 	mov.w	r3, sl, lsl #12
 80095ee:	2200      	movs	r2, #0
 80095f0:	2400      	movs	r4, #0
 80095f2:	f403 5540 	and.w	r5, r3, #12288	; 0x3000
 80095f6:	ea40 0804 	orr.w	r8, r0, r4
 80095fa:	ea41 0905 	orr.w	r9, r1, r5
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009604:	bf00      	nop
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800960e:	4770      	bx	lr

08009610 <_ZN3can7signals15PDU_LPCh3_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009610:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009614:	b087      	sub	sp, #28
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
 800961e:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	2b03      	cmp	r3, #3
 8009624:	d901      	bls.n	800962a <_ZN3can7signals15PDU_LPCh3_State3setERyS2_Rhh+0x1a>
                    value = max;
 8009626:	2303      	movs	r3, #3
 8009628:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 46) & 0xC00000000000ull;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2200      	movs	r2, #0
 8009638:	469a      	mov	sl, r3
 800963a:	4693      	mov	fp, r2
 800963c:	f04f 0200 	mov.w	r2, #0
 8009640:	f04f 0300 	mov.w	r3, #0
 8009644:	ea4f 338a 	mov.w	r3, sl, lsl #14
 8009648:	2200      	movs	r2, #0
 800964a:	2400      	movs	r4, #0
 800964c:	f403 4540 	and.w	r5, r3, #49152	; 0xc000
 8009650:	ea40 0804 	orr.w	r8, r0, r4
 8009654:	ea41 0905 	orr.w	r9, r1, r5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800965e:	bf00      	nop
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009668:	4770      	bx	lr

0800966a <_ZN3can7signals15PDU_LPCh4_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800966a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d901      	bls.n	8009684 <_ZN3can7signals15PDU_LPCh4_State3setERyS2_Rhh+0x1a>
                    value = max;
 8009680:	2303      	movs	r3, #3
 8009682:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0x3000000000000ull;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	2200      	movs	r2, #0
 8009692:	469a      	mov	sl, r3
 8009694:	4693      	mov	fp, r2
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	f04f 0300 	mov.w	r3, #0
 800969e:	ea4f 430a 	mov.w	r3, sl, lsl #16
 80096a2:	2200      	movs	r2, #0
 80096a4:	2400      	movs	r4, #0
 80096a6:	f403 3540 	and.w	r5, r3, #196608	; 0x30000
 80096aa:	ea40 0804 	orr.w	r8, r0, r4
 80096ae:	ea41 0905 	orr.w	r9, r1, r5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80096b8:	bf00      	nop
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80096c2:	4770      	bx	lr

080096c4 <_ZN3can7signals15PDU_LPCh5_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80096c4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80096c8:	b087      	sub	sp, #28
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d901      	bls.n	80096de <_ZN3can7signals15PDU_LPCh5_State3setERyS2_Rhh+0x1a>
                    value = max;
 80096da:	2303      	movs	r3, #3
 80096dc:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 50) & 0xC000000000000ull;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	2200      	movs	r2, #0
 80096ec:	469a      	mov	sl, r3
 80096ee:	4693      	mov	fp, r2
 80096f0:	f04f 0200 	mov.w	r2, #0
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	ea4f 438a 	mov.w	r3, sl, lsl #18
 80096fc:	2200      	movs	r2, #0
 80096fe:	2400      	movs	r4, #0
 8009700:	f403 2540 	and.w	r5, r3, #786432	; 0xc0000
 8009704:	ea40 0804 	orr.w	r8, r0, r4
 8009708:	ea41 0905 	orr.w	r9, r1, r5
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800971c:	4770      	bx	lr

0800971e <_ZN3can7signals15PDU_LPCh6_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800971e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800972e:	78fb      	ldrb	r3, [r7, #3]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d901      	bls.n	8009738 <_ZN3can7signals15PDU_LPCh6_State3setERyS2_Rhh+0x1a>
                    value = max;
 8009734:	2303      	movs	r3, #3
 8009736:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 52) & 0x30000000000000ull;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	2200      	movs	r2, #0
 8009746:	469a      	mov	sl, r3
 8009748:	4693      	mov	fp, r2
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8009756:	2200      	movs	r2, #0
 8009758:	2400      	movs	r4, #0
 800975a:	f403 1540 	and.w	r5, r3, #3145728	; 0x300000
 800975e:	ea40 0804 	orr.w	r8, r0, r4
 8009762:	ea41 0905 	orr.w	r9, r1, r5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800976c:	bf00      	nop
 800976e:	371c      	adds	r7, #28
 8009770:	46bd      	mov	sp, r7
 8009772:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009776:	4770      	bx	lr

08009778 <_ZN3can7signals15PDU_LPCh7_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8009778:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800977c:	b087      	sub	sp, #28
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d901      	bls.n	8009792 <_ZN3can7signals15PDU_LPCh7_State3setERyS2_Rhh+0x1a>
                    value = max;
 800978e:	2303      	movs	r3, #3
 8009790:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 54) & 0xC0000000000000ull;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2200      	movs	r2, #0
 80097a0:	469a      	mov	sl, r3
 80097a2:	4693      	mov	fp, r2
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	f04f 0300 	mov.w	r3, #0
 80097ac:	ea4f 538a 	mov.w	r3, sl, lsl #22
 80097b0:	2200      	movs	r2, #0
 80097b2:	2400      	movs	r4, #0
 80097b4:	f403 0540 	and.w	r5, r3, #12582912	; 0xc00000
 80097b8:	ea40 0804 	orr.w	r8, r0, r4
 80097bc:	ea41 0905 	orr.w	r9, r1, r5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80097d0:	4770      	bx	lr

080097d2 <_ZN3can7signals15PDU_LPCh8_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80097d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d901      	bls.n	80097ec <_ZN3can7signals15PDU_LPCh8_State3setERyS2_Rhh+0x1a>
                    value = max;
 80097e8:	2303      	movs	r3, #3
 80097ea:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 56) & 0x300000000000000ull;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	2200      	movs	r2, #0
 80097fa:	469a      	mov	sl, r3
 80097fc:	4693      	mov	fp, r2
 80097fe:	f04f 0200 	mov.w	r2, #0
 8009802:	f04f 0300 	mov.w	r3, #0
 8009806:	ea4f 630a 	mov.w	r3, sl, lsl #24
 800980a:	2200      	movs	r2, #0
 800980c:	2400      	movs	r4, #0
 800980e:	f003 7540 	and.w	r5, r3, #50331648	; 0x3000000
 8009812:	ea40 0804 	orr.w	r8, r0, r4
 8009816:	ea41 0905 	orr.w	r9, r1, r5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009820:	bf00      	nop
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800982a:	4770      	bx	lr

0800982c <_ZN3can7signals15PDU_LPCh9_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800982c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009830:	b087      	sub	sp, #28
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	2b03      	cmp	r3, #3
 8009840:	d901      	bls.n	8009846 <_ZN3can7signals15PDU_LPCh9_State3setERyS2_Rhh+0x1a>
                    value = max;
 8009842:	2303      	movs	r3, #3
 8009844:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 58) & 0xC00000000000000ull;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	2200      	movs	r2, #0
 8009854:	469a      	mov	sl, r3
 8009856:	4693      	mov	fp, r2
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	ea4f 638a 	mov.w	r3, sl, lsl #26
 8009864:	2200      	movs	r2, #0
 8009866:	2400      	movs	r4, #0
 8009868:	f003 6540 	and.w	r5, r3, #201326592	; 0xc000000
 800986c:	ea40 0804 	orr.w	r8, r0, r4
 8009870:	ea41 0905 	orr.w	r9, r1, r5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009884:	4770      	bx	lr
	...

08009888 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800989a:	edd7 7a00 	vldr	s15, [r7]
 800989e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009914 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x8c>
 80098a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098aa:	dd01      	ble.n	80098b0 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x28>
                    value = max;
 80098ac:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x90>)
 80098ae:	603b      	str	r3, [r7, #0]
                if (value < min) {
 80098b0:	edd7 7a00 	vldr	s15, [r7]
 80098b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098bc:	d502      	bpl.n	80098c4 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 80098c4:	edd7 7a00 	vldr	s15, [r7]
 80098c8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800991c <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x94>
 80098cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80098d0:	eeb0 0a47 	vmov.f32	s0, s14
 80098d4:	f7f8 fed6 	bl	8002684 <_ZSt5roundf>
 80098d8:	eef0 7a40 	vmov.f32	s15, s0
 80098dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e0:	ee17 3a90 	vmov	r3, s15
 80098e4:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	8af9      	ldrh	r1, [r7, #22]
 80098ee:	2000      	movs	r0, #0
 80098f0:	468a      	mov	sl, r1
 80098f2:	4683      	mov	fp, r0
 80098f4:	f3ca 040b 	ubfx	r4, sl, #0, #12
 80098f8:	2500      	movs	r5, #0
 80098fa:	ea42 0804 	orr.w	r8, r2, r4
 80098fe:	ea43 0905 	orr.w	r9, r3, r5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009908:	bf00      	nop
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009912:	bf00      	nop
 8009914:	4223cccd 	.word	0x4223cccd
 8009918:	4223cccd 	.word	0x4223cccd
 800991c:	3c23d70a 	.word	0x3c23d70a

08009920 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009932:	edd7 7a00 	vldr	s15, [r7]
 8009936:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80099c8 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0xa8>
 800993a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009942:	dd01      	ble.n	8009948 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0x28>
                    value = max;
 8009944:	4b21      	ldr	r3, [pc, #132]	; (80099cc <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0xac>)
 8009946:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009948:	edd7 7a00 	vldr	s15, [r7]
 800994c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009954:	d502      	bpl.n	800995c <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0x3c>
                    value = min;
 8009956:	f04f 0300 	mov.w	r3, #0
 800995a:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 800995c:	edd7 7a00 	vldr	s15, [r7]
 8009960:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80099d0 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0xb0>
 8009964:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009968:	eeb0 0a47 	vmov.f32	s0, s14
 800996c:	f7f8 fe8a 	bl	8002684 <_ZSt5roundf>
 8009970:	eef0 7a40 	vmov.f32	s15, s0
 8009974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009978:	ee17 3a90 	vmov	r3, s15
 800997c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009984:	8afb      	ldrh	r3, [r7, #22]
 8009986:	2200      	movs	r2, #0
 8009988:	4698      	mov	r8, r3
 800998a:	4691      	mov	r9, r2
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8009998:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 800999c:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80099a0:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80099a4:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80099a8:	f024 040f 	bic.w	r4, r4, #15
 80099ac:	2500      	movs	r5, #0
 80099ae:	ea40 0a04 	orr.w	sl, r0, r4
 80099b2:	ea41 0b05 	orr.w	fp, r1, r5
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80099bc:	bf00      	nop
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099c6:	bf00      	nop
 80099c8:	4223cccd 	.word	0x4223cccd
 80099cc:	4223cccd 	.word	0x4223cccd
 80099d0:	3c23d70a 	.word	0x3c23d70a

080099d4 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, int8_t value) noexcept {
 80099d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80099d8:	b089      	sub	sp, #36	; 0x24
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6178      	str	r0, [r7, #20]
 80099de:	6139      	str	r1, [r7, #16]
 80099e0:	60fa      	str	r2, [r7, #12]
 80099e2:	72fb      	strb	r3, [r7, #11]
                if (value > max) {
 80099e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80099e8:	2b64      	cmp	r3, #100	; 0x64
 80099ea:	dd01      	ble.n	80099f0 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha+0x1c>
                    value = max;
 80099ec:	2364      	movs	r3, #100	; 0x64
 80099ee:	72fb      	strb	r3, [r7, #11]
                if (value < min) {
 80099f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da01      	bge.n	80099fc <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha+0x28>
                    value = min;
 80099f8:	2300      	movs	r3, #0
 80099fa:	72fb      	strb	r3, [r7, #11]
                int8_t rawValue = (value);
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFF000000ull;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8009a0a:	17c8      	asrs	r0, r1, #31
 8009a0c:	4688      	mov	r8, r1
 8009a0e:	4681      	mov	r9, r0
 8009a10:	ea4f 2128 	mov.w	r1, r8, asr #8
 8009a14:	6079      	str	r1, [r7, #4]
 8009a16:	ea4f 6108 	mov.w	r1, r8, lsl #24
 8009a1a:	6039      	str	r1, [r7, #0]
 8009a1c:	683c      	ldr	r4, [r7, #0]
 8009a1e:	2500      	movs	r5, #0
 8009a20:	ea42 0a04 	orr.w	sl, r2, r4
 8009a24:	ea43 0b05 	orr.w	fp, r3, r5
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009a2e:	bf00      	nop
 8009a30:	3724      	adds	r7, #36	; 0x24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009a38:	4770      	bx	lr
	...

08009a3c <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009a4e:	edd7 7a00 	vldr	s15, [r7]
 8009a52:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009ac8 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x8c>
 8009a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5e:	dd01      	ble.n	8009a64 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009a60:	4b1a      	ldr	r3, [pc, #104]	; (8009acc <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x90>)
 8009a62:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009a64:	edd7 7a00 	vldr	s15, [r7]
 8009a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a70:	d502      	bpl.n	8009a78 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009a78:	edd7 7a00 	vldr	s15, [r7]
 8009a7c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009ad0 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x94>
 8009a80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009a84:	eeb0 0a47 	vmov.f32	s0, s14
 8009a88:	f7f8 fdfc 	bl	8002684 <_ZSt5roundf>
 8009a8c:	eef0 7a40 	vmov.f32	s15, s0
 8009a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a94:	ee17 3a90 	vmov	r3, s15
 8009a98:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	8af9      	ldrh	r1, [r7, #22]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	468a      	mov	sl, r1
 8009aa6:	4683      	mov	fp, r0
 8009aa8:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8009aac:	2500      	movs	r5, #0
 8009aae:	ea42 0804 	orr.w	r8, r2, r4
 8009ab2:	ea43 0905 	orr.w	r9, r3, r5
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009abc:	bf00      	nop
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ac6:	bf00      	nop
 8009ac8:	41030a3d 	.word	0x41030a3d
 8009acc:	41030a3d 	.word	0x41030a3d
 8009ad0:	3b03126f 	.word	0x3b03126f

08009ad4 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009ae6:	edd7 7a00 	vldr	s15, [r7]
 8009aea:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009b7c <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0xa8>
 8009aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af6:	dd01      	ble.n	8009afc <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009af8:	4b21      	ldr	r3, [pc, #132]	; (8009b80 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0xac>)
 8009afa:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009afc:	edd7 7a00 	vldr	s15, [r7]
 8009b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	d502      	bpl.n	8009b10 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009b10:	edd7 7a00 	vldr	s15, [r7]
 8009b14:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8009b84 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0xb0>
 8009b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8009b20:	f7f8 fdb0 	bl	8002684 <_ZSt5roundf>
 8009b24:	eef0 7a40 	vmov.f32	s15, s0
 8009b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b2c:	ee17 3a90 	vmov	r3, s15
 8009b30:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b38:	8afb      	ldrh	r3, [r7, #22]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4698      	mov	r8, r3
 8009b3e:	4691      	mov	r9, r2
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8009b4c:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8009b50:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8009b54:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8009b58:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009b5c:	f024 040f 	bic.w	r4, r4, #15
 8009b60:	2500      	movs	r5, #0
 8009b62:	ea40 0a04 	orr.w	sl, r0, r4
 8009b66:	ea41 0b05 	orr.w	fp, r1, r5
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009b70:	bf00      	nop
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b7a:	bf00      	nop
 8009b7c:	41030a3d 	.word	0x41030a3d
 8009b80:	41030a3d 	.word	0x41030a3d
 8009b84:	3b03126f 	.word	0x3b03126f

08009b88 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b8c:	b088      	sub	sp, #32
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6178      	str	r0, [r7, #20]
 8009b92:	6139      	str	r1, [r7, #16]
 8009b94:	60fa      	str	r2, [r7, #12]
 8009b96:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8009b9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b9e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009c24 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0x9c>
 8009ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009baa:	dd01      	ble.n	8009bb0 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009bac:	4b1e      	ldr	r3, [pc, #120]	; (8009c28 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0xa0>)
 8009bae:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 8009bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbc:	d502      	bpl.n	8009bc4 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	60bb      	str	r3, [r7, #8]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bc8:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009c2c <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0xa4>
 8009bcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8009bd4:	f7f8 fd56 	bl	8002684 <_ZSt5roundf>
 8009bd8:	eef0 7a40 	vmov.f32	s15, s0
 8009bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009be0:	ee17 3a90 	vmov	r3, s15
 8009be4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	8bf9      	ldrh	r1, [r7, #30]
 8009bee:	2000      	movs	r0, #0
 8009bf0:	468a      	mov	sl, r1
 8009bf2:	4683      	mov	fp, r0
 8009bf4:	ea4f 291a 	mov.w	r9, sl, lsr #8
 8009bf8:	ea4f 680a 	mov.w	r8, sl, lsl #24
 8009bfc:	f008 447f 	and.w	r4, r8, #4278190080	; 0xff000000
 8009c00:	f009 050f 	and.w	r5, r9, #15
 8009c04:	ea42 0104 	orr.w	r1, r2, r4
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	432b      	orrs	r3, r5
 8009c0c:	607b      	str	r3, [r7, #4]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c14:	e9c3 1200 	strd	r1, r2, [r3]
            }
 8009c18:	bf00      	nop
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c22:	bf00      	nop
 8009c24:	41030a3d 	.word	0x41030a3d
 8009c28:	41030a3d 	.word	0x41030a3d
 8009c2c:	3b03126f 	.word	0x3b03126f

08009c30 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c34:	b086      	sub	sp, #24
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009c42:	edd7 7a00 	vldr	s15, [r7]
 8009c46:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009ccc <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0x9c>
 8009c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c52:	dd01      	ble.n	8009c58 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009c54:	4b1e      	ldr	r3, [pc, #120]	; (8009cd0 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0xa0>)
 8009c56:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009c58:	edd7 7a00 	vldr	s15, [r7]
 8009c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	d502      	bpl.n	8009c6c <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009c6c:	edd7 7a00 	vldr	s15, [r7]
 8009c70:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009cd4 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0xa4>
 8009c74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009c78:	eeb0 0a47 	vmov.f32	s0, s14
 8009c7c:	f7f8 fd02 	bl	8002684 <_ZSt5roundf>
 8009c80:	eef0 7a40 	vmov.f32	s15, s0
 8009c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c88:	ee17 3a90 	vmov	r3, s15
 8009c8c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c94:	8afb      	ldrh	r3, [r7, #22]
 8009c96:	2200      	movs	r2, #0
 8009c98:	469a      	mov	sl, r3
 8009c9a:	4693      	mov	fp, r2
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2400      	movs	r4, #0
 8009cac:	f023 050f 	bic.w	r5, r3, #15
 8009cb0:	042d      	lsls	r5, r5, #16
 8009cb2:	0c2d      	lsrs	r5, r5, #16
 8009cb4:	ea40 0804 	orr.w	r8, r0, r4
 8009cb8:	ea41 0905 	orr.w	r9, r1, r5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009cc2:	bf00      	nop
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ccc:	41030a3d 	.word	0x41030a3d
 8009cd0:	41030a3d 	.word	0x41030a3d
 8009cd4:	3b03126f 	.word	0x3b03126f

08009cd8 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cdc:	b086      	sub	sp, #24
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009cea:	edd7 7a00 	vldr	s15, [r7]
 8009cee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009d74 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0x9c>
 8009cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	dd01      	ble.n	8009d00 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0xa0>)
 8009cfe:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009d00:	edd7 7a00 	vldr	s15, [r7]
 8009d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0c:	d502      	bpl.n	8009d14 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009d14:	edd7 7a00 	vldr	s15, [r7]
 8009d18:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009d7c <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0xa4>
 8009d1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009d20:	eeb0 0a47 	vmov.f32	s0, s14
 8009d24:	f7f8 fcae 	bl	8002684 <_ZSt5roundf>
 8009d28:	eef0 7a40 	vmov.f32	s15, s0
 8009d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d30:	ee17 3a90 	vmov	r3, s15
 8009d34:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d3c:	8afb      	ldrh	r3, [r7, #22]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	469a      	mov	sl, r3
 8009d42:	4693      	mov	fp, r2
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8009d50:	2200      	movs	r2, #0
 8009d52:	2400      	movs	r4, #0
 8009d54:	f023 4570 	bic.w	r5, r3, #4026531840	; 0xf0000000
 8009d58:	0c2d      	lsrs	r5, r5, #16
 8009d5a:	042d      	lsls	r5, r5, #16
 8009d5c:	ea40 0804 	orr.w	r8, r0, r4
 8009d60:	ea41 0905 	orr.w	r9, r1, r5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009d6a:	bf00      	nop
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d74:	41030a3d 	.word	0x41030a3d
 8009d78:	41030a3d 	.word	0x41030a3d
 8009d7c:	3b03126f 	.word	0x3b03126f

08009d80 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d84:	b086      	sub	sp, #24
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009d92:	edd7 7a00 	vldr	s15, [r7]
 8009d96:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009e0c <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x8c>
 8009d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da2:	dd01      	ble.n	8009da8 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009da4:	4b1a      	ldr	r3, [pc, #104]	; (8009e10 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x90>)
 8009da6:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009da8:	edd7 7a00 	vldr	s15, [r7]
 8009dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db4:	d502      	bpl.n	8009dbc <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009db6:	f04f 0300 	mov.w	r3, #0
 8009dba:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009dbc:	edd7 7a00 	vldr	s15, [r7]
 8009dc0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009e14 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x94>
 8009dc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8009dcc:	f7f8 fc5a 	bl	8002684 <_ZSt5roundf>
 8009dd0:	eef0 7a40 	vmov.f32	s15, s0
 8009dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd8:	ee17 3a90 	vmov	r3, s15
 8009ddc:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	8af9      	ldrh	r1, [r7, #22]
 8009de6:	2000      	movs	r0, #0
 8009de8:	468a      	mov	sl, r1
 8009dea:	4683      	mov	fp, r0
 8009dec:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8009df0:	2500      	movs	r5, #0
 8009df2:	ea42 0804 	orr.w	r8, r2, r4
 8009df6:	ea43 0905 	orr.w	r9, r3, r5
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009e00:	bf00      	nop
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0a:	bf00      	nop
 8009e0c:	41030a3d 	.word	0x41030a3d
 8009e10:	41030a3d 	.word	0x41030a3d
 8009e14:	3b03126f 	.word	0x3b03126f

08009e18 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e1c:	b086      	sub	sp, #24
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009e2a:	edd7 7a00 	vldr	s15, [r7]
 8009e2e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009ec0 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0xa8>
 8009e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3a:	dd01      	ble.n	8009e40 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009e3c:	4b21      	ldr	r3, [pc, #132]	; (8009ec4 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0xac>)
 8009e3e:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009e40:	edd7 7a00 	vldr	s15, [r7]
 8009e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4c:	d502      	bpl.n	8009e54 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009e54:	edd7 7a00 	vldr	s15, [r7]
 8009e58:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8009ec8 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0xb0>
 8009e5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009e60:	eeb0 0a47 	vmov.f32	s0, s14
 8009e64:	f7f8 fc0e 	bl	8002684 <_ZSt5roundf>
 8009e68:	eef0 7a40 	vmov.f32	s15, s0
 8009e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e70:	ee17 3a90 	vmov	r3, s15
 8009e74:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e7c:	8afb      	ldrh	r3, [r7, #22]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	4698      	mov	r8, r3
 8009e82:	4691      	mov	r9, r2
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8009e90:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8009e94:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8009e98:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8009e9c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009ea0:	f024 040f 	bic.w	r4, r4, #15
 8009ea4:	2500      	movs	r5, #0
 8009ea6:	ea40 0a04 	orr.w	sl, r0, r4
 8009eaa:	ea41 0b05 	orr.w	fp, r1, r5
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009eb4:	bf00      	nop
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ebe:	bf00      	nop
 8009ec0:	41030a3d 	.word	0x41030a3d
 8009ec4:	41030a3d 	.word	0x41030a3d
 8009ec8:	3b03126f 	.word	0x3b03126f

08009ecc <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ed0:	b088      	sub	sp, #32
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6178      	str	r0, [r7, #20]
 8009ed6:	6139      	str	r1, [r7, #16]
 8009ed8:	60fa      	str	r2, [r7, #12]
 8009eda:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8009ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ee2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009f68 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0x9c>
 8009ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eee:	dd01      	ble.n	8009ef4 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009ef0:	4b1e      	ldr	r3, [pc, #120]	; (8009f6c <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0xa0>)
 8009ef2:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 8009ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f00:	d502      	bpl.n	8009f08 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	60bb      	str	r3, [r7, #8]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f0c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009f70 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0xa4>
 8009f10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009f14:	eeb0 0a47 	vmov.f32	s0, s14
 8009f18:	f7f8 fbb4 	bl	8002684 <_ZSt5roundf>
 8009f1c:	eef0 7a40 	vmov.f32	s15, s0
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	ee17 3a90 	vmov	r3, s15
 8009f28:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	8bf9      	ldrh	r1, [r7, #30]
 8009f32:	2000      	movs	r0, #0
 8009f34:	468a      	mov	sl, r1
 8009f36:	4683      	mov	fp, r0
 8009f38:	ea4f 291a 	mov.w	r9, sl, lsr #8
 8009f3c:	ea4f 680a 	mov.w	r8, sl, lsl #24
 8009f40:	f008 447f 	and.w	r4, r8, #4278190080	; 0xff000000
 8009f44:	f009 050f 	and.w	r5, r9, #15
 8009f48:	ea42 0104 	orr.w	r1, r2, r4
 8009f4c:	6039      	str	r1, [r7, #0]
 8009f4e:	432b      	orrs	r3, r5
 8009f50:	607b      	str	r3, [r7, #4]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f58:	e9c3 1200 	strd	r1, r2, [r3]
            }
 8009f5c:	bf00      	nop
 8009f5e:	3720      	adds	r7, #32
 8009f60:	46bd      	mov	sp, r7
 8009f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f66:	bf00      	nop
 8009f68:	41030a3d 	.word	0x41030a3d
 8009f6c:	41030a3d 	.word	0x41030a3d
 8009f70:	3b03126f 	.word	0x3b03126f

08009f74 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	607a      	str	r2, [r7, #4]
 8009f82:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009f86:	edd7 7a00 	vldr	s15, [r7]
 8009f8a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a010 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0x9c>
 8009f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f96:	dd01      	ble.n	8009f9c <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009f98:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0xa0>)
 8009f9a:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009f9c:	edd7 7a00 	vldr	s15, [r7]
 8009fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa8:	d502      	bpl.n	8009fb0 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009faa:	f04f 0300 	mov.w	r3, #0
 8009fae:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009fb0:	edd7 7a00 	vldr	s15, [r7]
 8009fb4:	eddf 6a18 	vldr	s13, [pc, #96]	; 800a018 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0xa4>
 8009fb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8009fc0:	f7f8 fb60 	bl	8002684 <_ZSt5roundf>
 8009fc4:	eef0 7a40 	vmov.f32	s15, s0
 8009fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fcc:	ee17 3a90 	vmov	r3, s15
 8009fd0:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fd8:	8afb      	ldrh	r3, [r7, #22]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	469a      	mov	sl, r3
 8009fde:	4693      	mov	fp, r2
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8009fec:	2200      	movs	r2, #0
 8009fee:	2400      	movs	r4, #0
 8009ff0:	f023 050f 	bic.w	r5, r3, #15
 8009ff4:	042d      	lsls	r5, r5, #16
 8009ff6:	0c2d      	lsrs	r5, r5, #16
 8009ff8:	ea40 0804 	orr.w	r8, r0, r4
 8009ffc:	ea41 0905 	orr.w	r9, r1, r5
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800a006:	bf00      	nop
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a010:	41030a3d 	.word	0x41030a3d
 800a014:	41030a3d 	.word	0x41030a3d
 800a018:	3b03126f 	.word	0x3b03126f

0800a01c <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800a01c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a020:	b086      	sub	sp, #24
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800a02e:	edd7 7a00 	vldr	s15, [r7]
 800a032:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a0b8 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0x9c>
 800a036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03e:	dd01      	ble.n	800a044 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0x28>
                    value = max;
 800a040:	4b1e      	ldr	r3, [pc, #120]	; (800a0bc <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0xa0>)
 800a042:	603b      	str	r3, [r7, #0]
                if (value < min) {
 800a044:	edd7 7a00 	vldr	s15, [r7]
 800a048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a050:	d502      	bpl.n	800a058 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0x3c>
                    value = min;
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 800a058:	edd7 7a00 	vldr	s15, [r7]
 800a05c:	eddf 6a18 	vldr	s13, [pc, #96]	; 800a0c0 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0xa4>
 800a060:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a064:	eeb0 0a47 	vmov.f32	s0, s14
 800a068:	f7f8 fb0c 	bl	8002684 <_ZSt5roundf>
 800a06c:	eef0 7a40 	vmov.f32	s15, s0
 800a070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a074:	ee17 3a90 	vmov	r3, s15
 800a078:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a080:	8afb      	ldrh	r3, [r7, #22]
 800a082:	2200      	movs	r2, #0
 800a084:	469a      	mov	sl, r3
 800a086:	4693      	mov	fp, r2
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800a094:	2200      	movs	r2, #0
 800a096:	2400      	movs	r4, #0
 800a098:	f023 4570 	bic.w	r5, r3, #4026531840	; 0xf0000000
 800a09c:	0c2d      	lsrs	r5, r5, #16
 800a09e:	042d      	lsls	r5, r5, #16
 800a0a0:	ea40 0804 	orr.w	r8, r0, r4
 800a0a4:	ea41 0905 	orr.w	r9, r1, r5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800a0ae:	bf00      	nop
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0b8:	41030a3d 	.word	0x41030a3d
 800a0bc:	41030a3d 	.word	0x41030a3d
 800a0c0:	3b03126f 	.word	0x3b03126f

0800a0c4 <_ZN20AdcChannelControllerC1Ev>:
	AdcChannelController() : m_module(nullptr), m_channel(nullptr){
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	605a      	str	r2, [r3, #4]
	}
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	f240 511a 	movw	r1, #1306	; 0x51a
 800a0f8:	f7f6 ff48 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1Ev>:
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	2300      	movs	r3, #0
 800a112:	2208      	movs	r2, #8
 800a114:	f240 211a 	movw	r1, #538	; 0x21a
 800a118:	f7f6 ff38 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEEC1Ev>:
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	2300      	movs	r3, #0
 800a132:	2208      	movs	r2, #8
 800a134:	f240 419a 	movw	r1, #1178	; 0x49a
 800a138:	f7f6 ff28 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEEC1Ev>:
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	2300      	movs	r3, #0
 800a152:	2203      	movs	r2, #3
 800a154:	f240 219a 	movw	r1, #666	; 0x29a
 800a158:	f7f6 ff18 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1Ev>:
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	2300      	movs	r3, #0
 800a172:	2201      	movs	r2, #1
 800a174:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800a178:	f7f6 ff08 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <_ZN16OutputChannelPwmC1Ebf>:
	bool m_shortCircuitResetOngoing = false;

	using OUTPUT_STATE = can::signals::PDU_LPCh1_State;

public:
	OutputChannelPwm(bool _on = false, float _duty = 100.0f) :
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	460b      	mov	r3, r1
 800a190:	ed87 0a01 	vstr	s0, [r7, #4]
 800a194:	72fb      	strb	r3, [r7, #11]
			m_on { _on }, m_duty { _duty }, m_switchOn { _on } {
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	7afa      	ldrb	r2, [r7, #11]
 800a19a:	711a      	strb	r2, [r3, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	609a      	str	r2, [r3, #8]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	7afa      	ldrb	r2, [r7, #11]
 800a1a6:	731a      	strb	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	611a      	str	r2, [r3, #16]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	751a      	strb	r2, [r3, #20]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	755a      	strb	r2, [r3, #21]
		m_lastChange = xTaskGetTickCount();
 800a1ba:	f00f fecf 	bl	8019f5c <xTaskGetTickCount>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	611a      	str	r2, [r3, #16]
	}
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <_ZN16OutputChannelPwm3setEbf>:

	void set(bool _on, float _duty = -100.0f) {
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	ed87 0a01 	vstr	s0, [r7, #4]
 800a1dc:	72fb      	strb	r3, [r7, #11]
		if (_on != m_on || (_duty >= 0.0f && _duty != m_duty)) {
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	791b      	ldrb	r3, [r3, #4]
 800a1e2:	7afa      	ldrb	r2, [r7, #11]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d111      	bne.n	800a20c <_ZN16OutputChannelPwm3setEbf+0x3e>
 800a1e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f4:	da00      	bge.n	800a1f8 <_ZN16OutputChannelPwm3setEbf+0x2a>

			if (!m_on) {
				m_shortCircuitsDetected = 0;
			}
		}
	}
 800a1f6:	e02a      	b.n	800a24e <_ZN16OutputChannelPwm3setEbf+0x80>
		if (_on != m_on || (_duty >= 0.0f && _duty != m_duty)) {
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1fe:	ed97 7a01 	vldr	s14, [r7, #4]
 800a202:	eeb4 7a67 	vcmp.f32	s14, s15
 800a206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20a:	d020      	beq.n	800a24e <_ZN16OutputChannelPwm3setEbf+0x80>
			m_lastChange = xTaskGetTickCount();
 800a20c:	f00f fea6 	bl	8019f5c <xTaskGetTickCount>
 800a210:	4602      	mov	r2, r0
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	611a      	str	r2, [r3, #16]
			m_on = _on;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	7afa      	ldrb	r2, [r7, #11]
 800a21a:	711a      	strb	r2, [r3, #4]
			if (m_duty >= 0.0f) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22a:	db02      	blt.n	800a232 <_ZN16OutputChannelPwm3setEbf+0x64>
				m_duty = _duty;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	609a      	str	r2, [r3, #8]
			m_switchOn = m_on;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	791a      	ldrb	r2, [r3, #4]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	731a      	strb	r2, [r3, #12]
			if (!m_on) {
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	791b      	ldrb	r3, [r3, #4]
 800a23e:	f083 0301 	eor.w	r3, r3, #1
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <_ZN16OutputChannelPwm3setEbf+0x80>
				m_shortCircuitsDetected = 0;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	751a      	strb	r2, [r3, #20]
	}
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <_ZN16OutputChannelPwm7setDutyEf>:
	void setDuty(float _duty) {
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	ed87 0a00 	vstr	s0, [r7]
		m_duty = _duty;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	609a      	str	r2, [r3, #8]
	}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <_ZNK16OutputChannelPwm7getDutyEv>:
	float getDuty() const {
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
		return m_duty;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	ee07 3a90 	vmov	s15, r3
	}
 800a284:	eeb0 0a67 	vmov.f32	s0, s15
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <_ZNK16OutputChannelPwm3getEv>:
	bool get() const {
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
		return m_on;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	791b      	ldrb	r3, [r3, #4]
	}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>:

	bool getSwitch() const {
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
		return m_switchOn;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7b1b      	ldrb	r3, [r3, #12]
	}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>:

	void setCurrent(float _current) {
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	ed87 0a00 	vstr	s0, [r7]
		m_current = _current;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	601a      	str	r2, [r3, #0]
	}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <_ZN16OutputChannelPwm9getStatusEv>:

	uint8_t getStatus() {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
		if (xTaskGetTickCount() - m_lastChange >= m_waitingPeriodAfterChange) {
 800a2e8:	f00f fe38 	bl	8019f5c <xTaskGetTickCount>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b7c      	cmp	r3, #124	; 0x7c
 800a2f6:	bf8c      	ite	hi
 800a2f8:	2301      	movhi	r3, #1
 800a2fa:	2300      	movls	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d013      	beq.n	800a32a <_ZN16OutputChannelPwm9getStatusEv+0x4a>
			if (m_current >= m_errorCurrent) {
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	edd3 7a00 	vldr	s15, [r3]
 800a308:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800a30c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a314:	db07      	blt.n	800a326 <_ZN16OutputChannelPwm9getStatusEv+0x46>
				if (m_on) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	791b      	ldrb	r3, [r3, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <_ZN16OutputChannelPwm9getStatusEv+0x42>
					return OUTPUT_STATE::OUTPUT_SHORT_CIRCUIT;
 800a31e:	2302      	movs	r3, #2
 800a320:	e004      	b.n	800a32c <_ZN16OutputChannelPwm9getStatusEv+0x4c>
				} else {
					return OUTPUT_STATE::EXTERNAL_VOLTAGE;
 800a322:	2303      	movs	r3, #3
 800a324:	e002      	b.n	800a32c <_ZN16OutputChannelPwm9getStatusEv+0x4c>
				}
			} else {
				return OUTPUT_STATE::OK;
 800a326:	2300      	movs	r3, #0
 800a328:	e000      	b.n	800a32c <_ZN16OutputChannelPwm9getStatusEv+0x4c>
			}
		} else {
			return OUTPUT_STATE::STATUS_CHANGE_PENDING;
 800a32a:	2301      	movs	r3, #1
		}
	}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <_ZN16OutputChannelPwm9numShortsEv>:

	uint8_t numShorts() {
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
		return m_shortCircuitsDetected;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	7d1b      	ldrb	r3, [r3, #20]
	}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <_ZN16OutputChannelPwm6updateEv>:

	void update() {
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
		uint8_t status = getStatus();
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff ffc3 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]

		if (status == OUTPUT_STATE::OUTPUT_SHORT_CIRCUIT) {
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d114      	bne.n	800a38e <_ZN16OutputChannelPwm6updateEv+0x42>
			if (m_shortCircuitsDetected <= m_shortCircuitResetAttempts) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	7d1b      	ldrb	r3, [r3, #20]
 800a368:	2b0e      	cmp	r3, #14
 800a36a:	d810      	bhi.n	800a38e <_ZN16OutputChannelPwm6updateEv+0x42>
				m_shortCircuitsDetected++;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	7d1b      	ldrb	r3, [r3, #20]
 800a370:	3301      	adds	r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	751a      	strb	r2, [r3, #20]

				m_switchOn = false;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	731a      	strb	r2, [r3, #12]
				m_lastChange = xTaskGetTickCount();
 800a37e:	f00f fded 	bl	8019f5c <xTaskGetTickCount>
 800a382:	4602      	mov	r2, r0
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	611a      	str	r2, [r3, #16]
				m_shortCircuitResetOngoing = true;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	755a      	strb	r2, [r3, #21]
			}
		}

		status = getStatus();
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff ffa6 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]

		if (m_shortCircuitResetOngoing
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	7d5b      	ldrb	r3, [r3, #21]
				&& xTaskGetTickCount() - m_lastChange >= 20) {//  status != OUTPUT_STATE::STATUS_CHANGE_PENDING
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <_ZN16OutputChannelPwm6updateEv+0x68>
 800a3a0:	f00f fddc 	bl	8019f5c <xTaskGetTickCount>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b13      	cmp	r3, #19
 800a3ae:	d901      	bls.n	800a3b4 <_ZN16OutputChannelPwm6updateEv+0x68>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e000      	b.n	800a3b6 <_ZN16OutputChannelPwm6updateEv+0x6a>
 800a3b4:	2300      	movs	r3, #0
		if (m_shortCircuitResetOngoing
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <_ZN16OutputChannelPwm6updateEv+0x84>
			m_switchOn = true;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	731a      	strb	r2, [r3, #12]
			m_lastChange = xTaskGetTickCount();
 800a3c0:	f00f fdcc 	bl	8019f5c <xTaskGetTickCount>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	611a      	str	r2, [r3, #16]
			m_shortCircuitResetOngoing = false;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	755a      	strb	r2, [r3, #21]
		}
	}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <_ZN13OutputChannelC1Eb>:

};

class OutputChannel: public OutputChannelPwm {
public:
	OutputChannel(bool _on = false) :
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
			OutputChannelPwm { _on, 100.0f } {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800a400 <_ZN13OutputChannelC1Eb+0x28>
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fec9 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
	}
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	42c80000 	.word	0x42c80000

0800a404 <_ZN14PduOutputStateC1Ev>:
	;
};

// All output channels of the PDU with the initial states
typedef struct PduOutputState {
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a412:	2101      	movs	r1, #1
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff feb6 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3318      	adds	r3, #24
 800a41e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a422:	2101      	movs	r1, #1
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff feae 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3330      	adds	r3, #48	; 0x30
 800a42e:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a432:	2101      	movs	r1, #1
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff fea6 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3348      	adds	r3, #72	; 0x48
 800a43e:	2101      	movs	r1, #1
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff ffc9 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3360      	adds	r3, #96	; 0x60
 800a44a:	2101      	movs	r1, #1
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff ffc3 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3378      	adds	r3, #120	; 0x78
 800a456:	2100      	movs	r1, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff ffbd 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3390      	adds	r3, #144	; 0x90
 800a462:	2101      	movs	r1, #1
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff ffb7 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	33a8      	adds	r3, #168	; 0xa8
 800a46e:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a472:	2101      	movs	r1, #1
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff fe86 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	33c0      	adds	r3, #192	; 0xc0
 800a47e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a482:	2101      	movs	r1, #1
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff fe7e 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	33d8      	adds	r3, #216	; 0xd8
 800a48e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a492:	2101      	movs	r1, #1
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fe76 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	33f0      	adds	r3, #240	; 0xf0
 800a49e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fe6e 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a4b0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fe65 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a4c2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fe5c 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a4d4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a4d8:	2101      	movs	r1, #1
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fe53 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4e6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fe4a 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a4f8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fe41 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a50a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a50e:	2100      	movs	r1, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff fe38 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800a51c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a540 <_ZN14PduOutputStateC1Ev+0x13c>
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fe2f 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800a52e:	2101      	movs	r1, #1
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff ff51 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	42c80000 	.word	0x42c80000

0800a544 <_Z15anyErrorPresentv>:

/**
 * Checks if any error is present
 * @return true if any error is present
 */
bool anyErrorPresent() {
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
	return ERR_watchdogStateMachine_get();
 800a548:	f7f8 f890 	bl	800266c <_Z28ERR_watchdogStateMachine_getv>
 800a54c:	4603      	mov	r3, r0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	bd80      	pop	{r7, pc}

0800a552 <_Z14resetAllErrorsv>:

/**
 * Reset all errors
 */
void resetAllErrors() {
 800a552:	b580      	push	{r7, lr}
 800a554:	af00      	add	r7, sp, #0
	ERR_batterVoltageCritical_clear();
 800a556:	f7f7 ffe1 	bl	800251c <_Z31ERR_batterVoltageCritical_clearv>
	ERR_batteryOvercurrent_clear();
 800a55a:	f7f8 f817 	bl	800258c <_Z28ERR_batteryOvercurrent_clearv>
	ERR_watchdogStateMachine_clear();
 800a55e:	f7f8 f867 	bl	8002630 <_Z30ERR_watchdogStateMachine_clearv>
}
 800a562:	bf00      	nop
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <_Z14blinkStatusLedv>:

/**
 * Blink the status LED on the PDU
 */
void blinkStatusLed() {
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
	if (ledCounter == 0) {
 800a56c:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <_Z14blinkStatusLedv+0x58>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d111      	bne.n	800a598 <_Z14blinkStatusLedv+0x30>
		ledState = !ledState;
 800a574:	4b13      	ldr	r3, [pc, #76]	; (800a5c4 <_Z14blinkStatusLedv+0x5c>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	f083 0301 	eor.w	r3, r3, #1
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	4b11      	ldr	r3, [pc, #68]	; (800a5c4 <_Z14blinkStatusLedv+0x5c>)
 800a580:	701a      	strb	r2, [r3, #0]
		if (ledState) {
 800a582:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <_Z14blinkStatusLedv+0x5c>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <_Z14blinkStatusLedv+0x2a>
			LED_Green_Write(150);
 800a58a:	2096      	movs	r0, #150	; 0x96
 800a58c:	f7fd fef4 	bl	8008378 <_Z15LED_Green_Writeh>
 800a590:	e002      	b.n	800a598 <_Z14blinkStatusLedv+0x30>
		} else {
			LED_Green_Write(0);
 800a592:	2000      	movs	r0, #0
 800a594:	f7fd fef0 	bl	8008378 <_Z15LED_Green_Writeh>
		}
	}
	ledCounter = (ledCounter + 1) % (pduEnabled ? 20 : 100);
 800a598:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <_Z14blinkStatusLedv+0x58>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <_Z14blinkStatusLedv+0x60>)
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <_Z14blinkStatusLedv+0x42>
 800a5a6:	2314      	movs	r3, #20
 800a5a8:	e000      	b.n	800a5ac <_Z14blinkStatusLedv+0x44>
 800a5aa:	2364      	movs	r3, #100	; 0x64
 800a5ac:	fb92 f1f3 	sdiv	r1, r2, r3
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	4a02      	ldr	r2, [pc, #8]	; (800a5c0 <_Z14blinkStatusLedv+0x58>)
 800a5b8:	6013      	str	r3, [r2, #0]
}
 800a5ba:	bf00      	nop
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000af4 	.word	0x20000af4
 800a5c4:	20000af9 	.word	0x20000af9
 800a5c8:	20000af8 	.word	0x20000af8

0800a5cc <_Z15estimateLiPoSocf>:
 * Estimate the SOC of a LiPo battery based on a single cell voltage.
 * It linearly interpolates the given array of cell voltage and SOC.
 * @param cellVoltage
 * @return
 */
float estimateLiPoSoc(float cellVoltage) {
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t i = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < LIPO_CELL_DATA_NUM_POINTS; i++) {
 800a5da:	2300      	movs	r3, #0
 800a5dc:	81fb      	strh	r3, [r7, #14]
 800a5de:	89fb      	ldrh	r3, [r7, #14]
 800a5e0:	2b14      	cmp	r3, #20
 800a5e2:	d811      	bhi.n	800a608 <_Z15estimateLiPoSocf+0x3c>
		if (cellVoltage <= LIPO_CELL_DATA[i][0]) {
 800a5e4:	89fb      	ldrh	r3, [r7, #14]
 800a5e6:	4a34      	ldr	r2, [pc, #208]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	4413      	add	r3, r2
 800a5ec:	edd3 7a00 	vldr	s15, [r3]
 800a5f0:	ed97 7a01 	vldr	s14, [r7, #4]
 800a5f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fc:	d903      	bls.n	800a606 <_Z15estimateLiPoSocf+0x3a>
	for (i = 0; i < LIPO_CELL_DATA_NUM_POINTS; i++) {
 800a5fe:	89fb      	ldrh	r3, [r7, #14]
 800a600:	3301      	adds	r3, #1
 800a602:	81fb      	strh	r3, [r7, #14]
 800a604:	e7eb      	b.n	800a5de <_Z15estimateLiPoSocf+0x12>
			break;
 800a606:	bf00      	nop
		}
	}
	// Value is smaller than the smallest value
	if (i == 0) {
 800a608:	89fb      	ldrh	r3, [r7, #14]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d107      	bne.n	800a61e <_Z15estimateLiPoSocf+0x52>
		return LIPO_CELL_DATA[i][1];
 800a60e:	89fb      	ldrh	r3, [r7, #14]
 800a610:	4a29      	ldr	r2, [pc, #164]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	4413      	add	r3, r2
 800a616:	3304      	adds	r3, #4
 800a618:	edd3 7a00 	vldr	s15, [r3]
 800a61c:	e044      	b.n	800a6a8 <_Z15estimateLiPoSocf+0xdc>
	}

	// Value is bigger than the biggest value
	if (i == LIPO_CELL_DATA_NUM_POINTS) {
 800a61e:	89fb      	ldrh	r3, [r7, #14]
 800a620:	2b15      	cmp	r3, #21
 800a622:	d108      	bne.n	800a636 <_Z15estimateLiPoSocf+0x6a>
		return LIPO_CELL_DATA[i - 1][1];
 800a624:	89fb      	ldrh	r3, [r7, #14]
 800a626:	3b01      	subs	r3, #1
 800a628:	4a23      	ldr	r2, [pc, #140]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	4413      	add	r3, r2
 800a62e:	3304      	adds	r3, #4
 800a630:	edd3 7a00 	vldr	s15, [r3]
 800a634:	e038      	b.n	800a6a8 <_Z15estimateLiPoSocf+0xdc>
	}

	// Value is between two values
	return (cellVoltage - LIPO_CELL_DATA[i - 1][0])
 800a636:	89fb      	ldrh	r3, [r7, #14]
 800a638:	3b01      	subs	r3, #1
 800a63a:	4a1f      	ldr	r2, [pc, #124]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	4413      	add	r3, r2
 800a640:	edd3 7a00 	vldr	s15, [r3]
 800a644:	ed97 7a01 	vldr	s14, [r7, #4]
 800a648:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (LIPO_CELL_DATA[i][0] - LIPO_CELL_DATA[i - 1][0])
 800a64c:	89fb      	ldrh	r3, [r7, #14]
 800a64e:	4a1a      	ldr	r2, [pc, #104]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	4413      	add	r3, r2
 800a654:	ed93 7a00 	vldr	s14, [r3]
 800a658:	89fb      	ldrh	r3, [r7, #14]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	4a16      	ldr	r2, [pc, #88]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4413      	add	r3, r2
 800a662:	edd3 7a00 	vldr	s15, [r3]
 800a666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			* (LIPO_CELL_DATA[i][1] - LIPO_CELL_DATA[i - 1][1])
 800a66e:	89fb      	ldrh	r3, [r7, #14]
 800a670:	4a11      	ldr	r2, [pc, #68]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	4413      	add	r3, r2
 800a676:	3304      	adds	r3, #4
 800a678:	edd3 6a00 	vldr	s13, [r3]
 800a67c:	89fb      	ldrh	r3, [r7, #14]
 800a67e:	3b01      	subs	r3, #1
 800a680:	4a0d      	ldr	r2, [pc, #52]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	4413      	add	r3, r2
 800a686:	3304      	adds	r3, #4
 800a688:	edd3 7a00 	vldr	s15, [r3]
 800a68c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a690:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ LIPO_CELL_DATA[i - 1][1];
 800a694:	89fb      	ldrh	r3, [r7, #14]
 800a696:	3b01      	subs	r3, #1
 800a698:	4a07      	ldr	r2, [pc, #28]	; (800a6b8 <_Z15estimateLiPoSocf+0xec>)
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	4413      	add	r3, r2
 800a69e:	3304      	adds	r3, #4
 800a6a0:	edd3 7a00 	vldr	s15, [r3]
 800a6a4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800a6a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	0801f160 	.word	0x0801f160

0800a6bc <_Z18receiveCanMessagesv>:

/**
 * Function to receive all CAN messages
 */

void receiveCanMessages() {
 800a6bc:	b5b0      	push	{r4, r5, r7, lr}
 800a6be:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800a6c2:	af00      	add	r7, sp, #0
	using namespace can;

	while (g_rxControllQueue.hasAny()) {
 800a6c4:	48dd      	ldr	r0, [pc, #884]	; (800aa3c <_Z18receiveCanMessagesv+0x380>)
 800a6c6:	f002 fc97 	bl	800cff8 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6hasAnyEv>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 83a6 	beq.w	800ae1e <_Z18receiveCanMessagesv+0x762>
		printf("received rx controll frame\n");
 800a6d2:	48db      	ldr	r0, [pc, #876]	; (800aa40 <_Z18receiveCanMessagesv+0x384>)
 800a6d4:	f00c fe8a 	bl	80173ec <printf_>
		// Reset watchdog for state machine
		stateMachineWatchdog.reset();
 800a6d8:	48da      	ldr	r0, [pc, #872]	; (800aa44 <_Z18receiveCanMessagesv+0x388>)
 800a6da:	f7fd fe10 	bl	80082fe <_ZN8Watchdog5resetEv>

		can::Message<messages::PDU_RX_Control_NoOD> controlMsg =
				g_rxControllQueue.dequeue();
 800a6de:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a6e2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a6e6:	49d5      	ldr	r1, [pc, #852]	; (800aa3c <_Z18receiveCanMessagesv+0x380>)
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f002 fc94 	bl	800d016 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7dequeueEv>
		bool errorReset = controlMsg.get<signals::PDU_RX_ErrorReset>();
 800a6ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f002 fcaa 	bl	800d04c <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEE3getINS_7signals17PDU_RX_ErrorResetEEENT_8dataTypeEv>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
		bool _enable = controlMsg.get<signals::PDU_RX_Enable>(); //activates control mode
 800a6fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a702:	4618      	mov	r0, r3
 800a704:	f002 fcb4 	bl	800d070 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEE3getINS_7signals13PDU_RX_EnableEEENT_8dataTypeEv>
 800a708:	4603      	mov	r3, r0
 800a70a:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
		bool peHwEnable = controlMsg.get<signals::PDU_RX_PEHWEnable>(); //allows the PDU to set the PE_enable channel (D2)
 800a70e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a712:	4618      	mov	r0, r3
 800a714:	f002 fcbe 	bl	800d094 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEE3getINS_7signals17PDU_RX_PEHWEnableEEENT_8dataTypeEv>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5

		// Reset all errors if requested
		if (errorReset) {
 800a71e:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <_Z18receiveCanMessagesv+0x6e>
			resetAllErrors();
 800a726:	f7ff ff14 	bl	800a552 <_Z14resetAllErrorsv>
		}

		// Edge detection: Mode change from Manual Control to State Machine Control
		if (!pduEnabled && _enable) { // Enable was just set
 800a72a:	4bc7      	ldr	r3, [pc, #796]	; (800aa48 <_Z18receiveCanMessagesv+0x38c>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	f083 0301 	eor.w	r3, r3, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 81ba 	beq.w	800aaae <_Z18receiveCanMessagesv+0x3f2>
 800a73a:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 81b5 	beq.w	800aaae <_Z18receiveCanMessagesv+0x3f2>
			if (!anyErrorPresent()) { // Do not enable if there is still an error present
 800a744:	f7ff fefe 	bl	800a544 <_Z15anyErrorPresentv>
 800a748:	4603      	mov	r3, r0
 800a74a:	f083 0301 	eor.w	r3, r3, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 81a9 	beq.w	800aaa8 <_Z18receiveCanMessagesv+0x3ec>
				pduEnabled = _enable;
 800a756:	4abc      	ldr	r2, [pc, #752]	; (800aa48 <_Z18receiveCanMessagesv+0x38c>)
 800a758:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 800a75c:	7013      	strb	r3, [r2, #0]

				// Reset all output channels to their default values:
				outputState = { };
 800a75e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a762:	ed9f 0aba 	vldr	s0, [pc, #744]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a766:	2101      	movs	r1, #1
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fd0c 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a76e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a772:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a776:	2101      	movs	r1, #1
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff fd04 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a77e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a782:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a786:	2101      	movs	r1, #1
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fcfc 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a78e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a792:	2101      	movs	r1, #1
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff fe1f 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a79a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a79e:	2101      	movs	r1, #1
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff fe19 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a7a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff fe13 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a7b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff fe0d 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a7be:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a7c2:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff fcdc 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a7ce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a7d2:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fcd4 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a7de:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a7e2:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff fccc 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a7ee:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a7f2:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff fcc4 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a7fe:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a802:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a806:	2101      	movs	r1, #1
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff fcbc 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a80e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a812:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a816:	2101      	movs	r1, #1
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fcb4 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a81e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a822:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a826:	2101      	movs	r1, #1
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fcac 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a82e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a832:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a836:	2101      	movs	r1, #1
 800a838:	4618      	mov	r0, r3
 800a83a:	f7ff fca4 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a83e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a842:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff fc9c 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a84e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a852:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a856:	2100      	movs	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fc94 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a85e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a862:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800aa4c <_Z18receiveCanMessagesv+0x390>
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fc8c 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800a86e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a872:	2101      	movs	r1, #1
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fdaf 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800a87a:	4a75      	ldr	r2, [pc, #468]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a87c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a880:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800a884:	4614      	mov	r4, r2
 800a886:	461d      	mov	r5, r3
 800a888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a88a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a88c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a890:	e884 0003 	stmia.w	r4, {r0, r1}
 800a894:	4a6e      	ldr	r2, [pc, #440]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a896:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a89a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800a89e:	f102 0418 	add.w	r4, r2, #24
 800a8a2:	461d      	mov	r5, r3
 800a8a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8b0:	4a67      	ldr	r2, [pc, #412]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a8b2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a8b6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800a8ba:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800a8be:	461d      	mov	r5, r3
 800a8c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8c8:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8cc:	4a60      	ldr	r2, [pc, #384]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a8ce:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a8d2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800a8d6:	f102 0448 	add.w	r4, r2, #72	; 0x48
 800a8da:	461d      	mov	r5, r3
 800a8dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8e4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8e8:	4a59      	ldr	r2, [pc, #356]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a8ea:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a8ee:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800a8f2:	f102 0460 	add.w	r4, r2, #96	; 0x60
 800a8f6:	461d      	mov	r5, r3
 800a8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a900:	e884 0003 	stmia.w	r4, {r0, r1}
 800a904:	4a52      	ldr	r2, [pc, #328]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a906:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a90a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800a90e:	f102 0478 	add.w	r4, r2, #120	; 0x78
 800a912:	461d      	mov	r5, r3
 800a914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a918:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a91c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a920:	4a4b      	ldr	r2, [pc, #300]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a922:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a926:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800a92a:	f102 0490 	add.w	r4, r2, #144	; 0x90
 800a92e:	461d      	mov	r5, r3
 800a930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a934:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a938:	e884 0003 	stmia.w	r4, {r0, r1}
 800a93c:	4a44      	ldr	r2, [pc, #272]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a93e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a942:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800a946:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 800a94a:	461d      	mov	r5, r3
 800a94c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a94e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a950:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a954:	e884 0003 	stmia.w	r4, {r0, r1}
 800a958:	4a3d      	ldr	r2, [pc, #244]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a95a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a95e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800a962:	f102 04c0 	add.w	r4, r2, #192	; 0xc0
 800a966:	461d      	mov	r5, r3
 800a968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a96a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a96c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a970:	e884 0003 	stmia.w	r4, {r0, r1}
 800a974:	4a36      	ldr	r2, [pc, #216]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a976:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a97a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800a97e:	f102 04d8 	add.w	r4, r2, #216	; 0xd8
 800a982:	461d      	mov	r5, r3
 800a984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a988:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a98c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a990:	4a2f      	ldr	r2, [pc, #188]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a992:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a996:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800a99a:	f102 04f0 	add.w	r4, r2, #240	; 0xf0
 800a99e:	461d      	mov	r5, r3
 800a9a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a9a8:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9ac:	4a28      	ldr	r2, [pc, #160]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a9ae:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a9b2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800a9b6:	f502 7484 	add.w	r4, r2, #264	; 0x108
 800a9ba:	461d      	mov	r5, r3
 800a9bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a9c4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9c8:	4a21      	ldr	r2, [pc, #132]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a9ca:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a9ce:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800a9d2:	f502 7490 	add.w	r4, r2, #288	; 0x120
 800a9d6:	461d      	mov	r5, r3
 800a9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a9e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9e4:	4a1a      	ldr	r2, [pc, #104]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800a9e6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800a9ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800a9ee:	f502 749c 	add.w	r4, r2, #312	; 0x138
 800a9f2:	461d      	mov	r5, r3
 800a9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a9fc:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa00:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800aa02:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800aa06:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800aa0a:	f502 74a8 	add.w	r4, r2, #336	; 0x150
 800aa0e:	461d      	mov	r5, r3
 800aa10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa14:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa18:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa1c:	4a0c      	ldr	r2, [pc, #48]	; (800aa50 <_Z18receiveCanMessagesv+0x394>)
 800aa1e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800aa22:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800aa26:	f502 74b4 	add.w	r4, r2, #360	; 0x168
 800aa2a:	461d      	mov	r5, r3
 800aa2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa30:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa34:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa38:	e00c      	b.n	800aa54 <_Z18receiveCanMessagesv+0x398>
 800aa3a:	bf00      	nop
 800aa3c:	20000b04 	.word	0x20000b04
 800aa40:	0801ef8c 	.word	0x0801ef8c
 800aa44:	20000b24 	.word	0x20000b24
 800aa48:	20000af8 	.word	0x20000af8
 800aa4c:	42c80000 	.word	0x42c80000
 800aa50:	20000b30 	.word	0x20000b30
 800aa54:	4ad9      	ldr	r2, [pc, #868]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800aa56:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800aa5a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800aa5e:	f502 74c0 	add.w	r4, r2, #384	; 0x180
 800aa62:	461d      	mov	r5, r3
 800aa64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa68:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa6c:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa70:	4ad2      	ldr	r2, [pc, #840]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800aa72:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800aa76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800aa7a:	f502 74cc 	add.w	r4, r2, #408	; 0x198
 800aa7e:	461d      	mov	r5, r3
 800aa80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa84:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa88:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa8c:	4acb      	ldr	r2, [pc, #812]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800aa8e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800aa92:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800aa96:	f502 74d8 	add.w	r4, r2, #432	; 0x1b0
 800aa9a:	461d      	mov	r5, r3
 800aa9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aaa4:	e884 0003 	stmia.w	r4, {r0, r1}
			}

			// Set CANzero status to operational -> changing of critical OD entries now locked
			canzero::setStatus(operational);
 800aaa8:	2005      	movs	r0, #5
 800aaaa:	f7f7 fb9d 	bl	80021e8 <_ZN7canzero9setStatusE9cz_status>
		}

		// Edge detection: Mode change from State Machine Control to Manual Control
		if (pduEnabled && !_enable) { // Enable was reset
 800aaae:	4bc4      	ldr	r3, [pc, #784]	; (800adc0 <_Z18receiveCanMessagesv+0x704>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8194 	beq.w	800ade0 <_Z18receiveCanMessagesv+0x724>
 800aab8:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 800aabc:	f083 0301 	eor.w	r3, r3, #1
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 818c 	beq.w	800ade0 <_Z18receiveCanMessagesv+0x724>
			pduEnabled = _enable;
 800aac8:	4abd      	ldr	r2, [pc, #756]	; (800adc0 <_Z18receiveCanMessagesv+0x704>)
 800aaca:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 800aace:	7013      	strb	r3, [r2, #0]

			// Reset all output channels to their default values:
			outputState = { };
 800aad0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800aad4:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800aad8:	2101      	movs	r1, #1
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fb53 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800aae0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800aae4:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800aae8:	2101      	movs	r1, #1
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7ff fb4b 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800aaf0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800aaf4:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800aaf8:	2101      	movs	r1, #1
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff fb43 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab00:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800ab04:	2101      	movs	r1, #1
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fc66 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800ab0c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800ab10:	2101      	movs	r1, #1
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff fc60 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800ab18:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff fc5a 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800ab24:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800ab28:	2101      	movs	r1, #1
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fc54 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800ab30:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800ab34:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab38:	2101      	movs	r1, #1
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff fb23 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab40:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800ab44:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab48:	2101      	movs	r1, #1
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fb1b 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab50:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800ab54:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab58:	2101      	movs	r1, #1
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7ff fb13 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab60:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800ab64:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab68:	2101      	movs	r1, #1
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff fb0b 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab70:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800ab74:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab78:	2101      	movs	r1, #1
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff fb03 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab80:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800ab84:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab88:	2101      	movs	r1, #1
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff fafb 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800ab90:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800ab94:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800ab98:	2101      	movs	r1, #1
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff faf3 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800aba0:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800aba4:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800aba8:	2101      	movs	r1, #1
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff faeb 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800abb0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800abb4:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800abb8:	2100      	movs	r1, #0
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fae3 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800abc0:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800abc4:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800abc8:	2100      	movs	r1, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fadb 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800abd0:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800abd4:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800adc4 <_Z18receiveCanMessagesv+0x708>
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fad3 	bl	800a186 <_ZN16OutputChannelPwmC1Ebf>
 800abe0:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800abe4:	2101      	movs	r1, #1
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff fbf6 	bl	800a3d8 <_ZN13OutputChannelC1Eb>
 800abec:	4a73      	ldr	r2, [pc, #460]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800abee:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800abf2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800abf6:	4614      	mov	r4, r2
 800abf8:	461d      	mov	r5, r3
 800abfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac02:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac06:	4a6d      	ldr	r2, [pc, #436]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ac08:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ac0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800ac10:	f102 0418 	add.w	r4, r2, #24
 800ac14:	461d      	mov	r5, r3
 800ac16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac1e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac22:	4a66      	ldr	r2, [pc, #408]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ac24:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ac28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ac2c:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800ac30:	461d      	mov	r5, r3
 800ac32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac36:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac3a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac3e:	4a5f      	ldr	r2, [pc, #380]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ac40:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ac44:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ac48:	f102 0448 	add.w	r4, r2, #72	; 0x48
 800ac4c:	461d      	mov	r5, r3
 800ac4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac52:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac56:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac5a:	4a58      	ldr	r2, [pc, #352]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ac5c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ac60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ac64:	f102 0460 	add.w	r4, r2, #96	; 0x60
 800ac68:	461d      	mov	r5, r3
 800ac6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac72:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac76:	4a51      	ldr	r2, [pc, #324]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ac78:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ac7c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ac80:	f102 0478 	add.w	r4, r2, #120	; 0x78
 800ac84:	461d      	mov	r5, r3
 800ac86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac8e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac92:	4a4a      	ldr	r2, [pc, #296]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ac94:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ac98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ac9c:	f102 0490 	add.w	r4, r2, #144	; 0x90
 800aca0:	461d      	mov	r5, r3
 800aca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800acaa:	e884 0003 	stmia.w	r4, {r0, r1}
 800acae:	4a43      	ldr	r2, [pc, #268]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800acb0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800acb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800acb8:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 800acbc:	461d      	mov	r5, r3
 800acbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800acc6:	e884 0003 	stmia.w	r4, {r0, r1}
 800acca:	4a3c      	ldr	r2, [pc, #240]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800accc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800acd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800acd4:	f102 04c0 	add.w	r4, r2, #192	; 0xc0
 800acd8:	461d      	mov	r5, r3
 800acda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acde:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ace2:	e884 0003 	stmia.w	r4, {r0, r1}
 800ace6:	4b35      	ldr	r3, [pc, #212]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ace8:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800acec:	f507 7541 	add.w	r5, r7, #772	; 0x304
 800acf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acf4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800acf8:	e884 0003 	stmia.w	r4, {r0, r1}
 800acfc:	4b2f      	ldr	r3, [pc, #188]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800acfe:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800ad02:	f507 7547 	add.w	r5, r7, #796	; 0x31c
 800ad06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad0e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad12:	4b2a      	ldr	r3, [pc, #168]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad14:	f503 7484 	add.w	r4, r3, #264	; 0x108
 800ad18:	f507 754d 	add.w	r5, r7, #820	; 0x334
 800ad1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad20:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad24:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad28:	4b24      	ldr	r3, [pc, #144]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad2a:	f503 7490 	add.w	r4, r3, #288	; 0x120
 800ad2e:	f507 7553 	add.w	r5, r7, #844	; 0x34c
 800ad32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad36:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad3a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad3e:	4b1f      	ldr	r3, [pc, #124]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad40:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800ad44:	f507 7559 	add.w	r5, r7, #868	; 0x364
 800ad48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad50:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad54:	4b19      	ldr	r3, [pc, #100]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad56:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800ad5a:	f507 755f 	add.w	r5, r7, #892	; 0x37c
 800ad5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad62:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad66:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad6a:	4b14      	ldr	r3, [pc, #80]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad6c:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800ad70:	f507 7565 	add.w	r5, r7, #916	; 0x394
 800ad74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad78:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad7c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad80:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad82:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800ad86:	f507 756b 	add.w	r5, r7, #940	; 0x3ac
 800ad8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad92:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad96:	4b09      	ldr	r3, [pc, #36]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800ad98:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 800ad9c:	f507 7571 	add.w	r5, r7, #964	; 0x3c4
 800ada0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ada2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ada4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ada8:	e884 0003 	stmia.w	r4, {r0, r1}
 800adac:	4b03      	ldr	r3, [pc, #12]	; (800adbc <_Z18receiveCanMessagesv+0x700>)
 800adae:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 800adb2:	f507 7577 	add.w	r5, r7, #988	; 0x3dc
 800adb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800adba:	e005      	b.n	800adc8 <_Z18receiveCanMessagesv+0x70c>
 800adbc:	20000b30 	.word	0x20000b30
 800adc0:	20000af8 	.word	0x20000af8
 800adc4:	42c80000 	.word	0x42c80000
 800adc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800adcc:	e884 0003 	stmia.w	r4, {r0, r1}

			// Set CANzero status to default state
			canzero::setStatus(pre_operational);
 800add0:	207f      	movs	r0, #127	; 0x7f
 800add2:	f7f7 fa09 	bl	80021e8 <_ZN7canzero9setStatusE9cz_status>

			// Let cooling pump run until one minute after disabling
			disableTime = xTaskGetTickCount();
 800add6:	f00f f8c1 	bl	8019f5c <xTaskGetTickCount>
 800adda:	4603      	mov	r3, r0
 800addc:	4ac0      	ldr	r2, [pc, #768]	; (800b0e0 <_Z18receiveCanMessagesv+0xa24>)
 800adde:	6013      	str	r3, [r2, #0]
		}

		// PDU is pduEnabled and in State Machine control mode
		if (pduEnabled) {
 800ade0:	4bc0      	ldr	r3, [pc, #768]	; (800b0e4 <_Z18receiveCanMessagesv+0xa28>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d013      	beq.n	800ae10 <_Z18receiveCanMessagesv+0x754>
			outputState.SDC.set(true);
 800ade8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800adec:	2101      	movs	r1, #1
 800adee:	48bf      	ldr	r0, [pc, #764]	; (800b0ec <_Z18receiveCanMessagesv+0xa30>)
 800adf0:	f7ff f9ed 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(true);
 800adf4:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800adf8:	2101      	movs	r1, #1
 800adfa:	48bd      	ldr	r0, [pc, #756]	; (800b0f0 <_Z18receiveCanMessagesv+0xa34>)
 800adfc:	f7ff f9e7 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(peHwEnable);
 800ae00:	f897 33f5 	ldrb.w	r3, [r7, #1013]	; 0x3f5
 800ae04:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800ae08:	4619      	mov	r1, r3
 800ae0a:	48ba      	ldr	r0, [pc, #744]	; (800b0f4 <_Z18receiveCanMessagesv+0xa38>)
 800ae0c:	f7ff f9df 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
		}
		printf("pdu enabled = %u\n", pduEnabled);
 800ae10:	4bb4      	ldr	r3, [pc, #720]	; (800b0e4 <_Z18receiveCanMessagesv+0xa28>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	4619      	mov	r1, r3
 800ae16:	48b8      	ldr	r0, [pc, #736]	; (800b0f8 <_Z18receiveCanMessagesv+0xa3c>)
 800ae18:	f00c fae8 	bl	80173ec <printf_>
	while (g_rxControllQueue.hasAny()) {
 800ae1c:	e452      	b.n	800a6c4 <_Z18receiveCanMessagesv+0x8>
	}

	while (g_manualControllQueue.hasAny()) {
 800ae1e:	48b7      	ldr	r0, [pc, #732]	; (800b0fc <_Z18receiveCanMessagesv+0xa40>)
 800ae20:	f002 f94a 	bl	800d0b8 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6hasAnyEv>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 80f7 	beq.w	800b01a <_Z18receiveCanMessagesv+0x95e>
		printf("manuel controll\n");
 800ae2c:	48b4      	ldr	r0, [pc, #720]	; (800b100 <_Z18receiveCanMessagesv+0xa44>)
 800ae2e:	f00c fadd 	bl	80173ec <printf_>
		can::Message<messages::PDU_RX_Manual_Control> manualControlMsg =
				g_manualControllQueue.dequeue();
 800ae32:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800ae36:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800ae3a:	49b0      	ldr	r1, [pc, #704]	; (800b0fc <_Z18receiveCanMessagesv+0xa40>)
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f002 f94a 	bl	800d0d6 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7dequeueEv>

		// PDU is in manual control mode
		if (!pduEnabled) {
 800ae42:	4ba8      	ldr	r3, [pc, #672]	; (800b0e4 <_Z18receiveCanMessagesv+0xa28>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f083 0301 	eor.w	r3, r3, #1
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0e6      	beq.n	800ae1e <_Z18receiveCanMessagesv+0x762>
			outputState.LPCh1_opticalSensor.set(
 800ae50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 f959 	bl	800d10c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh1_EnableEEENT_8dataTypeEv>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800ae60:	4619      	mov	r1, r3
 800ae62:	48a8      	ldr	r0, [pc, #672]	; (800b104 <_Z18receiveCanMessagesv+0xa48>)
 800ae64:	f7ff f9b3 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh1_Enable>());
			outputState.LPCh2.set(
 800ae68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f002 f95f 	bl	800d130 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh2_EnableEEENT_8dataTypeEv>
 800ae72:	4603      	mov	r3, r0
 800ae74:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800ae78:	4619      	mov	r1, r3
 800ae7a:	48a3      	ldr	r0, [pc, #652]	; (800b108 <_Z18receiveCanMessagesv+0xa4c>)
 800ae7c:	f7ff f9a7 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh2_Enable>());
			outputState.LPCh3_HVCU.set(
 800ae80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae84:	4618      	mov	r0, r3
 800ae86:	f002 f965 	bl	800d154 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh3_EnableEEENT_8dataTypeEv>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800ae90:	4619      	mov	r1, r3
 800ae92:	489e      	ldr	r0, [pc, #632]	; (800b10c <_Z18receiveCanMessagesv+0xa50>)
 800ae94:	f7ff f99b 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh3_Enable>());
			outputState.LPCh4_frontECU.set(
 800ae98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f002 f96b 	bl	800d178 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh4_EnableEEENT_8dataTypeEv>
 800aea2:	4603      	mov	r3, r0
 800aea4:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800aea8:	4619      	mov	r1, r3
 800aeaa:	4899      	ldr	r0, [pc, #612]	; (800b110 <_Z18receiveCanMessagesv+0xa54>)
 800aeac:	f7ff f98f 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh4_Enable>());
			outputState.LPCh5_powerElectronics.set(
 800aeb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 f971 	bl	800d19c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh5_EnableEEENT_8dataTypeEv>
 800aeba:	4603      	mov	r3, r0
 800aebc:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800aec0:	4619      	mov	r1, r3
 800aec2:	488b      	ldr	r0, [pc, #556]	; (800b0f0 <_Z18receiveCanMessagesv+0xa34>)
 800aec4:	f7ff f983 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh5_Enable>());
			outputState.LPCh6.set(
 800aec8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aecc:	4618      	mov	r0, r3
 800aece:	f002 f977 	bl	800d1c0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh6_EnableEEENT_8dataTypeEv>
 800aed2:	4603      	mov	r3, r0
 800aed4:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800aed8:	4619      	mov	r1, r3
 800aeda:	4886      	ldr	r0, [pc, #536]	; (800b0f4 <_Z18receiveCanMessagesv+0xa38>)
 800aedc:	f7ff f977 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh6_Enable>());
			outputState.LPCh7_rearECU.set(
 800aee0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 f97d 	bl	800d1e4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh7_EnableEEENT_8dataTypeEv>
 800aeea:	4603      	mov	r3, r0
 800aeec:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800aef0:	4619      	mov	r1, r3
 800aef2:	4888      	ldr	r0, [pc, #544]	; (800b114 <_Z18receiveCanMessagesv+0xa58>)
 800aef4:	f7ff f96b 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh7_Enable>());
			outputState.LPCh8_telemetry.set(
 800aef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aefc:	4618      	mov	r0, r3
 800aefe:	f002 f983 	bl	800d208 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh8_EnableEEENT_8dataTypeEv>
 800af02:	4603      	mov	r3, r0
 800af04:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af08:	4619      	mov	r1, r3
 800af0a:	4883      	ldr	r0, [pc, #524]	; (800b118 <_Z18receiveCanMessagesv+0xa5c>)
 800af0c:	f7ff f95f 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh8_Enable>());
			outputState.LPCh9_logger.set(
 800af10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af14:	4618      	mov	r0, r3
 800af16:	f002 f989 	bl	800d22c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh9_EnableEEENT_8dataTypeEv>
 800af1a:	4603      	mov	r3, r0
 800af1c:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af20:	4619      	mov	r1, r3
 800af22:	487e      	ldr	r0, [pc, #504]	; (800b11c <_Z18receiveCanMessagesv+0xa60>)
 800af24:	f7ff f953 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh9_Enable>());
			outputState.LPCh10.set(
 800af28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af2c:	4618      	mov	r0, r3
 800af2e:	f002 f98f 	bl	800d250 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals17PDU_LPCh10_EnableEEENT_8dataTypeEv>
 800af32:	4603      	mov	r3, r0
 800af34:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af38:	4619      	mov	r1, r3
 800af3a:	4879      	ldr	r0, [pc, #484]	; (800b120 <_Z18receiveCanMessagesv+0xa64>)
 800af3c:	f7ff f947 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_LPCh10_Enable>());

			outputState.HPCh1_projectXX.set(
 800af40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af44:	4618      	mov	r0, r3
 800af46:	f002 f995 	bl	800d274 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh1_EnableEEENT_8dataTypeEv>
 800af4a:	4603      	mov	r3, r0
 800af4c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af50:	4619      	mov	r1, r3
 800af52:	4874      	ldr	r0, [pc, #464]	; (800b124 <_Z18receiveCanMessagesv+0xa68>)
 800af54:	f7ff f93b 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_HPCh1_Enable>());
			outputState.HPCh2_coolingPump.set(
 800af58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 f99b 	bl	800d298 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh2_EnableEEENT_8dataTypeEv>
 800af62:	4603      	mov	r3, r0
 800af64:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af68:	4619      	mov	r1, r3
 800af6a:	486f      	ldr	r0, [pc, #444]	; (800b128 <_Z18receiveCanMessagesv+0xa6c>)
 800af6c:	f7ff f92f 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_HPCh2_Enable>());
			outputState.HPCh3.set(
 800af70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af74:	4618      	mov	r0, r3
 800af76:	f002 f9a1 	bl	800d2bc <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh3_EnableEEENT_8dataTypeEv>
 800af7a:	4603      	mov	r3, r0
 800af7c:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af80:	4619      	mov	r1, r3
 800af82:	486a      	ldr	r0, [pc, #424]	; (800b12c <_Z18receiveCanMessagesv+0xa70>)
 800af84:	f7ff f923 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_HPCh3_Enable>());
			outputState.HPCh4.set(
 800af88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af8c:	4618      	mov	r0, r3
 800af8e:	f002 f9a7 	bl	800d2e0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh4_EnableEEENT_8dataTypeEv>
 800af92:	4603      	mov	r3, r0
 800af94:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800af98:	4619      	mov	r1, r3
 800af9a:	4865      	ldr	r0, [pc, #404]	; (800b130 <_Z18receiveCanMessagesv+0xa74>)
 800af9c:	f7ff f917 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_HPCh4_Enable>());

			outputState.D1_projectXX.set(
 800afa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afa4:	4618      	mov	r0, r3
 800afa6:	f002 f9ad 	bl	800d304 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D1_EnableEEENT_8dataTypeEv>
 800afaa:	4603      	mov	r3, r0
 800afac:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800afb0:	4619      	mov	r1, r3
 800afb2:	4860      	ldr	r0, [pc, #384]	; (800b134 <_Z18receiveCanMessagesv+0xa78>)
 800afb4:	f7ff f90b 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_D1_Enable>());
			outputState.D2_PE_enable.set(
 800afb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afbc:	4618      	mov	r0, r3
 800afbe:	f002 f9b3 	bl	800d328 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D2_EnableEEENT_8dataTypeEv>
 800afc2:	4603      	mov	r3, r0
 800afc4:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800afc8:	4619      	mov	r1, r3
 800afca:	485b      	ldr	r0, [pc, #364]	; (800b138 <_Z18receiveCanMessagesv+0xa7c>)
 800afcc:	f7ff f8ff 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
					manualControlMsg.get<signals::PDU_D2_Enable>());
			outputState.D3.set(manualControlMsg.get<signals::PDU_D3_Enable>());
 800afd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afd4:	4618      	mov	r0, r3
 800afd6:	f002 f9b9 	bl	800d34c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D3_EnableEEENT_8dataTypeEv>
 800afda:	4603      	mov	r3, r0
 800afdc:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800afe0:	4619      	mov	r1, r3
 800afe2:	4856      	ldr	r0, [pc, #344]	; (800b13c <_Z18receiveCanMessagesv+0xa80>)
 800afe4:	f7ff f8f3 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(manualControlMsg.get<signals::PDU_D4_Enable>());
 800afe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afec:	4618      	mov	r0, r3
 800afee:	f002 f9bf 	bl	800d370 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D4_EnableEEENT_8dataTypeEv>
 800aff2:	4603      	mov	r3, r0
 800aff4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800aff8:	4619      	mov	r1, r3
 800affa:	4851      	ldr	r0, [pc, #324]	; (800b140 <_Z18receiveCanMessagesv+0xa84>)
 800affc:	f7ff f8e7 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>

			outputState.SDC.set(
 800b000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b004:	4618      	mov	r0, r3
 800b006:	f002 f9c5 	bl	800d394 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals14PDU_SDC_EnableEEENT_8dataTypeEv>
 800b00a:	4603      	mov	r3, r0
 800b00c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800b0e8 <_Z18receiveCanMessagesv+0xa2c>
 800b010:	4619      	mov	r1, r3
 800b012:	4836      	ldr	r0, [pc, #216]	; (800b0ec <_Z18receiveCanMessagesv+0xa30>)
 800b014:	f7ff f8db 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
	while (g_manualControllQueue.hasAny()) {
 800b018:	e701      	b.n	800ae1e <_Z18receiveCanMessagesv+0x762>
					manualControlMsg.get<signals::PDU_SDC_Enable>());
		}
	}

	while (g_lpDutycycleQueue.hasAny()) {
 800b01a:	484a      	ldr	r0, [pc, #296]	; (800b144 <_Z18receiveCanMessagesv+0xa88>)
 800b01c:	f002 f9cc 	bl	800d3b8 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6hasAnyEv>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 8092 	beq.w	800b14c <_Z18receiveCanMessagesv+0xa90>
		printf("lp duty\n");
 800b028:	4847      	ldr	r0, [pc, #284]	; (800b148 <_Z18receiveCanMessagesv+0xa8c>)
 800b02a:	f00c f9df 	bl	80173ec <printf_>
		can::Message<messages::PDU_RX_LP_Dutycycle_NoOD> dutyMsg =
				g_lpDutycycleQueue.dequeue();
 800b02e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800b032:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800b036:	4943      	ldr	r1, [pc, #268]	; (800b144 <_Z18receiveCanMessagesv+0xa88>)
 800b038:	4618      	mov	r0, r3
 800b03a:	f002 f9cc 	bl	800d3d6 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7dequeueEv>
		// Update duty cycles when PDU is in manual control mode
		if (!pduEnabled) {
 800b03e:	4b29      	ldr	r3, [pc, #164]	; (800b0e4 <_Z18receiveCanMessagesv+0xa28>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	f083 0301 	eor.w	r3, r3, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d0e6      	beq.n	800b01a <_Z18receiveCanMessagesv+0x95e>
			outputState.LPCh1_opticalSensor.setDuty(
 800b04c:	f107 0318 	add.w	r3, r7, #24
 800b050:	4618      	mov	r0, r3
 800b052:	f002 f9db 	bl	800d40c <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh1_DutycycleEEENT_8dataTypeEv>
 800b056:	eef0 7a40 	vmov.f32	s15, s0
 800b05a:	eeb0 0a67 	vmov.f32	s0, s15
 800b05e:	4829      	ldr	r0, [pc, #164]	; (800b104 <_Z18receiveCanMessagesv+0xa48>)
 800b060:	f7ff f8f9 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_LPCh1_Dutycycle>());
			outputState.LPCh2.setDuty(
 800b064:	f107 0318 	add.w	r3, r7, #24
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 f9e3 	bl	800d434 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh2_DutycycleEEENT_8dataTypeEv>
 800b06e:	eef0 7a40 	vmov.f32	s15, s0
 800b072:	eeb0 0a67 	vmov.f32	s0, s15
 800b076:	4824      	ldr	r0, [pc, #144]	; (800b108 <_Z18receiveCanMessagesv+0xa4c>)
 800b078:	f7ff f8ed 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_LPCh2_Dutycycle>());
			outputState.LPCh3_HVCU.setDuty(
 800b07c:	f107 0318 	add.w	r3, r7, #24
 800b080:	4618      	mov	r0, r3
 800b082:	f002 f9eb 	bl	800d45c <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh3_DutycycleEEENT_8dataTypeEv>
 800b086:	eef0 7a40 	vmov.f32	s15, s0
 800b08a:	eeb0 0a67 	vmov.f32	s0, s15
 800b08e:	481f      	ldr	r0, [pc, #124]	; (800b10c <_Z18receiveCanMessagesv+0xa50>)
 800b090:	f7ff f8e1 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_LPCh3_Dutycycle>());
			outputState.LPCh8_telemetry.setDuty(
 800b094:	f107 0318 	add.w	r3, r7, #24
 800b098:	4618      	mov	r0, r3
 800b09a:	f002 f9f3 	bl	800d484 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh8_DutycycleEEENT_8dataTypeEv>
 800b09e:	eef0 7a40 	vmov.f32	s15, s0
 800b0a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0a6:	481c      	ldr	r0, [pc, #112]	; (800b118 <_Z18receiveCanMessagesv+0xa5c>)
 800b0a8:	f7ff f8d5 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_LPCh8_Dutycycle>());
			outputState.LPCh9_logger.setDuty(
 800b0ac:	f107 0318 	add.w	r3, r7, #24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f002 f9fb 	bl	800d4ac <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh9_DutycycleEEENT_8dataTypeEv>
 800b0b6:	eef0 7a40 	vmov.f32	s15, s0
 800b0ba:	eeb0 0a67 	vmov.f32	s0, s15
 800b0be:	4817      	ldr	r0, [pc, #92]	; (800b11c <_Z18receiveCanMessagesv+0xa60>)
 800b0c0:	f7ff f8c9 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_LPCh9_Dutycycle>());
			outputState.LPCh10.setDuty(
 800b0c4:	f107 0318 	add.w	r3, r7, #24
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 fa03 	bl	800d4d4 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals20PDU_LPCh10_DutycycleEEENT_8dataTypeEv>
 800b0ce:	eef0 7a40 	vmov.f32	s15, s0
 800b0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0d6:	4812      	ldr	r0, [pc, #72]	; (800b120 <_Z18receiveCanMessagesv+0xa64>)
 800b0d8:	f7ff f8bd 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
	while (g_lpDutycycleQueue.hasAny()) {
 800b0dc:	e79d      	b.n	800b01a <_Z18receiveCanMessagesv+0x95e>
 800b0de:	bf00      	nop
 800b0e0:	20000b2c 	.word	0x20000b2c
 800b0e4:	20000af8 	.word	0x20000af8
 800b0e8:	c2c80000 	.word	0xc2c80000
 800b0ec:	20000ce0 	.word	0x20000ce0
 800b0f0:	20000b90 	.word	0x20000b90
 800b0f4:	20000ba8 	.word	0x20000ba8
 800b0f8:	0801efa8 	.word	0x0801efa8
 800b0fc:	20000b0c 	.word	0x20000b0c
 800b100:	0801efbc 	.word	0x0801efbc
 800b104:	20000b30 	.word	0x20000b30
 800b108:	20000b48 	.word	0x20000b48
 800b10c:	20000b60 	.word	0x20000b60
 800b110:	20000b78 	.word	0x20000b78
 800b114:	20000bc0 	.word	0x20000bc0
 800b118:	20000bd8 	.word	0x20000bd8
 800b11c:	20000bf0 	.word	0x20000bf0
 800b120:	20000c08 	.word	0x20000c08
 800b124:	20000c20 	.word	0x20000c20
 800b128:	20000c38 	.word	0x20000c38
 800b12c:	20000c50 	.word	0x20000c50
 800b130:	20000c68 	.word	0x20000c68
 800b134:	20000c80 	.word	0x20000c80
 800b138:	20000c98 	.word	0x20000c98
 800b13c:	20000cb0 	.word	0x20000cb0
 800b140:	20000cc8 	.word	0x20000cc8
 800b144:	20000b1c 	.word	0x20000b1c
 800b148:	0801efd0 	.word	0x0801efd0
					dutyMsg.get<signals::PDU_LPCh10_Dutycycle>());
		}
	}

	while (g_hpDutycycleQueue.hasAny()) {
 800b14c:	482f      	ldr	r0, [pc, #188]	; (800b20c <_Z18receiveCanMessagesv+0xb50>)
 800b14e:	f002 f9d5 	bl	800d4fc <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6hasAnyEv>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d054      	beq.n	800b202 <_Z18receiveCanMessagesv+0xb46>
		printf("hp duty\n");
 800b158:	482d      	ldr	r0, [pc, #180]	; (800b210 <_Z18receiveCanMessagesv+0xb54>)
 800b15a:	f00c f947 	bl	80173ec <printf_>
		can::Message<messages::PDU_RX_HP_D_Dutycycle_NoOD> dutyMsg =
				g_hpDutycycleQueue.dequeue();
 800b15e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800b162:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800b166:	4929      	ldr	r1, [pc, #164]	; (800b20c <_Z18receiveCanMessagesv+0xb50>)
 800b168:	4618      	mov	r0, r3
 800b16a:	f002 f9d6 	bl	800d51a <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7dequeueEv>
		if (!pduEnabled) {
 800b16e:	4b29      	ldr	r3, [pc, #164]	; (800b214 <_Z18receiveCanMessagesv+0xb58>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	f083 0301 	eor.w	r3, r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0e7      	beq.n	800b14c <_Z18receiveCanMessagesv+0xa90>
			outputState.HPCh1_projectXX.setDuty(
 800b17c:	463b      	mov	r3, r7
 800b17e:	4618      	mov	r0, r3
 800b180:	f002 f9e6 	bl	800d550 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals19PDU_HPCh1_DutycycleEEENT_8dataTypeEv>
 800b184:	eef0 7a40 	vmov.f32	s15, s0
 800b188:	eeb0 0a67 	vmov.f32	s0, s15
 800b18c:	4822      	ldr	r0, [pc, #136]	; (800b218 <_Z18receiveCanMessagesv+0xb5c>)
 800b18e:	f7ff f862 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_HPCh1_Dutycycle>());
			outputState.HPCh2_coolingPump.setDuty(
 800b192:	463b      	mov	r3, r7
 800b194:	4618      	mov	r0, r3
 800b196:	f002 f9ef 	bl	800d578 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals19PDU_HPCh2_DutycycleEEENT_8dataTypeEv>
 800b19a:	eef0 7a40 	vmov.f32	s15, s0
 800b19e:	eeb0 0a67 	vmov.f32	s0, s15
 800b1a2:	481e      	ldr	r0, [pc, #120]	; (800b21c <_Z18receiveCanMessagesv+0xb60>)
 800b1a4:	f7ff f857 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_HPCh2_Dutycycle>());
			outputState.D1_projectXX.setDuty(
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f002 f9f8 	bl	800d5a0 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D1_DutycycleEEENT_8dataTypeEv>
 800b1b0:	eef0 7a40 	vmov.f32	s15, s0
 800b1b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b1b8:	4819      	ldr	r0, [pc, #100]	; (800b220 <_Z18receiveCanMessagesv+0xb64>)
 800b1ba:	f7ff f84c 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_D1_Dutycycle>());
			outputState.D2_PE_enable.setDuty(
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f002 fa01 	bl	800d5c8 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D2_DutycycleEEENT_8dataTypeEv>
 800b1c6:	eef0 7a40 	vmov.f32	s15, s0
 800b1ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b1ce:	4815      	ldr	r0, [pc, #84]	; (800b224 <_Z18receiveCanMessagesv+0xb68>)
 800b1d0:	f7ff f841 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
					dutyMsg.get<signals::PDU_D2_Dutycycle>());
			outputState.D3.setDuty(dutyMsg.get<signals::PDU_D3_Dutycycle>());
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f002 fa0a 	bl	800d5f0 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D3_DutycycleEEENT_8dataTypeEv>
 800b1dc:	eef0 7a40 	vmov.f32	s15, s0
 800b1e0:	eeb0 0a67 	vmov.f32	s0, s15
 800b1e4:	4810      	ldr	r0, [pc, #64]	; (800b228 <_Z18receiveCanMessagesv+0xb6c>)
 800b1e6:	f7ff f836 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
			outputState.D4.setDuty(dutyMsg.get<signals::PDU_D4_Dutycycle>());
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f002 fa13 	bl	800d618 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D4_DutycycleEEENT_8dataTypeEv>
 800b1f2:	eef0 7a40 	vmov.f32	s15, s0
 800b1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b1fa:	480c      	ldr	r0, [pc, #48]	; (800b22c <_Z18receiveCanMessagesv+0xb70>)
 800b1fc:	f7ff f82b 	bl	800a256 <_ZN16OutputChannelPwm7setDutyEf>
	while (g_hpDutycycleQueue.hasAny()) {
 800b200:	e7a4      	b.n	800b14c <_Z18receiveCanMessagesv+0xa90>
				g_bmsQueue.dequeue();
		batteryTemperature =
				batteryTempMsg.get<signals::Sensor_TX_BatteryTemp>();
	}
	*/
}
 800b202:	bf00      	nop
 800b204:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bdb0      	pop	{r4, r5, r7, pc}
 800b20c:	20000b14 	.word	0x20000b14
 800b210:	0801efdc 	.word	0x0801efdc
 800b214:	20000af8 	.word	0x20000af8
 800b218:	20000c20 	.word	0x20000c20
 800b21c:	20000c38 	.word	0x20000c38
 800b220:	20000c80 	.word	0x20000c80
 800b224:	20000c98 	.word	0x20000c98
 800b228:	20000cb0 	.word	0x20000cb0
 800b22c:	20000cc8 	.word	0x20000cc8

0800b230 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1Ev>:
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	2300      	movs	r3, #0
 800b23c:	2208      	movs	r2, #8
 800b23e:	f240 515a 	movw	r1, #1370	; 0x55a
 800b242:	f7f5 fea3 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEEC1Ev>:
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	2300      	movs	r3, #0
 800b25c:	2204      	movs	r2, #4
 800b25e:	f240 41da 	movw	r1, #1242	; 0x4da
 800b262:	f7f5 fe93 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <_Z15readAndSendDatav>:

// Read the current of all channels and send it
void readAndSendData() {
 800b270:	b580      	push	{r7, lr}
 800b272:	b0aa      	sub	sp, #168	; 0xa8
 800b274:	af00      	add	r7, sp, #0
	//adc2.start();
	//ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(10000));

	//float *adcData = adc2.getData();

	lvCurrent = 0;
 800b276:	4b7e      	ldr	r3, [pc, #504]	; (800b470 <_Z15readAndSendDatav+0x200>)
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++) { //maybe the values for i needs to be changed because the ADC channels have changed.
 800b27e:	2300      	movs	r3, #0
 800b280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b284:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b288:	2b09      	cmp	r3, #9
 800b28a:	dc74      	bgt.n	800b376 <_Z15readAndSendDatav+0x106>
		// Raw ADC value is converted into a voltage
		// The sense current is calculated through the 62Ohms current sense resistor
		// The sense current is multiplied by the current divider factor of BTF6070
		lpChannelCurrent[i] = (lpChannelAdc[i].get() * 3.3f / 4095.0f) / 62.0f * 1750
 800b28c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	4a78      	ldr	r2, [pc, #480]	; (800b474 <_Z15readAndSendDatav+0x204>)
 800b294:	4413      	add	r3, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f7fc fd6f 	bl	8007d7a <_ZN20AdcChannelController3getEv>
 800b29c:	4603      	mov	r3, r0
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2a6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800b478 <_Z15readAndSendDatav+0x208>
 800b2aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2ae:	eddf 6a73 	vldr	s13, [pc, #460]	; 800b47c <_Z15readAndSendDatav+0x20c>
 800b2b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b2b6:	eddf 6a72 	vldr	s13, [pc, #456]	; 800b480 <_Z15readAndSendDatav+0x210>
 800b2ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2be:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800b484 <_Z15readAndSendDatav+0x214>
 800b2c2:	ee67 7a87 	vmul.f32	s15, s15, s14
				- 0.010f;	// Subtract 10mA since this seems to be an offset
 800b2c6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800b488 <_Z15readAndSendDatav+0x218>
 800b2ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
		lpChannelCurrent[i] = (lpChannelAdc[i].get() * 3.3f / 4095.0f) / 62.0f * 1750
 800b2ce:	4a6f      	ldr	r2, [pc, #444]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b2d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	edc3 7a00 	vstr	s15, [r3]

		// Limit to plausible values
		if (lpChannelCurrent[i] < 0.0f) {
 800b2dc:	4a6b      	ldr	r2, [pc, #428]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b2de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	edd3 7a00 	vldr	s15, [r3]
 800b2ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f2:	d507      	bpl.n	800b304 <_Z15readAndSendDatav+0x94>
			lpChannelCurrent[i] = 0.0f;
 800b2f4:	4a65      	ldr	r2, [pc, #404]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b2f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f04f 0200 	mov.w	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
		}
		if (lpChannelCurrent[i] > 8.0f) {
 800b304:	4a61      	ldr	r2, [pc, #388]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	edd3 7a00 	vldr	s15, [r3]
 800b312:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31e:	dd07      	ble.n	800b330 <_Z15readAndSendDatav+0xc0>
			lpChannelCurrent[i] = 8.0f;
 800b320:	4a5a      	ldr	r2, [pc, #360]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800b32e:	601a      	str	r2, [r3, #0]
		}

		// Sum up current to total LV battery current
		if (lpChannelCurrent[i] < 8.0f) {
 800b330:	4a56      	ldr	r2, [pc, #344]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	edd3 7a00 	vldr	s15, [r3]
 800b33e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b342:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34a:	d50e      	bpl.n	800b36a <_Z15readAndSendDatav+0xfa>
			// Do not sum up error current values
			lvCurrent += lpChannelCurrent[i];
 800b34c:	4a4f      	ldr	r2, [pc, #316]	; (800b48c <_Z15readAndSendDatav+0x21c>)
 800b34e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	ed93 7a00 	vldr	s14, [r3]
 800b35a:	4b45      	ldr	r3, [pc, #276]	; (800b470 <_Z15readAndSendDatav+0x200>)
 800b35c:	edd3 7a00 	vldr	s15, [r3]
 800b360:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b364:	4b42      	ldr	r3, [pc, #264]	; (800b470 <_Z15readAndSendDatav+0x200>)
 800b366:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10; i++) { //maybe the values for i needs to be changed because the ADC channels have changed.
 800b36a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b36e:	3301      	adds	r3, #1
 800b370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b374:	e786      	b.n	800b284 <_Z15readAndSendDatav+0x14>
		}
	}

	for (int i = 0; i < 4; i++) {
 800b376:	2300      	movs	r3, #0
 800b378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b37c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b380:	2b03      	cmp	r3, #3
 800b382:	f300 808d 	bgt.w	800b4a0 <_Z15readAndSendDatav+0x230>
		// Raw ADC value is converted into a voltage
		// The sense current is calculated through the 62Ohms current sense resistor
		// The sense current is multiplied by the current divider factor of BTT6010
		hpChannelCurrent[i] = (hpChannelAdc[i].get() * 3.3f / 4095.0f) / 62.0f * 4000
 800b386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b38a:	00db      	lsls	r3, r3, #3
 800b38c:	4a40      	ldr	r2, [pc, #256]	; (800b490 <_Z15readAndSendDatav+0x220>)
 800b38e:	4413      	add	r3, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f7fc fcf2 	bl	8007d7a <_ZN20AdcChannelController3getEv>
 800b396:	4603      	mov	r3, r0
 800b398:	ee07 3a90 	vmov	s15, r3
 800b39c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3a0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800b478 <_Z15readAndSendDatav+0x208>
 800b3a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3a8:	eddf 6a34 	vldr	s13, [pc, #208]	; 800b47c <_Z15readAndSendDatav+0x20c>
 800b3ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b3b0:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b480 <_Z15readAndSendDatav+0x210>
 800b3b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b494 <_Z15readAndSendDatav+0x224>
 800b3bc:	ee67 7a87 	vmul.f32	s15, s15, s14
				- 0.300f;	// Subtract 300mA since this seems to be an offset
 800b3c0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800b498 <_Z15readAndSendDatav+0x228>
 800b3c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
		hpChannelCurrent[i] = (hpChannelAdc[i].get() * 3.3f / 4095.0f) / 62.0f * 4000
 800b3c8:	4a34      	ldr	r2, [pc, #208]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	edc3 7a00 	vstr	s15, [r3]

		// Limit to plausible values
		if (hpChannelCurrent[i] < 0.0f) {
 800b3d6:	4a31      	ldr	r2, [pc, #196]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b3d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	edd3 7a00 	vldr	s15, [r3]
 800b3e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ec:	d507      	bpl.n	800b3fe <_Z15readAndSendDatav+0x18e>
			hpChannelCurrent[i] = 0.0f;
 800b3ee:	4a2b      	ldr	r2, [pc, #172]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b3f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f04f 0200 	mov.w	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
		}
		if (hpChannelCurrent[i] > 16.0f) {
 800b3fe:	4a27      	ldr	r2, [pc, #156]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	edd3 7a00 	vldr	s15, [r3]
 800b40c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800b410:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b418:	dd07      	ble.n	800b42a <_Z15readAndSendDatav+0x1ba>
			hpChannelCurrent[i] = 16.0f;
 800b41a:	4a20      	ldr	r2, [pc, #128]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b41c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800b428:	601a      	str	r2, [r3, #0]
		}

		// Sum up current to total LV battery current
		if (hpChannelCurrent[i] < 16.0f) {
 800b42a:	4a1c      	ldr	r2, [pc, #112]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b42c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	edd3 7a00 	vldr	s15, [r3]
 800b438:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800b43c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b444:	d50e      	bpl.n	800b464 <_Z15readAndSendDatav+0x1f4>
			// Do not sum up error current values
			lvCurrent += hpChannelCurrent[i];
 800b446:	4a15      	ldr	r2, [pc, #84]	; (800b49c <_Z15readAndSendDatav+0x22c>)
 800b448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	ed93 7a00 	vldr	s14, [r3]
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <_Z15readAndSendDatav+0x200>)
 800b456:	edd3 7a00 	vldr	s15, [r3]
 800b45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b45e:	4b04      	ldr	r3, [pc, #16]	; (800b470 <_Z15readAndSendDatav+0x200>)
 800b460:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 4; i++) {
 800b464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b468:	3301      	adds	r3, #1
 800b46a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b46e:	e785      	b.n	800b37c <_Z15readAndSendDatav+0x10c>
 800b470:	20000af0 	.word	0x20000af0
 800b474:	20000a48 	.word	0x20000a48
 800b478:	40533333 	.word	0x40533333
 800b47c:	457ff000 	.word	0x457ff000
 800b480:	42780000 	.word	0x42780000
 800b484:	44dac000 	.word	0x44dac000
 800b488:	3c23d70a 	.word	0x3c23d70a
 800b48c:	20000ab8 	.word	0x20000ab8
 800b490:	20000a98 	.word	0x20000a98
 800b494:	457a0000 	.word	0x457a0000
 800b498:	3e99999a 	.word	0x3e99999a
 800b49c:	20000ae0 	.word	0x20000ae0
		}
	}

	outputState.LPCh1_opticalSensor.setCurrent(lpChannelCurrent[0]);
 800b4a0:	4bdb      	ldr	r3, [pc, #876]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b4a2:	edd3 7a00 	vldr	s15, [r3]
 800b4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4aa:	48da      	ldr	r0, [pc, #872]	; (800b814 <_Z15readAndSendDatav+0x5a4>)
 800b4ac:	f7fe ff09 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh2.setCurrent(lpChannelCurrent[1]);
 800b4b0:	4bd7      	ldr	r3, [pc, #860]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b4b2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b4b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ba:	48d7      	ldr	r0, [pc, #860]	; (800b818 <_Z15readAndSendDatav+0x5a8>)
 800b4bc:	f7fe ff01 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh3_HVCU.setCurrent(lpChannelCurrent[2]);
 800b4c0:	4bd3      	ldr	r3, [pc, #844]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b4c2:	edd3 7a02 	vldr	s15, [r3, #8]
 800b4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ca:	48d4      	ldr	r0, [pc, #848]	; (800b81c <_Z15readAndSendDatav+0x5ac>)
 800b4cc:	f7fe fef9 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh4_frontECU.setCurrent(lpChannelCurrent[3]);
 800b4d0:	4bcf      	ldr	r3, [pc, #828]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b4d2:	edd3 7a03 	vldr	s15, [r3, #12]
 800b4d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4da:	48d1      	ldr	r0, [pc, #836]	; (800b820 <_Z15readAndSendDatav+0x5b0>)
 800b4dc:	f7fe fef1 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh5_powerElectronics.setCurrent(lpChannelCurrent[4]);
 800b4e0:	4bcb      	ldr	r3, [pc, #812]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b4e2:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ea:	48ce      	ldr	r0, [pc, #824]	; (800b824 <_Z15readAndSendDatav+0x5b4>)
 800b4ec:	f7fe fee9 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh6.setCurrent(lpChannelCurrent[5]);
 800b4f0:	4bc7      	ldr	r3, [pc, #796]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b4f2:	edd3 7a05 	vldr	s15, [r3, #20]
 800b4f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4fa:	48cb      	ldr	r0, [pc, #812]	; (800b828 <_Z15readAndSendDatav+0x5b8>)
 800b4fc:	f7fe fee1 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh7_rearECU.setCurrent(lpChannelCurrent[6]);
 800b500:	4bc3      	ldr	r3, [pc, #780]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b502:	edd3 7a06 	vldr	s15, [r3, #24]
 800b506:	eeb0 0a67 	vmov.f32	s0, s15
 800b50a:	48c8      	ldr	r0, [pc, #800]	; (800b82c <_Z15readAndSendDatav+0x5bc>)
 800b50c:	f7fe fed9 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh8_telemetry.setCurrent(lpChannelCurrent[7]);
 800b510:	4bbf      	ldr	r3, [pc, #764]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b512:	edd3 7a07 	vldr	s15, [r3, #28]
 800b516:	eeb0 0a67 	vmov.f32	s0, s15
 800b51a:	48c5      	ldr	r0, [pc, #788]	; (800b830 <_Z15readAndSendDatav+0x5c0>)
 800b51c:	f7fe fed1 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh9_logger.setCurrent(lpChannelCurrent[8]);
 800b520:	4bbb      	ldr	r3, [pc, #748]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b522:	edd3 7a08 	vldr	s15, [r3, #32]
 800b526:	eeb0 0a67 	vmov.f32	s0, s15
 800b52a:	48c2      	ldr	r0, [pc, #776]	; (800b834 <_Z15readAndSendDatav+0x5c4>)
 800b52c:	f7fe fec9 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh10.setCurrent(lpChannelCurrent[9]);
 800b530:	4bb7      	ldr	r3, [pc, #732]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b532:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b536:	eeb0 0a67 	vmov.f32	s0, s15
 800b53a:	48bf      	ldr	r0, [pc, #764]	; (800b838 <_Z15readAndSendDatav+0x5c8>)
 800b53c:	f7fe fec1 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>

	outputState.HPCh1_projectXX.setCurrent(hpChannelCurrent[0]);
 800b540:	4bbe      	ldr	r3, [pc, #760]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b542:	edd3 7a00 	vldr	s15, [r3]
 800b546:	eeb0 0a67 	vmov.f32	s0, s15
 800b54a:	48bd      	ldr	r0, [pc, #756]	; (800b840 <_Z15readAndSendDatav+0x5d0>)
 800b54c:	f7fe feb9 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.HPCh2_coolingPump.setCurrent(hpChannelCurrent[1]);
 800b550:	4bba      	ldr	r3, [pc, #744]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b552:	edd3 7a01 	vldr	s15, [r3, #4]
 800b556:	eeb0 0a67 	vmov.f32	s0, s15
 800b55a:	48ba      	ldr	r0, [pc, #744]	; (800b844 <_Z15readAndSendDatav+0x5d4>)
 800b55c:	f7fe feb1 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.HPCh3.setCurrent(hpChannelCurrent[2]);
 800b560:	4bb6      	ldr	r3, [pc, #728]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b562:	edd3 7a02 	vldr	s15, [r3, #8]
 800b566:	eeb0 0a67 	vmov.f32	s0, s15
 800b56a:	48b7      	ldr	r0, [pc, #732]	; (800b848 <_Z15readAndSendDatav+0x5d8>)
 800b56c:	f7fe fea9 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.HPCh4.setCurrent(hpChannelCurrent[3]);
 800b570:	4bb2      	ldr	r3, [pc, #712]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b572:	edd3 7a03 	vldr	s15, [r3, #12]
 800b576:	eeb0 0a67 	vmov.f32	s0, s15
 800b57a:	48b4      	ldr	r0, [pc, #720]	; (800b84c <_Z15readAndSendDatav+0x5dc>)
 800b57c:	f7fe fea1 	bl	800a2c2 <_ZN16OutputChannelPwm10setCurrentEf>

	// Range limit, otherwise sending the CAN message may fail
	if (lvCurrent > 40) {
 800b580:	4bb3      	ldr	r3, [pc, #716]	; (800b850 <_Z15readAndSendDatav+0x5e0>)
 800b582:	edd3 7a00 	vldr	s15, [r3]
 800b586:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800b854 <_Z15readAndSendDatav+0x5e4>
 800b58a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b592:	dd02      	ble.n	800b59a <_Z15readAndSendDatav+0x32a>
		lvCurrent = 40;
 800b594:	4bae      	ldr	r3, [pc, #696]	; (800b850 <_Z15readAndSendDatav+0x5e0>)
 800b596:	4ab0      	ldr	r2, [pc, #704]	; (800b858 <_Z15readAndSendDatav+0x5e8>)
 800b598:	601a      	str	r2, [r3, #0]
	}
	if (lvCurrent < 0) {
 800b59a:	4bad      	ldr	r3, [pc, #692]	; (800b850 <_Z15readAndSendDatav+0x5e0>)
 800b59c:	edd3 7a00 	vldr	s15, [r3]
 800b5a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	d503      	bpl.n	800b5b2 <_Z15readAndSendDatav+0x342>
		lvCurrent = 0;
 800b5aa:	4ba9      	ldr	r3, [pc, #676]	; (800b850 <_Z15readAndSendDatav+0x5e0>)
 800b5ac:	f04f 0200 	mov.w	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]
	}

	// Estimate SOC
	float cellVoltage = OD_InputVoltage_get() / 6.0f;
 800b5b2:	f7fa fc55 	bl	8005e60 <_Z19OD_InputVoltage_getv>
 800b5b6:	eeb0 7a40 	vmov.f32	s14, s0
 800b5ba:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800b5be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b5c2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	int lvSoc = std::roundf(estimateLiPoSoc(cellVoltage));
 800b5c6:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800b5ca:	f7fe ffff 	bl	800a5cc <_Z15estimateLiPoSocf>
 800b5ce:	eef0 7a40 	vmov.f32	s15, s0
 800b5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d6:	f010 fb73 	bl	801bcc0 <roundf>
 800b5da:	eef0 7a40 	vmov.f32	s15, s0
 800b5de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5e2:	ee17 3a90 	vmov	r3, s15
 800b5e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	lvSoc = std::min(std::max(lvSoc, 0), 100);
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5f0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800b5f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f002 f8b3 	bl	800d766 <_ZSt3maxIiERKT_S2_S2_>
 800b600:	4602      	mov	r2, r0
 800b602:	2364      	movs	r3, #100	; 0x64
 800b604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b608:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f002 f8bd 	bl	800d78e <_ZSt3minIiERKT_S2_S2_>
 800b614:	4603      	mov	r3, r0
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Current of LPchannels 1 to 5
	Message<messages::PDU_TX_LP_Current1> msgCurrent1;
 800b61c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fd60 	bl	800a0e6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1Ev>
	msgCurrent1.set<signals::PDU_LPCh1_Current>(lpChannelCurrent[0]);
 800b626:	4b7a      	ldr	r3, [pc, #488]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b628:	edd3 7a00 	vldr	s15, [r3]
 800b62c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b630:	eeb0 0a67 	vmov.f32	s0, s15
 800b634:	4618      	mov	r0, r3
 800b636:	f001 f9c4 	bl	800c9c2 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh1_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh2_Current>(lpChannelCurrent[1]);
 800b63a:	4b75      	ldr	r3, [pc, #468]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b63c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b640:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b644:	eeb0 0a67 	vmov.f32	s0, s15
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 f9d1 	bl	800c9f0 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh2_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh3_Current>(lpChannelCurrent[2]);
 800b64e:	4b70      	ldr	r3, [pc, #448]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b650:	edd3 7a02 	vldr	s15, [r3, #8]
 800b654:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b658:	eeb0 0a67 	vmov.f32	s0, s15
 800b65c:	4618      	mov	r0, r3
 800b65e:	f001 f9de 	bl	800ca1e <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh3_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh4_Current>(lpChannelCurrent[3]);
 800b662:	4b6b      	ldr	r3, [pc, #428]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b664:	edd3 7a03 	vldr	s15, [r3, #12]
 800b668:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b66c:	eeb0 0a67 	vmov.f32	s0, s15
 800b670:	4618      	mov	r0, r3
 800b672:	f001 f9eb 	bl	800ca4c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh4_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh5_Current>(lpChannelCurrent[4]);
 800b676:	4b66      	ldr	r3, [pc, #408]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b678:	edd3 7a04 	vldr	s15, [r3, #16]
 800b67c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b680:	eeb0 0a67 	vmov.f32	s0, s15
 800b684:	4618      	mov	r0, r3
 800b686:	f001 f9f8 	bl	800ca7a <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh5_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.send();
 800b68a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f7f5 fdc5 	bl	8001220 <_ZNK3can11MessageBase4sendEm>

	osDelay(pdMS_TO_TICKS(1));// TODO when cz_interface is fixed, this can be removed
 800b696:	2001      	movs	r0, #1
 800b698:	f00c f822 	bl	80176e0 <osDelay>

	// Current of LPchannels 6 to 10
	Message<messages::PDU_TX_LP_Current2> msgCurrent2;
 800b69c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff fdc5 	bl	800b230 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1Ev>
	msgCurrent2.set<signals::PDU_LPCh6_Current>(lpChannelCurrent[5]);
 800b6a6:	4b5a      	ldr	r3, [pc, #360]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b6a8:	edd3 7a05 	vldr	s15, [r3, #20]
 800b6ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6b0:	eeb0 0a67 	vmov.f32	s0, s15
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f002 f87e 	bl	800d7b6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh6_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh7_Current>(lpChannelCurrent[6]);
 800b6ba:	4b55      	ldr	r3, [pc, #340]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b6bc:	edd3 7a06 	vldr	s15, [r3, #24]
 800b6c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f002 f88b 	bl	800d7e4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh7_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh8_Current>(lpChannelCurrent[7]);
 800b6ce:	4b50      	ldr	r3, [pc, #320]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b6d0:	edd3 7a07 	vldr	s15, [r3, #28]
 800b6d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6d8:	eeb0 0a67 	vmov.f32	s0, s15
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f002 f898 	bl	800d812 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh8_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh9_Current>(lpChannelCurrent[8]);
 800b6e2:	4b4b      	ldr	r3, [pc, #300]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b6e4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b6e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6ec:	eeb0 0a67 	vmov.f32	s0, s15
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f002 f8a5 	bl	800d840 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh9_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh10_Current>(lpChannelCurrent[9]);
 800b6f6:	4b46      	ldr	r3, [pc, #280]	; (800b810 <_Z15readAndSendDatav+0x5a0>)
 800b6f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b6fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b700:	eeb0 0a67 	vmov.f32	s0, s15
 800b704:	4618      	mov	r0, r3
 800b706:	f002 f8b2 	bl	800d86e <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals18PDU_LPCh10_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.send();
 800b70a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b70e:	2100      	movs	r1, #0
 800b710:	4618      	mov	r0, r3
 800b712:	f7f5 fd85 	bl	8001220 <_ZNK3can11MessageBase4sendEm>

	// Current of HPchannels 1 to 4
	Message<messages::PDU_TX_HP_Current> msgCurrent3;
 800b716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe fcf3 	bl	800a106 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1Ev>
	msgCurrent3.set<signals::PDU_HPCh1_Current>(hpChannelCurrent[0]);
 800b720:	4b46      	ldr	r3, [pc, #280]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b722:	edd3 7a00 	vldr	s15, [r3]
 800b726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b72a:	eeb0 0a67 	vmov.f32	s0, s15
 800b72e:	4618      	mov	r0, r3
 800b730:	f001 f9ba 	bl	800caa8 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh1_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.set<signals::PDU_HPCh2_Current>(hpChannelCurrent[1]);
 800b734:	4b41      	ldr	r3, [pc, #260]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b736:	edd3 7a01 	vldr	s15, [r3, #4]
 800b73a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b73e:	eeb0 0a67 	vmov.f32	s0, s15
 800b742:	4618      	mov	r0, r3
 800b744:	f001 f9c7 	bl	800cad6 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh2_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.set<signals::PDU_HPCh3_Current>(hpChannelCurrent[2]);
 800b748:	4b3c      	ldr	r3, [pc, #240]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b74a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b74e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b752:	eeb0 0a67 	vmov.f32	s0, s15
 800b756:	4618      	mov	r0, r3
 800b758:	f001 f9d4 	bl	800cb04 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh3_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.set<signals::PDU_HPCh4_Current>(hpChannelCurrent[3]);
 800b75c:	4b37      	ldr	r3, [pc, #220]	; (800b83c <_Z15readAndSendDatav+0x5cc>)
 800b75e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b762:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b766:	eeb0 0a67 	vmov.f32	s0, s15
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 f9e1 	bl	800cb32 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh4_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.send();
 800b770:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b774:	2100      	movs	r1, #0
 800b776:	4618      	mov	r0, r3
 800b778:	f7f5 fd52 	bl	8001220 <_ZNK3can11MessageBase4sendEm>

	// LV battery data
	Message<messages::PDU_TX_LV_BMS> msgBattery;
 800b77c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fd65 	bl	800b250 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEEC1Ev>
	msgBattery.set<signals::PDU_LV_Voltage>(OD_InputVoltage_get());
 800b786:	f7fa fb6b 	bl	8005e60 <_Z19OD_InputVoltage_getv>
 800b78a:	eef0 7a40 	vmov.f32	s15, s0
 800b78e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b792:	eeb0 0a67 	vmov.f32	s0, s15
 800b796:	4618      	mov	r0, r3
 800b798:	f002 f880 	bl	800d89c <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_VoltageEEEvNT_8dataTypeE>
	msgBattery.set<signals::PDU_LV_Current>(lvCurrent);
 800b79c:	4b2c      	ldr	r3, [pc, #176]	; (800b850 <_Z15readAndSendDatav+0x5e0>)
 800b79e:	edd3 7a00 	vldr	s15, [r3]
 800b7a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f002 f88d 	bl	800d8ca <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_CurrentEEEvNT_8dataTypeE>
	msgBattery.set<signals::PDU_LV_SOC>(lvSoc);
 800b7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7b4:	b25a      	sxtb	r2, r3
 800b7b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f002 f89b 	bl	800d8f8 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals10PDU_LV_SOCEEEvNT_8dataTypeE>
	msgBattery.send();
 800b7c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7f5 fd29 	bl	8001220 <_ZNK3can11MessageBase4sendEm>

	if (OD_CoolingPumpEnabled
			!= can::signals::PDU_OD_CoolingPumpEnabled::ENABLE) {
 800b7ce:	4b23      	ldr	r3, [pc, #140]	; (800b85c <_Z15readAndSendDatav+0x5ec>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	bf14      	ite	ne
 800b7d8:	2301      	movne	r3, #1
 800b7da:	2300      	moveq	r3, #0
 800b7dc:	b2db      	uxtb	r3, r3
	if (OD_CoolingPumpEnabled
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d005      	beq.n	800b7ee <_Z15readAndSendDatav+0x57e>
		outputState.HPCh2_coolingPump.set(false);
 800b7e2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800b860 <_Z15readAndSendDatav+0x5f0>
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4816      	ldr	r0, [pc, #88]	; (800b844 <_Z15readAndSendDatav+0x5d4>)
 800b7ea:	f7fe fcf0 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
	}

	// Short Circuit Debug Message
	Message<messages::PDU_TX_LP_Short_Circuit_Debug> msgDebug1;
 800b7ee:	f107 0318 	add.w	r3, r7, #24
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fc97 	bl	800a126 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEEC1Ev>
	msgDebug1.set<signals::PDU_LPCh1_ShortCnt>(
 800b7f8:	4806      	ldr	r0, [pc, #24]	; (800b814 <_Z15readAndSendDatav+0x5a4>)
 800b7fa:	f7fe fd9b 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b7fe:	4603      	mov	r3, r0
 800b800:	461a      	mov	r2, r3
 800b802:	f107 0318 	add.w	r3, r7, #24
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f001 f9a9 	bl	800cb60 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh1_ShortCntEEEvNT_8dataTypeE>
 800b80e:	e029      	b.n	800b864 <_Z15readAndSendDatav+0x5f4>
 800b810:	20000ab8 	.word	0x20000ab8
 800b814:	20000b30 	.word	0x20000b30
 800b818:	20000b48 	.word	0x20000b48
 800b81c:	20000b60 	.word	0x20000b60
 800b820:	20000b78 	.word	0x20000b78
 800b824:	20000b90 	.word	0x20000b90
 800b828:	20000ba8 	.word	0x20000ba8
 800b82c:	20000bc0 	.word	0x20000bc0
 800b830:	20000bd8 	.word	0x20000bd8
 800b834:	20000bf0 	.word	0x20000bf0
 800b838:	20000c08 	.word	0x20000c08
 800b83c:	20000ae0 	.word	0x20000ae0
 800b840:	20000c20 	.word	0x20000c20
 800b844:	20000c38 	.word	0x20000c38
 800b848:	20000c50 	.word	0x20000c50
 800b84c:	20000c68 	.word	0x20000c68
 800b850:	20000af0 	.word	0x20000af0
 800b854:	42200000 	.word	0x42200000
 800b858:	42200000 	.word	0x42200000
 800b85c:	2000002e 	.word	0x2000002e
 800b860:	c2c80000 	.word	0xc2c80000
			outputState.LPCh1_opticalSensor.numShorts());
	msgDebug1.set<signals::PDU_LPCh1_State>(
 800b864:	4899      	ldr	r0, [pc, #612]	; (800bacc <_Z15readAndSendDatav+0x85c>)
 800b866:	f7fe fd3b 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	f107 0318 	add.w	r3, r7, #24
 800b872:	4611      	mov	r1, r2
 800b874:	4618      	mov	r0, r3
 800b876:	f001 f988 	bl	800cb8a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh1_StateEEEvNT_8dataTypeE>
			outputState.LPCh1_opticalSensor.getStatus());
	msgDebug1.set<signals::PDU_LPCh2_ShortCnt>(outputState.LPCh2.numShorts());
 800b87a:	4895      	ldr	r0, [pc, #596]	; (800bad0 <_Z15readAndSendDatav+0x860>)
 800b87c:	f7fe fd5a 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	f107 0318 	add.w	r3, r7, #24
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f001 f992 	bl	800cbb4 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh2_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh2_State>(outputState.LPCh2.getStatus());
 800b890:	488f      	ldr	r0, [pc, #572]	; (800bad0 <_Z15readAndSendDatav+0x860>)
 800b892:	f7fe fd25 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	f107 0318 	add.w	r3, r7, #24
 800b89e:	4611      	mov	r1, r2
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f001 f99c 	bl	800cbde <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh2_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh3_ShortCnt>(
 800b8a6:	488b      	ldr	r0, [pc, #556]	; (800bad4 <_Z15readAndSendDatav+0x864>)
 800b8a8:	f7fe fd44 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f107 0318 	add.w	r3, r7, #24
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 f9a6 	bl	800cc08 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh3_ShortCntEEEvNT_8dataTypeE>
			outputState.LPCh3_HVCU.numShorts());
	msgDebug1.set<signals::PDU_LPCh3_State>(outputState.LPCh3_HVCU.getStatus());
 800b8bc:	4885      	ldr	r0, [pc, #532]	; (800bad4 <_Z15readAndSendDatav+0x864>)
 800b8be:	f7fe fd0f 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	f107 0318 	add.w	r3, r7, #24
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f001 f9b0 	bl	800cc32 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh3_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh4_ShortCnt>(
 800b8d2:	4881      	ldr	r0, [pc, #516]	; (800bad8 <_Z15readAndSendDatav+0x868>)
 800b8d4:	f7fe fd2e 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f107 0318 	add.w	r3, r7, #24
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f001 f9ba 	bl	800cc5c <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh4_ShortCntEEEvNT_8dataTypeE>
			outputState.LPCh4_frontECU.numShorts());
	msgDebug1.set<signals::PDU_LPCh4_State>(
 800b8e8:	487b      	ldr	r0, [pc, #492]	; (800bad8 <_Z15readAndSendDatav+0x868>)
 800b8ea:	f7fe fcf9 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f107 0318 	add.w	r3, r7, #24
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 f9c4 	bl	800cc86 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh4_StateEEEvNT_8dataTypeE>
			outputState.LPCh4_frontECU.getStatus());
	msgDebug1.set<signals::PDU_LPCh5_ShortCnt>(
 800b8fe:	4877      	ldr	r0, [pc, #476]	; (800badc <_Z15readAndSendDatav+0x86c>)
 800b900:	f7fe fd18 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b904:	4603      	mov	r3, r0
 800b906:	461a      	mov	r2, r3
 800b908:	f107 0318 	add.w	r3, r7, #24
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f001 f9ce 	bl	800ccb0 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh5_ShortCntEEEvNT_8dataTypeE>
			outputState.LPCh5_powerElectronics.numShorts());
	msgDebug1.set<signals::PDU_LPCh5_State>(
 800b914:	4871      	ldr	r0, [pc, #452]	; (800badc <_Z15readAndSendDatav+0x86c>)
 800b916:	f7fe fce3 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b91a:	4603      	mov	r3, r0
 800b91c:	461a      	mov	r2, r3
 800b91e:	f107 0318 	add.w	r3, r7, #24
 800b922:	4611      	mov	r1, r2
 800b924:	4618      	mov	r0, r3
 800b926:	f001 f9d8 	bl	800ccda <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh5_StateEEEvNT_8dataTypeE>
			outputState.LPCh5_powerElectronics.getStatus());
	msgDebug1.set<signals::PDU_LPCh6_ShortCnt>(outputState.LPCh6.numShorts());
 800b92a:	486d      	ldr	r0, [pc, #436]	; (800bae0 <_Z15readAndSendDatav+0x870>)
 800b92c:	f7fe fd02 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b930:	4603      	mov	r3, r0
 800b932:	461a      	mov	r2, r3
 800b934:	f107 0318 	add.w	r3, r7, #24
 800b938:	4611      	mov	r1, r2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 f9e2 	bl	800cd04 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh6_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh6_State>(outputState.LPCh6.getStatus());
 800b940:	4867      	ldr	r0, [pc, #412]	; (800bae0 <_Z15readAndSendDatav+0x870>)
 800b942:	f7fe fccd 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b946:	4603      	mov	r3, r0
 800b948:	461a      	mov	r2, r3
 800b94a:	f107 0318 	add.w	r3, r7, #24
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f001 f9ec 	bl	800cd2e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh6_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh7_ShortCnt>(
 800b956:	4863      	ldr	r0, [pc, #396]	; (800bae4 <_Z15readAndSendDatav+0x874>)
 800b958:	f7fe fcec 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461a      	mov	r2, r3
 800b960:	f107 0318 	add.w	r3, r7, #24
 800b964:	4611      	mov	r1, r2
 800b966:	4618      	mov	r0, r3
 800b968:	f001 f9f6 	bl	800cd58 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh7_ShortCntEEEvNT_8dataTypeE>
			outputState.LPCh7_rearECU.numShorts());
	msgDebug1.set<signals::PDU_LPCh7_State>(
 800b96c:	485d      	ldr	r0, [pc, #372]	; (800bae4 <_Z15readAndSendDatav+0x874>)
 800b96e:	f7fe fcb7 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b972:	4603      	mov	r3, r0
 800b974:	461a      	mov	r2, r3
 800b976:	f107 0318 	add.w	r3, r7, #24
 800b97a:	4611      	mov	r1, r2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fa00 	bl	800cd82 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh7_StateEEEvNT_8dataTypeE>
			outputState.LPCh7_rearECU.getStatus());
	msgDebug1.set<signals::PDU_LPCh8_ShortCnt>(
 800b982:	4859      	ldr	r0, [pc, #356]	; (800bae8 <_Z15readAndSendDatav+0x878>)
 800b984:	f7fe fcd6 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	f107 0318 	add.w	r3, r7, #24
 800b990:	4611      	mov	r1, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f001 fa0a 	bl	800cdac <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh8_ShortCntEEEvNT_8dataTypeE>
			outputState.LPCh8_telemetry.numShorts());
	msgDebug1.set<signals::PDU_LPCh8_State>(
 800b998:	4853      	ldr	r0, [pc, #332]	; (800bae8 <_Z15readAndSendDatav+0x878>)
 800b99a:	f7fe fca1 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	f107 0318 	add.w	r3, r7, #24
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 fa14 	bl	800cdd6 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh8_StateEEEvNT_8dataTypeE>
			outputState.LPCh8_telemetry.getStatus());
	msgDebug1.set<signals::PDU_LPCh9_ShortCnt>(
 800b9ae:	484f      	ldr	r0, [pc, #316]	; (800baec <_Z15readAndSendDatav+0x87c>)
 800b9b0:	f7fe fcc0 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f107 0318 	add.w	r3, r7, #24
 800b9bc:	4611      	mov	r1, r2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 fa1e 	bl	800ce00 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh9_ShortCntEEEvNT_8dataTypeE>
			outputState.LPCh9_logger.numShorts());
	msgDebug1.set<signals::PDU_LPCh9_State>(
 800b9c4:	4849      	ldr	r0, [pc, #292]	; (800baec <_Z15readAndSendDatav+0x87c>)
 800b9c6:	f7fe fc8b 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	f107 0318 	add.w	r3, r7, #24
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f001 fa28 	bl	800ce2a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh9_StateEEEvNT_8dataTypeE>
			outputState.LPCh9_logger.getStatus());
	msgDebug1.set<signals::PDU_LPCh10_ShortCnt>(outputState.LPCh10.numShorts());
 800b9da:	4845      	ldr	r0, [pc, #276]	; (800baf0 <_Z15readAndSendDatav+0x880>)
 800b9dc:	f7fe fcaa 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f107 0318 	add.w	r3, r7, #24
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 fa32 	bl	800ce54 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals19PDU_LPCh10_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh10_State>(outputState.LPCh10.getStatus());
 800b9f0:	483f      	ldr	r0, [pc, #252]	; (800baf0 <_Z15readAndSendDatav+0x880>)
 800b9f2:	f7fe fc75 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f107 0318 	add.w	r3, r7, #24
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 fa3c 	bl	800ce7e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals16PDU_LPCh10_StateEEEvNT_8dataTypeE>
	msgDebug1.send();
 800ba06:	f107 0318 	add.w	r3, r7, #24
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7f5 fc07 	bl	8001220 <_ZNK3can11MessageBase4sendEm>

	Message<messages::PDU_TX_HP_Short_Circuit_Debug> msgDebug2;
 800ba12:	463b      	mov	r3, r7
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe fb96 	bl	800a146 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEEC1Ev>
	msgDebug2.set<signals::PDU_HPCh1_ShortCnt>(
 800ba1a:	4836      	ldr	r0, [pc, #216]	; (800baf4 <_Z15readAndSendDatav+0x884>)
 800ba1c:	f7fe fc8a 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	463b      	mov	r3, r7
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 fa3d 	bl	800cea8 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh1_ShortCntEEEvNT_8dataTypeE>
			outputState.HPCh1_projectXX.numShorts());
	msgDebug2.set<signals::PDU_HPCh1_State>(
 800ba2e:	4831      	ldr	r0, [pc, #196]	; (800baf4 <_Z15readAndSendDatav+0x884>)
 800ba30:	f7fe fc56 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800ba34:	4603      	mov	r3, r0
 800ba36:	461a      	mov	r2, r3
 800ba38:	463b      	mov	r3, r7
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 fa48 	bl	800ced2 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh1_StateEEEvNT_8dataTypeE>
			outputState.HPCh1_projectXX.getStatus());
	msgDebug2.set<signals::PDU_HPCh2_ShortCnt>(
 800ba42:	482d      	ldr	r0, [pc, #180]	; (800baf8 <_Z15readAndSendDatav+0x888>)
 800ba44:	f7fe fc76 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	463b      	mov	r3, r7
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 fa53 	bl	800cefc <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh2_ShortCntEEEvNT_8dataTypeE>
			outputState.HPCh2_coolingPump.numShorts());
	msgDebug2.set<signals::PDU_HPCh2_State>(
 800ba56:	4828      	ldr	r0, [pc, #160]	; (800baf8 <_Z15readAndSendDatav+0x888>)
 800ba58:	f7fe fc42 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	463b      	mov	r3, r7
 800ba62:	4611      	mov	r1, r2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 fa5e 	bl	800cf26 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh2_StateEEEvNT_8dataTypeE>
			outputState.HPCh2_coolingPump.getStatus());
	msgDebug2.set<signals::PDU_HPCh3_ShortCnt>(outputState.HPCh3.numShorts());
 800ba6a:	4824      	ldr	r0, [pc, #144]	; (800bafc <_Z15readAndSendDatav+0x88c>)
 800ba6c:	f7fe fc62 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800ba70:	4603      	mov	r3, r0
 800ba72:	461a      	mov	r2, r3
 800ba74:	463b      	mov	r3, r7
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 fa69 	bl	800cf50 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh3_ShortCntEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh3_State>(outputState.HPCh3.getStatus());
 800ba7e:	481f      	ldr	r0, [pc, #124]	; (800bafc <_Z15readAndSendDatav+0x88c>)
 800ba80:	f7fe fc2e 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	463b      	mov	r3, r7
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 fa74 	bl	800cf7a <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh3_StateEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh4_ShortCnt>(outputState.HPCh4.numShorts());
 800ba92:	481b      	ldr	r0, [pc, #108]	; (800bb00 <_Z15readAndSendDatav+0x890>)
 800ba94:	f7fe fc4e 	bl	800a334 <_ZN16OutputChannelPwm9numShortsEv>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	463b      	mov	r3, r7
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fa7f 	bl	800cfa4 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh4_ShortCntEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh4_State>(outputState.HPCh4.getStatus());
 800baa6:	4816      	ldr	r0, [pc, #88]	; (800bb00 <_Z15readAndSendDatav+0x890>)
 800baa8:	f7fe fc1a 	bl	800a2e0 <_ZN16OutputChannelPwm9getStatusEv>
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	463b      	mov	r3, r7
 800bab2:	4611      	mov	r1, r2
 800bab4:	4618      	mov	r0, r3
 800bab6:	f001 fa8a 	bl	800cfce <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh4_StateEEEvNT_8dataTypeE>
	msgDebug2.send();
 800baba:	463b      	mov	r3, r7
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f5 fbae 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
}
 800bac4:	bf00      	nop
 800bac6:	37a8      	adds	r7, #168	; 0xa8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	20000b30 	.word	0x20000b30
 800bad0:	20000b48 	.word	0x20000b48
 800bad4:	20000b60 	.word	0x20000b60
 800bad8:	20000b78 	.word	0x20000b78
 800badc:	20000b90 	.word	0x20000b90
 800bae0:	20000ba8 	.word	0x20000ba8
 800bae4:	20000bc0 	.word	0x20000bc0
 800bae8:	20000bd8 	.word	0x20000bd8
 800baec:	20000bf0 	.word	0x20000bf0
 800baf0:	20000c08 	.word	0x20000c08
 800baf4:	20000c20 	.word	0x20000c20
 800baf8:	20000c38 	.word	0x20000c38
 800bafc:	20000c50 	.word	0x20000c50
 800bb00:	20000c68 	.word	0x20000c68

0800bb04 <_Z19batterySafetyChecksv>:

/**
 * Safety checks for the battery: Low voltage warning, critical voltage error, over current error.
 */
void batterySafetyChecks() {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	ed2d 8b02 	vpush	{d8}
 800bb0a:	af00      	add	r7, sp, #0
	static uint16_t errorUndervoltageCounter = 0;
	static uint16_t errorOvercurrentCounter = 0;
	static uint16_t errorOvertemperatureCounter = 0;

	// Warning when battery gets low
	if (OD_InputVoltage_get() < OD_batterVoltageLow_get()) {
 800bb0c:	f7fa f9a8 	bl	8005e60 <_Z19OD_InputVoltage_getv>
 800bb10:	eeb0 8a40 	vmov.f32	s16, s0
 800bb14:	f7fa fd12 	bl	800653c <_Z23OD_batterVoltageLow_getv>
 800bb18:	eef0 7a40 	vmov.f32	s15, s0
 800bb1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	bf4c      	ite	mi
 800bb26:	2301      	movmi	r3, #1
 800bb28:	2300      	movpl	r3, #0
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <_Z19batterySafetyChecksv+0x32>
		WARN_batterVoltageLow_set();
 800bb30:	f7f6 fc6e 	bl	8002410 <_Z25WARN_batterVoltageLow_setv>
 800bb34:	e001      	b.n	800bb3a <_Z19batterySafetyChecksv+0x36>
	} else {
		WARN_batterVoltageLow_clear();
 800bb36:	f7f6 fc85 	bl	8002444 <_Z27WARN_batterVoltageLow_clearv>
	}

	//Warning when battery temperature rises too high
	if (batteryTemperature > OD_overTempWarn_get()) {
 800bb3a:	f7fa fd73 	bl	8006624 <_Z19OD_overTempWarn_getv>
 800bb3e:	eeb0 7a40 	vmov.f32	s14, s0
 800bb42:	4bb0      	ldr	r3, [pc, #704]	; (800be04 <_Z19batterySafetyChecksv+0x300>)
 800bb44:	edd3 7a00 	vldr	s15, [r3]
 800bb48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb50:	bf4c      	ite	mi
 800bb52:	2301      	movmi	r3, #1
 800bb54:	2300      	movpl	r3, #0
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <_Z19batterySafetyChecksv+0x5e>
		WARN_batterTempHigh_set();
 800bb5c:	f7f6 fc8e 	bl	800247c <_Z23WARN_batterTempHigh_setv>
 800bb60:	e001      	b.n	800bb66 <_Z19batterySafetyChecksv+0x62>
	} else {
		WARN_batterTempHigh_clear();
 800bb62:	f7f6 fca5 	bl	80024b0 <_Z25WARN_batterTempHigh_clearv>
	}

	// Error and shutdown when LV battery voltage gets critical low
	if (OD_InputVoltage_get() < OD_batterVoltageCritical_get()
 800bb66:	f7fa f97b 	bl	8005e60 <_Z19OD_InputVoltage_getv>
 800bb6a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb6e:	f7fa fd1f 	bl	80065b0 <_Z28OD_batterVoltageCritical_getv>
 800bb72:	eef0 7a40 	vmov.f32	s15, s0
			|| errorUndervoltageCounter >= 200) {
 800bb76:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	d403      	bmi.n	800bb88 <_Z19batterySafetyChecksv+0x84>
 800bb80:	4ba1      	ldr	r3, [pc, #644]	; (800be08 <_Z19batterySafetyChecksv+0x304>)
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	2bc7      	cmp	r3, #199	; 0xc7
 800bb86:	d901      	bls.n	800bb8c <_Z19batterySafetyChecksv+0x88>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <_Z19batterySafetyChecksv+0x8a>
 800bb8c:	2300      	movs	r3, #0
	if (OD_InputVoltage_get() < OD_batterVoltageCritical_get()
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 8084 	beq.w	800bc9c <_Z19batterySafetyChecksv+0x198>

		errorUndervoltageCounter++;
 800bb94:	4b9c      	ldr	r3, [pc, #624]	; (800be08 <_Z19batterySafetyChecksv+0x304>)
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	4b9a      	ldr	r3, [pc, #616]	; (800be08 <_Z19batterySafetyChecksv+0x304>)
 800bb9e:	801a      	strh	r2, [r3, #0]

		// If error is present for 100 or more cycles (500ms), set the error
		if (errorUndervoltageCounter == 100) {
 800bba0:	4b99      	ldr	r3, [pc, #612]	; (800be08 <_Z19batterySafetyChecksv+0x304>)
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	2b64      	cmp	r3, #100	; 0x64
 800bba6:	d102      	bne.n	800bbae <_Z19batterySafetyChecksv+0xaa>
			ERR_batterVoltageCritical_set();
 800bba8:	f7f6 fc9e 	bl	80024e8 <_Z29ERR_batterVoltageCritical_setv>
 800bbac:	e079      	b.n	800bca2 <_Z19batterySafetyChecksv+0x19e>

			// If undervoltage is longer than 1s, shut everything down
		} else if (errorUndervoltageCounter >= 200) {
 800bbae:	4b96      	ldr	r3, [pc, #600]	; (800be08 <_Z19batterySafetyChecksv+0x304>)
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	2bc7      	cmp	r3, #199	; 0xc7
 800bbb4:	d975      	bls.n	800bca2 <_Z19batterySafetyChecksv+0x19e>
			outputState.LPCh1_opticalSensor.set(false);
 800bbb6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bbba:	2100      	movs	r1, #0
 800bbbc:	4894      	ldr	r0, [pc, #592]	; (800be10 <_Z19batterySafetyChecksv+0x30c>)
 800bbbe:	f7fe fb06 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh2.set(false);
 800bbc2:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4892      	ldr	r0, [pc, #584]	; (800be14 <_Z19batterySafetyChecksv+0x310>)
 800bbca:	f7fe fb00 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh3_HVCU.set(false);
 800bbce:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4890      	ldr	r0, [pc, #576]	; (800be18 <_Z19batterySafetyChecksv+0x314>)
 800bbd6:	f7fe fafa 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh4_frontECU.set(false);
 800bbda:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bbde:	2100      	movs	r1, #0
 800bbe0:	488e      	ldr	r0, [pc, #568]	; (800be1c <_Z19batterySafetyChecksv+0x318>)
 800bbe2:	f7fe faf4 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(false);
 800bbe6:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bbea:	2100      	movs	r1, #0
 800bbec:	488c      	ldr	r0, [pc, #560]	; (800be20 <_Z19batterySafetyChecksv+0x31c>)
 800bbee:	f7fe faee 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(false);
 800bbf2:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	488a      	ldr	r0, [pc, #552]	; (800be24 <_Z19batterySafetyChecksv+0x320>)
 800bbfa:	f7fe fae8 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(false);
 800bbfe:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc02:	2100      	movs	r1, #0
 800bc04:	4888      	ldr	r0, [pc, #544]	; (800be28 <_Z19batterySafetyChecksv+0x324>)
 800bc06:	f7fe fae2 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh8_telemetry.set(false);
 800bc0a:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc0e:	2100      	movs	r1, #0
 800bc10:	4886      	ldr	r0, [pc, #536]	; (800be2c <_Z19batterySafetyChecksv+0x328>)
 800bc12:	f7fe fadc 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh9_logger.set(false);
 800bc16:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4884      	ldr	r0, [pc, #528]	; (800be30 <_Z19batterySafetyChecksv+0x32c>)
 800bc1e:	f7fe fad6 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh10.set(false);
 800bc22:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc26:	2100      	movs	r1, #0
 800bc28:	4882      	ldr	r0, [pc, #520]	; (800be34 <_Z19batterySafetyChecksv+0x330>)
 800bc2a:	f7fe fad0 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh1_projectXX.set(false);
 800bc2e:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc32:	2100      	movs	r1, #0
 800bc34:	4880      	ldr	r0, [pc, #512]	; (800be38 <_Z19batterySafetyChecksv+0x334>)
 800bc36:	f7fe faca 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh2_coolingPump.set(false);
 800bc3a:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc3e:	2100      	movs	r1, #0
 800bc40:	487e      	ldr	r0, [pc, #504]	; (800be3c <_Z19batterySafetyChecksv+0x338>)
 800bc42:	f7fe fac4 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh3.set(false);
 800bc46:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	487c      	ldr	r0, [pc, #496]	; (800be40 <_Z19batterySafetyChecksv+0x33c>)
 800bc4e:	f7fe fabe 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh4.set(false);
 800bc52:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc56:	2100      	movs	r1, #0
 800bc58:	487a      	ldr	r0, [pc, #488]	; (800be44 <_Z19batterySafetyChecksv+0x340>)
 800bc5a:	f7fe fab8 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.set(false);
 800bc5e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc62:	2100      	movs	r1, #0
 800bc64:	4878      	ldr	r0, [pc, #480]	; (800be48 <_Z19batterySafetyChecksv+0x344>)
 800bc66:	f7fe fab2 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D2_PE_enable.set(false);
 800bc6a:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc6e:	2100      	movs	r1, #0
 800bc70:	4876      	ldr	r0, [pc, #472]	; (800be4c <_Z19batterySafetyChecksv+0x348>)
 800bc72:	f7fe faac 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D3.set(false);
 800bc76:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4874      	ldr	r0, [pc, #464]	; (800be50 <_Z19batterySafetyChecksv+0x34c>)
 800bc7e:	f7fe faa6 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(false);
 800bc82:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc86:	2100      	movs	r1, #0
 800bc88:	4872      	ldr	r0, [pc, #456]	; (800be54 <_Z19batterySafetyChecksv+0x350>)
 800bc8a:	f7fe faa0 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800bc8e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bc92:	2100      	movs	r1, #0
 800bc94:	4870      	ldr	r0, [pc, #448]	; (800be58 <_Z19batterySafetyChecksv+0x354>)
 800bc96:	f7fe fa9a 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
 800bc9a:	e002      	b.n	800bca2 <_Z19batterySafetyChecksv+0x19e>
		}
	} else {
		errorUndervoltageCounter = 0;
 800bc9c:	4b5a      	ldr	r3, [pc, #360]	; (800be08 <_Z19batterySafetyChecksv+0x304>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	801a      	strh	r2, [r3, #0]
	}

	if (batteryTemperature > OD_overTempCritical_get()
 800bca2:	f7fa fcf9 	bl	8006698 <_Z23OD_overTempCritical_getv>
 800bca6:	eeb0 7a40 	vmov.f32	s14, s0
 800bcaa:	4b56      	ldr	r3, [pc, #344]	; (800be04 <_Z19batterySafetyChecksv+0x300>)
 800bcac:	edd3 7a00 	vldr	s15, [r3]
			|| errorOvertemperatureCounter >= 400) {
 800bcb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb8:	d404      	bmi.n	800bcc4 <_Z19batterySafetyChecksv+0x1c0>
 800bcba:	4b68      	ldr	r3, [pc, #416]	; (800be5c <_Z19batterySafetyChecksv+0x358>)
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bcc2:	d301      	bcc.n	800bcc8 <_Z19batterySafetyChecksv+0x1c4>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e000      	b.n	800bcca <_Z19batterySafetyChecksv+0x1c6>
 800bcc8:	2300      	movs	r3, #0
	if (batteryTemperature > OD_overTempCritical_get()
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 8085 	beq.w	800bdda <_Z19batterySafetyChecksv+0x2d6>
		errorOvertemperatureCounter++;
 800bcd0:	4b62      	ldr	r3, [pc, #392]	; (800be5c <_Z19batterySafetyChecksv+0x358>)
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	4b60      	ldr	r3, [pc, #384]	; (800be5c <_Z19batterySafetyChecksv+0x358>)
 800bcda:	801a      	strh	r2, [r3, #0]

		// If error is present for 200 or more cycles (1000ms), set the error
		if (errorOvertemperatureCounter == 200) {
 800bcdc:	4b5f      	ldr	r3, [pc, #380]	; (800be5c <_Z19batterySafetyChecksv+0x358>)
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	2bc8      	cmp	r3, #200	; 0xc8
 800bce2:	d102      	bne.n	800bcea <_Z19batterySafetyChecksv+0x1e6>
			ERR_batterTempCritical_set();
 800bce4:	f7f6 fc70 	bl	80025c8 <_Z26ERR_batterTempCritical_setv>
 800bce8:	e07a      	b.n	800bde0 <_Z19batterySafetyChecksv+0x2dc>

			// If overtemperature is longer than 2s, shut everything down
		} else if (errorOvertemperatureCounter >= 400) {
 800bcea:	4b5c      	ldr	r3, [pc, #368]	; (800be5c <_Z19batterySafetyChecksv+0x358>)
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bcf2:	d375      	bcc.n	800bde0 <_Z19batterySafetyChecksv+0x2dc>
			outputState.LPCh1_opticalSensor.set(false);
 800bcf4:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4845      	ldr	r0, [pc, #276]	; (800be10 <_Z19batterySafetyChecksv+0x30c>)
 800bcfc:	f7fe fa67 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh2.set(false);
 800bd00:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd04:	2100      	movs	r1, #0
 800bd06:	4843      	ldr	r0, [pc, #268]	; (800be14 <_Z19batterySafetyChecksv+0x310>)
 800bd08:	f7fe fa61 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh3_HVCU.set(false);
 800bd0c:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd10:	2100      	movs	r1, #0
 800bd12:	4841      	ldr	r0, [pc, #260]	; (800be18 <_Z19batterySafetyChecksv+0x314>)
 800bd14:	f7fe fa5b 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh4_frontECU.set(false);
 800bd18:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	483f      	ldr	r0, [pc, #252]	; (800be1c <_Z19batterySafetyChecksv+0x318>)
 800bd20:	f7fe fa55 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(false);
 800bd24:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd28:	2100      	movs	r1, #0
 800bd2a:	483d      	ldr	r0, [pc, #244]	; (800be20 <_Z19batterySafetyChecksv+0x31c>)
 800bd2c:	f7fe fa4f 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(false);
 800bd30:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd34:	2100      	movs	r1, #0
 800bd36:	483b      	ldr	r0, [pc, #236]	; (800be24 <_Z19batterySafetyChecksv+0x320>)
 800bd38:	f7fe fa49 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(false);
 800bd3c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd40:	2100      	movs	r1, #0
 800bd42:	4839      	ldr	r0, [pc, #228]	; (800be28 <_Z19batterySafetyChecksv+0x324>)
 800bd44:	f7fe fa43 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh8_telemetry.set(false);
 800bd48:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	4837      	ldr	r0, [pc, #220]	; (800be2c <_Z19batterySafetyChecksv+0x328>)
 800bd50:	f7fe fa3d 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh9_logger.set(false);
 800bd54:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd58:	2100      	movs	r1, #0
 800bd5a:	4835      	ldr	r0, [pc, #212]	; (800be30 <_Z19batterySafetyChecksv+0x32c>)
 800bd5c:	f7fe fa37 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh10.set(false);
 800bd60:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd64:	2100      	movs	r1, #0
 800bd66:	4833      	ldr	r0, [pc, #204]	; (800be34 <_Z19batterySafetyChecksv+0x330>)
 800bd68:	f7fe fa31 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh1_projectXX.set(false);
 800bd6c:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd70:	2100      	movs	r1, #0
 800bd72:	4831      	ldr	r0, [pc, #196]	; (800be38 <_Z19batterySafetyChecksv+0x334>)
 800bd74:	f7fe fa2b 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh2_coolingPump.set(false);
 800bd78:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	482f      	ldr	r0, [pc, #188]	; (800be3c <_Z19batterySafetyChecksv+0x338>)
 800bd80:	f7fe fa25 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh3.set(false);
 800bd84:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd88:	2100      	movs	r1, #0
 800bd8a:	482d      	ldr	r0, [pc, #180]	; (800be40 <_Z19batterySafetyChecksv+0x33c>)
 800bd8c:	f7fe fa1f 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh4.set(false);
 800bd90:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bd94:	2100      	movs	r1, #0
 800bd96:	482b      	ldr	r0, [pc, #172]	; (800be44 <_Z19batterySafetyChecksv+0x340>)
 800bd98:	f7fe fa19 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.set(false);
 800bd9c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bda0:	2100      	movs	r1, #0
 800bda2:	4829      	ldr	r0, [pc, #164]	; (800be48 <_Z19batterySafetyChecksv+0x344>)
 800bda4:	f7fe fa13 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D2_PE_enable.set(false);
 800bda8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bdac:	2100      	movs	r1, #0
 800bdae:	4827      	ldr	r0, [pc, #156]	; (800be4c <_Z19batterySafetyChecksv+0x348>)
 800bdb0:	f7fe fa0d 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D3.set(false);
 800bdb4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4825      	ldr	r0, [pc, #148]	; (800be50 <_Z19batterySafetyChecksv+0x34c>)
 800bdbc:	f7fe fa07 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(false);
 800bdc0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	4823      	ldr	r0, [pc, #140]	; (800be54 <_Z19batterySafetyChecksv+0x350>)
 800bdc8:	f7fe fa01 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800bdcc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800be0c <_Z19batterySafetyChecksv+0x308>
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	4821      	ldr	r0, [pc, #132]	; (800be58 <_Z19batterySafetyChecksv+0x354>)
 800bdd4:	f7fe f9fb 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
 800bdd8:	e002      	b.n	800bde0 <_Z19batterySafetyChecksv+0x2dc>
		}
	} else {
		errorOvertemperatureCounter = 0;
 800bdda:	4b20      	ldr	r3, [pc, #128]	; (800be5c <_Z19batterySafetyChecksv+0x358>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	801a      	strh	r2, [r3, #0]
	}

	// Error and shutdown when LV battery current exceeds critical value
	if (lvCurrent > OD_batteryOvercurrent_get()
 800bde0:	f7fa fc94 	bl	800670c <_Z25OD_batteryOvercurrent_getv>
 800bde4:	eeb0 7a40 	vmov.f32	s14, s0
 800bde8:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <_Z19batterySafetyChecksv+0x35c>)
 800bdea:	edd3 7a00 	vldr	s15, [r3]
			|| errorOvercurrentCounter > 10) {
 800bdee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf6:	d403      	bmi.n	800be00 <_Z19batterySafetyChecksv+0x2fc>
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	; (800be64 <_Z19batterySafetyChecksv+0x360>)
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	2b0a      	cmp	r3, #10
 800bdfe:	d933      	bls.n	800be68 <_Z19batterySafetyChecksv+0x364>
 800be00:	2301      	movs	r3, #1
 800be02:	e032      	b.n	800be6a <_Z19batterySafetyChecksv+0x366>
 800be04:	20000b00 	.word	0x20000b00
 800be08:	20000cf8 	.word	0x20000cf8
 800be0c:	c2c80000 	.word	0xc2c80000
 800be10:	20000b30 	.word	0x20000b30
 800be14:	20000b48 	.word	0x20000b48
 800be18:	20000b60 	.word	0x20000b60
 800be1c:	20000b78 	.word	0x20000b78
 800be20:	20000b90 	.word	0x20000b90
 800be24:	20000ba8 	.word	0x20000ba8
 800be28:	20000bc0 	.word	0x20000bc0
 800be2c:	20000bd8 	.word	0x20000bd8
 800be30:	20000bf0 	.word	0x20000bf0
 800be34:	20000c08 	.word	0x20000c08
 800be38:	20000c20 	.word	0x20000c20
 800be3c:	20000c38 	.word	0x20000c38
 800be40:	20000c50 	.word	0x20000c50
 800be44:	20000c68 	.word	0x20000c68
 800be48:	20000c80 	.word	0x20000c80
 800be4c:	20000c98 	.word	0x20000c98
 800be50:	20000cb0 	.word	0x20000cb0
 800be54:	20000cc8 	.word	0x20000cc8
 800be58:	20000ce0 	.word	0x20000ce0
 800be5c:	20000cfc 	.word	0x20000cfc
 800be60:	20000af0 	.word	0x20000af0
 800be64:	20000cfa 	.word	0x20000cfa
 800be68:	2300      	movs	r3, #0
	if (lvCurrent > OD_batteryOvercurrent_get()
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d07e      	beq.n	800bf6c <_Z19batterySafetyChecksv+0x468>

		errorOvercurrentCounter++;
 800be6e:	4b43      	ldr	r3, [pc, #268]	; (800bf7c <_Z19batterySafetyChecksv+0x478>)
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	b29a      	uxth	r2, r3
 800be76:	4b41      	ldr	r3, [pc, #260]	; (800bf7c <_Z19batterySafetyChecksv+0x478>)
 800be78:	801a      	strh	r2, [r3, #0]

		// If error is present for 10 or more cycles, shut down pod and set the error
		if (errorOvercurrentCounter > 10) {
 800be7a:	4b40      	ldr	r3, [pc, #256]	; (800bf7c <_Z19batterySafetyChecksv+0x478>)
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	2b0a      	cmp	r3, #10
 800be80:	d977      	bls.n	800bf72 <_Z19batterySafetyChecksv+0x46e>
			ERR_batteryOvercurrent_set();
 800be82:	f7f6 fb69 	bl	8002558 <_Z26ERR_batteryOvercurrent_setv>
			outputState.LPCh1_opticalSensor.set(false);
 800be86:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800be8a:	2100      	movs	r1, #0
 800be8c:	483d      	ldr	r0, [pc, #244]	; (800bf84 <_Z19batterySafetyChecksv+0x480>)
 800be8e:	f7fe f99e 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh2.set(false);
 800be92:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800be96:	2100      	movs	r1, #0
 800be98:	483b      	ldr	r0, [pc, #236]	; (800bf88 <_Z19batterySafetyChecksv+0x484>)
 800be9a:	f7fe f998 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh3_HVCU.set(false);
 800be9e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bea2:	2100      	movs	r1, #0
 800bea4:	4839      	ldr	r0, [pc, #228]	; (800bf8c <_Z19batterySafetyChecksv+0x488>)
 800bea6:	f7fe f992 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh4_frontECU.set(false);
 800beaa:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800beae:	2100      	movs	r1, #0
 800beb0:	4837      	ldr	r0, [pc, #220]	; (800bf90 <_Z19batterySafetyChecksv+0x48c>)
 800beb2:	f7fe f98c 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(false);
 800beb6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800beba:	2100      	movs	r1, #0
 800bebc:	4835      	ldr	r0, [pc, #212]	; (800bf94 <_Z19batterySafetyChecksv+0x490>)
 800bebe:	f7fe f986 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(false);
 800bec2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bec6:	2100      	movs	r1, #0
 800bec8:	4833      	ldr	r0, [pc, #204]	; (800bf98 <_Z19batterySafetyChecksv+0x494>)
 800beca:	f7fe f980 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(false);
 800bece:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bed2:	2100      	movs	r1, #0
 800bed4:	4831      	ldr	r0, [pc, #196]	; (800bf9c <_Z19batterySafetyChecksv+0x498>)
 800bed6:	f7fe f97a 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh8_telemetry.set(false);
 800beda:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bede:	2100      	movs	r1, #0
 800bee0:	482f      	ldr	r0, [pc, #188]	; (800bfa0 <_Z19batterySafetyChecksv+0x49c>)
 800bee2:	f7fe f974 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh9_logger.set(false);
 800bee6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800beea:	2100      	movs	r1, #0
 800beec:	482d      	ldr	r0, [pc, #180]	; (800bfa4 <_Z19batterySafetyChecksv+0x4a0>)
 800beee:	f7fe f96e 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh10.set(false);
 800bef2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bef6:	2100      	movs	r1, #0
 800bef8:	482b      	ldr	r0, [pc, #172]	; (800bfa8 <_Z19batterySafetyChecksv+0x4a4>)
 800befa:	f7fe f968 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh1_projectXX.set(false);
 800befe:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf02:	2100      	movs	r1, #0
 800bf04:	4829      	ldr	r0, [pc, #164]	; (800bfac <_Z19batterySafetyChecksv+0x4a8>)
 800bf06:	f7fe f962 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh2_coolingPump.set(false);
 800bf0a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4827      	ldr	r0, [pc, #156]	; (800bfb0 <_Z19batterySafetyChecksv+0x4ac>)
 800bf12:	f7fe f95c 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh3.set(false);
 800bf16:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	4825      	ldr	r0, [pc, #148]	; (800bfb4 <_Z19batterySafetyChecksv+0x4b0>)
 800bf1e:	f7fe f956 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh4.set(false);
 800bf22:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf26:	2100      	movs	r1, #0
 800bf28:	4823      	ldr	r0, [pc, #140]	; (800bfb8 <_Z19batterySafetyChecksv+0x4b4>)
 800bf2a:	f7fe f950 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.set(false);
 800bf2e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf32:	2100      	movs	r1, #0
 800bf34:	4821      	ldr	r0, [pc, #132]	; (800bfbc <_Z19batterySafetyChecksv+0x4b8>)
 800bf36:	f7fe f94a 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D2_PE_enable.set(false);
 800bf3a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf3e:	2100      	movs	r1, #0
 800bf40:	481f      	ldr	r0, [pc, #124]	; (800bfc0 <_Z19batterySafetyChecksv+0x4bc>)
 800bf42:	f7fe f944 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D3.set(false);
 800bf46:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	481d      	ldr	r0, [pc, #116]	; (800bfc4 <_Z19batterySafetyChecksv+0x4c0>)
 800bf4e:	f7fe f93e 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(false);
 800bf52:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf56:	2100      	movs	r1, #0
 800bf58:	481b      	ldr	r0, [pc, #108]	; (800bfc8 <_Z19batterySafetyChecksv+0x4c4>)
 800bf5a:	f7fe f938 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800bf5e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800bf80 <_Z19batterySafetyChecksv+0x47c>
 800bf62:	2100      	movs	r1, #0
 800bf64:	4819      	ldr	r0, [pc, #100]	; (800bfcc <_Z19batterySafetyChecksv+0x4c8>)
 800bf66:	f7fe f932 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
		}
	} else {
		errorOvercurrentCounter = 0;
	}
}
 800bf6a:	e002      	b.n	800bf72 <_Z19batterySafetyChecksv+0x46e>
		errorOvercurrentCounter = 0;
 800bf6c:	4b03      	ldr	r3, [pc, #12]	; (800bf7c <_Z19batterySafetyChecksv+0x478>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	801a      	strh	r2, [r3, #0]
}
 800bf72:	bf00      	nop
 800bf74:	46bd      	mov	sp, r7
 800bf76:	ecbd 8b02 	vpop	{d8}
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	20000cfa 	.word	0x20000cfa
 800bf80:	c2c80000 	.word	0xc2c80000
 800bf84:	20000b30 	.word	0x20000b30
 800bf88:	20000b48 	.word	0x20000b48
 800bf8c:	20000b60 	.word	0x20000b60
 800bf90:	20000b78 	.word	0x20000b78
 800bf94:	20000b90 	.word	0x20000b90
 800bf98:	20000ba8 	.word	0x20000ba8
 800bf9c:	20000bc0 	.word	0x20000bc0
 800bfa0:	20000bd8 	.word	0x20000bd8
 800bfa4:	20000bf0 	.word	0x20000bf0
 800bfa8:	20000c08 	.word	0x20000c08
 800bfac:	20000c20 	.word	0x20000c20
 800bfb0:	20000c38 	.word	0x20000c38
 800bfb4:	20000c50 	.word	0x20000c50
 800bfb8:	20000c68 	.word	0x20000c68
 800bfbc:	20000c80 	.word	0x20000c80
 800bfc0:	20000c98 	.word	0x20000c98
 800bfc4:	20000cb0 	.word	0x20000cb0
 800bfc8:	20000cc8 	.word	0x20000cc8
 800bfcc:	20000ce0 	.word	0x20000ce0

0800bfd0 <_Z14updateChannelsv>:

/**
 * Set the hardware channels
 */
void updateChannels() {
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
	outputState.LPCh1_opticalSensor.update();
 800bfd4:	48a9      	ldr	r0, [pc, #676]	; (800c27c <_Z14updateChannelsv+0x2ac>)
 800bfd6:	f7fe f9b9 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh2.update();
 800bfda:	48a9      	ldr	r0, [pc, #676]	; (800c280 <_Z14updateChannelsv+0x2b0>)
 800bfdc:	f7fe f9b6 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh3_HVCU.update();
 800bfe0:	48a8      	ldr	r0, [pc, #672]	; (800c284 <_Z14updateChannelsv+0x2b4>)
 800bfe2:	f7fe f9b3 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh4_frontECU.update();
 800bfe6:	48a8      	ldr	r0, [pc, #672]	; (800c288 <_Z14updateChannelsv+0x2b8>)
 800bfe8:	f7fe f9b0 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh5_powerElectronics.update();
 800bfec:	48a7      	ldr	r0, [pc, #668]	; (800c28c <_Z14updateChannelsv+0x2bc>)
 800bfee:	f7fe f9ad 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh6.update();
 800bff2:	48a7      	ldr	r0, [pc, #668]	; (800c290 <_Z14updateChannelsv+0x2c0>)
 800bff4:	f7fe f9aa 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh7_rearECU.update();
 800bff8:	48a6      	ldr	r0, [pc, #664]	; (800c294 <_Z14updateChannelsv+0x2c4>)
 800bffa:	f7fe f9a7 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh8_telemetry.update();
 800bffe:	48a6      	ldr	r0, [pc, #664]	; (800c298 <_Z14updateChannelsv+0x2c8>)
 800c000:	f7fe f9a4 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh9_logger.update();
 800c004:	48a5      	ldr	r0, [pc, #660]	; (800c29c <_Z14updateChannelsv+0x2cc>)
 800c006:	f7fe f9a1 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh10.update();
 800c00a:	48a5      	ldr	r0, [pc, #660]	; (800c2a0 <_Z14updateChannelsv+0x2d0>)
 800c00c:	f7fe f99e 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh1_projectXX.update();
 800c010:	48a4      	ldr	r0, [pc, #656]	; (800c2a4 <_Z14updateChannelsv+0x2d4>)
 800c012:	f7fe f99b 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh2_coolingPump.update();
 800c016:	48a4      	ldr	r0, [pc, #656]	; (800c2a8 <_Z14updateChannelsv+0x2d8>)
 800c018:	f7fe f998 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh3.update();
 800c01c:	48a3      	ldr	r0, [pc, #652]	; (800c2ac <_Z14updateChannelsv+0x2dc>)
 800c01e:	f7fe f995 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh4.update();
 800c022:	48a3      	ldr	r0, [pc, #652]	; (800c2b0 <_Z14updateChannelsv+0x2e0>)
 800c024:	f7fe f992 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.D1_projectXX.update();
 800c028:	48a2      	ldr	r0, [pc, #648]	; (800c2b4 <_Z14updateChannelsv+0x2e4>)
 800c02a:	f7fe f98f 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.D2_PE_enable.update();
 800c02e:	48a2      	ldr	r0, [pc, #648]	; (800c2b8 <_Z14updateChannelsv+0x2e8>)
 800c030:	f7fe f98c 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.D3.update();
 800c034:	48a1      	ldr	r0, [pc, #644]	; (800c2bc <_Z14updateChannelsv+0x2ec>)
 800c036:	f7fe f989 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	outputState.D4.update();
 800c03a:	48a1      	ldr	r0, [pc, #644]	; (800c2c0 <_Z14updateChannelsv+0x2f0>)
 800c03c:	f7fe f986 	bl	800a34c <_ZN16OutputChannelPwm6updateEv>
	// Standard output channels with PWM support

	//Somehow all timers except of TIM2 can't save dutycycles of 100% so that the +1 was deleted.

	// LPCh1 is TIM12_CH2
	if (outputState.LPCh1_opticalSensor.getSwitch()) {
 800c040:	488e      	ldr	r0, [pc, #568]	; (800c27c <_Z14updateChannelsv+0x2ac>)
 800c042:	f7fe f932 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d019      	beq.n	800c080 <_Z14updateChannelsv+0xb0>
		htim12.Instance->CCR2 = outputState.LPCh1_opticalSensor.getDuty()
 800c04c:	488b      	ldr	r0, [pc, #556]	; (800c27c <_Z14updateChannelsv+0x2ac>)
 800c04e:	f7fe f911 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c052:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim12.Instance->ARR) / 100.0f;
 800c056:	4b9b      	ldr	r3, [pc, #620]	; (800c2c4 <_Z14updateChannelsv+0x2f4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05c:	ee07 3a90 	vmov	s15, r3
 800c060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c064:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c068:	eddf 6a97 	vldr	s13, [pc, #604]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c06c:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim12.Instance->CCR2 = outputState.LPCh1_opticalSensor.getDuty()
 800c070:	4b94      	ldr	r3, [pc, #592]	; (800c2c4 <_Z14updateChannelsv+0x2f4>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c078:	ee17 2a90 	vmov	r2, s15
 800c07c:	639a      	str	r2, [r3, #56]	; 0x38
 800c07e:	e003      	b.n	800c088 <_Z14updateChannelsv+0xb8>
	} else {
		htim12.Instance->CCR2 = 0;
 800c080:	4b90      	ldr	r3, [pc, #576]	; (800c2c4 <_Z14updateChannelsv+0x2f4>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2200      	movs	r2, #0
 800c086:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// LPCh2 is TIM2_CH3
	if (outputState.LPCh2.getSwitch()) {
 800c088:	487d      	ldr	r0, [pc, #500]	; (800c280 <_Z14updateChannelsv+0x2b0>)
 800c08a:	f7fe f90e 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01a      	beq.n	800c0ca <_Z14updateChannelsv+0xfa>
		htim2.Instance->CCR3 = outputState.LPCh2.getDuty()
 800c094:	487a      	ldr	r0, [pc, #488]	; (800c280 <_Z14updateChannelsv+0x2b0>)
 800c096:	f7fe f8ed 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c09a:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim2.Instance->ARR + 1) / 100.0f;
 800c09e:	4b8b      	ldr	r3, [pc, #556]	; (800c2cc <_Z14updateChannelsv+0x2fc>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0b2:	eddf 6a85 	vldr	s13, [pc, #532]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c0b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim2.Instance->CCR3 = outputState.LPCh2.getDuty()
 800c0ba:	4b84      	ldr	r3, [pc, #528]	; (800c2cc <_Z14updateChannelsv+0x2fc>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0c2:	ee17 2a90 	vmov	r2, s15
 800c0c6:	63da      	str	r2, [r3, #60]	; 0x3c
 800c0c8:	e003      	b.n	800c0d2 <_Z14updateChannelsv+0x102>
	} else {
		htim2.Instance->CCR3 = 0;
 800c0ca:	4b80      	ldr	r3, [pc, #512]	; (800c2cc <_Z14updateChannelsv+0x2fc>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// LPCh3 is TIM2_CH1
	if (outputState.LPCh3_HVCU.getSwitch()) {
 800c0d2:	486c      	ldr	r0, [pc, #432]	; (800c284 <_Z14updateChannelsv+0x2b4>)
 800c0d4:	f7fe f8e9 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d01a      	beq.n	800c114 <_Z14updateChannelsv+0x144>
		htim2.Instance->CCR1 = outputState.LPCh3_HVCU.getDuty()
 800c0de:	4869      	ldr	r0, [pc, #420]	; (800c284 <_Z14updateChannelsv+0x2b4>)
 800c0e0:	f7fe f8c8 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c0e4:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim2.Instance->ARR + 1) / 100.0f;
 800c0e8:	4b78      	ldr	r3, [pc, #480]	; (800c2cc <_Z14updateChannelsv+0x2fc>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0fc:	eddf 6a72 	vldr	s13, [pc, #456]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c100:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim2.Instance->CCR1 = outputState.LPCh3_HVCU.getDuty()
 800c104:	4b71      	ldr	r3, [pc, #452]	; (800c2cc <_Z14updateChannelsv+0x2fc>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10c:	ee17 2a90 	vmov	r2, s15
 800c110:	635a      	str	r2, [r3, #52]	; 0x34
 800c112:	e003      	b.n	800c11c <_Z14updateChannelsv+0x14c>
	} else {
		htim2.Instance->CCR1 = 0;
 800c114:	4b6d      	ldr	r3, [pc, #436]	; (800c2cc <_Z14updateChannelsv+0x2fc>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2200      	movs	r2, #0
 800c11a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// LPCh8 is TIM8_CH1
	if (outputState.LPCh8_telemetry.getSwitch()) {
 800c11c:	485e      	ldr	r0, [pc, #376]	; (800c298 <_Z14updateChannelsv+0x2c8>)
 800c11e:	f7fe f8c4 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d019      	beq.n	800c15c <_Z14updateChannelsv+0x18c>
		htim8.Instance->CCR1 = outputState.LPCh3_HVCU.getDuty()
 800c128:	4856      	ldr	r0, [pc, #344]	; (800c284 <_Z14updateChannelsv+0x2b4>)
 800c12a:	f7fe f8a3 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c12e:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim8.Instance->ARR) / 100.0f;
 800c132:	4b67      	ldr	r3, [pc, #412]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	ee07 3a90 	vmov	s15, r3
 800c13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c140:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c144:	eddf 6a60 	vldr	s13, [pc, #384]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c148:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim8.Instance->CCR1 = outputState.LPCh3_HVCU.getDuty()
 800c14c:	4b60      	ldr	r3, [pc, #384]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c154:	ee17 2a90 	vmov	r2, s15
 800c158:	635a      	str	r2, [r3, #52]	; 0x34
 800c15a:	e003      	b.n	800c164 <_Z14updateChannelsv+0x194>
	} else {
		htim8.Instance->CCR1 = 0;
 800c15c:	4b5c      	ldr	r3, [pc, #368]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2200      	movs	r2, #0
 800c162:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// LPCh9 is TIM4_CH2
	if (outputState.LPCh9_logger.getSwitch()) {
 800c164:	484d      	ldr	r0, [pc, #308]	; (800c29c <_Z14updateChannelsv+0x2cc>)
 800c166:	f7fe f8a0 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d019      	beq.n	800c1a4 <_Z14updateChannelsv+0x1d4>
		htim4.Instance->CCR2 = outputState.LPCh9_logger.getDuty()
 800c170:	484a      	ldr	r0, [pc, #296]	; (800c29c <_Z14updateChannelsv+0x2cc>)
 800c172:	f7fe f87f 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c176:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim4.Instance->ARR) / 100.0f;
 800c17a:	4b56      	ldr	r3, [pc, #344]	; (800c2d4 <_Z14updateChannelsv+0x304>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c180:	ee07 3a90 	vmov	s15, r3
 800c184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c18c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c190:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim4.Instance->CCR2 = outputState.LPCh9_logger.getDuty()
 800c194:	4b4f      	ldr	r3, [pc, #316]	; (800c2d4 <_Z14updateChannelsv+0x304>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c19c:	ee17 2a90 	vmov	r2, s15
 800c1a0:	639a      	str	r2, [r3, #56]	; 0x38
 800c1a2:	e003      	b.n	800c1ac <_Z14updateChannelsv+0x1dc>
	} else {
		htim4.Instance->CCR2 = 0;
 800c1a4:	4b4b      	ldr	r3, [pc, #300]	; (800c2d4 <_Z14updateChannelsv+0x304>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// LPCh10 is TIM11_CH1
	if (outputState.LPCh10.getSwitch()) {
 800c1ac:	483c      	ldr	r0, [pc, #240]	; (800c2a0 <_Z14updateChannelsv+0x2d0>)
 800c1ae:	f7fe f87c 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d019      	beq.n	800c1ec <_Z14updateChannelsv+0x21c>
		htim11.Instance->CCR1 = outputState.LPCh10.getDuty()
 800c1b8:	4839      	ldr	r0, [pc, #228]	; (800c2a0 <_Z14updateChannelsv+0x2d0>)
 800c1ba:	f7fe f85b 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c1be:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim11.Instance->ARR) / 100.0f;
 800c1c2:	4b45      	ldr	r3, [pc, #276]	; (800c2d8 <_Z14updateChannelsv+0x308>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	ee07 3a90 	vmov	s15, r3
 800c1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c1d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim11.Instance->CCR1 = outputState.LPCh10.getDuty()
 800c1dc:	4b3e      	ldr	r3, [pc, #248]	; (800c2d8 <_Z14updateChannelsv+0x308>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1e4:	ee17 2a90 	vmov	r2, s15
 800c1e8:	635a      	str	r2, [r3, #52]	; 0x34
 800c1ea:	e003      	b.n	800c1f4 <_Z14updateChannelsv+0x224>
	} else {
		htim11.Instance->CCR1 = 0;
 800c1ec:	4b3a      	ldr	r3, [pc, #232]	; (800c2d8 <_Z14updateChannelsv+0x308>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// HPCh1 is TIM8_CH4
	if (outputState.HPCh1_projectXX.getSwitch()) {
 800c1f4:	482b      	ldr	r0, [pc, #172]	; (800c2a4 <_Z14updateChannelsv+0x2d4>)
 800c1f6:	f7fe f858 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d019      	beq.n	800c234 <_Z14updateChannelsv+0x264>
		htim8.Instance->CCR4 = outputState.HPCh1_projectXX.getDuty()
 800c200:	4828      	ldr	r0, [pc, #160]	; (800c2a4 <_Z14updateChannelsv+0x2d4>)
 800c202:	f7fe f837 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c206:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim8.Instance->ARR) / 100.0f;
 800c20a:	4b31      	ldr	r3, [pc, #196]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	ee07 3a90 	vmov	s15, r3
 800c214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c21c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c220:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim8.Instance->CCR4 = outputState.HPCh1_projectXX.getDuty()
 800c224:	4b2a      	ldr	r3, [pc, #168]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c22c:	ee17 2a90 	vmov	r2, s15
 800c230:	641a      	str	r2, [r3, #64]	; 0x40
 800c232:	e003      	b.n	800c23c <_Z14updateChannelsv+0x26c>
	} else {
		htim8.Instance->CCR4 = 0;
 800c234:	4b26      	ldr	r3, [pc, #152]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2200      	movs	r2, #0
 800c23a:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// HPCh2 is TIM8_CH2
	if (outputState.HPCh2_coolingPump.getSwitch()) {
 800c23c:	481a      	ldr	r0, [pc, #104]	; (800c2a8 <_Z14updateChannelsv+0x2d8>)
 800c23e:	f7fe f834 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d049      	beq.n	800c2dc <_Z14updateChannelsv+0x30c>
		htim8.Instance->CCR2 = outputState.HPCh2_coolingPump.getDuty()
 800c248:	4817      	ldr	r0, [pc, #92]	; (800c2a8 <_Z14updateChannelsv+0x2d8>)
 800c24a:	f7fe f813 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c24e:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim8.Instance->ARR) / 100.0f;
 800c252:	4b1f      	ldr	r3, [pc, #124]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	ee07 3a90 	vmov	s15, r3
 800c25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c260:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c264:	eddf 6a18 	vldr	s13, [pc, #96]	; 800c2c8 <_Z14updateChannelsv+0x2f8>
 800c268:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim8.Instance->CCR2 = outputState.HPCh2_coolingPump.getDuty()
 800c26c:	4b18      	ldr	r3, [pc, #96]	; (800c2d0 <_Z14updateChannelsv+0x300>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c274:	ee17 2a90 	vmov	r2, s15
 800c278:	639a      	str	r2, [r3, #56]	; 0x38
 800c27a:	e033      	b.n	800c2e4 <_Z14updateChannelsv+0x314>
 800c27c:	20000b30 	.word	0x20000b30
 800c280:	20000b48 	.word	0x20000b48
 800c284:	20000b60 	.word	0x20000b60
 800c288:	20000b78 	.word	0x20000b78
 800c28c:	20000b90 	.word	0x20000b90
 800c290:	20000ba8 	.word	0x20000ba8
 800c294:	20000bc0 	.word	0x20000bc0
 800c298:	20000bd8 	.word	0x20000bd8
 800c29c:	20000bf0 	.word	0x20000bf0
 800c2a0:	20000c08 	.word	0x20000c08
 800c2a4:	20000c20 	.word	0x20000c20
 800c2a8:	20000c38 	.word	0x20000c38
 800c2ac:	20000c50 	.word	0x20000c50
 800c2b0:	20000c68 	.word	0x20000c68
 800c2b4:	20000c80 	.word	0x20000c80
 800c2b8:	20000c98 	.word	0x20000c98
 800c2bc:	20000cb0 	.word	0x20000cb0
 800c2c0:	20000cc8 	.word	0x20000cc8
 800c2c4:	20001398 	.word	0x20001398
 800c2c8:	42c80000 	.word	0x42c80000
 800c2cc:	200011e8 	.word	0x200011e8
 800c2d0:	200012c0 	.word	0x200012c0
 800c2d4:	20001278 	.word	0x20001278
 800c2d8:	20001350 	.word	0x20001350
	} else {
		htim8.Instance->CCR2 = 0;
 800c2dc:	4b6e      	ldr	r3, [pc, #440]	; (800c498 <_Z14updateChannelsv+0x4c8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// D1 is TIM3_CH1 (is controlled by ProjectXX.hpp)
	if (outputState.D1_projectXX.getSwitch()) {
 800c2e4:	486d      	ldr	r0, [pc, #436]	; (800c49c <_Z14updateChannelsv+0x4cc>)
 800c2e6:	f7fd ffe0 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
	} else {
		//htim3.Instance->CCR1= 0;
	}

	// D2 is TIM10_CH1
	if (outputState.D2_PE_enable.getSwitch()) {
 800c2ea:	486d      	ldr	r0, [pc, #436]	; (800c4a0 <_Z14updateChannelsv+0x4d0>)
 800c2ec:	f7fd ffdd 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d019      	beq.n	800c32a <_Z14updateChannelsv+0x35a>
		htim10.Instance->CCR1 = outputState.D2_PE_enable.getDuty()
 800c2f6:	486a      	ldr	r0, [pc, #424]	; (800c4a0 <_Z14updateChannelsv+0x4d0>)
 800c2f8:	f7fd ffbc 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c2fc:	eeb0 7a40 	vmov.f32	s14, s0
				* (htim10.Instance->ARR) / 100.0f;
 800c300:	4b68      	ldr	r3, [pc, #416]	; (800c4a4 <_Z14updateChannelsv+0x4d4>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c306:	ee07 3a90 	vmov	s15, r3
 800c30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c312:	eddf 6a65 	vldr	s13, [pc, #404]	; 800c4a8 <_Z14updateChannelsv+0x4d8>
 800c316:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim10.Instance->CCR1 = outputState.D2_PE_enable.getDuty()
 800c31a:	4b62      	ldr	r3, [pc, #392]	; (800c4a4 <_Z14updateChannelsv+0x4d4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c322:	ee17 2a90 	vmov	r2, s15
 800c326:	635a      	str	r2, [r3, #52]	; 0x34
 800c328:	e003      	b.n	800c332 <_Z14updateChannelsv+0x362>
	} else {
		htim10.Instance->CCR1 = 0;
 800c32a:	4b5e      	ldr	r3, [pc, #376]	; (800c4a4 <_Z14updateChannelsv+0x4d4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2200      	movs	r2, #0
 800c330:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// D3 is TIM2_CH4
	if (outputState.D3.getSwitch()) {
 800c332:	485e      	ldr	r0, [pc, #376]	; (800c4ac <_Z14updateChannelsv+0x4dc>)
 800c334:	f7fd ffb9 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d019      	beq.n	800c372 <_Z14updateChannelsv+0x3a2>
		htim2.Instance->CCR4 = outputState.D3.getDuty() * (htim2.Instance->ARR)
 800c33e:	485b      	ldr	r0, [pc, #364]	; (800c4ac <_Z14updateChannelsv+0x4dc>)
 800c340:	f7fd ff98 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c344:	eeb0 7a40 	vmov.f32	s14, s0
 800c348:	4b59      	ldr	r3, [pc, #356]	; (800c4b0 <_Z14updateChannelsv+0x4e0>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c356:	ee27 7a27 	vmul.f32	s14, s14, s15
				/ 100.0f;
 800c35a:	eddf 6a53 	vldr	s13, [pc, #332]	; 800c4a8 <_Z14updateChannelsv+0x4d8>
 800c35e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim2.Instance->CCR4 = outputState.D3.getDuty() * (htim2.Instance->ARR)
 800c362:	4b53      	ldr	r3, [pc, #332]	; (800c4b0 <_Z14updateChannelsv+0x4e0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c36a:	ee17 2a90 	vmov	r2, s15
 800c36e:	641a      	str	r2, [r3, #64]	; 0x40
 800c370:	e003      	b.n	800c37a <_Z14updateChannelsv+0x3aa>
	} else {
		htim2.Instance->CCR4 = 0;
 800c372:	4b4f      	ldr	r3, [pc, #316]	; (800c4b0 <_Z14updateChannelsv+0x4e0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2200      	movs	r2, #0
 800c378:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// D4 is TIM3_CH3
	if (outputState.D4.getSwitch()) {
 800c37a:	484e      	ldr	r0, [pc, #312]	; (800c4b4 <_Z14updateChannelsv+0x4e4>)
 800c37c:	f7fd ff95 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d019      	beq.n	800c3ba <_Z14updateChannelsv+0x3ea>
		htim3.Instance->CCR3 = outputState.D4.getDuty() * (htim3.Instance->ARR)
 800c386:	484b      	ldr	r0, [pc, #300]	; (800c4b4 <_Z14updateChannelsv+0x4e4>)
 800c388:	f7fd ff74 	bl	800a274 <_ZNK16OutputChannelPwm7getDutyEv>
 800c38c:	eeb0 7a40 	vmov.f32	s14, s0
 800c390:	4b49      	ldr	r3, [pc, #292]	; (800c4b8 <_Z14updateChannelsv+0x4e8>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39e:	ee27 7a27 	vmul.f32	s14, s14, s15
				/ 100.0f;
 800c3a2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c4a8 <_Z14updateChannelsv+0x4d8>
 800c3a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
		htim3.Instance->CCR3 = outputState.D4.getDuty() * (htim3.Instance->ARR)
 800c3aa:	4b43      	ldr	r3, [pc, #268]	; (800c4b8 <_Z14updateChannelsv+0x4e8>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3b2:	ee17 2a90 	vmov	r2, s15
 800c3b6:	63da      	str	r2, [r3, #60]	; 0x3c
 800c3b8:	e003      	b.n	800c3c2 <_Z14updateChannelsv+0x3f2>
	} else {
		htim3.Instance->CCR3 = 0;
 800c3ba:	4b3f      	ldr	r3, [pc, #252]	; (800c4b8 <_Z14updateChannelsv+0x4e8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// Standard On/Off output
	HAL_GPIO_WritePin(LP4_control_GPIO_Port, LP4_control_Pin,
			outputState.LPCh4_frontECU.getSwitch() ?
 800c3c2:	483e      	ldr	r0, [pc, #248]	; (800c4bc <_Z14updateChannelsv+0x4ec>)
 800c3c4:	f7fd ff71 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c3c8:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(LP4_control_GPIO_Port, LP4_control_Pin,
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <_Z14updateChannelsv+0x402>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <_Z14updateChannelsv+0x404>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3da:	4839      	ldr	r0, [pc, #228]	; (800c4c0 <_Z14updateChannelsv+0x4f0>)
 800c3dc:	f006 fe4a 	bl	8013074 <HAL_GPIO_WritePin>
					GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LP5_control_GPIO_Port, LP5_control_Pin,
			outputState.LPCh5_powerElectronics.getSwitch() ?
 800c3e0:	4838      	ldr	r0, [pc, #224]	; (800c4c4 <_Z14updateChannelsv+0x4f4>)
 800c3e2:	f7fd ff62 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c3e6:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(LP5_control_GPIO_Port, LP5_control_Pin,
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <_Z14updateChannelsv+0x420>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e000      	b.n	800c3f2 <_Z14updateChannelsv+0x422>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c3f8:	4833      	ldr	r0, [pc, #204]	; (800c4c8 <_Z14updateChannelsv+0x4f8>)
 800c3fa:	f006 fe3b 	bl	8013074 <HAL_GPIO_WritePin>
					GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LP6_control_GPIO_Port, LP6_control_Pin,
			outputState.LPCh6.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800c3fe:	4833      	ldr	r0, [pc, #204]	; (800c4cc <_Z14updateChannelsv+0x4fc>)
 800c400:	f7fd ff53 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c404:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(LP6_control_GPIO_Port, LP6_control_Pin,
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <_Z14updateChannelsv+0x43e>
 800c40a:	2301      	movs	r3, #1
 800c40c:	e000      	b.n	800c410 <_Z14updateChannelsv+0x440>
 800c40e:	2300      	movs	r3, #0
 800c410:	461a      	mov	r2, r3
 800c412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c416:	482c      	ldr	r0, [pc, #176]	; (800c4c8 <_Z14updateChannelsv+0x4f8>)
 800c418:	f006 fe2c 	bl	8013074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LP7_control_GPIO_Port, LP7_control_Pin,
			outputState.LPCh7_rearECU.getSwitch() ?
 800c41c:	482c      	ldr	r0, [pc, #176]	; (800c4d0 <_Z14updateChannelsv+0x500>)
 800c41e:	f7fd ff44 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c422:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(LP7_control_GPIO_Port, LP7_control_Pin,
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <_Z14updateChannelsv+0x45c>
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <_Z14updateChannelsv+0x45e>
 800c42c:	2300      	movs	r3, #0
 800c42e:	461a      	mov	r2, r3
 800c430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c434:	4827      	ldr	r0, [pc, #156]	; (800c4d4 <_Z14updateChannelsv+0x504>)
 800c436:	f006 fe1d 	bl	8013074 <HAL_GPIO_WritePin>
					GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(HP3_control_GPIO_Port, HP3_control_Pin,
			outputState.HPCh3.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800c43a:	4827      	ldr	r0, [pc, #156]	; (800c4d8 <_Z14updateChannelsv+0x508>)
 800c43c:	f7fd ff35 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c440:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(HP3_control_GPIO_Port, HP3_control_Pin,
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <_Z14updateChannelsv+0x47a>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <_Z14updateChannelsv+0x47c>
 800c44a:	2300      	movs	r3, #0
 800c44c:	461a      	mov	r2, r3
 800c44e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c452:	481b      	ldr	r0, [pc, #108]	; (800c4c0 <_Z14updateChannelsv+0x4f0>)
 800c454:	f006 fe0e 	bl	8013074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HP4_control_GPIO_Port, HP4_control_Pin,
			outputState.HPCh4.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800c458:	4820      	ldr	r0, [pc, #128]	; (800c4dc <_Z14updateChannelsv+0x50c>)
 800c45a:	f7fd ff26 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c45e:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(HP4_control_GPIO_Port, HP4_control_Pin,
 800c460:	2b00      	cmp	r3, #0
 800c462:	d001      	beq.n	800c468 <_Z14updateChannelsv+0x498>
 800c464:	2301      	movs	r3, #1
 800c466:	e000      	b.n	800c46a <_Z14updateChannelsv+0x49a>
 800c468:	2300      	movs	r3, #0
 800c46a:	461a      	mov	r2, r3
 800c46c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c470:	4813      	ldr	r0, [pc, #76]	; (800c4c0 <_Z14updateChannelsv+0x4f0>)
 800c472:	f006 fdff 	bl	8013074 <HAL_GPIO_WritePin>

	// SDC switch
	HAL_GPIO_WritePin(SDC_control_GPIO_Port, SDC_control_Pin,
			outputState.SDC.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800c476:	481a      	ldr	r0, [pc, #104]	; (800c4e0 <_Z14updateChannelsv+0x510>)
 800c478:	f7fd ff17 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c47c:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(SDC_control_GPIO_Port, SDC_control_Pin,
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <_Z14updateChannelsv+0x4b6>
 800c482:	2301      	movs	r3, #1
 800c484:	e000      	b.n	800c488 <_Z14updateChannelsv+0x4b8>
 800c486:	2300      	movs	r3, #0
 800c488:	461a      	mov	r2, r3
 800c48a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c48e:	480c      	ldr	r0, [pc, #48]	; (800c4c0 <_Z14updateChannelsv+0x4f0>)
 800c490:	f006 fdf0 	bl	8013074 <HAL_GPIO_WritePin>
}
 800c494:	bf00      	nop
 800c496:	bd80      	pop	{r7, pc}
 800c498:	200012c0 	.word	0x200012c0
 800c49c:	20000c80 	.word	0x20000c80
 800c4a0:	20000c98 	.word	0x20000c98
 800c4a4:	20001308 	.word	0x20001308
 800c4a8:	42c80000 	.word	0x42c80000
 800c4ac:	20000cb0 	.word	0x20000cb0
 800c4b0:	200011e8 	.word	0x200011e8
 800c4b4:	20000cc8 	.word	0x20000cc8
 800c4b8:	20001230 	.word	0x20001230
 800c4bc:	20000b78 	.word	0x20000b78
 800c4c0:	40020000 	.word	0x40020000
 800c4c4:	20000b90 	.word	0x20000b90
 800c4c8:	40020800 	.word	0x40020800
 800c4cc:	20000ba8 	.word	0x20000ba8
 800c4d0:	20000bc0 	.word	0x20000bc0
 800c4d4:	40020400 	.word	0x40020400
 800c4d8:	20000c50 	.word	0x20000c50
 800c4dc:	20000c68 	.word	0x20000c68
 800c4e0:	20000ce0 	.word	0x20000ce0

0800c4e4 <_Z8sendDatav>:

/**
 * Send out CAN messages
 */
void sendData() {
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
	using namespace can;
	// PDU status
	Message<messages::PDU_TX_Status> msgStatus;
 800c4ea:	463b      	mov	r3, r7
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fd fe3a 	bl	800a166 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1Ev>
	msgStatus.set<signals::PDU_TX_Enabled>(pduEnabled);
 800c4f2:	4b11      	ldr	r3, [pc, #68]	; (800c538 <_Z8sendDatav+0x54>)
 800c4f4:	781a      	ldrb	r2, [r3, #0]
 800c4f6:	463b      	mov	r3, r7
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f001 f8a0 	bl	800d640 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals14PDU_TX_EnabledEEEvNT_8dataTypeE>
	msgStatus.set<signals::PDU_TX_PEHWEnabled>(outputState.LPCh6.get());
 800c500:	480e      	ldr	r0, [pc, #56]	; (800c53c <_Z8sendDatav+0x58>)
 800c502:	f7fd fec6 	bl	800a292 <_ZNK16OutputChannelPwm3getEv>
 800c506:	4603      	mov	r3, r0
 800c508:	461a      	mov	r2, r3
 800c50a:	463b      	mov	r3, r7
 800c50c:	4611      	mov	r1, r2
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 f8ab 	bl	800d66a <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals18PDU_TX_PEHWEnabledEEEvNT_8dataTypeE>
	msgStatus.set<signals::PDU_TX_ErrorFlag>(anyErrorPresent());
 800c514:	f7fe f816 	bl	800a544 <_Z15anyErrorPresentv>
 800c518:	4603      	mov	r3, r0
 800c51a:	461a      	mov	r2, r3
 800c51c:	463b      	mov	r3, r7
 800c51e:	4611      	mov	r1, r2
 800c520:	4618      	mov	r0, r3
 800c522:	f001 f8b7 	bl	800d694 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals16PDU_TX_ErrorFlagEEEvNT_8dataTypeE>
	msgStatus.send();
 800c526:	463b      	mov	r3, r7
 800c528:	2100      	movs	r1, #0
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7f4 fe78 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
}
 800c530:	bf00      	nop
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20000af8 	.word	0x20000af8
 800c53c:	20000ba8 	.word	0x20000ba8

0800c540 <_ZL14pduAppFunctionPv>:
uint32_t lastStatusSent = 0;

uint32_t tempLast = 0;

// Main Task of the PDU
static void pduAppFunction(void *pvArguments) {
 800c540:	b590      	push	{r4, r7, lr}
 800c542:	b089      	sub	sp, #36	; 0x24
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]

	//g_bmsQueue.enable();
	g_rxControllQueue.enable();
 800c548:	489e      	ldr	r0, [pc, #632]	; (800c7c4 <_ZL14pduAppFunctionPv+0x284>)
 800c54a:	f000 f989 	bl	800c860 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6enableEv>
	g_manualControllQueue.enable();
 800c54e:	489e      	ldr	r0, [pc, #632]	; (800c7c8 <_ZL14pduAppFunctionPv+0x288>)
 800c550:	f000 fa16 	bl	800c980 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6enableEv>
	g_lpDutycycleQueue.enable();
 800c554:	489d      	ldr	r0, [pc, #628]	; (800c7cc <_ZL14pduAppFunctionPv+0x28c>)
 800c556:	f000 f9b3 	bl	800c8c0 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEv>
	g_hpDutycycleQueue.enable();
 800c55a:	489d      	ldr	r0, [pc, #628]	; (800c7d0 <_ZL14pduAppFunctionPv+0x290>)
 800c55c:	f000 f9e0 	bl	800c920 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEv>


	LED_RGB_Write(0, 0, 0);
 800c560:	2200      	movs	r2, #0
 800c562:	2100      	movs	r1, #0
 800c564:	2000      	movs	r0, #0
 800c566:	f7fb fee3 	bl	8008330 <_Z13LED_RGB_Writehhh>


	// Wait 100ms to be sure that battery voltage was already read at least once by the TaskManager.cpp
	osDelay(pdMS_TO_TICKS(100));
 800c56a:	2064      	movs	r0, #100	; 0x64
 800c56c:	f00b f8b8 	bl	80176e0 <osDelay>


	//TODO implement adc moving average filters.
	for(size_t i = 0;i<10;i++){
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2b09      	cmp	r3, #9
 800c578:	d814      	bhi.n	800c5a4 <_ZL14pduAppFunctionPv+0x64>
		lpChannelAdc[i] = AdcChannelController(ADC_MODULE2, i);
 800c57a:	f107 0308 	add.w	r3, r7, #8
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	2101      	movs	r1, #1
 800c582:	4618      	mov	r0, r3
 800c584:	f7fb fbdf 	bl	8007d46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800c588:	4a92      	ldr	r2, [pc, #584]	; (800c7d4 <_ZL14pduAppFunctionPv+0x294>)
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	4413      	add	r3, r2
 800c590:	f107 0208 	add.w	r2, r7, #8
 800c594:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c598:	e883 0003 	stmia.w	r3, {r0, r1}
	for(size_t i = 0;i<10;i++){
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	61fb      	str	r3, [r7, #28]
 800c5a2:	e7e7      	b.n	800c574 <_ZL14pduAppFunctionPv+0x34>
	}
	for(size_t i=0;i<4;i++){
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	61bb      	str	r3, [r7, #24]
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d816      	bhi.n	800c5dc <_ZL14pduAppFunctionPv+0x9c>
		hpChannelAdc[i] = AdcChannelController(ADC_MODULE2, 10 + i);
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	f103 020a 	add.w	r2, r3, #10
 800c5b4:	f107 0310 	add.w	r3, r7, #16
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fb fbc3 	bl	8007d46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800c5c0:	4a85      	ldr	r2, [pc, #532]	; (800c7d8 <_ZL14pduAppFunctionPv+0x298>)
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f107 0210 	add.w	r2, r7, #16
 800c5cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5d0:	e883 0003 	stmia.w	r3, {r0, r1}
	for(size_t i=0;i<4;i++){
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	61bb      	str	r3, [r7, #24]
 800c5da:	e7e5      	b.n	800c5a8 <_ZL14pduAppFunctionPv+0x68>
	//adc2.init(50);	// Read each channel 50 times and average
	//osDelay(pdMS_TO_TICKS(25));	// Wait 25ms to ensure that ADC is initialized


	// Start timers for PWM generation
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);	// LPCh1
 800c5dc:	2104      	movs	r1, #4
 800c5de:	487f      	ldr	r0, [pc, #508]	; (800c7dc <_ZL14pduAppFunctionPv+0x29c>)
 800c5e0:	f007 fb64 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// LPCh2
 800c5e4:	2108      	movs	r1, #8
 800c5e6:	487e      	ldr	r0, [pc, #504]	; (800c7e0 <_ZL14pduAppFunctionPv+0x2a0>)
 800c5e8:	f007 fb60 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// LPCh3
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	487c      	ldr	r0, [pc, #496]	; (800c7e0 <_ZL14pduAppFunctionPv+0x2a0>)
 800c5f0:	f007 fb5c 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);	// LPCh8
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	487b      	ldr	r0, [pc, #492]	; (800c7e4 <_ZL14pduAppFunctionPv+0x2a4>)
 800c5f8:	f007 fb58 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	// LPCh9
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	487a      	ldr	r0, [pc, #488]	; (800c7e8 <_ZL14pduAppFunctionPv+0x2a8>)
 800c600:	f007 fb54 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);	// LPCh10
 800c604:	2100      	movs	r1, #0
 800c606:	4879      	ldr	r0, [pc, #484]	; (800c7ec <_ZL14pduAppFunctionPv+0x2ac>)
 800c608:	f007 fb50 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);	// HPCh1
 800c60c:	210c      	movs	r1, #12
 800c60e:	4875      	ldr	r0, [pc, #468]	; (800c7e4 <_ZL14pduAppFunctionPv+0x2a4>)
 800c610:	f007 fb4c 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);	// HPCh2
 800c614:	2104      	movs	r1, #4
 800c616:	4873      	ldr	r0, [pc, #460]	; (800c7e4 <_ZL14pduAppFunctionPv+0x2a4>)
 800c618:	f007 fb48 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// D1
 800c61c:	2100      	movs	r1, #0
 800c61e:	4874      	ldr	r0, [pc, #464]	; (800c7f0 <_ZL14pduAppFunctionPv+0x2b0>)
 800c620:	f007 fb44 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// D2
 800c624:	2100      	movs	r1, #0
 800c626:	4873      	ldr	r0, [pc, #460]	; (800c7f4 <_ZL14pduAppFunctionPv+0x2b4>)
 800c628:	f007 fb40 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// D3
 800c62c:	210c      	movs	r1, #12
 800c62e:	486c      	ldr	r0, [pc, #432]	; (800c7e0 <_ZL14pduAppFunctionPv+0x2a0>)
 800c630:	f007 fb3c 	bl	8013cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// D4
 800c634:	2108      	movs	r1, #8
 800c636:	486e      	ldr	r0, [pc, #440]	; (800c7f0 <_ZL14pduAppFunctionPv+0x2b0>)
 800c638:	f007 fb38 	bl	8013cac <HAL_TIM_PWM_Start>


	// Initial read of data
	readAndSendData();
 800c63c:	f7fe fe18 	bl	800b270 <_Z15readAndSendDatav>


	// Reset watchdog
	stateMachineWatchdog.reset();
 800c640:	486d      	ldr	r0, [pc, #436]	; (800c7f8 <_ZL14pduAppFunctionPv+0x2b8>)
 800c642:	f7fb fe5c 	bl	80082fe <_ZN8Watchdog5resetEv>


	// Let the state machine know that we finished the ECU setup and are ready for operation
	canzero::setStatus(pre_operational);
 800c646:	207f      	movs	r0, #127	; 0x7f
 800c648:	f7f5 fdce 	bl	80021e8 <_ZN7canzero9setStatusE9cz_status>

	while (true) {
		// Blink the status LEDs
		blinkStatusLed();
 800c64c:	f7fd ff8c 	bl	800a568 <_Z14blinkStatusLedv>

		// Receive control messages
		receiveCanMessages();
 800c650:	f7fe f834 	bl	800a6bc <_Z18receiveCanMessagesv>


		// Read channel currents, send the CAN messages and update the cooling PWM
		if (xTaskGetTickCount() - lastDataRead
 800c654:	f00d fc82 	bl	8019f5c <xTaskGetTickCount>
 800c658:	4602      	mov	r2, r0
 800c65a:	4b68      	ldr	r3, [pc, #416]	; (800c7fc <_ZL14pduAppFunctionPv+0x2bc>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	1ad4      	subs	r4, r2, r3
				>= OD_currentReadInterval_get()) {
 800c660:	f7fa f88e 	bl	8006780 <_Z26OD_currentReadInterval_getv>
 800c664:	4603      	mov	r3, r0
 800c666:	429c      	cmp	r4, r3
 800c668:	bf2c      	ite	cs
 800c66a:	2301      	movcs	r3, #1
 800c66c:	2300      	movcc	r3, #0
 800c66e:	b2db      	uxtb	r3, r3
		if (xTaskGetTickCount() - lastDataRead
 800c670:	2b00      	cmp	r3, #0
 800c672:	d006      	beq.n	800c682 <_ZL14pduAppFunctionPv+0x142>
			lastDataRead = xTaskGetTickCount();
 800c674:	f00d fc72 	bl	8019f5c <xTaskGetTickCount>
 800c678:	4603      	mov	r3, r0
 800c67a:	4a60      	ldr	r2, [pc, #384]	; (800c7fc <_ZL14pduAppFunctionPv+0x2bc>)
 800c67c:	6013      	str	r3, [r2, #0]

			// Read the current of all channels and send it
			readAndSendData();
 800c67e:	f7fe fdf7 	bl	800b270 <_Z15readAndSendDatav>
		}

		// Error monitoring
		if (pduEnabled == false) {
 800c682:	4b5f      	ldr	r3, [pc, #380]	; (800c800 <_ZL14pduAppFunctionPv+0x2c0>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <_ZL14pduAppFunctionPv+0x14e>
			batterySafetyChecks();
 800c68a:	f7ff fa3b 	bl	800bb04 <_Z19batterySafetyChecksv>
		}
		if (pduEnabled == true) {
 800c68e:	4b5c      	ldr	r3, [pc, #368]	; (800c800 <_ZL14pduAppFunctionPv+0x2c0>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d109      	bne.n	800c6aa <_ZL14pduAppFunctionPv+0x16a>
			batterySafetyChecks();
 800c696:	f7ff fa35 	bl	800bb04 <_Z19batterySafetyChecksv>
			if (stateMachineWatchdog.isTimedOut()) {
 800c69a:	4857      	ldr	r0, [pc, #348]	; (800c7f8 <_ZL14pduAppFunctionPv+0x2b8>)
 800c69c:	f7fb fe3c 	bl	8008318 <_ZN8Watchdog10isTimedOutEv>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <_ZL14pduAppFunctionPv+0x16a>
				ERR_watchdogStateMachine_set();
 800c6a6:	f7f5 ffa9 	bl	80025fc <_Z28ERR_watchdogStateMachine_setv>
			}
		}

		// If any error is present, shutdown PeHwEnable and SDC and enable red led
		if (anyErrorPresent()) {
 800c6aa:	f7fd ff4b 	bl	800a544 <_Z15anyErrorPresentv>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00f      	beq.n	800c6d4 <_ZL14pduAppFunctionPv+0x194>
			outputState.LPCh6.set(false);
 800c6b4:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800c804 <_ZL14pduAppFunctionPv+0x2c4>
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4853      	ldr	r0, [pc, #332]	; (800c808 <_ZL14pduAppFunctionPv+0x2c8>)
 800c6bc:	f7fd fd87 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800c6c0:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800c804 <_ZL14pduAppFunctionPv+0x2c4>
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	4851      	ldr	r0, [pc, #324]	; (800c80c <_ZL14pduAppFunctionPv+0x2cc>)
 800c6c8:	f7fd fd81 	bl	800a1ce <_ZN16OutputChannelPwm3setEbf>
			LED_Red_Write(255);
 800c6cc:	20ff      	movs	r0, #255	; 0xff
 800c6ce:	f7fb fe7b 	bl	80083c8 <_Z13LED_Red_Writeh>
 800c6d2:	e002      	b.n	800c6da <_ZL14pduAppFunctionPv+0x19a>
		} else {
			LED_Red_Write(0);
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f7fb fe77 	bl	80083c8 <_Z13LED_Red_Writeh>
		}

		if (outputState.SDC.get()) {
 800c6da:	484c      	ldr	r0, [pc, #304]	; (800c80c <_ZL14pduAppFunctionPv+0x2cc>)
 800c6dc:	f7fd fdd9 	bl	800a292 <_ZNK16OutputChannelPwm3getEv>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <_ZL14pduAppFunctionPv+0x1ae>
			LED_Orange_Write(255);
 800c6e6:	20ff      	movs	r0, #255	; 0xff
 800c6e8:	f7fb fe5a 	bl	80083a0 <_Z16LED_Orange_Writeh>
 800c6ec:	e002      	b.n	800c6f4 <_ZL14pduAppFunctionPv+0x1b4>
		} else {
			LED_Orange_Write(0);
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	f7fb fe56 	bl	80083a0 <_Z16LED_Orange_Writeh>
		}

		// Update channels: on/off and duty cycle
		updateChannels();
 800c6f4:	f7ff fc6c 	bl	800bfd0 <_Z14updateChannelsv>

		// Send out status message with configured interval or when there is a change in PDU status
		if (xTaskGetTickCount() - lastStatusSent >= OD_statusSendInterval_get()
 800c6f8:	f00d fc30 	bl	8019f5c <xTaskGetTickCount>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	4b44      	ldr	r3, [pc, #272]	; (800c810 <_ZL14pduAppFunctionPv+0x2d0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	1ad4      	subs	r4, r2, r3
 800c704:	f7fa f874 	bl	80067f0 <_Z25OD_statusSendInterval_getv>
 800c708:	4603      	mov	r3, r0
				|| lastPduEnabled != pduEnabled
				|| lastPeHwEnabled != outputState.LPCh6.get()
				|| lastErrorFlag != anyErrorPresent()) {
 800c70a:	429c      	cmp	r4, r3
 800c70c:	d216      	bcs.n	800c73c <_ZL14pduAppFunctionPv+0x1fc>
				|| lastPduEnabled != pduEnabled
 800c70e:	4b41      	ldr	r3, [pc, #260]	; (800c814 <_ZL14pduAppFunctionPv+0x2d4>)
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	4b3b      	ldr	r3, [pc, #236]	; (800c800 <_ZL14pduAppFunctionPv+0x2c0>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d110      	bne.n	800c73c <_ZL14pduAppFunctionPv+0x1fc>
				|| lastPeHwEnabled != outputState.LPCh6.get()
 800c71a:	483b      	ldr	r0, [pc, #236]	; (800c808 <_ZL14pduAppFunctionPv+0x2c8>)
 800c71c:	f7fd fdb9 	bl	800a292 <_ZNK16OutputChannelPwm3getEv>
 800c720:	4603      	mov	r3, r0
 800c722:	461a      	mov	r2, r3
 800c724:	4b3c      	ldr	r3, [pc, #240]	; (800c818 <_ZL14pduAppFunctionPv+0x2d8>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d107      	bne.n	800c73c <_ZL14pduAppFunctionPv+0x1fc>
				|| lastErrorFlag != anyErrorPresent()) {
 800c72c:	f7fd ff0a 	bl	800a544 <_Z15anyErrorPresentv>
 800c730:	4603      	mov	r3, r0
 800c732:	461a      	mov	r2, r3
 800c734:	4b39      	ldr	r3, [pc, #228]	; (800c81c <_ZL14pduAppFunctionPv+0x2dc>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d001      	beq.n	800c740 <_ZL14pduAppFunctionPv+0x200>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <_ZL14pduAppFunctionPv+0x202>
 800c740:	2300      	movs	r3, #0
		if (xTaskGetTickCount() - lastStatusSent >= OD_statusSendInterval_get()
 800c742:	2b00      	cmp	r3, #0
 800c744:	d017      	beq.n	800c776 <_ZL14pduAppFunctionPv+0x236>

			lastPduEnabled = pduEnabled;
 800c746:	4b2e      	ldr	r3, [pc, #184]	; (800c800 <_ZL14pduAppFunctionPv+0x2c0>)
 800c748:	781a      	ldrb	r2, [r3, #0]
 800c74a:	4b32      	ldr	r3, [pc, #200]	; (800c814 <_ZL14pduAppFunctionPv+0x2d4>)
 800c74c:	701a      	strb	r2, [r3, #0]
			lastPeHwEnabled = outputState.LPCh6.get();
 800c74e:	482e      	ldr	r0, [pc, #184]	; (800c808 <_ZL14pduAppFunctionPv+0x2c8>)
 800c750:	f7fd fd9f 	bl	800a292 <_ZNK16OutputChannelPwm3getEv>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	4b2f      	ldr	r3, [pc, #188]	; (800c818 <_ZL14pduAppFunctionPv+0x2d8>)
 800c75a:	701a      	strb	r2, [r3, #0]
			lastErrorFlag = anyErrorPresent();
 800c75c:	f7fd fef2 	bl	800a544 <_Z15anyErrorPresentv>
 800c760:	4603      	mov	r3, r0
 800c762:	461a      	mov	r2, r3
 800c764:	4b2d      	ldr	r3, [pc, #180]	; (800c81c <_ZL14pduAppFunctionPv+0x2dc>)
 800c766:	701a      	strb	r2, [r3, #0]

			lastStatusSent = xTaskGetTickCount();
 800c768:	f00d fbf8 	bl	8019f5c <xTaskGetTickCount>
 800c76c:	4603      	mov	r3, r0
 800c76e:	4a28      	ldr	r2, [pc, #160]	; (800c810 <_ZL14pduAppFunctionPv+0x2d0>)
 800c770:	6013      	str	r3, [r2, #0]

			// Send out data to CAN bus
			sendData();
 800c772:	f7ff feb7 	bl	800c4e4 <_Z8sendDatav>
		}

		// Send out status message with configured interval or when there is a change in PDU status
		if (xTaskGetTickCount() - tempLast >= 1000){
 800c776:	f00d fbf1 	bl	8019f5c <xTaskGetTickCount>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b28      	ldr	r3, [pc, #160]	; (800c820 <_ZL14pduAppFunctionPv+0x2e0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c786:	4293      	cmp	r3, r2
 800c788:	bf8c      	ite	hi
 800c78a:	2301      	movhi	r3, #1
 800c78c:	2300      	movls	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d012      	beq.n	800c7ba <_ZL14pduAppFunctionPv+0x27a>

			tempLast = xTaskGetTickCount();
 800c794:	f00d fbe2 	bl	8019f5c <xTaskGetTickCount>
 800c798:	4603      	mov	r3, r0
 800c79a:	4a21      	ldr	r2, [pc, #132]	; (800c820 <_ZL14pduAppFunctionPv+0x2e0>)
 800c79c:	6013      	str	r3, [r2, #0]

			// Send out data to CAN bus
			printf("HpCh2 switch = %u, on = %u\n", outputState.HPCh2_coolingPump.getSwitch(), outputState.HPCh2_coolingPump.get());
 800c79e:	4821      	ldr	r0, [pc, #132]	; (800c824 <_ZL14pduAppFunctionPv+0x2e4>)
 800c7a0:	f7fd fd83 	bl	800a2aa <_ZNK16OutputChannelPwm9getSwitchEv>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461c      	mov	r4, r3
 800c7a8:	481e      	ldr	r0, [pc, #120]	; (800c824 <_ZL14pduAppFunctionPv+0x2e4>)
 800c7aa:	f7fd fd72 	bl	800a292 <_ZNK16OutputChannelPwm3getEv>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	481c      	ldr	r0, [pc, #112]	; (800c828 <_ZL14pduAppFunctionPv+0x2e8>)
 800c7b6:	f00a fe19 	bl	80173ec <printf_>
		}

		// Delay until next check
		osDelay(pdMS_TO_TICKS(5));
 800c7ba:	2005      	movs	r0, #5
 800c7bc:	f00a ff90 	bl	80176e0 <osDelay>
		blinkStatusLed();
 800c7c0:	e744      	b.n	800c64c <_ZL14pduAppFunctionPv+0x10c>
 800c7c2:	bf00      	nop
 800c7c4:	20000b04 	.word	0x20000b04
 800c7c8:	20000b0c 	.word	0x20000b0c
 800c7cc:	20000b1c 	.word	0x20000b1c
 800c7d0:	20000b14 	.word	0x20000b14
 800c7d4:	20000a48 	.word	0x20000a48
 800c7d8:	20000a98 	.word	0x20000a98
 800c7dc:	20001398 	.word	0x20001398
 800c7e0:	200011e8 	.word	0x200011e8
 800c7e4:	200012c0 	.word	0x200012c0
 800c7e8:	20001278 	.word	0x20001278
 800c7ec:	20001350 	.word	0x20001350
 800c7f0:	20001230 	.word	0x20001230
 800c7f4:	20001308 	.word	0x20001308
 800c7f8:	20000b24 	.word	0x20000b24
 800c7fc:	20000d00 	.word	0x20000d00
 800c800:	20000af8 	.word	0x20000af8
 800c804:	c2c80000 	.word	0xc2c80000
 800c808:	20000ba8 	.word	0x20000ba8
 800c80c:	20000ce0 	.word	0x20000ce0
 800c810:	20000d04 	.word	0x20000d04
 800c814:	20000afa 	.word	0x20000afa
 800c818:	20000afb 	.word	0x20000afb
 800c81c:	20000afc 	.word	0x20000afc
 800c820:	20000d08 	.word	0x20000d08
 800c824:	20000c38 	.word	0x20000c38
 800c828:	0801efe8 	.word	0x0801efe8

0800c82c <main_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void main_entry(void *argv) {
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	pduAppFunction(argv);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fe83 	bl	800c540 <_ZL14pduAppFunctionPv>

}
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6enableEvENKUlR9RxMessageE_clES5_>:
		disable();
	}

	void enable(){
		if(m_receiverId == INVALID_ID){
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
				this->receiveCallback(msg);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	4618      	mov	r0, r3
 800c854:	f001 f866 	bl	800d924 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE15receiveCallbackER9RxMessage>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6enableEv>:
	void enable(){
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
		if(m_receiverId == INVALID_ID){
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c870:	d113      	bne.n	800c89a <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6enableEv+0x3a>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	f107 0308 	add.w	r3, r7, #8
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f001 f862 	bl	800d944 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_vvEET_>
 800c880:	f107 0308 	add.w	r3, r7, #8
 800c884:	4618      	mov	r0, r3
 800c886:	f001 f887 	bl	800d998 <_ZN3can23registerMessageReceiverINS_8messages19PDU_RX_Control_NoODEEEjSt8functionIFvR9RxMessageEE>
 800c88a:	4602      	mov	r2, r0
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	605a      	str	r2, [r3, #4]
 800c890:	f107 0308 	add.w	r3, r7, #8
 800c894:	4618      	mov	r0, r3
 800c896:	f7f4 fdfb 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			});
		}

	}
 800c89a:	bf00      	nop
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <_ZZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvENKUlR9RxMessageE_clES5_>:
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	6039      	str	r1, [r7, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
				this->receiveCallback(msg);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 f88e 	bl	800d9d4 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE15receiveCallbackER9RxMessage>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEv>:
	void enable(){
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
		if(m_receiverId == INVALID_ID){
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d0:	d113      	bne.n	800c8fa <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEv+0x3a>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	f107 0308 	add.w	r3, r7, #8
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f001 f88a 	bl	800d9f4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_>
 800c8e0:	f107 0308 	add.w	r3, r7, #8
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f001 f8af 	bl	800da48 <_ZN3can23registerMessageReceiverINS_8messages24PDU_RX_LP_Dutycycle_NoODEEEjSt8functionIFvR9RxMessageEE>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	605a      	str	r2, [r3, #4]
 800c8f0:	f107 0308 	add.w	r3, r7, #8
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f4 fdcb 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800c8fa:	bf00      	nop
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <_ZZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvENKUlR9RxMessageE_clES5_>:
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
				this->receiveCallback(msg);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	f001 f8b6 	bl	800da84 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE15receiveCallbackER9RxMessage>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEv>:
	void enable(){
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
		if(m_receiverId == INVALID_ID){
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c930:	d113      	bne.n	800c95a <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEv+0x3a>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	f107 0308 	add.w	r3, r7, #8
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f001 f8b2 	bl	800daa4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_>
 800c940:	f107 0308 	add.w	r3, r7, #8
 800c944:	4618      	mov	r0, r3
 800c946:	f001 f8d7 	bl	800daf8 <_ZN3can23registerMessageReceiverINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEEjSt8functionIFvR9RxMessageEE>
 800c94a:	4602      	mov	r2, r0
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	605a      	str	r2, [r3, #4]
 800c950:	f107 0308 	add.w	r3, r7, #8
 800c954:	4618      	mov	r0, r3
 800c956:	f7f4 fd9b 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800c95a:	bf00      	nop
 800c95c:	3718      	adds	r7, #24
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <_ZZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6enableEvENKUlR9RxMessageE_clES5_>:
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	6039      	str	r1, [r7, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
				this->receiveCallback(msg);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f001 f8de 	bl	800db34 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE15receiveCallbackER9RxMessage>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c978:	bf00      	nop
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6enableEv>:
	void enable(){
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
		if(m_receiverId == INVALID_ID){
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d113      	bne.n	800c9ba <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6enableEv+0x3a>
			m_receiverId = registerMessageReceiver<MESSAGE>([this](RxMessage& msg){
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	f107 0308 	add.w	r3, r7, #8
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f001 f8da 	bl	800db54 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_vvEET_>
 800c9a0:	f107 0308 	add.w	r3, r7, #8
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f001 f8ff 	bl	800dba8 <_ZN3can23registerMessageReceiverINS_8messages21PDU_RX_Manual_ControlEEEjSt8functionIFvR9RxMessageEE>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	605a      	str	r2, [r3, #4]
 800c9b0:	f107 0308 	add.w	r3, r7, #8
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f4 fd6b 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800c9ba:	bf00      	nop
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh1_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f103 0008 	add.w	r0, r3, #8
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f103 0110 	add.w	r1, r3, #16
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	ed97 0a00 	vldr	s0, [r7]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f7fd f82a 	bl	8009a3c <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf>
        }
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh2_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f103 0008 	add.w	r0, r3, #8
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f103 0110 	add.w	r1, r3, #16
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	ed97 0a00 	vldr	s0, [r7]
 800ca10:	461a      	mov	r2, r3
 800ca12:	f7fd f85f 	bl	8009ad4 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf>
        }
 800ca16:	bf00      	nop
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh3_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b082      	sub	sp, #8
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f103 0008 	add.w	r0, r3, #8
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f103 0110 	add.w	r1, r3, #16
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	3304      	adds	r3, #4
 800ca3a:	ed97 0a00 	vldr	s0, [r7]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	f7fd f8a2 	bl	8009b88 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf>
        }
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh4_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f103 0008 	add.w	r0, r3, #8
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f103 0110 	add.w	r1, r3, #16
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3304      	adds	r3, #4
 800ca68:	ed97 0a00 	vldr	s0, [r7]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f7fd f8df 	bl	8009c30 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf>
        }
 800ca72:	bf00      	nop
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh5_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f103 0008 	add.w	r0, r3, #8
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f103 0110 	add.w	r1, r3, #16
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3304      	adds	r3, #4
 800ca96:	ed97 0a00 	vldr	s0, [r7]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f7fd f91c 	bl	8009cd8 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf>
        }
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh1_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f103 0008 	add.w	r0, r3, #8
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f103 0110 	add.w	r1, r3, #16
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3304      	adds	r3, #4
 800cac4:	ed97 0a00 	vldr	s0, [r7]
 800cac8:	461a      	mov	r2, r3
 800caca:	f7fb fed1 	bl	8008870 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf>
        }
 800cace:	bf00      	nop
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh2_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b082      	sub	sp, #8
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f103 0008 	add.w	r0, r3, #8
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f103 0110 	add.w	r1, r3, #16
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	ed97 0a00 	vldr	s0, [r7]
 800caf6:	461a      	mov	r2, r3
 800caf8:	f7fb ff06 	bl	8008908 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf>
        }
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh3_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f103 0008 	add.w	r0, r3, #8
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f103 0110 	add.w	r1, r3, #16
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	ed97 0a00 	vldr	s0, [r7]
 800cb24:	461a      	mov	r2, r3
 800cb26:	f7fb ff43 	bl	80089b0 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf>
        }
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh4_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b082      	sub	sp, #8
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f103 0008 	add.w	r0, r3, #8
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f103 0110 	add.w	r1, r3, #16
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	ed97 0a00 	vldr	s0, [r7]
 800cb52:	461a      	mov	r2, r3
 800cb54:	f7fb ff7e 	bl	8008a54 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf>
        }
 800cb58:	bf00      	nop
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh1_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f103 0008 	add.w	r0, r3, #8
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f103 0110 	add.w	r1, r3, #16
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	1d1a      	adds	r2, r3, #4
 800cb7c:	78fb      	ldrb	r3, [r7, #3]
 800cb7e:	f7fc fb20 	bl	80091c2 <_ZN3can7signals18PDU_LPCh1_ShortCnt3setERyS2_Rhh>
        }
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh1_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	460b      	mov	r3, r1
 800cb94:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f103 0008 	add.w	r0, r3, #8
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f103 0110 	add.w	r1, r3, #16
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	78fb      	ldrb	r3, [r7, #3]
 800cba8:	f7fc fcd8 	bl	800955c <_ZN3can7signals15PDU_LPCh1_State3setERyS2_Rhh>
        }
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh2_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f103 0008 	add.w	r0, r3, #8
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f103 0110 	add.w	r1, r3, #16
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	1d1a      	adds	r2, r3, #4
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	f7fc fb26 	bl	8009222 <_ZN3can7signals18PDU_LPCh2_ShortCnt3setERyS2_Rhh>
        }
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh2_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f103 0008 	add.w	r0, r3, #8
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f103 0110 	add.w	r1, r3, #16
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	1d1a      	adds	r2, r3, #4
 800cbfa:	78fb      	ldrb	r3, [r7, #3]
 800cbfc:	f7fc fcdb 	bl	80095b6 <_ZN3can7signals15PDU_LPCh2_State3setERyS2_Rhh>
        }
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh3_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	460b      	mov	r3, r1
 800cc12:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f103 0008 	add.w	r0, r3, #8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f103 0110 	add.w	r1, r3, #16
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	1d1a      	adds	r2, r3, #4
 800cc24:	78fb      	ldrb	r3, [r7, #3]
 800cc26:	f7fc fb2c 	bl	8009282 <_ZN3can7signals18PDU_LPCh3_ShortCnt3setERyS2_Rhh>
        }
 800cc2a:	bf00      	nop
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh3_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f103 0008 	add.w	r0, r3, #8
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f103 0110 	add.w	r1, r3, #16
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	1d1a      	adds	r2, r3, #4
 800cc4e:	78fb      	ldrb	r3, [r7, #3]
 800cc50:	f7fc fcde 	bl	8009610 <_ZN3can7signals15PDU_LPCh3_State3setERyS2_Rhh>
        }
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh4_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f103 0008 	add.w	r0, r3, #8
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f103 0110 	add.w	r1, r3, #16
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	1d1a      	adds	r2, r3, #4
 800cc78:	78fb      	ldrb	r3, [r7, #3]
 800cc7a:	f7fc fb31 	bl	80092e0 <_ZN3can7signals18PDU_LPCh4_ShortCnt3setERyS2_Rhh>
        }
 800cc7e:	bf00      	nop
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh4_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b082      	sub	sp, #8
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f103 0008 	add.w	r0, r3, #8
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f103 0110 	add.w	r1, r3, #16
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	1d1a      	adds	r2, r3, #4
 800cca2:	78fb      	ldrb	r3, [r7, #3]
 800cca4:	f7fc fce1 	bl	800966a <_ZN3can7signals15PDU_LPCh4_State3setERyS2_Rhh>
        }
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh5_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f103 0008 	add.w	r0, r3, #8
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f103 0110 	add.w	r1, r3, #16
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	1d1a      	adds	r2, r3, #4
 800cccc:	78fb      	ldrb	r3, [r7, #3]
 800ccce:	f7fc fb37 	bl	8009340 <_ZN3can7signals18PDU_LPCh5_ShortCnt3setERyS2_Rhh>
        }
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh5_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	460b      	mov	r3, r1
 800cce4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f103 0008 	add.w	r0, r3, #8
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f103 0110 	add.w	r1, r3, #16
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	1d1a      	adds	r2, r3, #4
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	f7fc fce4 	bl	80096c4 <_ZN3can7signals15PDU_LPCh5_State3setERyS2_Rhh>
        }
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh6_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f103 0008 	add.w	r0, r3, #8
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f103 0110 	add.w	r1, r3, #16
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	1d1a      	adds	r2, r3, #4
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	f7fc fb3d 	bl	80093a0 <_ZN3can7signals18PDU_LPCh6_ShortCnt3setERyS2_Rhh>
        }
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh6_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	460b      	mov	r3, r1
 800cd38:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f103 0008 	add.w	r0, r3, #8
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f103 0110 	add.w	r1, r3, #16
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	1d1a      	adds	r2, r3, #4
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	f7fc fce7 	bl	800971e <_ZN3can7signals15PDU_LPCh6_State3setERyS2_Rhh>
        }
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh7_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f103 0008 	add.w	r0, r3, #8
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f103 0110 	add.w	r1, r3, #16
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	1d1a      	adds	r2, r3, #4
 800cd74:	78fb      	ldrb	r3, [r7, #3]
 800cd76:	f7fc fb40 	bl	80093fa <_ZN3can7signals18PDU_LPCh7_ShortCnt3setERyS2_Rhh>
        }
 800cd7a:	bf00      	nop
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh7_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b082      	sub	sp, #8
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f103 0008 	add.w	r0, r3, #8
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f103 0110 	add.w	r1, r3, #16
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	78fb      	ldrb	r3, [r7, #3]
 800cda0:	f7fc fcea 	bl	8009778 <_ZN3can7signals15PDU_LPCh7_State3setERyS2_Rhh>
        }
 800cda4:	bf00      	nop
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh8_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f103 0008 	add.w	r0, r3, #8
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f103 0110 	add.w	r1, r3, #16
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	f7fc fb41 	bl	8009450 <_ZN3can7signals18PDU_LPCh8_ShortCnt3setERyS2_Rhh>
        }
 800cdce:	bf00      	nop
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh8_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f103 0008 	add.w	r0, r3, #8
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f103 0110 	add.w	r1, r3, #16
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	1d1a      	adds	r2, r3, #4
 800cdf2:	78fb      	ldrb	r3, [r7, #3]
 800cdf4:	f7fc fced 	bl	80097d2 <_ZN3can7signals15PDU_LPCh8_State3setERyS2_Rhh>
        }
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh9_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f103 0008 	add.w	r0, r3, #8
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f103 0110 	add.w	r1, r3, #16
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	1d1a      	adds	r2, r3, #4
 800ce1c:	78fb      	ldrb	r3, [r7, #3]
 800ce1e:	f7fc fb43 	bl	80094a8 <_ZN3can7signals18PDU_LPCh9_ShortCnt3setERyS2_Rhh>
        }
 800ce22:	bf00      	nop
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh9_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f103 0008 	add.w	r0, r3, #8
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f103 0110 	add.w	r1, r3, #16
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	1d1a      	adds	r2, r3, #4
 800ce46:	78fb      	ldrb	r3, [r7, #3]
 800ce48:	f7fc fcf0 	bl	800982c <_ZN3can7signals15PDU_LPCh9_State3setERyS2_Rhh>
        }
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals19PDU_LPCh10_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f103 0008 	add.w	r0, r3, #8
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f103 0110 	add.w	r1, r3, #16
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	1d1a      	adds	r2, r3, #4
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	f7fc f980 	bl	8009176 <_ZN3can7signals19PDU_LPCh10_ShortCnt3setERyS2_Rhh>
        }
 800ce76:	bf00      	nop
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals16PDU_LPCh10_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	460b      	mov	r3, r1
 800ce88:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f103 0008 	add.w	r0, r3, #8
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f103 0110 	add.w	r1, r3, #16
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	1d1a      	adds	r2, r3, #4
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	f7fc fb31 	bl	8009502 <_ZN3can7signals16PDU_LPCh10_State3setERyS2_Rhh>
        }
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh1_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f103 0008 	add.w	r0, r3, #8
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f103 0110 	add.w	r1, r3, #16
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	1d1a      	adds	r2, r3, #4
 800cec4:	78fb      	ldrb	r3, [r7, #3]
 800cec6:	f7fb fe19 	bl	8008afc <_ZN3can7signals18PDU_HPCh1_ShortCnt3setERyS2_Rhh>
        }
 800ceca:	bf00      	nop
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh1_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b082      	sub	sp, #8
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	460b      	mov	r3, r1
 800cedc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f103 0008 	add.w	r0, r3, #8
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f103 0110 	add.w	r1, r3, #16
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	1d1a      	adds	r2, r3, #4
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	f7fb fe2a 	bl	8008b48 <_ZN3can7signals15PDU_HPCh1_State3setERyS2_Rhh>
        }
 800cef4:	bf00      	nop
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh2_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f103 0008 	add.w	r0, r3, #8
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f103 0110 	add.w	r1, r3, #16
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	1d1a      	adds	r2, r3, #4
 800cf18:	78fb      	ldrb	r3, [r7, #3]
 800cf1a:	f7fb fe75 	bl	8008c08 <_ZN3can7signals18PDU_HPCh2_ShortCnt3setERyS2_Rhh>
        }
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh2_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f103 0008 	add.w	r0, r3, #8
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f103 0110 	add.w	r1, r3, #16
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	1d1a      	adds	r2, r3, #4
 800cf42:	78fb      	ldrb	r3, [r7, #3]
 800cf44:	f7fb fe30 	bl	8008ba8 <_ZN3can7signals15PDU_HPCh2_State3setERyS2_Rhh>
        }
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh3_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f103 0008 	add.w	r0, r3, #8
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f103 0110 	add.w	r1, r3, #16
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	1d1a      	adds	r2, r3, #4
 800cf6c:	78fb      	ldrb	r3, [r7, #3]
 800cf6e:	f7fb fe7b 	bl	8008c68 <_ZN3can7signals18PDU_HPCh3_ShortCnt3setERyS2_Rhh>
        }
 800cf72:	bf00      	nop
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh3_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b082      	sub	sp, #8
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	460b      	mov	r3, r1
 800cf84:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f103 0008 	add.w	r0, r3, #8
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f103 0110 	add.w	r1, r3, #16
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	1d1a      	adds	r2, r3, #4
 800cf96:	78fb      	ldrb	r3, [r7, #3]
 800cf98:	f7fb fe95 	bl	8008cc6 <_ZN3can7signals15PDU_HPCh3_State3setERyS2_Rhh>
        }
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh4_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f103 0008 	add.w	r0, r3, #8
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f103 0110 	add.w	r1, r3, #16
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	1d1a      	adds	r2, r3, #4
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	f7fb feb0 	bl	8008d26 <_ZN3can7signals18PDU_HPCh4_ShortCnt3setERyS2_Rhh>
        }
 800cfc6:	bf00      	nop
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh4_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b082      	sub	sp, #8
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f103 0008 	add.w	r0, r3, #8
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f103 0110 	add.w	r1, r3, #16
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	1d1a      	adds	r2, r3, #4
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	f7fb fecb 	bl	8008d86 <_ZN3can7signals15PDU_HPCh4_State3setERyS2_Rhh>
        }
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6hasAnyEv>:

	[[nodiscard]] inline bool isFull(){
		return xMessageBufferIsFull(m_messageBuffer) == pdTRUE;
	}

	[[nodiscard]] inline bool hasAny(){
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
		return not isEmpty();
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fdef 	bl	800dbe4 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7isEmptyEv>
 800d006:	4603      	mov	r3, r0
 800d008:	f083 0301 	eor.w	r3, r3, #1
 800d00c:	b2db      	uxtb	r3, r3
	}
 800d00e:	4618      	mov	r0, r3
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7dequeueEv>:

	inline can::Message<MESSAGE> dequeue(){
 800d016:	b580      	push	{r7, lr}
 800d018:	b08c      	sub	sp, #48	; 0x30
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
		RxMessage rxMsg;
		xMessageBufferReceive(m_messageBuffer, &rxMsg, sizeof(RxMessage), 0);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	f107 010c 	add.w	r1, r7, #12
 800d028:	2300      	movs	r3, #0
 800d02a:	2224      	movs	r2, #36	; 0x24
 800d02c:	f00c fa5a 	bl	80194e4 <xStreamBufferReceive>
		return can::Message<MESSAGE>(std::move(rxMsg));
 800d030:	f107 030c 	add.w	r3, r7, #12
 800d034:	4618      	mov	r0, r3
 800d036:	f000 fde8 	bl	800dc0a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>
 800d03a:	4603      	mov	r3, r0
 800d03c:	4619      	mov	r1, r3
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fe09 	bl	800dc56 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEEC1ERK9RxMessage>
	}
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	3730      	adds	r7, #48	; 0x30
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEE3getINS_7signals17PDU_RX_ErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f103 0208 	add.w	r2, r3, #8
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3310      	adds	r3, #16
 800d05e:	4619      	mov	r1, r3
 800d060:	4610      	mov	r0, r2
 800d062:	f7fb fb5d 	bl	8008720 <_ZN3can7signals17PDU_RX_ErrorReset3getERKyS3_>
 800d066:	4603      	mov	r3, r0
        }
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEE3getINS_7signals13PDU_RX_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f103 0208 	add.w	r2, r3, #8
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	3310      	adds	r3, #16
 800d082:	4619      	mov	r1, r3
 800d084:	4610      	mov	r0, r2
 800d086:	f7fb fb33 	bl	80086f0 <_ZN3can7signals13PDU_RX_Enable3getERKyS3_>
 800d08a:	4603      	mov	r3, r0
        }
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEE3getINS_7signals17PDU_RX_PEHWEnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f103 0208 	add.w	r2, r3, #8
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3310      	adds	r3, #16
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	f7fb fb51 	bl	8008750 <_ZN3can7signals17PDU_RX_PEHWEnable3getERKyS3_>
 800d0ae:	4603      	mov	r3, r0
        }
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6hasAnyEv>:
	[[nodiscard]] inline bool hasAny(){
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
		return not isEmpty();
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fdd9 	bl	800dc78 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7isEmptyEv>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	f083 0301 	eor.w	r3, r3, #1
 800d0cc:	b2db      	uxtb	r3, r3
	}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7dequeueEv>:
	inline can::Message<MESSAGE> dequeue(){
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b08c      	sub	sp, #48	; 0x30
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
		xMessageBufferReceive(m_messageBuffer, &rxMsg, sizeof(RxMessage), 0);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	f107 010c 	add.w	r1, r7, #12
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	2224      	movs	r2, #36	; 0x24
 800d0ec:	f00c f9fa 	bl	80194e4 <xStreamBufferReceive>
		return can::Message<MESSAGE>(std::move(rxMsg));
 800d0f0:	f107 030c 	add.w	r3, r7, #12
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 fd88 	bl	800dc0a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fde8 	bl	800dcd4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK9RxMessage>
	}
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	3730      	adds	r7, #48	; 0x30
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh1_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f103 0208 	add.w	r2, r3, #8
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3310      	adds	r3, #16
 800d11e:	4619      	mov	r1, r3
 800d120:	4610      	mov	r0, r2
 800d122:	f7fb fe60 	bl	8008de6 <_ZN3can7signals16PDU_LPCh1_Enable3getERKyS3_>
 800d126:	4603      	mov	r3, r0
        }
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh2_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f103 0208 	add.w	r2, r3, #8
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3310      	adds	r3, #16
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7fb fe66 	bl	8008e16 <_ZN3can7signals16PDU_LPCh2_Enable3getERKyS3_>
 800d14a:	4603      	mov	r3, r0
        }
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh3_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f103 0208 	add.w	r2, r3, #8
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	3310      	adds	r3, #16
 800d166:	4619      	mov	r1, r3
 800d168:	4610      	mov	r0, r2
 800d16a:	f7fb fe6c 	bl	8008e46 <_ZN3can7signals16PDU_LPCh3_Enable3getERKyS3_>
 800d16e:	4603      	mov	r3, r0
        }
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f103 0208 	add.w	r2, r3, #8
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	3310      	adds	r3, #16
 800d18a:	4619      	mov	r1, r3
 800d18c:	4610      	mov	r0, r2
 800d18e:	f7fb fe72 	bl	8008e76 <_ZN3can7signals16PDU_LPCh4_Enable3getERKyS3_>
 800d192:	4603      	mov	r3, r0
        }
 800d194:	4618      	mov	r0, r3
 800d196:	3708      	adds	r7, #8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh5_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f103 0208 	add.w	r2, r3, #8
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	3310      	adds	r3, #16
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f7fb fe78 	bl	8008ea6 <_ZN3can7signals16PDU_LPCh5_Enable3getERKyS3_>
 800d1b6:	4603      	mov	r3, r0
        }
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh6_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f103 0208 	add.w	r2, r3, #8
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	3310      	adds	r3, #16
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	f7fb fe7e 	bl	8008ed6 <_ZN3can7signals16PDU_LPCh6_Enable3getERKyS3_>
 800d1da:	4603      	mov	r3, r0
        }
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh7_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f103 0208 	add.w	r2, r3, #8
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	f7fb fe84 	bl	8008f06 <_ZN3can7signals16PDU_LPCh7_Enable3getERKyS3_>
 800d1fe:	4603      	mov	r3, r0
        }
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh8_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f103 0208 	add.w	r2, r3, #8
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3310      	adds	r3, #16
 800d21a:	4619      	mov	r1, r3
 800d21c:	4610      	mov	r0, r2
 800d21e:	f7fb fe8a 	bl	8008f36 <_ZN3can7signals16PDU_LPCh8_Enable3getERKyS3_>
 800d222:	4603      	mov	r3, r0
        }
 800d224:	4618      	mov	r0, r3
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh9_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f103 0208 	add.w	r2, r3, #8
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3310      	adds	r3, #16
 800d23e:	4619      	mov	r1, r3
 800d240:	4610      	mov	r0, r2
 800d242:	f7fb fe90 	bl	8008f66 <_ZN3can7signals16PDU_LPCh9_Enable3getERKyS3_>
 800d246:	4603      	mov	r3, r0
        }
 800d248:	4618      	mov	r0, r3
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals17PDU_LPCh10_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f103 0208 	add.w	r2, r3, #8
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3310      	adds	r3, #16
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7fb fe96 	bl	8008f96 <_ZN3can7signals17PDU_LPCh10_Enable3getERKyS3_>
 800d26a:	4603      	mov	r3, r0
        }
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh1_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f103 0208 	add.w	r2, r3, #8
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3310      	adds	r3, #16
 800d286:	4619      	mov	r1, r3
 800d288:	4610      	mov	r0, r2
 800d28a:	f7fb fe9c 	bl	8008fc6 <_ZN3can7signals16PDU_HPCh1_Enable3getERKyS3_>
 800d28e:	4603      	mov	r3, r0
        }
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh2_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f103 0208 	add.w	r2, r3, #8
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3310      	adds	r3, #16
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f7fb fea2 	bl	8008ff6 <_ZN3can7signals16PDU_HPCh2_Enable3getERKyS3_>
 800d2b2:	4603      	mov	r3, r0
        }
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh3_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f103 0208 	add.w	r2, r3, #8
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	3310      	adds	r3, #16
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7fb fea8 	bl	8009026 <_ZN3can7signals16PDU_HPCh3_Enable3getERKyS3_>
 800d2d6:	4603      	mov	r3, r0
        }
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f103 0208 	add.w	r2, r3, #8
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3310      	adds	r3, #16
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	f7fb feae 	bl	8009056 <_ZN3can7signals16PDU_HPCh4_Enable3getERKyS3_>
 800d2fa:	4603      	mov	r3, r0
        }
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D1_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f103 0208 	add.w	r2, r3, #8
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3310      	adds	r3, #16
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7fb feb4 	bl	8009086 <_ZN3can7signals13PDU_D1_Enable3getERKyS3_>
 800d31e:	4603      	mov	r3, r0
        }
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D2_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f103 0208 	add.w	r2, r3, #8
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	3310      	adds	r3, #16
 800d33a:	4619      	mov	r1, r3
 800d33c:	4610      	mov	r0, r2
 800d33e:	f7fb feba 	bl	80090b6 <_ZN3can7signals13PDU_D2_Enable3getERKyS3_>
 800d342:	4603      	mov	r3, r0
        }
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D3_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f103 0208 	add.w	r2, r3, #8
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	3310      	adds	r3, #16
 800d35e:	4619      	mov	r1, r3
 800d360:	4610      	mov	r0, r2
 800d362:	f7fb fec0 	bl	80090e6 <_ZN3can7signals13PDU_D3_Enable3getERKyS3_>
 800d366:	4603      	mov	r3, r0
        }
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f103 0208 	add.w	r2, r3, #8
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3310      	adds	r3, #16
 800d382:	4619      	mov	r1, r3
 800d384:	4610      	mov	r0, r2
 800d386:	f7fb fec6 	bl	8009116 <_ZN3can7signals13PDU_D4_Enable3getERKyS3_>
 800d38a:	4603      	mov	r3, r0
        }
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals14PDU_SDC_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f103 0208 	add.w	r2, r3, #8
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3310      	adds	r3, #16
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	f7fb fecc 	bl	8009146 <_ZN3can7signals14PDU_SDC_Enable3getERKyS3_>
 800d3ae:	4603      	mov	r3, r0
        }
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6hasAnyEv>:
	[[nodiscard]] inline bool hasAny(){
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
		return not isEmpty();
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 fc98 	bl	800dcf6 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7isEmptyEv>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	f083 0301 	eor.w	r3, r3, #1
 800d3cc:	b2db      	uxtb	r3, r3
	}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7dequeueEv>:
	inline can::Message<MESSAGE> dequeue(){
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b08c      	sub	sp, #48	; 0x30
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]
		xMessageBufferReceive(m_messageBuffer, &rxMsg, sizeof(RxMessage), 0);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	6818      	ldr	r0, [r3, #0]
 800d3e4:	f107 010c 	add.w	r1, r7, #12
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2224      	movs	r2, #36	; 0x24
 800d3ec:	f00c f87a 	bl	80194e4 <xStreamBufferReceive>
		return can::Message<MESSAGE>(std::move(rxMsg));
 800d3f0:	f107 030c 	add.w	r3, r7, #12
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 fc08 	bl	800dc0a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fca7 	bl	800dd52 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1ERK9RxMessage>
	}
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	3730      	adds	r7, #48	; 0x30
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh1_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f103 0208 	add.w	r2, r3, #8
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3310      	adds	r3, #16
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fa ffe5 	bl	80083f0 <_ZN3can7signals19PDU_LPCh1_Dutycycle3getERKyS3_>
 800d426:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d42a:	eeb0 0a67 	vmov.f32	s0, s15
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh2_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f103 0208 	add.w	r2, r3, #8
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3310      	adds	r3, #16
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7fb f80d 	bl	8008468 <_ZN3can7signals19PDU_LPCh2_Dutycycle3getERKyS3_>
 800d44e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d452:	eeb0 0a67 	vmov.f32	s0, s15
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh3_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f103 0208 	add.w	r2, r3, #8
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3310      	adds	r3, #16
 800d46e:	4619      	mov	r1, r3
 800d470:	4610      	mov	r0, r2
 800d472:	f7fb f81b 	bl	80084ac <_ZN3can7signals19PDU_LPCh3_Dutycycle3getERKyS3_>
 800d476:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d47a:	eeb0 0a67 	vmov.f32	s0, s15
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh8_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f103 0208 	add.w	r2, r3, #8
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3310      	adds	r3, #16
 800d496:	4619      	mov	r1, r3
 800d498:	4610      	mov	r0, r2
 800d49a:	f7fb f829 	bl	80084f0 <_ZN3can7signals19PDU_LPCh8_Dutycycle3getERKyS3_>
 800d49e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d4a2:	eeb0 0a67 	vmov.f32	s0, s15
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals19PDU_LPCh9_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f103 0208 	add.w	r2, r3, #8
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3310      	adds	r3, #16
 800d4be:	4619      	mov	r1, r3
 800d4c0:	4610      	mov	r0, r2
 800d4c2:	f7fb f835 	bl	8008530 <_ZN3can7signals19PDU_LPCh9_Dutycycle3getERKyS3_>
 800d4c6:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d4ca:	eeb0 0a67 	vmov.f32	s0, s15
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEE3getINS_7signals20PDU_LPCh10_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f103 0208 	add.w	r2, r3, #8
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3310      	adds	r3, #16
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7fa ff9b 	bl	8008424 <_ZN3can7signals20PDU_LPCh10_Dutycycle3getERKyS3_>
 800d4ee:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d4f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6hasAnyEv>:
	[[nodiscard]] inline bool hasAny(){
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
		return not isEmpty();
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fc35 	bl	800dd74 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7isEmptyEv>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f083 0301 	eor.w	r3, r3, #1
 800d510:	b2db      	uxtb	r3, r3
	}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7dequeueEv>:
	inline can::Message<MESSAGE> dequeue(){
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b08c      	sub	sp, #48	; 0x30
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
		xMessageBufferReceive(m_messageBuffer, &rxMsg, sizeof(RxMessage), 0);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	6818      	ldr	r0, [r3, #0]
 800d528:	f107 010c 	add.w	r1, r7, #12
 800d52c:	2300      	movs	r3, #0
 800d52e:	2224      	movs	r2, #36	; 0x24
 800d530:	f00b ffd8 	bl	80194e4 <xStreamBufferReceive>
		return can::Message<MESSAGE>(std::move(rxMsg));
 800d534:	f107 030c 	add.w	r3, r7, #12
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fb66 	bl	800dc0a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>
 800d53e:	4603      	mov	r3, r0
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fc44 	bl	800ddd0 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1ERK9RxMessage>
	}
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	3730      	adds	r7, #48	; 0x30
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals19PDU_HPCh1_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f103 0208 	add.w	r2, r3, #8
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	3310      	adds	r3, #16
 800d562:	4619      	mov	r1, r3
 800d564:	4610      	mov	r0, r2
 800d566:	f7fb f803 	bl	8008570 <_ZN3can7signals19PDU_HPCh1_Dutycycle3getERKyS3_>
 800d56a:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d56e:	eeb0 0a67 	vmov.f32	s0, s15
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals19PDU_HPCh2_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f103 0208 	add.w	r2, r3, #8
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	3310      	adds	r3, #16
 800d58a:	4619      	mov	r1, r3
 800d58c:	4610      	mov	r0, r2
 800d58e:	f7fb f809 	bl	80085a4 <_ZN3can7signals19PDU_HPCh2_Dutycycle3getERKyS3_>
 800d592:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d596:	eeb0 0a67 	vmov.f32	s0, s15
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D1_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f103 0208 	add.w	r2, r3, #8
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3310      	adds	r3, #16
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f7fb f817 	bl	80085e8 <_ZN3can7signals16PDU_D1_Dutycycle3getERKyS3_>
 800d5ba:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d5be:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D2_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f103 0208 	add.w	r2, r3, #8
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	3310      	adds	r3, #16
 800d5da:	4619      	mov	r1, r3
 800d5dc:	4610      	mov	r0, r2
 800d5de:	f7fb f825 	bl	800862c <_ZN3can7signals16PDU_D2_Dutycycle3getERKyS3_>
 800d5e2:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d5e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D3_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f103 0208 	add.w	r2, r3, #8
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	3310      	adds	r3, #16
 800d602:	4619      	mov	r1, r3
 800d604:	4610      	mov	r0, r2
 800d606:	f7fb f833 	bl	8008670 <_ZN3can7signals16PDU_D3_Dutycycle3getERKyS3_>
 800d60a:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d60e:	eeb0 0a67 	vmov.f32	s0, s15
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE3getINS_7signals16PDU_D4_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f103 0208 	add.w	r2, r3, #8
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3310      	adds	r3, #16
 800d62a:	4619      	mov	r1, r3
 800d62c:	4610      	mov	r0, r2
 800d62e:	f7fb f83f 	bl	80086b0 <_ZN3can7signals16PDU_D4_Dutycycle3getERKyS3_>
 800d632:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d636:	eeb0 0a67 	vmov.f32	s0, s15
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals14PDU_TX_EnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f103 0008 	add.w	r0, r3, #8
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f103 0110 	add.w	r1, r3, #16
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	1d1a      	adds	r2, r3, #4
 800d65c:	78fb      	ldrb	r3, [r7, #3]
 800d65e:	f7fb f88f 	bl	8008780 <_ZN3can7signals14PDU_TX_Enabled3setERyS2_Rhb>
        }
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals18PDU_TX_PEHWEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b082      	sub	sp, #8
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	460b      	mov	r3, r1
 800d674:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f103 0008 	add.w	r0, r3, #8
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f103 0110 	add.w	r1, r3, #16
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	1d1a      	adds	r2, r3, #4
 800d686:	78fb      	ldrb	r3, [r7, #3]
 800d688:	f7fb f8c7 	bl	800881a <_ZN3can7signals18PDU_TX_PEHWEnabled3setERyS2_Rhb>
        }
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals16PDU_TX_ErrorFlagEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f103 0008 	add.w	r0, r3, #8
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f103 0110 	add.w	r1, r3, #16
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	1d1a      	adds	r2, r3, #4
 800d6b0:	78fb      	ldrb	r3, [r7, #3]
 800d6b2:	f7fb f889 	bl	80087c8 <_ZN3can7signals16PDU_TX_ErrorFlag3setERyS2_Rhb>
        }
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	20c8      	movs	r0, #200	; 0xc8
 800d6cc:	f00b fd8a 	bl	80191e4 <xStreamBufferGenericCreate>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	601a      	str	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6dc:	605a      	str	r2, [r3, #4]
	}
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	20c8      	movs	r0, #200	; 0xc8
 800d6f6:	f00b fd75 	bl	80191e4 <xStreamBufferGenericCreate>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f04f 32ff 	mov.w	r2, #4294967295
 800d706:	605a      	str	r2, [r3, #4]
	}
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 800d712:	b580      	push	{r7, lr}
 800d714:	b082      	sub	sp, #8
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	2100      	movs	r1, #0
 800d71e:	20c8      	movs	r0, #200	; 0xc8
 800d720:	f00b fd60 	bl	80191e4 <xStreamBufferGenericCreate>
 800d724:	4602      	mov	r2, r0
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f04f 32ff 	mov.w	r2, #4294967295
 800d730:	605a      	str	r2, [r3, #4]
	}
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4618      	mov	r0, r3
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1Ev>:
	RxMessageQueue() : m_messageBuffer(xMessageBufferCreate(MSG_BUFFER_SIZE)){
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	2100      	movs	r1, #0
 800d748:	20c8      	movs	r0, #200	; 0xc8
 800d74a:	f00b fd4b 	bl	80191e4 <xStreamBufferGenericCreate>
 800d74e:	4602      	mov	r2, r0
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f04f 32ff 	mov.w	r2, #4294967295
 800d75a:	605a      	str	r2, [r3, #4]
	}
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <_ZSt3maxIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	da01      	bge.n	800d780 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	e000      	b.n	800d782 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800d780:	687b      	ldr	r3, [r7, #4]
    }
 800d782:	4618      	mov	r0, r3
 800d784:	370c      	adds	r7, #12
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d78e:	b480      	push	{r7}
 800d790:	b083      	sub	sp, #12
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	da01      	bge.n	800d7a8 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	e000      	b.n	800d7aa <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800d7a8:	687b      	ldr	r3, [r7, #4]
    }
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh6_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f103 0008 	add.w	r0, r3, #8
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f103 0110 	add.w	r1, r3, #16
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	ed97 0a00 	vldr	s0, [r7]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	f7fc fb1e 	bl	8009e18 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf>
        }
 800d7dc:	bf00      	nop
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh7_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f103 0008 	add.w	r0, r3, #8
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f103 0110 	add.w	r1, r3, #16
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	3304      	adds	r3, #4
 800d800:	ed97 0a00 	vldr	s0, [r7]
 800d804:	461a      	mov	r2, r3
 800d806:	f7fc fb61 	bl	8009ecc <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf>
        }
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh8_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d812:	b580      	push	{r7, lr}
 800d814:	b082      	sub	sp, #8
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f103 0008 	add.w	r0, r3, #8
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f103 0110 	add.w	r1, r3, #16
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3304      	adds	r3, #4
 800d82e:	ed97 0a00 	vldr	s0, [r7]
 800d832:	461a      	mov	r2, r3
 800d834:	f7fc fb9e 	bl	8009f74 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf>
        }
 800d838:	bf00      	nop
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh9_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f103 0008 	add.w	r0, r3, #8
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f103 0110 	add.w	r1, r3, #16
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3304      	adds	r3, #4
 800d85c:	ed97 0a00 	vldr	s0, [r7]
 800d860:	461a      	mov	r2, r3
 800d862:	f7fc fbdb 	bl	800a01c <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf>
        }
 800d866:	bf00      	nop
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals18PDU_LPCh10_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f103 0008 	add.w	r0, r3, #8
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f103 0110 	add.w	r1, r3, #16
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3304      	adds	r3, #4
 800d88a:	ed97 0a00 	vldr	s0, [r7]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7fc fa76 	bl	8009d80 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf>
        }
 800d894:	bf00      	nop
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_VoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f103 0008 	add.w	r0, r3, #8
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f103 0110 	add.w	r1, r3, #16
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	3304      	adds	r3, #4
 800d8b8:	ed97 0a00 	vldr	s0, [r7]
 800d8bc:	461a      	mov	r2, r3
 800d8be:	f7fc f82f 	bl	8009920 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf>
        }
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f103 0008 	add.w	r0, r3, #8
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f103 0110 	add.w	r1, r3, #16
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	ed97 0a00 	vldr	s0, [r7]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f7fb ffcc 	bl	8009888 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf>
        }
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals10PDU_LV_SOCEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f103 0008 	add.w	r0, r3, #8
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f103 0110 	add.w	r1, r3, #16
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	1d1a      	adds	r2, r3, #4
 800d914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d918:	f7fc f85c 	bl	80099d4 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha>
        }
 800d91c:	bf00      	nop
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE15receiveCallbackER9RxMessage>:


private:

	void receiveCallback(RxMessage &msg) {
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
		xMessageBufferSend(m_messageBuffer, &msg, sizeof(RxMessage), 10);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6818      	ldr	r0, [r3, #0]
 800d932:	230a      	movs	r3, #10
 800d934:	2224      	movs	r2, #36	; 0x24
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	f00b fce2 	bl	8019300 <xStreamBufferSend>
	}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4618      	mov	r0, r3
 800d952:	f7f3 fd6b 	bl	800142c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800d956:	463b      	mov	r3, r7
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fa4a 	bl	800ddf2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00f      	beq.n	800d984 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800d964:	687c      	ldr	r4, [r7, #4]
 800d966:	463b      	mov	r3, r7
 800d968:	4618      	mov	r0, r3
 800d96a:	f000 fa4d 	bl	800de08 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800d96e:	4603      	mov	r3, r0
 800d970:	4619      	mov	r1, r3
 800d972:	4620      	mov	r0, r4
 800d974:	f000 fa53 	bl	800de1e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>
	    _M_invoker = &_My_handler::_M_invoke;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a05      	ldr	r2, [pc, #20]	; (800d990 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_vvEET_+0x4c>)
 800d97c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a04      	ldr	r2, [pc, #16]	; (800d994 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_vvEET_+0x50>)
 800d982:	609a      	str	r2, [r3, #8]
      }
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd90      	pop	{r4, r7, pc}
 800d98e:	bf00      	nop
 800d990:	0800de43 	.word	0x0800de43
 800d994:	0800de6d 	.word	0x0800de6d

0800d998 <_ZN3can23registerMessageReceiverINS_8messages19PDU_RX_Control_NoODEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d9a0:	f107 0308 	add.w	r3, r7, #8
 800d9a4:	6879      	ldr	r1, [r7, #4]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7f3 febb 	bl	8001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d9ac:	f107 0308 	add.w	r3, r7, #8
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f240 11df 	movw	r1, #479	; 0x1df
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7f3 fdae 	bl	8001518 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d9bc:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d9be:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d9c0:	f107 0308 	add.w	r3, r7, #8
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f3 fd63 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d9ca:	4623      	mov	r3, r4
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	371c      	adds	r7, #28
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd90      	pop	{r4, r7, pc}

0800d9d4 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE15receiveCallbackER9RxMessage>:
	void receiveCallback(RxMessage &msg) {
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
		xMessageBufferSend(m_messageBuffer, &msg, sizeof(RxMessage), 10);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	230a      	movs	r3, #10
 800d9e4:	2224      	movs	r2, #36	; 0x24
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	f00b fc8a 	bl	8019300 <xStreamBufferSend>
	}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800d9f4:	b590      	push	{r4, r7, lr}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4618      	mov	r0, r3
 800da02:	f7f3 fd13 	bl	800142c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800da06:	463b      	mov	r3, r7
 800da08:	4618      	mov	r0, r3
 800da0a:	f000 fa4e 	bl	800deaa <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00f      	beq.n	800da34 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800da14:	687c      	ldr	r4, [r7, #4]
 800da16:	463b      	mov	r3, r7
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fa51 	bl	800dec0 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800da1e:	4603      	mov	r3, r0
 800da20:	4619      	mov	r1, r3
 800da22:	4620      	mov	r0, r4
 800da24:	f000 fa57 	bl	800ded6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>
	    _M_invoker = &_My_handler::_M_invoke;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a05      	ldr	r2, [pc, #20]	; (800da40 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_+0x4c>)
 800da2c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4a04      	ldr	r2, [pc, #16]	; (800da44 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_+0x50>)
 800da32:	609a      	str	r2, [r3, #8]
      }
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4618      	mov	r0, r3
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd90      	pop	{r4, r7, pc}
 800da3e:	bf00      	nop
 800da40:	0800defb 	.word	0x0800defb
 800da44:	0800df25 	.word	0x0800df25

0800da48 <_ZN3can23registerMessageReceiverINS_8messages24PDU_RX_LP_Dutycycle_NoODEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800da48:	b590      	push	{r4, r7, lr}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800da50:	f107 0308 	add.w	r3, r7, #8
 800da54:	6879      	ldr	r1, [r7, #4]
 800da56:	4618      	mov	r0, r3
 800da58:	f7f3 fe63 	bl	8001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800da5c:	f107 0308 	add.w	r3, r7, #8
 800da60:	2200      	movs	r2, #0
 800da62:	f240 215b 	movw	r1, #603	; 0x25b
 800da66:	4618      	mov	r0, r3
 800da68:	f7f3 fd56 	bl	8001518 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800da6c:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800da6e:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800da70:	f107 0308 	add.w	r3, r7, #8
 800da74:	4618      	mov	r0, r3
 800da76:	f7f3 fd0b 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800da7a:	4623      	mov	r3, r4
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	371c      	adds	r7, #28
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}

0800da84 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE15receiveCallbackER9RxMessage>:
	void receiveCallback(RxMessage &msg) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
		xMessageBufferSend(m_messageBuffer, &msg, sizeof(RxMessage), 10);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6818      	ldr	r0, [r3, #0]
 800da92:	230a      	movs	r3, #10
 800da94:	2224      	movs	r2, #36	; 0x24
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	f00b fc32 	bl	8019300 <xStreamBufferSend>
	}
 800da9c:	bf00      	nop
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800daa4:	b590      	push	{r4, r7, lr}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f3 fcbb 	bl	800142c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800dab6:	463b      	mov	r3, r7
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 fa52 	bl	800df62 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00f      	beq.n	800dae4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800dac4:	687c      	ldr	r4, [r7, #4]
 800dac6:	463b      	mov	r3, r7
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fa55 	bl	800df78 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800dace:	4603      	mov	r3, r0
 800dad0:	4619      	mov	r1, r3
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 fa5b 	bl	800df8e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>
	    _M_invoker = &_My_handler::_M_invoke;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a05      	ldr	r2, [pc, #20]	; (800daf0 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_+0x4c>)
 800dadc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a04      	ldr	r2, [pc, #16]	; (800daf4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_vvEET_+0x50>)
 800dae2:	609a      	str	r2, [r3, #8]
      }
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4618      	mov	r0, r3
 800dae8:	370c      	adds	r7, #12
 800daea:	46bd      	mov	sp, r7
 800daec:	bd90      	pop	{r4, r7, pc}
 800daee:	bf00      	nop
 800daf0:	0800dfb3 	.word	0x0800dfb3
 800daf4:	0800dfdd 	.word	0x0800dfdd

0800daf8 <_ZN3can23registerMessageReceiverINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800db00:	f107 0308 	add.w	r3, r7, #8
 800db04:	6879      	ldr	r1, [r7, #4]
 800db06:	4618      	mov	r0, r3
 800db08:	f7f3 fe0b 	bl	8001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	2200      	movs	r2, #0
 800db12:	f240 21db 	movw	r1, #731	; 0x2db
 800db16:	4618      	mov	r0, r3
 800db18:	f7f3 fcfe 	bl	8001518 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800db1c:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800db1e:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800db20:	f107 0308 	add.w	r3, r7, #8
 800db24:	4618      	mov	r0, r3
 800db26:	f7f3 fcb3 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800db2a:	4623      	mov	r3, r4
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	371c      	adds	r7, #28
 800db30:	46bd      	mov	sp, r7
 800db32:	bd90      	pop	{r4, r7, pc}

0800db34 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE15receiveCallbackER9RxMessage>:
	void receiveCallback(RxMessage &msg) {
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
		xMessageBufferSend(m_messageBuffer, &msg, sizeof(RxMessage), 10);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6818      	ldr	r0, [r3, #0]
 800db42:	230a      	movs	r3, #10
 800db44:	2224      	movs	r2, #36	; 0x24
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	f00b fbda 	bl	8019300 <xStreamBufferSend>
	}
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800db54:	b590      	push	{r4, r7, lr}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4618      	mov	r0, r3
 800db62:	f7f3 fc63 	bl	800142c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800db66:	463b      	mov	r3, r7
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 fa56 	bl	800e01a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00f      	beq.n	800db94 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800db74:	687c      	ldr	r4, [r7, #4]
 800db76:	463b      	mov	r3, r7
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 fa59 	bl	800e030 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800db7e:	4603      	mov	r3, r0
 800db80:	4619      	mov	r1, r3
 800db82:	4620      	mov	r0, r4
 800db84:	f000 fa5f 	bl	800e046 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>
	    _M_invoker = &_My_handler::_M_invoke;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4a05      	ldr	r2, [pc, #20]	; (800dba0 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_vvEET_+0x4c>)
 800db8c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a04      	ldr	r2, [pc, #16]	; (800dba4 <_ZNSt8functionIFvR9RxMessageEEC1IZN3can14RxMessageQueueINS5_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_vvEET_+0x50>)
 800db92:	609a      	str	r2, [r3, #8]
      }
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4618      	mov	r0, r3
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd90      	pop	{r4, r7, pc}
 800db9e:	bf00      	nop
 800dba0:	0800e06b 	.word	0x0800e06b
 800dba4:	0800e095 	.word	0x0800e095

0800dba8 <_ZN3can23registerMessageReceiverINS_8messages21PDU_RX_Manual_ControlEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800dbb0:	f107 0308 	add.w	r3, r7, #8
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7f3 fdb3 	bl	8001722 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800dbbc:	f107 0308 	add.w	r3, r7, #8
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f240 315a 	movw	r1, #858	; 0x35a
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7f3 fca6 	bl	8001518 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800dbcc:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800dbce:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800dbd0:	f107 0308 	add.w	r3, r7, #8
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7f3 fc5b 	bl	8001490 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800dbda:	4623      	mov	r3, r4
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	371c      	adds	r7, #28
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd90      	pop	{r4, r7, pc}

0800dbe4 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7isEmptyEv>:
	[[nodiscard]] inline bool isEmpty(){
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
		return xMessageBufferIsEmpty(m_messageBuffer) == pdTRUE;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f00b fd3e 	bl	8019672 <xStreamBufferIsEmpty>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	bf0c      	ite	eq
 800dbfc:	2301      	moveq	r3, #1
 800dbfe:	2300      	movne	r3, #0
 800dc00:	b2db      	uxtb	r3, r3
	}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af02      	add	r7, sp, #8
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	2300      	movs	r3, #0
 800dc34:	2201      	movs	r2, #1
 800dc36:	f240 11df 	movw	r1, #479	; 0x1df
 800dc3a:	f7f4 fd33 	bl	80026a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800dc42:	f240 12df 	movw	r2, #479	; 0x1df
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d000      	beq.n	800dc4c <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800dc4a:	e7fe      	b.n	800dc4a <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b082      	sub	sp, #8
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	6039      	str	r1, [r7, #0]
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	331c      	adds	r3, #28
 800dc66:	461a      	mov	r2, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff ffd9 	bl	800dc20 <_ZN3can7MessageINS_8messages19PDU_RX_Control_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7isEmptyEv>:
	[[nodiscard]] inline bool isEmpty(){
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
		return xMessageBufferIsEmpty(m_messageBuffer) == pdTRUE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f00b fcf4 	bl	8019672 <xStreamBufferIsEmpty>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	bf0c      	ite	eq
 800dc90:	2301      	moveq	r3, #1
 800dc92:	2300      	movne	r3, #0
 800dc94:	b2db      	uxtb	r3, r3
	}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b086      	sub	sp, #24
 800dca2:	af02      	add	r7, sp, #8
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	2203      	movs	r2, #3
 800dcb4:	f240 315a 	movw	r1, #858	; 0x35a
 800dcb8:	f7f4 fcf4 	bl	80026a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800dcc0:	f240 325a 	movw	r2, #858	; 0x35a
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d000      	beq.n	800dcca <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800dcc8:	e7fe      	b.n	800dcc8 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	331c      	adds	r3, #28
 800dce4:	461a      	mov	r2, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff ffd9 	bl	800dc9e <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7isEmptyEv>:
	[[nodiscard]] inline bool isEmpty(){
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b082      	sub	sp, #8
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
		return xMessageBufferIsEmpty(m_messageBuffer) == pdTRUE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f00b fcb5 	bl	8019672 <xStreamBufferIsEmpty>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	bf0c      	ite	eq
 800dd0e:	2301      	moveq	r3, #1
 800dd10:	2300      	movne	r3, #0
 800dd12:	b2db      	uxtb	r3, r3
	}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	2206      	movs	r2, #6
 800dd32:	f240 215b 	movw	r1, #603	; 0x25b
 800dd36:	f7f4 fcb5 	bl	80026a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800dd3e:	f240 225b 	movw	r2, #603	; 0x25b
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d000      	beq.n	800dd48 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800dd46:	e7fe      	b.n	800dd46 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b082      	sub	sp, #8
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	331c      	adds	r3, #28
 800dd62:	461a      	mov	r2, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff ffd9 	bl	800dd1c <_ZN3can7MessageINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7isEmptyEv>:
	[[nodiscard]] inline bool isEmpty(){
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
		return xMessageBufferIsEmpty(m_messageBuffer) == pdTRUE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f00b fc76 	bl	8019672 <xStreamBufferIsEmpty>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	bf0c      	ite	eq
 800dd8c:	2301      	moveq	r3, #1
 800dd8e:	2300      	movne	r3, #0
 800dd90:	b2db      	uxtb	r3, r3
	}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b086      	sub	sp, #24
 800dd9e:	af02      	add	r7, sp, #8
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	607a      	str	r2, [r7, #4]
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	2300      	movs	r3, #0
 800ddae:	2206      	movs	r2, #6
 800ddb0:	f240 21db 	movw	r1, #731	; 0x2db
 800ddb4:	f7f4 fc76 	bl	80026a4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800ddbc:	f240 22db 	movw	r2, #731	; 0x2db
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d000      	beq.n	800ddc6 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800ddc4:	e7fe      	b.n	800ddc4 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	331c      	adds	r3, #28
 800dde0:	461a      	mov	r2, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff ffd9 	bl	800dd9a <_ZN3can7MessageINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4618      	mov	r0, r3
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800ddf2:	b480      	push	{r7}
 800ddf4:	b083      	sub	sp, #12
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
	  { return true; }
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4618      	mov	r0, r3
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800de1e:	b590      	push	{r4, r7, lr}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800de28:	6838      	ldr	r0, [r7, #0]
 800de2a:	f7ff ffed 	bl	800de08 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800de2e:	4603      	mov	r3, r0
 800de30:	4622      	mov	r2, r4
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 f94c 	bl	800e0d2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd90      	pop	{r4, r7, pc}

0800de42 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800de42:	b590      	push	{r4, r7, lr}
 800de44:	b083      	sub	sp, #12
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f959 	bl	800e104 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800de52:	4604      	mov	r4, r0
 800de54:	6838      	ldr	r0, [r7, #0]
 800de56:	f7f3 fcee 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800de5a:	4603      	mov	r3, r0
 800de5c:	4619      	mov	r1, r3
 800de5e:	4620      	mov	r0, r4
 800de60:	f000 f961 	bl	800e126 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 800de64:	bf00      	nop
      }
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd90      	pop	{r4, r7, pc}

0800de6c <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800de6c:	b590      	push	{r4, r7, lr}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	4613      	mov	r3, r2
 800de78:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d109      	bne.n	800de94 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 f966 	bl	800e152 <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
 800de86:	4604      	mov	r4, r0
 800de88:	68b8      	ldr	r0, [r7, #8]
 800de8a:	f000 f93b 	bl	800e104 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800de8e:	4603      	mov	r3, r0
 800de90:	6023      	str	r3, [r4, #0]
	    break;
 800de92:	e005      	b.n	800dea0 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages19PDU_RX_Control_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800de94:	79fb      	ldrb	r3, [r7, #7]
 800de96:	461a      	mov	r2, r3
 800de98:	68b9      	ldr	r1, [r7, #8]
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f000 f965 	bl	800e16a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 800dea0:	2300      	movs	r3, #0
      }
 800dea2:	4618      	mov	r0, r3
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd90      	pop	{r4, r7, pc}

0800deaa <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800deaa:	b480      	push	{r7}
 800deac:	b083      	sub	sp, #12
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
	  { return true; }
 800deb2:	2301      	movs	r3, #1
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4618      	mov	r0, r3
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800ded6:	b590      	push	{r4, r7, lr}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800dee0:	6838      	ldr	r0, [r7, #0]
 800dee2:	f7ff ffed 	bl	800dec0 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4622      	mov	r2, r4
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f967 	bl	800e1c0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>
 800def2:	bf00      	nop
 800def4:	370c      	adds	r7, #12
 800def6:	46bd      	mov	sp, r7
 800def8:	bd90      	pop	{r4, r7, pc}

0800defa <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800defa:	b590      	push	{r4, r7, lr}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f974 	bl	800e1f2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800df0a:	4604      	mov	r4, r0
 800df0c:	6838      	ldr	r0, [r7, #0]
 800df0e:	f7f3 fc92 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800df12:	4603      	mov	r3, r0
 800df14:	4619      	mov	r1, r3
 800df16:	4620      	mov	r0, r4
 800df18:	f000 f97c 	bl	800e214 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 800df1c:	bf00      	nop
      }
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	bd90      	pop	{r4, r7, pc}

0800df24 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800df24:	b590      	push	{r4, r7, lr}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4613      	mov	r3, r2
 800df30:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d109      	bne.n	800df4c <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 f981 	bl	800e240 <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
 800df3e:	4604      	mov	r4, r0
 800df40:	68b8      	ldr	r0, [r7, #8]
 800df42:	f000 f956 	bl	800e1f2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800df46:	4603      	mov	r3, r0
 800df48:	6023      	str	r3, [r4, #0]
	    break;
 800df4a:	e005      	b.n	800df58 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	461a      	mov	r2, r3
 800df50:	68b9      	ldr	r1, [r7, #8]
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f000 f980 	bl	800e258 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 800df58:	2300      	movs	r3, #0
      }
 800df5a:	4618      	mov	r0, r3
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd90      	pop	{r4, r7, pc}

0800df62 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800df62:	b480      	push	{r7}
 800df64:	b083      	sub	sp, #12
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
	  { return true; }
 800df6a:	2301      	movs	r3, #1
 800df6c:	4618      	mov	r0, r3
 800df6e:	370c      	adds	r7, #12
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800df8e:	b590      	push	{r4, r7, lr}
 800df90:	b083      	sub	sp, #12
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800df98:	6838      	ldr	r0, [r7, #0]
 800df9a:	f7ff ffed 	bl	800df78 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 f982 	bl	800e2ae <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>
 800dfaa:	bf00      	nop
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd90      	pop	{r4, r7, pc}

0800dfb2 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800dfb2:	b590      	push	{r4, r7, lr}
 800dfb4:	b083      	sub	sp, #12
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f98f 	bl	800e2e0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	6838      	ldr	r0, [r7, #0]
 800dfc6:	f7f3 fc36 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 f997 	bl	800e302 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 800dfd4:	bf00      	nop
      }
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd90      	pop	{r4, r7, pc}

0800dfdc <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d109      	bne.n	800e004 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 f99c 	bl	800e32e <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
 800dff6:	4604      	mov	r4, r0
 800dff8:	68b8      	ldr	r0, [r7, #8]
 800dffa:	f000 f971 	bl	800e2e0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800dffe:	4603      	mov	r3, r0
 800e000:	6023      	str	r3, [r4, #0]
	    break;
 800e002:	e005      	b.n	800e010 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	461a      	mov	r2, r3
 800e008:	68b9      	ldr	r1, [r7, #8]
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 f99b 	bl	800e346 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 800e010:	2300      	movs	r3, #0
      }
 800e012:	4618      	mov	r0, r3
 800e014:	3714      	adds	r7, #20
 800e016:	46bd      	mov	sp, r7
 800e018:	bd90      	pop	{r4, r7, pc}

0800e01a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800e01a:	b480      	push	{r7}
 800e01c:	b083      	sub	sp, #12
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
	  { return true; }
 800e022:	2301      	movs	r3, #1
 800e024:	4618      	mov	r0, r3
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4618      	mov	r0, r3
 800e03c:	370c      	adds	r7, #12
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr

0800e046 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800e046:	b590      	push	{r4, r7, lr}
 800e048:	b083      	sub	sp, #12
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800e050:	6838      	ldr	r0, [r7, #0]
 800e052:	f7ff ffed 	bl	800e030 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800e056:	4603      	mov	r3, r0
 800e058:	4622      	mov	r2, r4
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 f99d 	bl	800e39c <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>
 800e062:	bf00      	nop
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	bd90      	pop	{r4, r7, pc}

0800e06a <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800e06a:	b590      	push	{r4, r7, lr}
 800e06c:	b083      	sub	sp, #12
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
 800e072:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f9aa 	bl	800e3ce <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e07a:	4604      	mov	r4, r0
 800e07c:	6838      	ldr	r0, [r7, #0]
 800e07e:	f7f3 fbda 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e082:	4603      	mov	r3, r0
 800e084:	4619      	mov	r1, r3
 800e086:	4620      	mov	r0, r4
 800e088:	f000 f9b2 	bl	800e3f0 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 800e08c:	bf00      	nop
      }
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	bd90      	pop	{r4, r7, pc}

0800e094 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800e094:	b590      	push	{r4, r7, lr}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d109      	bne.n	800e0bc <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f000 f9b7 	bl	800e41c <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERT_v>
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	68b8      	ldr	r0, [r7, #8]
 800e0b2:	f000 f98c 	bl	800e3ce <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	6023      	str	r3, [r4, #0]
	    break;
 800e0ba:	e005      	b.n	800e0c8 <_ZNSt17_Function_handlerIFvR9RxMessageEZN3can14RxMessageQueueINS3_8messages21PDU_RX_Manual_ControlEE6enableEvEUlS1_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800e0bc:	79fb      	ldrb	r3, [r7, #7]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	68b9      	ldr	r1, [r7, #8]
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 f9b6 	bl	800e434 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 800e0c8:	2300      	movs	r3, #0
      }
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}

0800e0d2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800e0d2:	b590      	push	{r4, r7, lr}
 800e0d4:	b085      	sub	sp, #20
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	60b9      	str	r1, [r7, #8]
 800e0dc:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800e0de:	68b8      	ldr	r0, [r7, #8]
 800e0e0:	f7ff fe92 	bl	800de08 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f7f9 fc1c 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	2004      	movs	r0, #4
 800e0f2:	f7f9 fc0b 	bl	800790c <_ZnwjPv>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	6823      	ldr	r3, [r4, #0]
 800e0fa:	6013      	str	r3, [r2, #0]
 800e0fc:	bf00      	nop
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	bd90      	pop	{r4, r7, pc}

0800e104 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f9bc 	bl	800e48a <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e112:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f000 f9c4 	bl	800e4a2 <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EPT_RS9_>
 800e11a:	4603      	mov	r3, r0
 800e11c:	bf00      	nop
	}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e126:	b5b0      	push	{r4, r5, r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 f9c1 	bl	800e4b8 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e136:	4604      	mov	r4, r0
 800e138:	6838      	ldr	r0, [r7, #0]
 800e13a:	f7f3 fb7c 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e13e:	4603      	mov	r3, r0
 800e140:	461a      	mov	r2, r3
 800e142:	4621      	mov	r1, r4
 800e144:	4628      	mov	r0, r5
 800e146:	f000 f9c2 	bl	800e4ce <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800e14a:	bf00      	nop
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bdb0      	pop	{r4, r5, r7, pc}

0800e152 <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e152:	b580      	push	{r7, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7f9 fbe2 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e160:	4603      	mov	r3, r0
 800e162:	4618      	mov	r0, r3
 800e164:	3708      	adds	r7, #8
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e16a:	b5b0      	push	{r4, r5, r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	60f8      	str	r0, [r7, #12]
 800e172:	60b9      	str	r1, [r7, #8]
 800e174:	4613      	mov	r3, r2
 800e176:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d016      	beq.n	800e1ac <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
 800e17e:	2b03      	cmp	r3, #3
 800e180:	dc19      	bgt.n	800e1b6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
 800e182:	2b01      	cmp	r3, #1
 800e184:	d002      	beq.n	800e18c <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 800e186:	2b02      	cmp	r3, #2
 800e188:	d00a      	beq.n	800e1a0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x36>
 800e18a:	e014      	b.n	800e1b6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7ff ffe0 	bl	800e152 <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
 800e192:	4604      	mov	r4, r0
 800e194:	68b8      	ldr	r0, [r7, #8]
 800e196:	f7ff ffb5 	bl	800e104 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e19a:	4603      	mov	r3, r0
 800e19c:	6023      	str	r3, [r4, #0]
	      break;
 800e19e:	e00a      	b.n	800e1b6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800e1a0:	462a      	mov	r2, r5
 800e1a2:	68b9      	ldr	r1, [r7, #8]
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 f9a8 	bl	800e4fa <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>
	      break;
 800e1aa:	e004      	b.n	800e1b6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f000 f9bc 	bl	800e52c <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e1b4:	bf00      	nop
	  return false;
 800e1b6:	2300      	movs	r3, #0
	}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bdb0      	pop	{r4, r5, r7, pc}

0800e1c0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800e1c0:	b590      	push	{r4, r7, lr}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800e1cc:	68b8      	ldr	r0, [r7, #8]
 800e1ce:	f7ff fe77 	bl	800dec0 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f7f9 fba5 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4619      	mov	r1, r3
 800e1de:	2004      	movs	r0, #4
 800e1e0:	f7f9 fb94 	bl	800790c <_ZnwjPv>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	6823      	ldr	r3, [r4, #0]
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	bf00      	nop
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd90      	pop	{r4, r7, pc}

0800e1f2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b084      	sub	sp, #16
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f9a2 	bl	800e544 <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e200:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f000 f9aa 	bl	800e55c <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EPT_RS9_>
 800e208:	4603      	mov	r3, r0
 800e20a:	bf00      	nop
	}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e214:	b5b0      	push	{r4, r5, r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f9a7 	bl	800e572 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e224:	4604      	mov	r4, r0
 800e226:	6838      	ldr	r0, [r7, #0]
 800e228:	f7f3 fb05 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e22c:	4603      	mov	r3, r0
 800e22e:	461a      	mov	r2, r3
 800e230:	4621      	mov	r1, r4
 800e232:	4628      	mov	r0, r5
 800e234:	f000 f9a8 	bl	800e588 <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800e238:	bf00      	nop
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bdb0      	pop	{r4, r5, r7, pc}

0800e240 <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7f9 fb6b 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e24e:	4603      	mov	r3, r0
 800e250:	4618      	mov	r0, r3
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e258:	b5b0      	push	{r4, r5, r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	4613      	mov	r3, r2
 800e264:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e266:	79fb      	ldrb	r3, [r7, #7]
 800e268:	2b03      	cmp	r3, #3
 800e26a:	d016      	beq.n	800e29a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	dc19      	bgt.n	800e2a4 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
 800e270:	2b01      	cmp	r3, #1
 800e272:	d002      	beq.n	800e27a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 800e274:	2b02      	cmp	r3, #2
 800e276:	d00a      	beq.n	800e28e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x36>
 800e278:	e014      	b.n	800e2a4 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7ff ffe0 	bl	800e240 <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
 800e280:	4604      	mov	r4, r0
 800e282:	68b8      	ldr	r0, [r7, #8]
 800e284:	f7ff ffb5 	bl	800e1f2 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e288:	4603      	mov	r3, r0
 800e28a:	6023      	str	r3, [r4, #0]
	      break;
 800e28c:	e00a      	b.n	800e2a4 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800e28e:	462a      	mov	r2, r5
 800e290:	68b9      	ldr	r1, [r7, #8]
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f000 f98e 	bl	800e5b4 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>
	      break;
 800e298:	e004      	b.n	800e2a4 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800e29a:	4621      	mov	r1, r4
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f000 f9a2 	bl	800e5e6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e2a2:	bf00      	nop
	  return false;
 800e2a4:	2300      	movs	r3, #0
	}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bdb0      	pop	{r4, r5, r7, pc}

0800e2ae <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800e2ae:	b590      	push	{r4, r7, lr}
 800e2b0:	b085      	sub	sp, #20
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	60f8      	str	r0, [r7, #12]
 800e2b6:	60b9      	str	r1, [r7, #8]
 800e2b8:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800e2ba:	68b8      	ldr	r0, [r7, #8]
 800e2bc:	f7ff fe5c 	bl	800df78 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f7f9 fb2e 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	2004      	movs	r0, #4
 800e2ce:	f7f9 fb1d 	bl	800790c <_ZnwjPv>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	bf00      	nop
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd90      	pop	{r4, r7, pc}

0800e2e0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 f988 	bl	800e5fe <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e2ee:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f000 f990 	bl	800e616 <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EPT_RS9_>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	bf00      	nop
	}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e302:	b5b0      	push	{r4, r5, r7, lr}
 800e304:	b082      	sub	sp, #8
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 f98d 	bl	800e62c <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e312:	4604      	mov	r4, r0
 800e314:	6838      	ldr	r0, [r7, #0]
 800e316:	f7f3 fa8e 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e31a:	4603      	mov	r3, r0
 800e31c:	461a      	mov	r2, r3
 800e31e:	4621      	mov	r1, r4
 800e320:	4628      	mov	r0, r5
 800e322:	f000 f98e 	bl	800e642 <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bdb0      	pop	{r4, r5, r7, pc}

0800e32e <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7f9 faf4 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e33c:	4603      	mov	r3, r0
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e346:	b5b0      	push	{r4, r5, r7, lr}
 800e348:	b084      	sub	sp, #16
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	60f8      	str	r0, [r7, #12]
 800e34e:	60b9      	str	r1, [r7, #8]
 800e350:	4613      	mov	r3, r2
 800e352:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	2b03      	cmp	r3, #3
 800e358:	d016      	beq.n	800e388 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	dc19      	bgt.n	800e392 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d002      	beq.n	800e368 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 800e362:	2b02      	cmp	r3, #2
 800e364:	d00a      	beq.n	800e37c <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x36>
 800e366:	e014      	b.n	800e392 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7ff ffe0 	bl	800e32e <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
 800e36e:	4604      	mov	r4, r0
 800e370:	68b8      	ldr	r0, [r7, #8]
 800e372:	f7ff ffb5 	bl	800e2e0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e376:	4603      	mov	r3, r0
 800e378:	6023      	str	r3, [r4, #0]
	      break;
 800e37a:	e00a      	b.n	800e392 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800e37c:	462a      	mov	r2, r5
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f974 	bl	800e66e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>
	      break;
 800e386:	e004      	b.n	800e392 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800e388:	4621      	mov	r1, r4
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f000 f988 	bl	800e6a0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e390:	bf00      	nop
	  return false;
 800e392:	2300      	movs	r3, #0
	}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bdb0      	pop	{r4, r5, r7, pc}

0800e39c <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800e39c:	b590      	push	{r4, r7, lr}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800e3a8:	68b8      	ldr	r0, [r7, #8]
 800e3aa:	f7ff fe41 	bl	800e030 <_ZSt4moveIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOSA_>
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f7f9 fab7 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	2004      	movs	r0, #4
 800e3bc:	f7f9 faa6 	bl	800790c <_ZnwjPv>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	6013      	str	r3, [r2, #0]
 800e3c6:	bf00      	nop
 800e3c8:	3714      	adds	r7, #20
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd90      	pop	{r4, r7, pc}

0800e3ce <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f96e 	bl	800e6b8 <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e3dc:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 f976 	bl	800e6d0 <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EPT_RS9_>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	bf00      	nop
	}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <_ZSt10__invoke_rIvRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_JS6_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e3f0:	b5b0      	push	{r4, r5, r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f973 	bl	800e6e6 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e400:	4604      	mov	r4, r0
 800e402:	6838      	ldr	r0, [r7, #0]
 800e404:	f7f3 fa17 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e408:	4603      	mov	r3, r0
 800e40a:	461a      	mov	r2, r3
 800e40c:	4621      	mov	r1, r4
 800e40e:	4628      	mov	r0, r5
 800e410:	f000 f974 	bl	800e6fc <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800e414:	bf00      	nop
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bdb0      	pop	{r4, r5, r7, pc}

0800e41c <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7f9 fa7d 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e42a:	4603      	mov	r3, r0
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e434:	b5b0      	push	{r4, r5, r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	4613      	mov	r3, r2
 800e440:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	2b03      	cmp	r3, #3
 800e446:	d016      	beq.n	800e476 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
 800e448:	2b03      	cmp	r3, #3
 800e44a:	dc19      	bgt.n	800e480 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d002      	beq.n	800e456 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 800e450:	2b02      	cmp	r3, #2
 800e452:	d00a      	beq.n	800e46a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x36>
 800e454:	e014      	b.n	800e480 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f7ff ffe0 	bl	800e41c <_ZNSt9_Any_data9_M_accessIPZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERT_v>
 800e45c:	4604      	mov	r4, r0
 800e45e:	68b8      	ldr	r0, [r7, #8]
 800e460:	f7ff ffb5 	bl	800e3ce <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e464:	4603      	mov	r3, r0
 800e466:	6023      	str	r3, [r4, #0]
	      break;
 800e468:	e00a      	b.n	800e480 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800e46a:	462a      	mov	r2, r5
 800e46c:	68b9      	ldr	r1, [r7, #8]
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f000 f95a 	bl	800e728 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>
	      break;
 800e474:	e004      	b.n	800e480 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800e476:	4621      	mov	r1, r4
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f000 f96e 	bl	800e75a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e47e:	bf00      	nop
	  return false;
 800e480:	2300      	movs	r3, #0
	}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bdb0      	pop	{r4, r5, r7, pc}

0800e48a <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b082      	sub	sp, #8
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7f9 fa51 	bl	800793a <_ZNKSt9_Any_data9_M_accessEv>
 800e498:	4603      	mov	r3, r0
 800e49a:	4618      	mov	r0, r3
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e4a2:	b480      	push	{r7}
 800e4a4:	b083      	sub	sp, #12
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	370c      	adds	r7, #12
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e4ce:	b590      	push	{r4, r7, lr}
 800e4d0:	b085      	sub	sp, #20
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	7338      	strb	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e4da:	68b8      	ldr	r0, [r7, #8]
 800e4dc:	f7ff ffec 	bl	800e4b8 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7f3 f9a7 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f7fe f9a8 	bl	800c842 <_ZZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE6enableEvENKUlR9RxMessageE_clES5_>
 800e4f2:	bf00      	nop
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd90      	pop	{r4, r7, pc}

0800e4fa <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800e4fa:	b590      	push	{r4, r7, lr}
 800e4fc:	b085      	sub	sp, #20
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	60f8      	str	r0, [r7, #12]
 800e502:	60b9      	str	r1, [r7, #8]
 800e504:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800e506:	68b8      	ldr	r0, [r7, #8]
 800e508:	f7ff ffbf 	bl	800e48a <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e50c:	4604      	mov	r4, r0
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7f9 fa08 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e514:	4603      	mov	r3, r0
 800e516:	4619      	mov	r1, r3
 800e518:	2004      	movs	r0, #4
 800e51a:	f7f9 f9f7 	bl	800790c <_ZnwjPv>
 800e51e:	4602      	mov	r2, r0
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	6013      	str	r3, [r2, #0]
	}
 800e524:	bf00      	nop
 800e526:	3714      	adds	r7, #20
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd90      	pop	{r4, r7, pc}

0800e52c <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 f91b 	bl	800e772 <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
	}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7f9 f9f4 	bl	800793a <_ZNKSt9_Any_data9_M_accessEv>
 800e552:	4603      	mov	r3, r0
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4618      	mov	r0, r3
 800e568:	370c      	adds	r7, #12
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e572:	b480      	push	{r7}
 800e574:	b083      	sub	sp, #12
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e588:	b590      	push	{r4, r7, lr}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	7338      	strb	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e594:	68b8      	ldr	r0, [r7, #8]
 800e596:	f7ff ffec 	bl	800e572 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e59a:	4604      	mov	r4, r0
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7f3 f94a 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f7fe f97b 	bl	800c8a2 <_ZZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvENKUlR9RxMessageE_clES5_>
 800e5ac:	bf00      	nop
 800e5ae:	3714      	adds	r7, #20
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd90      	pop	{r4, r7, pc}

0800e5b4 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800e5c0:	68b8      	ldr	r0, [r7, #8]
 800e5c2:	f7ff ffbf 	bl	800e544 <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f7f9 f9ab 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	2004      	movs	r0, #4
 800e5d4:	f7f9 f99a 	bl	800790c <_ZnwjPv>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	6823      	ldr	r3, [r4, #0]
 800e5dc:	6013      	str	r3, [r2, #0]
	}
 800e5de:	bf00      	nop
 800e5e0:	3714      	adds	r7, #20
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd90      	pop	{r4, r7, pc}

0800e5e6 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b082      	sub	sp, #8
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 f8ca 	bl	800e78a <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
	}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7f9 f997 	bl	800793a <_ZNKSt9_Any_data9_M_accessEv>
 800e60c:	4603      	mov	r3, r0
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e616:	b480      	push	{r7}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4618      	mov	r0, r3
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4618      	mov	r0, r3
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e642:	b590      	push	{r4, r7, lr}
 800e644:	b085      	sub	sp, #20
 800e646:	af00      	add	r7, sp, #0
 800e648:	7338      	strb	r0, [r7, #12]
 800e64a:	60b9      	str	r1, [r7, #8]
 800e64c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e64e:	68b8      	ldr	r0, [r7, #8]
 800e650:	f7ff ffec 	bl	800e62c <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e654:	4604      	mov	r4, r0
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7f3 f8ed 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e65c:	4603      	mov	r3, r0
 800e65e:	4619      	mov	r1, r3
 800e660:	4620      	mov	r0, r4
 800e662:	f7fe f94e 	bl	800c902 <_ZZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvENKUlR9RxMessageE_clES5_>
 800e666:	bf00      	nop
 800e668:	3714      	adds	r7, #20
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd90      	pop	{r4, r7, pc}

0800e66e <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800e66e:	b590      	push	{r4, r7, lr}
 800e670:	b085      	sub	sp, #20
 800e672:	af00      	add	r7, sp, #0
 800e674:	60f8      	str	r0, [r7, #12]
 800e676:	60b9      	str	r1, [r7, #8]
 800e678:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800e67a:	68b8      	ldr	r0, [r7, #8]
 800e67c:	f7ff ffbf 	bl	800e5fe <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e680:	4604      	mov	r4, r0
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f7f9 f94e 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e688:	4603      	mov	r3, r0
 800e68a:	4619      	mov	r1, r3
 800e68c:	2004      	movs	r0, #4
 800e68e:	f7f9 f93d 	bl	800790c <_ZnwjPv>
 800e692:	4602      	mov	r2, r0
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	6013      	str	r3, [r2, #0]
	}
 800e698:	bf00      	nop
 800e69a:	3714      	adds	r7, #20
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd90      	pop	{r4, r7, pc}

0800e6a0 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f879 	bl	800e7a2 <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>
	}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7f9 f93a 	bl	800793a <_ZNKSt9_Any_data9_M_accessEv>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <_ZSt11__addressofIKZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e6e6:	b480      	push	{r7}
 800e6e8:	b083      	sub	sp, #12
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <_ZSt13__invoke_implIvRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_JS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e6fc:	b590      	push	{r4, r7, lr}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	7338      	strb	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e708:	68b8      	ldr	r0, [r7, #8]
 800e70a:	f7ff ffec 	bl	800e6e6 <_ZSt7forwardIRZN3can14RxMessageQueueINS0_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800e70e:	4604      	mov	r4, r0
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7f3 f890 	bl	8001836 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e716:	4603      	mov	r3, r0
 800e718:	4619      	mov	r1, r3
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7fe f921 	bl	800c962 <_ZZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE6enableEvENKUlR9RxMessageE_clES5_>
 800e720:	bf00      	nop
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	bd90      	pop	{r4, r7, pc}

0800e728 <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800e728:	b590      	push	{r4, r7, lr}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800e734:	68b8      	ldr	r0, [r7, #8]
 800e736:	f7ff ffbf 	bl	800e6b8 <_ZNKSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERKT_v>
 800e73a:	4604      	mov	r4, r0
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f7f9 f8f1 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e742:	4603      	mov	r3, r0
 800e744:	4619      	mov	r1, r3
 800e746:	2004      	movs	r0, #4
 800e748:	f7f9 f8e0 	bl	800790c <_ZnwjPv>
 800e74c:	4602      	mov	r2, r0
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	6013      	str	r3, [r2, #0]
	}
 800e752:	bf00      	nop
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	bd90      	pop	{r4, r7, pc}

0800e75a <_ZNSt14_Function_base13_Base_managerIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f828 	bl	800e7ba <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERT_v>
	}
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages19PDU_RX_Control_NoODEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e772:	b580      	push	{r7, lr}
 800e774:	b082      	sub	sp, #8
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7f9 f8d2 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e780:	4603      	mov	r3, r0
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages24PDU_RX_LP_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b082      	sub	sp, #8
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7f9 f8c6 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e798:	4603      	mov	r3, r0
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages26PDU_RX_HP_D_Dutycycle_NoODEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7f9 f8ba 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <_ZNSt9_Any_data9_M_accessIZN3can14RxMessageQueueINS1_8messages21PDU_RX_Manual_ControlEE6enableEvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b082      	sub	sp, #8
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7f9 f8ae 	bl	8007924 <_ZNSt9_Any_data9_M_accessEv>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <_Z41__static_initialization_and_destruction_0ii>:

#ifdef __cplusplus
}
 800e7d4:	b5b0      	push	{r4, r5, r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d130      	bne.n	800e846 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d12b      	bne.n	800e846 <_Z41__static_initialization_and_destruction_0ii+0x72>
AdcChannelController lpChannelAdc[10];
 800e7ee:	4b22      	ldr	r3, [pc, #136]	; (800e878 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800e7f0:	2409      	movs	r4, #9
 800e7f2:	461d      	mov	r5, r3
 800e7f4:	2c00      	cmp	r4, #0
 800e7f6:	db05      	blt.n	800e804 <_Z41__static_initialization_and_destruction_0ii+0x30>
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	f7fb fc63 	bl	800a0c4 <_ZN20AdcChannelControllerC1Ev>
 800e7fe:	3508      	adds	r5, #8
 800e800:	3c01      	subs	r4, #1
 800e802:	e7f7      	b.n	800e7f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
AdcChannelController hpChannelAdc[4];
 800e804:	4b1d      	ldr	r3, [pc, #116]	; (800e87c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800e806:	2403      	movs	r4, #3
 800e808:	461d      	mov	r5, r3
 800e80a:	2c00      	cmp	r4, #0
 800e80c:	db05      	blt.n	800e81a <_Z41__static_initialization_and_destruction_0ii+0x46>
 800e80e:	4628      	mov	r0, r5
 800e810:	f7fb fc58 	bl	800a0c4 <_ZN20AdcChannelControllerC1Ev>
 800e814:	3508      	adds	r5, #8
 800e816:	3c01      	subs	r4, #1
 800e818:	e7f7      	b.n	800e80a <_Z41__static_initialization_and_destruction_0ii+0x36>
can::RxMessageQueue<can::messages::PDU_RX_Control_NoOD> g_rxControllQueue;
 800e81a:	4819      	ldr	r0, [pc, #100]	; (800e880 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800e81c:	f7fe ff4f 	bl	800d6be <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEEC1Ev>
can::RxMessageQueue<can::messages::PDU_RX_Manual_Control> g_manualControllQueue;
 800e820:	4818      	ldr	r0, [pc, #96]	; (800e884 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800e822:	f7fe ff61 	bl	800d6e8 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEEC1Ev>
can::RxMessageQueue<can::messages::PDU_RX_HP_D_Dutycycle_NoOD> g_hpDutycycleQueue;
 800e826:	4818      	ldr	r0, [pc, #96]	; (800e888 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800e828:	f7fe ff73 	bl	800d712 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEEC1Ev>
can::RxMessageQueue<can::messages::PDU_RX_LP_Dutycycle_NoOD> g_lpDutycycleQueue;
 800e82c:	4817      	ldr	r0, [pc, #92]	; (800e88c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800e82e:	f7fe ff85 	bl	800d73c <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEEC1Ev>
Watchdog stateMachineWatchdog(OD_watchdogTimeout_get());
 800e832:	f7f8 f815 	bl	8006860 <_Z22OD_watchdogTimeout_getv>
 800e836:	4603      	mov	r3, r0
 800e838:	4619      	mov	r1, r3
 800e83a:	4815      	ldr	r0, [pc, #84]	; (800e890 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800e83c:	f7f9 fd4d 	bl	80082da <_ZN8WatchdogC1Em>
PduOutputState outputState;
 800e840:	4814      	ldr	r0, [pc, #80]	; (800e894 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800e842:	f7fb fddf 	bl	800a404 <_ZN14PduOutputStateC1Ev>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d110      	bne.n	800e86e <_Z41__static_initialization_and_destruction_0ii+0x9a>
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e852:	4293      	cmp	r3, r2
 800e854:	d10b      	bne.n	800e86e <_Z41__static_initialization_and_destruction_0ii+0x9a>
can::RxMessageQueue<can::messages::PDU_RX_LP_Dutycycle_NoOD> g_lpDutycycleQueue;
 800e856:	480d      	ldr	r0, [pc, #52]	; (800e88c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800e858:	f000 f81e 	bl	800e898 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEED1Ev>
can::RxMessageQueue<can::messages::PDU_RX_HP_D_Dutycycle_NoOD> g_hpDutycycleQueue;
 800e85c:	480a      	ldr	r0, [pc, #40]	; (800e888 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800e85e:	f000 f827 	bl	800e8b0 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEED1Ev>
can::RxMessageQueue<can::messages::PDU_RX_Manual_Control> g_manualControllQueue;
 800e862:	4808      	ldr	r0, [pc, #32]	; (800e884 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800e864:	f000 f830 	bl	800e8c8 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEED1Ev>
can::RxMessageQueue<can::messages::PDU_RX_Control_NoOD> g_rxControllQueue;
 800e868:	4805      	ldr	r0, [pc, #20]	; (800e880 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800e86a:	f000 f839 	bl	800e8e0 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEED1Ev>
 800e86e:	bf00      	nop
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bdb0      	pop	{r4, r5, r7, pc}
 800e876:	bf00      	nop
 800e878:	20000a48 	.word	0x20000a48
 800e87c:	20000a98 	.word	0x20000a98
 800e880:	20000b04 	.word	0x20000b04
 800e884:	20000b0c 	.word	0x20000b0c
 800e888:	20000b14 	.word	0x20000b14
 800e88c:	20000b1c 	.word	0x20000b1c
 800e890:	20000b24 	.word	0x20000b24
 800e894:	20000b30 	.word	0x20000b30

0800e898 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEED1Ev>:
	~RxMessageQueue() {
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
		disable();
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f829 	bl	800e8f8 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7disableEv>
	}
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEED1Ev>:
	~RxMessageQueue() {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
		disable();
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 f82f 	bl	800e91c <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7disableEv>
	}
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEED1Ev>:
	~RxMessageQueue() {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
		disable();
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 f835 	bl	800e940 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7disableEv>
	}
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEED1Ev>:
	~RxMessageQueue() {
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
		disable();
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f83b 	bl	800e964 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7disableEv>
	}
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7disableEv>:
	void disable(){
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e908:	d004      	beq.n	800e914 <_ZN3can14RxMessageQueueINS_8messages24PDU_RX_LP_Dutycycle_NoODEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	f7f2 febc 	bl	800168c <_ZN3can25unregisterMessageReceiverEj>
	}
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7disableEv>:
	void disable(){
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92c:	d004      	beq.n	800e938 <_ZN3can14RxMessageQueueINS_8messages26PDU_RX_HP_D_Dutycycle_NoODEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	4618      	mov	r0, r3
 800e934:	f7f2 feaa 	bl	800168c <_ZN3can25unregisterMessageReceiverEj>
	}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7disableEv>:
	void disable(){
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e950:	d004      	beq.n	800e95c <_ZN3can14RxMessageQueueINS_8messages21PDU_RX_Manual_ControlEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	4618      	mov	r0, r3
 800e958:	f7f2 fe98 	bl	800168c <_ZN3can25unregisterMessageReceiverEj>
	}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7disableEv>:
	void disable(){
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e974:	d004      	beq.n	800e980 <_ZN3can14RxMessageQueueINS_8messages19PDU_RX_Control_NoODEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f2 fe86 	bl	800168c <_ZN3can25unregisterMessageReceiverEj>
	}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <_GLOBAL__sub_I_lpChannelAdc>:
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e990:	2001      	movs	r0, #1
 800e992:	f7ff ff1f 	bl	800e7d4 <_Z41__static_initialization_and_destruction_0ii>
 800e996:	bd80      	pop	{r7, pc}

0800e998 <_GLOBAL__sub_D_lpChannelAdc>:
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	f7ff ff17 	bl	800e7d4 <_Z41__static_initialization_and_destruction_0ii>
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	b5b0      	push	{r4, r5, r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	f107 001c 	add.w	r0, r7, #28
 800e9b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800e9be:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7f9 f9c0 	bl	8007d46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	3308      	adds	r3, #8
 800e9ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 800e9cc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f9 f9b9 	bl	8007d46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3310      	adds	r3, #16
 800e9d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 800e9da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f9 f9b1 	bl	8007d46 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f103 0418 	add.w	r4, r3, #24
 800e9ea:	f107 051c 	add.w	r5, r7, #28
 800e9ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e9fe:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4618      	mov	r0, r3
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ea0e:	b004      	add	sp, #16
 800ea10:	4770      	bx	lr
	...

0800ea14 <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7f9 f9ab 	bl	8007d7a <_ZN20AdcChannelController3getEv>
 800ea24:	4603      	mov	r3, r0
 800ea26:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 800ea28:	89fb      	ldrh	r3, [r7, #14]
 800ea2a:	ee07 3a90 	vmov	s15, r3
 800ea2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea32:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ea70 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 800ea36:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ea3a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ea74 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 800ea3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea42:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800ea78 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 800ea46:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ea4a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800ea7c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 800ea4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea52:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ea56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea5a:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	ee07 3a90 	vmov	s15, r3
	}
 800ea64:	eeb0 0a67 	vmov.f32	s0, s15
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	40533333 	.word	0x40533333
 800ea74:	457ff000 	.word	0x457ff000
 800ea78:	3f428f5c 	.word	0x3f428f5c
 800ea7c:	3b23d70a 	.word	0x3b23d70a

0800ea80 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7f9 f974 	bl	8007d7a <_ZN20AdcChannelController3getEv>
 800ea92:	4603      	mov	r3, r0
 800ea94:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = (1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) ))) - 273.15f;
 800ea96:	89fb      	ldrh	r3, [r7, #14]
 800ea98:	ee07 3a90 	vmov	s15, r3
 800ea9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eaa0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800eb48 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 800eaa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eab4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eab8:	ee16 0a90 	vmov	r0, s13
 800eabc:	f7f1 fd44 	bl	8000548 <__aeabi_f2d>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	ec43 2b10 	vmov	d0, r2, r3
 800eac8:	f00d f91e 	bl	801bd08 <log>
 800eacc:	ec51 0b10 	vmov	r0, r1, d0
 800ead0:	a317      	add	r3, pc, #92	; (adr r3, 800eb30 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 800ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead6:	f7f1 fd8f 	bl	80005f8 <__aeabi_dmul>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	4610      	mov	r0, r2
 800eae0:	4619      	mov	r1, r3
 800eae2:	a315      	add	r3, pc, #84	; (adr r3, 800eb38 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	f7f1 fbd0 	bl	800028c <__adddf3>
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	f04f 0000 	mov.w	r0, #0
 800eaf4:	4915      	ldr	r1, [pc, #84]	; (800eb4c <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 800eaf6:	f7f1 fea9 	bl	800084c <__aeabi_ddiv>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	4610      	mov	r0, r2
 800eb00:	4619      	mov	r1, r3
 800eb02:	a30f      	add	r3, pc, #60	; (adr r3, 800eb40 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	f7f1 fbbe 	bl	8000288 <__aeabi_dsub>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4610      	mov	r0, r2
 800eb12:	4619      	mov	r1, r3
 800eb14:	f7f2 f868 	bl	8000be8 <__aeabi_d2f>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	ee07 3a90 	vmov	s15, r3
	}
 800eb22:	eeb0 0a67 	vmov.f32	s0, s15
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	f3af 8000 	nop.w
 800eb30:	60000000 	.word	0x60000000
 800eb34:	3f3363ac 	.word	0x3f3363ac
 800eb38:	e0000000 	.word	0xe0000000
 800eb3c:	3f6b79e1 	.word	0x3f6b79e1
 800eb40:	60000000 	.word	0x60000000
 800eb44:	40711266 	.word	0x40711266
 800eb48:	457ff000 	.word	0x457ff000
 800eb4c:	3ff00000 	.word	0x3ff00000

0800eb50 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 800eb50:	b580      	push	{r7, lr}
 800eb52:	ed2d 8b02 	vpush	{d8}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff ff8f 	bl	800ea80 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 800eb62:	eeb0 8a40 	vmov.f32	s16, s0
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff ff54 	bl	800ea14 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 800eb6c:	eef0 7a40 	vmov.f32	s15, s0
 800eb70:	ee78 7a27 	vadd.f32	s15, s16, s15
 800eb74:	ee17 0a90 	vmov	r0, s15
 800eb78:	f7f1 fce6 	bl	8000548 <__aeabi_f2d>
 800eb7c:	f04f 0200 	mov.w	r2, #0
 800eb80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb84:	f7f1 fe62 	bl	800084c <__aeabi_ddiv>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	4610      	mov	r0, r2
 800eb8e:	4619      	mov	r1, r3
 800eb90:	f7f2 f82a 	bl	8000be8 <__aeabi_d2f>
 800eb94:	4603      	mov	r3, r0
 800eb96:	60fb      	str	r3, [r7, #12]
		return average;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	ee07 3a90 	vmov	s15, r3
	}
 800eb9e:	eeb0 0a67 	vmov.f32	s0, s15
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	ecbd 8b02 	vpop	{d8}
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3310      	adds	r3, #16
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f9 f8de 	bl	8007d7a <_ZN20AdcChannelController3getEv>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 800ebc2:	89fb      	ldrh	r3, [r7, #14]
 800ebc4:	ee07 3a90 	vmov	s15, r3
 800ebc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ebcc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800ec00 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 800ebd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ebd4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ec04 <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 800ebd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ebdc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800ec08 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 800ebe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ebe4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800ec0c <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 800ebe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebec:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	ee07 3a90 	vmov	s15, r3
	}
 800ebf6:	eeb0 0a67 	vmov.f32	s0, s15
 800ebfa:	3710      	adds	r7, #16
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	457ff000 	.word	0x457ff000
 800ec04:	40533333 	.word	0x40533333
 800ec08:	3dda09cc 	.word	0x3dda09cc
 800ec0c:	3f19999a 	.word	0x3f19999a

0800ec10 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff ff99 	bl	800eb50 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 800ec1e:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff ffc2 	bl	800ebac <_ZN14OnBoardSensors15getInputVoltageEv>
 800ec28:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 800ec2c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec30:	f7f7 f8fa 	bl	8005e28 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 800ec34:	ed97 0a02 	vldr	s0, [r7, #8]
 800ec38:	f7f7 f930 	bl	8005e9c <_Z19OD_InputVoltage_setf>
	}
 800ec3c:	bf00      	nop
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <_ZL18estimateFreeMemoryv>:
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"
#include "estdio.hpp"

static inline size_t estimateFreeMemory() {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 800ec48:	f00c ff40 	bl	801bacc <xPortGetFreeHeapSize>
 800ec4c:	4603      	mov	r3, r0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 800ec54:	b480      	push	{r7}
 800ec56:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 100.0;
 800ec58:	4b04      	ldr	r3, [pc, #16]	; (800ec6c <_ZL16estimateCPUusagev+0x18>)
 800ec5a:	ee07 3a90 	vmov	s15, r3
}
 800ec5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	42c80000 	.word	0x42c80000

0800ec70 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 800ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec72:	b0a7      	sub	sp, #156	; 0x9c
 800ec74:	af0c      	add	r7, sp, #48	; 0x30
 800ec76:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 800ec78:	4e18      	ldr	r6, [pc, #96]	; (800ecdc <microcontroller_info_entry+0x6c>)
 800ec7a:	f107 0c0c 	add.w	ip, r7, #12
 800ec7e:	466d      	mov	r5, sp
 800ec80:	f106 040c 	add.w	r4, r6, #12
 800ec84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec8c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ec90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ec94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ec98:	4660      	mov	r0, ip
 800ec9a:	f7ff fe85 	bl	800e9a8 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 800ec9e:	f107 030c 	add.w	r3, r7, #12
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7ff ffb4 	bl	800ec10 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 800eca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecaa:	2b14      	cmp	r3, #20
 800ecac:	d90f      	bls.n	800ecce <microcontroller_info_entry+0x5e>
			float cpuUsage = estimateCPUusage();
 800ecae:	f7ff ffd1 	bl	800ec54 <_ZL16estimateCPUusagev>
 800ecb2:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 800ecb6:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800ecba:	f7f7 f843 	bl	8005d44 <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 800ecbe:	f7ff ffc1 	bl	800ec44 <_ZL18estimateFreeMemoryv>
 800ecc2:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 800ecc4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ecc6:	f7f7 f875 	bl	8005db4 <_Z14OD_MemFree_setm>
			frameCounter = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 800ecce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 800ecd4:	2032      	movs	r0, #50	; 0x32
 800ecd6:	f008 fd03 	bl	80176e0 <osDelay>
	}
 800ecda:	e7e0      	b.n	800ec9e <microcontroller_info_entry+0x2e>
 800ecdc:	0801f208 	.word	0x0801f208

0800ece0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ece6:	463b      	mov	r3, r7
 800ece8:	2200      	movs	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	605a      	str	r2, [r3, #4]
 800ecee:	609a      	str	r2, [r3, #8]
 800ecf0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ecf2:	4b39      	ldr	r3, [pc, #228]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ecf4:	4a39      	ldr	r2, [pc, #228]	; (800eddc <MX_ADC1_Init+0xfc>)
 800ecf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ecf8:	4b37      	ldr	r3, [pc, #220]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ecfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ecfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ed00:	4b35      	ldr	r3, [pc, #212]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed02:	2200      	movs	r2, #0
 800ed04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ed06:	4b34      	ldr	r3, [pc, #208]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed08:	2201      	movs	r2, #1
 800ed0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ed0c:	4b32      	ldr	r3, [pc, #200]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ed12:	4b31      	ldr	r3, [pc, #196]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ed1a:	4b2f      	ldr	r3, [pc, #188]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ed20:	4b2d      	ldr	r3, [pc, #180]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed22:	4a2f      	ldr	r2, [pc, #188]	; (800ede0 <MX_ADC1_Init+0x100>)
 800ed24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ed26:	4b2c      	ldr	r3, [pc, #176]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800ed2c:	4b2a      	ldr	r3, [pc, #168]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed2e:	2204      	movs	r2, #4
 800ed30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ed32:	4b29      	ldr	r3, [pc, #164]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800ed3a:	4b27      	ldr	r3, [pc, #156]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ed40:	4825      	ldr	r0, [pc, #148]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed42:	f001 ff3d 	bl	8010bc0 <HAL_ADC_Init>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ed4c:	f000 fdf8 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800ed50:	230a      	movs	r3, #10
 800ed52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ed54:	2301      	movs	r3, #1
 800ed56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800ed58:	2307      	movs	r3, #7
 800ed5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ed5c:	463b      	mov	r3, r7
 800ed5e:	4619      	mov	r1, r3
 800ed60:	481d      	ldr	r0, [pc, #116]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed62:	f002 f9a5 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ed6c:	f000 fde8 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800ed70:	230c      	movs	r3, #12
 800ed72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800ed74:	2302      	movs	r3, #2
 800ed76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800ed78:	2305      	movs	r3, #5
 800ed7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ed7c:	463b      	mov	r3, r7
 800ed7e:	4619      	mov	r1, r3
 800ed80:	4815      	ldr	r0, [pc, #84]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800ed82:	f002 f995 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800ed8c:	f000 fdd8 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800ed90:	2310      	movs	r3, #16
 800ed92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800ed94:	2303      	movs	r3, #3
 800ed96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800ed98:	2307      	movs	r3, #7
 800ed9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ed9c:	463b      	mov	r3, r7
 800ed9e:	4619      	mov	r1, r3
 800eda0:	480d      	ldr	r0, [pc, #52]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800eda2:	f002 f985 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800edac:	f000 fdc8 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800edb0:	2311      	movs	r3, #17
 800edb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800edb4:	2304      	movs	r3, #4
 800edb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800edb8:	2305      	movs	r3, #5
 800edba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800edbc:	463b      	mov	r3, r7
 800edbe:	4619      	mov	r1, r3
 800edc0:	4805      	ldr	r0, [pc, #20]	; (800edd8 <MX_ADC1_Init+0xf8>)
 800edc2:	f002 f975 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d001      	beq.n	800edd0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800edcc:	f000 fdb8 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800edd0:	bf00      	nop
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20000d0c 	.word	0x20000d0c
 800eddc:	40012000 	.word	0x40012000
 800ede0:	0f000001 	.word	0x0f000001

0800ede4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800edea:	463b      	mov	r3, r7
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]
 800edf0:	605a      	str	r2, [r3, #4]
 800edf2:	609a      	str	r2, [r3, #8]
 800edf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800edf6:	4b7c      	ldr	r3, [pc, #496]	; (800efe8 <MX_ADC2_Init+0x204>)
 800edf8:	4a7c      	ldr	r2, [pc, #496]	; (800efec <MX_ADC2_Init+0x208>)
 800edfa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800edfc:	4b7a      	ldr	r3, [pc, #488]	; (800efe8 <MX_ADC2_Init+0x204>)
 800edfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ee02:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ee04:	4b78      	ldr	r3, [pc, #480]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee06:	2200      	movs	r2, #0
 800ee08:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800ee0a:	4b77      	ldr	r3, [pc, #476]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ee10:	4b75      	ldr	r3, [pc, #468]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ee16:	4b74      	ldr	r3, [pc, #464]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ee1e:	4b72      	ldr	r3, [pc, #456]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ee24:	4b70      	ldr	r3, [pc, #448]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee26:	4a72      	ldr	r2, [pc, #456]	; (800eff0 <MX_ADC2_Init+0x20c>)
 800ee28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ee2a:	4b6f      	ldr	r3, [pc, #444]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 800ee30:	4b6d      	ldr	r3, [pc, #436]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee32:	220e      	movs	r2, #14
 800ee34:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800ee36:	4b6c      	ldr	r3, [pc, #432]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ee3e:	4b6a      	ldr	r3, [pc, #424]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee40:	2201      	movs	r2, #1
 800ee42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ee44:	4868      	ldr	r0, [pc, #416]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee46:	f001 febb 	bl	8010bc0 <HAL_ADC_Init>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d001      	beq.n	800ee54 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800ee50:	f000 fd76 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800ee54:	2306      	movs	r3, #6
 800ee56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ee5c:	2303      	movs	r3, #3
 800ee5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ee60:	463b      	mov	r3, r7
 800ee62:	4619      	mov	r1, r3
 800ee64:	4860      	ldr	r0, [pc, #384]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee66:	f002 f923 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d001      	beq.n	800ee74 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800ee70:	f000 fd66 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800ee74:	2305      	movs	r3, #5
 800ee76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800ee78:	2302      	movs	r3, #2
 800ee7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ee7c:	463b      	mov	r3, r7
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4859      	ldr	r0, [pc, #356]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee82:	f002 f915 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800ee8c:	f000 fd58 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800ee90:	2309      	movs	r3, #9
 800ee92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800ee94:	2303      	movs	r3, #3
 800ee96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ee98:	463b      	mov	r3, r7
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4852      	ldr	r0, [pc, #328]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ee9e:	f002 f907 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800eea8:	f000 fd4a 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800eeac:	2308      	movs	r3, #8
 800eeae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800eeb0:	2304      	movs	r3, #4
 800eeb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eeb4:	463b      	mov	r3, r7
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	484b      	ldr	r0, [pc, #300]	; (800efe8 <MX_ADC2_Init+0x204>)
 800eeba:	f002 f8f9 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800eec4:	f000 fd3c 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800eec8:	2301      	movs	r3, #1
 800eeca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800eecc:	2305      	movs	r3, #5
 800eece:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eed0:	463b      	mov	r3, r7
 800eed2:	4619      	mov	r1, r3
 800eed4:	4844      	ldr	r0, [pc, #272]	; (800efe8 <MX_ADC2_Init+0x204>)
 800eed6:	f002 f8eb 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800eee0:	f000 fd2e 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800eee8:	2306      	movs	r3, #6
 800eeea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eeec:	463b      	mov	r3, r7
 800eeee:	4619      	mov	r1, r3
 800eef0:	483d      	ldr	r0, [pc, #244]	; (800efe8 <MX_ADC2_Init+0x204>)
 800eef2:	f002 f8dd 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800eefc:	f000 fd20 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ef00:	2304      	movs	r3, #4
 800ef02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800ef04:	2307      	movs	r3, #7
 800ef06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ef08:	463b      	mov	r3, r7
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	4836      	ldr	r0, [pc, #216]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ef0e:	f002 f8cf 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800ef18:	f000 fd12 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800ef20:	2308      	movs	r3, #8
 800ef22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ef24:	463b      	mov	r3, r7
 800ef26:	4619      	mov	r1, r3
 800ef28:	482f      	ldr	r0, [pc, #188]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ef2a:	f002 f8c1 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800ef34:	f000 fd04 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800ef38:	230b      	movs	r3, #11
 800ef3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800ef3c:	2309      	movs	r3, #9
 800ef3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ef40:	463b      	mov	r3, r7
 800ef42:	4619      	mov	r1, r3
 800ef44:	4828      	ldr	r0, [pc, #160]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ef46:	f002 f8b3 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 800ef50:	f000 fcf6 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800ef54:	230d      	movs	r3, #13
 800ef56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800ef58:	230a      	movs	r3, #10
 800ef5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ef5c:	463b      	mov	r3, r7
 800ef5e:	4619      	mov	r1, r3
 800ef60:	4821      	ldr	r0, [pc, #132]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ef62:	f002 f8a5 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800ef6c:	f000 fce8 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ef70:	230e      	movs	r3, #14
 800ef72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800ef74:	230b      	movs	r3, #11
 800ef76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ef78:	463b      	mov	r3, r7
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	481a      	ldr	r0, [pc, #104]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ef7e:	f002 f897 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800ef88:	f000 fcda 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800ef8c:	2302      	movs	r3, #2
 800ef8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800ef90:	230c      	movs	r3, #12
 800ef92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ef94:	463b      	mov	r3, r7
 800ef96:	4619      	mov	r1, r3
 800ef98:	4813      	ldr	r0, [pc, #76]	; (800efe8 <MX_ADC2_Init+0x204>)
 800ef9a:	f002 f889 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800efa4:	f000 fccc 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800efa8:	2307      	movs	r3, #7
 800efaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800efac:	230d      	movs	r3, #13
 800efae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800efb0:	463b      	mov	r3, r7
 800efb2:	4619      	mov	r1, r3
 800efb4:	480c      	ldr	r0, [pc, #48]	; (800efe8 <MX_ADC2_Init+0x204>)
 800efb6:	f002 f87b 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 800efc0:	f000 fcbe 	bl	800f940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800efc4:	230f      	movs	r3, #15
 800efc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800efc8:	230e      	movs	r3, #14
 800efca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800efcc:	463b      	mov	r3, r7
 800efce:	4619      	mov	r1, r3
 800efd0:	4805      	ldr	r0, [pc, #20]	; (800efe8 <MX_ADC2_Init+0x204>)
 800efd2:	f002 f86d 	bl	80110b0 <HAL_ADC_ConfigChannel>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800efdc:	f000 fcb0 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	20000d54 	.word	0x20000d54
 800efec:	40012100 	.word	0x40012100
 800eff0:	0f000001 	.word	0x0f000001

0800eff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08e      	sub	sp, #56	; 0x38
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800effc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f000:	2200      	movs	r2, #0
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	605a      	str	r2, [r3, #4]
 800f006:	609a      	str	r2, [r3, #8]
 800f008:	60da      	str	r2, [r3, #12]
 800f00a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a80      	ldr	r2, [pc, #512]	; (800f214 <HAL_ADC_MspInit+0x220>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d15f      	bne.n	800f0d6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f016:	2300      	movs	r3, #0
 800f018:	623b      	str	r3, [r7, #32]
 800f01a:	4b7f      	ldr	r3, [pc, #508]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f01e:	4a7e      	ldr	r2, [pc, #504]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f024:	6453      	str	r3, [r2, #68]	; 0x44
 800f026:	4b7c      	ldr	r3, [pc, #496]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f02e:	623b      	str	r3, [r7, #32]
 800f030:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f032:	2300      	movs	r3, #0
 800f034:	61fb      	str	r3, [r7, #28]
 800f036:	4b78      	ldr	r3, [pc, #480]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f03a:	4a77      	ldr	r2, [pc, #476]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f03c:	f043 0304 	orr.w	r3, r3, #4
 800f040:	6313      	str	r3, [r2, #48]	; 0x30
 800f042:	4b75      	ldr	r3, [pc, #468]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f046:	f003 0304 	and.w	r3, r3, #4
 800f04a:	61fb      	str	r3, [r7, #28]
 800f04c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800f04e:	2305      	movs	r3, #5
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f052:	2303      	movs	r3, #3
 800f054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f056:	2300      	movs	r3, #0
 800f058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f05a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f05e:	4619      	mov	r1, r3
 800f060:	486e      	ldr	r0, [pc, #440]	; (800f21c <HAL_ADC_MspInit+0x228>)
 800f062:	f003 fe6b 	bl	8012d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f066:	4b6e      	ldr	r3, [pc, #440]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f068:	4a6e      	ldr	r2, [pc, #440]	; (800f224 <HAL_ADC_MspInit+0x230>)
 800f06a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f06c:	4b6c      	ldr	r3, [pc, #432]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f06e:	2200      	movs	r2, #0
 800f070:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f072:	4b6b      	ldr	r3, [pc, #428]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f074:	2200      	movs	r2, #0
 800f076:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f078:	4b69      	ldr	r3, [pc, #420]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f07e:	4b68      	ldr	r3, [pc, #416]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f084:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f086:	4b66      	ldr	r3, [pc, #408]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f08c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f08e:	4b64      	ldr	r3, [pc, #400]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f090:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f094:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f096:	4b62      	ldr	r3, [pc, #392]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f098:	2200      	movs	r2, #0
 800f09a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f09c:	4b60      	ldr	r3, [pc, #384]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f0a2:	4b5f      	ldr	r3, [pc, #380]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f0a8:	485d      	ldr	r0, [pc, #372]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f0aa:	f003 fa45 	bl	8012538 <HAL_DMA_Init>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800f0b4:	f000 fc44 	bl	800f940 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a59      	ldr	r2, [pc, #356]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f0bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f0be:	4a58      	ldr	r2, [pc, #352]	; (800f220 <HAL_ADC_MspInit+0x22c>)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	2105      	movs	r1, #5
 800f0c8:	2012      	movs	r0, #18
 800f0ca:	f003 f9ef 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800f0ce:	2012      	movs	r0, #18
 800f0d0:	f003 fa08 	bl	80124e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800f0d4:	e09a      	b.n	800f20c <HAL_ADC_MspInit+0x218>
  else if(adcHandle->Instance==ADC2)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a53      	ldr	r2, [pc, #332]	; (800f228 <HAL_ADC_MspInit+0x234>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	f040 8095 	bne.w	800f20c <HAL_ADC_MspInit+0x218>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	61bb      	str	r3, [r7, #24]
 800f0e6:	4b4c      	ldr	r3, [pc, #304]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ea:	4a4b      	ldr	r2, [pc, #300]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f0ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0f0:	6453      	str	r3, [r2, #68]	; 0x44
 800f0f2:	4b49      	ldr	r3, [pc, #292]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f0fa:	61bb      	str	r3, [r7, #24]
 800f0fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f0fe:	2300      	movs	r3, #0
 800f100:	617b      	str	r3, [r7, #20]
 800f102:	4b45      	ldr	r3, [pc, #276]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f106:	4a44      	ldr	r2, [pc, #272]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f108:	f043 0304 	orr.w	r3, r3, #4
 800f10c:	6313      	str	r3, [r2, #48]	; 0x30
 800f10e:	4b42      	ldr	r3, [pc, #264]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f112:	f003 0304 	and.w	r3, r3, #4
 800f116:	617b      	str	r3, [r7, #20]
 800f118:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f11a:	2300      	movs	r3, #0
 800f11c:	613b      	str	r3, [r7, #16]
 800f11e:	4b3e      	ldr	r3, [pc, #248]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f122:	4a3d      	ldr	r2, [pc, #244]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f124:	f043 0301 	orr.w	r3, r3, #1
 800f128:	6313      	str	r3, [r2, #48]	; 0x30
 800f12a:	4b3b      	ldr	r3, [pc, #236]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12e:	f003 0301 	and.w	r3, r3, #1
 800f132:	613b      	str	r3, [r7, #16]
 800f134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f136:	2300      	movs	r3, #0
 800f138:	60fb      	str	r3, [r7, #12]
 800f13a:	4b37      	ldr	r3, [pc, #220]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13e:	4a36      	ldr	r2, [pc, #216]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f140:	f043 0302 	orr.w	r3, r3, #2
 800f144:	6313      	str	r3, [r2, #48]	; 0x30
 800f146:	4b34      	ldr	r3, [pc, #208]	; (800f218 <HAL_ADC_MspInit+0x224>)
 800f148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f14a:	f003 0302 	and.w	r3, r3, #2
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|LP9_sensing_Pin|ADC_IN12_Board_VCC_Pin|LP10_sensing_Pin
 800f152:	233f      	movs	r3, #63	; 0x3f
 800f154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f156:	2303      	movs	r3, #3
 800f158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f15e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f162:	4619      	mov	r1, r3
 800f164:	482d      	ldr	r0, [pc, #180]	; (800f21c <HAL_ADC_MspInit+0x228>)
 800f166:	f003 fde9 	bl	8012d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP6_sensing_Pin|LP5_sensing_Pin|HP2_sensing_Pin|LP8_sensing_Pin
 800f16a:	23ff      	movs	r3, #255	; 0xff
 800f16c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f16e:	2303      	movs	r3, #3
 800f170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f172:	2300      	movs	r3, #0
 800f174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f17a:	4619      	mov	r1, r3
 800f17c:	482b      	ldr	r0, [pc, #172]	; (800f22c <HAL_ADC_MspInit+0x238>)
 800f17e:	f003 fddd 	bl	8012d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP4_sensing_Pin|LP3_sensing_Pin;
 800f182:	2303      	movs	r3, #3
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f186:	2303      	movs	r3, #3
 800f188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f18a:	2300      	movs	r3, #0
 800f18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f18e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f192:	4619      	mov	r1, r3
 800f194:	4826      	ldr	r0, [pc, #152]	; (800f230 <HAL_ADC_MspInit+0x23c>)
 800f196:	f003 fdd1 	bl	8012d3c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f19a:	4b26      	ldr	r3, [pc, #152]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f19c:	4a26      	ldr	r2, [pc, #152]	; (800f238 <HAL_ADC_MspInit+0x244>)
 800f19e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f1a0:	4b24      	ldr	r3, [pc, #144]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f1a6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f1a8:	4b22      	ldr	r3, [pc, #136]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f1ae:	4b21      	ldr	r3, [pc, #132]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f1b4:	4b1f      	ldr	r3, [pc, #124]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1ba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f1bc:	4b1d      	ldr	r3, [pc, #116]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1c2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f1c4:	4b1b      	ldr	r3, [pc, #108]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f1ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800f1cc:	4b19      	ldr	r3, [pc, #100]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800f1d2:	4b18      	ldr	r3, [pc, #96]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f1d8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f1da:	4b16      	ldr	r3, [pc, #88]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1dc:	2200      	movs	r2, #0
 800f1de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f1e0:	4814      	ldr	r0, [pc, #80]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1e2:	f003 f9a9 	bl	8012538 <HAL_DMA_Init>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <HAL_ADC_MspInit+0x1fc>
      Error_Handler();
 800f1ec:	f000 fba8 	bl	800f940 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a10      	ldr	r2, [pc, #64]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1f4:	639a      	str	r2, [r3, #56]	; 0x38
 800f1f6:	4a0f      	ldr	r2, [pc, #60]	; (800f234 <HAL_ADC_MspInit+0x240>)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	2105      	movs	r1, #5
 800f200:	2012      	movs	r0, #18
 800f202:	f003 f953 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800f206:	2012      	movs	r0, #18
 800f208:	f003 f96c 	bl	80124e4 <HAL_NVIC_EnableIRQ>
}
 800f20c:	bf00      	nop
 800f20e:	3738      	adds	r7, #56	; 0x38
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	40012000 	.word	0x40012000
 800f218:	40023800 	.word	0x40023800
 800f21c:	40020800 	.word	0x40020800
 800f220:	20000d9c 	.word	0x20000d9c
 800f224:	40026410 	.word	0x40026410
 800f228:	40012100 	.word	0x40012100
 800f22c:	40020000 	.word	0x40020000
 800f230:	40020400 	.word	0x40020400
 800f234:	20000dfc 	.word	0x20000dfc
 800f238:	40026440 	.word	0x40026440

0800f23c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800f240:	4b17      	ldr	r3, [pc, #92]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f242:	4a18      	ldr	r2, [pc, #96]	; (800f2a4 <MX_CAN1_Init+0x68>)
 800f244:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800f246:	4b16      	ldr	r3, [pc, #88]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f248:	2203      	movs	r2, #3
 800f24a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f24c:	4b14      	ldr	r3, [pc, #80]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f24e:	2200      	movs	r2, #0
 800f250:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f252:	4b13      	ldr	r3, [pc, #76]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f254:	2200      	movs	r2, #0
 800f256:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800f258:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f25a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800f25e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f260:	4b0f      	ldr	r3, [pc, #60]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f262:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f266:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800f268:	4b0d      	ldr	r3, [pc, #52]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800f26e:	4b0c      	ldr	r3, [pc, #48]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f270:	2200      	movs	r2, #0
 800f272:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800f274:	4b0a      	ldr	r3, [pc, #40]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f276:	2200      	movs	r2, #0
 800f278:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800f27a:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f280:	4b07      	ldr	r3, [pc, #28]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f282:	2200      	movs	r2, #0
 800f284:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800f286:	4b06      	ldr	r3, [pc, #24]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f288:	2200      	movs	r2, #0
 800f28a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800f28c:	4804      	ldr	r0, [pc, #16]	; (800f2a0 <MX_CAN1_Init+0x64>)
 800f28e:	f002 f9b9 	bl	8011604 <HAL_CAN_Init>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800f298:	f000 fb52 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800f29c:	bf00      	nop
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	20000e5c 	.word	0x20000e5c
 800f2a4:	40006400 	.word	0x40006400

0800f2a8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800f2ac:	4b17      	ldr	r3, [pc, #92]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2ae:	4a18      	ldr	r2, [pc, #96]	; (800f310 <MX_CAN2_Init+0x68>)
 800f2b0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800f2b2:	4b16      	ldr	r3, [pc, #88]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2b4:	2203      	movs	r2, #3
 800f2b6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f2b8:	4b14      	ldr	r3, [pc, #80]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f2be:	4b13      	ldr	r3, [pc, #76]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800f2c4:	4b11      	ldr	r3, [pc, #68]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2c6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800f2ca:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f2cc:	4b0f      	ldr	r3, [pc, #60]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f2d2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800f2d4:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800f2da:	4b0c      	ldr	r3, [pc, #48]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800f2e0:	4b0a      	ldr	r3, [pc, #40]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800f2e6:	4b09      	ldr	r3, [pc, #36]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f2ec:	4b07      	ldr	r3, [pc, #28]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800f2f2:	4b06      	ldr	r3, [pc, #24]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f2f8:	4804      	ldr	r0, [pc, #16]	; (800f30c <MX_CAN2_Init+0x64>)
 800f2fa:	f002 f983 	bl	8011604 <HAL_CAN_Init>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800f304:	f000 fb1c 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800f308:	bf00      	nop
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	20000e84 	.word	0x20000e84
 800f310:	40006800 	.word	0x40006800

0800f314 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08c      	sub	sp, #48	; 0x30
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f31c:	f107 031c 	add.w	r3, r7, #28
 800f320:	2200      	movs	r2, #0
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	605a      	str	r2, [r3, #4]
 800f326:	609a      	str	r2, [r3, #8]
 800f328:	60da      	str	r2, [r3, #12]
 800f32a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a52      	ldr	r2, [pc, #328]	; (800f47c <HAL_CAN_MspInit+0x168>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d145      	bne.n	800f3c2 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800f336:	4b52      	ldr	r3, [pc, #328]	; (800f480 <HAL_CAN_MspInit+0x16c>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3301      	adds	r3, #1
 800f33c:	4a50      	ldr	r2, [pc, #320]	; (800f480 <HAL_CAN_MspInit+0x16c>)
 800f33e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800f340:	4b4f      	ldr	r3, [pc, #316]	; (800f480 <HAL_CAN_MspInit+0x16c>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d10d      	bne.n	800f364 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800f348:	2300      	movs	r3, #0
 800f34a:	61bb      	str	r3, [r7, #24]
 800f34c:	4b4d      	ldr	r3, [pc, #308]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f350:	4a4c      	ldr	r2, [pc, #304]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f356:	6413      	str	r3, [r2, #64]	; 0x40
 800f358:	4b4a      	ldr	r3, [pc, #296]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f360:	61bb      	str	r3, [r7, #24]
 800f362:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f364:	2300      	movs	r3, #0
 800f366:	617b      	str	r3, [r7, #20]
 800f368:	4b46      	ldr	r3, [pc, #280]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f36c:	4a45      	ldr	r2, [pc, #276]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f36e:	f043 0308 	orr.w	r3, r3, #8
 800f372:	6313      	str	r3, [r2, #48]	; 0x30
 800f374:	4b43      	ldr	r3, [pc, #268]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f378:	f003 0308 	and.w	r3, r3, #8
 800f37c:	617b      	str	r3, [r7, #20]
 800f37e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f380:	2303      	movs	r3, #3
 800f382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f384:	2302      	movs	r3, #2
 800f386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f388:	2300      	movs	r3, #0
 800f38a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f38c:	2303      	movs	r3, #3
 800f38e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f390:	2309      	movs	r3, #9
 800f392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f394:	f107 031c 	add.w	r3, r7, #28
 800f398:	4619      	mov	r1, r3
 800f39a:	483b      	ldr	r0, [pc, #236]	; (800f488 <HAL_CAN_MspInit+0x174>)
 800f39c:	f003 fcce 	bl	8012d3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2105      	movs	r1, #5
 800f3a4:	2014      	movs	r0, #20
 800f3a6:	f003 f881 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f3aa:	2014      	movs	r0, #20
 800f3ac:	f003 f89a 	bl	80124e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	2105      	movs	r1, #5
 800f3b4:	2015      	movs	r0, #21
 800f3b6:	f003 f879 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800f3ba:	2015      	movs	r0, #21
 800f3bc:	f003 f892 	bl	80124e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800f3c0:	e057      	b.n	800f472 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4a31      	ldr	r2, [pc, #196]	; (800f48c <HAL_CAN_MspInit+0x178>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d152      	bne.n	800f472 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	613b      	str	r3, [r7, #16]
 800f3d0:	4b2c      	ldr	r3, [pc, #176]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d4:	4a2b      	ldr	r2, [pc, #172]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f3d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f3da:	6413      	str	r3, [r2, #64]	; 0x40
 800f3dc:	4b29      	ldr	r3, [pc, #164]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f3e4:	613b      	str	r3, [r7, #16]
 800f3e6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800f3e8:	4b25      	ldr	r3, [pc, #148]	; (800f480 <HAL_CAN_MspInit+0x16c>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	4a24      	ldr	r2, [pc, #144]	; (800f480 <HAL_CAN_MspInit+0x16c>)
 800f3f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800f3f2:	4b23      	ldr	r3, [pc, #140]	; (800f480 <HAL_CAN_MspInit+0x16c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d10d      	bne.n	800f416 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	60fb      	str	r3, [r7, #12]
 800f3fe:	4b21      	ldr	r3, [pc, #132]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f402:	4a20      	ldr	r2, [pc, #128]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f408:	6413      	str	r3, [r2, #64]	; 0x40
 800f40a:	4b1e      	ldr	r3, [pc, #120]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f40e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f412:	60fb      	str	r3, [r7, #12]
 800f414:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f416:	2300      	movs	r3, #0
 800f418:	60bb      	str	r3, [r7, #8]
 800f41a:	4b1a      	ldr	r3, [pc, #104]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41e:	4a19      	ldr	r2, [pc, #100]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f420:	f043 0302 	orr.w	r3, r3, #2
 800f424:	6313      	str	r3, [r2, #48]	; 0x30
 800f426:	4b17      	ldr	r3, [pc, #92]	; (800f484 <HAL_CAN_MspInit+0x170>)
 800f428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	60bb      	str	r3, [r7, #8]
 800f430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800f432:	2360      	movs	r3, #96	; 0x60
 800f434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f436:	2302      	movs	r3, #2
 800f438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f43e:	2303      	movs	r3, #3
 800f440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f442:	2309      	movs	r3, #9
 800f444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f446:	f107 031c 	add.w	r3, r7, #28
 800f44a:	4619      	mov	r1, r3
 800f44c:	4810      	ldr	r0, [pc, #64]	; (800f490 <HAL_CAN_MspInit+0x17c>)
 800f44e:	f003 fc75 	bl	8012d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800f452:	2200      	movs	r2, #0
 800f454:	2105      	movs	r1, #5
 800f456:	2040      	movs	r0, #64	; 0x40
 800f458:	f003 f828 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f45c:	2040      	movs	r0, #64	; 0x40
 800f45e:	f003 f841 	bl	80124e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800f462:	2200      	movs	r2, #0
 800f464:	2105      	movs	r1, #5
 800f466:	2041      	movs	r0, #65	; 0x41
 800f468:	f003 f820 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f46c:	2041      	movs	r0, #65	; 0x41
 800f46e:	f003 f839 	bl	80124e4 <HAL_NVIC_EnableIRQ>
}
 800f472:	bf00      	nop
 800f474:	3730      	adds	r7, #48	; 0x30
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	40006400 	.word	0x40006400
 800f480:	20000eac 	.word	0x20000eac
 800f484:	40023800 	.word	0x40023800
 800f488:	40020c00 	.word	0x40020c00
 800f48c:	40006800 	.word	0x40006800
 800f490:	40020400 	.word	0x40020400

0800f494 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800f498:	4b06      	ldr	r3, [pc, #24]	; (800f4b4 <MX_CRC_Init+0x20>)
 800f49a:	4a07      	ldr	r2, [pc, #28]	; (800f4b8 <MX_CRC_Init+0x24>)
 800f49c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f49e:	4805      	ldr	r0, [pc, #20]	; (800f4b4 <MX_CRC_Init+0x20>)
 800f4a0:	f003 f82e 	bl	8012500 <HAL_CRC_Init>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800f4aa:	f000 fa49 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800f4ae:	bf00      	nop
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20000eb0 	.word	0x20000eb0
 800f4b8:	40023000 	.word	0x40023000

0800f4bc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a0b      	ldr	r2, [pc, #44]	; (800f4f8 <HAL_CRC_MspInit+0x3c>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d10d      	bne.n	800f4ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <HAL_CRC_MspInit+0x40>)
 800f4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d6:	4a09      	ldr	r2, [pc, #36]	; (800f4fc <HAL_CRC_MspInit+0x40>)
 800f4d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f4dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f4de:	4b07      	ldr	r3, [pc, #28]	; (800f4fc <HAL_CRC_MspInit+0x40>)
 800f4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4e6:	60fb      	str	r3, [r7, #12]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800f4ea:	bf00      	nop
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	40023000 	.word	0x40023000
 800f4fc:	40023800 	.word	0x40023800

0800f500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f506:	2300      	movs	r3, #0
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	4b23      	ldr	r3, [pc, #140]	; (800f598 <MX_DMA_Init+0x98>)
 800f50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f50e:	4a22      	ldr	r2, [pc, #136]	; (800f598 <MX_DMA_Init+0x98>)
 800f510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f514:	6313      	str	r3, [r2, #48]	; 0x30
 800f516:	4b20      	ldr	r3, [pc, #128]	; (800f598 <MX_DMA_Init+0x98>)
 800f518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f51a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f51e:	607b      	str	r3, [r7, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f522:	2300      	movs	r3, #0
 800f524:	603b      	str	r3, [r7, #0]
 800f526:	4b1c      	ldr	r3, [pc, #112]	; (800f598 <MX_DMA_Init+0x98>)
 800f528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f52a:	4a1b      	ldr	r2, [pc, #108]	; (800f598 <MX_DMA_Init+0x98>)
 800f52c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f530:	6313      	str	r3, [r2, #48]	; 0x30
 800f532:	4b19      	ldr	r3, [pc, #100]	; (800f598 <MX_DMA_Init+0x98>)
 800f534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f53a:	603b      	str	r3, [r7, #0]
 800f53c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800f53e:	2200      	movs	r2, #0
 800f540:	2105      	movs	r1, #5
 800f542:	200f      	movs	r0, #15
 800f544:	f002 ffb2 	bl	80124ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800f548:	200f      	movs	r0, #15
 800f54a:	f002 ffcb 	bl	80124e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800f54e:	2200      	movs	r2, #0
 800f550:	2105      	movs	r1, #5
 800f552:	2010      	movs	r0, #16
 800f554:	f002 ffaa 	bl	80124ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800f558:	2010      	movs	r0, #16
 800f55a:	f002 ffc3 	bl	80124e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800f55e:	2200      	movs	r2, #0
 800f560:	2105      	movs	r1, #5
 800f562:	2011      	movs	r0, #17
 800f564:	f002 ffa2 	bl	80124ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800f568:	2011      	movs	r0, #17
 800f56a:	f002 ffbb 	bl	80124e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800f56e:	2200      	movs	r2, #0
 800f570:	2105      	movs	r1, #5
 800f572:	2038      	movs	r0, #56	; 0x38
 800f574:	f002 ff9a 	bl	80124ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f578:	2038      	movs	r0, #56	; 0x38
 800f57a:	f002 ffb3 	bl	80124e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800f57e:	2200      	movs	r2, #0
 800f580:	2105      	movs	r1, #5
 800f582:	203a      	movs	r0, #58	; 0x3a
 800f584:	f002 ff92 	bl	80124ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f588:	203a      	movs	r0, #58	; 0x3a
 800f58a:	f002 ffab 	bl	80124e4 <HAL_NVIC_EnableIRQ>

}
 800f58e:	bf00      	nop
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	40023800 	.word	0x40023800

0800f59c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800f59c:	b480      	push	{r7}
 800f59e:	af00      	add	r7, sp, #0

}
 800f5a0:	bf00      	nop
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	af00      	add	r7, sp, #0
return 0;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800f5ba:	b480      	push	{r7}
 800f5bc:	b083      	sub	sp, #12
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
 800f5c2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800f5d4:	bf00      	nop
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
	...

0800f5e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 800f5e4:	4a14      	ldr	r2, [pc, #80]	; (800f638 <MX_FREERTOS_Init+0x58>)
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	2010      	movs	r0, #16
 800f5ea:	f008 fae1 	bl	8017bb0 <osMessageQueueNew>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	4a12      	ldr	r2, [pc, #72]	; (800f63c <MX_FREERTOS_Init+0x5c>)
 800f5f2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800f5f4:	4a12      	ldr	r2, [pc, #72]	; (800f640 <MX_FREERTOS_Init+0x60>)
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	4812      	ldr	r0, [pc, #72]	; (800f644 <MX_FREERTOS_Init+0x64>)
 800f5fa:	f007 ffdf 	bl	80175bc <osThreadNew>
 800f5fe:	4603      	mov	r3, r0
 800f600:	4a11      	ldr	r2, [pc, #68]	; (800f648 <MX_FREERTOS_Init+0x68>)
 800f602:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 800f604:	4a11      	ldr	r2, [pc, #68]	; (800f64c <MX_FREERTOS_Init+0x6c>)
 800f606:	2100      	movs	r1, #0
 800f608:	4811      	ldr	r0, [pc, #68]	; (800f650 <MX_FREERTOS_Init+0x70>)
 800f60a:	f007 ffd7 	bl	80175bc <osThreadNew>
 800f60e:	4603      	mov	r3, r0
 800f610:	4a10      	ldr	r2, [pc, #64]	; (800f654 <MX_FREERTOS_Init+0x74>)
 800f612:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 800f614:	4a10      	ldr	r2, [pc, #64]	; (800f658 <MX_FREERTOS_Init+0x78>)
 800f616:	2100      	movs	r1, #0
 800f618:	4810      	ldr	r0, [pc, #64]	; (800f65c <MX_FREERTOS_Init+0x7c>)
 800f61a:	f007 ffcf 	bl	80175bc <osThreadNew>
 800f61e:	4603      	mov	r3, r0
 800f620:	4a0f      	ldr	r2, [pc, #60]	; (800f660 <MX_FREERTOS_Init+0x80>)
 800f622:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 800f624:	4a0f      	ldr	r2, [pc, #60]	; (800f664 <MX_FREERTOS_Init+0x84>)
 800f626:	2100      	movs	r1, #0
 800f628:	480f      	ldr	r0, [pc, #60]	; (800f668 <MX_FREERTOS_Init+0x88>)
 800f62a:	f007 ffc7 	bl	80175bc <osThreadNew>
 800f62e:	4603      	mov	r3, r0
 800f630:	4a0e      	ldr	r2, [pc, #56]	; (800f66c <MX_FREERTOS_Init+0x8c>)
 800f632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800f634:	bf00      	nop
 800f636:	bd80      	pop	{r7, pc}
 800f638:	0801f2d0 	.word	0x0801f2d0
 800f63c:	20001188 	.word	0x20001188
 800f640:	0801f240 	.word	0x0801f240
 800f644:	0800f671 	.word	0x0800f671
 800f648:	20000eb8 	.word	0x20000eb8
 800f64c:	0801f264 	.word	0x0801f264
 800f650:	080022a1 	.word	0x080022a1
 800f654:	2000117c 	.word	0x2000117c
 800f658:	0801f288 	.word	0x0801f288
 800f65c:	0800c82d 	.word	0x0800c82d
 800f660:	20001180 	.word	0x20001180
 800f664:	0801f2ac 	.word	0x0801f2ac
 800f668:	0800ec71 	.word	0x0800ec71
 800f66c:	20001184 	.word	0x20001184

0800f670 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800f678:	2001      	movs	r0, #1
 800f67a:	f008 f831 	bl	80176e0 <osDelay>
 800f67e:	e7fb      	b.n	800f678 <StartDefaultTask+0x8>

0800f680 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b08a      	sub	sp, #40	; 0x28
 800f684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f686:	f107 0314 	add.w	r3, r7, #20
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	605a      	str	r2, [r3, #4]
 800f690:	609a      	str	r2, [r3, #8]
 800f692:	60da      	str	r2, [r3, #12]
 800f694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f696:	2300      	movs	r3, #0
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	4b4f      	ldr	r3, [pc, #316]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f69e:	4a4e      	ldr	r2, [pc, #312]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6a0:	f043 0304 	orr.w	r3, r3, #4
 800f6a4:	6313      	str	r3, [r2, #48]	; 0x30
 800f6a6:	4b4c      	ldr	r3, [pc, #304]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6aa:	f003 0304 	and.w	r3, r3, #4
 800f6ae:	613b      	str	r3, [r7, #16]
 800f6b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60fb      	str	r3, [r7, #12]
 800f6b6:	4b48      	ldr	r3, [pc, #288]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ba:	4a47      	ldr	r2, [pc, #284]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c0:	6313      	str	r3, [r2, #48]	; 0x30
 800f6c2:	4b45      	ldr	r3, [pc, #276]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	60bb      	str	r3, [r7, #8]
 800f6d2:	4b41      	ldr	r3, [pc, #260]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6d6:	4a40      	ldr	r2, [pc, #256]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6d8:	f043 0301 	orr.w	r3, r3, #1
 800f6dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f6de:	4b3e      	ldr	r3, [pc, #248]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e2:	f003 0301 	and.w	r3, r3, #1
 800f6e6:	60bb      	str	r3, [r7, #8]
 800f6e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	607b      	str	r3, [r7, #4]
 800f6ee:	4b3a      	ldr	r3, [pc, #232]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f2:	4a39      	ldr	r2, [pc, #228]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6f4:	f043 0302 	orr.w	r3, r3, #2
 800f6f8:	6313      	str	r3, [r2, #48]	; 0x30
 800f6fa:	4b37      	ldr	r3, [pc, #220]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6fe:	f003 0302 	and.w	r3, r3, #2
 800f702:	607b      	str	r3, [r7, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f706:	2300      	movs	r3, #0
 800f708:	603b      	str	r3, [r7, #0]
 800f70a:	4b33      	ldr	r3, [pc, #204]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f70e:	4a32      	ldr	r2, [pc, #200]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f710:	f043 0308 	orr.w	r3, r3, #8
 800f714:	6313      	str	r3, [r2, #48]	; 0x30
 800f716:	4b30      	ldr	r3, [pc, #192]	; (800f7d8 <MX_GPIO_Init+0x158>)
 800f718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f71a:	f003 0308 	and.w	r3, r3, #8
 800f71e:	603b      	str	r3, [r7, #0]
 800f720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LP7_control_GPIO_Port, LP7_control_Pin, GPIO_PIN_RESET);
 800f722:	2200      	movs	r2, #0
 800f724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f728:	482c      	ldr	r0, [pc, #176]	; (800f7dc <MX_GPIO_Init+0x15c>)
 800f72a:	f003 fca3 	bl	8013074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HP3_control_Pin|SDC_control_Pin|HP4_control_Pin|LP4_control_Pin, GPIO_PIN_RESET);
 800f72e:	2200      	movs	r2, #0
 800f730:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 800f734:	482a      	ldr	r0, [pc, #168]	; (800f7e0 <MX_GPIO_Init+0x160>)
 800f736:	f003 fc9d 	bl	8013074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LP5_control_Pin|LP6_control_Pin, GPIO_PIN_RESET);
 800f73a:	2200      	movs	r2, #0
 800f73c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f740:	4828      	ldr	r0, [pc, #160]	; (800f7e4 <MX_GPIO_Init+0x164>)
 800f742:	f003 fc97 	bl	8013074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800f746:	2305      	movs	r3, #5
 800f748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f74a:	2303      	movs	r3, #3
 800f74c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f752:	f107 0314 	add.w	r3, r7, #20
 800f756:	4619      	mov	r1, r3
 800f758:	4822      	ldr	r0, [pc, #136]	; (800f7e4 <MX_GPIO_Init+0x164>)
 800f75a:	f003 faef 	bl	8012d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LP7_control_Pin;
 800f75e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f764:	2301      	movs	r3, #1
 800f766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f768:	2300      	movs	r3, #0
 800f76a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f76c:	2300      	movs	r3, #0
 800f76e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LP7_control_GPIO_Port, &GPIO_InitStruct);
 800f770:	f107 0314 	add.w	r3, r7, #20
 800f774:	4619      	mov	r1, r3
 800f776:	4819      	ldr	r0, [pc, #100]	; (800f7dc <MX_GPIO_Init+0x15c>)
 800f778:	f003 fae0 	bl	8012d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HP3_control_Pin|SDC_control_Pin|HP4_control_Pin|LP4_control_Pin;
 800f77c:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800f780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f782:	2301      	movs	r3, #1
 800f784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f786:	2300      	movs	r3, #0
 800f788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f78a:	2300      	movs	r3, #0
 800f78c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f78e:	f107 0314 	add.w	r3, r7, #20
 800f792:	4619      	mov	r1, r3
 800f794:	4812      	ldr	r0, [pc, #72]	; (800f7e0 <MX_GPIO_Init+0x160>)
 800f796:	f003 fad1 	bl	8012d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LP5_control_Pin|LP6_control_Pin;
 800f79a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f79e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7ac:	f107 0314 	add.w	r3, r7, #20
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	480c      	ldr	r0, [pc, #48]	; (800f7e4 <MX_GPIO_Init+0x164>)
 800f7b4:	f003 fac2 	bl	8012d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 800f7b8:	2318      	movs	r3, #24
 800f7ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f7c4:	f107 0314 	add.w	r3, r7, #20
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	4807      	ldr	r0, [pc, #28]	; (800f7e8 <MX_GPIO_Init+0x168>)
 800f7cc:	f003 fab6 	bl	8012d3c <HAL_GPIO_Init>

}
 800f7d0:	bf00      	nop
 800f7d2:	3728      	adds	r7, #40	; 0x28
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	40023800 	.word	0x40023800
 800f7dc:	40020400 	.word	0x40020400
 800f7e0:	40020000 	.word	0x40020000
 800f7e4:	40020800 	.word	0x40020800
 800f7e8:	40020c00 	.word	0x40020c00

0800f7ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f7f0:	f001 f9a4 	bl	8010b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f7f4:	f000 f828 	bl	800f848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f7f8:	f7ff ff42 	bl	800f680 <MX_GPIO_Init>
  MX_DMA_Init();
 800f7fc:	f7ff fe80 	bl	800f500 <MX_DMA_Init>
  MX_ADC1_Init();
 800f800:	f7ff fa6e 	bl	800ece0 <MX_ADC1_Init>
  MX_CAN1_Init();
 800f804:	f7ff fd1a 	bl	800f23c <MX_CAN1_Init>
  MX_CAN2_Init();
 800f808:	f7ff fd4e 	bl	800f2a8 <MX_CAN2_Init>
  MX_CRC_Init();
 800f80c:	f7ff fe42 	bl	800f494 <MX_CRC_Init>
  MX_RNG_Init();
 800f810:	f000 f89c 	bl	800f94c <MX_RNG_Init>
  MX_USART2_UART_Init();
 800f814:	f001 f888 	bl	8010928 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800f818:	f000 fbe8 	bl	800ffec <MX_TIM4_Init>
  MX_TIM2_Init();
 800f81c:	f000 fada 	bl	800fdd4 <MX_TIM2_Init>
  MX_TIM8_Init();
 800f820:	f000 fc70 	bl	8010104 <MX_TIM8_Init>
  MX_TIM11_Init();
 800f824:	f000 fd74 	bl	8010310 <MX_TIM11_Init>
  MX_TIM12_Init();
 800f828:	f000 fdc0 	bl	80103ac <MX_TIM12_Init>
  MX_TIM3_Init();
 800f82c:	f000 fb5e 	bl	800feec <MX_TIM3_Init>
  MX_TIM10_Init();
 800f830:	f000 fd20 	bl	8010274 <MX_TIM10_Init>
  MX_ADC2_Init();
 800f834:	f7ff fad6 	bl	800ede4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800f838:	f007 fe76 	bl	8017528 <osKernelInitialize>
  MX_FREERTOS_Init();
 800f83c:	f7ff fed0 	bl	800f5e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800f840:	f007 fe96 	bl	8017570 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800f844:	e7fe      	b.n	800f844 <main+0x58>
	...

0800f848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b094      	sub	sp, #80	; 0x50
 800f84c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f84e:	f107 0320 	add.w	r3, r7, #32
 800f852:	2230      	movs	r2, #48	; 0x30
 800f854:	2100      	movs	r1, #0
 800f856:	4618      	mov	r0, r3
 800f858:	f00c fdaa 	bl	801c3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f85c:	f107 030c 	add.w	r3, r7, #12
 800f860:	2200      	movs	r2, #0
 800f862:	601a      	str	r2, [r3, #0]
 800f864:	605a      	str	r2, [r3, #4]
 800f866:	609a      	str	r2, [r3, #8]
 800f868:	60da      	str	r2, [r3, #12]
 800f86a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f86c:	2300      	movs	r3, #0
 800f86e:	60bb      	str	r3, [r7, #8]
 800f870:	4b28      	ldr	r3, [pc, #160]	; (800f914 <SystemClock_Config+0xcc>)
 800f872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f874:	4a27      	ldr	r2, [pc, #156]	; (800f914 <SystemClock_Config+0xcc>)
 800f876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f87a:	6413      	str	r3, [r2, #64]	; 0x40
 800f87c:	4b25      	ldr	r3, [pc, #148]	; (800f914 <SystemClock_Config+0xcc>)
 800f87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f884:	60bb      	str	r3, [r7, #8]
 800f886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f888:	2300      	movs	r3, #0
 800f88a:	607b      	str	r3, [r7, #4]
 800f88c:	4b22      	ldr	r3, [pc, #136]	; (800f918 <SystemClock_Config+0xd0>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a21      	ldr	r2, [pc, #132]	; (800f918 <SystemClock_Config+0xd0>)
 800f892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f896:	6013      	str	r3, [r2, #0]
 800f898:	4b1f      	ldr	r3, [pc, #124]	; (800f918 <SystemClock_Config+0xd0>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8a0:	607b      	str	r3, [r7, #4]
 800f8a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f8a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f8ae:	2302      	movs	r3, #2
 800f8b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f8b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800f8b8:	2308      	movs	r3, #8
 800f8ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f8bc:	23a8      	movs	r3, #168	; 0xa8
 800f8be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f8c0:	2302      	movs	r3, #2
 800f8c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800f8c4:	2307      	movs	r3, #7
 800f8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f8c8:	f107 0320 	add.w	r3, r7, #32
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f003 fbeb 	bl	80130a8 <HAL_RCC_OscConfig>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d001      	beq.n	800f8dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f8d8:	f000 f832 	bl	800f940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f8dc:	230f      	movs	r3, #15
 800f8de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f8e0:	2302      	movs	r3, #2
 800f8e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f8e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f8ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f8ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f8f4:	f107 030c 	add.w	r3, r7, #12
 800f8f8:	2105      	movs	r1, #5
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f003 fe4c 	bl	8013598 <HAL_RCC_ClockConfig>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f906:	f000 f81b 	bl	800f940 <Error_Handler>
  }
}
 800f90a:	bf00      	nop
 800f90c:	3750      	adds	r7, #80	; 0x50
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	40023800 	.word	0x40023800
 800f918:	40007000 	.word	0x40007000

0800f91c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a04      	ldr	r2, [pc, #16]	; (800f93c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d101      	bne.n	800f932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800f92e:	f001 f927 	bl	8010b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	40010000 	.word	0x40010000

0800f940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f940:	b480      	push	{r7}
 800f942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f944:	b672      	cpsid	i
}
 800f946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f948:	e7fe      	b.n	800f948 <Error_Handler+0x8>
	...

0800f94c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800f950:	4b06      	ldr	r3, [pc, #24]	; (800f96c <MX_RNG_Init+0x20>)
 800f952:	4a07      	ldr	r2, [pc, #28]	; (800f970 <MX_RNG_Init+0x24>)
 800f954:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800f956:	4805      	ldr	r0, [pc, #20]	; (800f96c <MX_RNG_Init+0x20>)
 800f958:	f004 f86e 	bl	8013a38 <HAL_RNG_Init>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800f962:	f7ff ffed 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800f966:	bf00      	nop
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	2000118c 	.word	0x2000118c
 800f970:	50060800 	.word	0x50060800

0800f974 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a0b      	ldr	r2, [pc, #44]	; (800f9b0 <HAL_RNG_MspInit+0x3c>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d10d      	bne.n	800f9a2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
 800f98a:	4b0a      	ldr	r3, [pc, #40]	; (800f9b4 <HAL_RNG_MspInit+0x40>)
 800f98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98e:	4a09      	ldr	r2, [pc, #36]	; (800f9b4 <HAL_RNG_MspInit+0x40>)
 800f990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f994:	6353      	str	r3, [r2, #52]	; 0x34
 800f996:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <HAL_RNG_MspInit+0x40>)
 800f998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f99e:	60fb      	str	r3, [r7, #12]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800f9a2:	bf00      	nop
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	50060800 	.word	0x50060800
 800f9b4:	40023800 	.word	0x40023800

0800f9b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f9be:	2300      	movs	r3, #0
 800f9c0:	607b      	str	r3, [r7, #4]
 800f9c2:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <HAL_MspInit+0x54>)
 800f9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9c6:	4a11      	ldr	r2, [pc, #68]	; (800fa0c <HAL_MspInit+0x54>)
 800f9c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9cc:	6453      	str	r3, [r2, #68]	; 0x44
 800f9ce:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <HAL_MspInit+0x54>)
 800f9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9d6:	607b      	str	r3, [r7, #4]
 800f9d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f9da:	2300      	movs	r3, #0
 800f9dc:	603b      	str	r3, [r7, #0]
 800f9de:	4b0b      	ldr	r3, [pc, #44]	; (800fa0c <HAL_MspInit+0x54>)
 800f9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e2:	4a0a      	ldr	r2, [pc, #40]	; (800fa0c <HAL_MspInit+0x54>)
 800f9e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9e8:	6413      	str	r3, [r2, #64]	; 0x40
 800f9ea:	4b08      	ldr	r3, [pc, #32]	; (800fa0c <HAL_MspInit+0x54>)
 800f9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9f2:	603b      	str	r3, [r7, #0]
 800f9f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	210f      	movs	r1, #15
 800f9fa:	f06f 0001 	mvn.w	r0, #1
 800f9fe:	f002 fd55 	bl	80124ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fa02:	bf00      	nop
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	40023800 	.word	0x40023800

0800fa10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b08c      	sub	sp, #48	; 0x30
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800fa20:	2300      	movs	r3, #0
 800fa22:	60bb      	str	r3, [r7, #8]
 800fa24:	4b2f      	ldr	r3, [pc, #188]	; (800fae4 <HAL_InitTick+0xd4>)
 800fa26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa28:	4a2e      	ldr	r2, [pc, #184]	; (800fae4 <HAL_InitTick+0xd4>)
 800fa2a:	f043 0301 	orr.w	r3, r3, #1
 800fa2e:	6453      	str	r3, [r2, #68]	; 0x44
 800fa30:	4b2c      	ldr	r3, [pc, #176]	; (800fae4 <HAL_InitTick+0xd4>)
 800fa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa34:	f003 0301 	and.w	r3, r3, #1
 800fa38:	60bb      	str	r3, [r7, #8]
 800fa3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800fa3c:	f107 020c 	add.w	r2, r7, #12
 800fa40:	f107 0310 	add.w	r3, r7, #16
 800fa44:	4611      	mov	r1, r2
 800fa46:	4618      	mov	r0, r3
 800fa48:	f003 ffc4 	bl	80139d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800fa4c:	f003 ffae 	bl	80139ac <HAL_RCC_GetPCLK2Freq>
 800fa50:	4603      	mov	r3, r0
 800fa52:	005b      	lsls	r3, r3, #1
 800fa54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800fa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa58:	4a23      	ldr	r2, [pc, #140]	; (800fae8 <HAL_InitTick+0xd8>)
 800fa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa5e:	0c9b      	lsrs	r3, r3, #18
 800fa60:	3b01      	subs	r3, #1
 800fa62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800fa64:	4b21      	ldr	r3, [pc, #132]	; (800faec <HAL_InitTick+0xdc>)
 800fa66:	4a22      	ldr	r2, [pc, #136]	; (800faf0 <HAL_InitTick+0xe0>)
 800fa68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800fa6a:	4b20      	ldr	r3, [pc, #128]	; (800faec <HAL_InitTick+0xdc>)
 800fa6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800fa72:	4a1e      	ldr	r2, [pc, #120]	; (800faec <HAL_InitTick+0xdc>)
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800fa78:	4b1c      	ldr	r3, [pc, #112]	; (800faec <HAL_InitTick+0xdc>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa7e:	4b1b      	ldr	r3, [pc, #108]	; (800faec <HAL_InitTick+0xdc>)
 800fa80:	2200      	movs	r2, #0
 800fa82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fa84:	4b19      	ldr	r3, [pc, #100]	; (800faec <HAL_InitTick+0xdc>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800fa8a:	4818      	ldr	r0, [pc, #96]	; (800faec <HAL_InitTick+0xdc>)
 800fa8c:	f003 fffe 	bl	8013a8c <HAL_TIM_Base_Init>
 800fa90:	4603      	mov	r3, r0
 800fa92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800fa96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d11b      	bne.n	800fad6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800fa9e:	4813      	ldr	r0, [pc, #76]	; (800faec <HAL_InitTick+0xdc>)
 800faa0:	f004 f844 	bl	8013b2c <HAL_TIM_Base_Start_IT>
 800faa4:	4603      	mov	r3, r0
 800faa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800faaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d111      	bne.n	800fad6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800fab2:	2019      	movs	r0, #25
 800fab4:	f002 fd16 	bl	80124e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2b0f      	cmp	r3, #15
 800fabc:	d808      	bhi.n	800fad0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800fabe:	2200      	movs	r2, #0
 800fac0:	6879      	ldr	r1, [r7, #4]
 800fac2:	2019      	movs	r0, #25
 800fac4:	f002 fcf2 	bl	80124ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800fac8:	4a0a      	ldr	r2, [pc, #40]	; (800faf4 <HAL_InitTick+0xe4>)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6013      	str	r3, [r2, #0]
 800face:	e002      	b.n	800fad6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800fad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3730      	adds	r7, #48	; 0x30
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	40023800 	.word	0x40023800
 800fae8:	431bde83 	.word	0x431bde83
 800faec:	2000119c 	.word	0x2000119c
 800faf0:	40010000 	.word	0x40010000
 800faf4:	20000034 	.word	0x20000034

0800faf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800faf8:	b480      	push	{r7}
 800fafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800fafc:	e7fe      	b.n	800fafc <NMI_Handler+0x4>

0800fafe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fafe:	b480      	push	{r7}
 800fb00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fb02:	e7fe      	b.n	800fb02 <HardFault_Handler+0x4>

0800fb04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fb04:	b480      	push	{r7}
 800fb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fb08:	e7fe      	b.n	800fb08 <MemManage_Handler+0x4>

0800fb0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fb0a:	b480      	push	{r7}
 800fb0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fb0e:	e7fe      	b.n	800fb0e <BusFault_Handler+0x4>

0800fb10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800fb10:	b480      	push	{r7}
 800fb12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fb14:	e7fe      	b.n	800fb14 <UsageFault_Handler+0x4>

0800fb16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fb16:	b480      	push	{r7}
 800fb18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fb1a:	bf00      	nop
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800fb28:	4802      	ldr	r0, [pc, #8]	; (800fb34 <DMA1_Stream4_IRQHandler+0x10>)
 800fb2a:	f002 fe9d 	bl	8012868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800fb2e:	bf00      	nop
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	200013e0 	.word	0x200013e0

0800fb38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800fb3c:	4802      	ldr	r0, [pc, #8]	; (800fb48 <DMA1_Stream5_IRQHandler+0x10>)
 800fb3e:	f002 fe93 	bl	8012868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800fb42:	bf00      	nop
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	200014e4 	.word	0x200014e4

0800fb4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800fb50:	4802      	ldr	r0, [pc, #8]	; (800fb5c <DMA1_Stream6_IRQHandler+0x10>)
 800fb52:	f002 fe89 	bl	8012868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800fb56:	bf00      	nop
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	20001484 	.word	0x20001484

0800fb60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800fb64:	4803      	ldr	r0, [pc, #12]	; (800fb74 <ADC_IRQHandler+0x14>)
 800fb66:	f001 f86e 	bl	8010c46 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800fb6a:	4803      	ldr	r0, [pc, #12]	; (800fb78 <ADC_IRQHandler+0x18>)
 800fb6c:	f001 f86b 	bl	8010c46 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800fb70:	bf00      	nop
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	20000d0c 	.word	0x20000d0c
 800fb78:	20000d54 	.word	0x20000d54

0800fb7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800fb80:	4802      	ldr	r0, [pc, #8]	; (800fb8c <CAN1_RX0_IRQHandler+0x10>)
 800fb82:	f002 f9a7 	bl	8011ed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800fb86:	bf00      	nop
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	20000e5c 	.word	0x20000e5c

0800fb90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800fb94:	4802      	ldr	r0, [pc, #8]	; (800fba0 <CAN1_RX1_IRQHandler+0x10>)
 800fb96:	f002 f99d 	bl	8011ed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800fb9a:	bf00      	nop
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	20000e5c 	.word	0x20000e5c

0800fba4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800fba8:	4803      	ldr	r0, [pc, #12]	; (800fbb8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800fbaa:	f004 f947 	bl	8013e3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800fbae:	4803      	ldr	r0, [pc, #12]	; (800fbbc <TIM1_UP_TIM10_IRQHandler+0x18>)
 800fbb0:	f004 f944 	bl	8013e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800fbb4:	bf00      	nop
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	2000119c 	.word	0x2000119c
 800fbbc:	20001308 	.word	0x20001308

0800fbc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800fbc4:	4802      	ldr	r0, [pc, #8]	; (800fbd0 <USART2_IRQHandler+0x10>)
 800fbc6:	f005 f833 	bl	8014c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800fbca:	bf00      	nop
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	20001440 	.word	0x20001440

0800fbd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800fbd8:	4802      	ldr	r0, [pc, #8]	; (800fbe4 <DMA2_Stream0_IRQHandler+0x10>)
 800fbda:	f002 fe45 	bl	8012868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800fbde:	bf00      	nop
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000d9c 	.word	0x20000d9c

0800fbe8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800fbec:	4802      	ldr	r0, [pc, #8]	; (800fbf8 <DMA2_Stream2_IRQHandler+0x10>)
 800fbee:	f002 fe3b 	bl	8012868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800fbf2:	bf00      	nop
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20000dfc 	.word	0x20000dfc

0800fbfc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800fc00:	4802      	ldr	r0, [pc, #8]	; (800fc0c <CAN2_RX0_IRQHandler+0x10>)
 800fc02:	f002 f967 	bl	8011ed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800fc06:	bf00      	nop
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	20000e84 	.word	0x20000e84

0800fc10 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800fc14:	4802      	ldr	r0, [pc, #8]	; (800fc20 <CAN2_RX1_IRQHandler+0x10>)
 800fc16:	f002 f95d 	bl	8011ed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800fc1a:	bf00      	nop
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	20000e84 	.word	0x20000e84

0800fc24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fc24:	b480      	push	{r7}
 800fc26:	af00      	add	r7, sp, #0
  return 1;
 800fc28:	2301      	movs	r3, #1
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <_kill>:

int _kill(int pid, int sig)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800fc3e:	f00c fa75 	bl	801c12c <__errno>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2216      	movs	r2, #22
 800fc46:	601a      	str	r2, [r3, #0]
  return -1;
 800fc48:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <_exit>:

void _exit (int status)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800fc5c:	f04f 31ff 	mov.w	r1, #4294967295
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff ffe7 	bl	800fc34 <_kill>
  while (1) {}    /* Make sure we hang here */
 800fc66:	e7fe      	b.n	800fc66 <_exit+0x12>

0800fc68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc74:	2300      	movs	r3, #0
 800fc76:	617b      	str	r3, [r7, #20]
 800fc78:	e00a      	b.n	800fc90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fc7a:	f3af 8000 	nop.w
 800fc7e:	4601      	mov	r1, r0
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	1c5a      	adds	r2, r3, #1
 800fc84:	60ba      	str	r2, [r7, #8]
 800fc86:	b2ca      	uxtb	r2, r1
 800fc88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	dbf0      	blt.n	800fc7a <_read+0x12>
  }

  return len;
 800fc98:	687b      	ldr	r3, [r7, #4]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b086      	sub	sp, #24
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	60b9      	str	r1, [r7, #8]
 800fcac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fcae:	2300      	movs	r3, #0
 800fcb0:	617b      	str	r3, [r7, #20]
 800fcb2:	e009      	b.n	800fcc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	1c5a      	adds	r2, r3, #1
 800fcb8:	60ba      	str	r2, [r7, #8]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	617b      	str	r3, [r7, #20]
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	dbf1      	blt.n	800fcb4 <_write+0x12>
  }
  return len;
 800fcd0:	687b      	ldr	r3, [r7, #4]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <_close>:

int _close(int file)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b083      	sub	sp, #12
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800fce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fcf2:	b480      	push	{r7}
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
 800fcfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fd02:	605a      	str	r2, [r3, #4]
  return 0;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	370c      	adds	r7, #12
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <_isatty>:

int _isatty(int file)
{
 800fd12:	b480      	push	{r7}
 800fd14:	b083      	sub	sp, #12
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800fd1a:	2301      	movs	r3, #1
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3714      	adds	r7, #20
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr
	...

0800fd44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fd4c:	4a14      	ldr	r2, [pc, #80]	; (800fda0 <_sbrk+0x5c>)
 800fd4e:	4b15      	ldr	r3, [pc, #84]	; (800fda4 <_sbrk+0x60>)
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fd58:	4b13      	ldr	r3, [pc, #76]	; (800fda8 <_sbrk+0x64>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d102      	bne.n	800fd66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fd60:	4b11      	ldr	r3, [pc, #68]	; (800fda8 <_sbrk+0x64>)
 800fd62:	4a12      	ldr	r2, [pc, #72]	; (800fdac <_sbrk+0x68>)
 800fd64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fd66:	4b10      	ldr	r3, [pc, #64]	; (800fda8 <_sbrk+0x64>)
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d207      	bcs.n	800fd84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fd74:	f00c f9da 	bl	801c12c <__errno>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	220c      	movs	r2, #12
 800fd7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd82:	e009      	b.n	800fd98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fd84:	4b08      	ldr	r3, [pc, #32]	; (800fda8 <_sbrk+0x64>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fd8a:	4b07      	ldr	r3, [pc, #28]	; (800fda8 <_sbrk+0x64>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4413      	add	r3, r2
 800fd92:	4a05      	ldr	r2, [pc, #20]	; (800fda8 <_sbrk+0x64>)
 800fd94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800fd96:	68fb      	ldr	r3, [r7, #12]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	20020000 	.word	0x20020000
 800fda4:	00000800 	.word	0x00000800
 800fda8:	200011e4 	.word	0x200011e4
 800fdac:	20007518 	.word	0x20007518

0800fdb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fdb4:	4b06      	ldr	r3, [pc, #24]	; (800fdd0 <SystemInit+0x20>)
 800fdb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdba:	4a05      	ldr	r2, [pc, #20]	; (800fdd0 <SystemInit+0x20>)
 800fdbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fdc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800fdc4:	bf00      	nop
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	e000ed00 	.word	0xe000ed00

0800fdd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim12;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08e      	sub	sp, #56	; 0x38
 800fdd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fdda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	605a      	str	r2, [r3, #4]
 800fde4:	609a      	str	r2, [r3, #8]
 800fde6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fde8:	f107 0320 	add.w	r3, r7, #32
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
 800fdf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fdf2:	1d3b      	adds	r3, r7, #4
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	601a      	str	r2, [r3, #0]
 800fdf8:	605a      	str	r2, [r3, #4]
 800fdfa:	609a      	str	r2, [r3, #8]
 800fdfc:	60da      	str	r2, [r3, #12]
 800fdfe:	611a      	str	r2, [r3, #16]
 800fe00:	615a      	str	r2, [r3, #20]
 800fe02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800fe04:	4b38      	ldr	r3, [pc, #224]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fe0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800fe0c:	4b36      	ldr	r3, [pc, #216]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe12:	4b35      	ldr	r3, [pc, #212]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800fe18:	4b33      	ldr	r3, [pc, #204]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe20:	4b31      	ldr	r3, [pc, #196]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe26:	4b30      	ldr	r3, [pc, #192]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe28:	2200      	movs	r2, #0
 800fe2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fe2c:	482e      	ldr	r0, [pc, #184]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe2e:	f003 fe2d 	bl	8013a8c <HAL_TIM_Base_Init>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800fe38:	f7ff fd82 	bl	800f940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fe42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe46:	4619      	mov	r1, r3
 800fe48:	4827      	ldr	r0, [pc, #156]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe4a:	f004 f9c1 	bl	80141d0 <HAL_TIM_ConfigClockSource>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d001      	beq.n	800fe58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800fe54:	f7ff fd74 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800fe58:	4823      	ldr	r0, [pc, #140]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe5a:	f003 fed7 	bl	8013c0c <HAL_TIM_PWM_Init>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800fe64:	f7ff fd6c 	bl	800f940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fe70:	f107 0320 	add.w	r3, r7, #32
 800fe74:	4619      	mov	r1, r3
 800fe76:	481c      	ldr	r0, [pc, #112]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe78:	f004 fdaa 	bl	80149d0 <HAL_TIMEx_MasterConfigSynchronization>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800fe82:	f7ff fd5d 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fe86:	2360      	movs	r3, #96	; 0x60
 800fe88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fe92:	2300      	movs	r3, #0
 800fe94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fe96:	1d3b      	adds	r3, r7, #4
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	4812      	ldr	r0, [pc, #72]	; (800fee8 <MX_TIM2_Init+0x114>)
 800fe9e:	f004 f8d5 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d001      	beq.n	800feac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800fea8:	f7ff fd4a 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800feac:	1d3b      	adds	r3, r7, #4
 800feae:	2208      	movs	r2, #8
 800feb0:	4619      	mov	r1, r3
 800feb2:	480d      	ldr	r0, [pc, #52]	; (800fee8 <MX_TIM2_Init+0x114>)
 800feb4:	f004 f8ca 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 800feb8:	4603      	mov	r3, r0
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800febe:	f7ff fd3f 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fec2:	1d3b      	adds	r3, r7, #4
 800fec4:	220c      	movs	r2, #12
 800fec6:	4619      	mov	r1, r3
 800fec8:	4807      	ldr	r0, [pc, #28]	; (800fee8 <MX_TIM2_Init+0x114>)
 800feca:	f004 f8bf 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d001      	beq.n	800fed8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800fed4:	f7ff fd34 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800fed8:	4803      	ldr	r0, [pc, #12]	; (800fee8 <MX_TIM2_Init+0x114>)
 800feda:	f000 fb9d 	bl	8010618 <HAL_TIM_MspPostInit>

}
 800fede:	bf00      	nop
 800fee0:	3738      	adds	r7, #56	; 0x38
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	200011e8 	.word	0x200011e8

0800feec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08e      	sub	sp, #56	; 0x38
 800fef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fef6:	2200      	movs	r2, #0
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	605a      	str	r2, [r3, #4]
 800fefc:	609a      	str	r2, [r3, #8]
 800fefe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ff00:	f107 0320 	add.w	r3, r7, #32
 800ff04:	2200      	movs	r2, #0
 800ff06:	601a      	str	r2, [r3, #0]
 800ff08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ff0a:	1d3b      	adds	r3, r7, #4
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	605a      	str	r2, [r3, #4]
 800ff12:	609a      	str	r2, [r3, #8]
 800ff14:	60da      	str	r2, [r3, #12]
 800ff16:	611a      	str	r2, [r3, #16]
 800ff18:	615a      	str	r2, [r3, #20]
 800ff1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ff1c:	4b31      	ldr	r3, [pc, #196]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff1e:	4a32      	ldr	r2, [pc, #200]	; (800ffe8 <MX_TIM3_Init+0xfc>)
 800ff20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ff22:	4b30      	ldr	r3, [pc, #192]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff28:	4b2e      	ldr	r3, [pc, #184]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105-1;
 800ff2e:	4b2d      	ldr	r3, [pc, #180]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff30:	2268      	movs	r2, #104	; 0x68
 800ff32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff34:	4b2b      	ldr	r3, [pc, #172]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff36:	2200      	movs	r2, #0
 800ff38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ff3a:	4b2a      	ldr	r3, [pc, #168]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff3c:	2280      	movs	r2, #128	; 0x80
 800ff3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ff40:	4828      	ldr	r0, [pc, #160]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff42:	f003 fda3 	bl	8013a8c <HAL_TIM_Base_Init>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800ff4c:	f7ff fcf8 	bl	800f940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ff56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	4821      	ldr	r0, [pc, #132]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff5e:	f004 f937 	bl	80141d0 <HAL_TIM_ConfigClockSource>
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d001      	beq.n	800ff6c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800ff68:	f7ff fcea 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ff6c:	481d      	ldr	r0, [pc, #116]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff6e:	f003 fe4d 	bl	8013c0c <HAL_TIM_PWM_Init>
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d001      	beq.n	800ff7c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800ff78:	f7ff fce2 	bl	800f940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff80:	2300      	movs	r3, #0
 800ff82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ff84:	f107 0320 	add.w	r3, r7, #32
 800ff88:	4619      	mov	r1, r3
 800ff8a:	4816      	ldr	r0, [pc, #88]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ff8c:	f004 fd20 	bl	80149d0 <HAL_TIMEx_MasterConfigSynchronization>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800ff96:	f7ff fcd3 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ff9a:	2360      	movs	r3, #96	; 0x60
 800ff9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ffaa:	1d3b      	adds	r3, r7, #4
 800ffac:	2200      	movs	r2, #0
 800ffae:	4619      	mov	r1, r3
 800ffb0:	480c      	ldr	r0, [pc, #48]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ffb2:	f004 f84b 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d001      	beq.n	800ffc0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800ffbc:	f7ff fcc0 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ffc0:	1d3b      	adds	r3, r7, #4
 800ffc2:	2208      	movs	r2, #8
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4807      	ldr	r0, [pc, #28]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ffc8:	f004 f840 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800ffd2:	f7ff fcb5 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ffd6:	4803      	ldr	r0, [pc, #12]	; (800ffe4 <MX_TIM3_Init+0xf8>)
 800ffd8:	f000 fb1e 	bl	8010618 <HAL_TIM_MspPostInit>

}
 800ffdc:	bf00      	nop
 800ffde:	3738      	adds	r7, #56	; 0x38
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	20001230 	.word	0x20001230
 800ffe8:	40000400 	.word	0x40000400

0800ffec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b08e      	sub	sp, #56	; 0x38
 800fff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fff6:	2200      	movs	r2, #0
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	605a      	str	r2, [r3, #4]
 800fffc:	609a      	str	r2, [r3, #8]
 800fffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010000:	f107 0320 	add.w	r3, r7, #32
 8010004:	2200      	movs	r2, #0
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801000a:	1d3b      	adds	r3, r7, #4
 801000c:	2200      	movs	r2, #0
 801000e:	601a      	str	r2, [r3, #0]
 8010010:	605a      	str	r2, [r3, #4]
 8010012:	609a      	str	r2, [r3, #8]
 8010014:	60da      	str	r2, [r3, #12]
 8010016:	611a      	str	r2, [r3, #16]
 8010018:	615a      	str	r2, [r3, #20]
 801001a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 801001c:	4b37      	ldr	r3, [pc, #220]	; (80100fc <MX_TIM4_Init+0x110>)
 801001e:	4a38      	ldr	r2, [pc, #224]	; (8010100 <MX_TIM4_Init+0x114>)
 8010020:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8010022:	4b36      	ldr	r3, [pc, #216]	; (80100fc <MX_TIM4_Init+0x110>)
 8010024:	2200      	movs	r2, #0
 8010026:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010028:	4b34      	ldr	r3, [pc, #208]	; (80100fc <MX_TIM4_Init+0x110>)
 801002a:	2200      	movs	r2, #0
 801002c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 801002e:	4b33      	ldr	r3, [pc, #204]	; (80100fc <MX_TIM4_Init+0x110>)
 8010030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010034:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010036:	4b31      	ldr	r3, [pc, #196]	; (80100fc <MX_TIM4_Init+0x110>)
 8010038:	2200      	movs	r2, #0
 801003a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801003c:	4b2f      	ldr	r3, [pc, #188]	; (80100fc <MX_TIM4_Init+0x110>)
 801003e:	2200      	movs	r2, #0
 8010040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8010042:	482e      	ldr	r0, [pc, #184]	; (80100fc <MX_TIM4_Init+0x110>)
 8010044:	f003 fd22 	bl	8013a8c <HAL_TIM_Base_Init>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 801004e:	f7ff fc77 	bl	800f940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010056:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8010058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801005c:	4619      	mov	r1, r3
 801005e:	4827      	ldr	r0, [pc, #156]	; (80100fc <MX_TIM4_Init+0x110>)
 8010060:	f004 f8b6 	bl	80141d0 <HAL_TIM_ConfigClockSource>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 801006a:	f7ff fc69 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 801006e:	4823      	ldr	r0, [pc, #140]	; (80100fc <MX_TIM4_Init+0x110>)
 8010070:	f003 fdcc 	bl	8013c0c <HAL_TIM_PWM_Init>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 801007a:	f7ff fc61 	bl	800f940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801007e:	2300      	movs	r3, #0
 8010080:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010082:	2300      	movs	r3, #0
 8010084:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8010086:	f107 0320 	add.w	r3, r7, #32
 801008a:	4619      	mov	r1, r3
 801008c:	481b      	ldr	r0, [pc, #108]	; (80100fc <MX_TIM4_Init+0x110>)
 801008e:	f004 fc9f 	bl	80149d0 <HAL_TIMEx_MasterConfigSynchronization>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8010098:	f7ff fc52 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801009c:	2360      	movs	r3, #96	; 0x60
 801009e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80100a4:	2300      	movs	r3, #0
 80100a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80100ac:	1d3b      	adds	r3, r7, #4
 80100ae:	2200      	movs	r2, #0
 80100b0:	4619      	mov	r1, r3
 80100b2:	4812      	ldr	r0, [pc, #72]	; (80100fc <MX_TIM4_Init+0x110>)
 80100b4:	f003 ffca 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80100be:	f7ff fc3f 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80100c2:	1d3b      	adds	r3, r7, #4
 80100c4:	2204      	movs	r2, #4
 80100c6:	4619      	mov	r1, r3
 80100c8:	480c      	ldr	r0, [pc, #48]	; (80100fc <MX_TIM4_Init+0x110>)
 80100ca:	f003 ffbf 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80100d4:	f7ff fc34 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80100d8:	1d3b      	adds	r3, r7, #4
 80100da:	2208      	movs	r2, #8
 80100dc:	4619      	mov	r1, r3
 80100de:	4807      	ldr	r0, [pc, #28]	; (80100fc <MX_TIM4_Init+0x110>)
 80100e0:	f003 ffb4 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d001      	beq.n	80100ee <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80100ea:	f7ff fc29 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80100ee:	4803      	ldr	r0, [pc, #12]	; (80100fc <MX_TIM4_Init+0x110>)
 80100f0:	f000 fa92 	bl	8010618 <HAL_TIM_MspPostInit>

}
 80100f4:	bf00      	nop
 80100f6:	3738      	adds	r7, #56	; 0x38
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	20001278 	.word	0x20001278
 8010100:	40000800 	.word	0x40000800

08010104 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b096      	sub	sp, #88	; 0x58
 8010108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801010a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801010e:	2200      	movs	r2, #0
 8010110:	601a      	str	r2, [r3, #0]
 8010112:	605a      	str	r2, [r3, #4]
 8010114:	609a      	str	r2, [r3, #8]
 8010116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
 8010120:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010126:	2200      	movs	r2, #0
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	605a      	str	r2, [r3, #4]
 801012c:	609a      	str	r2, [r3, #8]
 801012e:	60da      	str	r2, [r3, #12]
 8010130:	611a      	str	r2, [r3, #16]
 8010132:	615a      	str	r2, [r3, #20]
 8010134:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010136:	1d3b      	adds	r3, r7, #4
 8010138:	2220      	movs	r2, #32
 801013a:	2100      	movs	r1, #0
 801013c:	4618      	mov	r0, r3
 801013e:	f00c f937 	bl	801c3b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8010142:	4b4a      	ldr	r3, [pc, #296]	; (801026c <MX_TIM8_Init+0x168>)
 8010144:	4a4a      	ldr	r2, [pc, #296]	; (8010270 <MX_TIM8_Init+0x16c>)
 8010146:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8010148:	4b48      	ldr	r3, [pc, #288]	; (801026c <MX_TIM8_Init+0x168>)
 801014a:	2201      	movs	r2, #1
 801014c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801014e:	4b47      	ldr	r3, [pc, #284]	; (801026c <MX_TIM8_Init+0x168>)
 8010150:	2200      	movs	r2, #0
 8010152:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8010154:	4b45      	ldr	r3, [pc, #276]	; (801026c <MX_TIM8_Init+0x168>)
 8010156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801015a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801015c:	4b43      	ldr	r3, [pc, #268]	; (801026c <MX_TIM8_Init+0x168>)
 801015e:	2200      	movs	r2, #0
 8010160:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8010162:	4b42      	ldr	r3, [pc, #264]	; (801026c <MX_TIM8_Init+0x168>)
 8010164:	2200      	movs	r2, #0
 8010166:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010168:	4b40      	ldr	r3, [pc, #256]	; (801026c <MX_TIM8_Init+0x168>)
 801016a:	2200      	movs	r2, #0
 801016c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801016e:	483f      	ldr	r0, [pc, #252]	; (801026c <MX_TIM8_Init+0x168>)
 8010170:	f003 fc8c 	bl	8013a8c <HAL_TIM_Base_Init>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 801017a:	f7ff fbe1 	bl	800f940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801017e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010182:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8010184:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010188:	4619      	mov	r1, r3
 801018a:	4838      	ldr	r0, [pc, #224]	; (801026c <MX_TIM8_Init+0x168>)
 801018c:	f004 f820 	bl	80141d0 <HAL_TIM_ConfigClockSource>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8010196:	f7ff fbd3 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801019a:	4834      	ldr	r0, [pc, #208]	; (801026c <MX_TIM8_Init+0x168>)
 801019c:	f003 fd36 	bl	8013c0c <HAL_TIM_PWM_Init>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d001      	beq.n	80101aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80101a6:	f7ff fbcb 	bl	800f940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80101aa:	2300      	movs	r3, #0
 80101ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80101ae:	2300      	movs	r3, #0
 80101b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80101b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101b6:	4619      	mov	r1, r3
 80101b8:	482c      	ldr	r0, [pc, #176]	; (801026c <MX_TIM8_Init+0x168>)
 80101ba:	f004 fc09 	bl	80149d0 <HAL_TIMEx_MasterConfigSynchronization>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80101c4:	f7ff fbbc 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80101c8:	2360      	movs	r3, #96	; 0x60
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80101d0:	2300      	movs	r3, #0
 80101d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80101d4:	2300      	movs	r3, #0
 80101d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80101d8:	2300      	movs	r3, #0
 80101da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80101dc:	2300      	movs	r3, #0
 80101de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80101e0:	2300      	movs	r3, #0
 80101e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80101e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101e8:	2200      	movs	r2, #0
 80101ea:	4619      	mov	r1, r3
 80101ec:	481f      	ldr	r0, [pc, #124]	; (801026c <MX_TIM8_Init+0x168>)
 80101ee:	f003 ff2d 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d001      	beq.n	80101fc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80101f8:	f7ff fba2 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80101fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010200:	2204      	movs	r2, #4
 8010202:	4619      	mov	r1, r3
 8010204:	4819      	ldr	r0, [pc, #100]	; (801026c <MX_TIM8_Init+0x168>)
 8010206:	f003 ff21 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8010210:	f7ff fb96 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8010214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010218:	220c      	movs	r2, #12
 801021a:	4619      	mov	r1, r3
 801021c:	4813      	ldr	r0, [pc, #76]	; (801026c <MX_TIM8_Init+0x168>)
 801021e:	f003 ff15 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8010228:	f7ff fb8a 	bl	800f940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801022c:	2300      	movs	r3, #0
 801022e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8010230:	2300      	movs	r3, #0
 8010232:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010234:	2300      	movs	r3, #0
 8010236:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8010238:	2300      	movs	r3, #0
 801023a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801023c:	2300      	movs	r3, #0
 801023e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010244:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010246:	2300      	movs	r3, #0
 8010248:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801024a:	1d3b      	adds	r3, r7, #4
 801024c:	4619      	mov	r1, r3
 801024e:	4807      	ldr	r0, [pc, #28]	; (801026c <MX_TIM8_Init+0x168>)
 8010250:	f004 fc3a 	bl	8014ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 801025a:	f7ff fb71 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801025e:	4803      	ldr	r0, [pc, #12]	; (801026c <MX_TIM8_Init+0x168>)
 8010260:	f000 f9da 	bl	8010618 <HAL_TIM_MspPostInit>

}
 8010264:	bf00      	nop
 8010266:	3758      	adds	r7, #88	; 0x58
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	200012c0 	.word	0x200012c0
 8010270:	40010400 	.word	0x40010400

08010274 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b088      	sub	sp, #32
 8010278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801027a:	1d3b      	adds	r3, r7, #4
 801027c:	2200      	movs	r2, #0
 801027e:	601a      	str	r2, [r3, #0]
 8010280:	605a      	str	r2, [r3, #4]
 8010282:	609a      	str	r2, [r3, #8]
 8010284:	60da      	str	r2, [r3, #12]
 8010286:	611a      	str	r2, [r3, #16]
 8010288:	615a      	str	r2, [r3, #20]
 801028a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 801028c:	4b1e      	ldr	r3, [pc, #120]	; (8010308 <MX_TIM10_Init+0x94>)
 801028e:	4a1f      	ldr	r2, [pc, #124]	; (801030c <MX_TIM10_Init+0x98>)
 8010290:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8010292:	4b1d      	ldr	r3, [pc, #116]	; (8010308 <MX_TIM10_Init+0x94>)
 8010294:	2201      	movs	r2, #1
 8010296:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010298:	4b1b      	ldr	r3, [pc, #108]	; (8010308 <MX_TIM10_Init+0x94>)
 801029a:	2200      	movs	r2, #0
 801029c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 801029e:	4b1a      	ldr	r3, [pc, #104]	; (8010308 <MX_TIM10_Init+0x94>)
 80102a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80102a6:	4b18      	ldr	r3, [pc, #96]	; (8010308 <MX_TIM10_Init+0x94>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80102ac:	4b16      	ldr	r3, [pc, #88]	; (8010308 <MX_TIM10_Init+0x94>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80102b2:	4815      	ldr	r0, [pc, #84]	; (8010308 <MX_TIM10_Init+0x94>)
 80102b4:	f003 fbea 	bl	8013a8c <HAL_TIM_Base_Init>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80102be:	f7ff fb3f 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80102c2:	4811      	ldr	r0, [pc, #68]	; (8010308 <MX_TIM10_Init+0x94>)
 80102c4:	f003 fca2 	bl	8013c0c <HAL_TIM_PWM_Init>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80102ce:	f7ff fb37 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80102d2:	2360      	movs	r3, #96	; 0x60
 80102d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80102d6:	2300      	movs	r3, #0
 80102d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80102da:	2300      	movs	r3, #0
 80102dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80102de:	2300      	movs	r3, #0
 80102e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80102e2:	1d3b      	adds	r3, r7, #4
 80102e4:	2200      	movs	r2, #0
 80102e6:	4619      	mov	r1, r3
 80102e8:	4807      	ldr	r0, [pc, #28]	; (8010308 <MX_TIM10_Init+0x94>)
 80102ea:	f003 feaf 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80102f4:	f7ff fb24 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80102f8:	4803      	ldr	r0, [pc, #12]	; (8010308 <MX_TIM10_Init+0x94>)
 80102fa:	f000 f98d 	bl	8010618 <HAL_TIM_MspPostInit>

}
 80102fe:	bf00      	nop
 8010300:	3720      	adds	r7, #32
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	20001308 	.word	0x20001308
 801030c:	40014400 	.word	0x40014400

08010310 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b088      	sub	sp, #32
 8010314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8010316:	1d3b      	adds	r3, r7, #4
 8010318:	2200      	movs	r2, #0
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	605a      	str	r2, [r3, #4]
 801031e:	609a      	str	r2, [r3, #8]
 8010320:	60da      	str	r2, [r3, #12]
 8010322:	611a      	str	r2, [r3, #16]
 8010324:	615a      	str	r2, [r3, #20]
 8010326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8010328:	4b1e      	ldr	r3, [pc, #120]	; (80103a4 <MX_TIM11_Init+0x94>)
 801032a:	4a1f      	ldr	r2, [pc, #124]	; (80103a8 <MX_TIM11_Init+0x98>)
 801032c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 801032e:	4b1d      	ldr	r3, [pc, #116]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010330:	2201      	movs	r2, #1
 8010332:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010334:	4b1b      	ldr	r3, [pc, #108]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010336:	2200      	movs	r2, #0
 8010338:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 801033a:	4b1a      	ldr	r3, [pc, #104]	; (80103a4 <MX_TIM11_Init+0x94>)
 801033c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010340:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010342:	4b18      	ldr	r3, [pc, #96]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010344:	2200      	movs	r2, #0
 8010346:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010348:	4b16      	ldr	r3, [pc, #88]	; (80103a4 <MX_TIM11_Init+0x94>)
 801034a:	2200      	movs	r2, #0
 801034c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 801034e:	4815      	ldr	r0, [pc, #84]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010350:	f003 fb9c 	bl	8013a8c <HAL_TIM_Base_Init>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 801035a:	f7ff faf1 	bl	800f940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 801035e:	4811      	ldr	r0, [pc, #68]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010360:	f003 fc54 	bl	8013c0c <HAL_TIM_PWM_Init>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d001      	beq.n	801036e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 801036a:	f7ff fae9 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801036e:	2360      	movs	r3, #96	; 0x60
 8010370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8010372:	2300      	movs	r3, #0
 8010374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010376:	2300      	movs	r3, #0
 8010378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801037a:	2300      	movs	r3, #0
 801037c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801037e:	1d3b      	adds	r3, r7, #4
 8010380:	2200      	movs	r2, #0
 8010382:	4619      	mov	r1, r3
 8010384:	4807      	ldr	r0, [pc, #28]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010386:	f003 fe61 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8010390:	f7ff fad6 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8010394:	4803      	ldr	r0, [pc, #12]	; (80103a4 <MX_TIM11_Init+0x94>)
 8010396:	f000 f93f 	bl	8010618 <HAL_TIM_MspPostInit>

}
 801039a:	bf00      	nop
 801039c:	3720      	adds	r7, #32
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	20001350 	.word	0x20001350
 80103a8:	40014800 	.word	0x40014800

080103ac <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b088      	sub	sp, #32
 80103b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80103b2:	1d3b      	adds	r3, r7, #4
 80103b4:	2200      	movs	r2, #0
 80103b6:	601a      	str	r2, [r3, #0]
 80103b8:	605a      	str	r2, [r3, #4]
 80103ba:	609a      	str	r2, [r3, #8]
 80103bc:	60da      	str	r2, [r3, #12]
 80103be:	611a      	str	r2, [r3, #16]
 80103c0:	615a      	str	r2, [r3, #20]
 80103c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80103c4:	4b1a      	ldr	r3, [pc, #104]	; (8010430 <MX_TIM12_Init+0x84>)
 80103c6:	4a1b      	ldr	r2, [pc, #108]	; (8010434 <MX_TIM12_Init+0x88>)
 80103c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80103ca:	4b19      	ldr	r3, [pc, #100]	; (8010430 <MX_TIM12_Init+0x84>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80103d0:	4b17      	ldr	r3, [pc, #92]	; (8010430 <MX_TIM12_Init+0x84>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80103d6:	4b16      	ldr	r3, [pc, #88]	; (8010430 <MX_TIM12_Init+0x84>)
 80103d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80103de:	4b14      	ldr	r3, [pc, #80]	; (8010430 <MX_TIM12_Init+0x84>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80103e4:	4b12      	ldr	r3, [pc, #72]	; (8010430 <MX_TIM12_Init+0x84>)
 80103e6:	2200      	movs	r2, #0
 80103e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80103ea:	4811      	ldr	r0, [pc, #68]	; (8010430 <MX_TIM12_Init+0x84>)
 80103ec:	f003 fc0e 	bl	8013c0c <HAL_TIM_PWM_Init>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80103f6:	f7ff faa3 	bl	800f940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80103fa:	2360      	movs	r3, #96	; 0x60
 80103fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80103fe:	2300      	movs	r3, #0
 8010400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010402:	2300      	movs	r3, #0
 8010404:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010406:	2300      	movs	r3, #0
 8010408:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801040a:	1d3b      	adds	r3, r7, #4
 801040c:	2204      	movs	r2, #4
 801040e:	4619      	mov	r1, r3
 8010410:	4807      	ldr	r0, [pc, #28]	; (8010430 <MX_TIM12_Init+0x84>)
 8010412:	f003 fe1b 	bl	801404c <HAL_TIM_PWM_ConfigChannel>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d001      	beq.n	8010420 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 801041c:	f7ff fa90 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8010420:	4803      	ldr	r0, [pc, #12]	; (8010430 <MX_TIM12_Init+0x84>)
 8010422:	f000 f8f9 	bl	8010618 <HAL_TIM_MspPostInit>

}
 8010426:	bf00      	nop
 8010428:	3720      	adds	r7, #32
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	20001398 	.word	0x20001398
 8010434:	40001800 	.word	0x40001800

08010438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b088      	sub	sp, #32
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010448:	d10e      	bne.n	8010468 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801044a:	2300      	movs	r3, #0
 801044c:	61fb      	str	r3, [r7, #28]
 801044e:	4b59      	ldr	r3, [pc, #356]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010452:	4a58      	ldr	r2, [pc, #352]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010454:	f043 0301 	orr.w	r3, r3, #1
 8010458:	6413      	str	r3, [r2, #64]	; 0x40
 801045a:	4b56      	ldr	r3, [pc, #344]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 801045c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801045e:	f003 0301 	and.w	r3, r3, #1
 8010462:	61fb      	str	r3, [r7, #28]
 8010464:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8010466:	e0a0      	b.n	80105aa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM3)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a52      	ldr	r2, [pc, #328]	; (80105b8 <HAL_TIM_Base_MspInit+0x180>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d144      	bne.n	80104fc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010472:	2300      	movs	r3, #0
 8010474:	61bb      	str	r3, [r7, #24]
 8010476:	4b4f      	ldr	r3, [pc, #316]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801047a:	4a4e      	ldr	r2, [pc, #312]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 801047c:	f043 0302 	orr.w	r3, r3, #2
 8010480:	6413      	str	r3, [r2, #64]	; 0x40
 8010482:	4b4c      	ldr	r3, [pc, #304]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010486:	f003 0302 	and.w	r3, r3, #2
 801048a:	61bb      	str	r3, [r7, #24]
 801048c:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 801048e:	4b4b      	ldr	r3, [pc, #300]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 8010490:	4a4b      	ldr	r2, [pc, #300]	; (80105c0 <HAL_TIM_Base_MspInit+0x188>)
 8010492:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8010494:	4b49      	ldr	r3, [pc, #292]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 8010496:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801049a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801049c:	4b47      	ldr	r3, [pc, #284]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 801049e:	2240      	movs	r2, #64	; 0x40
 80104a0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80104a2:	4b46      	ldr	r3, [pc, #280]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80104a8:	4b44      	ldr	r3, [pc, #272]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80104ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80104b0:	4b42      	ldr	r3, [pc, #264]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80104b8:	4b40      	ldr	r3, [pc, #256]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80104be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80104c0:	4b3e      	ldr	r3, [pc, #248]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80104c6:	4b3d      	ldr	r3, [pc, #244]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80104cc:	4b3b      	ldr	r3, [pc, #236]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80104d2:	483a      	ldr	r0, [pc, #232]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104d4:	f002 f830 	bl	8012538 <HAL_DMA_Init>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 80104de:	f7ff fa2f 	bl	800f940 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a35      	ldr	r2, [pc, #212]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104e6:	625a      	str	r2, [r3, #36]	; 0x24
 80104e8:	4a34      	ldr	r2, [pc, #208]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a32      	ldr	r2, [pc, #200]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104f2:	639a      	str	r2, [r3, #56]	; 0x38
 80104f4:	4a31      	ldr	r2, [pc, #196]	; (80105bc <HAL_TIM_Base_MspInit+0x184>)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80104fa:	e056      	b.n	80105aa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM4)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a30      	ldr	r2, [pc, #192]	; (80105c4 <HAL_TIM_Base_MspInit+0x18c>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d10e      	bne.n	8010524 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010506:	2300      	movs	r3, #0
 8010508:	617b      	str	r3, [r7, #20]
 801050a:	4b2a      	ldr	r3, [pc, #168]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 801050c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801050e:	4a29      	ldr	r2, [pc, #164]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010510:	f043 0304 	orr.w	r3, r3, #4
 8010514:	6413      	str	r3, [r2, #64]	; 0x40
 8010516:	4b27      	ldr	r3, [pc, #156]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051a:	f003 0304 	and.w	r3, r3, #4
 801051e:	617b      	str	r3, [r7, #20]
 8010520:	697b      	ldr	r3, [r7, #20]
}
 8010522:	e042      	b.n	80105aa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM8)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a27      	ldr	r2, [pc, #156]	; (80105c8 <HAL_TIM_Base_MspInit+0x190>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d10e      	bne.n	801054c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801052e:	2300      	movs	r3, #0
 8010530:	613b      	str	r3, [r7, #16]
 8010532:	4b20      	ldr	r3, [pc, #128]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010536:	4a1f      	ldr	r2, [pc, #124]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010538:	f043 0302 	orr.w	r3, r3, #2
 801053c:	6453      	str	r3, [r2, #68]	; 0x44
 801053e:	4b1d      	ldr	r3, [pc, #116]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010542:	f003 0302 	and.w	r3, r3, #2
 8010546:	613b      	str	r3, [r7, #16]
 8010548:	693b      	ldr	r3, [r7, #16]
}
 801054a:	e02e      	b.n	80105aa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM10)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a1e      	ldr	r2, [pc, #120]	; (80105cc <HAL_TIM_Base_MspInit+0x194>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d116      	bne.n	8010584 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8010556:	2300      	movs	r3, #0
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	4b16      	ldr	r3, [pc, #88]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 801055c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801055e:	4a15      	ldr	r2, [pc, #84]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010564:	6453      	str	r3, [r2, #68]	; 0x44
 8010566:	4b13      	ldr	r3, [pc, #76]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801056e:	60fb      	str	r3, [r7, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8010572:	2200      	movs	r2, #0
 8010574:	210f      	movs	r1, #15
 8010576:	2019      	movs	r0, #25
 8010578:	f001 ff98 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 801057c:	2019      	movs	r0, #25
 801057e:	f001 ffb1 	bl	80124e4 <HAL_NVIC_EnableIRQ>
}
 8010582:	e012      	b.n	80105aa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM11)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4a11      	ldr	r2, [pc, #68]	; (80105d0 <HAL_TIM_Base_MspInit+0x198>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d10d      	bne.n	80105aa <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM11_CLK_ENABLE();
 801058e:	2300      	movs	r3, #0
 8010590:	60bb      	str	r3, [r7, #8]
 8010592:	4b08      	ldr	r3, [pc, #32]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010596:	4a07      	ldr	r2, [pc, #28]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 8010598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801059c:	6453      	str	r3, [r2, #68]	; 0x44
 801059e:	4b05      	ldr	r3, [pc, #20]	; (80105b4 <HAL_TIM_Base_MspInit+0x17c>)
 80105a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80105a6:	60bb      	str	r3, [r7, #8]
 80105a8:	68bb      	ldr	r3, [r7, #8]
}
 80105aa:	bf00      	nop
 80105ac:	3720      	adds	r7, #32
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	40023800 	.word	0x40023800
 80105b8:	40000400 	.word	0x40000400
 80105bc:	200013e0 	.word	0x200013e0
 80105c0:	40026070 	.word	0x40026070
 80105c4:	40000800 	.word	0x40000800
 80105c8:	40010400 	.word	0x40010400
 80105cc:	40014400 	.word	0x40014400
 80105d0:	40014800 	.word	0x40014800

080105d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a0b      	ldr	r2, [pc, #44]	; (8010610 <HAL_TIM_PWM_MspInit+0x3c>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d10d      	bne.n	8010602 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80105e6:	2300      	movs	r3, #0
 80105e8:	60fb      	str	r3, [r7, #12]
 80105ea:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <HAL_TIM_PWM_MspInit+0x40>)
 80105ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ee:	4a09      	ldr	r2, [pc, #36]	; (8010614 <HAL_TIM_PWM_MspInit+0x40>)
 80105f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105f4:	6413      	str	r3, [r2, #64]	; 0x40
 80105f6:	4b07      	ldr	r3, [pc, #28]	; (8010614 <HAL_TIM_PWM_MspInit+0x40>)
 80105f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105fe:	60fb      	str	r3, [r7, #12]
 8010600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8010602:	bf00      	nop
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	40001800 	.word	0x40001800
 8010614:	40023800 	.word	0x40023800

08010618 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b092      	sub	sp, #72	; 0x48
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010620:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010624:	2200      	movs	r2, #0
 8010626:	601a      	str	r2, [r3, #0]
 8010628:	605a      	str	r2, [r3, #4]
 801062a:	609a      	str	r2, [r3, #8]
 801062c:	60da      	str	r2, [r3, #12]
 801062e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010638:	d13e      	bne.n	80106b8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801063a:	2300      	movs	r3, #0
 801063c:	633b      	str	r3, [r7, #48]	; 0x30
 801063e:	4b99      	ldr	r3, [pc, #612]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010642:	4a98      	ldr	r2, [pc, #608]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010644:	f043 0302 	orr.w	r3, r3, #2
 8010648:	6313      	str	r3, [r2, #48]	; 0x30
 801064a:	4b96      	ldr	r3, [pc, #600]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801064e:	f003 0302 	and.w	r3, r3, #2
 8010652:	633b      	str	r3, [r7, #48]	; 0x30
 8010654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010656:	2300      	movs	r3, #0
 8010658:	62fb      	str	r3, [r7, #44]	; 0x2c
 801065a:	4b92      	ldr	r3, [pc, #584]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065e:	4a91      	ldr	r2, [pc, #580]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010660:	f043 0301 	orr.w	r3, r3, #1
 8010664:	6313      	str	r3, [r2, #48]	; 0x30
 8010666:	4b8f      	ldr	r3, [pc, #572]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801066a:	f003 0301 	and.w	r3, r3, #1
 801066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LP2_control_Pin|D3_control_Pin;
 8010672:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010676:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010678:	2302      	movs	r3, #2
 801067a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801067c:	2300      	movs	r3, #0
 801067e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010680:	2300      	movs	r3, #0
 8010682:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010684:	2301      	movs	r3, #1
 8010686:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801068c:	4619      	mov	r1, r3
 801068e:	4886      	ldr	r0, [pc, #536]	; (80108a8 <HAL_TIM_MspPostInit+0x290>)
 8010690:	f002 fb54 	bl	8012d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LP3_control_Pin;
 8010694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010698:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801069a:	2302      	movs	r3, #2
 801069c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801069e:	2300      	movs	r3, #0
 80106a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106a2:	2300      	movs	r3, #0
 80106a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80106a6:	2301      	movs	r3, #1
 80106a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP3_control_GPIO_Port, &GPIO_InitStruct);
 80106aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80106ae:	4619      	mov	r1, r3
 80106b0:	487e      	ldr	r0, [pc, #504]	; (80108ac <HAL_TIM_MspPostInit+0x294>)
 80106b2:	f002 fb43 	bl	8012d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80106b6:	e12d      	b.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM3)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a7c      	ldr	r2, [pc, #496]	; (80108b0 <HAL_TIM_MspPostInit+0x298>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d13d      	bne.n	801073e <HAL_TIM_MspPostInit+0x126>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80106c2:	2300      	movs	r3, #0
 80106c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80106c6:	4b77      	ldr	r3, [pc, #476]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80106c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ca:	4a76      	ldr	r2, [pc, #472]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80106cc:	f043 0304 	orr.w	r3, r3, #4
 80106d0:	6313      	str	r3, [r2, #48]	; 0x30
 80106d2:	4b74      	ldr	r3, [pc, #464]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80106d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d6:	f003 0304 	and.w	r3, r3, #4
 80106da:	62bb      	str	r3, [r7, #40]	; 0x28
 80106dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80106de:	2300      	movs	r3, #0
 80106e0:	627b      	str	r3, [r7, #36]	; 0x24
 80106e2:	4b70      	ldr	r3, [pc, #448]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80106e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e6:	4a6f      	ldr	r2, [pc, #444]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80106e8:	f043 0302 	orr.w	r3, r3, #2
 80106ec:	6313      	str	r3, [r2, #48]	; 0x30
 80106ee:	4b6d      	ldr	r3, [pc, #436]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80106f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f2:	f003 0302 	and.w	r3, r3, #2
 80106f6:	627b      	str	r3, [r7, #36]	; 0x24
 80106f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = D4_control_Pin;
 80106fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010700:	2302      	movs	r3, #2
 8010702:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010704:	2300      	movs	r3, #0
 8010706:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010708:	2300      	movs	r3, #0
 801070a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801070c:	2302      	movs	r3, #2
 801070e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D4_control_GPIO_Port, &GPIO_InitStruct);
 8010710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010714:	4619      	mov	r1, r3
 8010716:	4867      	ldr	r0, [pc, #412]	; (80108b4 <HAL_TIM_MspPostInit+0x29c>)
 8010718:	f002 fb10 	bl	8012d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = D1_control_Pin;
 801071c:	2310      	movs	r3, #16
 801071e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010720:	2302      	movs	r3, #2
 8010722:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010724:	2300      	movs	r3, #0
 8010726:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010728:	2300      	movs	r3, #0
 801072a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801072c:	2302      	movs	r3, #2
 801072e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D1_control_GPIO_Port, &GPIO_InitStruct);
 8010730:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010734:	4619      	mov	r1, r3
 8010736:	485c      	ldr	r0, [pc, #368]	; (80108a8 <HAL_TIM_MspPostInit+0x290>)
 8010738:	f002 fb00 	bl	8012d3c <HAL_GPIO_Init>
}
 801073c:	e0ea      	b.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM4)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a5d      	ldr	r2, [pc, #372]	; (80108b8 <HAL_TIM_MspPostInit+0x2a0>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d13d      	bne.n	80107c4 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010748:	2300      	movs	r3, #0
 801074a:	623b      	str	r3, [r7, #32]
 801074c:	4b55      	ldr	r3, [pc, #340]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010750:	4a54      	ldr	r2, [pc, #336]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010752:	f043 0308 	orr.w	r3, r3, #8
 8010756:	6313      	str	r3, [r2, #48]	; 0x30
 8010758:	4b52      	ldr	r3, [pc, #328]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801075c:	f003 0308 	and.w	r3, r3, #8
 8010760:	623b      	str	r3, [r7, #32]
 8010762:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010764:	2300      	movs	r3, #0
 8010766:	61fb      	str	r3, [r7, #28]
 8010768:	4b4e      	ldr	r3, [pc, #312]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076c:	4a4d      	ldr	r2, [pc, #308]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801076e:	f043 0302 	orr.w	r3, r3, #2
 8010772:	6313      	str	r3, [r2, #48]	; 0x30
 8010774:	4b4b      	ldr	r3, [pc, #300]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010778:	f003 0302 	and.w	r3, r3, #2
 801077c:	61fb      	str	r3, [r7, #28]
 801077e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8010780:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8010784:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010786:	2302      	movs	r3, #2
 8010788:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801078a:	2300      	movs	r3, #0
 801078c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801078e:	2300      	movs	r3, #0
 8010790:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010792:	2302      	movs	r3, #2
 8010794:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801079a:	4619      	mov	r1, r3
 801079c:	4847      	ldr	r0, [pc, #284]	; (80108bc <HAL_TIM_MspPostInit+0x2a4>)
 801079e:	f002 facd 	bl	8012d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP9_control_Pin;
 80107a2:	2380      	movs	r3, #128	; 0x80
 80107a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107a6:	2302      	movs	r3, #2
 80107a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107aa:	2300      	movs	r3, #0
 80107ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107ae:	2300      	movs	r3, #0
 80107b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80107b2:	2302      	movs	r3, #2
 80107b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP9_control_GPIO_Port, &GPIO_InitStruct);
 80107b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80107ba:	4619      	mov	r1, r3
 80107bc:	483a      	ldr	r0, [pc, #232]	; (80108a8 <HAL_TIM_MspPostInit+0x290>)
 80107be:	f002 fabd 	bl	8012d3c <HAL_GPIO_Init>
}
 80107c2:	e0a7      	b.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM8)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a3d      	ldr	r2, [pc, #244]	; (80108c0 <HAL_TIM_MspPostInit+0x2a8>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d11f      	bne.n	801080e <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80107ce:	2300      	movs	r3, #0
 80107d0:	61bb      	str	r3, [r7, #24]
 80107d2:	4b34      	ldr	r3, [pc, #208]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80107d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d6:	4a33      	ldr	r2, [pc, #204]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80107d8:	f043 0304 	orr.w	r3, r3, #4
 80107dc:	6313      	str	r3, [r2, #48]	; 0x30
 80107de:	4b31      	ldr	r3, [pc, #196]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 80107e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e2:	f003 0304 	and.w	r3, r3, #4
 80107e6:	61bb      	str	r3, [r7, #24]
 80107e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LP8_control_Pin|HP2_control_Pin|HP1_control_Pin;
 80107ea:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80107ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107f0:	2302      	movs	r3, #2
 80107f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107f4:	2300      	movs	r3, #0
 80107f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107f8:	2300      	movs	r3, #0
 80107fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80107fc:	2303      	movs	r3, #3
 80107fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010800:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010804:	4619      	mov	r1, r3
 8010806:	482b      	ldr	r0, [pc, #172]	; (80108b4 <HAL_TIM_MspPostInit+0x29c>)
 8010808:	f002 fa98 	bl	8012d3c <HAL_GPIO_Init>
}
 801080c:	e082      	b.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM10)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4a2c      	ldr	r2, [pc, #176]	; (80108c4 <HAL_TIM_MspPostInit+0x2ac>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d11f      	bne.n	8010858 <HAL_TIM_MspPostInit+0x240>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010818:	2300      	movs	r3, #0
 801081a:	617b      	str	r3, [r7, #20]
 801081c:	4b21      	ldr	r3, [pc, #132]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010820:	4a20      	ldr	r2, [pc, #128]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010822:	f043 0302 	orr.w	r3, r3, #2
 8010826:	6313      	str	r3, [r2, #48]	; 0x30
 8010828:	4b1e      	ldr	r3, [pc, #120]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082c:	f003 0302 	and.w	r3, r3, #2
 8010830:	617b      	str	r3, [r7, #20]
 8010832:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = D2_control_Pin;
 8010834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010838:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801083a:	2302      	movs	r3, #2
 801083c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801083e:	2300      	movs	r3, #0
 8010840:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010842:	2300      	movs	r3, #0
 8010844:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8010846:	2303      	movs	r3, #3
 8010848:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D2_control_GPIO_Port, &GPIO_InitStruct);
 801084a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801084e:	4619      	mov	r1, r3
 8010850:	4815      	ldr	r0, [pc, #84]	; (80108a8 <HAL_TIM_MspPostInit+0x290>)
 8010852:	f002 fa73 	bl	8012d3c <HAL_GPIO_Init>
}
 8010856:	e05d      	b.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM11)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a1a      	ldr	r2, [pc, #104]	; (80108c8 <HAL_TIM_MspPostInit+0x2b0>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d134      	bne.n	80108cc <HAL_TIM_MspPostInit+0x2b4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010862:	2300      	movs	r3, #0
 8010864:	613b      	str	r3, [r7, #16]
 8010866:	4b0f      	ldr	r3, [pc, #60]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086a:	4a0e      	ldr	r2, [pc, #56]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 801086c:	f043 0302 	orr.w	r3, r3, #2
 8010870:	6313      	str	r3, [r2, #48]	; 0x30
 8010872:	4b0c      	ldr	r3, [pc, #48]	; (80108a4 <HAL_TIM_MspPostInit+0x28c>)
 8010874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010876:	f003 0302 	and.w	r3, r3, #2
 801087a:	613b      	str	r3, [r7, #16]
 801087c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LP10_control_Pin;
 801087e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010882:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010884:	2302      	movs	r3, #2
 8010886:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010888:	2300      	movs	r3, #0
 801088a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801088c:	2300      	movs	r3, #0
 801088e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8010890:	2303      	movs	r3, #3
 8010892:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP10_control_GPIO_Port, &GPIO_InitStruct);
 8010894:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010898:	4619      	mov	r1, r3
 801089a:	4803      	ldr	r0, [pc, #12]	; (80108a8 <HAL_TIM_MspPostInit+0x290>)
 801089c:	f002 fa4e 	bl	8012d3c <HAL_GPIO_Init>
}
 80108a0:	e038      	b.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
 80108a2:	bf00      	nop
 80108a4:	40023800 	.word	0x40023800
 80108a8:	40020400 	.word	0x40020400
 80108ac:	40020000 	.word	0x40020000
 80108b0:	40000400 	.word	0x40000400
 80108b4:	40020800 	.word	0x40020800
 80108b8:	40000800 	.word	0x40000800
 80108bc:	40020c00 	.word	0x40020c00
 80108c0:	40010400 	.word	0x40010400
 80108c4:	40014400 	.word	0x40014400
 80108c8:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM12)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a12      	ldr	r2, [pc, #72]	; (801091c <HAL_TIM_MspPostInit+0x304>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d11e      	bne.n	8010914 <HAL_TIM_MspPostInit+0x2fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80108d6:	2300      	movs	r3, #0
 80108d8:	60fb      	str	r3, [r7, #12]
 80108da:	4b11      	ldr	r3, [pc, #68]	; (8010920 <HAL_TIM_MspPostInit+0x308>)
 80108dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108de:	4a10      	ldr	r2, [pc, #64]	; (8010920 <HAL_TIM_MspPostInit+0x308>)
 80108e0:	f043 0302 	orr.w	r3, r3, #2
 80108e4:	6313      	str	r3, [r2, #48]	; 0x30
 80108e6:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <HAL_TIM_MspPostInit+0x308>)
 80108e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ea:	f003 0302 	and.w	r3, r3, #2
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LP1_control_Pin;
 80108f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108f8:	2302      	movs	r3, #2
 80108fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108fc:	2300      	movs	r3, #0
 80108fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010900:	2300      	movs	r3, #0
 8010902:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8010904:	2309      	movs	r3, #9
 8010906:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP1_control_GPIO_Port, &GPIO_InitStruct);
 8010908:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801090c:	4619      	mov	r1, r3
 801090e:	4805      	ldr	r0, [pc, #20]	; (8010924 <HAL_TIM_MspPostInit+0x30c>)
 8010910:	f002 fa14 	bl	8012d3c <HAL_GPIO_Init>
}
 8010914:	bf00      	nop
 8010916:	3748      	adds	r7, #72	; 0x48
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	40001800 	.word	0x40001800
 8010920:	40023800 	.word	0x40023800
 8010924:	40020400 	.word	0x40020400

08010928 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801092c:	4b10      	ldr	r3, [pc, #64]	; (8010970 <MX_USART2_UART_Init+0x48>)
 801092e:	4a11      	ldr	r2, [pc, #68]	; (8010974 <MX_USART2_UART_Init+0x4c>)
 8010930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8010932:	4b0f      	ldr	r3, [pc, #60]	; (8010970 <MX_USART2_UART_Init+0x48>)
 8010934:	4a10      	ldr	r2, [pc, #64]	; (8010978 <MX_USART2_UART_Init+0x50>)
 8010936:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010938:	4b0d      	ldr	r3, [pc, #52]	; (8010970 <MX_USART2_UART_Init+0x48>)
 801093a:	2200      	movs	r2, #0
 801093c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801093e:	4b0c      	ldr	r3, [pc, #48]	; (8010970 <MX_USART2_UART_Init+0x48>)
 8010940:	2200      	movs	r2, #0
 8010942:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010944:	4b0a      	ldr	r3, [pc, #40]	; (8010970 <MX_USART2_UART_Init+0x48>)
 8010946:	2200      	movs	r2, #0
 8010948:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801094a:	4b09      	ldr	r3, [pc, #36]	; (8010970 <MX_USART2_UART_Init+0x48>)
 801094c:	220c      	movs	r2, #12
 801094e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010950:	4b07      	ldr	r3, [pc, #28]	; (8010970 <MX_USART2_UART_Init+0x48>)
 8010952:	2200      	movs	r2, #0
 8010954:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010956:	4b06      	ldr	r3, [pc, #24]	; (8010970 <MX_USART2_UART_Init+0x48>)
 8010958:	2200      	movs	r2, #0
 801095a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801095c:	4804      	ldr	r0, [pc, #16]	; (8010970 <MX_USART2_UART_Init+0x48>)
 801095e:	f004 f919 	bl	8014b94 <HAL_UART_Init>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d001      	beq.n	801096c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8010968:	f7fe ffea 	bl	800f940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801096c:	bf00      	nop
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20001440 	.word	0x20001440
 8010974:	40004400 	.word	0x40004400
 8010978:	001e8480 	.word	0x001e8480

0801097c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b08a      	sub	sp, #40	; 0x28
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010984:	f107 0314 	add.w	r3, r7, #20
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	605a      	str	r2, [r3, #4]
 801098e:	609a      	str	r2, [r3, #8]
 8010990:	60da      	str	r2, [r3, #12]
 8010992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a4c      	ldr	r2, [pc, #304]	; (8010acc <HAL_UART_MspInit+0x150>)
 801099a:	4293      	cmp	r3, r2
 801099c:	f040 8091 	bne.w	8010ac2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80109a0:	2300      	movs	r3, #0
 80109a2:	613b      	str	r3, [r7, #16]
 80109a4:	4b4a      	ldr	r3, [pc, #296]	; (8010ad0 <HAL_UART_MspInit+0x154>)
 80109a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a8:	4a49      	ldr	r2, [pc, #292]	; (8010ad0 <HAL_UART_MspInit+0x154>)
 80109aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80109ae:	6413      	str	r3, [r2, #64]	; 0x40
 80109b0:	4b47      	ldr	r3, [pc, #284]	; (8010ad0 <HAL_UART_MspInit+0x154>)
 80109b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109b8:	613b      	str	r3, [r7, #16]
 80109ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80109bc:	2300      	movs	r3, #0
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	4b43      	ldr	r3, [pc, #268]	; (8010ad0 <HAL_UART_MspInit+0x154>)
 80109c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c4:	4a42      	ldr	r2, [pc, #264]	; (8010ad0 <HAL_UART_MspInit+0x154>)
 80109c6:	f043 0308 	orr.w	r3, r3, #8
 80109ca:	6313      	str	r3, [r2, #48]	; 0x30
 80109cc:	4b40      	ldr	r3, [pc, #256]	; (8010ad0 <HAL_UART_MspInit+0x154>)
 80109ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d0:	f003 0308 	and.w	r3, r3, #8
 80109d4:	60fb      	str	r3, [r7, #12]
 80109d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 80109d8:	2360      	movs	r3, #96	; 0x60
 80109da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109dc:	2302      	movs	r3, #2
 80109de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109e0:	2300      	movs	r3, #0
 80109e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109e4:	2303      	movs	r3, #3
 80109e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80109e8:	2307      	movs	r3, #7
 80109ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80109ec:	f107 0314 	add.w	r3, r7, #20
 80109f0:	4619      	mov	r1, r3
 80109f2:	4838      	ldr	r0, [pc, #224]	; (8010ad4 <HAL_UART_MspInit+0x158>)
 80109f4:	f002 f9a2 	bl	8012d3c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80109f8:	4b37      	ldr	r3, [pc, #220]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 80109fa:	4a38      	ldr	r2, [pc, #224]	; (8010adc <HAL_UART_MspInit+0x160>)
 80109fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80109fe:	4b36      	ldr	r3, [pc, #216]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010a04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010a06:	4b34      	ldr	r3, [pc, #208]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a08:	2240      	movs	r2, #64	; 0x40
 8010a0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010a0c:	4b32      	ldr	r3, [pc, #200]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a0e:	2200      	movs	r2, #0
 8010a10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010a12:	4b31      	ldr	r3, [pc, #196]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010a1a:	4b2f      	ldr	r3, [pc, #188]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010a20:	4b2d      	ldr	r3, [pc, #180]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8010a26:	4b2c      	ldr	r3, [pc, #176]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010a2c:	4b2a      	ldr	r3, [pc, #168]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010a32:	4b29      	ldr	r3, [pc, #164]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8010a38:	4827      	ldr	r0, [pc, #156]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a3a:	f001 fd7d 	bl	8012538 <HAL_DMA_Init>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8010a44:	f7fe ff7c 	bl	800f940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a23      	ldr	r2, [pc, #140]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8010a4e:	4a22      	ldr	r2, [pc, #136]	; (8010ad8 <HAL_UART_MspInit+0x15c>)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8010a54:	4b22      	ldr	r3, [pc, #136]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a56:	4a23      	ldr	r2, [pc, #140]	; (8010ae4 <HAL_UART_MspInit+0x168>)
 8010a58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8010a5a:	4b21      	ldr	r3, [pc, #132]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010a60:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010a62:	4b1f      	ldr	r3, [pc, #124]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010a68:	4b1d      	ldr	r3, [pc, #116]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010a6e:	4b1c      	ldr	r3, [pc, #112]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010a76:	4b1a      	ldr	r3, [pc, #104]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a78:	2200      	movs	r2, #0
 8010a7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010a7c:	4b18      	ldr	r3, [pc, #96]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a7e:	2200      	movs	r2, #0
 8010a80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8010a82:	4b17      	ldr	r3, [pc, #92]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a88:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010a8a:	4b15      	ldr	r3, [pc, #84]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010a90:	4b13      	ldr	r3, [pc, #76]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a92:	2200      	movs	r2, #0
 8010a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8010a96:	4812      	ldr	r0, [pc, #72]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010a98:	f001 fd4e 	bl	8012538 <HAL_DMA_Init>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d001      	beq.n	8010aa6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8010aa2:	f7fe ff4d 	bl	800f940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4a0d      	ldr	r2, [pc, #52]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8010aac:	4a0c      	ldr	r2, [pc, #48]	; (8010ae0 <HAL_UART_MspInit+0x164>)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	2105      	movs	r1, #5
 8010ab6:	2026      	movs	r0, #38	; 0x26
 8010ab8:	f001 fcf8 	bl	80124ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8010abc:	2026      	movs	r0, #38	; 0x26
 8010abe:	f001 fd11 	bl	80124e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8010ac2:	bf00      	nop
 8010ac4:	3728      	adds	r7, #40	; 0x28
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	40004400 	.word	0x40004400
 8010ad0:	40023800 	.word	0x40023800
 8010ad4:	40020c00 	.word	0x40020c00
 8010ad8:	20001484 	.word	0x20001484
 8010adc:	400260a0 	.word	0x400260a0
 8010ae0:	200014e4 	.word	0x200014e4
 8010ae4:	40026088 	.word	0x40026088

08010ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010aec:	480d      	ldr	r0, [pc, #52]	; (8010b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010aee:	490e      	ldr	r1, [pc, #56]	; (8010b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010af0:	4a0e      	ldr	r2, [pc, #56]	; (8010b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010af4:	e002      	b.n	8010afc <LoopCopyDataInit>

08010af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010afa:	3304      	adds	r3, #4

08010afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010b00:	d3f9      	bcc.n	8010af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010b02:	4a0b      	ldr	r2, [pc, #44]	; (8010b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010b04:	4c0b      	ldr	r4, [pc, #44]	; (8010b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010b08:	e001      	b.n	8010b0e <LoopFillZerobss>

08010b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010b0c:	3204      	adds	r2, #4

08010b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010b10:	d3fb      	bcc.n	8010b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010b12:	f7ff f94d 	bl	800fdb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010b16:	f00b fc05 	bl	801c324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010b1a:	f7fe fe67 	bl	800f7ec <main>
  bx  lr    
 8010b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010b28:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8010b2c:	0801f76c 	.word	0x0801f76c
  ldr r2, =_sbss
 8010b30:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8010b34:	20007514 	.word	0x20007514

08010b38 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010b38:	e7fe      	b.n	8010b38 <CAN1_SCE_IRQHandler>
	...

08010b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010b40:	4b0e      	ldr	r3, [pc, #56]	; (8010b7c <HAL_Init+0x40>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a0d      	ldr	r2, [pc, #52]	; (8010b7c <HAL_Init+0x40>)
 8010b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010b4c:	4b0b      	ldr	r3, [pc, #44]	; (8010b7c <HAL_Init+0x40>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a0a      	ldr	r2, [pc, #40]	; (8010b7c <HAL_Init+0x40>)
 8010b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b58:	4b08      	ldr	r3, [pc, #32]	; (8010b7c <HAL_Init+0x40>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4a07      	ldr	r2, [pc, #28]	; (8010b7c <HAL_Init+0x40>)
 8010b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010b64:	2003      	movs	r0, #3
 8010b66:	f001 fc96 	bl	8012496 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b6a:	200f      	movs	r0, #15
 8010b6c:	f7fe ff50 	bl	800fa10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010b70:	f7fe ff22 	bl	800f9b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	40023c00 	.word	0x40023c00

08010b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010b80:	b480      	push	{r7}
 8010b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010b84:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <HAL_IncTick+0x20>)
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	4b06      	ldr	r3, [pc, #24]	; (8010ba4 <HAL_IncTick+0x24>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4413      	add	r3, r2
 8010b90:	4a04      	ldr	r2, [pc, #16]	; (8010ba4 <HAL_IncTick+0x24>)
 8010b92:	6013      	str	r3, [r2, #0]
}
 8010b94:	bf00      	nop
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop
 8010ba0:	20000038 	.word	0x20000038
 8010ba4:	20001544 	.word	0x20001544

08010ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	af00      	add	r7, sp, #0
  return uwTick;
 8010bac:	4b03      	ldr	r3, [pc, #12]	; (8010bbc <HAL_GetTick+0x14>)
 8010bae:	681b      	ldr	r3, [r3, #0]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop
 8010bbc:	20001544 	.word	0x20001544

08010bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d101      	bne.n	8010bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e033      	b.n	8010c3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d109      	bne.n	8010bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7fe fa08 	bl	800eff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	f003 0310 	and.w	r3, r3, #16
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d118      	bne.n	8010c30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010c06:	f023 0302 	bic.w	r3, r3, #2
 8010c0a:	f043 0202 	orr.w	r2, r3, #2
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fb6e 	bl	80112f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c22:	f023 0303 	bic.w	r3, r3, #3
 8010c26:	f043 0201 	orr.w	r2, r3, #1
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8010c2e:	e001      	b.n	8010c34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010c30:	2301      	movs	r3, #1
 8010c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b086      	sub	sp, #24
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	617b      	str	r3, [r7, #20]
 8010c52:	2300      	movs	r3, #0
 8010c54:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f003 0302 	and.w	r3, r3, #2
 8010c6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	f003 0320 	and.w	r3, r3, #32
 8010c74:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d049      	beq.n	8010d10 <HAL_ADC_IRQHandler+0xca>
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d046      	beq.n	8010d10 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c86:	f003 0310 	and.w	r3, r3, #16
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d105      	bne.n	8010c9a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	689b      	ldr	r3, [r3, #8]
 8010ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d12b      	bne.n	8010d00 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d127      	bne.n	8010d00 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d006      	beq.n	8010ccc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d119      	bne.n	8010d00 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	685a      	ldr	r2, [r3, #4]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f022 0220 	bic.w	r2, r2, #32
 8010cda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d105      	bne.n	8010d00 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf8:	f043 0201 	orr.w	r2, r3, #1
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f004 fe78 	bl	80159f6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f06f 0212 	mvn.w	r2, #18
 8010d0e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f003 0304 	and.w	r3, r3, #4
 8010d16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d1e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d057      	beq.n	8010dd6 <HAL_ADC_IRQHandler+0x190>
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d054      	beq.n	8010dd6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d30:	f003 0310 	and.w	r3, r3, #16
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d105      	bne.n	8010d44 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	689b      	ldr	r3, [r3, #8]
 8010d4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d139      	bne.n	8010dc6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d006      	beq.n	8010d6e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	689b      	ldr	r3, [r3, #8]
 8010d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d12b      	bne.n	8010dc6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d124      	bne.n	8010dc6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d11d      	bne.n	8010dc6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d119      	bne.n	8010dc6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	685a      	ldr	r2, [r3, #4]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010da0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d105      	bne.n	8010dc6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dbe:	f043 0201 	orr.w	r2, r3, #1
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 fc12 	bl	80115f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f06f 020c 	mvn.w	r2, #12
 8010dd4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f003 0301 	and.w	r3, r3, #1
 8010ddc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010de4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d017      	beq.n	8010e1c <HAL_ADC_IRQHandler+0x1d6>
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d014      	beq.n	8010e1c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f003 0301 	and.w	r3, r3, #1
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d10d      	bne.n	8010e1c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f93b 	bl	8011088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f06f 0201 	mvn.w	r2, #1
 8010e1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f003 0320 	and.w	r3, r3, #32
 8010e22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e2a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d015      	beq.n	8010e5e <HAL_ADC_IRQHandler+0x218>
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d012      	beq.n	8010e5e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e3c:	f043 0202 	orr.w	r2, r3, #2
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f06f 0220 	mvn.w	r2, #32
 8010e4c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f924 	bl	801109c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f06f 0220 	mvn.w	r2, #32
 8010e5c:	601a      	str	r2, [r3, #0]
  }
}
 8010e5e:	bf00      	nop
 8010e60:	3718      	adds	r7, #24
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
	...

08010e68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010e74:	2300      	movs	r3, #0
 8010e76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	d101      	bne.n	8010e86 <HAL_ADC_Start_DMA+0x1e>
 8010e82:	2302      	movs	r3, #2
 8010e84:	e0e9      	b.n	801105a <HAL_ADC_Start_DMA+0x1f2>
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	689b      	ldr	r3, [r3, #8]
 8010e94:	f003 0301 	and.w	r3, r3, #1
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d018      	beq.n	8010ece <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	689a      	ldr	r2, [r3, #8]
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f042 0201 	orr.w	r2, r2, #1
 8010eaa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010eac:	4b6d      	ldr	r3, [pc, #436]	; (8011064 <HAL_ADC_Start_DMA+0x1fc>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a6d      	ldr	r2, [pc, #436]	; (8011068 <HAL_ADC_Start_DMA+0x200>)
 8010eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8010eb6:	0c9a      	lsrs	r2, r3, #18
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010ec0:	e002      	b.n	8010ec8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1f9      	bne.n	8010ec2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010edc:	d107      	bne.n	8010eee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	689a      	ldr	r2, [r3, #8]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	f003 0301 	and.w	r3, r3, #1
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	f040 80a1 	bne.w	8011040 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010f06:	f023 0301 	bic.w	r3, r3, #1
 8010f0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d007      	beq.n	8010f30 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f3c:	d106      	bne.n	8010f4c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f42:	f023 0206 	bic.w	r2, r3, #6
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	645a      	str	r2, [r3, #68]	; 0x44
 8010f4a:	e002      	b.n	8010f52 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2200      	movs	r2, #0
 8010f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010f5a:	4b44      	ldr	r3, [pc, #272]	; (801106c <HAL_ADC_Start_DMA+0x204>)
 8010f5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f62:	4a43      	ldr	r2, [pc, #268]	; (8011070 <HAL_ADC_Start_DMA+0x208>)
 8010f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f6a:	4a42      	ldr	r2, [pc, #264]	; (8011074 <HAL_ADC_Start_DMA+0x20c>)
 8010f6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f72:	4a41      	ldr	r2, [pc, #260]	; (8011078 <HAL_ADC_Start_DMA+0x210>)
 8010f74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8010f7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010f8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	689a      	ldr	r2, [r3, #8]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	334c      	adds	r3, #76	; 0x4c
 8010faa:	4619      	mov	r1, r3
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f001 fb70 	bl	8012694 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	f003 031f 	and.w	r3, r3, #31
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d12a      	bne.n	8011016 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4a2d      	ldr	r2, [pc, #180]	; (801107c <HAL_ADC_Start_DMA+0x214>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d015      	beq.n	8010ff6 <HAL_ADC_Start_DMA+0x18e>
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4a2c      	ldr	r2, [pc, #176]	; (8011080 <HAL_ADC_Start_DMA+0x218>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d105      	bne.n	8010fe0 <HAL_ADC_Start_DMA+0x178>
 8010fd4:	4b25      	ldr	r3, [pc, #148]	; (801106c <HAL_ADC_Start_DMA+0x204>)
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	f003 031f 	and.w	r3, r3, #31
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00a      	beq.n	8010ff6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a27      	ldr	r2, [pc, #156]	; (8011084 <HAL_ADC_Start_DMA+0x21c>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d136      	bne.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
 8010fea:	4b20      	ldr	r3, [pc, #128]	; (801106c <HAL_ADC_Start_DMA+0x204>)
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	f003 0310 	and.w	r3, r3, #16
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d130      	bne.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	689b      	ldr	r3, [r3, #8]
 8010ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011000:	2b00      	cmp	r3, #0
 8011002:	d129      	bne.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	689a      	ldr	r2, [r3, #8]
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011012:	609a      	str	r2, [r3, #8]
 8011014:	e020      	b.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a18      	ldr	r2, [pc, #96]	; (801107c <HAL_ADC_Start_DMA+0x214>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d11b      	bne.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	689b      	ldr	r3, [r3, #8]
 8011026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801102a:	2b00      	cmp	r3, #0
 801102c:	d114      	bne.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	689a      	ldr	r2, [r3, #8]
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801103c:	609a      	str	r2, [r3, #8]
 801103e:	e00b      	b.n	8011058 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011044:	f043 0210 	orr.w	r2, r3, #16
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011050:	f043 0201 	orr.w	r2, r3, #1
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3718      	adds	r7, #24
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	20000030 	.word	0x20000030
 8011068:	431bde83 	.word	0x431bde83
 801106c:	40012300 	.word	0x40012300
 8011070:	080114ed 	.word	0x080114ed
 8011074:	080115a7 	.word	0x080115a7
 8011078:	080115c3 	.word	0x080115c3
 801107c:	40012000 	.word	0x40012000
 8011080:	40012100 	.word	0x40012100
 8011084:	40012200 	.word	0x40012200

08011088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8011090:	bf00      	nop
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80110a4:	bf00      	nop
 80110a6:	370c      	adds	r7, #12
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr

080110b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80110ba:	2300      	movs	r3, #0
 80110bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	d101      	bne.n	80110cc <HAL_ADC_ConfigChannel+0x1c>
 80110c8:	2302      	movs	r3, #2
 80110ca:	e105      	b.n	80112d8 <HAL_ADC_ConfigChannel+0x228>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2201      	movs	r2, #1
 80110d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b09      	cmp	r3, #9
 80110da:	d925      	bls.n	8011128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68d9      	ldr	r1, [r3, #12]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	461a      	mov	r2, r3
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	3b1e      	subs	r3, #30
 80110f2:	2207      	movs	r2, #7
 80110f4:	fa02 f303 	lsl.w	r3, r2, r3
 80110f8:	43da      	mvns	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	400a      	ands	r2, r1
 8011100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68d9      	ldr	r1, [r3, #12]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	689a      	ldr	r2, [r3, #8]
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	b29b      	uxth	r3, r3
 8011112:	4618      	mov	r0, r3
 8011114:	4603      	mov	r3, r0
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	4403      	add	r3, r0
 801111a:	3b1e      	subs	r3, #30
 801111c:	409a      	lsls	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	430a      	orrs	r2, r1
 8011124:	60da      	str	r2, [r3, #12]
 8011126:	e022      	b.n	801116e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	6919      	ldr	r1, [r3, #16]
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	b29b      	uxth	r3, r3
 8011134:	461a      	mov	r2, r3
 8011136:	4613      	mov	r3, r2
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	4413      	add	r3, r2
 801113c:	2207      	movs	r2, #7
 801113e:	fa02 f303 	lsl.w	r3, r2, r3
 8011142:	43da      	mvns	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	400a      	ands	r2, r1
 801114a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6919      	ldr	r1, [r3, #16]
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	689a      	ldr	r2, [r3, #8]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	b29b      	uxth	r3, r3
 801115c:	4618      	mov	r0, r3
 801115e:	4603      	mov	r3, r0
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	4403      	add	r3, r0
 8011164:	409a      	lsls	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	430a      	orrs	r2, r1
 801116c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	2b06      	cmp	r3, #6
 8011174:	d824      	bhi.n	80111c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	685a      	ldr	r2, [r3, #4]
 8011180:	4613      	mov	r3, r2
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4413      	add	r3, r2
 8011186:	3b05      	subs	r3, #5
 8011188:	221f      	movs	r2, #31
 801118a:	fa02 f303 	lsl.w	r3, r2, r3
 801118e:	43da      	mvns	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	400a      	ands	r2, r1
 8011196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	4618      	mov	r0, r3
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	685a      	ldr	r2, [r3, #4]
 80111aa:	4613      	mov	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	3b05      	subs	r3, #5
 80111b2:	fa00 f203 	lsl.w	r2, r0, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	430a      	orrs	r2, r1
 80111bc:	635a      	str	r2, [r3, #52]	; 0x34
 80111be:	e04c      	b.n	801125a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	2b0c      	cmp	r3, #12
 80111c6:	d824      	bhi.n	8011212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	685a      	ldr	r2, [r3, #4]
 80111d2:	4613      	mov	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4413      	add	r3, r2
 80111d8:	3b23      	subs	r3, #35	; 0x23
 80111da:	221f      	movs	r2, #31
 80111dc:	fa02 f303 	lsl.w	r3, r2, r3
 80111e0:	43da      	mvns	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	400a      	ands	r2, r1
 80111e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	4618      	mov	r0, r3
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	685a      	ldr	r2, [r3, #4]
 80111fc:	4613      	mov	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	3b23      	subs	r3, #35	; 0x23
 8011204:	fa00 f203 	lsl.w	r2, r0, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	430a      	orrs	r2, r1
 801120e:	631a      	str	r2, [r3, #48]	; 0x30
 8011210:	e023      	b.n	801125a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	685a      	ldr	r2, [r3, #4]
 801121c:	4613      	mov	r3, r2
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	3b41      	subs	r3, #65	; 0x41
 8011224:	221f      	movs	r2, #31
 8011226:	fa02 f303 	lsl.w	r3, r2, r3
 801122a:	43da      	mvns	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	400a      	ands	r2, r1
 8011232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	b29b      	uxth	r3, r3
 8011240:	4618      	mov	r0, r3
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	4613      	mov	r3, r2
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	4413      	add	r3, r2
 801124c:	3b41      	subs	r3, #65	; 0x41
 801124e:	fa00 f203 	lsl.w	r2, r0, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	430a      	orrs	r2, r1
 8011258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801125a:	4b22      	ldr	r3, [pc, #136]	; (80112e4 <HAL_ADC_ConfigChannel+0x234>)
 801125c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4a21      	ldr	r2, [pc, #132]	; (80112e8 <HAL_ADC_ConfigChannel+0x238>)
 8011264:	4293      	cmp	r3, r2
 8011266:	d109      	bne.n	801127c <HAL_ADC_ConfigChannel+0x1cc>
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b12      	cmp	r3, #18
 801126e:	d105      	bne.n	801127c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	685b      	ldr	r3, [r3, #4]
 8011274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a19      	ldr	r2, [pc, #100]	; (80112e8 <HAL_ADC_ConfigChannel+0x238>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d123      	bne.n	80112ce <HAL_ADC_ConfigChannel+0x21e>
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b10      	cmp	r3, #16
 801128c:	d003      	beq.n	8011296 <HAL_ADC_ConfigChannel+0x1e6>
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b11      	cmp	r3, #17
 8011294:	d11b      	bne.n	80112ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b10      	cmp	r3, #16
 80112a8:	d111      	bne.n	80112ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80112aa:	4b10      	ldr	r3, [pc, #64]	; (80112ec <HAL_ADC_ConfigChannel+0x23c>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4a10      	ldr	r2, [pc, #64]	; (80112f0 <HAL_ADC_ConfigChannel+0x240>)
 80112b0:	fba2 2303 	umull	r2, r3, r2, r3
 80112b4:	0c9a      	lsrs	r2, r3, #18
 80112b6:	4613      	mov	r3, r2
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	4413      	add	r3, r2
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80112c0:	e002      	b.n	80112c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d1f9      	bne.n	80112c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3714      	adds	r7, #20
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	40012300 	.word	0x40012300
 80112e8:	40012000 	.word	0x40012000
 80112ec:	20000030 	.word	0x20000030
 80112f0:	431bde83 	.word	0x431bde83

080112f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80112fc:	4b79      	ldr	r3, [pc, #484]	; (80114e4 <ADC_Init+0x1f0>)
 80112fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	685a      	ldr	r2, [r3, #4]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	431a      	orrs	r2, r3
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	685a      	ldr	r2, [r3, #4]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	6859      	ldr	r1, [r3, #4]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	021a      	lsls	r2, r3, #8
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	430a      	orrs	r2, r1
 801133c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	685a      	ldr	r2, [r3, #4]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801134c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	6859      	ldr	r1, [r3, #4]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	689a      	ldr	r2, [r3, #8]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	430a      	orrs	r2, r1
 801135e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	689a      	ldr	r2, [r3, #8]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801136e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	6899      	ldr	r1, [r3, #8]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	68da      	ldr	r2, [r3, #12]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	430a      	orrs	r2, r1
 8011380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011386:	4a58      	ldr	r2, [pc, #352]	; (80114e8 <ADC_Init+0x1f4>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d022      	beq.n	80113d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	689a      	ldr	r2, [r3, #8]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801139a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	6899      	ldr	r1, [r3, #8]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	430a      	orrs	r2, r1
 80113ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	689a      	ldr	r2, [r3, #8]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80113bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	6899      	ldr	r1, [r3, #8]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	430a      	orrs	r2, r1
 80113ce:	609a      	str	r2, [r3, #8]
 80113d0:	e00f      	b.n	80113f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	689a      	ldr	r2, [r3, #8]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80113e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	689a      	ldr	r2, [r3, #8]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80113f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	689a      	ldr	r2, [r3, #8]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f022 0202 	bic.w	r2, r2, #2
 8011400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	6899      	ldr	r1, [r3, #8]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	7e1b      	ldrb	r3, [r3, #24]
 801140c:	005a      	lsls	r2, r3, #1
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	430a      	orrs	r2, r1
 8011414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f893 3020 	ldrb.w	r3, [r3, #32]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d01b      	beq.n	8011458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801142e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	685a      	ldr	r2, [r3, #4]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801143e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6859      	ldr	r1, [r3, #4]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144a:	3b01      	subs	r3, #1
 801144c:	035a      	lsls	r2, r3, #13
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	430a      	orrs	r2, r1
 8011454:	605a      	str	r2, [r3, #4]
 8011456:	e007      	b.n	8011468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	685a      	ldr	r2, [r3, #4]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011466:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	69db      	ldr	r3, [r3, #28]
 8011482:	3b01      	subs	r3, #1
 8011484:	051a      	lsls	r2, r3, #20
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	430a      	orrs	r2, r1
 801148c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	689a      	ldr	r2, [r3, #8]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801149c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6899      	ldr	r1, [r3, #8]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114aa:	025a      	lsls	r2, r3, #9
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	430a      	orrs	r2, r1
 80114b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	689a      	ldr	r2, [r3, #8]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	6899      	ldr	r1, [r3, #8]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	695b      	ldr	r3, [r3, #20]
 80114ce:	029a      	lsls	r2, r3, #10
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	430a      	orrs	r2, r1
 80114d6:	609a      	str	r2, [r3, #8]
}
 80114d8:	bf00      	nop
 80114da:	3714      	adds	r7, #20
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	40012300 	.word	0x40012300
 80114e8:	0f000001 	.word	0x0f000001

080114ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011502:	2b00      	cmp	r3, #0
 8011504:	d13c      	bne.n	8011580 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801150a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801151c:	2b00      	cmp	r3, #0
 801151e:	d12b      	bne.n	8011578 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011524:	2b00      	cmp	r3, #0
 8011526:	d127      	bne.n	8011578 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801152e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011532:	2b00      	cmp	r3, #0
 8011534:	d006      	beq.n	8011544 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011540:	2b00      	cmp	r3, #0
 8011542:	d119      	bne.n	8011578 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	685a      	ldr	r2, [r3, #4]
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f022 0220 	bic.w	r2, r2, #32
 8011552:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011558:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011568:	2b00      	cmp	r3, #0
 801156a:	d105      	bne.n	8011578 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011570:	f043 0201 	orr.w	r2, r3, #1
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011578:	68f8      	ldr	r0, [r7, #12]
 801157a:	f004 fa3c 	bl	80159f6 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801157e:	e00e      	b.n	801159e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011584:	f003 0310 	and.w	r3, r3, #16
 8011588:	2b00      	cmp	r3, #0
 801158a:	d003      	beq.n	8011594 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	f7ff fd85 	bl	801109c <HAL_ADC_ErrorCallback>
}
 8011592:	e004      	b.n	801159e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	4798      	blx	r3
}
 801159e:	bf00      	nop
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b084      	sub	sp, #16
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f004 facc 	bl	8015b52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80115ba:	bf00      	nop
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b084      	sub	sp, #16
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2240      	movs	r2, #64	; 0x40
 80115d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115da:	f043 0204 	orr.w	r2, r3, #4
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff fd5a 	bl	801109c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80115e8:	bf00      	nop
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80115f8:	bf00      	nop
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d101      	bne.n	8011616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	e0ed      	b.n	80117f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 3020 	ldrb.w	r3, [r3, #32]
 801161c:	b2db      	uxtb	r3, r3
 801161e:	2b00      	cmp	r3, #0
 8011620:	d102      	bne.n	8011628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7fd fe76 	bl	800f314 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f042 0201 	orr.w	r2, r2, #1
 8011636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011638:	f7ff fab6 	bl	8010ba8 <HAL_GetTick>
 801163c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801163e:	e012      	b.n	8011666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011640:	f7ff fab2 	bl	8010ba8 <HAL_GetTick>
 8011644:	4602      	mov	r2, r0
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	2b0a      	cmp	r3, #10
 801164c:	d90b      	bls.n	8011666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2205      	movs	r2, #5
 801165e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8011662:	2301      	movs	r3, #1
 8011664:	e0c5      	b.n	80117f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	f003 0301 	and.w	r3, r3, #1
 8011670:	2b00      	cmp	r3, #0
 8011672:	d0e5      	beq.n	8011640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f022 0202 	bic.w	r2, r2, #2
 8011682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011684:	f7ff fa90 	bl	8010ba8 <HAL_GetTick>
 8011688:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801168a:	e012      	b.n	80116b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801168c:	f7ff fa8c 	bl	8010ba8 <HAL_GetTick>
 8011690:	4602      	mov	r2, r0
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	1ad3      	subs	r3, r2, r3
 8011696:	2b0a      	cmp	r3, #10
 8011698:	d90b      	bls.n	80116b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801169e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2205      	movs	r2, #5
 80116aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80116ae:	2301      	movs	r3, #1
 80116b0:	e09f      	b.n	80117f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	f003 0302 	and.w	r3, r3, #2
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d1e5      	bne.n	801168c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	7e1b      	ldrb	r3, [r3, #24]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d108      	bne.n	80116da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	e007      	b.n	80116ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80116e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	7e5b      	ldrb	r3, [r3, #25]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d108      	bne.n	8011704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011700:	601a      	str	r2, [r3, #0]
 8011702:	e007      	b.n	8011714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	7e9b      	ldrb	r3, [r3, #26]
 8011718:	2b01      	cmp	r3, #1
 801171a:	d108      	bne.n	801172e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f042 0220 	orr.w	r2, r2, #32
 801172a:	601a      	str	r2, [r3, #0]
 801172c:	e007      	b.n	801173e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f022 0220 	bic.w	r2, r2, #32
 801173c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	7edb      	ldrb	r3, [r3, #27]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d108      	bne.n	8011758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f022 0210 	bic.w	r2, r2, #16
 8011754:	601a      	str	r2, [r3, #0]
 8011756:	e007      	b.n	8011768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f042 0210 	orr.w	r2, r2, #16
 8011766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	7f1b      	ldrb	r3, [r3, #28]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d108      	bne.n	8011782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f042 0208 	orr.w	r2, r2, #8
 801177e:	601a      	str	r2, [r3, #0]
 8011780:	e007      	b.n	8011792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f022 0208 	bic.w	r2, r2, #8
 8011790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	7f5b      	ldrb	r3, [r3, #29]
 8011796:	2b01      	cmp	r3, #1
 8011798:	d108      	bne.n	80117ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f042 0204 	orr.w	r2, r2, #4
 80117a8:	601a      	str	r2, [r3, #0]
 80117aa:	e007      	b.n	80117bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f022 0204 	bic.w	r2, r2, #4
 80117ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	689a      	ldr	r2, [r3, #8]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	431a      	orrs	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	431a      	orrs	r2, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	695b      	ldr	r3, [r3, #20]
 80117d0:	ea42 0103 	orr.w	r1, r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	1e5a      	subs	r2, r3, #1
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	430a      	orrs	r2, r1
 80117e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2201      	movs	r2, #1
 80117ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
	...

080117fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b087      	sub	sp, #28
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011812:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8011814:	7cfb      	ldrb	r3, [r7, #19]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d003      	beq.n	8011822 <HAL_CAN_ConfigFilter+0x26>
 801181a:	7cfb      	ldrb	r3, [r7, #19]
 801181c:	2b02      	cmp	r3, #2
 801181e:	f040 80be 	bne.w	801199e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8011822:	4b65      	ldr	r3, [pc, #404]	; (80119b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8011824:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801182c:	f043 0201 	orr.w	r2, r3, #1
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801183c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011850:	021b      	lsls	r3, r3, #8
 8011852:	431a      	orrs	r2, r3
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	695b      	ldr	r3, [r3, #20]
 801185e:	f003 031f 	and.w	r3, r3, #31
 8011862:	2201      	movs	r2, #1
 8011864:	fa02 f303 	lsl.w	r3, r2, r3
 8011868:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	43db      	mvns	r3, r3
 8011874:	401a      	ands	r2, r3
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	69db      	ldr	r3, [r3, #28]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d123      	bne.n	80118cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	43db      	mvns	r3, r3
 801188e:	401a      	ands	r2, r3
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80118a2:	683a      	ldr	r2, [r7, #0]
 80118a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80118a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	3248      	adds	r2, #72	; 0x48
 80118ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80118c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80118c2:	6979      	ldr	r1, [r7, #20]
 80118c4:	3348      	adds	r3, #72	; 0x48
 80118c6:	00db      	lsls	r3, r3, #3
 80118c8:	440b      	add	r3, r1
 80118ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	69db      	ldr	r3, [r3, #28]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d122      	bne.n	801191a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	431a      	orrs	r2, r3
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80118f0:	683a      	ldr	r2, [r7, #0]
 80118f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80118f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	3248      	adds	r2, #72	; 0x48
 80118fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801190e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011910:	6979      	ldr	r1, [r7, #20]
 8011912:	3348      	adds	r3, #72	; 0x48
 8011914:	00db      	lsls	r3, r3, #3
 8011916:	440b      	add	r3, r1
 8011918:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d109      	bne.n	8011936 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	43db      	mvns	r3, r3
 801192c:	401a      	ands	r2, r3
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8011934:	e007      	b.n	8011946 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	431a      	orrs	r2, r3
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	691b      	ldr	r3, [r3, #16]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d109      	bne.n	8011962 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	43db      	mvns	r3, r3
 8011958:	401a      	ands	r2, r3
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011960:	e007      	b.n	8011972 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	431a      	orrs	r2, r3
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	6a1b      	ldr	r3, [r3, #32]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d107      	bne.n	801198a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	431a      	orrs	r2, r3
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011990:	f023 0201 	bic.w	r2, r3, #1
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 801199a:	2300      	movs	r3, #0
 801199c:	e006      	b.n	80119ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80119aa:	2301      	movs	r3, #1
  }
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	371c      	adds	r7, #28
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	40006400 	.word	0x40006400

080119bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d12e      	bne.n	8011a2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2202      	movs	r2, #2
 80119d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f022 0201 	bic.w	r2, r2, #1
 80119e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80119e8:	f7ff f8de 	bl	8010ba8 <HAL_GetTick>
 80119ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80119ee:	e012      	b.n	8011a16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80119f0:	f7ff f8da 	bl	8010ba8 <HAL_GetTick>
 80119f4:	4602      	mov	r2, r0
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	2b0a      	cmp	r3, #10
 80119fc:	d90b      	bls.n	8011a16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2205      	movs	r2, #5
 8011a0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8011a12:	2301      	movs	r3, #1
 8011a14:	e012      	b.n	8011a3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	f003 0301 	and.w	r3, r3, #1
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d1e5      	bne.n	80119f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2200      	movs	r2, #0
 8011a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e006      	b.n	8011a3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011a3a:	2301      	movs	r3, #1
  }
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3710      	adds	r7, #16
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b089      	sub	sp, #36	; 0x24
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	607a      	str	r2, [r7, #4]
 8011a50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8011a62:	7ffb      	ldrb	r3, [r7, #31]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d003      	beq.n	8011a70 <HAL_CAN_AddTxMessage+0x2c>
 8011a68:	7ffb      	ldrb	r3, [r7, #31]
 8011a6a:	2b02      	cmp	r3, #2
 8011a6c:	f040 80b8 	bne.w	8011be0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10a      	bne.n	8011a90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d105      	bne.n	8011a90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f000 80a0 	beq.w	8011bd0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	0e1b      	lsrs	r3, r3, #24
 8011a94:	f003 0303 	and.w	r3, r3, #3
 8011a98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d907      	bls.n	8011ab0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011aac:	2301      	movs	r3, #1
 8011aae:	e09e      	b.n	8011bee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	409a      	lsls	r2, r3
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	689b      	ldr	r3, [r3, #8]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d10d      	bne.n	8011ade <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8011acc:	68f9      	ldr	r1, [r7, #12]
 8011ace:	6809      	ldr	r1, [r1, #0]
 8011ad0:	431a      	orrs	r2, r3
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	3318      	adds	r3, #24
 8011ad6:	011b      	lsls	r3, r3, #4
 8011ad8:	440b      	add	r3, r1
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	e00f      	b.n	8011afe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011ae8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011aee:	68f9      	ldr	r1, [r7, #12]
 8011af0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8011af2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	3318      	adds	r3, #24
 8011af8:	011b      	lsls	r3, r3, #4
 8011afa:	440b      	add	r3, r1
 8011afc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6819      	ldr	r1, [r3, #0]
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	691a      	ldr	r2, [r3, #16]
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	3318      	adds	r3, #24
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	440b      	add	r3, r1
 8011b0e:	3304      	adds	r3, #4
 8011b10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	7d1b      	ldrb	r3, [r3, #20]
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d111      	bne.n	8011b3e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	3318      	adds	r3, #24
 8011b22:	011b      	lsls	r3, r3, #4
 8011b24:	4413      	add	r3, r2
 8011b26:	3304      	adds	r3, #4
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	68fa      	ldr	r2, [r7, #12]
 8011b2c:	6811      	ldr	r1, [r2, #0]
 8011b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	3318      	adds	r3, #24
 8011b36:	011b      	lsls	r3, r3, #4
 8011b38:	440b      	add	r3, r1
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	3307      	adds	r3, #7
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	061a      	lsls	r2, r3, #24
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	3306      	adds	r3, #6
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	041b      	lsls	r3, r3, #16
 8011b4e:	431a      	orrs	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3305      	adds	r3, #5
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	021b      	lsls	r3, r3, #8
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	3204      	adds	r2, #4
 8011b5e:	7812      	ldrb	r2, [r2, #0]
 8011b60:	4610      	mov	r0, r2
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	6811      	ldr	r1, [r2, #0]
 8011b66:	ea43 0200 	orr.w	r2, r3, r0
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	011b      	lsls	r3, r3, #4
 8011b6e:	440b      	add	r3, r1
 8011b70:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8011b74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	3303      	adds	r3, #3
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	061a      	lsls	r2, r3, #24
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	3302      	adds	r3, #2
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	041b      	lsls	r3, r3, #16
 8011b86:	431a      	orrs	r2, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	021b      	lsls	r3, r3, #8
 8011b90:	4313      	orrs	r3, r2
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	7812      	ldrb	r2, [r2, #0]
 8011b96:	4610      	mov	r0, r2
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	6811      	ldr	r1, [r2, #0]
 8011b9c:	ea43 0200 	orr.w	r2, r3, r0
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	011b      	lsls	r3, r3, #4
 8011ba4:	440b      	add	r3, r1
 8011ba6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8011baa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	3318      	adds	r3, #24
 8011bb4:	011b      	lsls	r3, r3, #4
 8011bb6:	4413      	add	r3, r2
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	6811      	ldr	r1, [r2, #0]
 8011bbe:	f043 0201 	orr.w	r2, r3, #1
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	3318      	adds	r3, #24
 8011bc6:	011b      	lsls	r3, r3, #4
 8011bc8:	440b      	add	r3, r1
 8011bca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	e00e      	b.n	8011bee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8011bdc:	2301      	movs	r3, #1
 8011bde:	e006      	b.n	8011bee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011bec:	2301      	movs	r3, #1
  }
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3724      	adds	r7, #36	; 0x24
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b085      	sub	sp, #20
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8011c02:	2300      	movs	r3, #0
 8011c04:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c0c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8011c0e:	7afb      	ldrb	r3, [r7, #11]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d002      	beq.n	8011c1a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8011c14:	7afb      	ldrb	r3, [r7, #11]
 8011c16:	2b02      	cmp	r3, #2
 8011c18:	d11d      	bne.n	8011c56 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d002      	beq.n	8011c2e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	689b      	ldr	r3, [r3, #8]
 8011c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d002      	beq.n	8011c42 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d002      	beq.n	8011c56 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	3301      	adds	r3, #1
 8011c54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8011c56:	68fb      	ldr	r3, [r7, #12]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3714      	adds	r7, #20
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8011c64:	b480      	push	{r7}
 8011c66:	b087      	sub	sp, #28
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
 8011c70:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c78:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8011c7a:	7dfb      	ldrb	r3, [r7, #23]
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d003      	beq.n	8011c88 <HAL_CAN_GetRxMessage+0x24>
 8011c80:	7dfb      	ldrb	r3, [r7, #23]
 8011c82:	2b02      	cmp	r3, #2
 8011c84:	f040 80f3 	bne.w	8011e6e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10e      	bne.n	8011cac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	f003 0303 	and.w	r3, r3, #3
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d116      	bne.n	8011cca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e0e7      	b.n	8011e7c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	691b      	ldr	r3, [r3, #16]
 8011cb2:	f003 0303 	and.w	r3, r3, #3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d107      	bne.n	8011cca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e0d8      	b.n	8011e7c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	331b      	adds	r3, #27
 8011cd2:	011b      	lsls	r3, r3, #4
 8011cd4:	4413      	add	r3, r2
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f003 0204 	and.w	r2, r3, #4
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10c      	bne.n	8011d02 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	331b      	adds	r3, #27
 8011cf0:	011b      	lsls	r3, r3, #4
 8011cf2:	4413      	add	r3, r2
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	0d5b      	lsrs	r3, r3, #21
 8011cf8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	601a      	str	r2, [r3, #0]
 8011d00:	e00b      	b.n	8011d1a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	331b      	adds	r3, #27
 8011d0a:	011b      	lsls	r3, r3, #4
 8011d0c:	4413      	add	r3, r2
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	08db      	lsrs	r3, r3, #3
 8011d12:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	331b      	adds	r3, #27
 8011d22:	011b      	lsls	r3, r3, #4
 8011d24:	4413      	add	r3, r2
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f003 0202 	and.w	r2, r3, #2
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681a      	ldr	r2, [r3, #0]
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	331b      	adds	r3, #27
 8011d38:	011b      	lsls	r3, r3, #4
 8011d3a:	4413      	add	r3, r2
 8011d3c:	3304      	adds	r3, #4
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f003 020f 	and.w	r2, r3, #15
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	331b      	adds	r3, #27
 8011d50:	011b      	lsls	r3, r3, #4
 8011d52:	4413      	add	r3, r2
 8011d54:	3304      	adds	r3, #4
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	0a1b      	lsrs	r3, r3, #8
 8011d5a:	b2da      	uxtb	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	331b      	adds	r3, #27
 8011d68:	011b      	lsls	r3, r3, #4
 8011d6a:	4413      	add	r3, r2
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	0c1b      	lsrs	r3, r3, #16
 8011d72:	b29a      	uxth	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	011b      	lsls	r3, r3, #4
 8011d80:	4413      	add	r3, r2
 8011d82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	011b      	lsls	r3, r3, #4
 8011d96:	4413      	add	r3, r2
 8011d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	0a1a      	lsrs	r2, r3, #8
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	3301      	adds	r3, #1
 8011da4:	b2d2      	uxtb	r2, r2
 8011da6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	011b      	lsls	r3, r3, #4
 8011db0:	4413      	add	r3, r2
 8011db2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	0c1a      	lsrs	r2, r3, #16
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	3302      	adds	r3, #2
 8011dbe:	b2d2      	uxtb	r2, r2
 8011dc0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	4413      	add	r3, r2
 8011dcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	0e1a      	lsrs	r2, r3, #24
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	3303      	adds	r3, #3
 8011dd8:	b2d2      	uxtb	r2, r2
 8011dda:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	4413      	add	r3, r2
 8011de6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	3304      	adds	r3, #4
 8011df0:	b2d2      	uxtb	r2, r2
 8011df2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	011b      	lsls	r3, r3, #4
 8011dfc:	4413      	add	r3, r2
 8011dfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	0a1a      	lsrs	r2, r3, #8
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	3305      	adds	r3, #5
 8011e0a:	b2d2      	uxtb	r2, r2
 8011e0c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	011b      	lsls	r3, r3, #4
 8011e16:	4413      	add	r3, r2
 8011e18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	0c1a      	lsrs	r2, r3, #16
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	3306      	adds	r3, #6
 8011e24:	b2d2      	uxtb	r2, r2
 8011e26:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	011b      	lsls	r3, r3, #4
 8011e30:	4413      	add	r3, r2
 8011e32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	0e1a      	lsrs	r2, r3, #24
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	3307      	adds	r3, #7
 8011e3e:	b2d2      	uxtb	r2, r2
 8011e40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d108      	bne.n	8011e5a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68da      	ldr	r2, [r3, #12]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f042 0220 	orr.w	r2, r2, #32
 8011e56:	60da      	str	r2, [r3, #12]
 8011e58:	e007      	b.n	8011e6a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	691a      	ldr	r2, [r3, #16]
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f042 0220 	orr.w	r2, r2, #32
 8011e68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	e006      	b.n	8011e7c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011e7a:	2301      	movs	r3, #1
  }
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	371c      	adds	r7, #28
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e98:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8011e9a:	7bfb      	ldrb	r3, [r7, #15]
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d002      	beq.n	8011ea6 <HAL_CAN_ActivateNotification+0x1e>
 8011ea0:	7bfb      	ldrb	r3, [r7, #15]
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d109      	bne.n	8011eba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	6959      	ldr	r1, [r3, #20]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	683a      	ldr	r2, [r7, #0]
 8011eb2:	430a      	orrs	r2, r1
 8011eb4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	e006      	b.n	8011ec8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ebe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011ec6:	2301      	movs	r3, #1
  }
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b08a      	sub	sp, #40	; 0x28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8011edc:	2300      	movs	r3, #0
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	695b      	ldr	r3, [r3, #20]
 8011ee6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	689b      	ldr	r3, [r3, #8]
 8011ef6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	691b      	ldr	r3, [r3, #16]
 8011f06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	699b      	ldr	r3, [r3, #24]
 8011f0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8011f10:	6a3b      	ldr	r3, [r7, #32]
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d07c      	beq.n	8012014 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	f003 0301 	and.w	r3, r3, #1
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d023      	beq.n	8011f6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2201      	movs	r2, #1
 8011f2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8011f2c:	69bb      	ldr	r3, [r7, #24]
 8011f2e:	f003 0302 	and.w	r3, r3, #2
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d003      	beq.n	8011f3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f7ef fef6 	bl	8001d28 <HAL_CAN_TxMailbox0CompleteCallback>
 8011f3c:	e016      	b.n	8011f6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	f003 0304 	and.w	r3, r3, #4
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d004      	beq.n	8011f52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f50:	e00c      	b.n	8011f6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	f003 0308 	and.w	r3, r3, #8
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d004      	beq.n	8011f66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011f62:	627b      	str	r3, [r7, #36]	; 0x24
 8011f64:	e002      	b.n	8011f6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f000 f97f 	bl	801226a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8011f6c:	69bb      	ldr	r3, [r7, #24]
 8011f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d024      	beq.n	8011fc0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011f80:	69bb      	ldr	r3, [r7, #24]
 8011f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d003      	beq.n	8011f92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 f959 	bl	8012242 <HAL_CAN_TxMailbox1CompleteCallback>
 8011f90:	e016      	b.n	8011fc0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d004      	beq.n	8011fa6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8011fa4:	e00c      	b.n	8011fc0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d004      	beq.n	8011fba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8011fb8:	e002      	b.n	8011fc0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f95f 	bl	801227e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011fc0:	69bb      	ldr	r3, [r7, #24]
 8011fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d024      	beq.n	8012014 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011fd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d003      	beq.n	8011fe6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f000 f939 	bl	8012256 <HAL_CAN_TxMailbox2CompleteCallback>
 8011fe4:	e016      	b.n	8012014 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d004      	beq.n	8011ffa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ff8:	e00c      	b.n	8012014 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012000:	2b00      	cmp	r3, #0
 8012002:	d004      	beq.n	801200e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8012004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801200a:	627b      	str	r3, [r7, #36]	; 0x24
 801200c:	e002      	b.n	8012014 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 f93f 	bl	8012292 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8012014:	6a3b      	ldr	r3, [r7, #32]
 8012016:	f003 0308 	and.w	r3, r3, #8
 801201a:	2b00      	cmp	r3, #0
 801201c:	d00c      	beq.n	8012038 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	f003 0310 	and.w	r3, r3, #16
 8012024:	2b00      	cmp	r3, #0
 8012026:	d007      	beq.n	8012038 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8012028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801202e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2210      	movs	r2, #16
 8012036:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8012038:	6a3b      	ldr	r3, [r7, #32]
 801203a:	f003 0304 	and.w	r3, r3, #4
 801203e:	2b00      	cmp	r3, #0
 8012040:	d00b      	beq.n	801205a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	f003 0308 	and.w	r3, r3, #8
 8012048:	2b00      	cmp	r3, #0
 801204a:	d006      	beq.n	801205a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2208      	movs	r2, #8
 8012052:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f926 	bl	80122a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801205a:	6a3b      	ldr	r3, [r7, #32]
 801205c:	f003 0302 	and.w	r3, r3, #2
 8012060:	2b00      	cmp	r3, #0
 8012062:	d009      	beq.n	8012078 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	f003 0303 	and.w	r3, r3, #3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d002      	beq.n	8012078 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ef fdc0 	bl	8001bf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8012078:	6a3b      	ldr	r3, [r7, #32]
 801207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00c      	beq.n	801209c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	f003 0310 	and.w	r3, r3, #16
 8012088:	2b00      	cmp	r3, #0
 801208a:	d007      	beq.n	801209c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 801208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012092:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	2210      	movs	r2, #16
 801209a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801209c:	6a3b      	ldr	r3, [r7, #32]
 801209e:	f003 0320 	and.w	r3, r3, #32
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00b      	beq.n	80120be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	f003 0308 	and.w	r3, r3, #8
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d006      	beq.n	80120be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2208      	movs	r2, #8
 80120b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 f8fe 	bl	80122ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80120be:	6a3b      	ldr	r3, [r7, #32]
 80120c0:	f003 0310 	and.w	r3, r3, #16
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d009      	beq.n	80120dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	691b      	ldr	r3, [r3, #16]
 80120ce:	f003 0303 	and.w	r3, r3, #3
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d002      	beq.n	80120dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ef fdc8 	bl	8001c6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00b      	beq.n	80120fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	f003 0310 	and.w	r3, r3, #16
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d006      	beq.n	80120fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2210      	movs	r2, #16
 80120f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f000 f8e8 	bl	80122ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80120fe:	6a3b      	ldr	r3, [r7, #32]
 8012100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00b      	beq.n	8012120 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	f003 0308 	and.w	r3, r3, #8
 801210e:	2b00      	cmp	r3, #0
 8012110:	d006      	beq.n	8012120 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2208      	movs	r2, #8
 8012118:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 f8e1 	bl	80122e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8012120:	6a3b      	ldr	r3, [r7, #32]
 8012122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012126:	2b00      	cmp	r3, #0
 8012128:	d07b      	beq.n	8012222 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	f003 0304 	and.w	r3, r3, #4
 8012130:	2b00      	cmp	r3, #0
 8012132:	d072      	beq.n	801221a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801213a:	2b00      	cmp	r3, #0
 801213c:	d008      	beq.n	8012150 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012144:	2b00      	cmp	r3, #0
 8012146:	d003      	beq.n	8012150 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8012148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214a:	f043 0301 	orr.w	r3, r3, #1
 801214e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012150:	6a3b      	ldr	r3, [r7, #32]
 8012152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012156:	2b00      	cmp	r3, #0
 8012158:	d008      	beq.n	801216c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012160:	2b00      	cmp	r3, #0
 8012162:	d003      	beq.n	801216c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	f043 0302 	orr.w	r3, r3, #2
 801216a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801216c:	6a3b      	ldr	r3, [r7, #32]
 801216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012172:	2b00      	cmp	r3, #0
 8012174:	d008      	beq.n	8012188 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801217c:	2b00      	cmp	r3, #0
 801217e:	d003      	beq.n	8012188 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8012180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012182:	f043 0304 	orr.w	r3, r3, #4
 8012186:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012188:	6a3b      	ldr	r3, [r7, #32]
 801218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801218e:	2b00      	cmp	r3, #0
 8012190:	d043      	beq.n	801221a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012198:	2b00      	cmp	r3, #0
 801219a:	d03e      	beq.n	801221a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80121a2:	2b60      	cmp	r3, #96	; 0x60
 80121a4:	d02b      	beq.n	80121fe <HAL_CAN_IRQHandler+0x32a>
 80121a6:	2b60      	cmp	r3, #96	; 0x60
 80121a8:	d82e      	bhi.n	8012208 <HAL_CAN_IRQHandler+0x334>
 80121aa:	2b50      	cmp	r3, #80	; 0x50
 80121ac:	d022      	beq.n	80121f4 <HAL_CAN_IRQHandler+0x320>
 80121ae:	2b50      	cmp	r3, #80	; 0x50
 80121b0:	d82a      	bhi.n	8012208 <HAL_CAN_IRQHandler+0x334>
 80121b2:	2b40      	cmp	r3, #64	; 0x40
 80121b4:	d019      	beq.n	80121ea <HAL_CAN_IRQHandler+0x316>
 80121b6:	2b40      	cmp	r3, #64	; 0x40
 80121b8:	d826      	bhi.n	8012208 <HAL_CAN_IRQHandler+0x334>
 80121ba:	2b30      	cmp	r3, #48	; 0x30
 80121bc:	d010      	beq.n	80121e0 <HAL_CAN_IRQHandler+0x30c>
 80121be:	2b30      	cmp	r3, #48	; 0x30
 80121c0:	d822      	bhi.n	8012208 <HAL_CAN_IRQHandler+0x334>
 80121c2:	2b10      	cmp	r3, #16
 80121c4:	d002      	beq.n	80121cc <HAL_CAN_IRQHandler+0x2f8>
 80121c6:	2b20      	cmp	r3, #32
 80121c8:	d005      	beq.n	80121d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80121ca:	e01d      	b.n	8012208 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	f043 0308 	orr.w	r3, r3, #8
 80121d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80121d4:	e019      	b.n	801220a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	f043 0310 	orr.w	r3, r3, #16
 80121dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80121de:	e014      	b.n	801220a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80121e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e2:	f043 0320 	orr.w	r3, r3, #32
 80121e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80121e8:	e00f      	b.n	801220a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80121ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80121f2:	e00a      	b.n	801220a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80121fc:	e005      	b.n	801220a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80121fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012204:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012206:	e000      	b.n	801220a <HAL_CAN_IRQHandler+0x336>
            break;
 8012208:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	699a      	ldr	r2, [r3, #24]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012218:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2204      	movs	r2, #4
 8012220:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8012222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012224:	2b00      	cmp	r3, #0
 8012226:	d008      	beq.n	801223a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	431a      	orrs	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f7ef fd53 	bl	8001ce0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801223a:	bf00      	nop
 801223c:	3728      	adds	r7, #40	; 0x28
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}

08012242 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012242:	b480      	push	{r7}
 8012244:	b083      	sub	sp, #12
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801224a:	bf00      	nop
 801224c:	370c      	adds	r7, #12
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr

08012256 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012256:	b480      	push	{r7}
 8012258:	b083      	sub	sp, #12
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801225e:	bf00      	nop
 8012260:	370c      	adds	r7, #12
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr

0801226a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801226a:	b480      	push	{r7}
 801226c:	b083      	sub	sp, #12
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8012272:	bf00      	nop
 8012274:	370c      	adds	r7, #12
 8012276:	46bd      	mov	sp, r7
 8012278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227c:	4770      	bx	lr

0801227e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801227e:	b480      	push	{r7}
 8012280:	b083      	sub	sp, #12
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8012286:	bf00      	nop
 8012288:	370c      	adds	r7, #12
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr

08012292 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012292:	b480      	push	{r7}
 8012294:	b083      	sub	sp, #12
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801229a:	bf00      	nop
 801229c:	370c      	adds	r7, #12
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr

080122a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80122a6:	b480      	push	{r7}
 80122a8:	b083      	sub	sp, #12
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80122ae:	bf00      	nop
 80122b0:	370c      	adds	r7, #12
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr

080122ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80122ba:	b480      	push	{r7}
 80122bc:	b083      	sub	sp, #12
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80122c2:	bf00      	nop
 80122c4:	370c      	adds	r7, #12
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80122ce:	b480      	push	{r7}
 80122d0:	b083      	sub	sp, #12
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80122d6:	bf00      	nop
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr

080122e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80122ea:	bf00      	nop
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr

080122f6 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80122f6:	b480      	push	{r7}
 80122f8:	b085      	sub	sp, #20
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80122fe:	2300      	movs	r3, #0
 8012300:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012308:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 801230a:	7bbb      	ldrb	r3, [r7, #14]
 801230c:	2b01      	cmp	r3, #1
 801230e:	d002      	beq.n	8012316 <HAL_CAN_ResetError+0x20>
 8012310:	7bbb      	ldrb	r3, [r7, #14]
 8012312:	2b02      	cmp	r3, #2
 8012314:	d103      	bne.n	801231e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2200      	movs	r2, #0
 801231a:	625a      	str	r2, [r3, #36]	; 0x24
 801231c:	e007      	b.n	801232e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 801232a:	2301      	movs	r3, #1
 801232c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 801232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3714      	adds	r7, #20
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <__NVIC_SetPriorityGrouping>:
{
 801233c:	b480      	push	{r7}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f003 0307 	and.w	r3, r3, #7
 801234a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801234c:	4b0c      	ldr	r3, [pc, #48]	; (8012380 <__NVIC_SetPriorityGrouping+0x44>)
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012352:	68ba      	ldr	r2, [r7, #8]
 8012354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012358:	4013      	ands	r3, r2
 801235a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801236e:	4a04      	ldr	r2, [pc, #16]	; (8012380 <__NVIC_SetPriorityGrouping+0x44>)
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	60d3      	str	r3, [r2, #12]
}
 8012374:	bf00      	nop
 8012376:	3714      	adds	r7, #20
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr
 8012380:	e000ed00 	.word	0xe000ed00

08012384 <__NVIC_GetPriorityGrouping>:
{
 8012384:	b480      	push	{r7}
 8012386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012388:	4b04      	ldr	r3, [pc, #16]	; (801239c <__NVIC_GetPriorityGrouping+0x18>)
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	0a1b      	lsrs	r3, r3, #8
 801238e:	f003 0307 	and.w	r3, r3, #7
}
 8012392:	4618      	mov	r0, r3
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr
 801239c:	e000ed00 	.word	0xe000ed00

080123a0 <__NVIC_EnableIRQ>:
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	4603      	mov	r3, r0
 80123a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80123aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	db0b      	blt.n	80123ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80123b2:	79fb      	ldrb	r3, [r7, #7]
 80123b4:	f003 021f 	and.w	r2, r3, #31
 80123b8:	4907      	ldr	r1, [pc, #28]	; (80123d8 <__NVIC_EnableIRQ+0x38>)
 80123ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123be:	095b      	lsrs	r3, r3, #5
 80123c0:	2001      	movs	r0, #1
 80123c2:	fa00 f202 	lsl.w	r2, r0, r2
 80123c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80123ca:	bf00      	nop
 80123cc:	370c      	adds	r7, #12
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	e000e100 	.word	0xe000e100

080123dc <__NVIC_SetPriority>:
{
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	4603      	mov	r3, r0
 80123e4:	6039      	str	r1, [r7, #0]
 80123e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80123e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	db0a      	blt.n	8012406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	490c      	ldr	r1, [pc, #48]	; (8012428 <__NVIC_SetPriority+0x4c>)
 80123f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123fa:	0112      	lsls	r2, r2, #4
 80123fc:	b2d2      	uxtb	r2, r2
 80123fe:	440b      	add	r3, r1
 8012400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012404:	e00a      	b.n	801241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	b2da      	uxtb	r2, r3
 801240a:	4908      	ldr	r1, [pc, #32]	; (801242c <__NVIC_SetPriority+0x50>)
 801240c:	79fb      	ldrb	r3, [r7, #7]
 801240e:	f003 030f 	and.w	r3, r3, #15
 8012412:	3b04      	subs	r3, #4
 8012414:	0112      	lsls	r2, r2, #4
 8012416:	b2d2      	uxtb	r2, r2
 8012418:	440b      	add	r3, r1
 801241a:	761a      	strb	r2, [r3, #24]
}
 801241c:	bf00      	nop
 801241e:	370c      	adds	r7, #12
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr
 8012428:	e000e100 	.word	0xe000e100
 801242c:	e000ed00 	.word	0xe000ed00

08012430 <NVIC_EncodePriority>:
{
 8012430:	b480      	push	{r7}
 8012432:	b089      	sub	sp, #36	; 0x24
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f003 0307 	and.w	r3, r3, #7
 8012442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	f1c3 0307 	rsb	r3, r3, #7
 801244a:	2b04      	cmp	r3, #4
 801244c:	bf28      	it	cs
 801244e:	2304      	movcs	r3, #4
 8012450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	3304      	adds	r3, #4
 8012456:	2b06      	cmp	r3, #6
 8012458:	d902      	bls.n	8012460 <NVIC_EncodePriority+0x30>
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	3b03      	subs	r3, #3
 801245e:	e000      	b.n	8012462 <NVIC_EncodePriority+0x32>
 8012460:	2300      	movs	r3, #0
 8012462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012464:	f04f 32ff 	mov.w	r2, #4294967295
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	fa02 f303 	lsl.w	r3, r2, r3
 801246e:	43da      	mvns	r2, r3
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	401a      	ands	r2, r3
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012478:	f04f 31ff 	mov.w	r1, #4294967295
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	fa01 f303 	lsl.w	r3, r1, r3
 8012482:	43d9      	mvns	r1, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012488:	4313      	orrs	r3, r2
}
 801248a:	4618      	mov	r0, r3
 801248c:	3724      	adds	r7, #36	; 0x24
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr

08012496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff ff4c 	bl	801233c <__NVIC_SetPriorityGrouping>
}
 80124a4:	bf00      	nop
 80124a6:	3708      	adds	r7, #8
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b086      	sub	sp, #24
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	607a      	str	r2, [r7, #4]
 80124b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80124ba:	2300      	movs	r3, #0
 80124bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80124be:	f7ff ff61 	bl	8012384 <__NVIC_GetPriorityGrouping>
 80124c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	68b9      	ldr	r1, [r7, #8]
 80124c8:	6978      	ldr	r0, [r7, #20]
 80124ca:	f7ff ffb1 	bl	8012430 <NVIC_EncodePriority>
 80124ce:	4602      	mov	r2, r0
 80124d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124d4:	4611      	mov	r1, r2
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7ff ff80 	bl	80123dc <__NVIC_SetPriority>
}
 80124dc:	bf00      	nop
 80124de:	3718      	adds	r7, #24
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	4603      	mov	r3, r0
 80124ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80124ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7ff ff54 	bl	80123a0 <__NVIC_EnableIRQ>
}
 80124f8:	bf00      	nop
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801250e:	2301      	movs	r3, #1
 8012510:	e00e      	b.n	8012530 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	795b      	ldrb	r3, [r3, #5]
 8012516:	b2db      	uxtb	r3, r3
 8012518:	2b00      	cmp	r3, #0
 801251a:	d105      	bne.n	8012528 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2200      	movs	r2, #0
 8012520:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7fc ffca 	bl	800f4bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2201      	movs	r2, #1
 801252c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 801252e:	2300      	movs	r3, #0
}
 8012530:	4618      	mov	r0, r3
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012540:	2300      	movs	r3, #0
 8012542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012544:	f7fe fb30 	bl	8010ba8 <HAL_GetTick>
 8012548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d101      	bne.n	8012554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012550:	2301      	movs	r3, #1
 8012552:	e099      	b.n	8012688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2202      	movs	r2, #2
 8012558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f022 0201 	bic.w	r2, r2, #1
 8012572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012574:	e00f      	b.n	8012596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012576:	f7fe fb17 	bl	8010ba8 <HAL_GetTick>
 801257a:	4602      	mov	r2, r0
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	2b05      	cmp	r3, #5
 8012582:	d908      	bls.n	8012596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2220      	movs	r2, #32
 8012588:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2203      	movs	r2, #3
 801258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8012592:	2303      	movs	r3, #3
 8012594:	e078      	b.n	8012688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	f003 0301 	and.w	r3, r3, #1
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d1e8      	bne.n	8012576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80125ac:	697a      	ldr	r2, [r7, #20]
 80125ae:	4b38      	ldr	r3, [pc, #224]	; (8012690 <HAL_DMA_Init+0x158>)
 80125b0:	4013      	ands	r3, r2
 80125b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80125c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	691b      	ldr	r3, [r3, #16]
 80125c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80125ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	699b      	ldr	r3, [r3, #24]
 80125d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80125da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6a1b      	ldr	r3, [r3, #32]
 80125e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80125e2:	697a      	ldr	r2, [r7, #20]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ec:	2b04      	cmp	r3, #4
 80125ee:	d107      	bne.n	8012600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125f8:	4313      	orrs	r3, r2
 80125fa:	697a      	ldr	r2, [r7, #20]
 80125fc:	4313      	orrs	r3, r2
 80125fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	697a      	ldr	r2, [r7, #20]
 8012606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	695b      	ldr	r3, [r3, #20]
 801260e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	f023 0307 	bic.w	r3, r3, #7
 8012616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261c:	697a      	ldr	r2, [r7, #20]
 801261e:	4313      	orrs	r3, r2
 8012620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012626:	2b04      	cmp	r3, #4
 8012628:	d117      	bne.n	801265a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262e:	697a      	ldr	r2, [r7, #20]
 8012630:	4313      	orrs	r3, r2
 8012632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00e      	beq.n	801265a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fb01 	bl	8012c44 <DMA_CheckFifoParam>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d008      	beq.n	801265a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2240      	movs	r2, #64	; 0x40
 801264c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2201      	movs	r2, #1
 8012652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012656:	2301      	movs	r3, #1
 8012658:	e016      	b.n	8012688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	697a      	ldr	r2, [r7, #20]
 8012660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 fab8 	bl	8012bd8 <DMA_CalcBaseAndBitshift>
 8012668:	4603      	mov	r3, r0
 801266a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012670:	223f      	movs	r2, #63	; 0x3f
 8012672:	409a      	lsls	r2, r3
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2201      	movs	r2, #1
 8012682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	3718      	adds	r7, #24
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	f010803f 	.word	0xf010803f

08012694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b086      	sub	sp, #24
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d101      	bne.n	80126ba <HAL_DMA_Start_IT+0x26>
 80126b6:	2302      	movs	r3, #2
 80126b8:	e040      	b.n	801273c <HAL_DMA_Start_IT+0xa8>
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	2201      	movs	r2, #1
 80126be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d12f      	bne.n	801272e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2202      	movs	r2, #2
 80126d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2200      	movs	r2, #0
 80126da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	68b9      	ldr	r1, [r7, #8]
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f000 fa4a 	bl	8012b7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126ec:	223f      	movs	r2, #63	; 0x3f
 80126ee:	409a      	lsls	r2, r3
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	f042 0216 	orr.w	r2, r2, #22
 8012702:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012708:	2b00      	cmp	r3, #0
 801270a:	d007      	beq.n	801271c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f042 0208 	orr.w	r2, r2, #8
 801271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f042 0201 	orr.w	r2, r2, #1
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	e005      	b.n	801273a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2200      	movs	r2, #0
 8012732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012736:	2302      	movs	r3, #2
 8012738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801273a:	7dfb      	ldrb	r3, [r7, #23]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3718      	adds	r7, #24
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012750:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8012752:	f7fe fa29 	bl	8010ba8 <HAL_GetTick>
 8012756:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b02      	cmp	r3, #2
 8012762:	d008      	beq.n	8012776 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2280      	movs	r2, #128	; 0x80
 8012768:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8012772:	2301      	movs	r3, #1
 8012774:	e052      	b.n	801281c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	681a      	ldr	r2, [r3, #0]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f022 0216 	bic.w	r2, r2, #22
 8012784:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	695a      	ldr	r2, [r3, #20]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012794:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801279a:	2b00      	cmp	r3, #0
 801279c:	d103      	bne.n	80127a6 <HAL_DMA_Abort+0x62>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d007      	beq.n	80127b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f022 0208 	bic.w	r2, r2, #8
 80127b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f022 0201 	bic.w	r2, r2, #1
 80127c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80127c6:	e013      	b.n	80127f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80127c8:	f7fe f9ee 	bl	8010ba8 <HAL_GetTick>
 80127cc:	4602      	mov	r2, r0
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	2b05      	cmp	r3, #5
 80127d4:	d90c      	bls.n	80127f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2220      	movs	r2, #32
 80127da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2203      	movs	r2, #3
 80127e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80127ec:	2303      	movs	r3, #3
 80127ee:	e015      	b.n	801281c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f003 0301 	and.w	r3, r3, #1
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d1e4      	bne.n	80127c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012802:	223f      	movs	r2, #63	; 0x3f
 8012804:	409a      	lsls	r2, r3
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2201      	movs	r2, #1
 801280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012832:	b2db      	uxtb	r3, r3
 8012834:	2b02      	cmp	r3, #2
 8012836:	d004      	beq.n	8012842 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2280      	movs	r2, #128	; 0x80
 801283c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801283e:	2301      	movs	r3, #1
 8012840:	e00c      	b.n	801285c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2205      	movs	r2, #5
 8012846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	f022 0201 	bic.w	r2, r2, #1
 8012858:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801285a:	2300      	movs	r3, #0
}
 801285c:	4618      	mov	r0, r3
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b086      	sub	sp, #24
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012870:	2300      	movs	r3, #0
 8012872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012874:	4b8e      	ldr	r3, [pc, #568]	; (8012ab0 <HAL_DMA_IRQHandler+0x248>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	4a8e      	ldr	r2, [pc, #568]	; (8012ab4 <HAL_DMA_IRQHandler+0x24c>)
 801287a:	fba2 2303 	umull	r2, r3, r2, r3
 801287e:	0a9b      	lsrs	r3, r3, #10
 8012880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012892:	2208      	movs	r2, #8
 8012894:	409a      	lsls	r2, r3
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	4013      	ands	r3, r2
 801289a:	2b00      	cmp	r3, #0
 801289c:	d01a      	beq.n	80128d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f003 0304 	and.w	r3, r3, #4
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d013      	beq.n	80128d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	f022 0204 	bic.w	r2, r2, #4
 80128ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128c0:	2208      	movs	r2, #8
 80128c2:	409a      	lsls	r2, r3
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128cc:	f043 0201 	orr.w	r2, r3, #1
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128d8:	2201      	movs	r2, #1
 80128da:	409a      	lsls	r2, r3
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	4013      	ands	r3, r2
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d012      	beq.n	801290a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	695b      	ldr	r3, [r3, #20]
 80128ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00b      	beq.n	801290a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128f6:	2201      	movs	r2, #1
 80128f8:	409a      	lsls	r2, r3
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012902:	f043 0202 	orr.w	r2, r3, #2
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801290e:	2204      	movs	r2, #4
 8012910:	409a      	lsls	r2, r3
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	4013      	ands	r3, r2
 8012916:	2b00      	cmp	r3, #0
 8012918:	d012      	beq.n	8012940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	f003 0302 	and.w	r3, r3, #2
 8012924:	2b00      	cmp	r3, #0
 8012926:	d00b      	beq.n	8012940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801292c:	2204      	movs	r2, #4
 801292e:	409a      	lsls	r2, r3
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012938:	f043 0204 	orr.w	r2, r3, #4
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012944:	2210      	movs	r2, #16
 8012946:	409a      	lsls	r2, r3
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	4013      	ands	r3, r2
 801294c:	2b00      	cmp	r3, #0
 801294e:	d043      	beq.n	80129d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	f003 0308 	and.w	r3, r3, #8
 801295a:	2b00      	cmp	r3, #0
 801295c:	d03c      	beq.n	80129d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012962:	2210      	movs	r2, #16
 8012964:	409a      	lsls	r2, r3
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012974:	2b00      	cmp	r3, #0
 8012976:	d018      	beq.n	80129aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012982:	2b00      	cmp	r3, #0
 8012984:	d108      	bne.n	8012998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298a:	2b00      	cmp	r3, #0
 801298c:	d024      	beq.n	80129d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	4798      	blx	r3
 8012996:	e01f      	b.n	80129d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801299c:	2b00      	cmp	r3, #0
 801299e:	d01b      	beq.n	80129d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	4798      	blx	r3
 80129a8:	e016      	b.n	80129d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d107      	bne.n	80129c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f022 0208 	bic.w	r2, r2, #8
 80129c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d003      	beq.n	80129d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129dc:	2220      	movs	r2, #32
 80129de:	409a      	lsls	r2, r3
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	4013      	ands	r3, r2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f000 808f 	beq.w	8012b08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f003 0310 	and.w	r3, r3, #16
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f000 8087 	beq.w	8012b08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129fe:	2220      	movs	r2, #32
 8012a00:	409a      	lsls	r2, r3
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	2b05      	cmp	r3, #5
 8012a10:	d136      	bne.n	8012a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	681a      	ldr	r2, [r3, #0]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f022 0216 	bic.w	r2, r2, #22
 8012a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	695a      	ldr	r2, [r3, #20]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d103      	bne.n	8012a42 <HAL_DMA_IRQHandler+0x1da>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d007      	beq.n	8012a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f022 0208 	bic.w	r2, r2, #8
 8012a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a56:	223f      	movs	r2, #63	; 0x3f
 8012a58:	409a      	lsls	r2, r3
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2201      	movs	r2, #1
 8012a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d07e      	beq.n	8012b74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	4798      	blx	r3
        }
        return;
 8012a7e:	e079      	b.n	8012b74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d01d      	beq.n	8012aca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d10d      	bne.n	8012ab8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d031      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	4798      	blx	r3
 8012aac:	e02c      	b.n	8012b08 <HAL_DMA_IRQHandler+0x2a0>
 8012aae:	bf00      	nop
 8012ab0:	20000030 	.word	0x20000030
 8012ab4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d023      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	4798      	blx	r3
 8012ac8:	e01e      	b.n	8012b08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d10f      	bne.n	8012af8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f022 0210 	bic.w	r2, r2, #16
 8012ae6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2201      	movs	r2, #1
 8012aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d003      	beq.n	8012b08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d032      	beq.n	8012b76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d022      	beq.n	8012b62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2205      	movs	r2, #5
 8012b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	681a      	ldr	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	f022 0201 	bic.w	r2, r2, #1
 8012b32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	3301      	adds	r3, #1
 8012b38:	60bb      	str	r3, [r7, #8]
 8012b3a:	697a      	ldr	r2, [r7, #20]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d307      	bcc.n	8012b50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	f003 0301 	and.w	r3, r3, #1
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1f2      	bne.n	8012b34 <HAL_DMA_IRQHandler+0x2cc>
 8012b4e:	e000      	b.n	8012b52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8012b50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2201      	movs	r2, #1
 8012b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d005      	beq.n	8012b76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	4798      	blx	r3
 8012b72:	e000      	b.n	8012b76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8012b74:	bf00      	nop
    }
  }
}
 8012b76:	3718      	adds	r7, #24
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b085      	sub	sp, #20
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	60b9      	str	r1, [r7, #8]
 8012b86:	607a      	str	r2, [r7, #4]
 8012b88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012b98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	683a      	ldr	r2, [r7, #0]
 8012ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	2b40      	cmp	r3, #64	; 0x40
 8012ba8:	d108      	bne.n	8012bbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8012bba:	e007      	b.n	8012bcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	60da      	str	r2, [r3, #12]
}
 8012bcc:	bf00      	nop
 8012bce:	3714      	adds	r7, #20
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b085      	sub	sp, #20
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	3b10      	subs	r3, #16
 8012be8:	4a14      	ldr	r2, [pc, #80]	; (8012c3c <DMA_CalcBaseAndBitshift+0x64>)
 8012bea:	fba2 2303 	umull	r2, r3, r2, r3
 8012bee:	091b      	lsrs	r3, r3, #4
 8012bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012bf2:	4a13      	ldr	r2, [pc, #76]	; (8012c40 <DMA_CalcBaseAndBitshift+0x68>)
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	d909      	bls.n	8012c1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012c0e:	f023 0303 	bic.w	r3, r3, #3
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	659a      	str	r2, [r3, #88]	; 0x58
 8012c18:	e007      	b.n	8012c2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012c22:	f023 0303 	bic.w	r3, r3, #3
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3714      	adds	r7, #20
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop
 8012c3c:	aaaaaaab 	.word	0xaaaaaaab
 8012c40:	0801f300 	.word	0x0801f300

08012c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b085      	sub	sp, #20
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	699b      	ldr	r3, [r3, #24]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d11f      	bne.n	8012c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	2b03      	cmp	r3, #3
 8012c62:	d856      	bhi.n	8012d12 <DMA_CheckFifoParam+0xce>
 8012c64:	a201      	add	r2, pc, #4	; (adr r2, 8012c6c <DMA_CheckFifoParam+0x28>)
 8012c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c6a:	bf00      	nop
 8012c6c:	08012c7d 	.word	0x08012c7d
 8012c70:	08012c8f 	.word	0x08012c8f
 8012c74:	08012c7d 	.word	0x08012c7d
 8012c78:	08012d13 	.word	0x08012d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d046      	beq.n	8012d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012c8c:	e043      	b.n	8012d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012c96:	d140      	bne.n	8012d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012c9c:	e03d      	b.n	8012d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	699b      	ldr	r3, [r3, #24]
 8012ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ca6:	d121      	bne.n	8012cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	2b03      	cmp	r3, #3
 8012cac:	d837      	bhi.n	8012d1e <DMA_CheckFifoParam+0xda>
 8012cae:	a201      	add	r2, pc, #4	; (adr r2, 8012cb4 <DMA_CheckFifoParam+0x70>)
 8012cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb4:	08012cc5 	.word	0x08012cc5
 8012cb8:	08012ccb 	.word	0x08012ccb
 8012cbc:	08012cc5 	.word	0x08012cc5
 8012cc0:	08012cdd 	.word	0x08012cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8012cc8:	e030      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d025      	beq.n	8012d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012cda:	e022      	b.n	8012d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012ce4:	d11f      	bne.n	8012d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012cea:	e01c      	b.n	8012d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	2b02      	cmp	r3, #2
 8012cf0:	d903      	bls.n	8012cfa <DMA_CheckFifoParam+0xb6>
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	2b03      	cmp	r3, #3
 8012cf6:	d003      	beq.n	8012d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012cf8:	e018      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8012cfe:	e015      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00e      	beq.n	8012d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8012d10:	e00b      	b.n	8012d2a <DMA_CheckFifoParam+0xe6>
      break;
 8012d12:	bf00      	nop
 8012d14:	e00a      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      break;
 8012d16:	bf00      	nop
 8012d18:	e008      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      break;
 8012d1a:	bf00      	nop
 8012d1c:	e006      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      break;
 8012d1e:	bf00      	nop
 8012d20:	e004      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      break;
 8012d22:	bf00      	nop
 8012d24:	e002      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8012d26:	bf00      	nop
 8012d28:	e000      	b.n	8012d2c <DMA_CheckFifoParam+0xe8>
      break;
 8012d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8012d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop

08012d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b089      	sub	sp, #36	; 0x24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012d46:	2300      	movs	r3, #0
 8012d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012d52:	2300      	movs	r3, #0
 8012d54:	61fb      	str	r3, [r7, #28]
 8012d56:	e16b      	b.n	8013030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012d58:	2201      	movs	r2, #1
 8012d5a:	69fb      	ldr	r3, [r7, #28]
 8012d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8012d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	4013      	ands	r3, r2
 8012d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012d6c:	693a      	ldr	r2, [r7, #16]
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	f040 815a 	bne.w	801302a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	f003 0303 	and.w	r3, r3, #3
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d005      	beq.n	8012d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012d8a:	2b02      	cmp	r3, #2
 8012d8c:	d130      	bne.n	8012df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	2203      	movs	r2, #3
 8012d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d9e:	43db      	mvns	r3, r3
 8012da0:	69ba      	ldr	r2, [r7, #24]
 8012da2:	4013      	ands	r3, r2
 8012da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	68da      	ldr	r2, [r3, #12]
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	005b      	lsls	r3, r3, #1
 8012dae:	fa02 f303 	lsl.w	r3, r2, r3
 8012db2:	69ba      	ldr	r2, [r7, #24]
 8012db4:	4313      	orrs	r3, r2
 8012db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	69ba      	ldr	r2, [r7, #24]
 8012dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	69fb      	ldr	r3, [r7, #28]
 8012dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8012dcc:	43db      	mvns	r3, r3
 8012dce:	69ba      	ldr	r2, [r7, #24]
 8012dd0:	4013      	ands	r3, r2
 8012dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	091b      	lsrs	r3, r3, #4
 8012dda:	f003 0201 	and.w	r2, r3, #1
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	fa02 f303 	lsl.w	r3, r2, r3
 8012de4:	69ba      	ldr	r2, [r7, #24]
 8012de6:	4313      	orrs	r3, r2
 8012de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	69ba      	ldr	r2, [r7, #24]
 8012dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	f003 0303 	and.w	r3, r3, #3
 8012df8:	2b03      	cmp	r3, #3
 8012dfa:	d017      	beq.n	8012e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	2203      	movs	r2, #3
 8012e08:	fa02 f303 	lsl.w	r3, r2, r3
 8012e0c:	43db      	mvns	r3, r3
 8012e0e:	69ba      	ldr	r2, [r7, #24]
 8012e10:	4013      	ands	r3, r2
 8012e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	689a      	ldr	r2, [r3, #8]
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	005b      	lsls	r3, r3, #1
 8012e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e20:	69ba      	ldr	r2, [r7, #24]
 8012e22:	4313      	orrs	r3, r2
 8012e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	69ba      	ldr	r2, [r7, #24]
 8012e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	f003 0303 	and.w	r3, r3, #3
 8012e34:	2b02      	cmp	r3, #2
 8012e36:	d123      	bne.n	8012e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	08da      	lsrs	r2, r3, #3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	3208      	adds	r2, #8
 8012e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	f003 0307 	and.w	r3, r3, #7
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	220f      	movs	r2, #15
 8012e50:	fa02 f303 	lsl.w	r3, r2, r3
 8012e54:	43db      	mvns	r3, r3
 8012e56:	69ba      	ldr	r2, [r7, #24]
 8012e58:	4013      	ands	r3, r2
 8012e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	691a      	ldr	r2, [r3, #16]
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	f003 0307 	and.w	r3, r3, #7
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	fa02 f303 	lsl.w	r3, r2, r3
 8012e6c:	69ba      	ldr	r2, [r7, #24]
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	08da      	lsrs	r2, r3, #3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	3208      	adds	r2, #8
 8012e7a:	69b9      	ldr	r1, [r7, #24]
 8012e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012e86:	69fb      	ldr	r3, [r7, #28]
 8012e88:	005b      	lsls	r3, r3, #1
 8012e8a:	2203      	movs	r2, #3
 8012e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e90:	43db      	mvns	r3, r3
 8012e92:	69ba      	ldr	r2, [r7, #24]
 8012e94:	4013      	ands	r3, r2
 8012e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	f003 0203 	and.w	r2, r3, #3
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	005b      	lsls	r3, r3, #1
 8012ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ea8:	69ba      	ldr	r2, [r7, #24]
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	69ba      	ldr	r2, [r7, #24]
 8012eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f000 80b4 	beq.w	801302a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	60fb      	str	r3, [r7, #12]
 8012ec6:	4b60      	ldr	r3, [pc, #384]	; (8013048 <HAL_GPIO_Init+0x30c>)
 8012ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eca:	4a5f      	ldr	r2, [pc, #380]	; (8013048 <HAL_GPIO_Init+0x30c>)
 8012ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8012ed2:	4b5d      	ldr	r3, [pc, #372]	; (8013048 <HAL_GPIO_Init+0x30c>)
 8012ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012eda:	60fb      	str	r3, [r7, #12]
 8012edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012ede:	4a5b      	ldr	r2, [pc, #364]	; (801304c <HAL_GPIO_Init+0x310>)
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	089b      	lsrs	r3, r3, #2
 8012ee4:	3302      	adds	r3, #2
 8012ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	f003 0303 	and.w	r3, r3, #3
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	220f      	movs	r2, #15
 8012ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8012efa:	43db      	mvns	r3, r3
 8012efc:	69ba      	ldr	r2, [r7, #24]
 8012efe:	4013      	ands	r3, r2
 8012f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4a52      	ldr	r2, [pc, #328]	; (8013050 <HAL_GPIO_Init+0x314>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d02b      	beq.n	8012f62 <HAL_GPIO_Init+0x226>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	4a51      	ldr	r2, [pc, #324]	; (8013054 <HAL_GPIO_Init+0x318>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d025      	beq.n	8012f5e <HAL_GPIO_Init+0x222>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	4a50      	ldr	r2, [pc, #320]	; (8013058 <HAL_GPIO_Init+0x31c>)
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d01f      	beq.n	8012f5a <HAL_GPIO_Init+0x21e>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	4a4f      	ldr	r2, [pc, #316]	; (801305c <HAL_GPIO_Init+0x320>)
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d019      	beq.n	8012f56 <HAL_GPIO_Init+0x21a>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	4a4e      	ldr	r2, [pc, #312]	; (8013060 <HAL_GPIO_Init+0x324>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d013      	beq.n	8012f52 <HAL_GPIO_Init+0x216>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	4a4d      	ldr	r2, [pc, #308]	; (8013064 <HAL_GPIO_Init+0x328>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d00d      	beq.n	8012f4e <HAL_GPIO_Init+0x212>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4a4c      	ldr	r2, [pc, #304]	; (8013068 <HAL_GPIO_Init+0x32c>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d007      	beq.n	8012f4a <HAL_GPIO_Init+0x20e>
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	4a4b      	ldr	r2, [pc, #300]	; (801306c <HAL_GPIO_Init+0x330>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d101      	bne.n	8012f46 <HAL_GPIO_Init+0x20a>
 8012f42:	2307      	movs	r3, #7
 8012f44:	e00e      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f46:	2308      	movs	r3, #8
 8012f48:	e00c      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f4a:	2306      	movs	r3, #6
 8012f4c:	e00a      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f4e:	2305      	movs	r3, #5
 8012f50:	e008      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f52:	2304      	movs	r3, #4
 8012f54:	e006      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f56:	2303      	movs	r3, #3
 8012f58:	e004      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	e002      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	e000      	b.n	8012f64 <HAL_GPIO_Init+0x228>
 8012f62:	2300      	movs	r3, #0
 8012f64:	69fa      	ldr	r2, [r7, #28]
 8012f66:	f002 0203 	and.w	r2, r2, #3
 8012f6a:	0092      	lsls	r2, r2, #2
 8012f6c:	4093      	lsls	r3, r2
 8012f6e:	69ba      	ldr	r2, [r7, #24]
 8012f70:	4313      	orrs	r3, r2
 8012f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012f74:	4935      	ldr	r1, [pc, #212]	; (801304c <HAL_GPIO_Init+0x310>)
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	089b      	lsrs	r3, r3, #2
 8012f7a:	3302      	adds	r3, #2
 8012f7c:	69ba      	ldr	r2, [r7, #24]
 8012f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012f82:	4b3b      	ldr	r3, [pc, #236]	; (8013070 <HAL_GPIO_Init+0x334>)
 8012f84:	689b      	ldr	r3, [r3, #8]
 8012f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	43db      	mvns	r3, r3
 8012f8c:	69ba      	ldr	r2, [r7, #24]
 8012f8e:	4013      	ands	r3, r2
 8012f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d003      	beq.n	8012fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012f9e:	69ba      	ldr	r2, [r7, #24]
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012fa6:	4a32      	ldr	r2, [pc, #200]	; (8013070 <HAL_GPIO_Init+0x334>)
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012fac:	4b30      	ldr	r3, [pc, #192]	; (8013070 <HAL_GPIO_Init+0x334>)
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	43db      	mvns	r3, r3
 8012fb6:	69ba      	ldr	r2, [r7, #24]
 8012fb8:	4013      	ands	r3, r2
 8012fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d003      	beq.n	8012fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012fc8:	69ba      	ldr	r2, [r7, #24]
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012fd0:	4a27      	ldr	r2, [pc, #156]	; (8013070 <HAL_GPIO_Init+0x334>)
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8012fd6:	4b26      	ldr	r3, [pc, #152]	; (8013070 <HAL_GPIO_Init+0x334>)
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	43db      	mvns	r3, r3
 8012fe0:	69ba      	ldr	r2, [r7, #24]
 8012fe2:	4013      	ands	r3, r2
 8012fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d003      	beq.n	8012ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012ff2:	69ba      	ldr	r2, [r7, #24]
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012ffa:	4a1d      	ldr	r2, [pc, #116]	; (8013070 <HAL_GPIO_Init+0x334>)
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013000:	4b1b      	ldr	r3, [pc, #108]	; (8013070 <HAL_GPIO_Init+0x334>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	43db      	mvns	r3, r3
 801300a:	69ba      	ldr	r2, [r7, #24]
 801300c:	4013      	ands	r3, r2
 801300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013018:	2b00      	cmp	r3, #0
 801301a:	d003      	beq.n	8013024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801301c:	69ba      	ldr	r2, [r7, #24]
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	4313      	orrs	r3, r2
 8013022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013024:	4a12      	ldr	r2, [pc, #72]	; (8013070 <HAL_GPIO_Init+0x334>)
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	3301      	adds	r3, #1
 801302e:	61fb      	str	r3, [r7, #28]
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	2b0f      	cmp	r3, #15
 8013034:	f67f ae90 	bls.w	8012d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013038:	bf00      	nop
 801303a:	bf00      	nop
 801303c:	3724      	adds	r7, #36	; 0x24
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	40023800 	.word	0x40023800
 801304c:	40013800 	.word	0x40013800
 8013050:	40020000 	.word	0x40020000
 8013054:	40020400 	.word	0x40020400
 8013058:	40020800 	.word	0x40020800
 801305c:	40020c00 	.word	0x40020c00
 8013060:	40021000 	.word	0x40021000
 8013064:	40021400 	.word	0x40021400
 8013068:	40021800 	.word	0x40021800
 801306c:	40021c00 	.word	0x40021c00
 8013070:	40013c00 	.word	0x40013c00

08013074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	460b      	mov	r3, r1
 801307e:	807b      	strh	r3, [r7, #2]
 8013080:	4613      	mov	r3, r2
 8013082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013084:	787b      	ldrb	r3, [r7, #1]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d003      	beq.n	8013092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801308a:	887a      	ldrh	r2, [r7, #2]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013090:	e003      	b.n	801309a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013092:	887b      	ldrh	r3, [r7, #2]
 8013094:	041a      	lsls	r2, r3, #16
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	619a      	str	r2, [r3, #24]
}
 801309a:	bf00      	nop
 801309c:	370c      	adds	r7, #12
 801309e:	46bd      	mov	sp, r7
 80130a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a4:	4770      	bx	lr
	...

080130a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b086      	sub	sp, #24
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d101      	bne.n	80130ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80130b6:	2301      	movs	r3, #1
 80130b8:	e267      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f003 0301 	and.w	r3, r3, #1
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d075      	beq.n	80131b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80130c6:	4b88      	ldr	r3, [pc, #544]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80130c8:	689b      	ldr	r3, [r3, #8]
 80130ca:	f003 030c 	and.w	r3, r3, #12
 80130ce:	2b04      	cmp	r3, #4
 80130d0:	d00c      	beq.n	80130ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80130d2:	4b85      	ldr	r3, [pc, #532]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80130d4:	689b      	ldr	r3, [r3, #8]
 80130d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80130da:	2b08      	cmp	r3, #8
 80130dc:	d112      	bne.n	8013104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80130de:	4b82      	ldr	r3, [pc, #520]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80130e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80130ea:	d10b      	bne.n	8013104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80130ec:	4b7e      	ldr	r3, [pc, #504]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d05b      	beq.n	80131b0 <HAL_RCC_OscConfig+0x108>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d157      	bne.n	80131b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013100:	2301      	movs	r3, #1
 8013102:	e242      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801310c:	d106      	bne.n	801311c <HAL_RCC_OscConfig+0x74>
 801310e:	4b76      	ldr	r3, [pc, #472]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4a75      	ldr	r2, [pc, #468]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	e01d      	b.n	8013158 <HAL_RCC_OscConfig+0xb0>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013124:	d10c      	bne.n	8013140 <HAL_RCC_OscConfig+0x98>
 8013126:	4b70      	ldr	r3, [pc, #448]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4a6f      	ldr	r2, [pc, #444]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 801312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013130:	6013      	str	r3, [r2, #0]
 8013132:	4b6d      	ldr	r3, [pc, #436]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	4a6c      	ldr	r2, [pc, #432]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801313c:	6013      	str	r3, [r2, #0]
 801313e:	e00b      	b.n	8013158 <HAL_RCC_OscConfig+0xb0>
 8013140:	4b69      	ldr	r3, [pc, #420]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a68      	ldr	r2, [pc, #416]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801314a:	6013      	str	r3, [r2, #0]
 801314c:	4b66      	ldr	r3, [pc, #408]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4a65      	ldr	r2, [pc, #404]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d013      	beq.n	8013188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013160:	f7fd fd22 	bl	8010ba8 <HAL_GetTick>
 8013164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013166:	e008      	b.n	801317a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013168:	f7fd fd1e 	bl	8010ba8 <HAL_GetTick>
 801316c:	4602      	mov	r2, r0
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	1ad3      	subs	r3, r2, r3
 8013172:	2b64      	cmp	r3, #100	; 0x64
 8013174:	d901      	bls.n	801317a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013176:	2303      	movs	r3, #3
 8013178:	e207      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801317a:	4b5b      	ldr	r3, [pc, #364]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013182:	2b00      	cmp	r3, #0
 8013184:	d0f0      	beq.n	8013168 <HAL_RCC_OscConfig+0xc0>
 8013186:	e014      	b.n	80131b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013188:	f7fd fd0e 	bl	8010ba8 <HAL_GetTick>
 801318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801318e:	e008      	b.n	80131a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013190:	f7fd fd0a 	bl	8010ba8 <HAL_GetTick>
 8013194:	4602      	mov	r2, r0
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	1ad3      	subs	r3, r2, r3
 801319a:	2b64      	cmp	r3, #100	; 0x64
 801319c:	d901      	bls.n	80131a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801319e:	2303      	movs	r3, #3
 80131a0:	e1f3      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80131a2:	4b51      	ldr	r3, [pc, #324]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1f0      	bne.n	8013190 <HAL_RCC_OscConfig+0xe8>
 80131ae:	e000      	b.n	80131b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80131b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f003 0302 	and.w	r3, r3, #2
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d063      	beq.n	8013286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80131be:	4b4a      	ldr	r3, [pc, #296]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	f003 030c 	and.w	r3, r3, #12
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d00b      	beq.n	80131e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80131ca:	4b47      	ldr	r3, [pc, #284]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80131d2:	2b08      	cmp	r3, #8
 80131d4:	d11c      	bne.n	8013210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80131d6:	4b44      	ldr	r3, [pc, #272]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d116      	bne.n	8013210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80131e2:	4b41      	ldr	r3, [pc, #260]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f003 0302 	and.w	r3, r3, #2
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d005      	beq.n	80131fa <HAL_RCC_OscConfig+0x152>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d001      	beq.n	80131fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80131f6:	2301      	movs	r3, #1
 80131f8:	e1c7      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80131fa:	4b3b      	ldr	r3, [pc, #236]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	691b      	ldr	r3, [r3, #16]
 8013206:	00db      	lsls	r3, r3, #3
 8013208:	4937      	ldr	r1, [pc, #220]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 801320a:	4313      	orrs	r3, r2
 801320c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801320e:	e03a      	b.n	8013286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d020      	beq.n	801325a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013218:	4b34      	ldr	r3, [pc, #208]	; (80132ec <HAL_RCC_OscConfig+0x244>)
 801321a:	2201      	movs	r2, #1
 801321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801321e:	f7fd fcc3 	bl	8010ba8 <HAL_GetTick>
 8013222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013224:	e008      	b.n	8013238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013226:	f7fd fcbf 	bl	8010ba8 <HAL_GetTick>
 801322a:	4602      	mov	r2, r0
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	2b02      	cmp	r3, #2
 8013232:	d901      	bls.n	8013238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013234:	2303      	movs	r3, #3
 8013236:	e1a8      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013238:	4b2b      	ldr	r3, [pc, #172]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f003 0302 	and.w	r3, r3, #2
 8013240:	2b00      	cmp	r3, #0
 8013242:	d0f0      	beq.n	8013226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013244:	4b28      	ldr	r3, [pc, #160]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	691b      	ldr	r3, [r3, #16]
 8013250:	00db      	lsls	r3, r3, #3
 8013252:	4925      	ldr	r1, [pc, #148]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 8013254:	4313      	orrs	r3, r2
 8013256:	600b      	str	r3, [r1, #0]
 8013258:	e015      	b.n	8013286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801325a:	4b24      	ldr	r3, [pc, #144]	; (80132ec <HAL_RCC_OscConfig+0x244>)
 801325c:	2200      	movs	r2, #0
 801325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013260:	f7fd fca2 	bl	8010ba8 <HAL_GetTick>
 8013264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013266:	e008      	b.n	801327a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013268:	f7fd fc9e 	bl	8010ba8 <HAL_GetTick>
 801326c:	4602      	mov	r2, r0
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	2b02      	cmp	r3, #2
 8013274:	d901      	bls.n	801327a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013276:	2303      	movs	r3, #3
 8013278:	e187      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801327a:	4b1b      	ldr	r3, [pc, #108]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f003 0302 	and.w	r3, r3, #2
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1f0      	bne.n	8013268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f003 0308 	and.w	r3, r3, #8
 801328e:	2b00      	cmp	r3, #0
 8013290:	d036      	beq.n	8013300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	695b      	ldr	r3, [r3, #20]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d016      	beq.n	80132c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801329a:	4b15      	ldr	r3, [pc, #84]	; (80132f0 <HAL_RCC_OscConfig+0x248>)
 801329c:	2201      	movs	r2, #1
 801329e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80132a0:	f7fd fc82 	bl	8010ba8 <HAL_GetTick>
 80132a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80132a6:	e008      	b.n	80132ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80132a8:	f7fd fc7e 	bl	8010ba8 <HAL_GetTick>
 80132ac:	4602      	mov	r2, r0
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	1ad3      	subs	r3, r2, r3
 80132b2:	2b02      	cmp	r3, #2
 80132b4:	d901      	bls.n	80132ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80132b6:	2303      	movs	r3, #3
 80132b8:	e167      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80132ba:	4b0b      	ldr	r3, [pc, #44]	; (80132e8 <HAL_RCC_OscConfig+0x240>)
 80132bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132be:	f003 0302 	and.w	r3, r3, #2
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d0f0      	beq.n	80132a8 <HAL_RCC_OscConfig+0x200>
 80132c6:	e01b      	b.n	8013300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80132c8:	4b09      	ldr	r3, [pc, #36]	; (80132f0 <HAL_RCC_OscConfig+0x248>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80132ce:	f7fd fc6b 	bl	8010ba8 <HAL_GetTick>
 80132d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80132d4:	e00e      	b.n	80132f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80132d6:	f7fd fc67 	bl	8010ba8 <HAL_GetTick>
 80132da:	4602      	mov	r2, r0
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	d907      	bls.n	80132f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80132e4:	2303      	movs	r3, #3
 80132e6:	e150      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
 80132e8:	40023800 	.word	0x40023800
 80132ec:	42470000 	.word	0x42470000
 80132f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80132f4:	4b88      	ldr	r3, [pc, #544]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80132f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132f8:	f003 0302 	and.w	r3, r3, #2
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d1ea      	bne.n	80132d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f003 0304 	and.w	r3, r3, #4
 8013308:	2b00      	cmp	r3, #0
 801330a:	f000 8097 	beq.w	801343c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801330e:	2300      	movs	r3, #0
 8013310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013312:	4b81      	ldr	r3, [pc, #516]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801331a:	2b00      	cmp	r3, #0
 801331c:	d10f      	bne.n	801333e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801331e:	2300      	movs	r3, #0
 8013320:	60bb      	str	r3, [r7, #8]
 8013322:	4b7d      	ldr	r3, [pc, #500]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013326:	4a7c      	ldr	r2, [pc, #496]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801332c:	6413      	str	r3, [r2, #64]	; 0x40
 801332e:	4b7a      	ldr	r3, [pc, #488]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013336:	60bb      	str	r3, [r7, #8]
 8013338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801333a:	2301      	movs	r3, #1
 801333c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801333e:	4b77      	ldr	r3, [pc, #476]	; (801351c <HAL_RCC_OscConfig+0x474>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013346:	2b00      	cmp	r3, #0
 8013348:	d118      	bne.n	801337c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801334a:	4b74      	ldr	r3, [pc, #464]	; (801351c <HAL_RCC_OscConfig+0x474>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a73      	ldr	r2, [pc, #460]	; (801351c <HAL_RCC_OscConfig+0x474>)
 8013350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013356:	f7fd fc27 	bl	8010ba8 <HAL_GetTick>
 801335a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801335c:	e008      	b.n	8013370 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801335e:	f7fd fc23 	bl	8010ba8 <HAL_GetTick>
 8013362:	4602      	mov	r2, r0
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	1ad3      	subs	r3, r2, r3
 8013368:	2b02      	cmp	r3, #2
 801336a:	d901      	bls.n	8013370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801336c:	2303      	movs	r3, #3
 801336e:	e10c      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013370:	4b6a      	ldr	r3, [pc, #424]	; (801351c <HAL_RCC_OscConfig+0x474>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013378:	2b00      	cmp	r3, #0
 801337a:	d0f0      	beq.n	801335e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	689b      	ldr	r3, [r3, #8]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d106      	bne.n	8013392 <HAL_RCC_OscConfig+0x2ea>
 8013384:	4b64      	ldr	r3, [pc, #400]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013388:	4a63      	ldr	r2, [pc, #396]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 801338a:	f043 0301 	orr.w	r3, r3, #1
 801338e:	6713      	str	r3, [r2, #112]	; 0x70
 8013390:	e01c      	b.n	80133cc <HAL_RCC_OscConfig+0x324>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	2b05      	cmp	r3, #5
 8013398:	d10c      	bne.n	80133b4 <HAL_RCC_OscConfig+0x30c>
 801339a:	4b5f      	ldr	r3, [pc, #380]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 801339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801339e:	4a5e      	ldr	r2, [pc, #376]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133a0:	f043 0304 	orr.w	r3, r3, #4
 80133a4:	6713      	str	r3, [r2, #112]	; 0x70
 80133a6:	4b5c      	ldr	r3, [pc, #368]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133aa:	4a5b      	ldr	r2, [pc, #364]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133ac:	f043 0301 	orr.w	r3, r3, #1
 80133b0:	6713      	str	r3, [r2, #112]	; 0x70
 80133b2:	e00b      	b.n	80133cc <HAL_RCC_OscConfig+0x324>
 80133b4:	4b58      	ldr	r3, [pc, #352]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133b8:	4a57      	ldr	r2, [pc, #348]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133ba:	f023 0301 	bic.w	r3, r3, #1
 80133be:	6713      	str	r3, [r2, #112]	; 0x70
 80133c0:	4b55      	ldr	r3, [pc, #340]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133c4:	4a54      	ldr	r2, [pc, #336]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133c6:	f023 0304 	bic.w	r3, r3, #4
 80133ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	689b      	ldr	r3, [r3, #8]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d015      	beq.n	8013400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80133d4:	f7fd fbe8 	bl	8010ba8 <HAL_GetTick>
 80133d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80133da:	e00a      	b.n	80133f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133dc:	f7fd fbe4 	bl	8010ba8 <HAL_GetTick>
 80133e0:	4602      	mov	r2, r0
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80133ea:	4293      	cmp	r3, r2
 80133ec:	d901      	bls.n	80133f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80133ee:	2303      	movs	r3, #3
 80133f0:	e0cb      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80133f2:	4b49      	ldr	r3, [pc, #292]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80133f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133f6:	f003 0302 	and.w	r3, r3, #2
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d0ee      	beq.n	80133dc <HAL_RCC_OscConfig+0x334>
 80133fe:	e014      	b.n	801342a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013400:	f7fd fbd2 	bl	8010ba8 <HAL_GetTick>
 8013404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013406:	e00a      	b.n	801341e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013408:	f7fd fbce 	bl	8010ba8 <HAL_GetTick>
 801340c:	4602      	mov	r2, r0
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	f241 3288 	movw	r2, #5000	; 0x1388
 8013416:	4293      	cmp	r3, r2
 8013418:	d901      	bls.n	801341e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801341a:	2303      	movs	r3, #3
 801341c:	e0b5      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801341e:	4b3e      	ldr	r3, [pc, #248]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013422:	f003 0302 	and.w	r3, r3, #2
 8013426:	2b00      	cmp	r3, #0
 8013428:	d1ee      	bne.n	8013408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801342a:	7dfb      	ldrb	r3, [r7, #23]
 801342c:	2b01      	cmp	r3, #1
 801342e:	d105      	bne.n	801343c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013430:	4b39      	ldr	r3, [pc, #228]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013434:	4a38      	ldr	r2, [pc, #224]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801343a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	699b      	ldr	r3, [r3, #24]
 8013440:	2b00      	cmp	r3, #0
 8013442:	f000 80a1 	beq.w	8013588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013446:	4b34      	ldr	r3, [pc, #208]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	f003 030c 	and.w	r3, r3, #12
 801344e:	2b08      	cmp	r3, #8
 8013450:	d05c      	beq.n	801350c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	699b      	ldr	r3, [r3, #24]
 8013456:	2b02      	cmp	r3, #2
 8013458:	d141      	bne.n	80134de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801345a:	4b31      	ldr	r3, [pc, #196]	; (8013520 <HAL_RCC_OscConfig+0x478>)
 801345c:	2200      	movs	r2, #0
 801345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013460:	f7fd fba2 	bl	8010ba8 <HAL_GetTick>
 8013464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013466:	e008      	b.n	801347a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013468:	f7fd fb9e 	bl	8010ba8 <HAL_GetTick>
 801346c:	4602      	mov	r2, r0
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	2b02      	cmp	r3, #2
 8013474:	d901      	bls.n	801347a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8013476:	2303      	movs	r3, #3
 8013478:	e087      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801347a:	4b27      	ldr	r3, [pc, #156]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013482:	2b00      	cmp	r3, #0
 8013484:	d1f0      	bne.n	8013468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	69da      	ldr	r2, [r3, #28]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6a1b      	ldr	r3, [r3, #32]
 801348e:	431a      	orrs	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013494:	019b      	lsls	r3, r3, #6
 8013496:	431a      	orrs	r2, r3
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801349c:	085b      	lsrs	r3, r3, #1
 801349e:	3b01      	subs	r3, #1
 80134a0:	041b      	lsls	r3, r3, #16
 80134a2:	431a      	orrs	r2, r3
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a8:	061b      	lsls	r3, r3, #24
 80134aa:	491b      	ldr	r1, [pc, #108]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80134ac:	4313      	orrs	r3, r2
 80134ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80134b0:	4b1b      	ldr	r3, [pc, #108]	; (8013520 <HAL_RCC_OscConfig+0x478>)
 80134b2:	2201      	movs	r2, #1
 80134b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134b6:	f7fd fb77 	bl	8010ba8 <HAL_GetTick>
 80134ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80134bc:	e008      	b.n	80134d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80134be:	f7fd fb73 	bl	8010ba8 <HAL_GetTick>
 80134c2:	4602      	mov	r2, r0
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	1ad3      	subs	r3, r2, r3
 80134c8:	2b02      	cmp	r3, #2
 80134ca:	d901      	bls.n	80134d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80134cc:	2303      	movs	r3, #3
 80134ce:	e05c      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80134d0:	4b11      	ldr	r3, [pc, #68]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d0f0      	beq.n	80134be <HAL_RCC_OscConfig+0x416>
 80134dc:	e054      	b.n	8013588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80134de:	4b10      	ldr	r3, [pc, #64]	; (8013520 <HAL_RCC_OscConfig+0x478>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134e4:	f7fd fb60 	bl	8010ba8 <HAL_GetTick>
 80134e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80134ea:	e008      	b.n	80134fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80134ec:	f7fd fb5c 	bl	8010ba8 <HAL_GetTick>
 80134f0:	4602      	mov	r2, r0
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	1ad3      	subs	r3, r2, r3
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d901      	bls.n	80134fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80134fa:	2303      	movs	r3, #3
 80134fc:	e045      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80134fe:	4b06      	ldr	r3, [pc, #24]	; (8013518 <HAL_RCC_OscConfig+0x470>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013506:	2b00      	cmp	r3, #0
 8013508:	d1f0      	bne.n	80134ec <HAL_RCC_OscConfig+0x444>
 801350a:	e03d      	b.n	8013588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d107      	bne.n	8013524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013514:	2301      	movs	r3, #1
 8013516:	e038      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
 8013518:	40023800 	.word	0x40023800
 801351c:	40007000 	.word	0x40007000
 8013520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013524:	4b1b      	ldr	r3, [pc, #108]	; (8013594 <HAL_RCC_OscConfig+0x4ec>)
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	699b      	ldr	r3, [r3, #24]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d028      	beq.n	8013584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801353c:	429a      	cmp	r2, r3
 801353e:	d121      	bne.n	8013584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801354a:	429a      	cmp	r2, r3
 801354c:	d11a      	bne.n	8013584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013554:	4013      	ands	r3, r2
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801355a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801355c:	4293      	cmp	r3, r2
 801355e:	d111      	bne.n	8013584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801356a:	085b      	lsrs	r3, r3, #1
 801356c:	3b01      	subs	r3, #1
 801356e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013570:	429a      	cmp	r2, r3
 8013572:	d107      	bne.n	8013584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013580:	429a      	cmp	r2, r3
 8013582:	d001      	beq.n	8013588 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8013584:	2301      	movs	r3, #1
 8013586:	e000      	b.n	801358a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3718      	adds	r7, #24
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	40023800 	.word	0x40023800

08013598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d101      	bne.n	80135ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80135a8:	2301      	movs	r3, #1
 80135aa:	e0cc      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80135ac:	4b68      	ldr	r3, [pc, #416]	; (8013750 <HAL_RCC_ClockConfig+0x1b8>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f003 0307 	and.w	r3, r3, #7
 80135b4:	683a      	ldr	r2, [r7, #0]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d90c      	bls.n	80135d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80135ba:	4b65      	ldr	r3, [pc, #404]	; (8013750 <HAL_RCC_ClockConfig+0x1b8>)
 80135bc:	683a      	ldr	r2, [r7, #0]
 80135be:	b2d2      	uxtb	r2, r2
 80135c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80135c2:	4b63      	ldr	r3, [pc, #396]	; (8013750 <HAL_RCC_ClockConfig+0x1b8>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f003 0307 	and.w	r3, r3, #7
 80135ca:	683a      	ldr	r2, [r7, #0]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d001      	beq.n	80135d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80135d0:	2301      	movs	r3, #1
 80135d2:	e0b8      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f003 0302 	and.w	r3, r3, #2
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d020      	beq.n	8013622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f003 0304 	and.w	r3, r3, #4
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d005      	beq.n	80135f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80135ec:	4b59      	ldr	r3, [pc, #356]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	4a58      	ldr	r2, [pc, #352]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 80135f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80135f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	f003 0308 	and.w	r3, r3, #8
 8013600:	2b00      	cmp	r3, #0
 8013602:	d005      	beq.n	8013610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013604:	4b53      	ldr	r3, [pc, #332]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013606:	689b      	ldr	r3, [r3, #8]
 8013608:	4a52      	ldr	r2, [pc, #328]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 801360a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801360e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013610:	4b50      	ldr	r3, [pc, #320]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	689b      	ldr	r3, [r3, #8]
 801361c:	494d      	ldr	r1, [pc, #308]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 801361e:	4313      	orrs	r3, r2
 8013620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f003 0301 	and.w	r3, r3, #1
 801362a:	2b00      	cmp	r3, #0
 801362c:	d044      	beq.n	80136b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	2b01      	cmp	r3, #1
 8013634:	d107      	bne.n	8013646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013636:	4b47      	ldr	r3, [pc, #284]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801363e:	2b00      	cmp	r3, #0
 8013640:	d119      	bne.n	8013676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013642:	2301      	movs	r3, #1
 8013644:	e07f      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	2b02      	cmp	r3, #2
 801364c:	d003      	beq.n	8013656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013652:	2b03      	cmp	r3, #3
 8013654:	d107      	bne.n	8013666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013656:	4b3f      	ldr	r3, [pc, #252]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801365e:	2b00      	cmp	r3, #0
 8013660:	d109      	bne.n	8013676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013662:	2301      	movs	r3, #1
 8013664:	e06f      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013666:	4b3b      	ldr	r3, [pc, #236]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f003 0302 	and.w	r3, r3, #2
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013672:	2301      	movs	r3, #1
 8013674:	e067      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013676:	4b37      	ldr	r3, [pc, #220]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	f023 0203 	bic.w	r2, r3, #3
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	4934      	ldr	r1, [pc, #208]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013684:	4313      	orrs	r3, r2
 8013686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013688:	f7fd fa8e 	bl	8010ba8 <HAL_GetTick>
 801368c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801368e:	e00a      	b.n	80136a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013690:	f7fd fa8a 	bl	8010ba8 <HAL_GetTick>
 8013694:	4602      	mov	r2, r0
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	1ad3      	subs	r3, r2, r3
 801369a:	f241 3288 	movw	r2, #5000	; 0x1388
 801369e:	4293      	cmp	r3, r2
 80136a0:	d901      	bls.n	80136a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80136a2:	2303      	movs	r3, #3
 80136a4:	e04f      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80136a6:	4b2b      	ldr	r3, [pc, #172]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	f003 020c 	and.w	r2, r3, #12
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d1eb      	bne.n	8013690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80136b8:	4b25      	ldr	r3, [pc, #148]	; (8013750 <HAL_RCC_ClockConfig+0x1b8>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f003 0307 	and.w	r3, r3, #7
 80136c0:	683a      	ldr	r2, [r7, #0]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d20c      	bcs.n	80136e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80136c6:	4b22      	ldr	r3, [pc, #136]	; (8013750 <HAL_RCC_ClockConfig+0x1b8>)
 80136c8:	683a      	ldr	r2, [r7, #0]
 80136ca:	b2d2      	uxtb	r2, r2
 80136cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80136ce:	4b20      	ldr	r3, [pc, #128]	; (8013750 <HAL_RCC_ClockConfig+0x1b8>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f003 0307 	and.w	r3, r3, #7
 80136d6:	683a      	ldr	r2, [r7, #0]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d001      	beq.n	80136e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80136dc:	2301      	movs	r3, #1
 80136de:	e032      	b.n	8013746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f003 0304 	and.w	r3, r3, #4
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d008      	beq.n	80136fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80136ec:	4b19      	ldr	r3, [pc, #100]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 80136ee:	689b      	ldr	r3, [r3, #8]
 80136f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	4916      	ldr	r1, [pc, #88]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 80136fa:	4313      	orrs	r3, r2
 80136fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f003 0308 	and.w	r3, r3, #8
 8013706:	2b00      	cmp	r3, #0
 8013708:	d009      	beq.n	801371e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801370a:	4b12      	ldr	r3, [pc, #72]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	00db      	lsls	r3, r3, #3
 8013718:	490e      	ldr	r1, [pc, #56]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 801371a:	4313      	orrs	r3, r2
 801371c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801371e:	f000 f821 	bl	8013764 <HAL_RCC_GetSysClockFreq>
 8013722:	4602      	mov	r2, r0
 8013724:	4b0b      	ldr	r3, [pc, #44]	; (8013754 <HAL_RCC_ClockConfig+0x1bc>)
 8013726:	689b      	ldr	r3, [r3, #8]
 8013728:	091b      	lsrs	r3, r3, #4
 801372a:	f003 030f 	and.w	r3, r3, #15
 801372e:	490a      	ldr	r1, [pc, #40]	; (8013758 <HAL_RCC_ClockConfig+0x1c0>)
 8013730:	5ccb      	ldrb	r3, [r1, r3]
 8013732:	fa22 f303 	lsr.w	r3, r2, r3
 8013736:	4a09      	ldr	r2, [pc, #36]	; (801375c <HAL_RCC_ClockConfig+0x1c4>)
 8013738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801373a:	4b09      	ldr	r3, [pc, #36]	; (8013760 <HAL_RCC_ClockConfig+0x1c8>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	4618      	mov	r0, r3
 8013740:	f7fc f966 	bl	800fa10 <HAL_InitTick>

  return HAL_OK;
 8013744:	2300      	movs	r3, #0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	bf00      	nop
 8013750:	40023c00 	.word	0x40023c00
 8013754:	40023800 	.word	0x40023800
 8013758:	0801f2e8 	.word	0x0801f2e8
 801375c:	20000030 	.word	0x20000030
 8013760:	20000034 	.word	0x20000034

08013764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013768:	b094      	sub	sp, #80	; 0x50
 801376a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801376c:	2300      	movs	r3, #0
 801376e:	647b      	str	r3, [r7, #68]	; 0x44
 8013770:	2300      	movs	r3, #0
 8013772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013774:	2300      	movs	r3, #0
 8013776:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8013778:	2300      	movs	r3, #0
 801377a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801377c:	4b79      	ldr	r3, [pc, #484]	; (8013964 <HAL_RCC_GetSysClockFreq+0x200>)
 801377e:	689b      	ldr	r3, [r3, #8]
 8013780:	f003 030c 	and.w	r3, r3, #12
 8013784:	2b08      	cmp	r3, #8
 8013786:	d00d      	beq.n	80137a4 <HAL_RCC_GetSysClockFreq+0x40>
 8013788:	2b08      	cmp	r3, #8
 801378a:	f200 80e1 	bhi.w	8013950 <HAL_RCC_GetSysClockFreq+0x1ec>
 801378e:	2b00      	cmp	r3, #0
 8013790:	d002      	beq.n	8013798 <HAL_RCC_GetSysClockFreq+0x34>
 8013792:	2b04      	cmp	r3, #4
 8013794:	d003      	beq.n	801379e <HAL_RCC_GetSysClockFreq+0x3a>
 8013796:	e0db      	b.n	8013950 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013798:	4b73      	ldr	r3, [pc, #460]	; (8013968 <HAL_RCC_GetSysClockFreq+0x204>)
 801379a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801379c:	e0db      	b.n	8013956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801379e:	4b72      	ldr	r3, [pc, #456]	; (8013968 <HAL_RCC_GetSysClockFreq+0x204>)
 80137a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80137a2:	e0d8      	b.n	8013956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80137a4:	4b6f      	ldr	r3, [pc, #444]	; (8013964 <HAL_RCC_GetSysClockFreq+0x200>)
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80137ae:	4b6d      	ldr	r3, [pc, #436]	; (8013964 <HAL_RCC_GetSysClockFreq+0x200>)
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d063      	beq.n	8013882 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80137ba:	4b6a      	ldr	r3, [pc, #424]	; (8013964 <HAL_RCC_GetSysClockFreq+0x200>)
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	099b      	lsrs	r3, r3, #6
 80137c0:	2200      	movs	r2, #0
 80137c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80137c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137cc:	633b      	str	r3, [r7, #48]	; 0x30
 80137ce:	2300      	movs	r3, #0
 80137d0:	637b      	str	r3, [r7, #52]	; 0x34
 80137d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80137d6:	4622      	mov	r2, r4
 80137d8:	462b      	mov	r3, r5
 80137da:	f04f 0000 	mov.w	r0, #0
 80137de:	f04f 0100 	mov.w	r1, #0
 80137e2:	0159      	lsls	r1, r3, #5
 80137e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80137e8:	0150      	lsls	r0, r2, #5
 80137ea:	4602      	mov	r2, r0
 80137ec:	460b      	mov	r3, r1
 80137ee:	4621      	mov	r1, r4
 80137f0:	1a51      	subs	r1, r2, r1
 80137f2:	6139      	str	r1, [r7, #16]
 80137f4:	4629      	mov	r1, r5
 80137f6:	eb63 0301 	sbc.w	r3, r3, r1
 80137fa:	617b      	str	r3, [r7, #20]
 80137fc:	f04f 0200 	mov.w	r2, #0
 8013800:	f04f 0300 	mov.w	r3, #0
 8013804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013808:	4659      	mov	r1, fp
 801380a:	018b      	lsls	r3, r1, #6
 801380c:	4651      	mov	r1, sl
 801380e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013812:	4651      	mov	r1, sl
 8013814:	018a      	lsls	r2, r1, #6
 8013816:	4651      	mov	r1, sl
 8013818:	ebb2 0801 	subs.w	r8, r2, r1
 801381c:	4659      	mov	r1, fp
 801381e:	eb63 0901 	sbc.w	r9, r3, r1
 8013822:	f04f 0200 	mov.w	r2, #0
 8013826:	f04f 0300 	mov.w	r3, #0
 801382a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801382e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013836:	4690      	mov	r8, r2
 8013838:	4699      	mov	r9, r3
 801383a:	4623      	mov	r3, r4
 801383c:	eb18 0303 	adds.w	r3, r8, r3
 8013840:	60bb      	str	r3, [r7, #8]
 8013842:	462b      	mov	r3, r5
 8013844:	eb49 0303 	adc.w	r3, r9, r3
 8013848:	60fb      	str	r3, [r7, #12]
 801384a:	f04f 0200 	mov.w	r2, #0
 801384e:	f04f 0300 	mov.w	r3, #0
 8013852:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013856:	4629      	mov	r1, r5
 8013858:	028b      	lsls	r3, r1, #10
 801385a:	4621      	mov	r1, r4
 801385c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013860:	4621      	mov	r1, r4
 8013862:	028a      	lsls	r2, r1, #10
 8013864:	4610      	mov	r0, r2
 8013866:	4619      	mov	r1, r3
 8013868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801386a:	2200      	movs	r2, #0
 801386c:	62bb      	str	r3, [r7, #40]	; 0x28
 801386e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013870:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013874:	f7ed fa08 	bl	8000c88 <__aeabi_uldivmod>
 8013878:	4602      	mov	r2, r0
 801387a:	460b      	mov	r3, r1
 801387c:	4613      	mov	r3, r2
 801387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013880:	e058      	b.n	8013934 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013882:	4b38      	ldr	r3, [pc, #224]	; (8013964 <HAL_RCC_GetSysClockFreq+0x200>)
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	099b      	lsrs	r3, r3, #6
 8013888:	2200      	movs	r2, #0
 801388a:	4618      	mov	r0, r3
 801388c:	4611      	mov	r1, r2
 801388e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8013892:	623b      	str	r3, [r7, #32]
 8013894:	2300      	movs	r3, #0
 8013896:	627b      	str	r3, [r7, #36]	; 0x24
 8013898:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801389c:	4642      	mov	r2, r8
 801389e:	464b      	mov	r3, r9
 80138a0:	f04f 0000 	mov.w	r0, #0
 80138a4:	f04f 0100 	mov.w	r1, #0
 80138a8:	0159      	lsls	r1, r3, #5
 80138aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80138ae:	0150      	lsls	r0, r2, #5
 80138b0:	4602      	mov	r2, r0
 80138b2:	460b      	mov	r3, r1
 80138b4:	4641      	mov	r1, r8
 80138b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80138ba:	4649      	mov	r1, r9
 80138bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80138c0:	f04f 0200 	mov.w	r2, #0
 80138c4:	f04f 0300 	mov.w	r3, #0
 80138c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80138cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80138d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80138d4:	ebb2 040a 	subs.w	r4, r2, sl
 80138d8:	eb63 050b 	sbc.w	r5, r3, fp
 80138dc:	f04f 0200 	mov.w	r2, #0
 80138e0:	f04f 0300 	mov.w	r3, #0
 80138e4:	00eb      	lsls	r3, r5, #3
 80138e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80138ea:	00e2      	lsls	r2, r4, #3
 80138ec:	4614      	mov	r4, r2
 80138ee:	461d      	mov	r5, r3
 80138f0:	4643      	mov	r3, r8
 80138f2:	18e3      	adds	r3, r4, r3
 80138f4:	603b      	str	r3, [r7, #0]
 80138f6:	464b      	mov	r3, r9
 80138f8:	eb45 0303 	adc.w	r3, r5, r3
 80138fc:	607b      	str	r3, [r7, #4]
 80138fe:	f04f 0200 	mov.w	r2, #0
 8013902:	f04f 0300 	mov.w	r3, #0
 8013906:	e9d7 4500 	ldrd	r4, r5, [r7]
 801390a:	4629      	mov	r1, r5
 801390c:	028b      	lsls	r3, r1, #10
 801390e:	4621      	mov	r1, r4
 8013910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013914:	4621      	mov	r1, r4
 8013916:	028a      	lsls	r2, r1, #10
 8013918:	4610      	mov	r0, r2
 801391a:	4619      	mov	r1, r3
 801391c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801391e:	2200      	movs	r2, #0
 8013920:	61bb      	str	r3, [r7, #24]
 8013922:	61fa      	str	r2, [r7, #28]
 8013924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013928:	f7ed f9ae 	bl	8000c88 <__aeabi_uldivmod>
 801392c:	4602      	mov	r2, r0
 801392e:	460b      	mov	r3, r1
 8013930:	4613      	mov	r3, r2
 8013932:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013934:	4b0b      	ldr	r3, [pc, #44]	; (8013964 <HAL_RCC_GetSysClockFreq+0x200>)
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	0c1b      	lsrs	r3, r3, #16
 801393a:	f003 0303 	and.w	r3, r3, #3
 801393e:	3301      	adds	r3, #1
 8013940:	005b      	lsls	r3, r3, #1
 8013942:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8013944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013948:	fbb2 f3f3 	udiv	r3, r2, r3
 801394c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801394e:	e002      	b.n	8013956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013950:	4b05      	ldr	r3, [pc, #20]	; (8013968 <HAL_RCC_GetSysClockFreq+0x204>)
 8013952:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8013954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013958:	4618      	mov	r0, r3
 801395a:	3750      	adds	r7, #80	; 0x50
 801395c:	46bd      	mov	sp, r7
 801395e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013962:	bf00      	nop
 8013964:	40023800 	.word	0x40023800
 8013968:	00f42400 	.word	0x00f42400

0801396c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801396c:	b480      	push	{r7}
 801396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013970:	4b03      	ldr	r3, [pc, #12]	; (8013980 <HAL_RCC_GetHCLKFreq+0x14>)
 8013972:	681b      	ldr	r3, [r3, #0]
}
 8013974:	4618      	mov	r0, r3
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop
 8013980:	20000030 	.word	0x20000030

08013984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013988:	f7ff fff0 	bl	801396c <HAL_RCC_GetHCLKFreq>
 801398c:	4602      	mov	r2, r0
 801398e:	4b05      	ldr	r3, [pc, #20]	; (80139a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	0a9b      	lsrs	r3, r3, #10
 8013994:	f003 0307 	and.w	r3, r3, #7
 8013998:	4903      	ldr	r1, [pc, #12]	; (80139a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801399a:	5ccb      	ldrb	r3, [r1, r3]
 801399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	40023800 	.word	0x40023800
 80139a8:	0801f2f8 	.word	0x0801f2f8

080139ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80139b0:	f7ff ffdc 	bl	801396c <HAL_RCC_GetHCLKFreq>
 80139b4:	4602      	mov	r2, r0
 80139b6:	4b05      	ldr	r3, [pc, #20]	; (80139cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80139b8:	689b      	ldr	r3, [r3, #8]
 80139ba:	0b5b      	lsrs	r3, r3, #13
 80139bc:	f003 0307 	and.w	r3, r3, #7
 80139c0:	4903      	ldr	r1, [pc, #12]	; (80139d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80139c2:	5ccb      	ldrb	r3, [r1, r3]
 80139c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	40023800 	.word	0x40023800
 80139d0:	0801f2f8 	.word	0x0801f2f8

080139d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	220f      	movs	r2, #15
 80139e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80139e4:	4b12      	ldr	r3, [pc, #72]	; (8013a30 <HAL_RCC_GetClockConfig+0x5c>)
 80139e6:	689b      	ldr	r3, [r3, #8]
 80139e8:	f003 0203 	and.w	r2, r3, #3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80139f0:	4b0f      	ldr	r3, [pc, #60]	; (8013a30 <HAL_RCC_GetClockConfig+0x5c>)
 80139f2:	689b      	ldr	r3, [r3, #8]
 80139f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80139fc:	4b0c      	ldr	r3, [pc, #48]	; (8013a30 <HAL_RCC_GetClockConfig+0x5c>)
 80139fe:	689b      	ldr	r3, [r3, #8]
 8013a00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013a08:	4b09      	ldr	r3, [pc, #36]	; (8013a30 <HAL_RCC_GetClockConfig+0x5c>)
 8013a0a:	689b      	ldr	r3, [r3, #8]
 8013a0c:	08db      	lsrs	r3, r3, #3
 8013a0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013a16:	4b07      	ldr	r3, [pc, #28]	; (8013a34 <HAL_RCC_GetClockConfig+0x60>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f003 0207 	and.w	r2, r3, #7
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	601a      	str	r2, [r3, #0]
}
 8013a22:	bf00      	nop
 8013a24:	370c      	adds	r7, #12
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	40023800 	.word	0x40023800
 8013a34:	40023c00 	.word	0x40023c00

08013a38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d101      	bne.n	8013a4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8013a46:	2301      	movs	r3, #1
 8013a48:	e01c      	b.n	8013a84 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	795b      	ldrb	r3, [r3, #5]
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d105      	bne.n	8013a60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2200      	movs	r2, #0
 8013a58:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7fb ff8a 	bl	800f974 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2202      	movs	r2, #2
 8013a64:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f042 0204 	orr.w	r2, r2, #4
 8013a74:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2201      	movs	r2, #1
 8013a7a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8013a82:	2300      	movs	r3, #0
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d101      	bne.n	8013a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	e041      	b.n	8013b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2200      	movs	r2, #0
 8013aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f7fc fcc0 	bl	8010438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2202      	movs	r2, #2
 8013abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	3304      	adds	r3, #4
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4610      	mov	r0, r2
 8013acc:	f000 fc70 	bl	80143b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2201      	movs	r2, #1
 8013adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2201      	movs	r2, #1
 8013aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2201      	movs	r2, #1
 8013af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2201      	movs	r2, #1
 8013afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2201      	movs	r2, #1
 8013b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2201      	movs	r2, #1
 8013b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3708      	adds	r7, #8
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
	...

08013b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b085      	sub	sp, #20
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	2b01      	cmp	r3, #1
 8013b3e:	d001      	beq.n	8013b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013b40:	2301      	movs	r3, #1
 8013b42:	e04e      	b.n	8013be2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2202      	movs	r2, #2
 8013b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	68da      	ldr	r2, [r3, #12]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f042 0201 	orr.w	r2, r2, #1
 8013b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	4a23      	ldr	r2, [pc, #140]	; (8013bf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8013b62:	4293      	cmp	r3, r2
 8013b64:	d022      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b6e:	d01d      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	4a1f      	ldr	r2, [pc, #124]	; (8013bf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d018      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4a1e      	ldr	r2, [pc, #120]	; (8013bf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d013      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	4a1c      	ldr	r2, [pc, #112]	; (8013bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d00e      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4a1b      	ldr	r2, [pc, #108]	; (8013c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d009      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4a19      	ldr	r2, [pc, #100]	; (8013c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d004      	beq.n	8013bac <HAL_TIM_Base_Start_IT+0x80>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	4a18      	ldr	r2, [pc, #96]	; (8013c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d111      	bne.n	8013bd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	f003 0307 	and.w	r3, r3, #7
 8013bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b06      	cmp	r3, #6
 8013bbc:	d010      	beq.n	8013be0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f042 0201 	orr.w	r2, r2, #1
 8013bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013bce:	e007      	b.n	8013be0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f042 0201 	orr.w	r2, r2, #1
 8013bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013be0:	2300      	movs	r3, #0
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3714      	adds	r7, #20
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop
 8013bf0:	40010000 	.word	0x40010000
 8013bf4:	40000400 	.word	0x40000400
 8013bf8:	40000800 	.word	0x40000800
 8013bfc:	40000c00 	.word	0x40000c00
 8013c00:	40010400 	.word	0x40010400
 8013c04:	40014000 	.word	0x40014000
 8013c08:	40001800 	.word	0x40001800

08013c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d101      	bne.n	8013c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e041      	b.n	8013ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d106      	bne.n	8013c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f7fc fcce 	bl	80105d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2202      	movs	r2, #2
 8013c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	3304      	adds	r3, #4
 8013c48:	4619      	mov	r1, r3
 8013c4a:	4610      	mov	r0, r2
 8013c4c:	f000 fbb0 	bl	80143b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2201      	movs	r2, #1
 8013c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2201      	movs	r2, #1
 8013c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2201      	movs	r2, #1
 8013c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2201      	movs	r2, #1
 8013c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3708      	adds	r7, #8
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
	...

08013cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d109      	bne.n	8013cd0 <HAL_TIM_PWM_Start+0x24>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	bf14      	ite	ne
 8013cc8:	2301      	movne	r3, #1
 8013cca:	2300      	moveq	r3, #0
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	e022      	b.n	8013d16 <HAL_TIM_PWM_Start+0x6a>
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	2b04      	cmp	r3, #4
 8013cd4:	d109      	bne.n	8013cea <HAL_TIM_PWM_Start+0x3e>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	bf14      	ite	ne
 8013ce2:	2301      	movne	r3, #1
 8013ce4:	2300      	moveq	r3, #0
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	e015      	b.n	8013d16 <HAL_TIM_PWM_Start+0x6a>
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	2b08      	cmp	r3, #8
 8013cee:	d109      	bne.n	8013d04 <HAL_TIM_PWM_Start+0x58>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	bf14      	ite	ne
 8013cfc:	2301      	movne	r3, #1
 8013cfe:	2300      	moveq	r3, #0
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	e008      	b.n	8013d16 <HAL_TIM_PWM_Start+0x6a>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	bf14      	ite	ne
 8013d10:	2301      	movne	r3, #1
 8013d12:	2300      	moveq	r3, #0
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d001      	beq.n	8013d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	e07c      	b.n	8013e18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d104      	bne.n	8013d2e <HAL_TIM_PWM_Start+0x82>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2202      	movs	r2, #2
 8013d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d2c:	e013      	b.n	8013d56 <HAL_TIM_PWM_Start+0xaa>
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	2b04      	cmp	r3, #4
 8013d32:	d104      	bne.n	8013d3e <HAL_TIM_PWM_Start+0x92>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2202      	movs	r2, #2
 8013d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013d3c:	e00b      	b.n	8013d56 <HAL_TIM_PWM_Start+0xaa>
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	2b08      	cmp	r3, #8
 8013d42:	d104      	bne.n	8013d4e <HAL_TIM_PWM_Start+0xa2>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2202      	movs	r2, #2
 8013d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013d4c:	e003      	b.n	8013d56 <HAL_TIM_PWM_Start+0xaa>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2202      	movs	r2, #2
 8013d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	6839      	ldr	r1, [r7, #0]
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f000 fe10 	bl	8014984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	4a2d      	ldr	r2, [pc, #180]	; (8013e20 <HAL_TIM_PWM_Start+0x174>)
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d004      	beq.n	8013d78 <HAL_TIM_PWM_Start+0xcc>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	4a2c      	ldr	r2, [pc, #176]	; (8013e24 <HAL_TIM_PWM_Start+0x178>)
 8013d74:	4293      	cmp	r3, r2
 8013d76:	d101      	bne.n	8013d7c <HAL_TIM_PWM_Start+0xd0>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <HAL_TIM_PWM_Start+0xd2>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d007      	beq.n	8013d92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4a22      	ldr	r2, [pc, #136]	; (8013e20 <HAL_TIM_PWM_Start+0x174>)
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	d022      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013da4:	d01d      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	4a1f      	ldr	r2, [pc, #124]	; (8013e28 <HAL_TIM_PWM_Start+0x17c>)
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d018      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	4a1d      	ldr	r2, [pc, #116]	; (8013e2c <HAL_TIM_PWM_Start+0x180>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d013      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4a1c      	ldr	r2, [pc, #112]	; (8013e30 <HAL_TIM_PWM_Start+0x184>)
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	d00e      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a16      	ldr	r2, [pc, #88]	; (8013e24 <HAL_TIM_PWM_Start+0x178>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d009      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4a18      	ldr	r2, [pc, #96]	; (8013e34 <HAL_TIM_PWM_Start+0x188>)
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	d004      	beq.n	8013de2 <HAL_TIM_PWM_Start+0x136>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4a16      	ldr	r2, [pc, #88]	; (8013e38 <HAL_TIM_PWM_Start+0x18c>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d111      	bne.n	8013e06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	689b      	ldr	r3, [r3, #8]
 8013de8:	f003 0307 	and.w	r3, r3, #7
 8013dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2b06      	cmp	r3, #6
 8013df2:	d010      	beq.n	8013e16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f042 0201 	orr.w	r2, r2, #1
 8013e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e04:	e007      	b.n	8013e16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	681a      	ldr	r2, [r3, #0]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f042 0201 	orr.w	r2, r2, #1
 8013e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	40010000 	.word	0x40010000
 8013e24:	40010400 	.word	0x40010400
 8013e28:	40000400 	.word	0x40000400
 8013e2c:	40000800 	.word	0x40000800
 8013e30:	40000c00 	.word	0x40000c00
 8013e34:	40014000 	.word	0x40014000
 8013e38:	40001800 	.word	0x40001800

08013e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b082      	sub	sp, #8
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	691b      	ldr	r3, [r3, #16]
 8013e4a:	f003 0302 	and.w	r3, r3, #2
 8013e4e:	2b02      	cmp	r3, #2
 8013e50:	d122      	bne.n	8013e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	f003 0302 	and.w	r3, r3, #2
 8013e5c:	2b02      	cmp	r3, #2
 8013e5e:	d11b      	bne.n	8013e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f06f 0202 	mvn.w	r2, #2
 8013e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	699b      	ldr	r3, [r3, #24]
 8013e76:	f003 0303 	and.w	r3, r3, #3
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d003      	beq.n	8013e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f000 fa77 	bl	8014372 <HAL_TIM_IC_CaptureCallback>
 8013e84:	e005      	b.n	8013e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f000 fa69 	bl	801435e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 fa7a 	bl	8014386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	691b      	ldr	r3, [r3, #16]
 8013e9e:	f003 0304 	and.w	r3, r3, #4
 8013ea2:	2b04      	cmp	r3, #4
 8013ea4:	d122      	bne.n	8013eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	f003 0304 	and.w	r3, r3, #4
 8013eb0:	2b04      	cmp	r3, #4
 8013eb2:	d11b      	bne.n	8013eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	f06f 0204 	mvn.w	r2, #4
 8013ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2202      	movs	r2, #2
 8013ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	699b      	ldr	r3, [r3, #24]
 8013eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d003      	beq.n	8013eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f000 fa4d 	bl	8014372 <HAL_TIM_IC_CaptureCallback>
 8013ed8:	e005      	b.n	8013ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fa3f 	bl	801435e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f000 fa50 	bl	8014386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	691b      	ldr	r3, [r3, #16]
 8013ef2:	f003 0308 	and.w	r3, r3, #8
 8013ef6:	2b08      	cmp	r3, #8
 8013ef8:	d122      	bne.n	8013f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	f003 0308 	and.w	r3, r3, #8
 8013f04:	2b08      	cmp	r3, #8
 8013f06:	d11b      	bne.n	8013f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f06f 0208 	mvn.w	r2, #8
 8013f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2204      	movs	r2, #4
 8013f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	69db      	ldr	r3, [r3, #28]
 8013f1e:	f003 0303 	and.w	r3, r3, #3
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d003      	beq.n	8013f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 fa23 	bl	8014372 <HAL_TIM_IC_CaptureCallback>
 8013f2c:	e005      	b.n	8013f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 fa15 	bl	801435e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f000 fa26 	bl	8014386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	691b      	ldr	r3, [r3, #16]
 8013f46:	f003 0310 	and.w	r3, r3, #16
 8013f4a:	2b10      	cmp	r3, #16
 8013f4c:	d122      	bne.n	8013f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	f003 0310 	and.w	r3, r3, #16
 8013f58:	2b10      	cmp	r3, #16
 8013f5a:	d11b      	bne.n	8013f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f06f 0210 	mvn.w	r2, #16
 8013f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2208      	movs	r2, #8
 8013f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	69db      	ldr	r3, [r3, #28]
 8013f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d003      	beq.n	8013f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f000 f9f9 	bl	8014372 <HAL_TIM_IC_CaptureCallback>
 8013f80:	e005      	b.n	8013f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 f9eb 	bl	801435e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 f9fc 	bl	8014386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2200      	movs	r2, #0
 8013f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	691b      	ldr	r3, [r3, #16]
 8013f9a:	f003 0301 	and.w	r3, r3, #1
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d10e      	bne.n	8013fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	f003 0301 	and.w	r3, r3, #1
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d107      	bne.n	8013fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f06f 0201 	mvn.w	r2, #1
 8013fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7fb fcae 	bl	800f91c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	691b      	ldr	r3, [r3, #16]
 8013fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fca:	2b80      	cmp	r3, #128	; 0x80
 8013fcc:	d10e      	bne.n	8013fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fd8:	2b80      	cmp	r3, #128	; 0x80
 8013fda:	d107      	bne.n	8013fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f000 fdca 	bl	8014b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ff6:	2b40      	cmp	r3, #64	; 0x40
 8013ff8:	d10e      	bne.n	8014018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014004:	2b40      	cmp	r3, #64	; 0x40
 8014006:	d107      	bne.n	8014018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f000 f9c1 	bl	801439a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	691b      	ldr	r3, [r3, #16]
 801401e:	f003 0320 	and.w	r3, r3, #32
 8014022:	2b20      	cmp	r3, #32
 8014024:	d10e      	bne.n	8014044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	f003 0320 	and.w	r3, r3, #32
 8014030:	2b20      	cmp	r3, #32
 8014032:	d107      	bne.n	8014044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	f06f 0220 	mvn.w	r2, #32
 801403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f000 fd94 	bl	8014b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014044:	bf00      	nop
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b086      	sub	sp, #24
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014058:	2300      	movs	r3, #0
 801405a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014062:	2b01      	cmp	r3, #1
 8014064:	d101      	bne.n	801406a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014066:	2302      	movs	r3, #2
 8014068:	e0ae      	b.n	80141c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2201      	movs	r2, #1
 801406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2b0c      	cmp	r3, #12
 8014076:	f200 809f 	bhi.w	80141b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801407a:	a201      	add	r2, pc, #4	; (adr r2, 8014080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014080:	080140b5 	.word	0x080140b5
 8014084:	080141b9 	.word	0x080141b9
 8014088:	080141b9 	.word	0x080141b9
 801408c:	080141b9 	.word	0x080141b9
 8014090:	080140f5 	.word	0x080140f5
 8014094:	080141b9 	.word	0x080141b9
 8014098:	080141b9 	.word	0x080141b9
 801409c:	080141b9 	.word	0x080141b9
 80140a0:	08014137 	.word	0x08014137
 80140a4:	080141b9 	.word	0x080141b9
 80140a8:	080141b9 	.word	0x080141b9
 80140ac:	080141b9 	.word	0x080141b9
 80140b0:	08014177 	.word	0x08014177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	68b9      	ldr	r1, [r7, #8]
 80140ba:	4618      	mov	r0, r3
 80140bc:	f000 fa18 	bl	80144f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	699a      	ldr	r2, [r3, #24]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	f042 0208 	orr.w	r2, r2, #8
 80140ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	699a      	ldr	r2, [r3, #24]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f022 0204 	bic.w	r2, r2, #4
 80140de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	6999      	ldr	r1, [r3, #24]
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	691a      	ldr	r2, [r3, #16]
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	430a      	orrs	r2, r1
 80140f0:	619a      	str	r2, [r3, #24]
      break;
 80140f2:	e064      	b.n	80141be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	68b9      	ldr	r1, [r7, #8]
 80140fa:	4618      	mov	r0, r3
 80140fc:	f000 fa68 	bl	80145d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	699a      	ldr	r2, [r3, #24]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	699a      	ldr	r2, [r3, #24]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	6999      	ldr	r1, [r3, #24]
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	691b      	ldr	r3, [r3, #16]
 801412a:	021a      	lsls	r2, r3, #8
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	430a      	orrs	r2, r1
 8014132:	619a      	str	r2, [r3, #24]
      break;
 8014134:	e043      	b.n	80141be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	4618      	mov	r0, r3
 801413e:	f000 fabd 	bl	80146bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	69da      	ldr	r2, [r3, #28]
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	f042 0208 	orr.w	r2, r2, #8
 8014150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	69da      	ldr	r2, [r3, #28]
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f022 0204 	bic.w	r2, r2, #4
 8014160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	69d9      	ldr	r1, [r3, #28]
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	691a      	ldr	r2, [r3, #16]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	430a      	orrs	r2, r1
 8014172:	61da      	str	r2, [r3, #28]
      break;
 8014174:	e023      	b.n	80141be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	68b9      	ldr	r1, [r7, #8]
 801417c:	4618      	mov	r0, r3
 801417e:	f000 fb11 	bl	80147a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	69da      	ldr	r2, [r3, #28]
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	69da      	ldr	r2, [r3, #28]
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80141a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	69d9      	ldr	r1, [r3, #28]
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	691b      	ldr	r3, [r3, #16]
 80141ac:	021a      	lsls	r2, r3, #8
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	430a      	orrs	r2, r1
 80141b4:	61da      	str	r2, [r3, #28]
      break;
 80141b6:	e002      	b.n	80141be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80141b8:	2301      	movs	r3, #1
 80141ba:	75fb      	strb	r3, [r7, #23]
      break;
 80141bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80141da:	2300      	movs	r3, #0
 80141dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d101      	bne.n	80141ec <HAL_TIM_ConfigClockSource+0x1c>
 80141e8:	2302      	movs	r3, #2
 80141ea:	e0b4      	b.n	8014356 <HAL_TIM_ConfigClockSource+0x186>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2201      	movs	r2, #1
 80141f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2202      	movs	r2, #2
 80141f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	689b      	ldr	r3, [r3, #8]
 8014202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	68ba      	ldr	r2, [r7, #8]
 801421a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014224:	d03e      	beq.n	80142a4 <HAL_TIM_ConfigClockSource+0xd4>
 8014226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801422a:	f200 8087 	bhi.w	801433c <HAL_TIM_ConfigClockSource+0x16c>
 801422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014232:	f000 8086 	beq.w	8014342 <HAL_TIM_ConfigClockSource+0x172>
 8014236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801423a:	d87f      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 801423c:	2b70      	cmp	r3, #112	; 0x70
 801423e:	d01a      	beq.n	8014276 <HAL_TIM_ConfigClockSource+0xa6>
 8014240:	2b70      	cmp	r3, #112	; 0x70
 8014242:	d87b      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 8014244:	2b60      	cmp	r3, #96	; 0x60
 8014246:	d050      	beq.n	80142ea <HAL_TIM_ConfigClockSource+0x11a>
 8014248:	2b60      	cmp	r3, #96	; 0x60
 801424a:	d877      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 801424c:	2b50      	cmp	r3, #80	; 0x50
 801424e:	d03c      	beq.n	80142ca <HAL_TIM_ConfigClockSource+0xfa>
 8014250:	2b50      	cmp	r3, #80	; 0x50
 8014252:	d873      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 8014254:	2b40      	cmp	r3, #64	; 0x40
 8014256:	d058      	beq.n	801430a <HAL_TIM_ConfigClockSource+0x13a>
 8014258:	2b40      	cmp	r3, #64	; 0x40
 801425a:	d86f      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 801425c:	2b30      	cmp	r3, #48	; 0x30
 801425e:	d064      	beq.n	801432a <HAL_TIM_ConfigClockSource+0x15a>
 8014260:	2b30      	cmp	r3, #48	; 0x30
 8014262:	d86b      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 8014264:	2b20      	cmp	r3, #32
 8014266:	d060      	beq.n	801432a <HAL_TIM_ConfigClockSource+0x15a>
 8014268:	2b20      	cmp	r3, #32
 801426a:	d867      	bhi.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
 801426c:	2b00      	cmp	r3, #0
 801426e:	d05c      	beq.n	801432a <HAL_TIM_ConfigClockSource+0x15a>
 8014270:	2b10      	cmp	r3, #16
 8014272:	d05a      	beq.n	801432a <HAL_TIM_ConfigClockSource+0x15a>
 8014274:	e062      	b.n	801433c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6818      	ldr	r0, [r3, #0]
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	6899      	ldr	r1, [r3, #8]
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	685a      	ldr	r2, [r3, #4]
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	68db      	ldr	r3, [r3, #12]
 8014286:	f000 fb5d 	bl	8014944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	689b      	ldr	r3, [r3, #8]
 8014290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	68ba      	ldr	r2, [r7, #8]
 80142a0:	609a      	str	r2, [r3, #8]
      break;
 80142a2:	e04f      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6818      	ldr	r0, [r3, #0]
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	6899      	ldr	r1, [r3, #8]
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	685a      	ldr	r2, [r3, #4]
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	f000 fb46 	bl	8014944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	689a      	ldr	r2, [r3, #8]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80142c6:	609a      	str	r2, [r3, #8]
      break;
 80142c8:	e03c      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6818      	ldr	r0, [r3, #0]
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	6859      	ldr	r1, [r3, #4]
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	461a      	mov	r2, r3
 80142d8:	f000 faba 	bl	8014850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2150      	movs	r1, #80	; 0x50
 80142e2:	4618      	mov	r0, r3
 80142e4:	f000 fb13 	bl	801490e <TIM_ITRx_SetConfig>
      break;
 80142e8:	e02c      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6818      	ldr	r0, [r3, #0]
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	6859      	ldr	r1, [r3, #4]
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	461a      	mov	r2, r3
 80142f8:	f000 fad9 	bl	80148ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2160      	movs	r1, #96	; 0x60
 8014302:	4618      	mov	r0, r3
 8014304:	f000 fb03 	bl	801490e <TIM_ITRx_SetConfig>
      break;
 8014308:	e01c      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6818      	ldr	r0, [r3, #0]
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	6859      	ldr	r1, [r3, #4]
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	461a      	mov	r2, r3
 8014318:	f000 fa9a 	bl	8014850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2140      	movs	r1, #64	; 0x40
 8014322:	4618      	mov	r0, r3
 8014324:	f000 faf3 	bl	801490e <TIM_ITRx_SetConfig>
      break;
 8014328:	e00c      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	4619      	mov	r1, r3
 8014334:	4610      	mov	r0, r2
 8014336:	f000 faea 	bl	801490e <TIM_ITRx_SetConfig>
      break;
 801433a:	e003      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801433c:	2301      	movs	r3, #1
 801433e:	73fb      	strb	r3, [r7, #15]
      break;
 8014340:	e000      	b.n	8014344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2201      	movs	r2, #1
 8014348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2200      	movs	r2, #0
 8014350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014354:	7bfb      	ldrb	r3, [r7, #15]
}
 8014356:	4618      	mov	r0, r3
 8014358:	3710      	adds	r7, #16
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}

0801435e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801435e:	b480      	push	{r7}
 8014360:	b083      	sub	sp, #12
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014366:	bf00      	nop
 8014368:	370c      	adds	r7, #12
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014372:	b480      	push	{r7}
 8014374:	b083      	sub	sp, #12
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801437a:	bf00      	nop
 801437c:	370c      	adds	r7, #12
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr

08014386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014386:	b480      	push	{r7}
 8014388:	b083      	sub	sp, #12
 801438a:	af00      	add	r7, sp, #0
 801438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801438e:	bf00      	nop
 8014390:	370c      	adds	r7, #12
 8014392:	46bd      	mov	sp, r7
 8014394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014398:	4770      	bx	lr

0801439a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801439a:	b480      	push	{r7}
 801439c:	b083      	sub	sp, #12
 801439e:	af00      	add	r7, sp, #0
 80143a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80143a2:	bf00      	nop
 80143a4:	370c      	adds	r7, #12
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr
	...

080143b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80143b0:	b480      	push	{r7}
 80143b2:	b085      	sub	sp, #20
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	4a40      	ldr	r2, [pc, #256]	; (80144c4 <TIM_Base_SetConfig+0x114>)
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d013      	beq.n	80143f0 <TIM_Base_SetConfig+0x40>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143ce:	d00f      	beq.n	80143f0 <TIM_Base_SetConfig+0x40>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	4a3d      	ldr	r2, [pc, #244]	; (80144c8 <TIM_Base_SetConfig+0x118>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d00b      	beq.n	80143f0 <TIM_Base_SetConfig+0x40>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4a3c      	ldr	r2, [pc, #240]	; (80144cc <TIM_Base_SetConfig+0x11c>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d007      	beq.n	80143f0 <TIM_Base_SetConfig+0x40>
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4a3b      	ldr	r2, [pc, #236]	; (80144d0 <TIM_Base_SetConfig+0x120>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d003      	beq.n	80143f0 <TIM_Base_SetConfig+0x40>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4a3a      	ldr	r2, [pc, #232]	; (80144d4 <TIM_Base_SetConfig+0x124>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d108      	bne.n	8014402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80143f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	4313      	orrs	r3, r2
 8014400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	4a2f      	ldr	r2, [pc, #188]	; (80144c4 <TIM_Base_SetConfig+0x114>)
 8014406:	4293      	cmp	r3, r2
 8014408:	d02b      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014410:	d027      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	4a2c      	ldr	r2, [pc, #176]	; (80144c8 <TIM_Base_SetConfig+0x118>)
 8014416:	4293      	cmp	r3, r2
 8014418:	d023      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	4a2b      	ldr	r2, [pc, #172]	; (80144cc <TIM_Base_SetConfig+0x11c>)
 801441e:	4293      	cmp	r3, r2
 8014420:	d01f      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	4a2a      	ldr	r2, [pc, #168]	; (80144d0 <TIM_Base_SetConfig+0x120>)
 8014426:	4293      	cmp	r3, r2
 8014428:	d01b      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	4a29      	ldr	r2, [pc, #164]	; (80144d4 <TIM_Base_SetConfig+0x124>)
 801442e:	4293      	cmp	r3, r2
 8014430:	d017      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	4a28      	ldr	r2, [pc, #160]	; (80144d8 <TIM_Base_SetConfig+0x128>)
 8014436:	4293      	cmp	r3, r2
 8014438:	d013      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4a27      	ldr	r2, [pc, #156]	; (80144dc <TIM_Base_SetConfig+0x12c>)
 801443e:	4293      	cmp	r3, r2
 8014440:	d00f      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4a26      	ldr	r2, [pc, #152]	; (80144e0 <TIM_Base_SetConfig+0x130>)
 8014446:	4293      	cmp	r3, r2
 8014448:	d00b      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	4a25      	ldr	r2, [pc, #148]	; (80144e4 <TIM_Base_SetConfig+0x134>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d007      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	4a24      	ldr	r2, [pc, #144]	; (80144e8 <TIM_Base_SetConfig+0x138>)
 8014456:	4293      	cmp	r3, r2
 8014458:	d003      	beq.n	8014462 <TIM_Base_SetConfig+0xb2>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	4a23      	ldr	r2, [pc, #140]	; (80144ec <TIM_Base_SetConfig+0x13c>)
 801445e:	4293      	cmp	r3, r2
 8014460:	d108      	bne.n	8014474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	4313      	orrs	r3, r2
 8014472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	695b      	ldr	r3, [r3, #20]
 801447e:	4313      	orrs	r3, r2
 8014480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	689a      	ldr	r2, [r3, #8]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	4a0a      	ldr	r2, [pc, #40]	; (80144c4 <TIM_Base_SetConfig+0x114>)
 801449c:	4293      	cmp	r3, r2
 801449e:	d003      	beq.n	80144a8 <TIM_Base_SetConfig+0xf8>
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	4a0c      	ldr	r2, [pc, #48]	; (80144d4 <TIM_Base_SetConfig+0x124>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d103      	bne.n	80144b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	691a      	ldr	r2, [r3, #16]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2201      	movs	r2, #1
 80144b4:	615a      	str	r2, [r3, #20]
}
 80144b6:	bf00      	nop
 80144b8:	3714      	adds	r7, #20
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	40010000 	.word	0x40010000
 80144c8:	40000400 	.word	0x40000400
 80144cc:	40000800 	.word	0x40000800
 80144d0:	40000c00 	.word	0x40000c00
 80144d4:	40010400 	.word	0x40010400
 80144d8:	40014000 	.word	0x40014000
 80144dc:	40014400 	.word	0x40014400
 80144e0:	40014800 	.word	0x40014800
 80144e4:	40001800 	.word	0x40001800
 80144e8:	40001c00 	.word	0x40001c00
 80144ec:	40002000 	.word	0x40002000

080144f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80144f0:	b480      	push	{r7}
 80144f2:	b087      	sub	sp, #28
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	6a1b      	ldr	r3, [r3, #32]
 80144fe:	f023 0201 	bic.w	r2, r3, #1
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6a1b      	ldr	r3, [r3, #32]
 801450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	699b      	ldr	r3, [r3, #24]
 8014516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	f023 0303 	bic.w	r3, r3, #3
 8014526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	68fa      	ldr	r2, [r7, #12]
 801452e:	4313      	orrs	r3, r2
 8014530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	f023 0302 	bic.w	r3, r3, #2
 8014538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	689b      	ldr	r3, [r3, #8]
 801453e:	697a      	ldr	r2, [r7, #20]
 8014540:	4313      	orrs	r3, r2
 8014542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	4a20      	ldr	r2, [pc, #128]	; (80145c8 <TIM_OC1_SetConfig+0xd8>)
 8014548:	4293      	cmp	r3, r2
 801454a:	d003      	beq.n	8014554 <TIM_OC1_SetConfig+0x64>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4a1f      	ldr	r2, [pc, #124]	; (80145cc <TIM_OC1_SetConfig+0xdc>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d10c      	bne.n	801456e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	f023 0308 	bic.w	r3, r3, #8
 801455a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	697a      	ldr	r2, [r7, #20]
 8014562:	4313      	orrs	r3, r2
 8014564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	f023 0304 	bic.w	r3, r3, #4
 801456c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	4a15      	ldr	r2, [pc, #84]	; (80145c8 <TIM_OC1_SetConfig+0xd8>)
 8014572:	4293      	cmp	r3, r2
 8014574:	d003      	beq.n	801457e <TIM_OC1_SetConfig+0x8e>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	4a14      	ldr	r2, [pc, #80]	; (80145cc <TIM_OC1_SetConfig+0xdc>)
 801457a:	4293      	cmp	r3, r2
 801457c:	d111      	bne.n	80145a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801458c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	695b      	ldr	r3, [r3, #20]
 8014592:	693a      	ldr	r2, [r7, #16]
 8014594:	4313      	orrs	r3, r2
 8014596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	699b      	ldr	r3, [r3, #24]
 801459c:	693a      	ldr	r2, [r7, #16]
 801459e:	4313      	orrs	r3, r2
 80145a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	693a      	ldr	r2, [r7, #16]
 80145a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	68fa      	ldr	r2, [r7, #12]
 80145ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	685a      	ldr	r2, [r3, #4]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	697a      	ldr	r2, [r7, #20]
 80145ba:	621a      	str	r2, [r3, #32]
}
 80145bc:	bf00      	nop
 80145be:	371c      	adds	r7, #28
 80145c0:	46bd      	mov	sp, r7
 80145c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c6:	4770      	bx	lr
 80145c8:	40010000 	.word	0x40010000
 80145cc:	40010400 	.word	0x40010400

080145d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b087      	sub	sp, #28
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6a1b      	ldr	r3, [r3, #32]
 80145de:	f023 0210 	bic.w	r2, r3, #16
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6a1b      	ldr	r3, [r3, #32]
 80145ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	699b      	ldr	r3, [r3, #24]
 80145f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80145fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	021b      	lsls	r3, r3, #8
 801460e:	68fa      	ldr	r2, [r7, #12]
 8014610:	4313      	orrs	r3, r2
 8014612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	f023 0320 	bic.w	r3, r3, #32
 801461a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	011b      	lsls	r3, r3, #4
 8014622:	697a      	ldr	r2, [r7, #20]
 8014624:	4313      	orrs	r3, r2
 8014626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	4a22      	ldr	r2, [pc, #136]	; (80146b4 <TIM_OC2_SetConfig+0xe4>)
 801462c:	4293      	cmp	r3, r2
 801462e:	d003      	beq.n	8014638 <TIM_OC2_SetConfig+0x68>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	4a21      	ldr	r2, [pc, #132]	; (80146b8 <TIM_OC2_SetConfig+0xe8>)
 8014634:	4293      	cmp	r3, r2
 8014636:	d10d      	bne.n	8014654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	011b      	lsls	r3, r3, #4
 8014646:	697a      	ldr	r2, [r7, #20]
 8014648:	4313      	orrs	r3, r2
 801464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	4a17      	ldr	r2, [pc, #92]	; (80146b4 <TIM_OC2_SetConfig+0xe4>)
 8014658:	4293      	cmp	r3, r2
 801465a:	d003      	beq.n	8014664 <TIM_OC2_SetConfig+0x94>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	4a16      	ldr	r2, [pc, #88]	; (80146b8 <TIM_OC2_SetConfig+0xe8>)
 8014660:	4293      	cmp	r3, r2
 8014662:	d113      	bne.n	801468c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801466a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	695b      	ldr	r3, [r3, #20]
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	693a      	ldr	r2, [r7, #16]
 801467c:	4313      	orrs	r3, r2
 801467e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	699b      	ldr	r3, [r3, #24]
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	693a      	ldr	r2, [r7, #16]
 8014688:	4313      	orrs	r3, r2
 801468a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	693a      	ldr	r2, [r7, #16]
 8014690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	685a      	ldr	r2, [r3, #4]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	697a      	ldr	r2, [r7, #20]
 80146a4:	621a      	str	r2, [r3, #32]
}
 80146a6:	bf00      	nop
 80146a8:	371c      	adds	r7, #28
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	40010000 	.word	0x40010000
 80146b8:	40010400 	.word	0x40010400

080146bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80146bc:	b480      	push	{r7}
 80146be:	b087      	sub	sp, #28
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a1b      	ldr	r3, [r3, #32]
 80146ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a1b      	ldr	r3, [r3, #32]
 80146d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	685b      	ldr	r3, [r3, #4]
 80146dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	69db      	ldr	r3, [r3, #28]
 80146e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80146ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	f023 0303 	bic.w	r3, r3, #3
 80146f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	4313      	orrs	r3, r2
 80146fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	689b      	ldr	r3, [r3, #8]
 801470a:	021b      	lsls	r3, r3, #8
 801470c:	697a      	ldr	r2, [r7, #20]
 801470e:	4313      	orrs	r3, r2
 8014710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	4a21      	ldr	r2, [pc, #132]	; (801479c <TIM_OC3_SetConfig+0xe0>)
 8014716:	4293      	cmp	r3, r2
 8014718:	d003      	beq.n	8014722 <TIM_OC3_SetConfig+0x66>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4a20      	ldr	r2, [pc, #128]	; (80147a0 <TIM_OC3_SetConfig+0xe4>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d10d      	bne.n	801473e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014722:	697b      	ldr	r3, [r7, #20]
 8014724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	68db      	ldr	r3, [r3, #12]
 801472e:	021b      	lsls	r3, r3, #8
 8014730:	697a      	ldr	r2, [r7, #20]
 8014732:	4313      	orrs	r3, r2
 8014734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801473c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	4a16      	ldr	r2, [pc, #88]	; (801479c <TIM_OC3_SetConfig+0xe0>)
 8014742:	4293      	cmp	r3, r2
 8014744:	d003      	beq.n	801474e <TIM_OC3_SetConfig+0x92>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	4a15      	ldr	r2, [pc, #84]	; (80147a0 <TIM_OC3_SetConfig+0xe4>)
 801474a:	4293      	cmp	r3, r2
 801474c:	d113      	bne.n	8014776 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801475c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	695b      	ldr	r3, [r3, #20]
 8014762:	011b      	lsls	r3, r3, #4
 8014764:	693a      	ldr	r2, [r7, #16]
 8014766:	4313      	orrs	r3, r2
 8014768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	699b      	ldr	r3, [r3, #24]
 801476e:	011b      	lsls	r3, r3, #4
 8014770:	693a      	ldr	r2, [r7, #16]
 8014772:	4313      	orrs	r3, r2
 8014774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	693a      	ldr	r2, [r7, #16]
 801477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	685a      	ldr	r2, [r3, #4]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	697a      	ldr	r2, [r7, #20]
 801478e:	621a      	str	r2, [r3, #32]
}
 8014790:	bf00      	nop
 8014792:	371c      	adds	r7, #28
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr
 801479c:	40010000 	.word	0x40010000
 80147a0:	40010400 	.word	0x40010400

080147a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80147a4:	b480      	push	{r7}
 80147a6:	b087      	sub	sp, #28
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6a1b      	ldr	r3, [r3, #32]
 80147b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6a1b      	ldr	r3, [r3, #32]
 80147be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	69db      	ldr	r3, [r3, #28]
 80147ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80147d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80147da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	021b      	lsls	r3, r3, #8
 80147e2:	68fa      	ldr	r2, [r7, #12]
 80147e4:	4313      	orrs	r3, r2
 80147e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80147ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	689b      	ldr	r3, [r3, #8]
 80147f4:	031b      	lsls	r3, r3, #12
 80147f6:	693a      	ldr	r2, [r7, #16]
 80147f8:	4313      	orrs	r3, r2
 80147fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	4a12      	ldr	r2, [pc, #72]	; (8014848 <TIM_OC4_SetConfig+0xa4>)
 8014800:	4293      	cmp	r3, r2
 8014802:	d003      	beq.n	801480c <TIM_OC4_SetConfig+0x68>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	4a11      	ldr	r2, [pc, #68]	; (801484c <TIM_OC4_SetConfig+0xa8>)
 8014808:	4293      	cmp	r3, r2
 801480a:	d109      	bne.n	8014820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	695b      	ldr	r3, [r3, #20]
 8014818:	019b      	lsls	r3, r3, #6
 801481a:	697a      	ldr	r2, [r7, #20]
 801481c:	4313      	orrs	r3, r2
 801481e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	697a      	ldr	r2, [r7, #20]
 8014824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	68fa      	ldr	r2, [r7, #12]
 801482a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	685a      	ldr	r2, [r3, #4]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	693a      	ldr	r2, [r7, #16]
 8014838:	621a      	str	r2, [r3, #32]
}
 801483a:	bf00      	nop
 801483c:	371c      	adds	r7, #28
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	40010000 	.word	0x40010000
 801484c:	40010400 	.word	0x40010400

08014850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014850:	b480      	push	{r7}
 8014852:	b087      	sub	sp, #28
 8014854:	af00      	add	r7, sp, #0
 8014856:	60f8      	str	r0, [r7, #12]
 8014858:	60b9      	str	r1, [r7, #8]
 801485a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	6a1b      	ldr	r3, [r3, #32]
 8014860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	6a1b      	ldr	r3, [r3, #32]
 8014866:	f023 0201 	bic.w	r2, r3, #1
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	699b      	ldr	r3, [r3, #24]
 8014872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801487a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	011b      	lsls	r3, r3, #4
 8014880:	693a      	ldr	r2, [r7, #16]
 8014882:	4313      	orrs	r3, r2
 8014884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	f023 030a 	bic.w	r3, r3, #10
 801488c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801488e:	697a      	ldr	r2, [r7, #20]
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	4313      	orrs	r3, r2
 8014894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	693a      	ldr	r2, [r7, #16]
 801489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	697a      	ldr	r2, [r7, #20]
 80148a0:	621a      	str	r2, [r3, #32]
}
 80148a2:	bf00      	nop
 80148a4:	371c      	adds	r7, #28
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr

080148ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80148ae:	b480      	push	{r7}
 80148b0:	b087      	sub	sp, #28
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	60f8      	str	r0, [r7, #12]
 80148b6:	60b9      	str	r1, [r7, #8]
 80148b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6a1b      	ldr	r3, [r3, #32]
 80148be:	f023 0210 	bic.w	r2, r3, #16
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	699b      	ldr	r3, [r3, #24]
 80148ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	6a1b      	ldr	r3, [r3, #32]
 80148d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80148d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	031b      	lsls	r3, r3, #12
 80148de:	697a      	ldr	r2, [r7, #20]
 80148e0:	4313      	orrs	r3, r2
 80148e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80148ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	011b      	lsls	r3, r3, #4
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	4313      	orrs	r3, r2
 80148f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	697a      	ldr	r2, [r7, #20]
 80148fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	693a      	ldr	r2, [r7, #16]
 8014900:	621a      	str	r2, [r3, #32]
}
 8014902:	bf00      	nop
 8014904:	371c      	adds	r7, #28
 8014906:	46bd      	mov	sp, r7
 8014908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490c:	4770      	bx	lr

0801490e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801490e:	b480      	push	{r7}
 8014910:	b085      	sub	sp, #20
 8014912:	af00      	add	r7, sp, #0
 8014914:	6078      	str	r0, [r7, #4]
 8014916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014926:	683a      	ldr	r2, [r7, #0]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	4313      	orrs	r3, r2
 801492c:	f043 0307 	orr.w	r3, r3, #7
 8014930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68fa      	ldr	r2, [r7, #12]
 8014936:	609a      	str	r2, [r3, #8]
}
 8014938:	bf00      	nop
 801493a:	3714      	adds	r7, #20
 801493c:	46bd      	mov	sp, r7
 801493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014942:	4770      	bx	lr

08014944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014944:	b480      	push	{r7}
 8014946:	b087      	sub	sp, #28
 8014948:	af00      	add	r7, sp, #0
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	60b9      	str	r1, [r7, #8]
 801494e:	607a      	str	r2, [r7, #4]
 8014950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	689b      	ldr	r3, [r3, #8]
 8014956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801495e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	021a      	lsls	r2, r3, #8
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	431a      	orrs	r2, r3
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	4313      	orrs	r3, r2
 801496c:	697a      	ldr	r2, [r7, #20]
 801496e:	4313      	orrs	r3, r2
 8014970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	697a      	ldr	r2, [r7, #20]
 8014976:	609a      	str	r2, [r3, #8]
}
 8014978:	bf00      	nop
 801497a:	371c      	adds	r7, #28
 801497c:	46bd      	mov	sp, r7
 801497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014982:	4770      	bx	lr

08014984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014984:	b480      	push	{r7}
 8014986:	b087      	sub	sp, #28
 8014988:	af00      	add	r7, sp, #0
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	f003 031f 	and.w	r3, r3, #31
 8014996:	2201      	movs	r2, #1
 8014998:	fa02 f303 	lsl.w	r3, r2, r3
 801499c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	6a1a      	ldr	r2, [r3, #32]
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	43db      	mvns	r3, r3
 80149a6:	401a      	ands	r2, r3
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	6a1a      	ldr	r2, [r3, #32]
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	f003 031f 	and.w	r3, r3, #31
 80149b6:	6879      	ldr	r1, [r7, #4]
 80149b8:	fa01 f303 	lsl.w	r3, r1, r3
 80149bc:	431a      	orrs	r2, r3
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	621a      	str	r2, [r3, #32]
}
 80149c2:	bf00      	nop
 80149c4:	371c      	adds	r7, #28
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr
	...

080149d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b085      	sub	sp, #20
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d101      	bne.n	80149e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80149e4:	2302      	movs	r3, #2
 80149e6:	e05a      	b.n	8014a9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2201      	movs	r2, #1
 80149ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2202      	movs	r2, #2
 80149f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	689b      	ldr	r3, [r3, #8]
 8014a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	68fa      	ldr	r2, [r7, #12]
 8014a16:	4313      	orrs	r3, r2
 8014a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	4a21      	ldr	r2, [pc, #132]	; (8014aac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d022      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a34:	d01d      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4a1d      	ldr	r2, [pc, #116]	; (8014ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d018      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	4a1b      	ldr	r2, [pc, #108]	; (8014ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014a46:	4293      	cmp	r3, r2
 8014a48:	d013      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4a1a      	ldr	r2, [pc, #104]	; (8014ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d00e      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4a18      	ldr	r2, [pc, #96]	; (8014abc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	d009      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	4a17      	ldr	r2, [pc, #92]	; (8014ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014a64:	4293      	cmp	r3, r2
 8014a66:	d004      	beq.n	8014a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4a15      	ldr	r2, [pc, #84]	; (8014ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d10c      	bne.n	8014a8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	68ba      	ldr	r2, [r7, #8]
 8014a80:	4313      	orrs	r3, r2
 8014a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2201      	movs	r2, #1
 8014a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014a9c:	2300      	movs	r3, #0
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3714      	adds	r7, #20
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop
 8014aac:	40010000 	.word	0x40010000
 8014ab0:	40000400 	.word	0x40000400
 8014ab4:	40000800 	.word	0x40000800
 8014ab8:	40000c00 	.word	0x40000c00
 8014abc:	40010400 	.word	0x40010400
 8014ac0:	40014000 	.word	0x40014000
 8014ac4:	40001800 	.word	0x40001800

08014ac8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b085      	sub	sp, #20
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014adc:	2b01      	cmp	r3, #1
 8014ade:	d101      	bne.n	8014ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	e03d      	b.n	8014b60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	4313      	orrs	r3, r2
 8014af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	689b      	ldr	r3, [r3, #8]
 8014b04:	4313      	orrs	r3, r2
 8014b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	4313      	orrs	r3, r2
 8014b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4313      	orrs	r3, r2
 8014b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	691b      	ldr	r3, [r3, #16]
 8014b2e:	4313      	orrs	r3, r2
 8014b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	695b      	ldr	r3, [r3, #20]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	69db      	ldr	r3, [r3, #28]
 8014b4a:	4313      	orrs	r3, r2
 8014b4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68fa      	ldr	r2, [r7, #12]
 8014b54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014b74:	bf00      	nop
 8014b76:	370c      	adds	r7, #12
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7e:	4770      	bx	lr

08014b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014b80:	b480      	push	{r7}
 8014b82:	b083      	sub	sp, #12
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014b88:	bf00      	nop
 8014b8a:	370c      	adds	r7, #12
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr

08014b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d101      	bne.n	8014ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e03f      	b.n	8014c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d106      	bne.n	8014bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f7fb fede 	bl	801097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2224      	movs	r2, #36	; 0x24
 8014bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	68da      	ldr	r2, [r3, #12]
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 fc7b 	bl	80154d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	691a      	ldr	r2, [r3, #16]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	695a      	ldr	r2, [r3, #20]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	68da      	ldr	r2, [r3, #12]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2200      	movs	r2, #0
 8014c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2220      	movs	r2, #32
 8014c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2220      	movs	r2, #32
 8014c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014c24:	2300      	movs	r3, #0
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b0ba      	sub	sp, #232	; 0xe8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	68db      	ldr	r3, [r3, #12]
 8014c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	695b      	ldr	r3, [r3, #20]
 8014c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8014c56:	2300      	movs	r3, #0
 8014c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8014c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c66:	f003 030f 	and.w	r3, r3, #15
 8014c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8014c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d10f      	bne.n	8014c96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c7a:	f003 0320 	and.w	r3, r3, #32
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d009      	beq.n	8014c96 <HAL_UART_IRQHandler+0x66>
 8014c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c86:	f003 0320 	and.w	r3, r3, #32
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d003      	beq.n	8014c96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f000 fb65 	bl	801535e <UART_Receive_IT>
      return;
 8014c94:	e256      	b.n	8015144 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8014c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f000 80de 	beq.w	8014e5c <HAL_UART_IRQHandler+0x22c>
 8014ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ca4:	f003 0301 	and.w	r3, r3, #1
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d106      	bne.n	8014cba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8014cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014cb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	f000 80d1 	beq.w	8014e5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8014cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cbe:	f003 0301 	and.w	r3, r3, #1
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d00b      	beq.n	8014cde <HAL_UART_IRQHandler+0xae>
 8014cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d005      	beq.n	8014cde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cd6:	f043 0201 	orr.w	r2, r3, #1
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ce2:	f003 0304 	and.w	r3, r3, #4
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d00b      	beq.n	8014d02 <HAL_UART_IRQHandler+0xd2>
 8014cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014cee:	f003 0301 	and.w	r3, r3, #1
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d005      	beq.n	8014d02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cfa:	f043 0202 	orr.w	r2, r3, #2
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d06:	f003 0302 	and.w	r3, r3, #2
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d00b      	beq.n	8014d26 <HAL_UART_IRQHandler+0xf6>
 8014d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d12:	f003 0301 	and.w	r3, r3, #1
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d005      	beq.n	8014d26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d1e:	f043 0204 	orr.w	r2, r3, #4
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8014d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d2a:	f003 0308 	and.w	r3, r3, #8
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d011      	beq.n	8014d56 <HAL_UART_IRQHandler+0x126>
 8014d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014d36:	f003 0320 	and.w	r3, r3, #32
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d105      	bne.n	8014d4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8014d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d005      	beq.n	8014d56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d4e:	f043 0208 	orr.w	r2, r3, #8
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f000 81ed 	beq.w	801513a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d64:	f003 0320 	and.w	r3, r3, #32
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d008      	beq.n	8014d7e <HAL_UART_IRQHandler+0x14e>
 8014d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014d70:	f003 0320 	and.w	r3, r3, #32
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d002      	beq.n	8014d7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f000 faf0 	bl	801535e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	695b      	ldr	r3, [r3, #20]
 8014d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d88:	2b40      	cmp	r3, #64	; 0x40
 8014d8a:	bf0c      	ite	eq
 8014d8c:	2301      	moveq	r3, #1
 8014d8e:	2300      	movne	r3, #0
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d9a:	f003 0308 	and.w	r3, r3, #8
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d103      	bne.n	8014daa <HAL_UART_IRQHandler+0x17a>
 8014da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d04f      	beq.n	8014e4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f000 f9f8 	bl	80151a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	695b      	ldr	r3, [r3, #20]
 8014db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dba:	2b40      	cmp	r3, #64	; 0x40
 8014dbc:	d141      	bne.n	8014e42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	3314      	adds	r3, #20
 8014dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014dcc:	e853 3f00 	ldrex	r3, [r3]
 8014dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	3314      	adds	r3, #20
 8014de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014dea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014dfa:	e841 2300 	strex	r3, r2, [r1]
 8014dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d1d9      	bne.n	8014dbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d013      	beq.n	8014e3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e16:	4a7d      	ldr	r2, [pc, #500]	; (801500c <HAL_UART_IRQHandler+0x3dc>)
 8014e18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fd fd00 	bl	8012824 <HAL_DMA_Abort_IT>
 8014e24:	4603      	mov	r3, r0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d016      	beq.n	8014e58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014e34:	4610      	mov	r0, r2
 8014e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014e38:	e00e      	b.n	8014e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f99a 	bl	8015174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014e40:	e00a      	b.n	8014e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 f996 	bl	8015174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014e48:	e006      	b.n	8014e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f992 	bl	8015174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2200      	movs	r2, #0
 8014e54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8014e56:	e170      	b.n	801513a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014e58:	bf00      	nop
    return;
 8014e5a:	e16e      	b.n	801513a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	f040 814a 	bne.w	80150fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8014e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e6a:	f003 0310 	and.w	r3, r3, #16
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	f000 8143 	beq.w	80150fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8014e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e78:	f003 0310 	and.w	r3, r3, #16
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	f000 813c 	beq.w	80150fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014e82:	2300      	movs	r3, #0
 8014e84:	60bb      	str	r3, [r7, #8]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	60bb      	str	r3, [r7, #8]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	60bb      	str	r3, [r7, #8]
 8014e96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	695b      	ldr	r3, [r3, #20]
 8014e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ea2:	2b40      	cmp	r3, #64	; 0x40
 8014ea4:	f040 80b4 	bne.w	8015010 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	f000 8140 	beq.w	801513e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	f080 8139 	bcs.w	801513e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014ed2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ed8:	69db      	ldr	r3, [r3, #28]
 8014eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ede:	f000 8088 	beq.w	8014ff2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	330c      	adds	r3, #12
 8014ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014ef0:	e853 3f00 	ldrex	r3, [r3]
 8014ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	330c      	adds	r3, #12
 8014f0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014f1e:	e841 2300 	strex	r3, r2, [r1]
 8014f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d1d9      	bne.n	8014ee2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	3314      	adds	r3, #20
 8014f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f38:	e853 3f00 	ldrex	r3, [r3]
 8014f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014f40:	f023 0301 	bic.w	r3, r3, #1
 8014f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	3314      	adds	r3, #20
 8014f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014f52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014f56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014f5e:	e841 2300 	strex	r3, r2, [r1]
 8014f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d1e1      	bne.n	8014f2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	3314      	adds	r3, #20
 8014f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f74:	e853 3f00 	ldrex	r3, [r3]
 8014f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	3314      	adds	r3, #20
 8014f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014f90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014f94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014f96:	e841 2300 	strex	r3, r2, [r1]
 8014f9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d1e3      	bne.n	8014f6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2220      	movs	r2, #32
 8014fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	330c      	adds	r3, #12
 8014fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fba:	e853 3f00 	ldrex	r3, [r3]
 8014fbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fc2:	f023 0310 	bic.w	r3, r3, #16
 8014fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	330c      	adds	r3, #12
 8014fd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8014fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014fdc:	e841 2300 	strex	r3, r2, [r1]
 8014fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d1e3      	bne.n	8014fb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fd fba9 	bl	8012744 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014ffa:	b29b      	uxth	r3, r3
 8014ffc:	1ad3      	subs	r3, r2, r3
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	4619      	mov	r1, r3
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f000 f8c0 	bl	8015188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015008:	e099      	b.n	801513e <HAL_UART_IRQHandler+0x50e>
 801500a:	bf00      	nop
 801500c:	08015267 	.word	0x08015267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015018:	b29b      	uxth	r3, r3
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015024:	b29b      	uxth	r3, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	f000 808b 	beq.w	8015142 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801502c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015030:	2b00      	cmp	r3, #0
 8015032:	f000 8086 	beq.w	8015142 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	330c      	adds	r3, #12
 801503c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015040:	e853 3f00 	ldrex	r3, [r3]
 8015044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801504c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	330c      	adds	r3, #12
 8015056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801505a:	647a      	str	r2, [r7, #68]	; 0x44
 801505c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801505e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015062:	e841 2300 	strex	r3, r2, [r1]
 8015066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801506a:	2b00      	cmp	r3, #0
 801506c:	d1e3      	bne.n	8015036 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	3314      	adds	r3, #20
 8015074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015078:	e853 3f00 	ldrex	r3, [r3]
 801507c:	623b      	str	r3, [r7, #32]
   return(result);
 801507e:	6a3b      	ldr	r3, [r7, #32]
 8015080:	f023 0301 	bic.w	r3, r3, #1
 8015084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	3314      	adds	r3, #20
 801508e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015092:	633a      	str	r2, [r7, #48]	; 0x30
 8015094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801509a:	e841 2300 	strex	r3, r2, [r1]
 801509e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80150a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1e3      	bne.n	801506e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2220      	movs	r2, #32
 80150aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2200      	movs	r2, #0
 80150b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	330c      	adds	r3, #12
 80150ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	e853 3f00 	ldrex	r3, [r3]
 80150c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f023 0310 	bic.w	r3, r3, #16
 80150ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	330c      	adds	r3, #12
 80150d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80150d8:	61fa      	str	r2, [r7, #28]
 80150da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150dc:	69b9      	ldr	r1, [r7, #24]
 80150de:	69fa      	ldr	r2, [r7, #28]
 80150e0:	e841 2300 	strex	r3, r2, [r1]
 80150e4:	617b      	str	r3, [r7, #20]
   return(result);
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d1e3      	bne.n	80150b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80150ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80150f0:	4619      	mov	r1, r3
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f000 f848 	bl	8015188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80150f8:	e023      	b.n	8015142 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80150fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80150fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015102:	2b00      	cmp	r3, #0
 8015104:	d009      	beq.n	801511a <HAL_UART_IRQHandler+0x4ea>
 8015106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801510e:	2b00      	cmp	r3, #0
 8015110:	d003      	beq.n	801511a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f000 f8bb 	bl	801528e <UART_Transmit_IT>
    return;
 8015118:	e014      	b.n	8015144 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015122:	2b00      	cmp	r3, #0
 8015124:	d00e      	beq.n	8015144 <HAL_UART_IRQHandler+0x514>
 8015126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801512e:	2b00      	cmp	r3, #0
 8015130:	d008      	beq.n	8015144 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 f8fb 	bl	801532e <UART_EndTransmit_IT>
    return;
 8015138:	e004      	b.n	8015144 <HAL_UART_IRQHandler+0x514>
    return;
 801513a:	bf00      	nop
 801513c:	e002      	b.n	8015144 <HAL_UART_IRQHandler+0x514>
      return;
 801513e:	bf00      	nop
 8015140:	e000      	b.n	8015144 <HAL_UART_IRQHandler+0x514>
      return;
 8015142:	bf00      	nop
  }
}
 8015144:	37e8      	adds	r7, #232	; 0xe8
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop

0801514c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801514c:	b480      	push	{r7}
 801514e:	b083      	sub	sp, #12
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8015154:	bf00      	nop
 8015156:	370c      	adds	r7, #12
 8015158:	46bd      	mov	sp, r7
 801515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515e:	4770      	bx	lr

08015160 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8015168:	bf00      	nop
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801517c:	bf00      	nop
 801517e:	370c      	adds	r7, #12
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015188:	b480      	push	{r7}
 801518a:	b083      	sub	sp, #12
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	460b      	mov	r3, r1
 8015192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015194:	bf00      	nop
 8015196:	370c      	adds	r7, #12
 8015198:	46bd      	mov	sp, r7
 801519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519e:	4770      	bx	lr

080151a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b095      	sub	sp, #84	; 0x54
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	330c      	adds	r3, #12
 80151ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151b2:	e853 3f00 	ldrex	r3, [r3]
 80151b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80151b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80151be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	330c      	adds	r3, #12
 80151c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80151c8:	643a      	str	r2, [r7, #64]	; 0x40
 80151ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80151ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80151d0:	e841 2300 	strex	r3, r2, [r1]
 80151d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80151d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d1e5      	bne.n	80151a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	3314      	adds	r3, #20
 80151e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151e4:	6a3b      	ldr	r3, [r7, #32]
 80151e6:	e853 3f00 	ldrex	r3, [r3]
 80151ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80151ec:	69fb      	ldr	r3, [r7, #28]
 80151ee:	f023 0301 	bic.w	r3, r3, #1
 80151f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	3314      	adds	r3, #20
 80151fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80151fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015204:	e841 2300 	strex	r3, r2, [r1]
 8015208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520c:	2b00      	cmp	r3, #0
 801520e:	d1e5      	bne.n	80151dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015214:	2b01      	cmp	r3, #1
 8015216:	d119      	bne.n	801524c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	330c      	adds	r3, #12
 801521e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	e853 3f00 	ldrex	r3, [r3]
 8015226:	60bb      	str	r3, [r7, #8]
   return(result);
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	f023 0310 	bic.w	r3, r3, #16
 801522e:	647b      	str	r3, [r7, #68]	; 0x44
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	330c      	adds	r3, #12
 8015236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015238:	61ba      	str	r2, [r7, #24]
 801523a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801523c:	6979      	ldr	r1, [r7, #20]
 801523e:	69ba      	ldr	r2, [r7, #24]
 8015240:	e841 2300 	strex	r3, r2, [r1]
 8015244:	613b      	str	r3, [r7, #16]
   return(result);
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d1e5      	bne.n	8015218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2220      	movs	r2, #32
 8015250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2200      	movs	r2, #0
 8015258:	631a      	str	r2, [r3, #48]	; 0x30
}
 801525a:	bf00      	nop
 801525c:	3754      	adds	r7, #84	; 0x54
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr

08015266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b084      	sub	sp, #16
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	2200      	movs	r2, #0
 8015278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2200      	movs	r2, #0
 801527e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f7ff ff77 	bl	8015174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015286:	bf00      	nop
 8015288:	3710      	adds	r7, #16
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801528e:	b480      	push	{r7}
 8015290:	b085      	sub	sp, #20
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801529c:	b2db      	uxtb	r3, r3
 801529e:	2b21      	cmp	r3, #33	; 0x21
 80152a0:	d13e      	bne.n	8015320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	689b      	ldr	r3, [r3, #8]
 80152a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152aa:	d114      	bne.n	80152d6 <UART_Transmit_IT+0x48>
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	691b      	ldr	r3, [r3, #16]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d110      	bne.n	80152d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6a1b      	ldr	r3, [r3, #32]
 80152b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	881b      	ldrh	r3, [r3, #0]
 80152be:	461a      	mov	r2, r3
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80152c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6a1b      	ldr	r3, [r3, #32]
 80152ce:	1c9a      	adds	r2, r3, #2
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	621a      	str	r2, [r3, #32]
 80152d4:	e008      	b.n	80152e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6a1b      	ldr	r3, [r3, #32]
 80152da:	1c59      	adds	r1, r3, #1
 80152dc:	687a      	ldr	r2, [r7, #4]
 80152de:	6211      	str	r1, [r2, #32]
 80152e0:	781a      	ldrb	r2, [r3, #0]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	3b01      	subs	r3, #1
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	4619      	mov	r1, r3
 80152f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d10f      	bne.n	801531c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	68da      	ldr	r2, [r3, #12]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801530a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	68da      	ldr	r2, [r3, #12]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801531a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801531c:	2300      	movs	r3, #0
 801531e:	e000      	b.n	8015322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8015320:	2302      	movs	r3, #2
  }
}
 8015322:	4618      	mov	r0, r3
 8015324:	3714      	adds	r7, #20
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr

0801532e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801532e:	b580      	push	{r7, lr}
 8015330:	b082      	sub	sp, #8
 8015332:	af00      	add	r7, sp, #0
 8015334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	68da      	ldr	r2, [r3, #12]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2220      	movs	r2, #32
 801534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7ff fefc 	bl	801514c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8015354:	2300      	movs	r3, #0
}
 8015356:	4618      	mov	r0, r3
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}

0801535e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b08c      	sub	sp, #48	; 0x30
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801536c:	b2db      	uxtb	r3, r3
 801536e:	2b22      	cmp	r3, #34	; 0x22
 8015370:	f040 80ab 	bne.w	80154ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	689b      	ldr	r3, [r3, #8]
 8015378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801537c:	d117      	bne.n	80153ae <UART_Receive_IT+0x50>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	691b      	ldr	r3, [r3, #16]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d113      	bne.n	80153ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8015386:	2300      	movs	r3, #0
 8015388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801538e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	b29b      	uxth	r3, r3
 8015398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801539c:	b29a      	uxth	r2, r3
 801539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153a6:	1c9a      	adds	r2, r3, #2
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	629a      	str	r2, [r3, #40]	; 0x28
 80153ac:	e026      	b.n	80153fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80153b4:	2300      	movs	r3, #0
 80153b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	689b      	ldr	r3, [r3, #8]
 80153bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153c0:	d007      	beq.n	80153d2 <UART_Receive_IT+0x74>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	689b      	ldr	r3, [r3, #8]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d10a      	bne.n	80153e0 <UART_Receive_IT+0x82>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d106      	bne.n	80153e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	b2da      	uxtb	r2, r3
 80153da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153dc:	701a      	strb	r2, [r3, #0]
 80153de:	e008      	b.n	80153f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153ec:	b2da      	uxtb	r2, r3
 80153ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153f6:	1c5a      	adds	r2, r3, #1
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015400:	b29b      	uxth	r3, r3
 8015402:	3b01      	subs	r3, #1
 8015404:	b29b      	uxth	r3, r3
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	4619      	mov	r1, r3
 801540a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801540c:	2b00      	cmp	r3, #0
 801540e:	d15a      	bne.n	80154c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68da      	ldr	r2, [r3, #12]
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	f022 0220 	bic.w	r2, r2, #32
 801541e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	68da      	ldr	r2, [r3, #12]
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801542e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	695a      	ldr	r2, [r3, #20]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f022 0201 	bic.w	r2, r2, #1
 801543e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2220      	movs	r2, #32
 8015444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801544c:	2b01      	cmp	r3, #1
 801544e:	d135      	bne.n	80154bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	330c      	adds	r3, #12
 801545c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	e853 3f00 	ldrex	r3, [r3]
 8015464:	613b      	str	r3, [r7, #16]
   return(result);
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	f023 0310 	bic.w	r3, r3, #16
 801546c:	627b      	str	r3, [r7, #36]	; 0x24
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	330c      	adds	r3, #12
 8015474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015476:	623a      	str	r2, [r7, #32]
 8015478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801547a:	69f9      	ldr	r1, [r7, #28]
 801547c:	6a3a      	ldr	r2, [r7, #32]
 801547e:	e841 2300 	strex	r3, r2, [r1]
 8015482:	61bb      	str	r3, [r7, #24]
   return(result);
 8015484:	69bb      	ldr	r3, [r7, #24]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d1e5      	bne.n	8015456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	f003 0310 	and.w	r3, r3, #16
 8015494:	2b10      	cmp	r3, #16
 8015496:	d10a      	bne.n	80154ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015498:	2300      	movs	r3, #0
 801549a:	60fb      	str	r3, [r7, #12]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	60fb      	str	r3, [r7, #12]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	60fb      	str	r3, [r7, #12]
 80154ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80154b2:	4619      	mov	r1, r3
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff fe67 	bl	8015188 <HAL_UARTEx_RxEventCallback>
 80154ba:	e002      	b.n	80154c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7ff fe4f 	bl	8015160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80154c2:	2300      	movs	r3, #0
 80154c4:	e002      	b.n	80154cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80154c6:	2300      	movs	r3, #0
 80154c8:	e000      	b.n	80154cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80154ca:	2302      	movs	r3, #2
  }
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3730      	adds	r7, #48	; 0x30
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80154d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80154d8:	b0c0      	sub	sp, #256	; 0x100
 80154da:	af00      	add	r7, sp, #0
 80154dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80154e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	691b      	ldr	r3, [r3, #16]
 80154e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80154ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80154f0:	68d9      	ldr	r1, [r3, #12]
 80154f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	ea40 0301 	orr.w	r3, r0, r1
 80154fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80154fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015502:	689a      	ldr	r2, [r3, #8]
 8015504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015508:	691b      	ldr	r3, [r3, #16]
 801550a:	431a      	orrs	r2, r3
 801550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015510:	695b      	ldr	r3, [r3, #20]
 8015512:	431a      	orrs	r2, r3
 8015514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015518:	69db      	ldr	r3, [r3, #28]
 801551a:	4313      	orrs	r3, r2
 801551c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801552c:	f021 010c 	bic.w	r1, r1, #12
 8015530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801553a:	430b      	orrs	r3, r1
 801553c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	695b      	ldr	r3, [r3, #20]
 8015546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801554e:	6999      	ldr	r1, [r3, #24]
 8015550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	ea40 0301 	orr.w	r3, r0, r1
 801555a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015560:	681a      	ldr	r2, [r3, #0]
 8015562:	4b8f      	ldr	r3, [pc, #572]	; (80157a0 <UART_SetConfig+0x2cc>)
 8015564:	429a      	cmp	r2, r3
 8015566:	d005      	beq.n	8015574 <UART_SetConfig+0xa0>
 8015568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801556c:	681a      	ldr	r2, [r3, #0]
 801556e:	4b8d      	ldr	r3, [pc, #564]	; (80157a4 <UART_SetConfig+0x2d0>)
 8015570:	429a      	cmp	r2, r3
 8015572:	d104      	bne.n	801557e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015574:	f7fe fa1a 	bl	80139ac <HAL_RCC_GetPCLK2Freq>
 8015578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801557c:	e003      	b.n	8015586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801557e:	f7fe fa01 	bl	8013984 <HAL_RCC_GetPCLK1Freq>
 8015582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801558a:	69db      	ldr	r3, [r3, #28]
 801558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015590:	f040 810c 	bne.w	80157ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015598:	2200      	movs	r2, #0
 801559a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801559e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80155a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80155a6:	4622      	mov	r2, r4
 80155a8:	462b      	mov	r3, r5
 80155aa:	1891      	adds	r1, r2, r2
 80155ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80155ae:	415b      	adcs	r3, r3
 80155b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80155b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80155b6:	4621      	mov	r1, r4
 80155b8:	eb12 0801 	adds.w	r8, r2, r1
 80155bc:	4629      	mov	r1, r5
 80155be:	eb43 0901 	adc.w	r9, r3, r1
 80155c2:	f04f 0200 	mov.w	r2, #0
 80155c6:	f04f 0300 	mov.w	r3, #0
 80155ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80155ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80155d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80155d6:	4690      	mov	r8, r2
 80155d8:	4699      	mov	r9, r3
 80155da:	4623      	mov	r3, r4
 80155dc:	eb18 0303 	adds.w	r3, r8, r3
 80155e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80155e4:	462b      	mov	r3, r5
 80155e6:	eb49 0303 	adc.w	r3, r9, r3
 80155ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80155ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	2200      	movs	r2, #0
 80155f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80155fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80155fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015602:	460b      	mov	r3, r1
 8015604:	18db      	adds	r3, r3, r3
 8015606:	653b      	str	r3, [r7, #80]	; 0x50
 8015608:	4613      	mov	r3, r2
 801560a:	eb42 0303 	adc.w	r3, r2, r3
 801560e:	657b      	str	r3, [r7, #84]	; 0x54
 8015610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8015618:	f7eb fb36 	bl	8000c88 <__aeabi_uldivmod>
 801561c:	4602      	mov	r2, r0
 801561e:	460b      	mov	r3, r1
 8015620:	4b61      	ldr	r3, [pc, #388]	; (80157a8 <UART_SetConfig+0x2d4>)
 8015622:	fba3 2302 	umull	r2, r3, r3, r2
 8015626:	095b      	lsrs	r3, r3, #5
 8015628:	011c      	lsls	r4, r3, #4
 801562a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801562e:	2200      	movs	r2, #0
 8015630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8015638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801563c:	4642      	mov	r2, r8
 801563e:	464b      	mov	r3, r9
 8015640:	1891      	adds	r1, r2, r2
 8015642:	64b9      	str	r1, [r7, #72]	; 0x48
 8015644:	415b      	adcs	r3, r3
 8015646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801564c:	4641      	mov	r1, r8
 801564e:	eb12 0a01 	adds.w	sl, r2, r1
 8015652:	4649      	mov	r1, r9
 8015654:	eb43 0b01 	adc.w	fp, r3, r1
 8015658:	f04f 0200 	mov.w	r2, #0
 801565c:	f04f 0300 	mov.w	r3, #0
 8015660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8015668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801566c:	4692      	mov	sl, r2
 801566e:	469b      	mov	fp, r3
 8015670:	4643      	mov	r3, r8
 8015672:	eb1a 0303 	adds.w	r3, sl, r3
 8015676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801567a:	464b      	mov	r3, r9
 801567c:	eb4b 0303 	adc.w	r3, fp, r3
 8015680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	2200      	movs	r2, #0
 801568c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015698:	460b      	mov	r3, r1
 801569a:	18db      	adds	r3, r3, r3
 801569c:	643b      	str	r3, [r7, #64]	; 0x40
 801569e:	4613      	mov	r3, r2
 80156a0:	eb42 0303 	adc.w	r3, r2, r3
 80156a4:	647b      	str	r3, [r7, #68]	; 0x44
 80156a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80156aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80156ae:	f7eb faeb 	bl	8000c88 <__aeabi_uldivmod>
 80156b2:	4602      	mov	r2, r0
 80156b4:	460b      	mov	r3, r1
 80156b6:	4611      	mov	r1, r2
 80156b8:	4b3b      	ldr	r3, [pc, #236]	; (80157a8 <UART_SetConfig+0x2d4>)
 80156ba:	fba3 2301 	umull	r2, r3, r3, r1
 80156be:	095b      	lsrs	r3, r3, #5
 80156c0:	2264      	movs	r2, #100	; 0x64
 80156c2:	fb02 f303 	mul.w	r3, r2, r3
 80156c6:	1acb      	subs	r3, r1, r3
 80156c8:	00db      	lsls	r3, r3, #3
 80156ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80156ce:	4b36      	ldr	r3, [pc, #216]	; (80157a8 <UART_SetConfig+0x2d4>)
 80156d0:	fba3 2302 	umull	r2, r3, r3, r2
 80156d4:	095b      	lsrs	r3, r3, #5
 80156d6:	005b      	lsls	r3, r3, #1
 80156d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80156dc:	441c      	add	r4, r3
 80156de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80156e2:	2200      	movs	r2, #0
 80156e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80156e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80156ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80156f0:	4642      	mov	r2, r8
 80156f2:	464b      	mov	r3, r9
 80156f4:	1891      	adds	r1, r2, r2
 80156f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80156f8:	415b      	adcs	r3, r3
 80156fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80156fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015700:	4641      	mov	r1, r8
 8015702:	1851      	adds	r1, r2, r1
 8015704:	6339      	str	r1, [r7, #48]	; 0x30
 8015706:	4649      	mov	r1, r9
 8015708:	414b      	adcs	r3, r1
 801570a:	637b      	str	r3, [r7, #52]	; 0x34
 801570c:	f04f 0200 	mov.w	r2, #0
 8015710:	f04f 0300 	mov.w	r3, #0
 8015714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8015718:	4659      	mov	r1, fp
 801571a:	00cb      	lsls	r3, r1, #3
 801571c:	4651      	mov	r1, sl
 801571e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015722:	4651      	mov	r1, sl
 8015724:	00ca      	lsls	r2, r1, #3
 8015726:	4610      	mov	r0, r2
 8015728:	4619      	mov	r1, r3
 801572a:	4603      	mov	r3, r0
 801572c:	4642      	mov	r2, r8
 801572e:	189b      	adds	r3, r3, r2
 8015730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015734:	464b      	mov	r3, r9
 8015736:	460a      	mov	r2, r1
 8015738:	eb42 0303 	adc.w	r3, r2, r3
 801573c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801574c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015754:	460b      	mov	r3, r1
 8015756:	18db      	adds	r3, r3, r3
 8015758:	62bb      	str	r3, [r7, #40]	; 0x28
 801575a:	4613      	mov	r3, r2
 801575c:	eb42 0303 	adc.w	r3, r2, r3
 8015760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801576a:	f7eb fa8d 	bl	8000c88 <__aeabi_uldivmod>
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	4b0d      	ldr	r3, [pc, #52]	; (80157a8 <UART_SetConfig+0x2d4>)
 8015774:	fba3 1302 	umull	r1, r3, r3, r2
 8015778:	095b      	lsrs	r3, r3, #5
 801577a:	2164      	movs	r1, #100	; 0x64
 801577c:	fb01 f303 	mul.w	r3, r1, r3
 8015780:	1ad3      	subs	r3, r2, r3
 8015782:	00db      	lsls	r3, r3, #3
 8015784:	3332      	adds	r3, #50	; 0x32
 8015786:	4a08      	ldr	r2, [pc, #32]	; (80157a8 <UART_SetConfig+0x2d4>)
 8015788:	fba2 2303 	umull	r2, r3, r2, r3
 801578c:	095b      	lsrs	r3, r3, #5
 801578e:	f003 0207 	and.w	r2, r3, #7
 8015792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	4422      	add	r2, r4
 801579a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801579c:	e105      	b.n	80159aa <UART_SetConfig+0x4d6>
 801579e:	bf00      	nop
 80157a0:	40011000 	.word	0x40011000
 80157a4:	40011400 	.word	0x40011400
 80157a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80157ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80157b0:	2200      	movs	r2, #0
 80157b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80157b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80157ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80157be:	4642      	mov	r2, r8
 80157c0:	464b      	mov	r3, r9
 80157c2:	1891      	adds	r1, r2, r2
 80157c4:	6239      	str	r1, [r7, #32]
 80157c6:	415b      	adcs	r3, r3
 80157c8:	627b      	str	r3, [r7, #36]	; 0x24
 80157ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80157ce:	4641      	mov	r1, r8
 80157d0:	1854      	adds	r4, r2, r1
 80157d2:	4649      	mov	r1, r9
 80157d4:	eb43 0501 	adc.w	r5, r3, r1
 80157d8:	f04f 0200 	mov.w	r2, #0
 80157dc:	f04f 0300 	mov.w	r3, #0
 80157e0:	00eb      	lsls	r3, r5, #3
 80157e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80157e6:	00e2      	lsls	r2, r4, #3
 80157e8:	4614      	mov	r4, r2
 80157ea:	461d      	mov	r5, r3
 80157ec:	4643      	mov	r3, r8
 80157ee:	18e3      	adds	r3, r4, r3
 80157f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80157f4:	464b      	mov	r3, r9
 80157f6:	eb45 0303 	adc.w	r3, r5, r3
 80157fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80157fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	2200      	movs	r2, #0
 8015806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801580a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801580e:	f04f 0200 	mov.w	r2, #0
 8015812:	f04f 0300 	mov.w	r3, #0
 8015816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801581a:	4629      	mov	r1, r5
 801581c:	008b      	lsls	r3, r1, #2
 801581e:	4621      	mov	r1, r4
 8015820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015824:	4621      	mov	r1, r4
 8015826:	008a      	lsls	r2, r1, #2
 8015828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801582c:	f7eb fa2c 	bl	8000c88 <__aeabi_uldivmod>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	4b60      	ldr	r3, [pc, #384]	; (80159b8 <UART_SetConfig+0x4e4>)
 8015836:	fba3 2302 	umull	r2, r3, r3, r2
 801583a:	095b      	lsrs	r3, r3, #5
 801583c:	011c      	lsls	r4, r3, #4
 801583e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015842:	2200      	movs	r2, #0
 8015844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801584c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015850:	4642      	mov	r2, r8
 8015852:	464b      	mov	r3, r9
 8015854:	1891      	adds	r1, r2, r2
 8015856:	61b9      	str	r1, [r7, #24]
 8015858:	415b      	adcs	r3, r3
 801585a:	61fb      	str	r3, [r7, #28]
 801585c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015860:	4641      	mov	r1, r8
 8015862:	1851      	adds	r1, r2, r1
 8015864:	6139      	str	r1, [r7, #16]
 8015866:	4649      	mov	r1, r9
 8015868:	414b      	adcs	r3, r1
 801586a:	617b      	str	r3, [r7, #20]
 801586c:	f04f 0200 	mov.w	r2, #0
 8015870:	f04f 0300 	mov.w	r3, #0
 8015874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015878:	4659      	mov	r1, fp
 801587a:	00cb      	lsls	r3, r1, #3
 801587c:	4651      	mov	r1, sl
 801587e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015882:	4651      	mov	r1, sl
 8015884:	00ca      	lsls	r2, r1, #3
 8015886:	4610      	mov	r0, r2
 8015888:	4619      	mov	r1, r3
 801588a:	4603      	mov	r3, r0
 801588c:	4642      	mov	r2, r8
 801588e:	189b      	adds	r3, r3, r2
 8015890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015894:	464b      	mov	r3, r9
 8015896:	460a      	mov	r2, r1
 8015898:	eb42 0303 	adc.w	r3, r2, r3
 801589c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80158a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	2200      	movs	r2, #0
 80158a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80158aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80158ac:	f04f 0200 	mov.w	r2, #0
 80158b0:	f04f 0300 	mov.w	r3, #0
 80158b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80158b8:	4649      	mov	r1, r9
 80158ba:	008b      	lsls	r3, r1, #2
 80158bc:	4641      	mov	r1, r8
 80158be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80158c2:	4641      	mov	r1, r8
 80158c4:	008a      	lsls	r2, r1, #2
 80158c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80158ca:	f7eb f9dd 	bl	8000c88 <__aeabi_uldivmod>
 80158ce:	4602      	mov	r2, r0
 80158d0:	460b      	mov	r3, r1
 80158d2:	4b39      	ldr	r3, [pc, #228]	; (80159b8 <UART_SetConfig+0x4e4>)
 80158d4:	fba3 1302 	umull	r1, r3, r3, r2
 80158d8:	095b      	lsrs	r3, r3, #5
 80158da:	2164      	movs	r1, #100	; 0x64
 80158dc:	fb01 f303 	mul.w	r3, r1, r3
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	011b      	lsls	r3, r3, #4
 80158e4:	3332      	adds	r3, #50	; 0x32
 80158e6:	4a34      	ldr	r2, [pc, #208]	; (80159b8 <UART_SetConfig+0x4e4>)
 80158e8:	fba2 2303 	umull	r2, r3, r2, r3
 80158ec:	095b      	lsrs	r3, r3, #5
 80158ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80158f2:	441c      	add	r4, r3
 80158f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80158f8:	2200      	movs	r2, #0
 80158fa:	673b      	str	r3, [r7, #112]	; 0x70
 80158fc:	677a      	str	r2, [r7, #116]	; 0x74
 80158fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015902:	4642      	mov	r2, r8
 8015904:	464b      	mov	r3, r9
 8015906:	1891      	adds	r1, r2, r2
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	415b      	adcs	r3, r3
 801590c:	60fb      	str	r3, [r7, #12]
 801590e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015912:	4641      	mov	r1, r8
 8015914:	1851      	adds	r1, r2, r1
 8015916:	6039      	str	r1, [r7, #0]
 8015918:	4649      	mov	r1, r9
 801591a:	414b      	adcs	r3, r1
 801591c:	607b      	str	r3, [r7, #4]
 801591e:	f04f 0200 	mov.w	r2, #0
 8015922:	f04f 0300 	mov.w	r3, #0
 8015926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801592a:	4659      	mov	r1, fp
 801592c:	00cb      	lsls	r3, r1, #3
 801592e:	4651      	mov	r1, sl
 8015930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015934:	4651      	mov	r1, sl
 8015936:	00ca      	lsls	r2, r1, #3
 8015938:	4610      	mov	r0, r2
 801593a:	4619      	mov	r1, r3
 801593c:	4603      	mov	r3, r0
 801593e:	4642      	mov	r2, r8
 8015940:	189b      	adds	r3, r3, r2
 8015942:	66bb      	str	r3, [r7, #104]	; 0x68
 8015944:	464b      	mov	r3, r9
 8015946:	460a      	mov	r2, r1
 8015948:	eb42 0303 	adc.w	r3, r2, r3
 801594c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	2200      	movs	r2, #0
 8015956:	663b      	str	r3, [r7, #96]	; 0x60
 8015958:	667a      	str	r2, [r7, #100]	; 0x64
 801595a:	f04f 0200 	mov.w	r2, #0
 801595e:	f04f 0300 	mov.w	r3, #0
 8015962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8015966:	4649      	mov	r1, r9
 8015968:	008b      	lsls	r3, r1, #2
 801596a:	4641      	mov	r1, r8
 801596c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015970:	4641      	mov	r1, r8
 8015972:	008a      	lsls	r2, r1, #2
 8015974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015978:	f7eb f986 	bl	8000c88 <__aeabi_uldivmod>
 801597c:	4602      	mov	r2, r0
 801597e:	460b      	mov	r3, r1
 8015980:	4b0d      	ldr	r3, [pc, #52]	; (80159b8 <UART_SetConfig+0x4e4>)
 8015982:	fba3 1302 	umull	r1, r3, r3, r2
 8015986:	095b      	lsrs	r3, r3, #5
 8015988:	2164      	movs	r1, #100	; 0x64
 801598a:	fb01 f303 	mul.w	r3, r1, r3
 801598e:	1ad3      	subs	r3, r2, r3
 8015990:	011b      	lsls	r3, r3, #4
 8015992:	3332      	adds	r3, #50	; 0x32
 8015994:	4a08      	ldr	r2, [pc, #32]	; (80159b8 <UART_SetConfig+0x4e4>)
 8015996:	fba2 2303 	umull	r2, r3, r2, r3
 801599a:	095b      	lsrs	r3, r3, #5
 801599c:	f003 020f 	and.w	r2, r3, #15
 80159a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	4422      	add	r2, r4
 80159a8:	609a      	str	r2, [r3, #8]
}
 80159aa:	bf00      	nop
 80159ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80159b0:	46bd      	mov	sp, r7
 80159b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80159b6:	bf00      	nop
 80159b8:	51eb851f 	.word	0x51eb851f

080159bc <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 80159bc:	b580      	push	{r7, lr}
 80159be:	b084      	sub	sp, #16
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 80159c6:	2300      	movs	r3, #0
 80159c8:	60fb      	str	r3, [r7, #12]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d20b      	bcs.n	80159ee <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	011b      	lsls	r3, r3, #4
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	4413      	add	r3, r2
 80159de:	6839      	ldr	r1, [r7, #0]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 f817 	bl	8015a14 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	3301      	adds	r3, #1
 80159ea:	60fb      	str	r3, [r7, #12]
 80159ec:	e7ed      	b.n	80159ca <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 80159ee:	bf00      	nop
 80159f0:	3710      	adds	r7, #16
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b082      	sub	sp, #8
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 80159fe:	f7f1 ffeb 	bl	80079d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8015a02:	4603      	mov	r3, r0
 8015a04:	6879      	ldr	r1, [r7, #4]
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7ff ffd8 	bl	80159bc <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8015a0c:	bf00      	nop
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}

08015a14 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8015a14:	b5b0      	push	{r4, r5, r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
 8015a1c:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7eb fd24 	bl	800146e <_ZNKSt14_Function_base8_M_emptyEv>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d001      	beq.n	8015a30 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 8015a2c:	f006 f929 	bl	801bc82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	68dc      	ldr	r4, [r3, #12]
 8015a34:	687d      	ldr	r5, [r7, #4]
 8015a36:	463b      	mov	r3, r7
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f2 facc 	bl	8007fd6 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	4619      	mov	r1, r3
 8015a42:	4628      	mov	r0, r5
 8015a44:	47a0      	blx	r4
 8015a46:	bf00      	nop
    }
 8015a48:	3708      	adds	r7, #8
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bdb0      	pop	{r4, r5, r7, pc}

08015a4e <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 8015a4e:	b5b0      	push	{r4, r5, r7, lr}
 8015a50:	b082      	sub	sp, #8
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	6078      	str	r0, [r7, #4]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	240f      	movs	r4, #15
 8015a5a:	461d      	mov	r5, r3
 8015a5c:	2c00      	cmp	r4, #0
 8015a5e:	db05      	blt.n	8015a6c <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 8015a60:	4628      	mov	r0, r5
 8015a62:	f7f2 f99d 	bl	8007da0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8015a66:	3510      	adds	r5, #16
 8015a68:	3c01      	subs	r4, #1
 8015a6a:	e7f7      	b.n	8015a5c <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	4618      	mov	r0, r3
 8015a78:	3708      	adds	r7, #8
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bdb0      	pop	{r4, r5, r7, pc}

08015a7e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 8015a7e:	b590      	push	{r4, r7, lr}
 8015a80:	b083      	sub	sp, #12
 8015a82:	af00      	add	r7, sp, #0
 8015a84:	6078      	str	r0, [r7, #4]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d00a      	beq.n	8015aa2 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	429c      	cmp	r4, r3
 8015a96:	d004      	beq.n	8015aa2 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8015a98:	3c10      	subs	r4, #16
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	f7f1 ff58 	bl	8007950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8015aa0:	e7f7      	b.n	8015a92 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd90      	pop	{r4, r7, pc}

08015aac <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 8015aac:	b580      	push	{r7, lr}
 8015aae:	af00      	add	r7, sp, #0
 8015ab0:	4801      	ldr	r0, [pc, #4]	; (8015ab8 <__tcf_0+0xc>)
 8015ab2:	f7ff ffe4 	bl	8015a7e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 8015ab6:	bd80      	pop	{r7, pc}
 8015ab8:	20001548 	.word	0x20001548

08015abc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 8015abc:	b580      	push	{r7, lr}
 8015abe:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 8015ac0:	4b12      	ldr	r3, [pc, #72]	; (8015b0c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	f3bf 8f5b 	dmb	ish
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	f003 0301 	and.w	r3, r3, #1
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	bf0c      	ite	eq
 8015ad2:	2301      	moveq	r3, #1
 8015ad4:	2300      	movne	r3, #0
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d013      	beq.n	8015b04 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8015adc:	480b      	ldr	r0, [pc, #44]	; (8015b0c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015ade:	f006 f8bf 	bl	801bc60 <__cxa_guard_acquire>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	bf14      	ite	ne
 8015ae8:	2301      	movne	r3, #1
 8015aea:	2300      	moveq	r3, #0
 8015aec:	b2db      	uxtb	r3, r3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d008      	beq.n	8015b04 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8015af2:	4807      	ldr	r0, [pc, #28]	; (8015b10 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 8015af4:	f7ff ffab 	bl	8015a4e <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 8015af8:	4806      	ldr	r0, [pc, #24]	; (8015b14 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 8015afa:	f006 fb10 	bl	801c11e <atexit>
 8015afe:	4803      	ldr	r0, [pc, #12]	; (8015b0c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015b00:	f006 f8ba 	bl	801bc78 <__cxa_guard_release>
		return instance;
 8015b04:	4b02      	ldr	r3, [pc, #8]	; (8015b10 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8015b06:	4618      	mov	r0, r3
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	2000164c 	.word	0x2000164c
 8015b10:	20001548 	.word	0x20001548
 8015b14:	08015aad 	.word	0x08015aad

08015b18 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8015b22:	2300      	movs	r3, #0
 8015b24:	60fb      	str	r3, [r7, #12]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015b2c:	68fa      	ldr	r2, [r7, #12]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d20b      	bcs.n	8015b4a <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	011b      	lsls	r3, r3, #4
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	4413      	add	r3, r2
 8015b3a:	6839      	ldr	r1, [r7, #0]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7ff ff69 	bl	8015a14 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	3301      	adds	r3, #1
 8015b46:	60fb      	str	r3, [r7, #12]
 8015b48:	e7ed      	b.n	8015b26 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8015b4a:	bf00      	nop
 8015b4c:	3710      	adds	r7, #16
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}

08015b52 <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015b52:	b580      	push	{r7, lr}
 8015b54:	b082      	sub	sp, #8
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 8015b5a:	f7ff ffaf 	bl	8015abc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	6879      	ldr	r1, [r7, #4]
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7ff ffd8 	bl	8015b18 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8015b68:	bf00      	nop
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8015b70:	b480      	push	{r7}
 8015b72:	b085      	sub	sp, #20
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	60b9      	str	r1, [r7, #8]
 8015b78:	607a      	str	r2, [r7, #4]
 8015b7a:	603b      	str	r3, [r7, #0]
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8015b80:	bf00      	nop
 8015b82:	3714      	adds	r7, #20
 8015b84:	46bd      	mov	sp, r7
 8015b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8a:	4770      	bx	lr

08015b8c <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60b9      	str	r1, [r7, #8]
 8015b94:	607a      	str	r2, [r7, #4]
 8015b96:	603b      	str	r3, [r7, #0]
 8015b98:	4603      	mov	r3, r0
 8015b9a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8015b9c:	7bfb      	ldrb	r3, [r7, #15]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d003      	beq.n	8015baa <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 8015ba2:	7bfb      	ldrb	r3, [r7, #15]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f001 fc6e 	bl	8017486 <_putchar>
  }
}
 8015baa:	bf00      	nop
 8015bac:	3710      	adds	r7, #16
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}

08015bb2 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8015bb2:	b480      	push	{r7}
 8015bb4:	b085      	sub	sp, #20
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
 8015bba:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	60fb      	str	r3, [r7, #12]
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d006      	beq.n	8015bd6 <_ZL10_strnlen_sPKcj+0x24>
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	1e5a      	subs	r2, r3, #1
 8015bcc:	603a      	str	r2, [r7, #0]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d001      	beq.n	8015bd6 <_ZL10_strnlen_sPKcj+0x24>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e000      	b.n	8015bd8 <_ZL10_strnlen_sPKcj+0x26>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d003      	beq.n	8015be4 <_ZL10_strnlen_sPKcj+0x32>
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	3301      	adds	r3, #1
 8015be0:	60fb      	str	r3, [r7, #12]
 8015be2:	e7ed      	b.n	8015bc0 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 8015be4:	68fa      	ldr	r2, [r7, #12]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	1ad3      	subs	r3, r2, r3
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3714      	adds	r7, #20
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr

08015bf6 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8015bf6:	b480      	push	{r7}
 8015bf8:	b083      	sub	sp, #12
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8015c00:	79fb      	ldrb	r3, [r7, #7]
 8015c02:	2b2f      	cmp	r3, #47	; 0x2f
 8015c04:	d904      	bls.n	8015c10 <_ZL9_is_digitc+0x1a>
 8015c06:	79fb      	ldrb	r3, [r7, #7]
 8015c08:	2b39      	cmp	r3, #57	; 0x39
 8015c0a:	d801      	bhi.n	8015c10 <_ZL9_is_digitc+0x1a>
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e000      	b.n	8015c12 <_ZL9_is_digitc+0x1c>
 8015c10:	2300      	movs	r3, #0
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	370c      	adds	r7, #12
 8015c16:	46bd      	mov	sp, r7
 8015c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1c:	4770      	bx	lr

08015c1e <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b084      	sub	sp, #16
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8015c26:	2300      	movs	r3, #0
 8015c28:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7ff ffe0 	bl	8015bf6 <_ZL9_is_digitc>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d00f      	beq.n	8015c5c <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015c3c:	68fa      	ldr	r2, [r7, #12]
 8015c3e:	4613      	mov	r3, r2
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	4413      	add	r3, r2
 8015c44:	005b      	lsls	r3, r3, #1
 8015c46:	4618      	mov	r0, r3
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	1c59      	adds	r1, r3, #1
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	6011      	str	r1, [r2, #0]
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	4403      	add	r3, r0
 8015c56:	3b30      	subs	r3, #48	; 0x30
 8015c58:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8015c5a:	e7e6      	b.n	8015c2a <_ZL5_atoiPPKc+0xc>
  }
  return i;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3710      	adds	r7, #16
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8015c66:	b590      	push	{r4, r7, lr}
 8015c68:	b087      	sub	sp, #28
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	60f8      	str	r0, [r7, #12]
 8015c6e:	60b9      	str	r1, [r7, #8]
 8015c70:	607a      	str	r2, [r7, #4]
 8015c72:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8015c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c7a:	f003 0302 	and.w	r3, r3, #2
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d116      	bne.n	8015cb0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 8015c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c84:	f003 0301 	and.w	r3, r3, #1
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d111      	bne.n	8015cb0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 8015c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8e:	617b      	str	r3, [r7, #20]
 8015c90:	697a      	ldr	r2, [r7, #20]
 8015c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d20b      	bcs.n	8015cb0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	1c53      	adds	r3, r2, #1
 8015c9c:	607b      	str	r3, [r7, #4]
 8015c9e:	68fc      	ldr	r4, [r7, #12]
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	68b9      	ldr	r1, [r7, #8]
 8015ca4:	2020      	movs	r0, #32
 8015ca6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	3301      	adds	r3, #1
 8015cac:	617b      	str	r3, [r7, #20]
 8015cae:	e7ef      	b.n	8015c90 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 8015cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d00e      	beq.n	8015cd4 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 8015cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb8:	3b01      	subs	r3, #1
 8015cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc0:	4413      	add	r3, r2
 8015cc2:	7818      	ldrb	r0, [r3, #0]
 8015cc4:	687a      	ldr	r2, [r7, #4]
 8015cc6:	1c53      	adds	r3, r2, #1
 8015cc8:	607b      	str	r3, [r7, #4]
 8015cca:	68fc      	ldr	r4, [r7, #12]
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	68b9      	ldr	r1, [r7, #8]
 8015cd0:	47a0      	blx	r4
  while (len) {
 8015cd2:	e7ed      	b.n	8015cb0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8015cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cd6:	f003 0302 	and.w	r3, r3, #2
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d00e      	beq.n	8015cfc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	1ad3      	subs	r3, r2, r3
 8015ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d908      	bls.n	8015cfc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	1c53      	adds	r3, r2, #1
 8015cee:	607b      	str	r3, [r7, #4]
 8015cf0:	68fc      	ldr	r4, [r7, #12]
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	68b9      	ldr	r1, [r7, #8]
 8015cf6:	2020      	movs	r0, #32
 8015cf8:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8015cfa:	e7f0      	b.n	8015cde <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 8015cfc:	687b      	ldr	r3, [r7, #4]
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	371c      	adds	r7, #28
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd90      	pop	{r4, r7, pc}

08015d06 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015d06:	b580      	push	{r7, lr}
 8015d08:	b088      	sub	sp, #32
 8015d0a:	af04      	add	r7, sp, #16
 8015d0c:	60f8      	str	r0, [r7, #12]
 8015d0e:	60b9      	str	r1, [r7, #8]
 8015d10:	607a      	str	r2, [r7, #4]
 8015d12:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8015d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d16:	f003 0302 	and.w	r3, r3, #2
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d136      	bne.n	8015d8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8015d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d010      	beq.n	8015d46 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	f003 0301 	and.w	r3, r3, #1
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d00b      	beq.n	8015d46 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8015d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d104      	bne.n	8015d40 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 8015d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d38:	f003 030c 	and.w	r3, r3, #12
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d002      	beq.n	8015d46 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 8015d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d42:	3b01      	subs	r3, #1
 8015d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015d46:	69fa      	ldr	r2, [r7, #28]
 8015d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d20a      	bcs.n	8015d64 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	2b1f      	cmp	r3, #31
 8015d52:	d807      	bhi.n	8015d64 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 8015d54:	69fb      	ldr	r3, [r7, #28]
 8015d56:	1c5a      	adds	r2, r3, #1
 8015d58:	61fa      	str	r2, [r7, #28]
 8015d5a:	69ba      	ldr	r2, [r7, #24]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	2230      	movs	r2, #48	; 0x30
 8015d60:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015d62:	e7f0      	b.n	8015d46 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d66:	f003 0301 	and.w	r3, r3, #1
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d00e      	beq.n	8015d8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 8015d6e:	69fa      	ldr	r2, [r7, #28]
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d20a      	bcs.n	8015d8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	2b1f      	cmp	r3, #31
 8015d7a:	d807      	bhi.n	8015d8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 8015d7c:	69fb      	ldr	r3, [r7, #28]
 8015d7e:	1c5a      	adds	r2, r3, #1
 8015d80:	61fa      	str	r2, [r7, #28]
 8015d82:	69ba      	ldr	r2, [r7, #24]
 8015d84:	4413      	add	r3, r2
 8015d86:	2230      	movs	r2, #48	; 0x30
 8015d88:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015d8a:	e7eb      	b.n	8015d64 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8015d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8e:	f003 0310 	and.w	r3, r3, #16
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d058      	beq.n	8015e48 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8015d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d116      	bne.n	8015dce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d013      	beq.n	8015dce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8015da6:	69fa      	ldr	r2, [r7, #28]
 8015da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d003      	beq.n	8015db6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 8015dae:	69fa      	ldr	r2, [r7, #28]
 8015db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d10b      	bne.n	8015dce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	3b01      	subs	r3, #1
 8015dba:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d005      	beq.n	8015dce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc4:	2b10      	cmp	r3, #16
 8015dc6:	d102      	bne.n	8015dce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd0:	2b10      	cmp	r3, #16
 8015dd2:	d10f      	bne.n	8015df4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8015dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd6:	f003 0320 	and.w	r3, r3, #32
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d10a      	bne.n	8015df4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8015dde:	69fb      	ldr	r3, [r7, #28]
 8015de0:	2b1f      	cmp	r3, #31
 8015de2:	d807      	bhi.n	8015df4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	1c5a      	adds	r2, r3, #1
 8015de8:	61fa      	str	r2, [r7, #28]
 8015dea:	69ba      	ldr	r2, [r7, #24]
 8015dec:	4413      	add	r3, r2
 8015dee:	2278      	movs	r2, #120	; 0x78
 8015df0:	701a      	strb	r2, [r3, #0]
 8015df2:	e01f      	b.n	8015e34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df6:	2b10      	cmp	r3, #16
 8015df8:	d10f      	bne.n	8015e1a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	f003 0320 	and.w	r3, r3, #32
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d00a      	beq.n	8015e1a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	2b1f      	cmp	r3, #31
 8015e08:	d807      	bhi.n	8015e1a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 8015e0a:	69fb      	ldr	r3, [r7, #28]
 8015e0c:	1c5a      	adds	r2, r3, #1
 8015e0e:	61fa      	str	r2, [r7, #28]
 8015e10:	69ba      	ldr	r2, [r7, #24]
 8015e12:	4413      	add	r3, r2
 8015e14:	2258      	movs	r2, #88	; 0x58
 8015e16:	701a      	strb	r2, [r3, #0]
 8015e18:	e00c      	b.n	8015e34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e1c:	2b02      	cmp	r3, #2
 8015e1e:	d109      	bne.n	8015e34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 8015e20:	69fb      	ldr	r3, [r7, #28]
 8015e22:	2b1f      	cmp	r3, #31
 8015e24:	d806      	bhi.n	8015e34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	1c5a      	adds	r2, r3, #1
 8015e2a:	61fa      	str	r2, [r7, #28]
 8015e2c:	69ba      	ldr	r2, [r7, #24]
 8015e2e:	4413      	add	r3, r2
 8015e30:	2262      	movs	r2, #98	; 0x62
 8015e32:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015e34:	69fb      	ldr	r3, [r7, #28]
 8015e36:	2b1f      	cmp	r3, #31
 8015e38:	d806      	bhi.n	8015e48 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	1c5a      	adds	r2, r3, #1
 8015e3e:	61fa      	str	r2, [r7, #28]
 8015e40:	69ba      	ldr	r2, [r7, #24]
 8015e42:	4413      	add	r3, r2
 8015e44:	2230      	movs	r2, #48	; 0x30
 8015e46:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	2b1f      	cmp	r3, #31
 8015e4c:	d824      	bhi.n	8015e98 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 8015e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d007      	beq.n	8015e66 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 8015e56:	69fb      	ldr	r3, [r7, #28]
 8015e58:	1c5a      	adds	r2, r3, #1
 8015e5a:	61fa      	str	r2, [r7, #28]
 8015e5c:	69ba      	ldr	r2, [r7, #24]
 8015e5e:	4413      	add	r3, r2
 8015e60:	222d      	movs	r2, #45	; 0x2d
 8015e62:	701a      	strb	r2, [r3, #0]
 8015e64:	e018      	b.n	8015e98 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8015e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e68:	f003 0304 	and.w	r3, r3, #4
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d007      	beq.n	8015e80 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	1c5a      	adds	r2, r3, #1
 8015e74:	61fa      	str	r2, [r7, #28]
 8015e76:	69ba      	ldr	r2, [r7, #24]
 8015e78:	4413      	add	r3, r2
 8015e7a:	222b      	movs	r2, #43	; 0x2b
 8015e7c:	701a      	strb	r2, [r3, #0]
 8015e7e:	e00b      	b.n	8015e98 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8015e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e82:	f003 0308 	and.w	r3, r3, #8
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d006      	beq.n	8015e98 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	1c5a      	adds	r2, r3, #1
 8015e8e:	61fa      	str	r2, [r7, #28]
 8015e90:	69ba      	ldr	r2, [r7, #24]
 8015e92:	4413      	add	r3, r2
 8015e94:	2220      	movs	r2, #32
 8015e96:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8015e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9a:	9303      	str	r3, [sp, #12]
 8015e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e9e:	9302      	str	r3, [sp, #8]
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	9301      	str	r3, [sp, #4]
 8015ea4:	69bb      	ldr	r3, [r7, #24]
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	687a      	ldr	r2, [r7, #4]
 8015eac:	68b9      	ldr	r1, [r7, #8]
 8015eae:	68f8      	ldr	r0, [r7, #12]
 8015eb0:	f7ff fed9 	bl	8015c66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8015eb4:	4603      	mov	r3, r0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b096      	sub	sp, #88	; 0x58
 8015ec2:	af08      	add	r7, sp, #32
 8015ec4:	60f8      	str	r0, [r7, #12]
 8015ec6:	60b9      	str	r1, [r7, #8]
 8015ec8:	607a      	str	r2, [r7, #4]
 8015eca:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8015ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d103      	bne.n	8015ede <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 8015ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ed8:	f023 0310 	bic.w	r3, r3, #16
 8015edc:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d002      	beq.n	8015eee <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 8015ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d033      	beq.n	8015f56 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 8015eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8015ef6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015ef8:	fb01 f202 	mul.w	r2, r1, r2
 8015efc:	1a9b      	subs	r3, r3, r2
 8015efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015f02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f06:	2b09      	cmp	r3, #9
 8015f08:	d804      	bhi.n	8015f14 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8015f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f0e:	3330      	adds	r3, #48	; 0x30
 8015f10:	b2da      	uxtb	r2, r3
 8015f12:	e00d      	b.n	8015f30 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 8015f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f16:	f003 0320 	and.w	r3, r3, #32
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d001      	beq.n	8015f22 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 8015f1e:	2241      	movs	r2, #65	; 0x41
 8015f20:	e000      	b.n	8015f24 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 8015f22:	2261      	movs	r2, #97	; 0x61
 8015f24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f28:	4413      	add	r3, r2
 8015f2a:	b2db      	uxtb	r3, r3
 8015f2c:	3b0a      	subs	r3, #10
 8015f2e:	b2da      	uxtb	r2, r3
 8015f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f32:	1c59      	adds	r1, r3, #1
 8015f34:	6379      	str	r1, [r7, #52]	; 0x34
 8015f36:	3338      	adds	r3, #56	; 0x38
 8015f38:	443b      	add	r3, r7
 8015f3a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8015f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f46:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d003      	beq.n	8015f56 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 8015f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f50:	2b1f      	cmp	r3, #31
 8015f52:	d800      	bhi.n	8015f56 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 8015f54:	e7cb      	b.n	8015eee <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f58:	9306      	str	r3, [sp, #24]
 8015f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f5c:	9305      	str	r3, [sp, #20]
 8015f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f60:	9304      	str	r3, [sp, #16]
 8015f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f64:	9303      	str	r3, [sp, #12]
 8015f66:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015f6a:	9302      	str	r3, [sp, #8]
 8015f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f6e:	9301      	str	r3, [sp, #4]
 8015f70:	f107 0310 	add.w	r3, r7, #16
 8015f74:	9300      	str	r3, [sp, #0]
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	687a      	ldr	r2, [r7, #4]
 8015f7a:	68b9      	ldr	r1, [r7, #8]
 8015f7c:	68f8      	ldr	r0, [r7, #12]
 8015f7e:	f7ff fec2 	bl	8015d06 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8015f82:	4603      	mov	r3, r0
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3738      	adds	r7, #56	; 0x38
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b096      	sub	sp, #88	; 0x58
 8015f90:	af08      	add	r7, sp, #32
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
 8015f98:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8015f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015fa2:	4313      	orrs	r3, r2
 8015fa4:	d103      	bne.n	8015fae <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 8015fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fa8:	f023 0310 	bic.w	r3, r3, #16
 8015fac:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d003      	beq.n	8015fc0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 8015fb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015fbc:	4313      	orrs	r3, r2
 8015fbe:	d038      	beq.n	8016032 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 8015fc0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015fc8:	f7ea fe5e 	bl	8000c88 <__aeabi_uldivmod>
 8015fcc:	4613      	mov	r3, r2
 8015fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015fd6:	2b09      	cmp	r3, #9
 8015fd8:	d804      	bhi.n	8015fe4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8015fda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015fde:	3330      	adds	r3, #48	; 0x30
 8015fe0:	b2da      	uxtb	r2, r3
 8015fe2:	e00d      	b.n	8016000 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 8015fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fe6:	f003 0320 	and.w	r3, r3, #32
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d001      	beq.n	8015ff2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 8015fee:	2241      	movs	r2, #65	; 0x41
 8015ff0:	e000      	b.n	8015ff4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 8015ff2:	2261      	movs	r2, #97	; 0x61
 8015ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ff8:	4413      	add	r3, r2
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	3b0a      	subs	r3, #10
 8015ffe:	b2da      	uxtb	r2, r3
 8016000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016002:	1c59      	adds	r1, r3, #1
 8016004:	6379      	str	r1, [r7, #52]	; 0x34
 8016006:	3338      	adds	r3, #56	; 0x38
 8016008:	443b      	add	r3, r7
 801600a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 801600e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016012:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016016:	f7ea fe37 	bl	8000c88 <__aeabi_uldivmod>
 801601a:	4602      	mov	r2, r0
 801601c:	460b      	mov	r3, r1
 801601e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8016022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016026:	4313      	orrs	r3, r2
 8016028:	d003      	beq.n	8016032 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 801602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801602c:	2b1f      	cmp	r3, #31
 801602e:	d800      	bhi.n	8016032 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 8016030:	e7c6      	b.n	8015fc0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8016032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016036:	9206      	str	r2, [sp, #24]
 8016038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801603a:	9205      	str	r2, [sp, #20]
 801603c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801603e:	9204      	str	r2, [sp, #16]
 8016040:	9303      	str	r3, [sp, #12]
 8016042:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8016046:	9302      	str	r3, [sp, #8]
 8016048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801604a:	9301      	str	r3, [sp, #4]
 801604c:	f107 0310 	add.w	r3, r7, #16
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	687a      	ldr	r2, [r7, #4]
 8016056:	68b9      	ldr	r1, [r7, #8]
 8016058:	68f8      	ldr	r0, [r7, #12]
 801605a:	f7ff fe54 	bl	8015d06 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 801605e:	4603      	mov	r3, r0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3738      	adds	r7, #56	; 0x38
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8016068:	b590      	push	{r4, r7, lr}
 801606a:	b09d      	sub	sp, #116	; 0x74
 801606c:	af04      	add	r7, sp, #16
 801606e:	6178      	str	r0, [r7, #20]
 8016070:	6139      	str	r1, [r7, #16]
 8016072:	60fa      	str	r2, [r7, #12]
 8016074:	60bb      	str	r3, [r7, #8]
 8016076:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 801607a:	2300      	movs	r3, #0
 801607c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 801607e:	f04f 0200 	mov.w	r2, #0
 8016082:	f04f 0300 	mov.w	r3, #0
 8016086:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 801608a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801608e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016092:	f7ea fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d10f      	bne.n	80160bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 801609c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801609e:	9303      	str	r3, [sp, #12]
 80160a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160a2:	9302      	str	r3, [sp, #8]
 80160a4:	2303      	movs	r3, #3
 80160a6:	9301      	str	r3, [sp, #4]
 80160a8:	4ba7      	ldr	r3, [pc, #668]	; (8016348 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	68fa      	ldr	r2, [r7, #12]
 80160b0:	6939      	ldr	r1, [r7, #16]
 80160b2:	6978      	ldr	r0, [r7, #20]
 80160b4:	f7ff fdd7 	bl	8015c66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 80160b8:	4603      	mov	r3, r0
 80160ba:	e230      	b.n	801651e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 80160bc:	f04f 32ff 	mov.w	r2, #4294967295
 80160c0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80160c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80160c8:	f7ea fd08 	bl	8000adc <__aeabi_dcmplt>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d00f      	beq.n	80160f2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80160d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80160d4:	9303      	str	r3, [sp, #12]
 80160d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160d8:	9302      	str	r3, [sp, #8]
 80160da:	2304      	movs	r3, #4
 80160dc:	9301      	str	r3, [sp, #4]
 80160de:	4b9b      	ldr	r3, [pc, #620]	; (801634c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 80160e0:	9300      	str	r3, [sp, #0]
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	6939      	ldr	r1, [r7, #16]
 80160e8:	6978      	ldr	r0, [r7, #20]
 80160ea:	f7ff fdbc 	bl	8015c66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 80160ee:	4603      	mov	r3, r0
 80160f0:	e215      	b.n	801651e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 80160f2:	f04f 32ff 	mov.w	r2, #4294967295
 80160f6:	4b96      	ldr	r3, [pc, #600]	; (8016350 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 80160f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80160fc:	f7ea fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8016100:	4603      	mov	r3, r0
 8016102:	2b00      	cmp	r3, #0
 8016104:	d01d      	beq.n	8016142 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8016106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016108:	f003 0304 	and.w	r3, r3, #4
 801610c:	2b00      	cmp	r3, #0
 801610e:	d001      	beq.n	8016114 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8016110:	4b90      	ldr	r3, [pc, #576]	; (8016354 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8016112:	e000      	b.n	8016116 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8016114:	4b90      	ldr	r3, [pc, #576]	; (8016358 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8016116:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016118:	f002 0204 	and.w	r2, r2, #4
 801611c:	2a00      	cmp	r2, #0
 801611e:	d001      	beq.n	8016124 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8016120:	2204      	movs	r2, #4
 8016122:	e000      	b.n	8016126 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8016124:	2203      	movs	r2, #3
 8016126:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016128:	9103      	str	r1, [sp, #12]
 801612a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801612c:	9102      	str	r1, [sp, #8]
 801612e:	9201      	str	r2, [sp, #4]
 8016130:	9300      	str	r3, [sp, #0]
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	68fa      	ldr	r2, [r7, #12]
 8016136:	6939      	ldr	r1, [r7, #16]
 8016138:	6978      	ldr	r0, [r7, #20]
 801613a:	f7ff fd94 	bl	8015c66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 801613e:	4603      	mov	r3, r0
 8016140:	e1ed      	b.n	801651e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8016142:	a37d      	add	r3, pc, #500	; (adr r3, 8016338 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8016144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016148:	e9d7 0100 	ldrd	r0, r1, [r7]
 801614c:	f7ea fce4 	bl	8000b18 <__aeabi_dcmpgt>
 8016150:	4603      	mov	r3, r0
 8016152:	2b00      	cmp	r3, #0
 8016154:	d109      	bne.n	801616a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8016156:	a37a      	add	r3, pc, #488	; (adr r3, 8016340 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8016158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801615c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016160:	f7ea fcbc 	bl	8000adc <__aeabi_dcmplt>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d00f      	beq.n	801618a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 801616a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801616c:	9302      	str	r3, [sp, #8]
 801616e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016170:	9301      	str	r3, [sp, #4]
 8016172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016174:	9300      	str	r3, [sp, #0]
 8016176:	ed97 0b00 	vldr	d0, [r7]
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	68fa      	ldr	r2, [r7, #12]
 801617e:	6939      	ldr	r1, [r7, #16]
 8016180:	6978      	ldr	r0, [r7, #20]
 8016182:	f000 f9d5 	bl	8016530 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8016186:	4603      	mov	r3, r0
 8016188:	e1c9      	b.n	801651e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 801618a:	2300      	movs	r3, #0
 801618c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8016190:	f04f 0200 	mov.w	r2, #0
 8016194:	f04f 0300 	mov.w	r3, #0
 8016198:	e9d7 0100 	ldrd	r0, r1, [r7]
 801619c:	f7ea fc9e 	bl	8000adc <__aeabi_dcmplt>
 80161a0:	4603      	mov	r3, r0
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d00e      	beq.n	80161c4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 80161a6:	2301      	movs	r3, #1
 80161a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80161ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161b0:	f04f 0000 	mov.w	r0, #0
 80161b4:	f04f 0100 	mov.w	r1, #0
 80161b8:	f7ea f866 	bl	8000288 <__aeabi_dsub>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80161c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80161c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d101      	bne.n	80161d2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80161ce:	2306      	movs	r3, #6
 80161d0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80161d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161d4:	2b1f      	cmp	r3, #31
 80161d6:	d80e      	bhi.n	80161f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 80161d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80161da:	2b09      	cmp	r3, #9
 80161dc:	d90b      	bls.n	80161f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 80161de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161e0:	1c5a      	adds	r2, r3, #1
 80161e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80161e4:	3360      	adds	r3, #96	; 0x60
 80161e6:	443b      	add	r3, r7
 80161e8:	2230      	movs	r2, #48	; 0x30
 80161ea:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80161ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80161f0:	3b01      	subs	r3, #1
 80161f2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80161f4:	e7ed      	b.n	80161d2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 80161f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80161fa:	f7ea fcad 	bl	8000b58 <__aeabi_d2iz>
 80161fe:	4603      	mov	r3, r0
 8016200:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8016202:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016204:	f7ea f98e 	bl	8000524 <__aeabi_i2d>
 8016208:	4602      	mov	r2, r0
 801620a:	460b      	mov	r3, r1
 801620c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016210:	f7ea f83a 	bl	8000288 <__aeabi_dsub>
 8016214:	4602      	mov	r2, r0
 8016216:	460b      	mov	r3, r1
 8016218:	4610      	mov	r0, r2
 801621a:	4619      	mov	r1, r3
 801621c:	4a4f      	ldr	r2, [pc, #316]	; (801635c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 801621e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	4413      	add	r3, r2
 8016224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016228:	f7ea f9e6 	bl	80005f8 <__aeabi_dmul>
 801622c:	4602      	mov	r2, r0
 801622e:	460b      	mov	r3, r1
 8016230:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8016234:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016238:	f7ea fcb6 	bl	8000ba8 <__aeabi_d2uiz>
 801623c:	4603      	mov	r3, r0
 801623e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8016240:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016242:	f7ea f95f 	bl	8000504 <__aeabi_ui2d>
 8016246:	4602      	mov	r2, r0
 8016248:	460b      	mov	r3, r1
 801624a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801624e:	f7ea f81b 	bl	8000288 <__aeabi_dsub>
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 801625a:	f04f 0200 	mov.w	r2, #0
 801625e:	4b40      	ldr	r3, [pc, #256]	; (8016360 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8016260:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016264:	f7ea fc58 	bl	8000b18 <__aeabi_dcmpgt>
 8016268:	4603      	mov	r3, r0
 801626a:	2b00      	cmp	r3, #0
 801626c:	d016      	beq.n	801629c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 801626e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016270:	3301      	adds	r3, #1
 8016272:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8016274:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016276:	f7ea f945 	bl	8000504 <__aeabi_ui2d>
 801627a:	4a38      	ldr	r2, [pc, #224]	; (801635c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 801627c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801627e:	00db      	lsls	r3, r3, #3
 8016280:	4413      	add	r3, r2
 8016282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016286:	f7ea fc3d 	bl	8000b04 <__aeabi_dcmpge>
 801628a:	4603      	mov	r3, r0
 801628c:	2b00      	cmp	r3, #0
 801628e:	d01a      	beq.n	80162c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 8016290:	2300      	movs	r3, #0
 8016292:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8016294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016296:	3301      	adds	r3, #1
 8016298:	657b      	str	r3, [r7, #84]	; 0x54
 801629a:	e014      	b.n	80162c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 801629c:	f04f 0200 	mov.w	r2, #0
 80162a0:	4b2f      	ldr	r3, [pc, #188]	; (8016360 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 80162a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80162a6:	f7ea fc19 	bl	8000adc <__aeabi_dcmplt>
 80162aa:	4603      	mov	r3, r0
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d10a      	bne.n	80162c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80162b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d004      	beq.n	80162c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 80162b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b8:	f003 0301 	and.w	r3, r3, #1
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d002      	beq.n	80162c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80162c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162c2:	3301      	adds	r3, #1
 80162c4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80162c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d14b      	bne.n	8016364 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 80162cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80162ce:	f7ea f929 	bl	8000524 <__aeabi_i2d>
 80162d2:	4602      	mov	r2, r0
 80162d4:	460b      	mov	r3, r1
 80162d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162da:	f7e9 ffd5 	bl	8000288 <__aeabi_dsub>
 80162de:	4602      	mov	r2, r0
 80162e0:	460b      	mov	r3, r1
 80162e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80162e6:	2301      	movs	r3, #1
 80162e8:	461c      	mov	r4, r3
 80162ea:	f04f 0200 	mov.w	r2, #0
 80162ee:	4b1c      	ldr	r3, [pc, #112]	; (8016360 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 80162f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80162f4:	f7ea fbf2 	bl	8000adc <__aeabi_dcmplt>
 80162f8:	4603      	mov	r3, r0
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d101      	bne.n	8016302 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 80162fe:	2300      	movs	r3, #0
 8016300:	461c      	mov	r4, r3
 8016302:	b2e3      	uxtb	r3, r4
 8016304:	f083 0301 	eor.w	r3, r3, #1
 8016308:	b2db      	uxtb	r3, r3
 801630a:	2b00      	cmp	r3, #0
 801630c:	d109      	bne.n	8016322 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 801630e:	f04f 0200 	mov.w	r2, #0
 8016312:	4b13      	ldr	r3, [pc, #76]	; (8016360 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8016314:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016318:	f7ea fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 801631c:	4603      	mov	r3, r0
 801631e:	2b00      	cmp	r3, #0
 8016320:	d06d      	beq.n	80163fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8016322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016324:	f003 0301 	and.w	r3, r3, #1
 8016328:	2b00      	cmp	r3, #0
 801632a:	d068      	beq.n	80163fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 801632c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801632e:	3301      	adds	r3, #1
 8016330:	657b      	str	r3, [r7, #84]	; 0x54
 8016332:	e064      	b.n	80163fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8016334:	f3af 8000 	nop.w
 8016338:	00000000 	.word	0x00000000
 801633c:	41cdcd65 	.word	0x41cdcd65
 8016340:	00000000 	.word	0x00000000
 8016344:	c1cdcd65 	.word	0xc1cdcd65
 8016348:	0801f038 	.word	0x0801f038
 801634c:	0801f03c 	.word	0x0801f03c
 8016350:	7fefffff 	.word	0x7fefffff
 8016354:	0801f044 	.word	0x0801f044
 8016358:	0801f04c 	.word	0x0801f04c
 801635c:	0801f308 	.word	0x0801f308
 8016360:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8016364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016366:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8016368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801636a:	2b1f      	cmp	r3, #31
 801636c:	d826      	bhi.n	80163bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 801636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016370:	3b01      	subs	r3, #1
 8016372:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8016374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016376:	4b6c      	ldr	r3, [pc, #432]	; (8016528 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8016378:	fba3 2301 	umull	r2, r3, r3, r1
 801637c:	08da      	lsrs	r2, r3, #3
 801637e:	4613      	mov	r3, r2
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	4413      	add	r3, r2
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	1aca      	subs	r2, r1, r3
 8016388:	b2d2      	uxtb	r2, r2
 801638a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801638c:	1c59      	adds	r1, r3, #1
 801638e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8016390:	3230      	adds	r2, #48	; 0x30
 8016392:	b2d2      	uxtb	r2, r2
 8016394:	3360      	adds	r3, #96	; 0x60
 8016396:	443b      	add	r3, r7
 8016398:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 801639c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801639e:	4a62      	ldr	r2, [pc, #392]	; (8016528 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 80163a0:	fba2 2303 	umull	r2, r3, r2, r3
 80163a4:	08db      	lsrs	r3, r3, #3
 80163a6:	653b      	str	r3, [r7, #80]	; 0x50
 80163a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	bf0c      	ite	eq
 80163ae:	2301      	moveq	r3, #1
 80163b0:	2300      	movne	r3, #0
 80163b2:	b2db      	uxtb	r3, r3
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d100      	bne.n	80163ba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80163b8:	e7d6      	b.n	8016368 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 80163ba:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80163bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163be:	2b1f      	cmp	r3, #31
 80163c0:	d806      	bhi.n	80163d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 80163c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163c4:	1e5a      	subs	r2, r3, #1
 80163c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d001      	beq.n	80163d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 80163cc:	2301      	movs	r3, #1
 80163ce:	e000      	b.n	80163d2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 80163d0:	2300      	movs	r3, #0
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d008      	beq.n	80163e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 80163d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163d8:	1c5a      	adds	r2, r3, #1
 80163da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80163dc:	3360      	adds	r3, #96	; 0x60
 80163de:	443b      	add	r3, r7
 80163e0:	2230      	movs	r2, #48	; 0x30
 80163e2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80163e6:	e7e9      	b.n	80163bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80163e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163ea:	2b1f      	cmp	r3, #31
 80163ec:	d807      	bhi.n	80163fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 80163ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163f0:	1c5a      	adds	r2, r3, #1
 80163f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80163f4:	3360      	adds	r3, #96	; 0x60
 80163f6:	443b      	add	r3, r7
 80163f8:	222e      	movs	r2, #46	; 0x2e
 80163fa:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80163fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016400:	2b1f      	cmp	r3, #31
 8016402:	d827      	bhi.n	8016454 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 8016404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016406:	4b49      	ldr	r3, [pc, #292]	; (801652c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8016408:	fb83 1302 	smull	r1, r3, r3, r2
 801640c:	1099      	asrs	r1, r3, #2
 801640e:	17d3      	asrs	r3, r2, #31
 8016410:	1ac9      	subs	r1, r1, r3
 8016412:	460b      	mov	r3, r1
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	440b      	add	r3, r1
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	1ad1      	subs	r1, r2, r3
 801641c:	b2ca      	uxtb	r2, r1
 801641e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016420:	1c59      	adds	r1, r3, #1
 8016422:	65f9      	str	r1, [r7, #92]	; 0x5c
 8016424:	3230      	adds	r2, #48	; 0x30
 8016426:	b2d2      	uxtb	r2, r2
 8016428:	3360      	adds	r3, #96	; 0x60
 801642a:	443b      	add	r3, r7
 801642c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8016430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016432:	4a3e      	ldr	r2, [pc, #248]	; (801652c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8016434:	fb82 1203 	smull	r1, r2, r2, r3
 8016438:	1092      	asrs	r2, r2, #2
 801643a:	17db      	asrs	r3, r3, #31
 801643c:	1ad3      	subs	r3, r2, r3
 801643e:	657b      	str	r3, [r7, #84]	; 0x54
 8016440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016442:	2b00      	cmp	r3, #0
 8016444:	bf0c      	ite	eq
 8016446:	2301      	moveq	r3, #1
 8016448:	2300      	movne	r3, #0
 801644a:	b2db      	uxtb	r3, r3
 801644c:	2b00      	cmp	r3, #0
 801644e:	d100      	bne.n	8016452 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8016450:	e7d5      	b.n	80163fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 8016452:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8016454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016456:	f003 0302 	and.w	r3, r3, #2
 801645a:	2b00      	cmp	r3, #0
 801645c:	d123      	bne.n	80164a6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 801645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016460:	f003 0301 	and.w	r3, r3, #1
 8016464:	2b00      	cmp	r3, #0
 8016466:	d01e      	beq.n	80164a6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8016468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801646a:	2b00      	cmp	r3, #0
 801646c:	d00b      	beq.n	8016486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 801646e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016472:	2b00      	cmp	r3, #0
 8016474:	d104      	bne.n	8016480 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 8016476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016478:	f003 030c 	and.w	r3, r3, #12
 801647c:	2b00      	cmp	r3, #0
 801647e:	d002      	beq.n	8016486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 8016480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016482:	3b01      	subs	r3, #1
 8016484:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8016486:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801648a:	429a      	cmp	r2, r3
 801648c:	d20b      	bcs.n	80164a6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 801648e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016490:	2b1f      	cmp	r3, #31
 8016492:	d808      	bhi.n	80164a6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 8016494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016496:	1c5a      	adds	r2, r3, #1
 8016498:	65fa      	str	r2, [r7, #92]	; 0x5c
 801649a:	3360      	adds	r3, #96	; 0x60
 801649c:	443b      	add	r3, r7
 801649e:	2230      	movs	r2, #48	; 0x30
 80164a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80164a4:	e7ef      	b.n	8016486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80164a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164a8:	2b1f      	cmp	r3, #31
 80164aa:	d827      	bhi.n	80164fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 80164ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d008      	beq.n	80164c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 80164b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164b6:	1c5a      	adds	r2, r3, #1
 80164b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80164ba:	3360      	adds	r3, #96	; 0x60
 80164bc:	443b      	add	r3, r7
 80164be:	222d      	movs	r2, #45	; 0x2d
 80164c0:	f803 2c48 	strb.w	r2, [r3, #-72]
 80164c4:	e01a      	b.n	80164fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 80164c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164c8:	f003 0304 	and.w	r3, r3, #4
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d008      	beq.n	80164e2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80164d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164d2:	1c5a      	adds	r2, r3, #1
 80164d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80164d6:	3360      	adds	r3, #96	; 0x60
 80164d8:	443b      	add	r3, r7
 80164da:	222b      	movs	r2, #43	; 0x2b
 80164dc:	f803 2c48 	strb.w	r2, [r3, #-72]
 80164e0:	e00c      	b.n	80164fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 80164e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164e4:	f003 0308 	and.w	r3, r3, #8
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d007      	beq.n	80164fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 80164ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164ee:	1c5a      	adds	r2, r3, #1
 80164f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80164f2:	3360      	adds	r3, #96	; 0x60
 80164f4:	443b      	add	r3, r7
 80164f6:	2220      	movs	r2, #32
 80164f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80164fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164fe:	9303      	str	r3, [sp, #12]
 8016500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016502:	9302      	str	r3, [sp, #8]
 8016504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016506:	9301      	str	r3, [sp, #4]
 8016508:	f107 0318 	add.w	r3, r7, #24
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	68fa      	ldr	r2, [r7, #12]
 8016512:	6939      	ldr	r1, [r7, #16]
 8016514:	6978      	ldr	r0, [r7, #20]
 8016516:	f7ff fba6 	bl	8015c66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 801651a:	4603      	mov	r3, r0
 801651c:	bf00      	nop
}
 801651e:	4618      	mov	r0, r3
 8016520:	3764      	adds	r7, #100	; 0x64
 8016522:	46bd      	mov	sp, r7
 8016524:	bd90      	pop	{r4, r7, pc}
 8016526:	bf00      	nop
 8016528:	cccccccd 	.word	0xcccccccd
 801652c:	66666667 	.word	0x66666667

08016530 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8016530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016534:	b09f      	sub	sp, #124	; 0x7c
 8016536:	af06      	add	r7, sp, #24
 8016538:	6278      	str	r0, [r7, #36]	; 0x24
 801653a:	6239      	str	r1, [r7, #32]
 801653c:	61fa      	str	r2, [r7, #28]
 801653e:	61bb      	str	r3, [r7, #24]
 8016540:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8016544:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016548:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801654c:	f7ea fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8016550:	4603      	mov	r3, r0
 8016552:	2b00      	cmp	r3, #0
 8016554:	d014      	beq.n	8016580 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8016556:	f04f 32ff 	mov.w	r2, #4294967295
 801655a:	4bc1      	ldr	r3, [pc, #772]	; (8016860 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 801655c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016560:	f7ea fada 	bl	8000b18 <__aeabi_dcmpgt>
 8016564:	4603      	mov	r3, r0
 8016566:	2b00      	cmp	r3, #0
 8016568:	d10a      	bne.n	8016580 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 801656a:	f04f 32ff 	mov.w	r2, #4294967295
 801656e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8016572:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016576:	f7ea fab1 	bl	8000adc <__aeabi_dcmplt>
 801657a:	4603      	mov	r3, r0
 801657c:	2b00      	cmp	r3, #0
 801657e:	d012      	beq.n	80165a6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8016580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016584:	9302      	str	r3, [sp, #8]
 8016586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801658a:	9301      	str	r3, [sp, #4]
 801658c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016590:	9300      	str	r3, [sp, #0]
 8016592:	ed97 0b04 	vldr	d0, [r7, #16]
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	69fa      	ldr	r2, [r7, #28]
 801659a:	6a39      	ldr	r1, [r7, #32]
 801659c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801659e:	f7ff fd63 	bl	8016068 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 80165a2:	4603      	mov	r3, r0
 80165a4:	e23f      	b.n	8016a26 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80165a6:	2301      	movs	r3, #1
 80165a8:	461e      	mov	r6, r3
 80165aa:	f04f 0200 	mov.w	r2, #0
 80165ae:	f04f 0300 	mov.w	r3, #0
 80165b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80165b6:	f7ea fa91 	bl	8000adc <__aeabi_dcmplt>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d101      	bne.n	80165c4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 80165c0:	2300      	movs	r3, #0
 80165c2:	461e      	mov	r6, r3
 80165c4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 80165c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d009      	beq.n	80165e4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 80165d0:	693b      	ldr	r3, [r7, #16]
 80165d2:	603b      	str	r3, [r7, #0]
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80165da:	607b      	str	r3, [r7, #4]
 80165dc:	ed97 7b00 	vldr	d7, [r7]
 80165e0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80165e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80165e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d102      	bne.n	80165f6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80165f0:	2306      	movs	r3, #6
 80165f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80165f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80165fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80165fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016602:	f04f 0200 	mov.w	r2, #0
 8016606:	f04f 0300 	mov.w	r3, #0
 801660a:	0d0a      	lsrs	r2, r1, #20
 801660c:	2300      	movs	r3, #0
 801660e:	4613      	mov	r3, r2
 8016610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016614:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016618:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 801661a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801661e:	4690      	mov	r8, r2
 8016620:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8016624:	4644      	mov	r4, r8
 8016626:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 801662a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801662e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8016632:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016634:	f7e9 ff76 	bl	8000524 <__aeabi_i2d>
 8016638:	a37d      	add	r3, pc, #500	; (adr r3, 8016830 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 801663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663e:	f7e9 ffdb 	bl	80005f8 <__aeabi_dmul>
 8016642:	4602      	mov	r2, r0
 8016644:	460b      	mov	r3, r1
 8016646:	4610      	mov	r0, r2
 8016648:	4619      	mov	r1, r3
 801664a:	a37b      	add	r3, pc, #492	; (adr r3, 8016838 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 801664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016650:	f7e9 fe1c 	bl	800028c <__adddf3>
 8016654:	4602      	mov	r2, r0
 8016656:	460b      	mov	r3, r1
 8016658:	4614      	mov	r4, r2
 801665a:	461d      	mov	r5, r3
 801665c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016660:	f04f 0200 	mov.w	r2, #0
 8016664:	4b7f      	ldr	r3, [pc, #508]	; (8016864 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 8016666:	f7e9 fe0f 	bl	8000288 <__aeabi_dsub>
 801666a:	4602      	mov	r2, r0
 801666c:	460b      	mov	r3, r1
 801666e:	4610      	mov	r0, r2
 8016670:	4619      	mov	r1, r3
 8016672:	a373      	add	r3, pc, #460	; (adr r3, 8016840 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 8016674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016678:	f7e9 ffbe 	bl	80005f8 <__aeabi_dmul>
 801667c:	4602      	mov	r2, r0
 801667e:	460b      	mov	r3, r1
 8016680:	4620      	mov	r0, r4
 8016682:	4629      	mov	r1, r5
 8016684:	f7e9 fe02 	bl	800028c <__adddf3>
 8016688:	4602      	mov	r2, r0
 801668a:	460b      	mov	r3, r1
 801668c:	4610      	mov	r0, r2
 801668e:	4619      	mov	r1, r3
 8016690:	f7ea fa62 	bl	8000b58 <__aeabi_d2iz>
 8016694:	4603      	mov	r3, r0
 8016696:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8016698:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801669a:	f7e9 ff43 	bl	8000524 <__aeabi_i2d>
 801669e:	a36a      	add	r3, pc, #424	; (adr r3, 8016848 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 80166a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a4:	f7e9 ffa8 	bl	80005f8 <__aeabi_dmul>
 80166a8:	4602      	mov	r2, r0
 80166aa:	460b      	mov	r3, r1
 80166ac:	4610      	mov	r0, r2
 80166ae:	4619      	mov	r1, r3
 80166b0:	f04f 0200 	mov.w	r2, #0
 80166b4:	4b6c      	ldr	r3, [pc, #432]	; (8016868 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 80166b6:	f7e9 fde9 	bl	800028c <__adddf3>
 80166ba:	4602      	mov	r2, r0
 80166bc:	460b      	mov	r3, r1
 80166be:	4610      	mov	r0, r2
 80166c0:	4619      	mov	r1, r3
 80166c2:	f7ea fa49 	bl	8000b58 <__aeabi_d2iz>
 80166c6:	4603      	mov	r3, r0
 80166c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80166ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80166cc:	f7e9 ff2a 	bl	8000524 <__aeabi_i2d>
 80166d0:	a35f      	add	r3, pc, #380	; (adr r3, 8016850 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 80166d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d6:	f7e9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80166da:	4602      	mov	r2, r0
 80166dc:	460b      	mov	r3, r1
 80166de:	4614      	mov	r4, r2
 80166e0:	461d      	mov	r5, r3
 80166e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80166e4:	f7e9 ff1e 	bl	8000524 <__aeabi_i2d>
 80166e8:	a35b      	add	r3, pc, #364	; (adr r3, 8016858 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 80166ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ee:	f7e9 ff83 	bl	80005f8 <__aeabi_dmul>
 80166f2:	4602      	mov	r2, r0
 80166f4:	460b      	mov	r3, r1
 80166f6:	4620      	mov	r0, r4
 80166f8:	4629      	mov	r1, r5
 80166fa:	f7e9 fdc5 	bl	8000288 <__aeabi_dsub>
 80166fe:	4602      	mov	r2, r0
 8016700:	460b      	mov	r3, r1
 8016702:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8016706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801670a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801670e:	f7e9 ff73 	bl	80005f8 <__aeabi_dmul>
 8016712:	4602      	mov	r2, r0
 8016714:	460b      	mov	r3, r1
 8016716:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 801671a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801671c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8016720:	17da      	asrs	r2, r3, #31
 8016722:	469a      	mov	sl, r3
 8016724:	4693      	mov	fp, r2
 8016726:	f04f 0200 	mov.w	r2, #0
 801672a:	f04f 0300 	mov.w	r3, #0
 801672e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8016732:	2200      	movs	r2, #0
 8016734:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8016738:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801673c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016740:	4602      	mov	r2, r0
 8016742:	460b      	mov	r3, r1
 8016744:	f7e9 fda2 	bl	800028c <__adddf3>
 8016748:	4602      	mov	r2, r0
 801674a:	460b      	mov	r3, r1
 801674c:	4690      	mov	r8, r2
 801674e:	4699      	mov	r9, r3
 8016750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016754:	f04f 0000 	mov.w	r0, #0
 8016758:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801675c:	f7e9 fd94 	bl	8000288 <__aeabi_dsub>
 8016760:	4602      	mov	r2, r0
 8016762:	460b      	mov	r3, r1
 8016764:	4692      	mov	sl, r2
 8016766:	469b      	mov	fp, r3
 8016768:	f04f 0200 	mov.w	r2, #0
 801676c:	4b3f      	ldr	r3, [pc, #252]	; (801686c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 801676e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016772:	f7ea f86b 	bl	800084c <__aeabi_ddiv>
 8016776:	4602      	mov	r2, r0
 8016778:	460b      	mov	r3, r1
 801677a:	4610      	mov	r0, r2
 801677c:	4619      	mov	r1, r3
 801677e:	f04f 0200 	mov.w	r2, #0
 8016782:	4b3b      	ldr	r3, [pc, #236]	; (8016870 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8016784:	f7e9 fd82 	bl	800028c <__adddf3>
 8016788:	4602      	mov	r2, r0
 801678a:	460b      	mov	r3, r1
 801678c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016790:	f7ea f85c 	bl	800084c <__aeabi_ddiv>
 8016794:	4602      	mov	r2, r0
 8016796:	460b      	mov	r3, r1
 8016798:	4610      	mov	r0, r2
 801679a:	4619      	mov	r1, r3
 801679c:	f04f 0200 	mov.w	r2, #0
 80167a0:	4b34      	ldr	r3, [pc, #208]	; (8016874 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 80167a2:	f7e9 fd73 	bl	800028c <__adddf3>
 80167a6:	4602      	mov	r2, r0
 80167a8:	460b      	mov	r3, r1
 80167aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80167ae:	f7ea f84d 	bl	800084c <__aeabi_ddiv>
 80167b2:	4602      	mov	r2, r0
 80167b4:	460b      	mov	r3, r1
 80167b6:	4650      	mov	r0, sl
 80167b8:	4659      	mov	r1, fp
 80167ba:	f7e9 fd67 	bl	800028c <__adddf3>
 80167be:	4602      	mov	r2, r0
 80167c0:	460b      	mov	r3, r1
 80167c2:	4640      	mov	r0, r8
 80167c4:	4649      	mov	r1, r9
 80167c6:	f7ea f841 	bl	800084c <__aeabi_ddiv>
 80167ca:	4602      	mov	r2, r0
 80167cc:	460b      	mov	r3, r1
 80167ce:	4610      	mov	r0, r2
 80167d0:	4619      	mov	r1, r3
 80167d2:	f04f 0200 	mov.w	r2, #0
 80167d6:	4b28      	ldr	r3, [pc, #160]	; (8016878 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 80167d8:	f7e9 fd58 	bl	800028c <__adddf3>
 80167dc:	4602      	mov	r2, r0
 80167de:	460b      	mov	r3, r1
 80167e0:	4620      	mov	r0, r4
 80167e2:	4629      	mov	r1, r5
 80167e4:	f7e9 ff08 	bl	80005f8 <__aeabi_dmul>
 80167e8:	4602      	mov	r2, r0
 80167ea:	460b      	mov	r3, r1
 80167ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80167f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80167f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80167f8:	f7ea f970 	bl	8000adc <__aeabi_dcmplt>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d00d      	beq.n	801681e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 8016802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016804:	3b01      	subs	r3, #1
 8016806:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8016808:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801680c:	f04f 0200 	mov.w	r2, #0
 8016810:	4b17      	ldr	r3, [pc, #92]	; (8016870 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8016812:	f7ea f81b 	bl	800084c <__aeabi_ddiv>
 8016816:	4602      	mov	r2, r0
 8016818:	460b      	mov	r3, r1
 801681a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 801681e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016820:	2b63      	cmp	r3, #99	; 0x63
 8016822:	dc2b      	bgt.n	801687c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8016824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016826:	f113 0f63 	cmn.w	r3, #99	; 0x63
 801682a:	db27      	blt.n	801687c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 801682c:	2304      	movs	r3, #4
 801682e:	e026      	b.n	801687e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 8016830:	509f79fb 	.word	0x509f79fb
 8016834:	3fd34413 	.word	0x3fd34413
 8016838:	8b60c8b3 	.word	0x8b60c8b3
 801683c:	3fc68a28 	.word	0x3fc68a28
 8016840:	636f4361 	.word	0x636f4361
 8016844:	3fd287a7 	.word	0x3fd287a7
 8016848:	0979a371 	.word	0x0979a371
 801684c:	400a934f 	.word	0x400a934f
 8016850:	bbb55516 	.word	0xbbb55516
 8016854:	40026bb1 	.word	0x40026bb1
 8016858:	fefa39ef 	.word	0xfefa39ef
 801685c:	3fe62e42 	.word	0x3fe62e42
 8016860:	7fefffff 	.word	0x7fefffff
 8016864:	3ff80000 	.word	0x3ff80000
 8016868:	3fe00000 	.word	0x3fe00000
 801686c:	402c0000 	.word	0x402c0000
 8016870:	40240000 	.word	0x40240000
 8016874:	40180000 	.word	0x40180000
 8016878:	3ff00000 	.word	0x3ff00000
 801687c:	2305      	movs	r3, #5
 801687e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8016880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016888:	2b00      	cmp	r3, #0
 801688a:	d03d      	beq.n	8016908 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 801688c:	a368      	add	r3, pc, #416	; (adr r3, 8016a30 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 801688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016892:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016896:	f7ea f935 	bl	8000b04 <__aeabi_dcmpge>
 801689a:	4603      	mov	r3, r0
 801689c:	2b00      	cmp	r3, #0
 801689e:	d024      	beq.n	80168ea <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 80168a0:	a365      	add	r3, pc, #404	; (adr r3, 8016a38 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 80168a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80168aa:	f7ea f917 	bl	8000adc <__aeabi_dcmplt>
 80168ae:	4603      	mov	r3, r0
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d01a      	beq.n	80168ea <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 80168b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80168ba:	429a      	cmp	r2, r3
 80168bc:	da07      	bge.n	80168ce <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80168be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80168c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168c4:	1ad3      	subs	r3, r2, r3
 80168c6:	3b01      	subs	r3, #1
 80168c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80168cc:	e002      	b.n	80168d4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 80168ce:	2300      	movs	r3, #0
 80168d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80168d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80168d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80168dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80168e0:	2300      	movs	r3, #0
 80168e2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80168e4:	2300      	movs	r3, #0
 80168e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80168e8:	e00e      	b.n	8016908 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80168ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d00a      	beq.n	8016908 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 80168f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80168f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d004      	beq.n	8016908 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 80168fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016902:	3b01      	subs	r3, #1
 8016904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8016908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801690c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 801690e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016914:	429a      	cmp	r2, r3
 8016916:	d904      	bls.n	8016922 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8016918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801691a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801691c:	1ad3      	subs	r3, r2, r3
 801691e:	657b      	str	r3, [r7, #84]	; 0x54
 8016920:	e001      	b.n	8016926 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8016922:	2300      	movs	r3, #0
 8016924:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8016926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801692a:	f003 0302 	and.w	r3, r3, #2
 801692e:	2b00      	cmp	r3, #0
 8016930:	d004      	beq.n	801693c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 8016932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8016938:	2300      	movs	r3, #0
 801693a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 801693c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801693e:	2b00      	cmp	r3, #0
 8016940:	d009      	beq.n	8016956 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 8016942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016946:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801694a:	f7e9 ff7f 	bl	800084c <__aeabi_ddiv>
 801694e:	4602      	mov	r2, r0
 8016950:	460b      	mov	r3, r1
 8016952:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 801695a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801695e:	2b00      	cmp	r3, #0
 8016960:	d006      	beq.n	8016970 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 8016962:	693b      	ldr	r3, [r7, #16]
 8016964:	60bb      	str	r3, [r7, #8]
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801696c:	60fb      	str	r3, [r7, #12]
 801696e:	e003      	b.n	8016978 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 8016970:	ed97 7b04 	vldr	d7, [r7, #16]
 8016974:	ed87 7b02 	vstr	d7, [r7, #8]
 8016978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801697c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016980:	9302      	str	r3, [sp, #8]
 8016982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016984:	9301      	str	r3, [sp, #4]
 8016986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	ed97 0b02 	vldr	d0, [r7, #8]
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	69fa      	ldr	r2, [r7, #28]
 8016994:	6a39      	ldr	r1, [r7, #32]
 8016996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016998:	f7ff fb66 	bl	8016068 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 801699c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 801699e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d03f      	beq.n	8016a24 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80169a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80169a8:	f003 0320 	and.w	r3, r3, #32
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d001      	beq.n	80169b4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 80169b0:	2045      	movs	r0, #69	; 0x45
 80169b2:	e000      	b.n	80169b6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 80169b4:	2065      	movs	r0, #101	; 0x65
 80169b6:	69fa      	ldr	r2, [r7, #28]
 80169b8:	1c53      	adds	r3, r2, #1
 80169ba:	61fb      	str	r3, [r7, #28]
 80169bc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80169be:	69bb      	ldr	r3, [r7, #24]
 80169c0:	6a39      	ldr	r1, [r7, #32]
 80169c2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80169c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	bfb8      	it	lt
 80169ca:	425b      	neglt	r3, r3
 80169cc:	4618      	mov	r0, r3
 80169ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169d0:	0fdb      	lsrs	r3, r3, #31
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80169d6:	3a01      	subs	r2, #1
 80169d8:	2105      	movs	r1, #5
 80169da:	9105      	str	r1, [sp, #20]
 80169dc:	9204      	str	r2, [sp, #16]
 80169de:	2200      	movs	r2, #0
 80169e0:	9203      	str	r2, [sp, #12]
 80169e2:	220a      	movs	r2, #10
 80169e4:	9202      	str	r2, [sp, #8]
 80169e6:	9301      	str	r3, [sp, #4]
 80169e8:	9000      	str	r0, [sp, #0]
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	69fa      	ldr	r2, [r7, #28]
 80169ee:	6a39      	ldr	r1, [r7, #32]
 80169f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169f2:	f7ff fa64 	bl	8015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80169f6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80169f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80169fc:	f003 0302 	and.w	r3, r3, #2
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d00f      	beq.n	8016a24 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8016a04:	69fa      	ldr	r2, [r7, #28]
 8016a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a08:	1ad3      	subs	r3, r2, r3
 8016a0a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d908      	bls.n	8016a24 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 8016a12:	69fa      	ldr	r2, [r7, #28]
 8016a14:	1c53      	adds	r3, r2, #1
 8016a16:	61fb      	str	r3, [r7, #28]
 8016a18:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016a1a:	69bb      	ldr	r3, [r7, #24]
 8016a1c:	6a39      	ldr	r1, [r7, #32]
 8016a1e:	2020      	movs	r0, #32
 8016a20:	47a0      	blx	r4
 8016a22:	e7ef      	b.n	8016a04 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 8016a24:	69fb      	ldr	r3, [r7, #28]
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3764      	adds	r7, #100	; 0x64
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a30:	eb1c432d 	.word	0xeb1c432d
 8016a34:	3f1a36e2 	.word	0x3f1a36e2
 8016a38:	00000000 	.word	0x00000000
 8016a3c:	412e8480 	.word	0x412e8480

08016a40 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8016a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a44:	b0a1      	sub	sp, #132	; 0x84
 8016a46:	af0a      	add	r7, sp, #40	; 0x28
 8016a48:	60f8      	str	r0, [r7, #12]
 8016a4a:	60b9      	str	r1, [r7, #8]
 8016a4c:	607a      	str	r2, [r7, #4]
 8016a4e:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8016a50:	2300      	movs	r3, #0
 8016a52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d101      	bne.n	8016a5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 8016a5a:	4ba5      	ldr	r3, [pc, #660]	; (8016cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 8016a5c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	781b      	ldrb	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	f000 84ae 	beq.w	80173c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	781b      	ldrb	r3, [r3, #0]
 8016a6c:	2b25      	cmp	r3, #37	; 0x25
 8016a6e:	d00d      	beq.n	8016a8c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	7818      	ldrb	r0, [r3, #0]
 8016a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a76:	1c53      	adds	r3, r2, #1
 8016a78:	647b      	str	r3, [r7, #68]	; 0x44
 8016a7a:	68fe      	ldr	r6, [r7, #12]
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	68b9      	ldr	r1, [r7, #8]
 8016a80:	47b0      	blx	r6
      format++;
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	3301      	adds	r3, #1
 8016a86:	603b      	str	r3, [r7, #0]
      continue;
 8016a88:	f000 bc9a 	b.w	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	3301      	adds	r3, #1
 8016a90:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8016a92:	2300      	movs	r3, #0
 8016a94:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	3b20      	subs	r3, #32
 8016a9c:	2b10      	cmp	r3, #16
 8016a9e:	d857      	bhi.n	8016b50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 8016aa0:	a201      	add	r2, pc, #4	; (adr r2, 8016aa8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 8016aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aa6:	bf00      	nop
 8016aa8:	08016b29 	.word	0x08016b29
 8016aac:	08016b51 	.word	0x08016b51
 8016ab0:	08016b51 	.word	0x08016b51
 8016ab4:	08016b3d 	.word	0x08016b3d
 8016ab8:	08016b51 	.word	0x08016b51
 8016abc:	08016b51 	.word	0x08016b51
 8016ac0:	08016b51 	.word	0x08016b51
 8016ac4:	08016b51 	.word	0x08016b51
 8016ac8:	08016b51 	.word	0x08016b51
 8016acc:	08016b51 	.word	0x08016b51
 8016ad0:	08016b51 	.word	0x08016b51
 8016ad4:	08016b15 	.word	0x08016b15
 8016ad8:	08016b51 	.word	0x08016b51
 8016adc:	08016b01 	.word	0x08016b01
 8016ae0:	08016b51 	.word	0x08016b51
 8016ae4:	08016b51 	.word	0x08016b51
 8016ae8:	08016aed 	.word	0x08016aed
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8016aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016aee:	f043 0301 	orr.w	r3, r3, #1
 8016af2:	657b      	str	r3, [r7, #84]	; 0x54
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	3301      	adds	r3, #1
 8016af8:	603b      	str	r3, [r7, #0]
 8016afa:	2301      	movs	r3, #1
 8016afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8016afe:	e02a      	b.n	8016b56 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8016b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b02:	f043 0302 	orr.w	r3, r3, #2
 8016b06:	657b      	str	r3, [r7, #84]	; 0x54
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	603b      	str	r3, [r7, #0]
 8016b0e:	2301      	movs	r3, #1
 8016b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b12:	e020      	b.n	8016b56 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8016b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b16:	f043 0304 	orr.w	r3, r3, #4
 8016b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	3301      	adds	r3, #1
 8016b20:	603b      	str	r3, [r7, #0]
 8016b22:	2301      	movs	r3, #1
 8016b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b26:	e016      	b.n	8016b56 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8016b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b2a:	f043 0308 	orr.w	r3, r3, #8
 8016b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	3301      	adds	r3, #1
 8016b34:	603b      	str	r3, [r7, #0]
 8016b36:	2301      	movs	r3, #1
 8016b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b3a:	e00c      	b.n	8016b56 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8016b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b3e:	f043 0310 	orr.w	r3, r3, #16
 8016b42:	657b      	str	r3, [r7, #84]	; 0x54
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	3301      	adds	r3, #1
 8016b48:	603b      	str	r3, [r7, #0]
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b4e:	e002      	b.n	8016b56 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 8016b50:	2300      	movs	r3, #0
 8016b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b54:	bf00      	nop
      }
    } while (n);
 8016b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d000      	beq.n	8016b5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 8016b5c:	e79b      	b.n	8016a96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7ff f845 	bl	8015bf6 <_ZL9_is_digitc>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d005      	beq.n	8016b7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 8016b72:	463b      	mov	r3, r7
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7ff f852 	bl	8015c1e <_ZL5_atoiPPKc>
 8016b7a:	6538      	str	r0, [r7, #80]	; 0x50
 8016b7c:	e01a      	b.n	8016bb4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	781b      	ldrb	r3, [r3, #0]
 8016b82:	2b2a      	cmp	r3, #42	; 0x2a
 8016b84:	d116      	bne.n	8016bb4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 8016b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b8a:	1d1a      	adds	r2, r3, #4
 8016b8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8016b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	da07      	bge.n	8016baa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 8016b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b9c:	f043 0302 	orr.w	r3, r3, #2
 8016ba0:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8016ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba4:	425b      	negs	r3, r3
 8016ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8016ba8:	e001      	b.n	8016bae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 8016baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bac:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8016bbe:	d126      	bne.n	8016c0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 8016bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016bc6:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	3301      	adds	r3, #1
 8016bcc:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7ff f80f 	bl	8015bf6 <_ZL9_is_digitc>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d005      	beq.n	8016bea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 8016bde:	463b      	mov	r3, r7
 8016be0:	4618      	mov	r0, r3
 8016be2:	f7ff f81c 	bl	8015c1e <_ZL5_atoiPPKc>
 8016be6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016be8:	e011      	b.n	8016c0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	781b      	ldrb	r3, [r3, #0]
 8016bee:	2b2a      	cmp	r3, #42	; 0x2a
 8016bf0:	d10d      	bne.n	8016c0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 8016bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bf6:	1d1a      	adds	r2, r3, #4
 8016bf8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8016c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c06:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	3b68      	subs	r3, #104	; 0x68
 8016c14:	2b12      	cmp	r3, #18
 8016c16:	d867      	bhi.n	8016ce8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 8016c18:	a201      	add	r2, pc, #4	; (adr r2, 8016c20 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 8016c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c1e:	bf00      	nop
 8016c20:	08016c93 	.word	0x08016c93
 8016c24:	08016ce9 	.word	0x08016ce9
 8016c28:	08016cc9 	.word	0x08016cc9
 8016c2c:	08016ce9 	.word	0x08016ce9
 8016c30:	08016c6d 	.word	0x08016c6d
 8016c34:	08016ce9 	.word	0x08016ce9
 8016c38:	08016ce9 	.word	0x08016ce9
 8016c3c:	08016ce9 	.word	0x08016ce9
 8016c40:	08016ce9 	.word	0x08016ce9
 8016c44:	08016ce9 	.word	0x08016ce9
 8016c48:	08016ce9 	.word	0x08016ce9
 8016c4c:	08016ce9 	.word	0x08016ce9
 8016c50:	08016cb9 	.word	0x08016cb9
 8016c54:	08016ce9 	.word	0x08016ce9
 8016c58:	08016ce9 	.word	0x08016ce9
 8016c5c:	08016ce9 	.word	0x08016ce9
 8016c60:	08016ce9 	.word	0x08016ce9
 8016c64:	08016ce9 	.word	0x08016ce9
 8016c68:	08016cd9 	.word	0x08016cd9
      case 'l' :
        flags |= FLAGS_LONG;
 8016c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016c72:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	3301      	adds	r3, #1
 8016c78:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	2b6c      	cmp	r3, #108	; 0x6c
 8016c80:	d134      	bne.n	8016cec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 8016c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016c88:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	603b      	str	r3, [r7, #0]
        }
        break;
 8016c90:	e02c      	b.n	8016cec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 8016c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c98:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	2b68      	cmp	r3, #104	; 0x68
 8016ca6:	d125      	bne.n	8016cf4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 8016ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cae:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	603b      	str	r3, [r7, #0]
        }
        break;
 8016cb6:	e01d      	b.n	8016cf4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016cbe:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	603b      	str	r3, [r7, #0]
        break;
 8016cc6:	e016      	b.n	8016cf6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016cce:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	603b      	str	r3, [r7, #0]
        break;
 8016cd6:	e00e      	b.n	8016cf6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016cde:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016ce0:	683b      	ldr	r3, [r7, #0]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	603b      	str	r3, [r7, #0]
        break;
 8016ce6:	e006      	b.n	8016cf6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 8016ce8:	bf00      	nop
 8016cea:	e004      	b.n	8016cf6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 8016cec:	bf00      	nop
 8016cee:	e002      	b.n	8016cf6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 8016cf0:	08015b71 	.word	0x08015b71
        break;
 8016cf4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	3b25      	subs	r3, #37	; 0x25
 8016cfc:	2b53      	cmp	r3, #83	; 0x53
 8016cfe:	f200 8352 	bhi.w	80173a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 8016d02:	a201      	add	r2, pc, #4	; (adr r2, 8016d08 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 8016d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d08:	0801738f 	.word	0x0801738f
 8016d0c:	080173a7 	.word	0x080173a7
 8016d10:	080173a7 	.word	0x080173a7
 8016d14:	080173a7 	.word	0x080173a7
 8016d18:	080173a7 	.word	0x080173a7
 8016d1c:	080173a7 	.word	0x080173a7
 8016d20:	080173a7 	.word	0x080173a7
 8016d24:	080173a7 	.word	0x080173a7
 8016d28:	080173a7 	.word	0x080173a7
 8016d2c:	080173a7 	.word	0x080173a7
 8016d30:	080173a7 	.word	0x080173a7
 8016d34:	080173a7 	.word	0x080173a7
 8016d38:	080173a7 	.word	0x080173a7
 8016d3c:	080173a7 	.word	0x080173a7
 8016d40:	080173a7 	.word	0x080173a7
 8016d44:	080173a7 	.word	0x080173a7
 8016d48:	080173a7 	.word	0x080173a7
 8016d4c:	080173a7 	.word	0x080173a7
 8016d50:	080173a7 	.word	0x080173a7
 8016d54:	080173a7 	.word	0x080173a7
 8016d58:	080173a7 	.word	0x080173a7
 8016d5c:	080173a7 	.word	0x080173a7
 8016d60:	080173a7 	.word	0x080173a7
 8016d64:	080173a7 	.word	0x080173a7
 8016d68:	080173a7 	.word	0x080173a7
 8016d6c:	080173a7 	.word	0x080173a7
 8016d70:	080173a7 	.word	0x080173a7
 8016d74:	080173a7 	.word	0x080173a7
 8016d78:	080173a7 	.word	0x080173a7
 8016d7c:	080173a7 	.word	0x080173a7
 8016d80:	080173a7 	.word	0x080173a7
 8016d84:	080173a7 	.word	0x080173a7
 8016d88:	0801715d 	.word	0x0801715d
 8016d8c:	0801710d 	.word	0x0801710d
 8016d90:	0801715d 	.word	0x0801715d
 8016d94:	080173a7 	.word	0x080173a7
 8016d98:	080173a7 	.word	0x080173a7
 8016d9c:	080173a7 	.word	0x080173a7
 8016da0:	080173a7 	.word	0x080173a7
 8016da4:	080173a7 	.word	0x080173a7
 8016da8:	080173a7 	.word	0x080173a7
 8016dac:	080173a7 	.word	0x080173a7
 8016db0:	080173a7 	.word	0x080173a7
 8016db4:	080173a7 	.word	0x080173a7
 8016db8:	080173a7 	.word	0x080173a7
 8016dbc:	080173a7 	.word	0x080173a7
 8016dc0:	080173a7 	.word	0x080173a7
 8016dc4:	080173a7 	.word	0x080173a7
 8016dc8:	080173a7 	.word	0x080173a7
 8016dcc:	080173a7 	.word	0x080173a7
 8016dd0:	080173a7 	.word	0x080173a7
 8016dd4:	08016e59 	.word	0x08016e59
 8016dd8:	080173a7 	.word	0x080173a7
 8016ddc:	080173a7 	.word	0x080173a7
 8016de0:	080173a7 	.word	0x080173a7
 8016de4:	080173a7 	.word	0x080173a7
 8016de8:	080173a7 	.word	0x080173a7
 8016dec:	080173a7 	.word	0x080173a7
 8016df0:	080173a7 	.word	0x080173a7
 8016df4:	080173a7 	.word	0x080173a7
 8016df8:	080173a7 	.word	0x080173a7
 8016dfc:	08016e59 	.word	0x08016e59
 8016e00:	080171cd 	.word	0x080171cd
 8016e04:	08016e59 	.word	0x08016e59
 8016e08:	0801715d 	.word	0x0801715d
 8016e0c:	0801710d 	.word	0x0801710d
 8016e10:	0801715d 	.word	0x0801715d
 8016e14:	080173a7 	.word	0x080173a7
 8016e18:	08016e59 	.word	0x08016e59
 8016e1c:	080173a7 	.word	0x080173a7
 8016e20:	080173a7 	.word	0x080173a7
 8016e24:	080173a7 	.word	0x080173a7
 8016e28:	080173a7 	.word	0x080173a7
 8016e2c:	080173a7 	.word	0x080173a7
 8016e30:	08016e59 	.word	0x08016e59
 8016e34:	08017343 	.word	0x08017343
 8016e38:	080173a7 	.word	0x080173a7
 8016e3c:	080173a7 	.word	0x080173a7
 8016e40:	08017259 	.word	0x08017259
 8016e44:	080173a7 	.word	0x080173a7
 8016e48:	08016e59 	.word	0x08016e59
 8016e4c:	080173a7 	.word	0x080173a7
 8016e50:	080173a7 	.word	0x080173a7
 8016e54:	08016e59 	.word	0x08016e59
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	781b      	ldrb	r3, [r3, #0]
 8016e5c:	2b78      	cmp	r3, #120	; 0x78
 8016e5e:	d003      	beq.n	8016e68 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	2b58      	cmp	r3, #88	; 0x58
 8016e66:	d102      	bne.n	8016e6e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 8016e68:	2310      	movs	r3, #16
 8016e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8016e6c:	e013      	b.n	8016e96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	781b      	ldrb	r3, [r3, #0]
 8016e72:	2b6f      	cmp	r3, #111	; 0x6f
 8016e74:	d102      	bne.n	8016e7c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 8016e76:	2308      	movs	r3, #8
 8016e78:	643b      	str	r3, [r7, #64]	; 0x40
 8016e7a:	e00c      	b.n	8016e96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	781b      	ldrb	r3, [r3, #0]
 8016e80:	2b62      	cmp	r3, #98	; 0x62
 8016e82:	d102      	bne.n	8016e8a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 8016e84:	2302      	movs	r3, #2
 8016e86:	643b      	str	r3, [r7, #64]	; 0x40
 8016e88:	e005      	b.n	8016e96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 8016e8a:	230a      	movs	r3, #10
 8016e8c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8016e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e90:	f023 0310 	bic.w	r3, r3, #16
 8016e94:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8016e96:	683b      	ldr	r3, [r7, #0]
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	2b58      	cmp	r3, #88	; 0x58
 8016e9c:	d103      	bne.n	8016ea6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 8016e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ea0:	f043 0320 	orr.w	r3, r3, #32
 8016ea4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	781b      	ldrb	r3, [r3, #0]
 8016eaa:	2b69      	cmp	r3, #105	; 0x69
 8016eac:	d007      	beq.n	8016ebe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	2b64      	cmp	r3, #100	; 0x64
 8016eb4:	d003      	beq.n	8016ebe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8016eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eb8:	f023 030c 	bic.w	r3, r3, #12
 8016ebc:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8016ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d003      	beq.n	8016ed0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 8016ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eca:	f023 0301 	bic.w	r3, r3, #1
 8016ece:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	2b69      	cmp	r3, #105	; 0x69
 8016ed6:	d004      	beq.n	8016ee2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b64      	cmp	r3, #100	; 0x64
 8016ede:	f040 8097 	bne.w	8017010 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8016ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d030      	beq.n	8016f4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8016eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ef0:	3307      	adds	r3, #7
 8016ef2:	f023 0307 	bic.w	r3, r3, #7
 8016ef6:	f103 0208 	add.w	r2, r3, #8
 8016efa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f02:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	da05      	bge.n	8016f1a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 8016f0e:	2100      	movs	r1, #0
 8016f10:	4254      	negs	r4, r2
 8016f12:	eb61 0503 	sbc.w	r5, r1, r3
 8016f16:	4622      	mov	r2, r4
 8016f18:	462b      	mov	r3, r5
 8016f1a:	6979      	ldr	r1, [r7, #20]
 8016f1c:	0fc9      	lsrs	r1, r1, #31
 8016f1e:	b2c9      	uxtb	r1, r1
 8016f20:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016f22:	2600      	movs	r6, #0
 8016f24:	4680      	mov	r8, r0
 8016f26:	46b1      	mov	r9, r6
 8016f28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016f2a:	9008      	str	r0, [sp, #32]
 8016f2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016f2e:	9007      	str	r0, [sp, #28]
 8016f30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016f32:	9006      	str	r0, [sp, #24]
 8016f34:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8016f38:	9102      	str	r1, [sp, #8]
 8016f3a:	e9cd 2300 	strd	r2, r3, [sp]
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f42:	68b9      	ldr	r1, [r7, #8]
 8016f44:	68f8      	ldr	r0, [r7, #12]
 8016f46:	f7ff f821 	bl	8015f8c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8016f4a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 8016f4c:	e0da      	b.n	8017104 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 8016f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d020      	beq.n	8016f9a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 8016f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016f5c:	1d1a      	adds	r2, r3, #4
 8016f5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016f66:	69fb      	ldr	r3, [r7, #28]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	bfb8      	it	lt
 8016f6c:	425b      	neglt	r3, r3
 8016f6e:	4619      	mov	r1, r3
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	0fdb      	lsrs	r3, r3, #31
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016f78:	9205      	str	r2, [sp, #20]
 8016f7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f7c:	9204      	str	r2, [sp, #16]
 8016f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f80:	9203      	str	r2, [sp, #12]
 8016f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016f84:	9202      	str	r2, [sp, #8]
 8016f86:	9301      	str	r3, [sp, #4]
 8016f88:	9100      	str	r1, [sp, #0]
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f8e:	68b9      	ldr	r1, [r7, #8]
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	f7fe ff94 	bl	8015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016f96:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8016f98:	e0b4      	b.n	8017104 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8016f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d007      	beq.n	8016fb4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 8016fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016fa8:	1d1a      	adds	r2, r3, #4
 8016faa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	e012      	b.n	8016fda <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8016fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d007      	beq.n	8016fce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 8016fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016fc2:	1d1a      	adds	r2, r3, #4
 8016fc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	b21b      	sxth	r3, r3
 8016fcc:	e005      	b.n	8016fda <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8016fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016fd2:	1d1a      	adds	r2, r3, #4
 8016fd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016fdc:	6a3b      	ldr	r3, [r7, #32]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	bfb8      	it	lt
 8016fe2:	425b      	neglt	r3, r3
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	6a3b      	ldr	r3, [r7, #32]
 8016fe8:	0fdb      	lsrs	r3, r3, #31
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016fee:	9205      	str	r2, [sp, #20]
 8016ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016ff2:	9204      	str	r2, [sp, #16]
 8016ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ff6:	9203      	str	r2, [sp, #12]
 8016ff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016ffa:	9202      	str	r2, [sp, #8]
 8016ffc:	9301      	str	r3, [sp, #4]
 8016ffe:	9100      	str	r1, [sp, #0]
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017004:	68b9      	ldr	r1, [r7, #8]
 8017006:	68f8      	ldr	r0, [r7, #12]
 8017008:	f7fe ff59 	bl	8015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801700c:	6478      	str	r0, [r7, #68]	; 0x44
          }
 801700e:	e079      	b.n	8017104 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8017010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017016:	2b00      	cmp	r3, #0
 8017018:	d022      	beq.n	8017060 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 801701a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801701e:	3307      	adds	r3, #7
 8017020:	f023 0307 	bic.w	r3, r3, #7
 8017024:	f103 0208 	add.w	r2, r3, #8
 8017028:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017030:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017032:	2000      	movs	r0, #0
 8017034:	468a      	mov	sl, r1
 8017036:	4683      	mov	fp, r0
 8017038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801703a:	9108      	str	r1, [sp, #32]
 801703c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801703e:	9107      	str	r1, [sp, #28]
 8017040:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017042:	9106      	str	r1, [sp, #24]
 8017044:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8017048:	2100      	movs	r1, #0
 801704a:	9102      	str	r1, [sp, #8]
 801704c:	e9cd 2300 	strd	r2, r3, [sp]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017054:	68b9      	ldr	r1, [r7, #8]
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f7fe ff98 	bl	8015f8c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 801705c:	6478      	str	r0, [r7, #68]	; 0x44
 801705e:	e051      	b.n	8017104 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8017060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017066:	2b00      	cmp	r3, #0
 8017068:	d018      	beq.n	801709c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 801706a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801706e:	1d1a      	adds	r2, r3, #4
 8017070:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017078:	9205      	str	r2, [sp, #20]
 801707a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801707c:	9204      	str	r2, [sp, #16]
 801707e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017080:	9203      	str	r2, [sp, #12]
 8017082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017084:	9202      	str	r2, [sp, #8]
 8017086:	2200      	movs	r2, #0
 8017088:	9201      	str	r2, [sp, #4]
 801708a:	9300      	str	r3, [sp, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017090:	68b9      	ldr	r1, [r7, #8]
 8017092:	68f8      	ldr	r0, [r7, #12]
 8017094:	f7fe ff13 	bl	8015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8017098:	6478      	str	r0, [r7, #68]	; 0x44
 801709a:	e033      	b.n	8017104 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801709c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d007      	beq.n	80170b6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 80170a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80170aa:	1d1a      	adds	r2, r3, #4
 80170ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	e012      	b.n	80170dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 80170b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d007      	beq.n	80170d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 80170c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80170c4:	1d1a      	adds	r2, r3, #4
 80170c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	e005      	b.n	80170dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 80170d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80170d4:	1d1a      	adds	r2, r3, #4
 80170d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80170de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170e0:	9305      	str	r3, [sp, #20]
 80170e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170e4:	9304      	str	r3, [sp, #16]
 80170e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170e8:	9303      	str	r3, [sp, #12]
 80170ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170ec:	9302      	str	r3, [sp, #8]
 80170ee:	2300      	movs	r3, #0
 80170f0:	9301      	str	r3, [sp, #4]
 80170f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f4:	9300      	str	r3, [sp, #0]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170fa:	68b9      	ldr	r1, [r7, #8]
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f7fe fede 	bl	8015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8017102:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	3301      	adds	r3, #1
 8017108:	603b      	str	r3, [r7, #0]
        break;
 801710a:	e159      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	2b46      	cmp	r3, #70	; 0x46
 8017112:	d103      	bne.n	801711c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 8017114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017116:	f043 0320 	orr.w	r3, r3, #32
 801711a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 801711c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017120:	3307      	adds	r3, #7
 8017122:	f023 0307 	bic.w	r3, r3, #7
 8017126:	f103 0208 	add.w	r2, r3, #8
 801712a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801712e:	ed93 7b00 	vldr	d7, [r3]
 8017132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017134:	9302      	str	r3, [sp, #8]
 8017136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801713c:	9300      	str	r3, [sp, #0]
 801713e:	eeb0 0a47 	vmov.f32	s0, s14
 8017142:	eef0 0a67 	vmov.f32	s1, s15
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801714a:	68b9      	ldr	r1, [r7, #8]
 801714c:	68f8      	ldr	r0, [r7, #12]
 801714e:	f7fe ff8b 	bl	8016068 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8017152:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	3301      	adds	r3, #1
 8017158:	603b      	str	r3, [r7, #0]
        break;
 801715a:	e131      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	2b67      	cmp	r3, #103	; 0x67
 8017162:	d003      	beq.n	801716c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	2b47      	cmp	r3, #71	; 0x47
 801716a:	d103      	bne.n	8017174 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 801716c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801716e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017172:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	2b45      	cmp	r3, #69	; 0x45
 801717a:	d003      	beq.n	8017184 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	2b47      	cmp	r3, #71	; 0x47
 8017182:	d103      	bne.n	801718c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 8017184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017186:	f043 0320 	orr.w	r3, r3, #32
 801718a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 801718c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017190:	3307      	adds	r3, #7
 8017192:	f023 0307 	bic.w	r3, r3, #7
 8017196:	f103 0208 	add.w	r2, r3, #8
 801719a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801719e:	ed93 7b00 	vldr	d7, [r3]
 80171a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171a4:	9302      	str	r3, [sp, #8]
 80171a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171a8:	9301      	str	r3, [sp, #4]
 80171aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171ac:	9300      	str	r3, [sp, #0]
 80171ae:	eeb0 0a47 	vmov.f32	s0, s14
 80171b2:	eef0 0a67 	vmov.f32	s1, s15
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171ba:	68b9      	ldr	r1, [r7, #8]
 80171bc:	68f8      	ldr	r0, [r7, #12]
 80171be:	f7ff f9b7 	bl	8016530 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 80171c2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80171c4:	683b      	ldr	r3, [r7, #0]
 80171c6:	3301      	adds	r3, #1
 80171c8:	603b      	str	r3, [r7, #0]
        break;
 80171ca:	e0f9      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80171cc:	2301      	movs	r3, #1
 80171ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80171d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171d2:	f003 0302 	and.w	r3, r3, #2
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d113      	bne.n	8017202 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 80171da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171dc:	1c5a      	adds	r2, r3, #1
 80171de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80171e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80171e2:	429a      	cmp	r2, r3
 80171e4:	bf8c      	ite	hi
 80171e6:	2301      	movhi	r3, #1
 80171e8:	2300      	movls	r3, #0
 80171ea:	b2db      	uxtb	r3, r3
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d008      	beq.n	8017202 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 80171f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171f2:	1c53      	adds	r3, r2, #1
 80171f4:	647b      	str	r3, [r7, #68]	; 0x44
 80171f6:	68fe      	ldr	r6, [r7, #12]
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	68b9      	ldr	r1, [r7, #8]
 80171fc:	2020      	movs	r0, #32
 80171fe:	47b0      	blx	r6
          while (l++ < width) {
 8017200:	e7eb      	b.n	80171da <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8017202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017206:	1d1a      	adds	r2, r3, #4
 8017208:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	b2d8      	uxtb	r0, r3
 8017210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017212:	1c53      	adds	r3, r2, #1
 8017214:	647b      	str	r3, [r7, #68]	; 0x44
 8017216:	68fe      	ldr	r6, [r7, #12]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	68b9      	ldr	r1, [r7, #8]
 801721c:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 801721e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017220:	f003 0302 	and.w	r3, r3, #2
 8017224:	2b00      	cmp	r3, #0
 8017226:	d013      	beq.n	8017250 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8017228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801722a:	1c5a      	adds	r2, r3, #1
 801722c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801722e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017230:	429a      	cmp	r2, r3
 8017232:	bf8c      	ite	hi
 8017234:	2301      	movhi	r3, #1
 8017236:	2300      	movls	r3, #0
 8017238:	b2db      	uxtb	r3, r3
 801723a:	2b00      	cmp	r3, #0
 801723c:	d008      	beq.n	8017250 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 801723e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017240:	1c53      	adds	r3, r2, #1
 8017242:	647b      	str	r3, [r7, #68]	; 0x44
 8017244:	68fe      	ldr	r6, [r7, #12]
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	68b9      	ldr	r1, [r7, #8]
 801724a:	2020      	movs	r0, #32
 801724c:	47b0      	blx	r6
          while (l++ < width) {
 801724e:	e7eb      	b.n	8017228 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	3301      	adds	r3, #1
 8017254:	603b      	str	r3, [r7, #0]
        break;
 8017256:	e0b3      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8017258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801725c:	1d1a      	adds	r2, r3, #4
 801725e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8017266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017268:	2b00      	cmp	r3, #0
 801726a:	d001      	beq.n	8017270 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 801726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801726e:	e001      	b.n	8017274 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8017270:	f04f 33ff 	mov.w	r3, #4294967295
 8017274:	4619      	mov	r1, r3
 8017276:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017278:	f7fe fc9b 	bl	8015bb2 <_ZL10_strnlen_sPKcj>
 801727c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 801727e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017284:	2b00      	cmp	r3, #0
 8017286:	d007      	beq.n	8017298 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8017288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801728a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801728c:	429a      	cmp	r2, r3
 801728e:	d201      	bcs.n	8017294 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8017290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017292:	e000      	b.n	8017296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 8017294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017296:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8017298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801729a:	f003 0302 	and.w	r3, r3, #2
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d113      	bne.n	80172ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 80172a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172a4:	1c5a      	adds	r2, r3, #1
 80172a6:	637a      	str	r2, [r7, #52]	; 0x34
 80172a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80172aa:	429a      	cmp	r2, r3
 80172ac:	bf8c      	ite	hi
 80172ae:	2301      	movhi	r3, #1
 80172b0:	2300      	movls	r3, #0
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d008      	beq.n	80172ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 80172b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80172ba:	1c53      	adds	r3, r2, #1
 80172bc:	647b      	str	r3, [r7, #68]	; 0x44
 80172be:	68fe      	ldr	r6, [r7, #12]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	68b9      	ldr	r1, [r7, #8]
 80172c4:	2020      	movs	r0, #32
 80172c6:	47b0      	blx	r6
          while (l++ < width) {
 80172c8:	e7eb      	b.n	80172a2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80172ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d00b      	beq.n	80172ea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 80172d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80172d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d004      	beq.n	80172e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 80172dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172de:	1e5a      	subs	r2, r3, #1
 80172e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d001      	beq.n	80172ea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 80172e6:	2301      	movs	r3, #1
 80172e8:	e000      	b.n	80172ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 80172ea:	2300      	movs	r3, #0
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d00b      	beq.n	8017308 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 80172f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f2:	1c5a      	adds	r2, r3, #1
 80172f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80172f6:	7818      	ldrb	r0, [r3, #0]
 80172f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80172fa:	1c53      	adds	r3, r2, #1
 80172fc:	647b      	str	r3, [r7, #68]	; 0x44
 80172fe:	68fe      	ldr	r6, [r7, #12]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	68b9      	ldr	r1, [r7, #8]
 8017304:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8017306:	e7e0      	b.n	80172ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8017308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801730a:	f003 0302 	and.w	r3, r3, #2
 801730e:	2b00      	cmp	r3, #0
 8017310:	d013      	beq.n	801733a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8017312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017314:	1c5a      	adds	r2, r3, #1
 8017316:	637a      	str	r2, [r7, #52]	; 0x34
 8017318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801731a:	429a      	cmp	r2, r3
 801731c:	bf8c      	ite	hi
 801731e:	2301      	movhi	r3, #1
 8017320:	2300      	movls	r3, #0
 8017322:	b2db      	uxtb	r3, r3
 8017324:	2b00      	cmp	r3, #0
 8017326:	d008      	beq.n	801733a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8017328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801732a:	1c53      	adds	r3, r2, #1
 801732c:	647b      	str	r3, [r7, #68]	; 0x44
 801732e:	68fe      	ldr	r6, [r7, #12]
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	68b9      	ldr	r1, [r7, #8]
 8017334:	2020      	movs	r0, #32
 8017336:	47b0      	blx	r6
          while (l++ < width) {
 8017338:	e7eb      	b.n	8017312 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	3301      	adds	r3, #1
 801733e:	603b      	str	r3, [r7, #0]
        break;
 8017340:	e03e      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8017342:	2308      	movs	r3, #8
 8017344:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8017346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017348:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 801734c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 801734e:	2300      	movs	r3, #0
 8017350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8017354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017358:	1d1a      	adds	r2, r3, #4
 801735a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	461a      	mov	r2, r3
 8017362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017364:	9305      	str	r3, [sp, #20]
 8017366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017368:	9304      	str	r3, [sp, #16]
 801736a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801736c:	9303      	str	r3, [sp, #12]
 801736e:	2310      	movs	r3, #16
 8017370:	9302      	str	r3, [sp, #8]
 8017372:	2300      	movs	r3, #0
 8017374:	9301      	str	r3, [sp, #4]
 8017376:	9200      	str	r2, [sp, #0]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801737c:	68b9      	ldr	r1, [r7, #8]
 801737e:	68f8      	ldr	r0, [r7, #12]
 8017380:	f7fe fd9d 	bl	8015ebe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8017384:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	3301      	adds	r3, #1
 801738a:	603b      	str	r3, [r7, #0]
        break;
 801738c:	e018      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 801738e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017390:	1c53      	adds	r3, r2, #1
 8017392:	647b      	str	r3, [r7, #68]	; 0x44
 8017394:	68fe      	ldr	r6, [r7, #12]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	68b9      	ldr	r1, [r7, #8]
 801739a:	2025      	movs	r0, #37	; 0x25
 801739c:	47b0      	blx	r6
        format++;
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	3301      	adds	r3, #1
 80173a2:	603b      	str	r3, [r7, #0]
        break;
 80173a4:	e00c      	b.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	7818      	ldrb	r0, [r3, #0]
 80173aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173ac:	1c53      	adds	r3, r2, #1
 80173ae:	647b      	str	r3, [r7, #68]	; 0x44
 80173b0:	68fe      	ldr	r6, [r7, #12]
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	68b9      	ldr	r1, [r7, #8]
 80173b6:	47b0      	blx	r6
        format++;
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	3301      	adds	r3, #1
 80173bc:	603b      	str	r3, [r7, #0]
        break;
 80173be:	bf00      	nop
  while (*format)
 80173c0:	f7ff bb4d 	b.w	8016a5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80173c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	429a      	cmp	r2, r3
 80173ca:	d302      	bcc.n	80173d2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	1e5a      	subs	r2, r3, #1
 80173d0:	e000      	b.n	80173d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 80173d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173d4:	68fc      	ldr	r4, [r7, #12]
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	68b9      	ldr	r1, [r7, #8]
 80173da:	2000      	movs	r0, #0
 80173dc:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80173de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	375c      	adds	r7, #92	; 0x5c
 80173e4:	46bd      	mov	sp, r7
 80173e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173ea:	bf00      	nop

080173ec <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80173ec:	b40f      	push	{r0, r1, r2, r3}
 80173ee:	b580      	push	{r7, lr}
 80173f0:	b086      	sub	sp, #24
 80173f2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80173f4:	f107 031c 	add.w	r3, r7, #28
 80173f8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80173fa:	1d39      	adds	r1, r7, #4
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	9300      	str	r3, [sp, #0]
 8017400:	69bb      	ldr	r3, [r7, #24]
 8017402:	f04f 32ff 	mov.w	r2, #4294967295
 8017406:	4806      	ldr	r0, [pc, #24]	; (8017420 <printf_+0x34>)
 8017408:	f7ff fb1a 	bl	8016a40 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 801740c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 801740e:	68fb      	ldr	r3, [r7, #12]
}
 8017410:	4618      	mov	r0, r3
 8017412:	3710      	adds	r7, #16
 8017414:	46bd      	mov	sp, r7
 8017416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801741a:	b004      	add	sp, #16
 801741c:	4770      	bx	lr
 801741e:	bf00      	nop
 8017420:	08015b8d 	.word	0x08015b8d

08017424 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8017424:	b480      	push	{r7}
 8017426:	b083      	sub	sp, #12
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801742c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017430:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8017434:	f003 0301 	and.w	r3, r3, #1
 8017438:	2b00      	cmp	r3, #0
 801743a:	d009      	beq.n	8017450 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801743c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017440:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8017444:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8017448:	2b00      	cmp	r3, #0
 801744a:	d001      	beq.n	8017450 <ITM_SendChar+0x2c>
 801744c:	2301      	movs	r3, #1
 801744e:	e000      	b.n	8017452 <ITM_SendChar+0x2e>
 8017450:	2300      	movs	r3, #0
 8017452:	2b00      	cmp	r3, #0
 8017454:	d010      	beq.n	8017478 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8017456:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	2b00      	cmp	r3, #0
 801745e:	bf0c      	ite	eq
 8017460:	2301      	moveq	r3, #1
 8017462:	2300      	movne	r3, #0
 8017464:	b2db      	uxtb	r3, r3
 8017466:	2b00      	cmp	r3, #0
 8017468:	d001      	beq.n	801746e <ITM_SendChar+0x4a>
    {
      __NOP();
 801746a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 801746c:	e7f3      	b.n	8017456 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801746e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017472:	687a      	ldr	r2, [r7, #4]
 8017474:	b2d2      	uxtb	r2, r2
 8017476:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8017478:	687b      	ldr	r3, [r7, #4]
}
 801747a:	4618      	mov	r0, r3
 801747c:	370c      	adds	r7, #12
 801747e:	46bd      	mov	sp, r7
 8017480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017484:	4770      	bx	lr

08017486 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8017486:	b580      	push	{r7, lr}
 8017488:	b082      	sub	sp, #8
 801748a:	af00      	add	r7, sp, #0
 801748c:	4603      	mov	r3, r0
 801748e:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8017490:	79fb      	ldrb	r3, [r7, #7]
 8017492:	4618      	mov	r0, r3
 8017494:	f7ff ffc6 	bl	8017424 <ITM_SendChar>
}
 8017498:	bf00      	nop
 801749a:	3708      	adds	r7, #8
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}

080174a0 <__NVIC_SetPriority>:
{
 80174a0:	b480      	push	{r7}
 80174a2:	b083      	sub	sp, #12
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	4603      	mov	r3, r0
 80174a8:	6039      	str	r1, [r7, #0]
 80174aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80174ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	db0a      	blt.n	80174ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	b2da      	uxtb	r2, r3
 80174b8:	490c      	ldr	r1, [pc, #48]	; (80174ec <__NVIC_SetPriority+0x4c>)
 80174ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174be:	0112      	lsls	r2, r2, #4
 80174c0:	b2d2      	uxtb	r2, r2
 80174c2:	440b      	add	r3, r1
 80174c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80174c8:	e00a      	b.n	80174e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	b2da      	uxtb	r2, r3
 80174ce:	4908      	ldr	r1, [pc, #32]	; (80174f0 <__NVIC_SetPriority+0x50>)
 80174d0:	79fb      	ldrb	r3, [r7, #7]
 80174d2:	f003 030f 	and.w	r3, r3, #15
 80174d6:	3b04      	subs	r3, #4
 80174d8:	0112      	lsls	r2, r2, #4
 80174da:	b2d2      	uxtb	r2, r2
 80174dc:	440b      	add	r3, r1
 80174de:	761a      	strb	r2, [r3, #24]
}
 80174e0:	bf00      	nop
 80174e2:	370c      	adds	r7, #12
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr
 80174ec:	e000e100 	.word	0xe000e100
 80174f0:	e000ed00 	.word	0xe000ed00

080174f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80174f4:	b580      	push	{r7, lr}
 80174f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80174f8:	4b05      	ldr	r3, [pc, #20]	; (8017510 <SysTick_Handler+0x1c>)
 80174fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80174fc:	f003 f8d0 	bl	801a6a0 <xTaskGetSchedulerState>
 8017500:	4603      	mov	r3, r0
 8017502:	2b01      	cmp	r3, #1
 8017504:	d001      	beq.n	801750a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8017506:	f004 f91f 	bl	801b748 <xPortSysTickHandler>
  }
}
 801750a:	bf00      	nop
 801750c:	bd80      	pop	{r7, pc}
 801750e:	bf00      	nop
 8017510:	e000e010 	.word	0xe000e010

08017514 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017514:	b580      	push	{r7, lr}
 8017516:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017518:	2100      	movs	r1, #0
 801751a:	f06f 0004 	mvn.w	r0, #4
 801751e:	f7ff ffbf 	bl	80174a0 <__NVIC_SetPriority>
#endif
}
 8017522:	bf00      	nop
 8017524:	bd80      	pop	{r7, pc}
	...

08017528 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017528:	b480      	push	{r7}
 801752a:	b083      	sub	sp, #12
 801752c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801752e:	f3ef 8305 	mrs	r3, IPSR
 8017532:	603b      	str	r3, [r7, #0]
  return(result);
 8017534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017536:	2b00      	cmp	r3, #0
 8017538:	d003      	beq.n	8017542 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801753a:	f06f 0305 	mvn.w	r3, #5
 801753e:	607b      	str	r3, [r7, #4]
 8017540:	e00c      	b.n	801755c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017542:	4b0a      	ldr	r3, [pc, #40]	; (801756c <osKernelInitialize+0x44>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801754a:	4b08      	ldr	r3, [pc, #32]	; (801756c <osKernelInitialize+0x44>)
 801754c:	2201      	movs	r2, #1
 801754e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017550:	2300      	movs	r3, #0
 8017552:	607b      	str	r3, [r7, #4]
 8017554:	e002      	b.n	801755c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017556:	f04f 33ff 	mov.w	r3, #4294967295
 801755a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801755c:	687b      	ldr	r3, [r7, #4]
}
 801755e:	4618      	mov	r0, r3
 8017560:	370c      	adds	r7, #12
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	20001650 	.word	0x20001650

08017570 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017576:	f3ef 8305 	mrs	r3, IPSR
 801757a:	603b      	str	r3, [r7, #0]
  return(result);
 801757c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801757e:	2b00      	cmp	r3, #0
 8017580:	d003      	beq.n	801758a <osKernelStart+0x1a>
    stat = osErrorISR;
 8017582:	f06f 0305 	mvn.w	r3, #5
 8017586:	607b      	str	r3, [r7, #4]
 8017588:	e010      	b.n	80175ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801758a:	4b0b      	ldr	r3, [pc, #44]	; (80175b8 <osKernelStart+0x48>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	2b01      	cmp	r3, #1
 8017590:	d109      	bne.n	80175a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017592:	f7ff ffbf 	bl	8017514 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017596:	4b08      	ldr	r3, [pc, #32]	; (80175b8 <osKernelStart+0x48>)
 8017598:	2202      	movs	r2, #2
 801759a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801759c:	f002 fbc0 	bl	8019d20 <vTaskStartScheduler>
      stat = osOK;
 80175a0:	2300      	movs	r3, #0
 80175a2:	607b      	str	r3, [r7, #4]
 80175a4:	e002      	b.n	80175ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80175a6:	f04f 33ff 	mov.w	r3, #4294967295
 80175aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80175ac:	687b      	ldr	r3, [r7, #4]
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3708      	adds	r7, #8
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}
 80175b6:	bf00      	nop
 80175b8:	20001650 	.word	0x20001650

080175bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80175bc:	b580      	push	{r7, lr}
 80175be:	b08e      	sub	sp, #56	; 0x38
 80175c0:	af04      	add	r7, sp, #16
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80175c8:	2300      	movs	r3, #0
 80175ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80175cc:	f3ef 8305 	mrs	r3, IPSR
 80175d0:	617b      	str	r3, [r7, #20]
  return(result);
 80175d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d17e      	bne.n	80176d6 <osThreadNew+0x11a>
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d07b      	beq.n	80176d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80175de:	2380      	movs	r3, #128	; 0x80
 80175e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80175e2:	2318      	movs	r3, #24
 80175e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80175e6:	2300      	movs	r3, #0
 80175e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80175ea:	f04f 33ff 	mov.w	r3, #4294967295
 80175ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d045      	beq.n	8017682 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d002      	beq.n	8017604 <osThreadNew+0x48>
        name = attr->name;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	699b      	ldr	r3, [r3, #24]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d002      	beq.n	8017612 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	699b      	ldr	r3, [r3, #24]
 8017610:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d008      	beq.n	801762a <osThreadNew+0x6e>
 8017618:	69fb      	ldr	r3, [r7, #28]
 801761a:	2b38      	cmp	r3, #56	; 0x38
 801761c:	d805      	bhi.n	801762a <osThreadNew+0x6e>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	685b      	ldr	r3, [r3, #4]
 8017622:	f003 0301 	and.w	r3, r3, #1
 8017626:	2b00      	cmp	r3, #0
 8017628:	d001      	beq.n	801762e <osThreadNew+0x72>
        return (NULL);
 801762a:	2300      	movs	r3, #0
 801762c:	e054      	b.n	80176d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	695b      	ldr	r3, [r3, #20]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d003      	beq.n	801763e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	695b      	ldr	r3, [r3, #20]
 801763a:	089b      	lsrs	r3, r3, #2
 801763c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	689b      	ldr	r3, [r3, #8]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d00e      	beq.n	8017664 <osThreadNew+0xa8>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	2bbf      	cmp	r3, #191	; 0xbf
 801764c:	d90a      	bls.n	8017664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017652:	2b00      	cmp	r3, #0
 8017654:	d006      	beq.n	8017664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	695b      	ldr	r3, [r3, #20]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d002      	beq.n	8017664 <osThreadNew+0xa8>
        mem = 1;
 801765e:	2301      	movs	r3, #1
 8017660:	61bb      	str	r3, [r7, #24]
 8017662:	e010      	b.n	8017686 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	689b      	ldr	r3, [r3, #8]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d10c      	bne.n	8017686 <osThreadNew+0xca>
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	68db      	ldr	r3, [r3, #12]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d108      	bne.n	8017686 <osThreadNew+0xca>
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	691b      	ldr	r3, [r3, #16]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d104      	bne.n	8017686 <osThreadNew+0xca>
          mem = 0;
 801767c:	2300      	movs	r3, #0
 801767e:	61bb      	str	r3, [r7, #24]
 8017680:	e001      	b.n	8017686 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017682:	2300      	movs	r3, #0
 8017684:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017686:	69bb      	ldr	r3, [r7, #24]
 8017688:	2b01      	cmp	r3, #1
 801768a:	d110      	bne.n	80176ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017694:	9202      	str	r2, [sp, #8]
 8017696:	9301      	str	r3, [sp, #4]
 8017698:	69fb      	ldr	r3, [r7, #28]
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	6a3a      	ldr	r2, [r7, #32]
 80176a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80176a2:	68f8      	ldr	r0, [r7, #12]
 80176a4:	f002 f94c 	bl	8019940 <xTaskCreateStatic>
 80176a8:	4603      	mov	r3, r0
 80176aa:	613b      	str	r3, [r7, #16]
 80176ac:	e013      	b.n	80176d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80176ae:	69bb      	ldr	r3, [r7, #24]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d110      	bne.n	80176d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80176b4:	6a3b      	ldr	r3, [r7, #32]
 80176b6:	b29a      	uxth	r2, r3
 80176b8:	f107 0310 	add.w	r3, r7, #16
 80176bc:	9301      	str	r3, [sp, #4]
 80176be:	69fb      	ldr	r3, [r7, #28]
 80176c0:	9300      	str	r3, [sp, #0]
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80176c6:	68f8      	ldr	r0, [r7, #12]
 80176c8:	f002 f997 	bl	80199fa <xTaskCreate>
 80176cc:	4603      	mov	r3, r0
 80176ce:	2b01      	cmp	r3, #1
 80176d0:	d001      	beq.n	80176d6 <osThreadNew+0x11a>
            hTask = NULL;
 80176d2:	2300      	movs	r3, #0
 80176d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80176d6:	693b      	ldr	r3, [r7, #16]
}
 80176d8:	4618      	mov	r0, r3
 80176da:	3728      	adds	r7, #40	; 0x28
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b084      	sub	sp, #16
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80176e8:	f3ef 8305 	mrs	r3, IPSR
 80176ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80176ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d003      	beq.n	80176fc <osDelay+0x1c>
    stat = osErrorISR;
 80176f4:	f06f 0305 	mvn.w	r3, #5
 80176f8:	60fb      	str	r3, [r7, #12]
 80176fa:	e007      	b.n	801770c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80176fc:	2300      	movs	r3, #0
 80176fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d002      	beq.n	801770c <osDelay+0x2c>
      vTaskDelay(ticks);
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f002 fad6 	bl	8019cb8 <vTaskDelay>
    }
  }

  return (stat);
 801770c:	68fb      	ldr	r3, [r7, #12]
}
 801770e:	4618      	mov	r0, r3
 8017710:	3710      	adds	r7, #16
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}

08017716 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8017716:	b580      	push	{r7, lr}
 8017718:	b088      	sub	sp, #32
 801771a:	af00      	add	r7, sp, #0
 801771c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801771e:	2300      	movs	r3, #0
 8017720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017722:	f3ef 8305 	mrs	r3, IPSR
 8017726:	60bb      	str	r3, [r7, #8]
  return(result);
 8017728:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801772a:	2b00      	cmp	r3, #0
 801772c:	d174      	bne.n	8017818 <osMutexNew+0x102>
    if (attr != NULL) {
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d003      	beq.n	801773c <osMutexNew+0x26>
      type = attr->attr_bits;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	61bb      	str	r3, [r7, #24]
 801773a:	e001      	b.n	8017740 <osMutexNew+0x2a>
    } else {
      type = 0U;
 801773c:	2300      	movs	r3, #0
 801773e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017740:	69bb      	ldr	r3, [r7, #24]
 8017742:	f003 0301 	and.w	r3, r3, #1
 8017746:	2b00      	cmp	r3, #0
 8017748:	d002      	beq.n	8017750 <osMutexNew+0x3a>
      rmtx = 1U;
 801774a:	2301      	movs	r3, #1
 801774c:	617b      	str	r3, [r7, #20]
 801774e:	e001      	b.n	8017754 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8017750:	2300      	movs	r3, #0
 8017752:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8017754:	69bb      	ldr	r3, [r7, #24]
 8017756:	f003 0308 	and.w	r3, r3, #8
 801775a:	2b00      	cmp	r3, #0
 801775c:	d15c      	bne.n	8017818 <osMutexNew+0x102>
      mem = -1;
 801775e:	f04f 33ff 	mov.w	r3, #4294967295
 8017762:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d015      	beq.n	8017796 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	689b      	ldr	r3, [r3, #8]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d006      	beq.n	8017780 <osMutexNew+0x6a>
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	68db      	ldr	r3, [r3, #12]
 8017776:	2b4f      	cmp	r3, #79	; 0x4f
 8017778:	d902      	bls.n	8017780 <osMutexNew+0x6a>
          mem = 1;
 801777a:	2301      	movs	r3, #1
 801777c:	613b      	str	r3, [r7, #16]
 801777e:	e00c      	b.n	801779a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d108      	bne.n	801779a <osMutexNew+0x84>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d104      	bne.n	801779a <osMutexNew+0x84>
            mem = 0;
 8017790:	2300      	movs	r3, #0
 8017792:	613b      	str	r3, [r7, #16]
 8017794:	e001      	b.n	801779a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8017796:	2300      	movs	r3, #0
 8017798:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	2b01      	cmp	r3, #1
 801779e:	d112      	bne.n	80177c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d007      	beq.n	80177b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	689b      	ldr	r3, [r3, #8]
 80177aa:	4619      	mov	r1, r3
 80177ac:	2004      	movs	r0, #4
 80177ae:	f000 fd88 	bl	80182c2 <xQueueCreateMutexStatic>
 80177b2:	61f8      	str	r0, [r7, #28]
 80177b4:	e016      	b.n	80177e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	689b      	ldr	r3, [r3, #8]
 80177ba:	4619      	mov	r1, r3
 80177bc:	2001      	movs	r0, #1
 80177be:	f000 fd80 	bl	80182c2 <xQueueCreateMutexStatic>
 80177c2:	61f8      	str	r0, [r7, #28]
 80177c4:	e00e      	b.n	80177e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80177c6:	693b      	ldr	r3, [r7, #16]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d10b      	bne.n	80177e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d004      	beq.n	80177dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80177d2:	2004      	movs	r0, #4
 80177d4:	f000 fd5d 	bl	8018292 <xQueueCreateMutex>
 80177d8:	61f8      	str	r0, [r7, #28]
 80177da:	e003      	b.n	80177e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80177dc:	2001      	movs	r0, #1
 80177de:	f000 fd58 	bl	8018292 <xQueueCreateMutex>
 80177e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d00c      	beq.n	8017804 <osMutexNew+0xee>
        if (attr != NULL) {
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d003      	beq.n	80177f8 <osMutexNew+0xe2>
          name = attr->name;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	60fb      	str	r3, [r7, #12]
 80177f6:	e001      	b.n	80177fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80177f8:	2300      	movs	r3, #0
 80177fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80177fc:	68f9      	ldr	r1, [r7, #12]
 80177fe:	69f8      	ldr	r0, [r7, #28]
 8017800:	f001 fc68 	bl	80190d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8017804:	69fb      	ldr	r3, [r7, #28]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d006      	beq.n	8017818 <osMutexNew+0x102>
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d003      	beq.n	8017818 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017810:	69fb      	ldr	r3, [r7, #28]
 8017812:	f043 0301 	orr.w	r3, r3, #1
 8017816:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8017818:	69fb      	ldr	r3, [r7, #28]
}
 801781a:	4618      	mov	r0, r3
 801781c:	3720      	adds	r7, #32
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}

08017822 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8017822:	b580      	push	{r7, lr}
 8017824:	b086      	sub	sp, #24
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
 801782a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f023 0301 	bic.w	r3, r3, #1
 8017832:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f003 0301 	and.w	r3, r3, #1
 801783a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801783c:	2300      	movs	r3, #0
 801783e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017840:	f3ef 8305 	mrs	r3, IPSR
 8017844:	60bb      	str	r3, [r7, #8]
  return(result);
 8017846:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017848:	2b00      	cmp	r3, #0
 801784a:	d003      	beq.n	8017854 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801784c:	f06f 0305 	mvn.w	r3, #5
 8017850:	617b      	str	r3, [r7, #20]
 8017852:	e02c      	b.n	80178ae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d103      	bne.n	8017862 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801785a:	f06f 0303 	mvn.w	r3, #3
 801785e:	617b      	str	r3, [r7, #20]
 8017860:	e025      	b.n	80178ae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d011      	beq.n	801788c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8017868:	6839      	ldr	r1, [r7, #0]
 801786a:	6938      	ldr	r0, [r7, #16]
 801786c:	f000 fd78 	bl	8018360 <xQueueTakeMutexRecursive>
 8017870:	4603      	mov	r3, r0
 8017872:	2b01      	cmp	r3, #1
 8017874:	d01b      	beq.n	80178ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d003      	beq.n	8017884 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 801787c:	f06f 0301 	mvn.w	r3, #1
 8017880:	617b      	str	r3, [r7, #20]
 8017882:	e014      	b.n	80178ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017884:	f06f 0302 	mvn.w	r3, #2
 8017888:	617b      	str	r3, [r7, #20]
 801788a:	e010      	b.n	80178ae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801788c:	6839      	ldr	r1, [r7, #0]
 801788e:	6938      	ldr	r0, [r7, #16]
 8017890:	f001 f90c 	bl	8018aac <xQueueSemaphoreTake>
 8017894:	4603      	mov	r3, r0
 8017896:	2b01      	cmp	r3, #1
 8017898:	d009      	beq.n	80178ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d003      	beq.n	80178a8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80178a0:	f06f 0301 	mvn.w	r3, #1
 80178a4:	617b      	str	r3, [r7, #20]
 80178a6:	e002      	b.n	80178ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80178a8:	f06f 0302 	mvn.w	r3, #2
 80178ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80178ae:	697b      	ldr	r3, [r7, #20]
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	3718      	adds	r7, #24
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}

080178b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b086      	sub	sp, #24
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f023 0301 	bic.w	r3, r3, #1
 80178c6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f003 0301 	and.w	r3, r3, #1
 80178ce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80178d0:	2300      	movs	r3, #0
 80178d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178d4:	f3ef 8305 	mrs	r3, IPSR
 80178d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80178da:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d003      	beq.n	80178e8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80178e0:	f06f 0305 	mvn.w	r3, #5
 80178e4:	617b      	str	r3, [r7, #20]
 80178e6:	e01f      	b.n	8017928 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80178e8:	693b      	ldr	r3, [r7, #16]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d103      	bne.n	80178f6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80178ee:	f06f 0303 	mvn.w	r3, #3
 80178f2:	617b      	str	r3, [r7, #20]
 80178f4:	e018      	b.n	8017928 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d009      	beq.n	8017910 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80178fc:	6938      	ldr	r0, [r7, #16]
 80178fe:	f000 fcfb 	bl	80182f8 <xQueueGiveMutexRecursive>
 8017902:	4603      	mov	r3, r0
 8017904:	2b01      	cmp	r3, #1
 8017906:	d00f      	beq.n	8017928 <osMutexRelease+0x70>
        stat = osErrorResource;
 8017908:	f06f 0302 	mvn.w	r3, #2
 801790c:	617b      	str	r3, [r7, #20]
 801790e:	e00b      	b.n	8017928 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017910:	2300      	movs	r3, #0
 8017912:	2200      	movs	r2, #0
 8017914:	2100      	movs	r1, #0
 8017916:	6938      	ldr	r0, [r7, #16]
 8017918:	f000 fdc2 	bl	80184a0 <xQueueGenericSend>
 801791c:	4603      	mov	r3, r0
 801791e:	2b01      	cmp	r3, #1
 8017920:	d002      	beq.n	8017928 <osMutexRelease+0x70>
        stat = osErrorResource;
 8017922:	f06f 0302 	mvn.w	r3, #2
 8017926:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017928:	697b      	ldr	r3, [r7, #20]
}
 801792a:	4618      	mov	r0, r3
 801792c:	3718      	adds	r7, #24
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8017932:	b580      	push	{r7, lr}
 8017934:	b08a      	sub	sp, #40	; 0x28
 8017936:	af02      	add	r7, sp, #8
 8017938:	60f8      	str	r0, [r7, #12]
 801793a:	60b9      	str	r1, [r7, #8]
 801793c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801793e:	2300      	movs	r3, #0
 8017940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017942:	f3ef 8305 	mrs	r3, IPSR
 8017946:	613b      	str	r3, [r7, #16]
  return(result);
 8017948:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801794a:	2b00      	cmp	r3, #0
 801794c:	d175      	bne.n	8017a3a <osSemaphoreNew+0x108>
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d072      	beq.n	8017a3a <osSemaphoreNew+0x108>
 8017954:	68ba      	ldr	r2, [r7, #8]
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	429a      	cmp	r2, r3
 801795a:	d86e      	bhi.n	8017a3a <osSemaphoreNew+0x108>
    mem = -1;
 801795c:	f04f 33ff 	mov.w	r3, #4294967295
 8017960:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d015      	beq.n	8017994 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	689b      	ldr	r3, [r3, #8]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d006      	beq.n	801797e <osSemaphoreNew+0x4c>
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	68db      	ldr	r3, [r3, #12]
 8017974:	2b4f      	cmp	r3, #79	; 0x4f
 8017976:	d902      	bls.n	801797e <osSemaphoreNew+0x4c>
        mem = 1;
 8017978:	2301      	movs	r3, #1
 801797a:	61bb      	str	r3, [r7, #24]
 801797c:	e00c      	b.n	8017998 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	689b      	ldr	r3, [r3, #8]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d108      	bne.n	8017998 <osSemaphoreNew+0x66>
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	68db      	ldr	r3, [r3, #12]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d104      	bne.n	8017998 <osSemaphoreNew+0x66>
          mem = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	61bb      	str	r3, [r7, #24]
 8017992:	e001      	b.n	8017998 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8017994:	2300      	movs	r3, #0
 8017996:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8017998:	69bb      	ldr	r3, [r7, #24]
 801799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801799e:	d04c      	beq.n	8017a3a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	2b01      	cmp	r3, #1
 80179a4:	d128      	bne.n	80179f8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80179a6:	69bb      	ldr	r3, [r7, #24]
 80179a8:	2b01      	cmp	r3, #1
 80179aa:	d10a      	bne.n	80179c2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	689b      	ldr	r3, [r3, #8]
 80179b0:	2203      	movs	r2, #3
 80179b2:	9200      	str	r2, [sp, #0]
 80179b4:	2200      	movs	r2, #0
 80179b6:	2100      	movs	r1, #0
 80179b8:	2001      	movs	r0, #1
 80179ba:	f000 fb7b 	bl	80180b4 <xQueueGenericCreateStatic>
 80179be:	61f8      	str	r0, [r7, #28]
 80179c0:	e005      	b.n	80179ce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80179c2:	2203      	movs	r2, #3
 80179c4:	2100      	movs	r1, #0
 80179c6:	2001      	movs	r0, #1
 80179c8:	f000 fbec 	bl	80181a4 <xQueueGenericCreate>
 80179cc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80179ce:	69fb      	ldr	r3, [r7, #28]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d022      	beq.n	8017a1a <osSemaphoreNew+0xe8>
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d01f      	beq.n	8017a1a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80179da:	2300      	movs	r3, #0
 80179dc:	2200      	movs	r2, #0
 80179de:	2100      	movs	r1, #0
 80179e0:	69f8      	ldr	r0, [r7, #28]
 80179e2:	f000 fd5d 	bl	80184a0 <xQueueGenericSend>
 80179e6:	4603      	mov	r3, r0
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d016      	beq.n	8017a1a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80179ec:	69f8      	ldr	r0, [r7, #28]
 80179ee:	f001 fa25 	bl	8018e3c <vQueueDelete>
            hSemaphore = NULL;
 80179f2:	2300      	movs	r3, #0
 80179f4:	61fb      	str	r3, [r7, #28]
 80179f6:	e010      	b.n	8017a1a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80179f8:	69bb      	ldr	r3, [r7, #24]
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d108      	bne.n	8017a10 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	689b      	ldr	r3, [r3, #8]
 8017a02:	461a      	mov	r2, r3
 8017a04:	68b9      	ldr	r1, [r7, #8]
 8017a06:	68f8      	ldr	r0, [r7, #12]
 8017a08:	f000 fce0 	bl	80183cc <xQueueCreateCountingSemaphoreStatic>
 8017a0c:	61f8      	str	r0, [r7, #28]
 8017a0e:	e004      	b.n	8017a1a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8017a10:	68b9      	ldr	r1, [r7, #8]
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f000 fd11 	bl	801843a <xQueueCreateCountingSemaphore>
 8017a18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8017a1a:	69fb      	ldr	r3, [r7, #28]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d00c      	beq.n	8017a3a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d003      	beq.n	8017a2e <osSemaphoreNew+0xfc>
          name = attr->name;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	617b      	str	r3, [r7, #20]
 8017a2c:	e001      	b.n	8017a32 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8017a32:	6979      	ldr	r1, [r7, #20]
 8017a34:	69f8      	ldr	r0, [r7, #28]
 8017a36:	f001 fb4d 	bl	80190d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8017a3a:	69fb      	ldr	r3, [r7, #28]
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3720      	adds	r7, #32
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}

08017a44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b086      	sub	sp, #24
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8017a52:	2300      	movs	r3, #0
 8017a54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8017a56:	693b      	ldr	r3, [r7, #16]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d103      	bne.n	8017a64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8017a5c:	f06f 0303 	mvn.w	r3, #3
 8017a60:	617b      	str	r3, [r7, #20]
 8017a62:	e039      	b.n	8017ad8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a64:	f3ef 8305 	mrs	r3, IPSR
 8017a68:	60fb      	str	r3, [r7, #12]
  return(result);
 8017a6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d022      	beq.n	8017ab6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d003      	beq.n	8017a7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8017a76:	f06f 0303 	mvn.w	r3, #3
 8017a7a:	617b      	str	r3, [r7, #20]
 8017a7c:	e02c      	b.n	8017ad8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8017a82:	f107 0308 	add.w	r3, r7, #8
 8017a86:	461a      	mov	r2, r3
 8017a88:	2100      	movs	r1, #0
 8017a8a:	6938      	ldr	r0, [r7, #16]
 8017a8c:	f001 f91a 	bl	8018cc4 <xQueueReceiveFromISR>
 8017a90:	4603      	mov	r3, r0
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d003      	beq.n	8017a9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8017a96:	f06f 0302 	mvn.w	r3, #2
 8017a9a:	617b      	str	r3, [r7, #20]
 8017a9c:	e01c      	b.n	8017ad8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8017a9e:	68bb      	ldr	r3, [r7, #8]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d019      	beq.n	8017ad8 <osSemaphoreAcquire+0x94>
 8017aa4:	4b0f      	ldr	r3, [pc, #60]	; (8017ae4 <osSemaphoreAcquire+0xa0>)
 8017aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017aaa:	601a      	str	r2, [r3, #0]
 8017aac:	f3bf 8f4f 	dsb	sy
 8017ab0:	f3bf 8f6f 	isb	sy
 8017ab4:	e010      	b.n	8017ad8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8017ab6:	6839      	ldr	r1, [r7, #0]
 8017ab8:	6938      	ldr	r0, [r7, #16]
 8017aba:	f000 fff7 	bl	8018aac <xQueueSemaphoreTake>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	2b01      	cmp	r3, #1
 8017ac2:	d009      	beq.n	8017ad8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d003      	beq.n	8017ad2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8017aca:	f06f 0301 	mvn.w	r3, #1
 8017ace:	617b      	str	r3, [r7, #20]
 8017ad0:	e002      	b.n	8017ad8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8017ad2:	f06f 0302 	mvn.w	r3, #2
 8017ad6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017ad8:	697b      	ldr	r3, [r7, #20]
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3718      	adds	r7, #24
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	e000ed04 	.word	0xe000ed04

08017ae8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b086      	sub	sp, #24
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8017af4:	2300      	movs	r3, #0
 8017af6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d103      	bne.n	8017b06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8017afe:	f06f 0303 	mvn.w	r3, #3
 8017b02:	617b      	str	r3, [r7, #20]
 8017b04:	e02c      	b.n	8017b60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b06:	f3ef 8305 	mrs	r3, IPSR
 8017b0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d01a      	beq.n	8017b48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8017b12:	2300      	movs	r3, #0
 8017b14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8017b16:	f107 0308 	add.w	r3, r7, #8
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	6938      	ldr	r0, [r7, #16]
 8017b1e:	f000 fe58 	bl	80187d2 <xQueueGiveFromISR>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d003      	beq.n	8017b30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8017b28:	f06f 0302 	mvn.w	r3, #2
 8017b2c:	617b      	str	r3, [r7, #20]
 8017b2e:	e017      	b.n	8017b60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d014      	beq.n	8017b60 <osSemaphoreRelease+0x78>
 8017b36:	4b0d      	ldr	r3, [pc, #52]	; (8017b6c <osSemaphoreRelease+0x84>)
 8017b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b3c:	601a      	str	r2, [r3, #0]
 8017b3e:	f3bf 8f4f 	dsb	sy
 8017b42:	f3bf 8f6f 	isb	sy
 8017b46:	e00b      	b.n	8017b60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017b48:	2300      	movs	r3, #0
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	2100      	movs	r1, #0
 8017b4e:	6938      	ldr	r0, [r7, #16]
 8017b50:	f000 fca6 	bl	80184a0 <xQueueGenericSend>
 8017b54:	4603      	mov	r3, r0
 8017b56:	2b01      	cmp	r3, #1
 8017b58:	d002      	beq.n	8017b60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8017b5a:	f06f 0302 	mvn.w	r3, #2
 8017b5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8017b60:	697b      	ldr	r3, [r7, #20]
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3718      	adds	r7, #24
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop
 8017b6c:	e000ed04 	.word	0xe000ed04

08017b70 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b086      	sub	sp, #24
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d102      	bne.n	8017b88 <osSemaphoreGetCount+0x18>
    count = 0U;
 8017b82:	2300      	movs	r3, #0
 8017b84:	617b      	str	r3, [r7, #20]
 8017b86:	e00e      	b.n	8017ba6 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b88:	f3ef 8305 	mrs	r3, IPSR
 8017b8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d004      	beq.n	8017b9e <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8017b94:	6938      	ldr	r0, [r7, #16]
 8017b96:	f001 f933 	bl	8018e00 <uxQueueMessagesWaitingFromISR>
 8017b9a:	6178      	str	r0, [r7, #20]
 8017b9c:	e003      	b.n	8017ba6 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8017b9e:	6938      	ldr	r0, [r7, #16]
 8017ba0:	f001 f910 	bl	8018dc4 <uxQueueMessagesWaiting>
 8017ba4:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8017ba6:	697b      	ldr	r3, [r7, #20]
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3718      	adds	r7, #24
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b08a      	sub	sp, #40	; 0x28
 8017bb4:	af02      	add	r7, sp, #8
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017bc0:	f3ef 8305 	mrs	r3, IPSR
 8017bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8017bc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d15f      	bne.n	8017c8c <osMessageQueueNew+0xdc>
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d05c      	beq.n	8017c8c <osMessageQueueNew+0xdc>
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d059      	beq.n	8017c8c <osMessageQueueNew+0xdc>
    mem = -1;
 8017bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d029      	beq.n	8017c38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	689b      	ldr	r3, [r3, #8]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d012      	beq.n	8017c12 <osMessageQueueNew+0x62>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	68db      	ldr	r3, [r3, #12]
 8017bf0:	2b4f      	cmp	r3, #79	; 0x4f
 8017bf2:	d90e      	bls.n	8017c12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d00a      	beq.n	8017c12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	695a      	ldr	r2, [r3, #20]
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	68b9      	ldr	r1, [r7, #8]
 8017c04:	fb01 f303 	mul.w	r3, r1, r3
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d302      	bcc.n	8017c12 <osMessageQueueNew+0x62>
        mem = 1;
 8017c0c:	2301      	movs	r3, #1
 8017c0e:	61bb      	str	r3, [r7, #24]
 8017c10:	e014      	b.n	8017c3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	689b      	ldr	r3, [r3, #8]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d110      	bne.n	8017c3c <osMessageQueueNew+0x8c>
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	68db      	ldr	r3, [r3, #12]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d10c      	bne.n	8017c3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d108      	bne.n	8017c3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	695b      	ldr	r3, [r3, #20]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d104      	bne.n	8017c3c <osMessageQueueNew+0x8c>
          mem = 0;
 8017c32:	2300      	movs	r3, #0
 8017c34:	61bb      	str	r3, [r7, #24]
 8017c36:	e001      	b.n	8017c3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017c3c:	69bb      	ldr	r3, [r7, #24]
 8017c3e:	2b01      	cmp	r3, #1
 8017c40:	d10b      	bne.n	8017c5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	691a      	ldr	r2, [r3, #16]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	689b      	ldr	r3, [r3, #8]
 8017c4a:	2100      	movs	r1, #0
 8017c4c:	9100      	str	r1, [sp, #0]
 8017c4e:	68b9      	ldr	r1, [r7, #8]
 8017c50:	68f8      	ldr	r0, [r7, #12]
 8017c52:	f000 fa2f 	bl	80180b4 <xQueueGenericCreateStatic>
 8017c56:	61f8      	str	r0, [r7, #28]
 8017c58:	e008      	b.n	8017c6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d105      	bne.n	8017c6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8017c60:	2200      	movs	r2, #0
 8017c62:	68b9      	ldr	r1, [r7, #8]
 8017c64:	68f8      	ldr	r0, [r7, #12]
 8017c66:	f000 fa9d 	bl	80181a4 <xQueueGenericCreate>
 8017c6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8017c6c:	69fb      	ldr	r3, [r7, #28]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d00c      	beq.n	8017c8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d003      	beq.n	8017c80 <osMessageQueueNew+0xd0>
        name = attr->name;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	617b      	str	r3, [r7, #20]
 8017c7e:	e001      	b.n	8017c84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8017c80:	2300      	movs	r3, #0
 8017c82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8017c84:	6979      	ldr	r1, [r7, #20]
 8017c86:	69f8      	ldr	r0, [r7, #28]
 8017c88:	f001 fa24 	bl	80190d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8017c8c:	69fb      	ldr	r3, [r7, #28]
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	3720      	adds	r7, #32
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}
	...

08017c98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b088      	sub	sp, #32
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	60f8      	str	r0, [r7, #12]
 8017ca0:	60b9      	str	r1, [r7, #8]
 8017ca2:	603b      	str	r3, [r7, #0]
 8017ca4:	4613      	mov	r3, r2
 8017ca6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017cac:	2300      	movs	r3, #0
 8017cae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017cb0:	f3ef 8305 	mrs	r3, IPSR
 8017cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8017cb6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d028      	beq.n	8017d0e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017cbc:	69bb      	ldr	r3, [r7, #24]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d005      	beq.n	8017cce <osMessageQueuePut+0x36>
 8017cc2:	68bb      	ldr	r3, [r7, #8]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d002      	beq.n	8017cce <osMessageQueuePut+0x36>
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d003      	beq.n	8017cd6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8017cce:	f06f 0303 	mvn.w	r3, #3
 8017cd2:	61fb      	str	r3, [r7, #28]
 8017cd4:	e038      	b.n	8017d48 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017cda:	f107 0210 	add.w	r2, r7, #16
 8017cde:	2300      	movs	r3, #0
 8017ce0:	68b9      	ldr	r1, [r7, #8]
 8017ce2:	69b8      	ldr	r0, [r7, #24]
 8017ce4:	f000 fcda 	bl	801869c <xQueueGenericSendFromISR>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	2b01      	cmp	r3, #1
 8017cec:	d003      	beq.n	8017cf6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8017cee:	f06f 0302 	mvn.w	r3, #2
 8017cf2:	61fb      	str	r3, [r7, #28]
 8017cf4:	e028      	b.n	8017d48 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8017cf6:	693b      	ldr	r3, [r7, #16]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d025      	beq.n	8017d48 <osMessageQueuePut+0xb0>
 8017cfc:	4b15      	ldr	r3, [pc, #84]	; (8017d54 <osMessageQueuePut+0xbc>)
 8017cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d02:	601a      	str	r2, [r3, #0]
 8017d04:	f3bf 8f4f 	dsb	sy
 8017d08:	f3bf 8f6f 	isb	sy
 8017d0c:	e01c      	b.n	8017d48 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017d0e:	69bb      	ldr	r3, [r7, #24]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d002      	beq.n	8017d1a <osMessageQueuePut+0x82>
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d103      	bne.n	8017d22 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8017d1a:	f06f 0303 	mvn.w	r3, #3
 8017d1e:	61fb      	str	r3, [r7, #28]
 8017d20:	e012      	b.n	8017d48 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017d22:	2300      	movs	r3, #0
 8017d24:	683a      	ldr	r2, [r7, #0]
 8017d26:	68b9      	ldr	r1, [r7, #8]
 8017d28:	69b8      	ldr	r0, [r7, #24]
 8017d2a:	f000 fbb9 	bl	80184a0 <xQueueGenericSend>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	2b01      	cmp	r3, #1
 8017d32:	d009      	beq.n	8017d48 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d003      	beq.n	8017d42 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8017d3a:	f06f 0301 	mvn.w	r3, #1
 8017d3e:	61fb      	str	r3, [r7, #28]
 8017d40:	e002      	b.n	8017d48 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8017d42:	f06f 0302 	mvn.w	r3, #2
 8017d46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8017d48:	69fb      	ldr	r3, [r7, #28]
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3720      	adds	r7, #32
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	e000ed04 	.word	0xe000ed04

08017d58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b088      	sub	sp, #32
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	60b9      	str	r1, [r7, #8]
 8017d62:	607a      	str	r2, [r7, #4]
 8017d64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017d6e:	f3ef 8305 	mrs	r3, IPSR
 8017d72:	617b      	str	r3, [r7, #20]
  return(result);
 8017d74:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d028      	beq.n	8017dcc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017d7a:	69bb      	ldr	r3, [r7, #24]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d005      	beq.n	8017d8c <osMessageQueueGet+0x34>
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d002      	beq.n	8017d8c <osMessageQueueGet+0x34>
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d003      	beq.n	8017d94 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8017d8c:	f06f 0303 	mvn.w	r3, #3
 8017d90:	61fb      	str	r3, [r7, #28]
 8017d92:	e037      	b.n	8017e04 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8017d94:	2300      	movs	r3, #0
 8017d96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017d98:	f107 0310 	add.w	r3, r7, #16
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	68b9      	ldr	r1, [r7, #8]
 8017da0:	69b8      	ldr	r0, [r7, #24]
 8017da2:	f000 ff8f 	bl	8018cc4 <xQueueReceiveFromISR>
 8017da6:	4603      	mov	r3, r0
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d003      	beq.n	8017db4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8017dac:	f06f 0302 	mvn.w	r3, #2
 8017db0:	61fb      	str	r3, [r7, #28]
 8017db2:	e027      	b.n	8017e04 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d024      	beq.n	8017e04 <osMessageQueueGet+0xac>
 8017dba:	4b15      	ldr	r3, [pc, #84]	; (8017e10 <osMessageQueueGet+0xb8>)
 8017dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dc0:	601a      	str	r2, [r3, #0]
 8017dc2:	f3bf 8f4f 	dsb	sy
 8017dc6:	f3bf 8f6f 	isb	sy
 8017dca:	e01b      	b.n	8017e04 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017dcc:	69bb      	ldr	r3, [r7, #24]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d002      	beq.n	8017dd8 <osMessageQueueGet+0x80>
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d103      	bne.n	8017de0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8017dd8:	f06f 0303 	mvn.w	r3, #3
 8017ddc:	61fb      	str	r3, [r7, #28]
 8017dde:	e011      	b.n	8017e04 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017de0:	683a      	ldr	r2, [r7, #0]
 8017de2:	68b9      	ldr	r1, [r7, #8]
 8017de4:	69b8      	ldr	r0, [r7, #24]
 8017de6:	f000 fd81 	bl	80188ec <xQueueReceive>
 8017dea:	4603      	mov	r3, r0
 8017dec:	2b01      	cmp	r3, #1
 8017dee:	d009      	beq.n	8017e04 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d003      	beq.n	8017dfe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8017df6:	f06f 0301 	mvn.w	r3, #1
 8017dfa:	61fb      	str	r3, [r7, #28]
 8017dfc:	e002      	b.n	8017e04 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8017dfe:	f06f 0302 	mvn.w	r3, #2
 8017e02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8017e04:	69fb      	ldr	r3, [r7, #28]
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3720      	adds	r7, #32
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	e000ed04 	.word	0xe000ed04

08017e14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017e14:	b480      	push	{r7}
 8017e16:	b085      	sub	sp, #20
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	4a07      	ldr	r2, [pc, #28]	; (8017e40 <vApplicationGetIdleTaskMemory+0x2c>)
 8017e24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	4a06      	ldr	r2, [pc, #24]	; (8017e44 <vApplicationGetIdleTaskMemory+0x30>)
 8017e2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2280      	movs	r2, #128	; 0x80
 8017e30:	601a      	str	r2, [r3, #0]
}
 8017e32:	bf00      	nop
 8017e34:	3714      	adds	r7, #20
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr
 8017e3e:	bf00      	nop
 8017e40:	20001654 	.word	0x20001654
 8017e44:	20001714 	.word	0x20001714

08017e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017e48:	b480      	push	{r7}
 8017e4a:	b085      	sub	sp, #20
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	4a07      	ldr	r2, [pc, #28]	; (8017e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8017e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017e5a:	68bb      	ldr	r3, [r7, #8]
 8017e5c:	4a06      	ldr	r2, [pc, #24]	; (8017e78 <vApplicationGetTimerTaskMemory+0x30>)
 8017e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017e66:	601a      	str	r2, [r3, #0]
}
 8017e68:	bf00      	nop
 8017e6a:	3714      	adds	r7, #20
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e72:	4770      	bx	lr
 8017e74:	20001914 	.word	0x20001914
 8017e78:	200019d4 	.word	0x200019d4

08017e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f103 0208 	add.w	r2, r3, #8
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	f04f 32ff 	mov.w	r2, #4294967295
 8017e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	f103 0208 	add.w	r2, r3, #8
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f103 0208 	add.w	r2, r3, #8
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2200      	movs	r2, #0
 8017eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017eb0:	bf00      	nop
 8017eb2:	370c      	adds	r7, #12
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr

08017ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017eca:	bf00      	nop
 8017ecc:	370c      	adds	r7, #12
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed4:	4770      	bx	lr

08017ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017ed6:	b480      	push	{r7}
 8017ed8:	b085      	sub	sp, #20
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
 8017ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	685b      	ldr	r3, [r3, #4]
 8017ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	68fa      	ldr	r2, [r7, #12]
 8017eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	689a      	ldr	r2, [r3, #8]
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	689b      	ldr	r3, [r3, #8]
 8017ef8:	683a      	ldr	r2, [r7, #0]
 8017efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	683a      	ldr	r2, [r7, #0]
 8017f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	687a      	ldr	r2, [r7, #4]
 8017f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	1c5a      	adds	r2, r3, #1
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	601a      	str	r2, [r3, #0]
}
 8017f12:	bf00      	nop
 8017f14:	3714      	adds	r7, #20
 8017f16:	46bd      	mov	sp, r7
 8017f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1c:	4770      	bx	lr

08017f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017f1e:	b480      	push	{r7}
 8017f20:	b085      	sub	sp, #20
 8017f22:	af00      	add	r7, sp, #0
 8017f24:	6078      	str	r0, [r7, #4]
 8017f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f34:	d103      	bne.n	8017f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	691b      	ldr	r3, [r3, #16]
 8017f3a:	60fb      	str	r3, [r7, #12]
 8017f3c:	e00c      	b.n	8017f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	3308      	adds	r3, #8
 8017f42:	60fb      	str	r3, [r7, #12]
 8017f44:	e002      	b.n	8017f4c <vListInsert+0x2e>
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	60fb      	str	r3, [r7, #12]
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	685b      	ldr	r3, [r3, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	68ba      	ldr	r2, [r7, #8]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d2f6      	bcs.n	8017f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	685a      	ldr	r2, [r3, #4]
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	685b      	ldr	r3, [r3, #4]
 8017f64:	683a      	ldr	r2, [r7, #0]
 8017f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	68fa      	ldr	r2, [r7, #12]
 8017f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	687a      	ldr	r2, [r7, #4]
 8017f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	1c5a      	adds	r2, r3, #1
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	601a      	str	r2, [r3, #0]
}
 8017f84:	bf00      	nop
 8017f86:	3714      	adds	r7, #20
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8e:	4770      	bx	lr

08017f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017f90:	b480      	push	{r7}
 8017f92:	b085      	sub	sp, #20
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	691b      	ldr	r3, [r3, #16]
 8017f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	685b      	ldr	r3, [r3, #4]
 8017fa2:	687a      	ldr	r2, [r7, #4]
 8017fa4:	6892      	ldr	r2, [r2, #8]
 8017fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	689b      	ldr	r3, [r3, #8]
 8017fac:	687a      	ldr	r2, [r7, #4]
 8017fae:	6852      	ldr	r2, [r2, #4]
 8017fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	687a      	ldr	r2, [r7, #4]
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d103      	bne.n	8017fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	689a      	ldr	r2, [r3, #8]
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	1e5a      	subs	r2, r3, #1
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	681b      	ldr	r3, [r3, #0]
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	3714      	adds	r7, #20
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe2:	4770      	bx	lr

08017fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b084      	sub	sp, #16
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d10a      	bne.n	801800e <xQueueGenericReset+0x2a>
	__asm volatile
 8017ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ffc:	f383 8811 	msr	BASEPRI, r3
 8018000:	f3bf 8f6f 	isb	sy
 8018004:	f3bf 8f4f 	dsb	sy
 8018008:	60bb      	str	r3, [r7, #8]
}
 801800a:	bf00      	nop
 801800c:	e7fe      	b.n	801800c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801800e:	f003 fb09 	bl	801b624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801801a:	68f9      	ldr	r1, [r7, #12]
 801801c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801801e:	fb01 f303 	mul.w	r3, r1, r3
 8018022:	441a      	add	r2, r3
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2200      	movs	r2, #0
 801802c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681a      	ldr	r2, [r3, #0]
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	681a      	ldr	r2, [r3, #0]
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801803e:	3b01      	subs	r3, #1
 8018040:	68f9      	ldr	r1, [r7, #12]
 8018042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018044:	fb01 f303 	mul.w	r3, r1, r3
 8018048:	441a      	add	r2, r3
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	22ff      	movs	r2, #255	; 0xff
 8018052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	22ff      	movs	r2, #255	; 0xff
 801805a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d114      	bne.n	801808e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	691b      	ldr	r3, [r3, #16]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d01a      	beq.n	80180a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	3310      	adds	r3, #16
 8018070:	4618      	mov	r0, r3
 8018072:	f002 f91d 	bl	801a2b0 <xTaskRemoveFromEventList>
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	d012      	beq.n	80180a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801807c:	4b0c      	ldr	r3, [pc, #48]	; (80180b0 <xQueueGenericReset+0xcc>)
 801807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	f3bf 8f4f 	dsb	sy
 8018088:	f3bf 8f6f 	isb	sy
 801808c:	e009      	b.n	80180a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	3310      	adds	r3, #16
 8018092:	4618      	mov	r0, r3
 8018094:	f7ff fef2 	bl	8017e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	3324      	adds	r3, #36	; 0x24
 801809c:	4618      	mov	r0, r3
 801809e:	f7ff feed 	bl	8017e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80180a2:	f003 faef 	bl	801b684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80180a6:	2301      	movs	r3, #1
}
 80180a8:	4618      	mov	r0, r3
 80180aa:	3710      	adds	r7, #16
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	e000ed04 	.word	0xe000ed04

080180b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b08e      	sub	sp, #56	; 0x38
 80180b8:	af02      	add	r7, sp, #8
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	60b9      	str	r1, [r7, #8]
 80180be:	607a      	str	r2, [r7, #4]
 80180c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d10a      	bne.n	80180de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80180c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180cc:	f383 8811 	msr	BASEPRI, r3
 80180d0:	f3bf 8f6f 	isb	sy
 80180d4:	f3bf 8f4f 	dsb	sy
 80180d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80180da:	bf00      	nop
 80180dc:	e7fe      	b.n	80180dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d10a      	bne.n	80180fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80180e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e8:	f383 8811 	msr	BASEPRI, r3
 80180ec:	f3bf 8f6f 	isb	sy
 80180f0:	f3bf 8f4f 	dsb	sy
 80180f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80180f6:	bf00      	nop
 80180f8:	e7fe      	b.n	80180f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d002      	beq.n	8018106 <xQueueGenericCreateStatic+0x52>
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d001      	beq.n	801810a <xQueueGenericCreateStatic+0x56>
 8018106:	2301      	movs	r3, #1
 8018108:	e000      	b.n	801810c <xQueueGenericCreateStatic+0x58>
 801810a:	2300      	movs	r3, #0
 801810c:	2b00      	cmp	r3, #0
 801810e:	d10a      	bne.n	8018126 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8018110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018114:	f383 8811 	msr	BASEPRI, r3
 8018118:	f3bf 8f6f 	isb	sy
 801811c:	f3bf 8f4f 	dsb	sy
 8018120:	623b      	str	r3, [r7, #32]
}
 8018122:	bf00      	nop
 8018124:	e7fe      	b.n	8018124 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d102      	bne.n	8018132 <xQueueGenericCreateStatic+0x7e>
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d101      	bne.n	8018136 <xQueueGenericCreateStatic+0x82>
 8018132:	2301      	movs	r3, #1
 8018134:	e000      	b.n	8018138 <xQueueGenericCreateStatic+0x84>
 8018136:	2300      	movs	r3, #0
 8018138:	2b00      	cmp	r3, #0
 801813a:	d10a      	bne.n	8018152 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018140:	f383 8811 	msr	BASEPRI, r3
 8018144:	f3bf 8f6f 	isb	sy
 8018148:	f3bf 8f4f 	dsb	sy
 801814c:	61fb      	str	r3, [r7, #28]
}
 801814e:	bf00      	nop
 8018150:	e7fe      	b.n	8018150 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018152:	2350      	movs	r3, #80	; 0x50
 8018154:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	2b50      	cmp	r3, #80	; 0x50
 801815a:	d00a      	beq.n	8018172 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018160:	f383 8811 	msr	BASEPRI, r3
 8018164:	f3bf 8f6f 	isb	sy
 8018168:	f3bf 8f4f 	dsb	sy
 801816c:	61bb      	str	r3, [r7, #24]
}
 801816e:	bf00      	nop
 8018170:	e7fe      	b.n	8018170 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018172:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801817a:	2b00      	cmp	r3, #0
 801817c:	d00d      	beq.n	801819a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018180:	2201      	movs	r2, #1
 8018182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018186:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801818c:	9300      	str	r3, [sp, #0]
 801818e:	4613      	mov	r3, r2
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	68b9      	ldr	r1, [r7, #8]
 8018194:	68f8      	ldr	r0, [r7, #12]
 8018196:	f000 f83f 	bl	8018218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801819c:	4618      	mov	r0, r3
 801819e:	3730      	adds	r7, #48	; 0x30
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}

080181a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b08a      	sub	sp, #40	; 0x28
 80181a8:	af02      	add	r7, sp, #8
 80181aa:	60f8      	str	r0, [r7, #12]
 80181ac:	60b9      	str	r1, [r7, #8]
 80181ae:	4613      	mov	r3, r2
 80181b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d10a      	bne.n	80181ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80181b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181bc:	f383 8811 	msr	BASEPRI, r3
 80181c0:	f3bf 8f6f 	isb	sy
 80181c4:	f3bf 8f4f 	dsb	sy
 80181c8:	613b      	str	r3, [r7, #16]
}
 80181ca:	bf00      	nop
 80181cc:	e7fe      	b.n	80181cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	68ba      	ldr	r2, [r7, #8]
 80181d2:	fb02 f303 	mul.w	r3, r2, r3
 80181d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80181d8:	69fb      	ldr	r3, [r7, #28]
 80181da:	3350      	adds	r3, #80	; 0x50
 80181dc:	4618      	mov	r0, r3
 80181de:	f003 fb43 	bl	801b868 <pvPortMalloc>
 80181e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80181e4:	69bb      	ldr	r3, [r7, #24]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d011      	beq.n	801820e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80181ee:	697b      	ldr	r3, [r7, #20]
 80181f0:	3350      	adds	r3, #80	; 0x50
 80181f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	2200      	movs	r2, #0
 80181f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80181fc:	79fa      	ldrb	r2, [r7, #7]
 80181fe:	69bb      	ldr	r3, [r7, #24]
 8018200:	9300      	str	r3, [sp, #0]
 8018202:	4613      	mov	r3, r2
 8018204:	697a      	ldr	r2, [r7, #20]
 8018206:	68b9      	ldr	r1, [r7, #8]
 8018208:	68f8      	ldr	r0, [r7, #12]
 801820a:	f000 f805 	bl	8018218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801820e:	69bb      	ldr	r3, [r7, #24]
	}
 8018210:	4618      	mov	r0, r3
 8018212:	3720      	adds	r7, #32
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}

08018218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	60f8      	str	r0, [r7, #12]
 8018220:	60b9      	str	r1, [r7, #8]
 8018222:	607a      	str	r2, [r7, #4]
 8018224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018226:	68bb      	ldr	r3, [r7, #8]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d103      	bne.n	8018234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801822c:	69bb      	ldr	r3, [r7, #24]
 801822e:	69ba      	ldr	r2, [r7, #24]
 8018230:	601a      	str	r2, [r3, #0]
 8018232:	e002      	b.n	801823a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018234:	69bb      	ldr	r3, [r7, #24]
 8018236:	687a      	ldr	r2, [r7, #4]
 8018238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	68fa      	ldr	r2, [r7, #12]
 801823e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018240:	69bb      	ldr	r3, [r7, #24]
 8018242:	68ba      	ldr	r2, [r7, #8]
 8018244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018246:	2101      	movs	r1, #1
 8018248:	69b8      	ldr	r0, [r7, #24]
 801824a:	f7ff fecb 	bl	8017fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	78fa      	ldrb	r2, [r7, #3]
 8018252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018256:	bf00      	nop
 8018258:	3710      	adds	r7, #16
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}

0801825e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801825e:	b580      	push	{r7, lr}
 8018260:	b082      	sub	sp, #8
 8018262:	af00      	add	r7, sp, #0
 8018264:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d00e      	beq.n	801828a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2200      	movs	r2, #0
 8018270:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	2200      	movs	r2, #0
 8018276:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	2200      	movs	r2, #0
 801827c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801827e:	2300      	movs	r3, #0
 8018280:	2200      	movs	r2, #0
 8018282:	2100      	movs	r1, #0
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f000 f90b 	bl	80184a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801828a:	bf00      	nop
 801828c:	3708      	adds	r7, #8
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}

08018292 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8018292:	b580      	push	{r7, lr}
 8018294:	b086      	sub	sp, #24
 8018296:	af00      	add	r7, sp, #0
 8018298:	4603      	mov	r3, r0
 801829a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801829c:	2301      	movs	r3, #1
 801829e:	617b      	str	r3, [r7, #20]
 80182a0:	2300      	movs	r3, #0
 80182a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80182a4:	79fb      	ldrb	r3, [r7, #7]
 80182a6:	461a      	mov	r2, r3
 80182a8:	6939      	ldr	r1, [r7, #16]
 80182aa:	6978      	ldr	r0, [r7, #20]
 80182ac:	f7ff ff7a 	bl	80181a4 <xQueueGenericCreate>
 80182b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80182b2:	68f8      	ldr	r0, [r7, #12]
 80182b4:	f7ff ffd3 	bl	801825e <prvInitialiseMutex>

		return xNewQueue;
 80182b8:	68fb      	ldr	r3, [r7, #12]
	}
 80182ba:	4618      	mov	r0, r3
 80182bc:	3718      	adds	r7, #24
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd80      	pop	{r7, pc}

080182c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80182c2:	b580      	push	{r7, lr}
 80182c4:	b088      	sub	sp, #32
 80182c6:	af02      	add	r7, sp, #8
 80182c8:	4603      	mov	r3, r0
 80182ca:	6039      	str	r1, [r7, #0]
 80182cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80182ce:	2301      	movs	r3, #1
 80182d0:	617b      	str	r3, [r7, #20]
 80182d2:	2300      	movs	r3, #0
 80182d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80182d6:	79fb      	ldrb	r3, [r7, #7]
 80182d8:	9300      	str	r3, [sp, #0]
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	2200      	movs	r2, #0
 80182de:	6939      	ldr	r1, [r7, #16]
 80182e0:	6978      	ldr	r0, [r7, #20]
 80182e2:	f7ff fee7 	bl	80180b4 <xQueueGenericCreateStatic>
 80182e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80182e8:	68f8      	ldr	r0, [r7, #12]
 80182ea:	f7ff ffb8 	bl	801825e <prvInitialiseMutex>

		return xNewQueue;
 80182ee:	68fb      	ldr	r3, [r7, #12]
	}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3718      	adds	r7, #24
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}

080182f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80182f8:	b590      	push	{r4, r7, lr}
 80182fa:	b087      	sub	sp, #28
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8018304:	693b      	ldr	r3, [r7, #16]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d10a      	bne.n	8018320 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 801830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801830e:	f383 8811 	msr	BASEPRI, r3
 8018312:	f3bf 8f6f 	isb	sy
 8018316:	f3bf 8f4f 	dsb	sy
 801831a:	60fb      	str	r3, [r7, #12]
}
 801831c:	bf00      	nop
 801831e:	e7fe      	b.n	801831e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018320:	693b      	ldr	r3, [r7, #16]
 8018322:	689c      	ldr	r4, [r3, #8]
 8018324:	f002 f9ac 	bl	801a680 <xTaskGetCurrentTaskHandle>
 8018328:	4603      	mov	r3, r0
 801832a:	429c      	cmp	r4, r3
 801832c:	d111      	bne.n	8018352 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	1e5a      	subs	r2, r3, #1
 8018334:	693b      	ldr	r3, [r7, #16]
 8018336:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018338:	693b      	ldr	r3, [r7, #16]
 801833a:	68db      	ldr	r3, [r3, #12]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d105      	bne.n	801834c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018340:	2300      	movs	r3, #0
 8018342:	2200      	movs	r2, #0
 8018344:	2100      	movs	r1, #0
 8018346:	6938      	ldr	r0, [r7, #16]
 8018348:	f000 f8aa 	bl	80184a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801834c:	2301      	movs	r3, #1
 801834e:	617b      	str	r3, [r7, #20]
 8018350:	e001      	b.n	8018356 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8018352:	2300      	movs	r3, #0
 8018354:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8018356:	697b      	ldr	r3, [r7, #20]
	}
 8018358:	4618      	mov	r0, r3
 801835a:	371c      	adds	r7, #28
 801835c:	46bd      	mov	sp, r7
 801835e:	bd90      	pop	{r4, r7, pc}

08018360 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8018360:	b590      	push	{r4, r7, lr}
 8018362:	b087      	sub	sp, #28
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d10a      	bne.n	801838a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8018374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018378:	f383 8811 	msr	BASEPRI, r3
 801837c:	f3bf 8f6f 	isb	sy
 8018380:	f3bf 8f4f 	dsb	sy
 8018384:	60fb      	str	r3, [r7, #12]
}
 8018386:	bf00      	nop
 8018388:	e7fe      	b.n	8018388 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801838a:	693b      	ldr	r3, [r7, #16]
 801838c:	689c      	ldr	r4, [r3, #8]
 801838e:	f002 f977 	bl	801a680 <xTaskGetCurrentTaskHandle>
 8018392:	4603      	mov	r3, r0
 8018394:	429c      	cmp	r4, r3
 8018396:	d107      	bne.n	80183a8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018398:	693b      	ldr	r3, [r7, #16]
 801839a:	68db      	ldr	r3, [r3, #12]
 801839c:	1c5a      	adds	r2, r3, #1
 801839e:	693b      	ldr	r3, [r7, #16]
 80183a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80183a2:	2301      	movs	r3, #1
 80183a4:	617b      	str	r3, [r7, #20]
 80183a6:	e00c      	b.n	80183c2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80183a8:	6839      	ldr	r1, [r7, #0]
 80183aa:	6938      	ldr	r0, [r7, #16]
 80183ac:	f000 fb7e 	bl	8018aac <xQueueSemaphoreTake>
 80183b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d004      	beq.n	80183c2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	68db      	ldr	r3, [r3, #12]
 80183bc:	1c5a      	adds	r2, r3, #1
 80183be:	693b      	ldr	r3, [r7, #16]
 80183c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80183c2:	697b      	ldr	r3, [r7, #20]
	}
 80183c4:	4618      	mov	r0, r3
 80183c6:	371c      	adds	r7, #28
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd90      	pop	{r4, r7, pc}

080183cc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b08a      	sub	sp, #40	; 0x28
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d10a      	bne.n	80183f4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80183de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e2:	f383 8811 	msr	BASEPRI, r3
 80183e6:	f3bf 8f6f 	isb	sy
 80183ea:	f3bf 8f4f 	dsb	sy
 80183ee:	61bb      	str	r3, [r7, #24]
}
 80183f0:	bf00      	nop
 80183f2:	e7fe      	b.n	80183f2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80183f4:	68ba      	ldr	r2, [r7, #8]
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d90a      	bls.n	8018412 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80183fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018400:	f383 8811 	msr	BASEPRI, r3
 8018404:	f3bf 8f6f 	isb	sy
 8018408:	f3bf 8f4f 	dsb	sy
 801840c:	617b      	str	r3, [r7, #20]
}
 801840e:	bf00      	nop
 8018410:	e7fe      	b.n	8018410 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018412:	2302      	movs	r3, #2
 8018414:	9300      	str	r3, [sp, #0]
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2200      	movs	r2, #0
 801841a:	2100      	movs	r1, #0
 801841c:	68f8      	ldr	r0, [r7, #12]
 801841e:	f7ff fe49 	bl	80180b4 <xQueueGenericCreateStatic>
 8018422:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8018424:	69fb      	ldr	r3, [r7, #28]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d002      	beq.n	8018430 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	68ba      	ldr	r2, [r7, #8]
 801842e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018430:	69fb      	ldr	r3, [r7, #28]
	}
 8018432:	4618      	mov	r0, r3
 8018434:	3720      	adds	r7, #32
 8018436:	46bd      	mov	sp, r7
 8018438:	bd80      	pop	{r7, pc}

0801843a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801843a:	b580      	push	{r7, lr}
 801843c:	b086      	sub	sp, #24
 801843e:	af00      	add	r7, sp, #0
 8018440:	6078      	str	r0, [r7, #4]
 8018442:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d10a      	bne.n	8018460 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844e:	f383 8811 	msr	BASEPRI, r3
 8018452:	f3bf 8f6f 	isb	sy
 8018456:	f3bf 8f4f 	dsb	sy
 801845a:	613b      	str	r3, [r7, #16]
}
 801845c:	bf00      	nop
 801845e:	e7fe      	b.n	801845e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018460:	683a      	ldr	r2, [r7, #0]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	429a      	cmp	r2, r3
 8018466:	d90a      	bls.n	801847e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8018468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801846c:	f383 8811 	msr	BASEPRI, r3
 8018470:	f3bf 8f6f 	isb	sy
 8018474:	f3bf 8f4f 	dsb	sy
 8018478:	60fb      	str	r3, [r7, #12]
}
 801847a:	bf00      	nop
 801847c:	e7fe      	b.n	801847c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801847e:	2202      	movs	r2, #2
 8018480:	2100      	movs	r1, #0
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f7ff fe8e 	bl	80181a4 <xQueueGenericCreate>
 8018488:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d002      	beq.n	8018496 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	683a      	ldr	r2, [r7, #0]
 8018494:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018496:	697b      	ldr	r3, [r7, #20]
	}
 8018498:	4618      	mov	r0, r3
 801849a:	3718      	adds	r7, #24
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}

080184a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b08e      	sub	sp, #56	; 0x38
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	60f8      	str	r0, [r7, #12]
 80184a8:	60b9      	str	r1, [r7, #8]
 80184aa:	607a      	str	r2, [r7, #4]
 80184ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80184ae:	2300      	movs	r3, #0
 80184b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80184b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d10a      	bne.n	80184d2 <xQueueGenericSend+0x32>
	__asm volatile
 80184bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184c0:	f383 8811 	msr	BASEPRI, r3
 80184c4:	f3bf 8f6f 	isb	sy
 80184c8:	f3bf 8f4f 	dsb	sy
 80184cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80184ce:	bf00      	nop
 80184d0:	e7fe      	b.n	80184d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d103      	bne.n	80184e0 <xQueueGenericSend+0x40>
 80184d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d101      	bne.n	80184e4 <xQueueGenericSend+0x44>
 80184e0:	2301      	movs	r3, #1
 80184e2:	e000      	b.n	80184e6 <xQueueGenericSend+0x46>
 80184e4:	2300      	movs	r3, #0
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d10a      	bne.n	8018500 <xQueueGenericSend+0x60>
	__asm volatile
 80184ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ee:	f383 8811 	msr	BASEPRI, r3
 80184f2:	f3bf 8f6f 	isb	sy
 80184f6:	f3bf 8f4f 	dsb	sy
 80184fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80184fc:	bf00      	nop
 80184fe:	e7fe      	b.n	80184fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	2b02      	cmp	r3, #2
 8018504:	d103      	bne.n	801850e <xQueueGenericSend+0x6e>
 8018506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801850a:	2b01      	cmp	r3, #1
 801850c:	d101      	bne.n	8018512 <xQueueGenericSend+0x72>
 801850e:	2301      	movs	r3, #1
 8018510:	e000      	b.n	8018514 <xQueueGenericSend+0x74>
 8018512:	2300      	movs	r3, #0
 8018514:	2b00      	cmp	r3, #0
 8018516:	d10a      	bne.n	801852e <xQueueGenericSend+0x8e>
	__asm volatile
 8018518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801851c:	f383 8811 	msr	BASEPRI, r3
 8018520:	f3bf 8f6f 	isb	sy
 8018524:	f3bf 8f4f 	dsb	sy
 8018528:	623b      	str	r3, [r7, #32]
}
 801852a:	bf00      	nop
 801852c:	e7fe      	b.n	801852c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801852e:	f002 f8b7 	bl	801a6a0 <xTaskGetSchedulerState>
 8018532:	4603      	mov	r3, r0
 8018534:	2b00      	cmp	r3, #0
 8018536:	d102      	bne.n	801853e <xQueueGenericSend+0x9e>
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d101      	bne.n	8018542 <xQueueGenericSend+0xa2>
 801853e:	2301      	movs	r3, #1
 8018540:	e000      	b.n	8018544 <xQueueGenericSend+0xa4>
 8018542:	2300      	movs	r3, #0
 8018544:	2b00      	cmp	r3, #0
 8018546:	d10a      	bne.n	801855e <xQueueGenericSend+0xbe>
	__asm volatile
 8018548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801854c:	f383 8811 	msr	BASEPRI, r3
 8018550:	f3bf 8f6f 	isb	sy
 8018554:	f3bf 8f4f 	dsb	sy
 8018558:	61fb      	str	r3, [r7, #28]
}
 801855a:	bf00      	nop
 801855c:	e7fe      	b.n	801855c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801855e:	f003 f861 	bl	801b624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801856a:	429a      	cmp	r2, r3
 801856c:	d302      	bcc.n	8018574 <xQueueGenericSend+0xd4>
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	2b02      	cmp	r3, #2
 8018572:	d129      	bne.n	80185c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018574:	683a      	ldr	r2, [r7, #0]
 8018576:	68b9      	ldr	r1, [r7, #8]
 8018578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801857a:	f000 fc9a 	bl	8018eb2 <prvCopyDataToQueue>
 801857e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018584:	2b00      	cmp	r3, #0
 8018586:	d010      	beq.n	80185aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858a:	3324      	adds	r3, #36	; 0x24
 801858c:	4618      	mov	r0, r3
 801858e:	f001 fe8f 	bl	801a2b0 <xTaskRemoveFromEventList>
 8018592:	4603      	mov	r3, r0
 8018594:	2b00      	cmp	r3, #0
 8018596:	d013      	beq.n	80185c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018598:	4b3f      	ldr	r3, [pc, #252]	; (8018698 <xQueueGenericSend+0x1f8>)
 801859a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801859e:	601a      	str	r2, [r3, #0]
 80185a0:	f3bf 8f4f 	dsb	sy
 80185a4:	f3bf 8f6f 	isb	sy
 80185a8:	e00a      	b.n	80185c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80185aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d007      	beq.n	80185c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80185b0:	4b39      	ldr	r3, [pc, #228]	; (8018698 <xQueueGenericSend+0x1f8>)
 80185b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185b6:	601a      	str	r2, [r3, #0]
 80185b8:	f3bf 8f4f 	dsb	sy
 80185bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80185c0:	f003 f860 	bl	801b684 <vPortExitCritical>
				return pdPASS;
 80185c4:	2301      	movs	r3, #1
 80185c6:	e063      	b.n	8018690 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d103      	bne.n	80185d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80185ce:	f003 f859 	bl	801b684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80185d2:	2300      	movs	r3, #0
 80185d4:	e05c      	b.n	8018690 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80185d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d106      	bne.n	80185ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80185dc:	f107 0314 	add.w	r3, r7, #20
 80185e0:	4618      	mov	r0, r3
 80185e2:	f001 feef 	bl	801a3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80185e6:	2301      	movs	r3, #1
 80185e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80185ea:	f003 f84b 	bl	801b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80185ee:	f001 fc09 	bl	8019e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80185f2:	f003 f817 	bl	801b624 <vPortEnterCritical>
 80185f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185fc:	b25b      	sxtb	r3, r3
 80185fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018602:	d103      	bne.n	801860c <xQueueGenericSend+0x16c>
 8018604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018606:	2200      	movs	r2, #0
 8018608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801860e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018612:	b25b      	sxtb	r3, r3
 8018614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018618:	d103      	bne.n	8018622 <xQueueGenericSend+0x182>
 801861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861c:	2200      	movs	r2, #0
 801861e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018622:	f003 f82f 	bl	801b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018626:	1d3a      	adds	r2, r7, #4
 8018628:	f107 0314 	add.w	r3, r7, #20
 801862c:	4611      	mov	r1, r2
 801862e:	4618      	mov	r0, r3
 8018630:	f001 fede 	bl	801a3f0 <xTaskCheckForTimeOut>
 8018634:	4603      	mov	r3, r0
 8018636:	2b00      	cmp	r3, #0
 8018638:	d124      	bne.n	8018684 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801863a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801863c:	f000 fd31 	bl	80190a2 <prvIsQueueFull>
 8018640:	4603      	mov	r3, r0
 8018642:	2b00      	cmp	r3, #0
 8018644:	d018      	beq.n	8018678 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018648:	3310      	adds	r3, #16
 801864a:	687a      	ldr	r2, [r7, #4]
 801864c:	4611      	mov	r1, r2
 801864e:	4618      	mov	r0, r3
 8018650:	f001 fdde 	bl	801a210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018656:	f000 fcbc 	bl	8018fd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801865a:	f001 fbe1 	bl	8019e20 <xTaskResumeAll>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	f47f af7c 	bne.w	801855e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8018666:	4b0c      	ldr	r3, [pc, #48]	; (8018698 <xQueueGenericSend+0x1f8>)
 8018668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801866c:	601a      	str	r2, [r3, #0]
 801866e:	f3bf 8f4f 	dsb	sy
 8018672:	f3bf 8f6f 	isb	sy
 8018676:	e772      	b.n	801855e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801867a:	f000 fcaa 	bl	8018fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801867e:	f001 fbcf 	bl	8019e20 <xTaskResumeAll>
 8018682:	e76c      	b.n	801855e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018686:	f000 fca4 	bl	8018fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801868a:	f001 fbc9 	bl	8019e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801868e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018690:	4618      	mov	r0, r3
 8018692:	3738      	adds	r7, #56	; 0x38
 8018694:	46bd      	mov	sp, r7
 8018696:	bd80      	pop	{r7, pc}
 8018698:	e000ed04 	.word	0xe000ed04

0801869c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b090      	sub	sp, #64	; 0x40
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	60f8      	str	r0, [r7, #12]
 80186a4:	60b9      	str	r1, [r7, #8]
 80186a6:	607a      	str	r2, [r7, #4]
 80186a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80186ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d10a      	bne.n	80186ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80186b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186b8:	f383 8811 	msr	BASEPRI, r3
 80186bc:	f3bf 8f6f 	isb	sy
 80186c0:	f3bf 8f4f 	dsb	sy
 80186c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80186c6:	bf00      	nop
 80186c8:	e7fe      	b.n	80186c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d103      	bne.n	80186d8 <xQueueGenericSendFromISR+0x3c>
 80186d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d101      	bne.n	80186dc <xQueueGenericSendFromISR+0x40>
 80186d8:	2301      	movs	r3, #1
 80186da:	e000      	b.n	80186de <xQueueGenericSendFromISR+0x42>
 80186dc:	2300      	movs	r3, #0
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d10a      	bne.n	80186f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80186e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e6:	f383 8811 	msr	BASEPRI, r3
 80186ea:	f3bf 8f6f 	isb	sy
 80186ee:	f3bf 8f4f 	dsb	sy
 80186f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80186f4:	bf00      	nop
 80186f6:	e7fe      	b.n	80186f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80186f8:	683b      	ldr	r3, [r7, #0]
 80186fa:	2b02      	cmp	r3, #2
 80186fc:	d103      	bne.n	8018706 <xQueueGenericSendFromISR+0x6a>
 80186fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018702:	2b01      	cmp	r3, #1
 8018704:	d101      	bne.n	801870a <xQueueGenericSendFromISR+0x6e>
 8018706:	2301      	movs	r3, #1
 8018708:	e000      	b.n	801870c <xQueueGenericSendFromISR+0x70>
 801870a:	2300      	movs	r3, #0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d10a      	bne.n	8018726 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018714:	f383 8811 	msr	BASEPRI, r3
 8018718:	f3bf 8f6f 	isb	sy
 801871c:	f3bf 8f4f 	dsb	sy
 8018720:	623b      	str	r3, [r7, #32]
}
 8018722:	bf00      	nop
 8018724:	e7fe      	b.n	8018724 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018726:	f003 f85f 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 801872a:	f3ef 8211 	mrs	r2, BASEPRI
 801872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018732:	f383 8811 	msr	BASEPRI, r3
 8018736:	f3bf 8f6f 	isb	sy
 801873a:	f3bf 8f4f 	dsb	sy
 801873e:	61fa      	str	r2, [r7, #28]
 8018740:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8018742:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018744:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801874e:	429a      	cmp	r2, r3
 8018750:	d302      	bcc.n	8018758 <xQueueGenericSendFromISR+0xbc>
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	2b02      	cmp	r3, #2
 8018756:	d12f      	bne.n	80187b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801875a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018766:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018768:	683a      	ldr	r2, [r7, #0]
 801876a:	68b9      	ldr	r1, [r7, #8]
 801876c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801876e:	f000 fba0 	bl	8018eb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018772:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8018776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801877a:	d112      	bne.n	80187a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018780:	2b00      	cmp	r3, #0
 8018782:	d016      	beq.n	80187b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018786:	3324      	adds	r3, #36	; 0x24
 8018788:	4618      	mov	r0, r3
 801878a:	f001 fd91 	bl	801a2b0 <xTaskRemoveFromEventList>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d00e      	beq.n	80187b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d00b      	beq.n	80187b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	2201      	movs	r2, #1
 801879e:	601a      	str	r2, [r3, #0]
 80187a0:	e007      	b.n	80187b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80187a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80187a6:	3301      	adds	r3, #1
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	b25a      	sxtb	r2, r3
 80187ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80187b2:	2301      	movs	r3, #1
 80187b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80187b6:	e001      	b.n	80187bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80187b8:	2300      	movs	r3, #0
 80187ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80187bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187be:	617b      	str	r3, [r7, #20]
	__asm volatile
 80187c0:	697b      	ldr	r3, [r7, #20]
 80187c2:	f383 8811 	msr	BASEPRI, r3
}
 80187c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80187c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80187ca:	4618      	mov	r0, r3
 80187cc:	3740      	adds	r7, #64	; 0x40
 80187ce:	46bd      	mov	sp, r7
 80187d0:	bd80      	pop	{r7, pc}

080187d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80187d2:	b580      	push	{r7, lr}
 80187d4:	b08e      	sub	sp, #56	; 0x38
 80187d6:	af00      	add	r7, sp, #0
 80187d8:	6078      	str	r0, [r7, #4]
 80187da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80187e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d10a      	bne.n	80187fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80187e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ea:	f383 8811 	msr	BASEPRI, r3
 80187ee:	f3bf 8f6f 	isb	sy
 80187f2:	f3bf 8f4f 	dsb	sy
 80187f6:	623b      	str	r3, [r7, #32]
}
 80187f8:	bf00      	nop
 80187fa:	e7fe      	b.n	80187fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80187fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018800:	2b00      	cmp	r3, #0
 8018802:	d00a      	beq.n	801881a <xQueueGiveFromISR+0x48>
	__asm volatile
 8018804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018808:	f383 8811 	msr	BASEPRI, r3
 801880c:	f3bf 8f6f 	isb	sy
 8018810:	f3bf 8f4f 	dsb	sy
 8018814:	61fb      	str	r3, [r7, #28]
}
 8018816:	bf00      	nop
 8018818:	e7fe      	b.n	8018818 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d103      	bne.n	801882a <xQueueGiveFromISR+0x58>
 8018822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018824:	689b      	ldr	r3, [r3, #8]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d101      	bne.n	801882e <xQueueGiveFromISR+0x5c>
 801882a:	2301      	movs	r3, #1
 801882c:	e000      	b.n	8018830 <xQueueGiveFromISR+0x5e>
 801882e:	2300      	movs	r3, #0
 8018830:	2b00      	cmp	r3, #0
 8018832:	d10a      	bne.n	801884a <xQueueGiveFromISR+0x78>
	__asm volatile
 8018834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018838:	f383 8811 	msr	BASEPRI, r3
 801883c:	f3bf 8f6f 	isb	sy
 8018840:	f3bf 8f4f 	dsb	sy
 8018844:	61bb      	str	r3, [r7, #24]
}
 8018846:	bf00      	nop
 8018848:	e7fe      	b.n	8018848 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801884a:	f002 ffcd 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 801884e:	f3ef 8211 	mrs	r2, BASEPRI
 8018852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018856:	f383 8811 	msr	BASEPRI, r3
 801885a:	f3bf 8f6f 	isb	sy
 801885e:	f3bf 8f4f 	dsb	sy
 8018862:	617a      	str	r2, [r7, #20]
 8018864:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018866:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018868:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801886e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018876:	429a      	cmp	r2, r3
 8018878:	d22b      	bcs.n	80188d2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018886:	1c5a      	adds	r2, r3, #1
 8018888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801888c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018894:	d112      	bne.n	80188bc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801889a:	2b00      	cmp	r3, #0
 801889c:	d016      	beq.n	80188cc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a0:	3324      	adds	r3, #36	; 0x24
 80188a2:	4618      	mov	r0, r3
 80188a4:	f001 fd04 	bl	801a2b0 <xTaskRemoveFromEventList>
 80188a8:	4603      	mov	r3, r0
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d00e      	beq.n	80188cc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80188ae:	683b      	ldr	r3, [r7, #0]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d00b      	beq.n	80188cc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	2201      	movs	r2, #1
 80188b8:	601a      	str	r2, [r3, #0]
 80188ba:	e007      	b.n	80188cc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80188bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188c0:	3301      	adds	r3, #1
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	b25a      	sxtb	r2, r3
 80188c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80188cc:	2301      	movs	r3, #1
 80188ce:	637b      	str	r3, [r7, #52]	; 0x34
 80188d0:	e001      	b.n	80188d6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80188d2:	2300      	movs	r3, #0
 80188d4:	637b      	str	r3, [r7, #52]	; 0x34
 80188d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	f383 8811 	msr	BASEPRI, r3
}
 80188e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80188e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3738      	adds	r7, #56	; 0x38
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b08c      	sub	sp, #48	; 0x30
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60f8      	str	r0, [r7, #12]
 80188f4:	60b9      	str	r1, [r7, #8]
 80188f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80188f8:	2300      	movs	r3, #0
 80188fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018902:	2b00      	cmp	r3, #0
 8018904:	d10a      	bne.n	801891c <xQueueReceive+0x30>
	__asm volatile
 8018906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801890a:	f383 8811 	msr	BASEPRI, r3
 801890e:	f3bf 8f6f 	isb	sy
 8018912:	f3bf 8f4f 	dsb	sy
 8018916:	623b      	str	r3, [r7, #32]
}
 8018918:	bf00      	nop
 801891a:	e7fe      	b.n	801891a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d103      	bne.n	801892a <xQueueReceive+0x3e>
 8018922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018926:	2b00      	cmp	r3, #0
 8018928:	d101      	bne.n	801892e <xQueueReceive+0x42>
 801892a:	2301      	movs	r3, #1
 801892c:	e000      	b.n	8018930 <xQueueReceive+0x44>
 801892e:	2300      	movs	r3, #0
 8018930:	2b00      	cmp	r3, #0
 8018932:	d10a      	bne.n	801894a <xQueueReceive+0x5e>
	__asm volatile
 8018934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018938:	f383 8811 	msr	BASEPRI, r3
 801893c:	f3bf 8f6f 	isb	sy
 8018940:	f3bf 8f4f 	dsb	sy
 8018944:	61fb      	str	r3, [r7, #28]
}
 8018946:	bf00      	nop
 8018948:	e7fe      	b.n	8018948 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801894a:	f001 fea9 	bl	801a6a0 <xTaskGetSchedulerState>
 801894e:	4603      	mov	r3, r0
 8018950:	2b00      	cmp	r3, #0
 8018952:	d102      	bne.n	801895a <xQueueReceive+0x6e>
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d101      	bne.n	801895e <xQueueReceive+0x72>
 801895a:	2301      	movs	r3, #1
 801895c:	e000      	b.n	8018960 <xQueueReceive+0x74>
 801895e:	2300      	movs	r3, #0
 8018960:	2b00      	cmp	r3, #0
 8018962:	d10a      	bne.n	801897a <xQueueReceive+0x8e>
	__asm volatile
 8018964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018968:	f383 8811 	msr	BASEPRI, r3
 801896c:	f3bf 8f6f 	isb	sy
 8018970:	f3bf 8f4f 	dsb	sy
 8018974:	61bb      	str	r3, [r7, #24]
}
 8018976:	bf00      	nop
 8018978:	e7fe      	b.n	8018978 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801897a:	f002 fe53 	bl	801b624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018986:	2b00      	cmp	r3, #0
 8018988:	d01f      	beq.n	80189ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801898a:	68b9      	ldr	r1, [r7, #8]
 801898c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801898e:	f000 fafa 	bl	8018f86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018994:	1e5a      	subs	r2, r3, #1
 8018996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899c:	691b      	ldr	r3, [r3, #16]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d00f      	beq.n	80189c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80189a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a4:	3310      	adds	r3, #16
 80189a6:	4618      	mov	r0, r3
 80189a8:	f001 fc82 	bl	801a2b0 <xTaskRemoveFromEventList>
 80189ac:	4603      	mov	r3, r0
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d007      	beq.n	80189c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80189b2:	4b3d      	ldr	r3, [pc, #244]	; (8018aa8 <xQueueReceive+0x1bc>)
 80189b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189b8:	601a      	str	r2, [r3, #0]
 80189ba:	f3bf 8f4f 	dsb	sy
 80189be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80189c2:	f002 fe5f 	bl	801b684 <vPortExitCritical>
				return pdPASS;
 80189c6:	2301      	movs	r3, #1
 80189c8:	e069      	b.n	8018a9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d103      	bne.n	80189d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80189d0:	f002 fe58 	bl	801b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80189d4:	2300      	movs	r3, #0
 80189d6:	e062      	b.n	8018a9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80189d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d106      	bne.n	80189ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80189de:	f107 0310 	add.w	r3, r7, #16
 80189e2:	4618      	mov	r0, r3
 80189e4:	f001 fcee 	bl	801a3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80189e8:	2301      	movs	r3, #1
 80189ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80189ec:	f002 fe4a 	bl	801b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80189f0:	f001 fa08 	bl	8019e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80189f4:	f002 fe16 	bl	801b624 <vPortEnterCritical>
 80189f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80189fe:	b25b      	sxtb	r3, r3
 8018a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a04:	d103      	bne.n	8018a0e <xQueueReceive+0x122>
 8018a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a08:	2200      	movs	r2, #0
 8018a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018a14:	b25b      	sxtb	r3, r3
 8018a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a1a:	d103      	bne.n	8018a24 <xQueueReceive+0x138>
 8018a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a1e:	2200      	movs	r2, #0
 8018a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018a24:	f002 fe2e 	bl	801b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018a28:	1d3a      	adds	r2, r7, #4
 8018a2a:	f107 0310 	add.w	r3, r7, #16
 8018a2e:	4611      	mov	r1, r2
 8018a30:	4618      	mov	r0, r3
 8018a32:	f001 fcdd 	bl	801a3f0 <xTaskCheckForTimeOut>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d123      	bne.n	8018a84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a3e:	f000 fb1a 	bl	8019076 <prvIsQueueEmpty>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d017      	beq.n	8018a78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a4a:	3324      	adds	r3, #36	; 0x24
 8018a4c:	687a      	ldr	r2, [r7, #4]
 8018a4e:	4611      	mov	r1, r2
 8018a50:	4618      	mov	r0, r3
 8018a52:	f001 fbdd 	bl	801a210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a58:	f000 fabb 	bl	8018fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018a5c:	f001 f9e0 	bl	8019e20 <xTaskResumeAll>
 8018a60:	4603      	mov	r3, r0
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d189      	bne.n	801897a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018a66:	4b10      	ldr	r3, [pc, #64]	; (8018aa8 <xQueueReceive+0x1bc>)
 8018a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a6c:	601a      	str	r2, [r3, #0]
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	f3bf 8f6f 	isb	sy
 8018a76:	e780      	b.n	801897a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a7a:	f000 faaa 	bl	8018fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018a7e:	f001 f9cf 	bl	8019e20 <xTaskResumeAll>
 8018a82:	e77a      	b.n	801897a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a86:	f000 faa4 	bl	8018fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018a8a:	f001 f9c9 	bl	8019e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a90:	f000 faf1 	bl	8019076 <prvIsQueueEmpty>
 8018a94:	4603      	mov	r3, r0
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	f43f af6f 	beq.w	801897a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	3730      	adds	r7, #48	; 0x30
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	e000ed04 	.word	0xe000ed04

08018aac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b08e      	sub	sp, #56	; 0x38
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
 8018ab4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d10a      	bne.n	8018ade <xQueueSemaphoreTake+0x32>
	__asm volatile
 8018ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018acc:	f383 8811 	msr	BASEPRI, r3
 8018ad0:	f3bf 8f6f 	isb	sy
 8018ad4:	f3bf 8f4f 	dsb	sy
 8018ad8:	623b      	str	r3, [r7, #32]
}
 8018ada:	bf00      	nop
 8018adc:	e7fe      	b.n	8018adc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d00a      	beq.n	8018afc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8018ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aea:	f383 8811 	msr	BASEPRI, r3
 8018aee:	f3bf 8f6f 	isb	sy
 8018af2:	f3bf 8f4f 	dsb	sy
 8018af6:	61fb      	str	r3, [r7, #28]
}
 8018af8:	bf00      	nop
 8018afa:	e7fe      	b.n	8018afa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018afc:	f001 fdd0 	bl	801a6a0 <xTaskGetSchedulerState>
 8018b00:	4603      	mov	r3, r0
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d102      	bne.n	8018b0c <xQueueSemaphoreTake+0x60>
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d101      	bne.n	8018b10 <xQueueSemaphoreTake+0x64>
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	e000      	b.n	8018b12 <xQueueSemaphoreTake+0x66>
 8018b10:	2300      	movs	r3, #0
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d10a      	bne.n	8018b2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8018b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1a:	f383 8811 	msr	BASEPRI, r3
 8018b1e:	f3bf 8f6f 	isb	sy
 8018b22:	f3bf 8f4f 	dsb	sy
 8018b26:	61bb      	str	r3, [r7, #24]
}
 8018b28:	bf00      	nop
 8018b2a:	e7fe      	b.n	8018b2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018b2c:	f002 fd7a 	bl	801b624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d024      	beq.n	8018b86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b3e:	1e5a      	subs	r2, r3, #1
 8018b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d104      	bne.n	8018b56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018b4c:	f001 ff1e 	bl	801a98c <pvTaskIncrementMutexHeldCount>
 8018b50:	4602      	mov	r2, r0
 8018b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b58:	691b      	ldr	r3, [r3, #16]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d00f      	beq.n	8018b7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b60:	3310      	adds	r3, #16
 8018b62:	4618      	mov	r0, r3
 8018b64:	f001 fba4 	bl	801a2b0 <xTaskRemoveFromEventList>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d007      	beq.n	8018b7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018b6e:	4b54      	ldr	r3, [pc, #336]	; (8018cc0 <xQueueSemaphoreTake+0x214>)
 8018b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b74:	601a      	str	r2, [r3, #0]
 8018b76:	f3bf 8f4f 	dsb	sy
 8018b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018b7e:	f002 fd81 	bl	801b684 <vPortExitCritical>
				return pdPASS;
 8018b82:	2301      	movs	r3, #1
 8018b84:	e097      	b.n	8018cb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018b86:	683b      	ldr	r3, [r7, #0]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d111      	bne.n	8018bb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d00a      	beq.n	8018ba8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8018b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b96:	f383 8811 	msr	BASEPRI, r3
 8018b9a:	f3bf 8f6f 	isb	sy
 8018b9e:	f3bf 8f4f 	dsb	sy
 8018ba2:	617b      	str	r3, [r7, #20]
}
 8018ba4:	bf00      	nop
 8018ba6:	e7fe      	b.n	8018ba6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018ba8:	f002 fd6c 	bl	801b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018bac:	2300      	movs	r3, #0
 8018bae:	e082      	b.n	8018cb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d106      	bne.n	8018bc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018bb6:	f107 030c 	add.w	r3, r7, #12
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f001 fc02 	bl	801a3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018bc0:	2301      	movs	r3, #1
 8018bc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018bc4:	f002 fd5e 	bl	801b684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018bc8:	f001 f91c 	bl	8019e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018bcc:	f002 fd2a 	bl	801b624 <vPortEnterCritical>
 8018bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018bd6:	b25b      	sxtb	r3, r3
 8018bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bdc:	d103      	bne.n	8018be6 <xQueueSemaphoreTake+0x13a>
 8018bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018be0:	2200      	movs	r2, #0
 8018be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018bec:	b25b      	sxtb	r3, r3
 8018bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bf2:	d103      	bne.n	8018bfc <xQueueSemaphoreTake+0x150>
 8018bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018bfc:	f002 fd42 	bl	801b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018c00:	463a      	mov	r2, r7
 8018c02:	f107 030c 	add.w	r3, r7, #12
 8018c06:	4611      	mov	r1, r2
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f001 fbf1 	bl	801a3f0 <xTaskCheckForTimeOut>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d132      	bne.n	8018c7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c16:	f000 fa2e 	bl	8019076 <prvIsQueueEmpty>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d026      	beq.n	8018c6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d109      	bne.n	8018c3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8018c28:	f002 fcfc 	bl	801b624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c2e:	689b      	ldr	r3, [r3, #8]
 8018c30:	4618      	mov	r0, r3
 8018c32:	f001 fd53 	bl	801a6dc <xTaskPriorityInherit>
 8018c36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8018c38:	f002 fd24 	bl	801b684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c3e:	3324      	adds	r3, #36	; 0x24
 8018c40:	683a      	ldr	r2, [r7, #0]
 8018c42:	4611      	mov	r1, r2
 8018c44:	4618      	mov	r0, r3
 8018c46:	f001 fae3 	bl	801a210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c4c:	f000 f9c1 	bl	8018fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018c50:	f001 f8e6 	bl	8019e20 <xTaskResumeAll>
 8018c54:	4603      	mov	r3, r0
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	f47f af68 	bne.w	8018b2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8018c5c:	4b18      	ldr	r3, [pc, #96]	; (8018cc0 <xQueueSemaphoreTake+0x214>)
 8018c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c62:	601a      	str	r2, [r3, #0]
 8018c64:	f3bf 8f4f 	dsb	sy
 8018c68:	f3bf 8f6f 	isb	sy
 8018c6c:	e75e      	b.n	8018b2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c70:	f000 f9af 	bl	8018fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018c74:	f001 f8d4 	bl	8019e20 <xTaskResumeAll>
 8018c78:	e758      	b.n	8018b2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c7c:	f000 f9a9 	bl	8018fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018c80:	f001 f8ce 	bl	8019e20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c86:	f000 f9f6 	bl	8019076 <prvIsQueueEmpty>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	f43f af4d 	beq.w	8018b2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8018c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d00d      	beq.n	8018cb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8018c98:	f002 fcc4 	bl	801b624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c9e:	f000 f8f0 	bl	8018e82 <prvGetDisinheritPriorityAfterTimeout>
 8018ca2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ca6:	689b      	ldr	r3, [r3, #8]
 8018ca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018caa:	4618      	mov	r0, r3
 8018cac:	f001 fdec 	bl	801a888 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018cb0:	f002 fce8 	bl	801b684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3738      	adds	r7, #56	; 0x38
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	e000ed04 	.word	0xe000ed04

08018cc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b08e      	sub	sp, #56	; 0x38
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d10a      	bne.n	8018cf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8018cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cde:	f383 8811 	msr	BASEPRI, r3
 8018ce2:	f3bf 8f6f 	isb	sy
 8018ce6:	f3bf 8f4f 	dsb	sy
 8018cea:	623b      	str	r3, [r7, #32]
}
 8018cec:	bf00      	nop
 8018cee:	e7fe      	b.n	8018cee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018cf0:	68bb      	ldr	r3, [r7, #8]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d103      	bne.n	8018cfe <xQueueReceiveFromISR+0x3a>
 8018cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d101      	bne.n	8018d02 <xQueueReceiveFromISR+0x3e>
 8018cfe:	2301      	movs	r3, #1
 8018d00:	e000      	b.n	8018d04 <xQueueReceiveFromISR+0x40>
 8018d02:	2300      	movs	r3, #0
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d10a      	bne.n	8018d1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8018d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d0c:	f383 8811 	msr	BASEPRI, r3
 8018d10:	f3bf 8f6f 	isb	sy
 8018d14:	f3bf 8f4f 	dsb	sy
 8018d18:	61fb      	str	r3, [r7, #28]
}
 8018d1a:	bf00      	nop
 8018d1c:	e7fe      	b.n	8018d1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018d1e:	f002 fd63 	bl	801b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8018d22:	f3ef 8211 	mrs	r2, BASEPRI
 8018d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d2a:	f383 8811 	msr	BASEPRI, r3
 8018d2e:	f3bf 8f6f 	isb	sy
 8018d32:	f3bf 8f4f 	dsb	sy
 8018d36:	61ba      	str	r2, [r7, #24]
 8018d38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018d3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d02f      	beq.n	8018daa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018d54:	68b9      	ldr	r1, [r7, #8]
 8018d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d58:	f000 f915 	bl	8018f86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d5e:	1e5a      	subs	r2, r3, #1
 8018d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d6c:	d112      	bne.n	8018d94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d70:	691b      	ldr	r3, [r3, #16]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d016      	beq.n	8018da4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d78:	3310      	adds	r3, #16
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f001 fa98 	bl	801a2b0 <xTaskRemoveFromEventList>
 8018d80:	4603      	mov	r3, r0
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d00e      	beq.n	8018da4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d00b      	beq.n	8018da4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2201      	movs	r2, #1
 8018d90:	601a      	str	r2, [r3, #0]
 8018d92:	e007      	b.n	8018da4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d98:	3301      	adds	r3, #1
 8018d9a:	b2db      	uxtb	r3, r3
 8018d9c:	b25a      	sxtb	r2, r3
 8018d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8018da4:	2301      	movs	r3, #1
 8018da6:	637b      	str	r3, [r7, #52]	; 0x34
 8018da8:	e001      	b.n	8018dae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8018daa:	2300      	movs	r3, #0
 8018dac:	637b      	str	r3, [r7, #52]	; 0x34
 8018dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018db0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018db2:	693b      	ldr	r3, [r7, #16]
 8018db4:	f383 8811 	msr	BASEPRI, r3
}
 8018db8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3738      	adds	r7, #56	; 0x38
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b084      	sub	sp, #16
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d10a      	bne.n	8018de8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8018dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dd6:	f383 8811 	msr	BASEPRI, r3
 8018dda:	f3bf 8f6f 	isb	sy
 8018dde:	f3bf 8f4f 	dsb	sy
 8018de2:	60bb      	str	r3, [r7, #8]
}
 8018de4:	bf00      	nop
 8018de6:	e7fe      	b.n	8018de6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8018de8:	f002 fc1c 	bl	801b624 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018df0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8018df2:	f002 fc47 	bl	801b684 <vPortExitCritical>

	return uxReturn;
 8018df6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018df8:	4618      	mov	r0, r3
 8018dfa:	3710      	adds	r7, #16
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}

08018e00 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8018e00:	b480      	push	{r7}
 8018e02:	b087      	sub	sp, #28
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d10a      	bne.n	8018e28 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8018e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e16:	f383 8811 	msr	BASEPRI, r3
 8018e1a:	f3bf 8f6f 	isb	sy
 8018e1e:	f3bf 8f4f 	dsb	sy
 8018e22:	60fb      	str	r3, [r7, #12]
}
 8018e24:	bf00      	nop
 8018e26:	e7fe      	b.n	8018e26 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8018e28:	697b      	ldr	r3, [r7, #20]
 8018e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e2c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8018e2e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018e30:	4618      	mov	r0, r3
 8018e32:	371c      	adds	r7, #28
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr

08018e3c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b084      	sub	sp, #16
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d10a      	bne.n	8018e64 <vQueueDelete+0x28>
	__asm volatile
 8018e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e52:	f383 8811 	msr	BASEPRI, r3
 8018e56:	f3bf 8f6f 	isb	sy
 8018e5a:	f3bf 8f4f 	dsb	sy
 8018e5e:	60bb      	str	r3, [r7, #8]
}
 8018e60:	bf00      	nop
 8018e62:	e7fe      	b.n	8018e62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8018e64:	68f8      	ldr	r0, [r7, #12]
 8018e66:	f000 f95f 	bl	8019128 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d102      	bne.n	8018e7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8018e74:	68f8      	ldr	r0, [r7, #12]
 8018e76:	f002 fdc7 	bl	801ba08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8018e7a:	bf00      	nop
 8018e7c:	3710      	adds	r7, #16
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}

08018e82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018e82:	b480      	push	{r7}
 8018e84:	b085      	sub	sp, #20
 8018e86:	af00      	add	r7, sp, #0
 8018e88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d006      	beq.n	8018ea0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8018e9c:	60fb      	str	r3, [r7, #12]
 8018e9e:	e001      	b.n	8018ea4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018ea4:	68fb      	ldr	r3, [r7, #12]
	}
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	3714      	adds	r7, #20
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb0:	4770      	bx	lr

08018eb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018eb2:	b580      	push	{r7, lr}
 8018eb4:	b086      	sub	sp, #24
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	60f8      	str	r0, [r7, #12]
 8018eba:	60b9      	str	r1, [r7, #8]
 8018ebc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ec6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d10d      	bne.n	8018eec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d14d      	bne.n	8018f74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	689b      	ldr	r3, [r3, #8]
 8018edc:	4618      	mov	r0, r3
 8018ede:	f001 fc65 	bl	801a7ac <xTaskPriorityDisinherit>
 8018ee2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	609a      	str	r2, [r3, #8]
 8018eea:	e043      	b.n	8018f74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d119      	bne.n	8018f26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	6858      	ldr	r0, [r3, #4]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018efa:	461a      	mov	r2, r3
 8018efc:	68b9      	ldr	r1, [r7, #8]
 8018efe:	f003 fa49 	bl	801c394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	685a      	ldr	r2, [r3, #4]
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f0a:	441a      	add	r2, r3
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	685a      	ldr	r2, [r3, #4]
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	689b      	ldr	r3, [r3, #8]
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d32b      	bcc.n	8018f74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	681a      	ldr	r2, [r3, #0]
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	605a      	str	r2, [r3, #4]
 8018f24:	e026      	b.n	8018f74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	68d8      	ldr	r0, [r3, #12]
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f2e:	461a      	mov	r2, r3
 8018f30:	68b9      	ldr	r1, [r7, #8]
 8018f32:	f003 fa2f 	bl	801c394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	68da      	ldr	r2, [r3, #12]
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f3e:	425b      	negs	r3, r3
 8018f40:	441a      	add	r2, r3
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	68da      	ldr	r2, [r3, #12]
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	429a      	cmp	r2, r3
 8018f50:	d207      	bcs.n	8018f62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	689a      	ldr	r2, [r3, #8]
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f5a:	425b      	negs	r3, r3
 8018f5c:	441a      	add	r2, r3
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b02      	cmp	r3, #2
 8018f66:	d105      	bne.n	8018f74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d002      	beq.n	8018f74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018f6e:	693b      	ldr	r3, [r7, #16]
 8018f70:	3b01      	subs	r3, #1
 8018f72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018f74:	693b      	ldr	r3, [r7, #16]
 8018f76:	1c5a      	adds	r2, r3, #1
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018f7c:	697b      	ldr	r3, [r7, #20]
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3718      	adds	r7, #24
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}

08018f86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018f86:	b580      	push	{r7, lr}
 8018f88:	b082      	sub	sp, #8
 8018f8a:	af00      	add	r7, sp, #0
 8018f8c:	6078      	str	r0, [r7, #4]
 8018f8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d018      	beq.n	8018fca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	68da      	ldr	r2, [r3, #12]
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fa0:	441a      	add	r2, r3
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	68da      	ldr	r2, [r3, #12]
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	689b      	ldr	r3, [r3, #8]
 8018fae:	429a      	cmp	r2, r3
 8018fb0:	d303      	bcc.n	8018fba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681a      	ldr	r2, [r3, #0]
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	68d9      	ldr	r1, [r3, #12]
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fc2:	461a      	mov	r2, r3
 8018fc4:	6838      	ldr	r0, [r7, #0]
 8018fc6:	f003 f9e5 	bl	801c394 <memcpy>
	}
}
 8018fca:	bf00      	nop
 8018fcc:	3708      	adds	r7, #8
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}

08018fd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018fd2:	b580      	push	{r7, lr}
 8018fd4:	b084      	sub	sp, #16
 8018fd6:	af00      	add	r7, sp, #0
 8018fd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018fda:	f002 fb23 	bl	801b624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018fe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018fe6:	e011      	b.n	801900c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d012      	beq.n	8019016 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	3324      	adds	r3, #36	; 0x24
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f001 f95b 	bl	801a2b0 <xTaskRemoveFromEventList>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d001      	beq.n	8019004 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019000:	f001 fa58 	bl	801a4b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019004:	7bfb      	ldrb	r3, [r7, #15]
 8019006:	3b01      	subs	r3, #1
 8019008:	b2db      	uxtb	r3, r3
 801900a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801900c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019010:	2b00      	cmp	r3, #0
 8019012:	dce9      	bgt.n	8018fe8 <prvUnlockQueue+0x16>
 8019014:	e000      	b.n	8019018 <prvUnlockQueue+0x46>
					break;
 8019016:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	22ff      	movs	r2, #255	; 0xff
 801901c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019020:	f002 fb30 	bl	801b684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019024:	f002 fafe 	bl	801b624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801902e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019030:	e011      	b.n	8019056 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	691b      	ldr	r3, [r3, #16]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d012      	beq.n	8019060 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	3310      	adds	r3, #16
 801903e:	4618      	mov	r0, r3
 8019040:	f001 f936 	bl	801a2b0 <xTaskRemoveFromEventList>
 8019044:	4603      	mov	r3, r0
 8019046:	2b00      	cmp	r3, #0
 8019048:	d001      	beq.n	801904e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801904a:	f001 fa33 	bl	801a4b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801904e:	7bbb      	ldrb	r3, [r7, #14]
 8019050:	3b01      	subs	r3, #1
 8019052:	b2db      	uxtb	r3, r3
 8019054:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801905a:	2b00      	cmp	r3, #0
 801905c:	dce9      	bgt.n	8019032 <prvUnlockQueue+0x60>
 801905e:	e000      	b.n	8019062 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019060:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	22ff      	movs	r2, #255	; 0xff
 8019066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801906a:	f002 fb0b 	bl	801b684 <vPortExitCritical>
}
 801906e:	bf00      	nop
 8019070:	3710      	adds	r7, #16
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}

08019076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019076:	b580      	push	{r7, lr}
 8019078:	b084      	sub	sp, #16
 801907a:	af00      	add	r7, sp, #0
 801907c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801907e:	f002 fad1 	bl	801b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019086:	2b00      	cmp	r3, #0
 8019088:	d102      	bne.n	8019090 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801908a:	2301      	movs	r3, #1
 801908c:	60fb      	str	r3, [r7, #12]
 801908e:	e001      	b.n	8019094 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019090:	2300      	movs	r3, #0
 8019092:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019094:	f002 faf6 	bl	801b684 <vPortExitCritical>

	return xReturn;
 8019098:	68fb      	ldr	r3, [r7, #12]
}
 801909a:	4618      	mov	r0, r3
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}

080190a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80190a2:	b580      	push	{r7, lr}
 80190a4:	b084      	sub	sp, #16
 80190a6:	af00      	add	r7, sp, #0
 80190a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80190aa:	f002 fabb 	bl	801b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d102      	bne.n	80190c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80190ba:	2301      	movs	r3, #1
 80190bc:	60fb      	str	r3, [r7, #12]
 80190be:	e001      	b.n	80190c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80190c0:	2300      	movs	r3, #0
 80190c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80190c4:	f002 fade 	bl	801b684 <vPortExitCritical>

	return xReturn;
 80190c8:	68fb      	ldr	r3, [r7, #12]
}
 80190ca:	4618      	mov	r0, r3
 80190cc:	3710      	adds	r7, #16
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}
	...

080190d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80190d4:	b480      	push	{r7}
 80190d6:	b085      	sub	sp, #20
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80190de:	2300      	movs	r3, #0
 80190e0:	60fb      	str	r3, [r7, #12]
 80190e2:	e014      	b.n	801910e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80190e4:	4a0f      	ldr	r2, [pc, #60]	; (8019124 <vQueueAddToRegistry+0x50>)
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d10b      	bne.n	8019108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80190f0:	490c      	ldr	r1, [pc, #48]	; (8019124 <vQueueAddToRegistry+0x50>)
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	683a      	ldr	r2, [r7, #0]
 80190f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80190fa:	4a0a      	ldr	r2, [pc, #40]	; (8019124 <vQueueAddToRegistry+0x50>)
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	00db      	lsls	r3, r3, #3
 8019100:	4413      	add	r3, r2
 8019102:	687a      	ldr	r2, [r7, #4]
 8019104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019106:	e006      	b.n	8019116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	3301      	adds	r3, #1
 801910c:	60fb      	str	r3, [r7, #12]
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	2b07      	cmp	r3, #7
 8019112:	d9e7      	bls.n	80190e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019114:	bf00      	nop
 8019116:	bf00      	nop
 8019118:	3714      	adds	r7, #20
 801911a:	46bd      	mov	sp, r7
 801911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019120:	4770      	bx	lr
 8019122:	bf00      	nop
 8019124:	20001dd4 	.word	0x20001dd4

08019128 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019128:	b480      	push	{r7}
 801912a:	b085      	sub	sp, #20
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019130:	2300      	movs	r3, #0
 8019132:	60fb      	str	r3, [r7, #12]
 8019134:	e016      	b.n	8019164 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8019136:	4a10      	ldr	r2, [pc, #64]	; (8019178 <vQueueUnregisterQueue+0x50>)
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	00db      	lsls	r3, r3, #3
 801913c:	4413      	add	r3, r2
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	429a      	cmp	r2, r3
 8019144:	d10b      	bne.n	801915e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8019146:	4a0c      	ldr	r2, [pc, #48]	; (8019178 <vQueueUnregisterQueue+0x50>)
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	2100      	movs	r1, #0
 801914c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8019150:	4a09      	ldr	r2, [pc, #36]	; (8019178 <vQueueUnregisterQueue+0x50>)
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	00db      	lsls	r3, r3, #3
 8019156:	4413      	add	r3, r2
 8019158:	2200      	movs	r2, #0
 801915a:	605a      	str	r2, [r3, #4]
				break;
 801915c:	e006      	b.n	801916c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	3301      	adds	r3, #1
 8019162:	60fb      	str	r3, [r7, #12]
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	2b07      	cmp	r3, #7
 8019168:	d9e5      	bls.n	8019136 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801916a:	bf00      	nop
 801916c:	bf00      	nop
 801916e:	3714      	adds	r7, #20
 8019170:	46bd      	mov	sp, r7
 8019172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019176:	4770      	bx	lr
 8019178:	20001dd4 	.word	0x20001dd4

0801917c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801917c:	b580      	push	{r7, lr}
 801917e:	b086      	sub	sp, #24
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801918c:	f002 fa4a 	bl	801b624 <vPortEnterCritical>
 8019190:	697b      	ldr	r3, [r7, #20]
 8019192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019196:	b25b      	sxtb	r3, r3
 8019198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801919c:	d103      	bne.n	80191a6 <vQueueWaitForMessageRestricted+0x2a>
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	2200      	movs	r2, #0
 80191a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80191ac:	b25b      	sxtb	r3, r3
 80191ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191b2:	d103      	bne.n	80191bc <vQueueWaitForMessageRestricted+0x40>
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	2200      	movs	r2, #0
 80191b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80191bc:	f002 fa62 	bl	801b684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d106      	bne.n	80191d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	3324      	adds	r3, #36	; 0x24
 80191cc:	687a      	ldr	r2, [r7, #4]
 80191ce:	68b9      	ldr	r1, [r7, #8]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f001 f841 	bl	801a258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80191d6:	6978      	ldr	r0, [r7, #20]
 80191d8:	f7ff fefb 	bl	8018fd2 <prvUnlockQueue>
	}
 80191dc:	bf00      	nop
 80191de:	3718      	adds	r7, #24
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}

080191e4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b08c      	sub	sp, #48	; 0x30
 80191e8:	af02      	add	r7, sp, #8
 80191ea:	60f8      	str	r0, [r7, #12]
 80191ec:	60b9      	str	r1, [r7, #8]
 80191ee:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	2b01      	cmp	r3, #1
 80191f4:	d110      	bne.n	8019218 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80191f6:	2301      	movs	r3, #1
 80191f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	2b04      	cmp	r3, #4
 8019200:	d81b      	bhi.n	801923a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8019202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019206:	f383 8811 	msr	BASEPRI, r3
 801920a:	f3bf 8f6f 	isb	sy
 801920e:	f3bf 8f4f 	dsb	sy
 8019212:	61fb      	str	r3, [r7, #28]
}
 8019214:	bf00      	nop
 8019216:	e7fe      	b.n	8019216 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8019218:	2300      	movs	r3, #0
 801921a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	2b00      	cmp	r3, #0
 8019222:	d10a      	bne.n	801923a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8019224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019228:	f383 8811 	msr	BASEPRI, r3
 801922c:	f3bf 8f6f 	isb	sy
 8019230:	f3bf 8f4f 	dsb	sy
 8019234:	61bb      	str	r3, [r7, #24]
}
 8019236:	bf00      	nop
 8019238:	e7fe      	b.n	8019238 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 801923a:	68ba      	ldr	r2, [r7, #8]
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	429a      	cmp	r2, r3
 8019240:	d90a      	bls.n	8019258 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8019242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019246:	f383 8811 	msr	BASEPRI, r3
 801924a:	f3bf 8f6f 	isb	sy
 801924e:	f3bf 8f4f 	dsb	sy
 8019252:	617b      	str	r3, [r7, #20]
}
 8019254:	bf00      	nop
 8019256:	e7fe      	b.n	8019256 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d101      	bne.n	8019262 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 801925e:	2301      	movs	r3, #1
 8019260:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	3301      	adds	r3, #1
 8019266:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	3324      	adds	r3, #36	; 0x24
 801926c:	4618      	mov	r0, r3
 801926e:	f002 fafb 	bl	801b868 <pvPortMalloc>
 8019272:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8019274:	6a3b      	ldr	r3, [r7, #32]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d00a      	beq.n	8019290 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 801927a:	6a3b      	ldr	r3, [r7, #32]
 801927c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8019280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019284:	9300      	str	r3, [sp, #0]
 8019286:	68bb      	ldr	r3, [r7, #8]
 8019288:	68fa      	ldr	r2, [r7, #12]
 801928a:	6a38      	ldr	r0, [r7, #32]
 801928c:	f000 fb25 	bl	80198da <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8019290:	6a3b      	ldr	r3, [r7, #32]
	}
 8019292:	4618      	mov	r0, r3
 8019294:	3728      	adds	r7, #40	; 0x28
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}

0801929a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 801929a:	b480      	push	{r7}
 801929c:	b087      	sub	sp, #28
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80192a6:	693b      	ldr	r3, [r7, #16]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d10a      	bne.n	80192c2 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80192ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b0:	f383 8811 	msr	BASEPRI, r3
 80192b4:	f3bf 8f6f 	isb	sy
 80192b8:	f3bf 8f4f 	dsb	sy
 80192bc:	60fb      	str	r3, [r7, #12]
}
 80192be:	bf00      	nop
 80192c0:	e7fe      	b.n	80192c0 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80192c2:	693b      	ldr	r3, [r7, #16]
 80192c4:	689a      	ldr	r2, [r3, #8]
 80192c6:	693b      	ldr	r3, [r7, #16]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	4413      	add	r3, r2
 80192cc:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	685b      	ldr	r3, [r3, #4]
 80192d2:	697a      	ldr	r2, [r7, #20]
 80192d4:	1ad3      	subs	r3, r2, r3
 80192d6:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80192d8:	697b      	ldr	r3, [r7, #20]
 80192da:	3b01      	subs	r3, #1
 80192dc:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	689b      	ldr	r3, [r3, #8]
 80192e2:	697a      	ldr	r2, [r7, #20]
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d304      	bcc.n	80192f2 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80192e8:	693b      	ldr	r3, [r7, #16]
 80192ea:	689b      	ldr	r3, [r3, #8]
 80192ec:	697a      	ldr	r2, [r7, #20]
 80192ee:	1ad3      	subs	r3, r2, r3
 80192f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80192f2:	697b      	ldr	r3, [r7, #20]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	371c      	adds	r7, #28
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr

08019300 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b090      	sub	sp, #64	; 0x40
 8019304:	af02      	add	r7, sp, #8
 8019306:	60f8      	str	r0, [r7, #12]
 8019308:	60b9      	str	r1, [r7, #8]
 801930a:	607a      	str	r2, [r7, #4]
 801930c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8019312:	2300      	movs	r3, #0
 8019314:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 801931a:	68bb      	ldr	r3, [r7, #8]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d10a      	bne.n	8019336 <xStreamBufferSend+0x36>
	__asm volatile
 8019320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019324:	f383 8811 	msr	BASEPRI, r3
 8019328:	f3bf 8f6f 	isb	sy
 801932c:	f3bf 8f4f 	dsb	sy
 8019330:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019332:	bf00      	nop
 8019334:	e7fe      	b.n	8019334 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8019336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019338:	2b00      	cmp	r3, #0
 801933a:	d10a      	bne.n	8019352 <xStreamBufferSend+0x52>
	__asm volatile
 801933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019340:	f383 8811 	msr	BASEPRI, r3
 8019344:	f3bf 8f6f 	isb	sy
 8019348:	f3bf 8f4f 	dsb	sy
 801934c:	623b      	str	r3, [r7, #32]
}
 801934e:	bf00      	nop
 8019350:	e7fe      	b.n	8019350 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8019352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019354:	7f1b      	ldrb	r3, [r3, #28]
 8019356:	f003 0301 	and.w	r3, r3, #1
 801935a:	2b00      	cmp	r3, #0
 801935c:	d011      	beq.n	8019382 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019360:	3304      	adds	r3, #4
 8019362:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8019364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	429a      	cmp	r2, r3
 801936a:	d80a      	bhi.n	8019382 <xStreamBufferSend+0x82>
	__asm volatile
 801936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019370:	f383 8811 	msr	BASEPRI, r3
 8019374:	f3bf 8f6f 	isb	sy
 8019378:	f3bf 8f4f 	dsb	sy
 801937c:	61fb      	str	r3, [r7, #28]
}
 801937e:	bf00      	nop
 8019380:	e7fe      	b.n	8019380 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d03e      	beq.n	8019406 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8019388:	f107 0310 	add.w	r3, r7, #16
 801938c:	4618      	mov	r0, r3
 801938e:	f000 fff3 	bl	801a378 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8019392:	f002 f947 	bl	801b624 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8019396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019398:	f7ff ff7f 	bl	801929a <xStreamBufferSpacesAvailable>
 801939c:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 801939e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d217      	bcs.n	80193d6 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80193a6:	2000      	movs	r0, #0
 80193a8:	f001 fc22 	bl	801abf0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80193ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ae:	695b      	ldr	r3, [r3, #20]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d00a      	beq.n	80193ca <xStreamBufferSend+0xca>
	__asm volatile
 80193b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193b8:	f383 8811 	msr	BASEPRI, r3
 80193bc:	f3bf 8f6f 	isb	sy
 80193c0:	f3bf 8f4f 	dsb	sy
 80193c4:	61bb      	str	r3, [r7, #24]
}
 80193c6:	bf00      	nop
 80193c8:	e7fe      	b.n	80193c8 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80193ca:	f001 f959 	bl	801a680 <xTaskGetCurrentTaskHandle>
 80193ce:	4602      	mov	r2, r0
 80193d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193d2:	615a      	str	r2, [r3, #20]
 80193d4:	e002      	b.n	80193dc <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 80193d6:	f002 f955 	bl	801b684 <vPortExitCritical>
					break;
 80193da:	e014      	b.n	8019406 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 80193dc:	f002 f952 	bl	801b684 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	2200      	movs	r2, #0
 80193e4:	2100      	movs	r1, #0
 80193e6:	2000      	movs	r0, #0
 80193e8:	f001 fae4 	bl	801a9b4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80193ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ee:	2200      	movs	r2, #0
 80193f0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80193f2:	463a      	mov	r2, r7
 80193f4:	f107 0310 	add.w	r3, r7, #16
 80193f8:	4611      	mov	r1, r2
 80193fa:	4618      	mov	r0, r3
 80193fc:	f000 fff8 	bl	801a3f0 <xTaskCheckForTimeOut>
 8019400:	4603      	mov	r3, r0
 8019402:	2b00      	cmp	r3, #0
 8019404:	d0c5      	beq.n	8019392 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8019406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019408:	2b00      	cmp	r3, #0
 801940a:	d103      	bne.n	8019414 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 801940c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801940e:	f7ff ff44 	bl	801929a <xStreamBufferSpacesAvailable>
 8019412:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8019414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019416:	9300      	str	r3, [sp, #0]
 8019418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801941a:	687a      	ldr	r2, [r7, #4]
 801941c:	68b9      	ldr	r1, [r7, #8]
 801941e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019420:	f000 f823 	bl	801946a <prvWriteMessageToBuffer>
 8019424:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8019426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019428:	2b00      	cmp	r3, #0
 801942a:	d019      	beq.n	8019460 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 801942c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801942e:	f000 fa34 	bl	801989a <prvBytesInBuffer>
 8019432:	4602      	mov	r2, r0
 8019434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	429a      	cmp	r2, r3
 801943a:	d311      	bcc.n	8019460 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 801943c:	f000 fce2 	bl	8019e04 <vTaskSuspendAll>
 8019440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019442:	691b      	ldr	r3, [r3, #16]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d009      	beq.n	801945c <xStreamBufferSend+0x15c>
 8019448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801944a:	6918      	ldr	r0, [r3, #16]
 801944c:	2300      	movs	r3, #0
 801944e:	2200      	movs	r2, #0
 8019450:	2100      	movs	r1, #0
 8019452:	f001 fb0f 	bl	801aa74 <xTaskGenericNotify>
 8019456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019458:	2200      	movs	r2, #0
 801945a:	611a      	str	r2, [r3, #16]
 801945c:	f000 fce0 	bl	8019e20 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8019460:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8019462:	4618      	mov	r0, r3
 8019464:	3738      	adds	r7, #56	; 0x38
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}

0801946a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 801946a:	b580      	push	{r7, lr}
 801946c:	b086      	sub	sp, #24
 801946e:	af00      	add	r7, sp, #0
 8019470:	60f8      	str	r0, [r7, #12]
 8019472:	60b9      	str	r1, [r7, #8]
 8019474:	607a      	str	r2, [r7, #4]
 8019476:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	2b00      	cmp	r3, #0
 801947c:	d102      	bne.n	8019484 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 801947e:	2300      	movs	r3, #0
 8019480:	617b      	str	r3, [r7, #20]
 8019482:	e01d      	b.n	80194c0 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	7f1b      	ldrb	r3, [r3, #28]
 8019488:	f003 0301 	and.w	r3, r3, #1
 801948c:	2b00      	cmp	r3, #0
 801948e:	d108      	bne.n	80194a2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8019490:	2301      	movs	r3, #1
 8019492:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8019494:	687a      	ldr	r2, [r7, #4]
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	4293      	cmp	r3, r2
 801949a:	bf28      	it	cs
 801949c:	4613      	movcs	r3, r2
 801949e:	607b      	str	r3, [r7, #4]
 80194a0:	e00e      	b.n	80194c0 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80194a2:	683a      	ldr	r2, [r7, #0]
 80194a4:	6a3b      	ldr	r3, [r7, #32]
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d308      	bcc.n	80194bc <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80194aa:	2301      	movs	r3, #1
 80194ac:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80194ae:	1d3b      	adds	r3, r7, #4
 80194b0:	2204      	movs	r2, #4
 80194b2:	4619      	mov	r1, r3
 80194b4:	68f8      	ldr	r0, [r7, #12]
 80194b6:	f000 f904 	bl	80196c2 <prvWriteBytesToBuffer>
 80194ba:	e001      	b.n	80194c0 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80194bc:	2300      	movs	r3, #0
 80194be:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80194c0:	697b      	ldr	r3, [r7, #20]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d007      	beq.n	80194d6 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	461a      	mov	r2, r3
 80194ca:	68b9      	ldr	r1, [r7, #8]
 80194cc:	68f8      	ldr	r0, [r7, #12]
 80194ce:	f000 f8f8 	bl	80196c2 <prvWriteBytesToBuffer>
 80194d2:	6138      	str	r0, [r7, #16]
 80194d4:	e001      	b.n	80194da <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80194d6:	2300      	movs	r3, #0
 80194d8:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80194da:	693b      	ldr	r3, [r7, #16]
}
 80194dc:	4618      	mov	r0, r3
 80194de:	3718      	adds	r7, #24
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}

080194e4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b08e      	sub	sp, #56	; 0x38
 80194e8:	af02      	add	r7, sp, #8
 80194ea:	60f8      	str	r0, [r7, #12]
 80194ec:	60b9      	str	r1, [r7, #8]
 80194ee:	607a      	str	r2, [r7, #4]
 80194f0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80194f6:	2300      	movs	r3, #0
 80194f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80194fa:	68bb      	ldr	r3, [r7, #8]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d10a      	bne.n	8019516 <xStreamBufferReceive+0x32>
	__asm volatile
 8019500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019504:	f383 8811 	msr	BASEPRI, r3
 8019508:	f3bf 8f6f 	isb	sy
 801950c:	f3bf 8f4f 	dsb	sy
 8019510:	61fb      	str	r3, [r7, #28]
}
 8019512:	bf00      	nop
 8019514:	e7fe      	b.n	8019514 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8019516:	6a3b      	ldr	r3, [r7, #32]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d10a      	bne.n	8019532 <xStreamBufferReceive+0x4e>
	__asm volatile
 801951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019520:	f383 8811 	msr	BASEPRI, r3
 8019524:	f3bf 8f6f 	isb	sy
 8019528:	f3bf 8f4f 	dsb	sy
 801952c:	61bb      	str	r3, [r7, #24]
}
 801952e:	bf00      	nop
 8019530:	e7fe      	b.n	8019530 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8019532:	6a3b      	ldr	r3, [r7, #32]
 8019534:	7f1b      	ldrb	r3, [r3, #28]
 8019536:	f003 0301 	and.w	r3, r3, #1
 801953a:	2b00      	cmp	r3, #0
 801953c:	d002      	beq.n	8019544 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801953e:	2304      	movs	r3, #4
 8019540:	627b      	str	r3, [r7, #36]	; 0x24
 8019542:	e001      	b.n	8019548 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8019544:	2300      	movs	r3, #0
 8019546:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d034      	beq.n	80195b8 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 801954e:	f002 f869 	bl	801b624 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019552:	6a38      	ldr	r0, [r7, #32]
 8019554:	f000 f9a1 	bl	801989a <prvBytesInBuffer>
 8019558:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 801955a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955e:	429a      	cmp	r2, r3
 8019560:	d816      	bhi.n	8019590 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8019562:	2000      	movs	r0, #0
 8019564:	f001 fb44 	bl	801abf0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8019568:	6a3b      	ldr	r3, [r7, #32]
 801956a:	691b      	ldr	r3, [r3, #16]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d00a      	beq.n	8019586 <xStreamBufferReceive+0xa2>
	__asm volatile
 8019570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019574:	f383 8811 	msr	BASEPRI, r3
 8019578:	f3bf 8f6f 	isb	sy
 801957c:	f3bf 8f4f 	dsb	sy
 8019580:	617b      	str	r3, [r7, #20]
}
 8019582:	bf00      	nop
 8019584:	e7fe      	b.n	8019584 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8019586:	f001 f87b 	bl	801a680 <xTaskGetCurrentTaskHandle>
 801958a:	4602      	mov	r2, r0
 801958c:	6a3b      	ldr	r3, [r7, #32]
 801958e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019590:	f002 f878 	bl	801b684 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8019594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019598:	429a      	cmp	r2, r3
 801959a:	d811      	bhi.n	80195c0 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	2200      	movs	r2, #0
 80195a0:	2100      	movs	r1, #0
 80195a2:	2000      	movs	r0, #0
 80195a4:	f001 fa06 	bl	801a9b4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80195a8:	6a3b      	ldr	r3, [r7, #32]
 80195aa:	2200      	movs	r2, #0
 80195ac:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80195ae:	6a38      	ldr	r0, [r7, #32]
 80195b0:	f000 f973 	bl	801989a <prvBytesInBuffer>
 80195b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80195b6:	e003      	b.n	80195c0 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80195b8:	6a38      	ldr	r0, [r7, #32]
 80195ba:	f000 f96e 	bl	801989a <prvBytesInBuffer>
 80195be:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80195c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80195c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c4:	429a      	cmp	r2, r3
 80195c6:	d91d      	bls.n	8019604 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80195c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	68b9      	ldr	r1, [r7, #8]
 80195d2:	6a38      	ldr	r0, [r7, #32]
 80195d4:	f000 f81b 	bl	801960e <prvReadMessageFromBuffer>
 80195d8:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80195da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d011      	beq.n	8019604 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80195e0:	f000 fc10 	bl	8019e04 <vTaskSuspendAll>
 80195e4:	6a3b      	ldr	r3, [r7, #32]
 80195e6:	695b      	ldr	r3, [r3, #20]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d009      	beq.n	8019600 <xStreamBufferReceive+0x11c>
 80195ec:	6a3b      	ldr	r3, [r7, #32]
 80195ee:	6958      	ldr	r0, [r3, #20]
 80195f0:	2300      	movs	r3, #0
 80195f2:	2200      	movs	r2, #0
 80195f4:	2100      	movs	r1, #0
 80195f6:	f001 fa3d 	bl	801aa74 <xTaskGenericNotify>
 80195fa:	6a3b      	ldr	r3, [r7, #32]
 80195fc:	2200      	movs	r2, #0
 80195fe:	615a      	str	r2, [r3, #20]
 8019600:	f000 fc0e 	bl	8019e20 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8019604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8019606:	4618      	mov	r0, r3
 8019608:	3730      	adds	r7, #48	; 0x30
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}

0801960e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 801960e:	b580      	push	{r7, lr}
 8019610:	b088      	sub	sp, #32
 8019612:	af00      	add	r7, sp, #0
 8019614:	60f8      	str	r0, [r7, #12]
 8019616:	60b9      	str	r1, [r7, #8]
 8019618:	607a      	str	r2, [r7, #4]
 801961a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 801961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801961e:	2b00      	cmp	r3, #0
 8019620:	d019      	beq.n	8019656 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8019628:	f107 0110 	add.w	r1, r7, #16
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019630:	68f8      	ldr	r0, [r7, #12]
 8019632:	f000 f8b8 	bl	80197a6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 801963a:	683a      	ldr	r2, [r7, #0]
 801963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963e:	1ad3      	subs	r3, r2, r3
 8019640:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8019642:	69fa      	ldr	r2, [r7, #28]
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	429a      	cmp	r2, r3
 8019648:	d907      	bls.n	801965a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	69ba      	ldr	r2, [r7, #24]
 801964e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8019650:	2300      	movs	r3, #0
 8019652:	61fb      	str	r3, [r7, #28]
 8019654:	e001      	b.n	801965a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 801965a:	683b      	ldr	r3, [r7, #0]
 801965c:	69fa      	ldr	r2, [r7, #28]
 801965e:	68b9      	ldr	r1, [r7, #8]
 8019660:	68f8      	ldr	r0, [r7, #12]
 8019662:	f000 f8a0 	bl	80197a6 <prvReadBytesFromBuffer>
 8019666:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8019668:	697b      	ldr	r3, [r7, #20]
}
 801966a:	4618      	mov	r0, r3
 801966c:	3720      	adds	r7, #32
 801966e:	46bd      	mov	sp, r7
 8019670:	bd80      	pop	{r7, pc}

08019672 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 8019672:	b480      	push	{r7}
 8019674:	b087      	sub	sp, #28
 8019676:	af00      	add	r7, sp, #0
 8019678:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d10a      	bne.n	801969a <xStreamBufferIsEmpty+0x28>
	__asm volatile
 8019684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019688:	f383 8811 	msr	BASEPRI, r3
 801968c:	f3bf 8f6f 	isb	sy
 8019690:	f3bf 8f4f 	dsb	sy
 8019694:	60bb      	str	r3, [r7, #8]
}
 8019696:	bf00      	nop
 8019698:	e7fe      	b.n	8019698 <xStreamBufferIsEmpty+0x26>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 801969a:	693b      	ldr	r3, [r7, #16]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 80196a0:	693b      	ldr	r3, [r7, #16]
 80196a2:	685b      	ldr	r3, [r3, #4]
 80196a4:	68fa      	ldr	r2, [r7, #12]
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d102      	bne.n	80196b0 <xStreamBufferIsEmpty+0x3e>
	{
		xReturn = pdTRUE;
 80196aa:	2301      	movs	r3, #1
 80196ac:	617b      	str	r3, [r7, #20]
 80196ae:	e001      	b.n	80196b4 <xStreamBufferIsEmpty+0x42>
	}
	else
	{
		xReturn = pdFALSE;
 80196b0:	2300      	movs	r3, #0
 80196b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80196b4:	697b      	ldr	r3, [r7, #20]
}
 80196b6:	4618      	mov	r0, r3
 80196b8:	371c      	adds	r7, #28
 80196ba:	46bd      	mov	sp, r7
 80196bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c0:	4770      	bx	lr

080196c2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80196c2:	b580      	push	{r7, lr}
 80196c4:	b08a      	sub	sp, #40	; 0x28
 80196c6:	af00      	add	r7, sp, #0
 80196c8:	60f8      	str	r0, [r7, #12]
 80196ca:	60b9      	str	r1, [r7, #8]
 80196cc:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d10a      	bne.n	80196ea <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80196d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196d8:	f383 8811 	msr	BASEPRI, r3
 80196dc:	f3bf 8f6f 	isb	sy
 80196e0:	f3bf 8f4f 	dsb	sy
 80196e4:	61fb      	str	r3, [r7, #28]
}
 80196e6:	bf00      	nop
 80196e8:	e7fe      	b.n	80196e8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	685b      	ldr	r3, [r3, #4]
 80196ee:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	689a      	ldr	r2, [r3, #8]
 80196f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f6:	1ad3      	subs	r3, r2, r3
 80196f8:	687a      	ldr	r2, [r7, #4]
 80196fa:	4293      	cmp	r3, r2
 80196fc:	bf28      	it	cs
 80196fe:	4613      	movcs	r3, r2
 8019700:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8019702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019704:	6a3b      	ldr	r3, [r7, #32]
 8019706:	441a      	add	r2, r3
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	689b      	ldr	r3, [r3, #8]
 801970c:	429a      	cmp	r2, r3
 801970e:	d90a      	bls.n	8019726 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8019710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019714:	f383 8811 	msr	BASEPRI, r3
 8019718:	f3bf 8f6f 	isb	sy
 801971c:	f3bf 8f4f 	dsb	sy
 8019720:	61bb      	str	r3, [r7, #24]
}
 8019722:	bf00      	nop
 8019724:	e7fe      	b.n	8019724 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	699a      	ldr	r2, [r3, #24]
 801972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801972c:	4413      	add	r3, r2
 801972e:	6a3a      	ldr	r2, [r7, #32]
 8019730:	68b9      	ldr	r1, [r7, #8]
 8019732:	4618      	mov	r0, r3
 8019734:	f002 fe2e 	bl	801c394 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8019738:	687a      	ldr	r2, [r7, #4]
 801973a:	6a3b      	ldr	r3, [r7, #32]
 801973c:	429a      	cmp	r2, r3
 801973e:	d91c      	bls.n	801977a <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8019740:	687a      	ldr	r2, [r7, #4]
 8019742:	6a3b      	ldr	r3, [r7, #32]
 8019744:	1ad2      	subs	r2, r2, r3
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	689b      	ldr	r3, [r3, #8]
 801974a:	429a      	cmp	r2, r3
 801974c:	d90a      	bls.n	8019764 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 801974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019752:	f383 8811 	msr	BASEPRI, r3
 8019756:	f3bf 8f6f 	isb	sy
 801975a:	f3bf 8f4f 	dsb	sy
 801975e:	617b      	str	r3, [r7, #20]
}
 8019760:	bf00      	nop
 8019762:	e7fe      	b.n	8019762 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	6998      	ldr	r0, [r3, #24]
 8019768:	68ba      	ldr	r2, [r7, #8]
 801976a:	6a3b      	ldr	r3, [r7, #32]
 801976c:	18d1      	adds	r1, r2, r3
 801976e:	687a      	ldr	r2, [r7, #4]
 8019770:	6a3b      	ldr	r3, [r7, #32]
 8019772:	1ad3      	subs	r3, r2, r3
 8019774:	461a      	mov	r2, r3
 8019776:	f002 fe0d 	bl	801c394 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 801977a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	4413      	add	r3, r2
 8019780:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019788:	429a      	cmp	r2, r3
 801978a:	d304      	bcc.n	8019796 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	689b      	ldr	r3, [r3, #8]
 8019790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019792:	1ad3      	subs	r3, r2, r3
 8019794:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801979a:	605a      	str	r2, [r3, #4]

	return xCount;
 801979c:	687b      	ldr	r3, [r7, #4]
}
 801979e:	4618      	mov	r0, r3
 80197a0:	3728      	adds	r7, #40	; 0x28
 80197a2:	46bd      	mov	sp, r7
 80197a4:	bd80      	pop	{r7, pc}

080197a6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80197a6:	b580      	push	{r7, lr}
 80197a8:	b08a      	sub	sp, #40	; 0x28
 80197aa:	af00      	add	r7, sp, #0
 80197ac:	60f8      	str	r0, [r7, #12]
 80197ae:	60b9      	str	r1, [r7, #8]
 80197b0:	607a      	str	r2, [r7, #4]
 80197b2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80197b4:	687a      	ldr	r2, [r7, #4]
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	4293      	cmp	r3, r2
 80197ba:	bf28      	it	cs
 80197bc:	4613      	movcs	r3, r2
 80197be:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80197c0:	6a3b      	ldr	r3, [r7, #32]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d064      	beq.n	8019890 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	689a      	ldr	r2, [r3, #8]
 80197d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197d2:	1ad3      	subs	r3, r2, r3
 80197d4:	6a3a      	ldr	r2, [r7, #32]
 80197d6:	4293      	cmp	r3, r2
 80197d8:	bf28      	it	cs
 80197da:	4613      	movcs	r3, r2
 80197dc:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80197de:	69fa      	ldr	r2, [r7, #28]
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	429a      	cmp	r2, r3
 80197e4:	d90a      	bls.n	80197fc <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80197e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197ea:	f383 8811 	msr	BASEPRI, r3
 80197ee:	f3bf 8f6f 	isb	sy
 80197f2:	f3bf 8f4f 	dsb	sy
 80197f6:	61bb      	str	r3, [r7, #24]
}
 80197f8:	bf00      	nop
 80197fa:	e7fe      	b.n	80197fa <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80197fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197fe:	69fb      	ldr	r3, [r7, #28]
 8019800:	441a      	add	r2, r3
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	689b      	ldr	r3, [r3, #8]
 8019806:	429a      	cmp	r2, r3
 8019808:	d90a      	bls.n	8019820 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 801980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801980e:	f383 8811 	msr	BASEPRI, r3
 8019812:	f3bf 8f6f 	isb	sy
 8019816:	f3bf 8f4f 	dsb	sy
 801981a:	617b      	str	r3, [r7, #20]
}
 801981c:	bf00      	nop
 801981e:	e7fe      	b.n	801981e <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	699a      	ldr	r2, [r3, #24]
 8019824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019826:	4413      	add	r3, r2
 8019828:	69fa      	ldr	r2, [r7, #28]
 801982a:	4619      	mov	r1, r3
 801982c:	68b8      	ldr	r0, [r7, #8]
 801982e:	f002 fdb1 	bl	801c394 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8019832:	6a3a      	ldr	r2, [r7, #32]
 8019834:	69fb      	ldr	r3, [r7, #28]
 8019836:	429a      	cmp	r2, r3
 8019838:	d919      	bls.n	801986e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 801983a:	6a3a      	ldr	r2, [r7, #32]
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	429a      	cmp	r2, r3
 8019840:	d90a      	bls.n	8019858 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8019842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019846:	f383 8811 	msr	BASEPRI, r3
 801984a:	f3bf 8f6f 	isb	sy
 801984e:	f3bf 8f4f 	dsb	sy
 8019852:	613b      	str	r3, [r7, #16]
}
 8019854:	bf00      	nop
 8019856:	e7fe      	b.n	8019856 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019858:	68ba      	ldr	r2, [r7, #8]
 801985a:	69fb      	ldr	r3, [r7, #28]
 801985c:	18d0      	adds	r0, r2, r3
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	6999      	ldr	r1, [r3, #24]
 8019862:	6a3a      	ldr	r2, [r7, #32]
 8019864:	69fb      	ldr	r3, [r7, #28]
 8019866:	1ad3      	subs	r3, r2, r3
 8019868:	461a      	mov	r2, r3
 801986a:	f002 fd93 	bl	801c394 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 801986e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019870:	6a3b      	ldr	r3, [r7, #32]
 8019872:	4413      	add	r3, r2
 8019874:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	689b      	ldr	r3, [r3, #8]
 801987a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801987c:	429a      	cmp	r2, r3
 801987e:	d304      	bcc.n	801988a <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	689b      	ldr	r3, [r3, #8]
 8019884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019886:	1ad3      	subs	r3, r2, r3
 8019888:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801988e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8019890:	6a3b      	ldr	r3, [r7, #32]
}
 8019892:	4618      	mov	r0, r3
 8019894:	3728      	adds	r7, #40	; 0x28
 8019896:	46bd      	mov	sp, r7
 8019898:	bd80      	pop	{r7, pc}

0801989a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 801989a:	b480      	push	{r7}
 801989c:	b085      	sub	sp, #20
 801989e:	af00      	add	r7, sp, #0
 80198a0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	689a      	ldr	r2, [r3, #8]
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	685b      	ldr	r3, [r3, #4]
 80198aa:	4413      	add	r3, r2
 80198ac:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	68fa      	ldr	r2, [r7, #12]
 80198b4:	1ad3      	subs	r3, r2, r3
 80198b6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	689b      	ldr	r3, [r3, #8]
 80198bc:	68fa      	ldr	r2, [r7, #12]
 80198be:	429a      	cmp	r2, r3
 80198c0:	d304      	bcc.n	80198cc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	689b      	ldr	r3, [r3, #8]
 80198c6:	68fa      	ldr	r2, [r7, #12]
 80198c8:	1ad3      	subs	r3, r2, r3
 80198ca:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80198cc:	68fb      	ldr	r3, [r7, #12]
}
 80198ce:	4618      	mov	r0, r3
 80198d0:	3714      	adds	r7, #20
 80198d2:	46bd      	mov	sp, r7
 80198d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d8:	4770      	bx	lr

080198da <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80198da:	b580      	push	{r7, lr}
 80198dc:	b086      	sub	sp, #24
 80198de:	af00      	add	r7, sp, #0
 80198e0:	60f8      	str	r0, [r7, #12]
 80198e2:	60b9      	str	r1, [r7, #8]
 80198e4:	607a      	str	r2, [r7, #4]
 80198e6:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80198e8:	2355      	movs	r3, #85	; 0x55
 80198ea:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80198ec:	687a      	ldr	r2, [r7, #4]
 80198ee:	6979      	ldr	r1, [r7, #20]
 80198f0:	68b8      	ldr	r0, [r7, #8]
 80198f2:	f002 fd5d 	bl	801c3b0 <memset>
 80198f6:	4602      	mov	r2, r0
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	4293      	cmp	r3, r2
 80198fc:	d00a      	beq.n	8019914 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80198fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019902:	f383 8811 	msr	BASEPRI, r3
 8019906:	f3bf 8f6f 	isb	sy
 801990a:	f3bf 8f4f 	dsb	sy
 801990e:	613b      	str	r3, [r7, #16]
}
 8019910:	bf00      	nop
 8019912:	e7fe      	b.n	8019912 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8019914:	2224      	movs	r2, #36	; 0x24
 8019916:	2100      	movs	r1, #0
 8019918:	68f8      	ldr	r0, [r7, #12]
 801991a:	f002 fd49 	bl	801c3b0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	68ba      	ldr	r2, [r7, #8]
 8019922:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	687a      	ldr	r2, [r7, #4]
 8019928:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	683a      	ldr	r2, [r7, #0]
 801992e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019936:	771a      	strb	r2, [r3, #28]
}
 8019938:	bf00      	nop
 801993a:	3718      	adds	r7, #24
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}

08019940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019940:	b580      	push	{r7, lr}
 8019942:	b08e      	sub	sp, #56	; 0x38
 8019944:	af04      	add	r7, sp, #16
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	60b9      	str	r1, [r7, #8]
 801994a:	607a      	str	r2, [r7, #4]
 801994c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019950:	2b00      	cmp	r3, #0
 8019952:	d10a      	bne.n	801996a <xTaskCreateStatic+0x2a>
	__asm volatile
 8019954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019958:	f383 8811 	msr	BASEPRI, r3
 801995c:	f3bf 8f6f 	isb	sy
 8019960:	f3bf 8f4f 	dsb	sy
 8019964:	623b      	str	r3, [r7, #32]
}
 8019966:	bf00      	nop
 8019968:	e7fe      	b.n	8019968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801996c:	2b00      	cmp	r3, #0
 801996e:	d10a      	bne.n	8019986 <xTaskCreateStatic+0x46>
	__asm volatile
 8019970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019974:	f383 8811 	msr	BASEPRI, r3
 8019978:	f3bf 8f6f 	isb	sy
 801997c:	f3bf 8f4f 	dsb	sy
 8019980:	61fb      	str	r3, [r7, #28]
}
 8019982:	bf00      	nop
 8019984:	e7fe      	b.n	8019984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019986:	23c0      	movs	r3, #192	; 0xc0
 8019988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801998a:	693b      	ldr	r3, [r7, #16]
 801998c:	2bc0      	cmp	r3, #192	; 0xc0
 801998e:	d00a      	beq.n	80199a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8019990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019994:	f383 8811 	msr	BASEPRI, r3
 8019998:	f3bf 8f6f 	isb	sy
 801999c:	f3bf 8f4f 	dsb	sy
 80199a0:	61bb      	str	r3, [r7, #24]
}
 80199a2:	bf00      	nop
 80199a4:	e7fe      	b.n	80199a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80199a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80199a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d01e      	beq.n	80199ec <xTaskCreateStatic+0xac>
 80199ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d01b      	beq.n	80199ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80199b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80199b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80199bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80199be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199c0:	2202      	movs	r2, #2
 80199c2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80199c6:	2300      	movs	r3, #0
 80199c8:	9303      	str	r3, [sp, #12]
 80199ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199cc:	9302      	str	r3, [sp, #8]
 80199ce:	f107 0314 	add.w	r3, r7, #20
 80199d2:	9301      	str	r3, [sp, #4]
 80199d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d6:	9300      	str	r3, [sp, #0]
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	68b9      	ldr	r1, [r7, #8]
 80199de:	68f8      	ldr	r0, [r7, #12]
 80199e0:	f000 f850 	bl	8019a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80199e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80199e6:	f000 f8f7 	bl	8019bd8 <prvAddNewTaskToReadyList>
 80199ea:	e001      	b.n	80199f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80199ec:	2300      	movs	r3, #0
 80199ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80199f0:	697b      	ldr	r3, [r7, #20]
	}
 80199f2:	4618      	mov	r0, r3
 80199f4:	3728      	adds	r7, #40	; 0x28
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}

080199fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80199fa:	b580      	push	{r7, lr}
 80199fc:	b08c      	sub	sp, #48	; 0x30
 80199fe:	af04      	add	r7, sp, #16
 8019a00:	60f8      	str	r0, [r7, #12]
 8019a02:	60b9      	str	r1, [r7, #8]
 8019a04:	603b      	str	r3, [r7, #0]
 8019a06:	4613      	mov	r3, r2
 8019a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019a0a:	88fb      	ldrh	r3, [r7, #6]
 8019a0c:	009b      	lsls	r3, r3, #2
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f001 ff2a 	bl	801b868 <pvPortMalloc>
 8019a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d00e      	beq.n	8019a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019a1c:	20c0      	movs	r0, #192	; 0xc0
 8019a1e:	f001 ff23 	bl	801b868 <pvPortMalloc>
 8019a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019a24:	69fb      	ldr	r3, [r7, #28]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d003      	beq.n	8019a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019a2a:	69fb      	ldr	r3, [r7, #28]
 8019a2c:	697a      	ldr	r2, [r7, #20]
 8019a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8019a30:	e005      	b.n	8019a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019a32:	6978      	ldr	r0, [r7, #20]
 8019a34:	f001 ffe8 	bl	801ba08 <vPortFree>
 8019a38:	e001      	b.n	8019a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019a3e:	69fb      	ldr	r3, [r7, #28]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d017      	beq.n	8019a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019a44:	69fb      	ldr	r3, [r7, #28]
 8019a46:	2200      	movs	r2, #0
 8019a48:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019a4c:	88fa      	ldrh	r2, [r7, #6]
 8019a4e:	2300      	movs	r3, #0
 8019a50:	9303      	str	r3, [sp, #12]
 8019a52:	69fb      	ldr	r3, [r7, #28]
 8019a54:	9302      	str	r3, [sp, #8]
 8019a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a58:	9301      	str	r3, [sp, #4]
 8019a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a5c:	9300      	str	r3, [sp, #0]
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	68b9      	ldr	r1, [r7, #8]
 8019a62:	68f8      	ldr	r0, [r7, #12]
 8019a64:	f000 f80e 	bl	8019a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019a68:	69f8      	ldr	r0, [r7, #28]
 8019a6a:	f000 f8b5 	bl	8019bd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019a6e:	2301      	movs	r3, #1
 8019a70:	61bb      	str	r3, [r7, #24]
 8019a72:	e002      	b.n	8019a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019a74:	f04f 33ff 	mov.w	r3, #4294967295
 8019a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3720      	adds	r7, #32
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}

08019a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b088      	sub	sp, #32
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60f8      	str	r0, [r7, #12]
 8019a8c:	60b9      	str	r1, [r7, #8]
 8019a8e:	607a      	str	r2, [r7, #4]
 8019a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	009b      	lsls	r3, r3, #2
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	21a5      	movs	r1, #165	; 0xa5
 8019a9e:	f002 fc87 	bl	801c3b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019aac:	3b01      	subs	r3, #1
 8019aae:	009b      	lsls	r3, r3, #2
 8019ab0:	4413      	add	r3, r2
 8019ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019ab4:	69bb      	ldr	r3, [r7, #24]
 8019ab6:	f023 0307 	bic.w	r3, r3, #7
 8019aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019abc:	69bb      	ldr	r3, [r7, #24]
 8019abe:	f003 0307 	and.w	r3, r3, #7
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d00a      	beq.n	8019adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8019ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aca:	f383 8811 	msr	BASEPRI, r3
 8019ace:	f3bf 8f6f 	isb	sy
 8019ad2:	f3bf 8f4f 	dsb	sy
 8019ad6:	617b      	str	r3, [r7, #20]
}
 8019ad8:	bf00      	nop
 8019ada:	e7fe      	b.n	8019ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019adc:	68bb      	ldr	r3, [r7, #8]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d01f      	beq.n	8019b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	61fb      	str	r3, [r7, #28]
 8019ae6:	e012      	b.n	8019b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019ae8:	68ba      	ldr	r2, [r7, #8]
 8019aea:	69fb      	ldr	r3, [r7, #28]
 8019aec:	4413      	add	r3, r2
 8019aee:	7819      	ldrb	r1, [r3, #0]
 8019af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019af2:	69fb      	ldr	r3, [r7, #28]
 8019af4:	4413      	add	r3, r2
 8019af6:	3334      	adds	r3, #52	; 0x34
 8019af8:	460a      	mov	r2, r1
 8019afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019afc:	68ba      	ldr	r2, [r7, #8]
 8019afe:	69fb      	ldr	r3, [r7, #28]
 8019b00:	4413      	add	r3, r2
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d006      	beq.n	8019b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019b08:	69fb      	ldr	r3, [r7, #28]
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	61fb      	str	r3, [r7, #28]
 8019b0e:	69fb      	ldr	r3, [r7, #28]
 8019b10:	2b0f      	cmp	r3, #15
 8019b12:	d9e9      	bls.n	8019ae8 <prvInitialiseNewTask+0x64>
 8019b14:	e000      	b.n	8019b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8019b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019b20:	e003      	b.n	8019b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b24:	2200      	movs	r2, #0
 8019b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b2c:	2b37      	cmp	r3, #55	; 0x37
 8019b2e:	d901      	bls.n	8019b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019b30:	2337      	movs	r3, #55	; 0x37
 8019b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b42:	2200      	movs	r2, #0
 8019b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b48:	3304      	adds	r3, #4
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7fe f9b6 	bl	8017ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b52:	3318      	adds	r3, #24
 8019b54:	4618      	mov	r0, r3
 8019b56:	f7fe f9b1 	bl	8017ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8019b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b72:	2200      	movs	r2, #0
 8019b74:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b78:	2200      	movs	r2, #0
 8019b7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b80:	2200      	movs	r2, #0
 8019b82:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b88:	3358      	adds	r3, #88	; 0x58
 8019b8a:	2260      	movs	r2, #96	; 0x60
 8019b8c:	2100      	movs	r1, #0
 8019b8e:	4618      	mov	r0, r3
 8019b90:	f002 fc0e 	bl	801c3b0 <memset>
 8019b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b96:	4a0d      	ldr	r2, [pc, #52]	; (8019bcc <prvInitialiseNewTask+0x148>)
 8019b98:	65da      	str	r2, [r3, #92]	; 0x5c
 8019b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b9c:	4a0c      	ldr	r2, [pc, #48]	; (8019bd0 <prvInitialiseNewTask+0x14c>)
 8019b9e:	661a      	str	r2, [r3, #96]	; 0x60
 8019ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ba2:	4a0c      	ldr	r2, [pc, #48]	; (8019bd4 <prvInitialiseNewTask+0x150>)
 8019ba4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019ba6:	683a      	ldr	r2, [r7, #0]
 8019ba8:	68f9      	ldr	r1, [r7, #12]
 8019baa:	69b8      	ldr	r0, [r7, #24]
 8019bac:	f001 fc0e 	bl	801b3cc <pxPortInitialiseStack>
 8019bb0:	4602      	mov	r2, r0
 8019bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d002      	beq.n	8019bc2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019bc2:	bf00      	nop
 8019bc4:	3720      	adds	r7, #32
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}
 8019bca:	bf00      	nop
 8019bcc:	0801f378 	.word	0x0801f378
 8019bd0:	0801f398 	.word	0x0801f398
 8019bd4:	0801f358 	.word	0x0801f358

08019bd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019be0:	f001 fd20 	bl	801b624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019be4:	4b2d      	ldr	r3, [pc, #180]	; (8019c9c <prvAddNewTaskToReadyList+0xc4>)
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	3301      	adds	r3, #1
 8019bea:	4a2c      	ldr	r2, [pc, #176]	; (8019c9c <prvAddNewTaskToReadyList+0xc4>)
 8019bec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019bee:	4b2c      	ldr	r3, [pc, #176]	; (8019ca0 <prvAddNewTaskToReadyList+0xc8>)
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d109      	bne.n	8019c0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019bf6:	4a2a      	ldr	r2, [pc, #168]	; (8019ca0 <prvAddNewTaskToReadyList+0xc8>)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019bfc:	4b27      	ldr	r3, [pc, #156]	; (8019c9c <prvAddNewTaskToReadyList+0xc4>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2b01      	cmp	r3, #1
 8019c02:	d110      	bne.n	8019c26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019c04:	f000 fc7a 	bl	801a4fc <prvInitialiseTaskLists>
 8019c08:	e00d      	b.n	8019c26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019c0a:	4b26      	ldr	r3, [pc, #152]	; (8019ca4 <prvAddNewTaskToReadyList+0xcc>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d109      	bne.n	8019c26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019c12:	4b23      	ldr	r3, [pc, #140]	; (8019ca0 <prvAddNewTaskToReadyList+0xc8>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	d802      	bhi.n	8019c26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019c20:	4a1f      	ldr	r2, [pc, #124]	; (8019ca0 <prvAddNewTaskToReadyList+0xc8>)
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019c26:	4b20      	ldr	r3, [pc, #128]	; (8019ca8 <prvAddNewTaskToReadyList+0xd0>)
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	3301      	adds	r3, #1
 8019c2c:	4a1e      	ldr	r2, [pc, #120]	; (8019ca8 <prvAddNewTaskToReadyList+0xd0>)
 8019c2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019c30:	4b1d      	ldr	r3, [pc, #116]	; (8019ca8 <prvAddNewTaskToReadyList+0xd0>)
 8019c32:	681a      	ldr	r2, [r3, #0]
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c3c:	4b1b      	ldr	r3, [pc, #108]	; (8019cac <prvAddNewTaskToReadyList+0xd4>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	429a      	cmp	r2, r3
 8019c42:	d903      	bls.n	8019c4c <prvAddNewTaskToReadyList+0x74>
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c48:	4a18      	ldr	r2, [pc, #96]	; (8019cac <prvAddNewTaskToReadyList+0xd4>)
 8019c4a:	6013      	str	r3, [r2, #0]
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c50:	4613      	mov	r3, r2
 8019c52:	009b      	lsls	r3, r3, #2
 8019c54:	4413      	add	r3, r2
 8019c56:	009b      	lsls	r3, r3, #2
 8019c58:	4a15      	ldr	r2, [pc, #84]	; (8019cb0 <prvAddNewTaskToReadyList+0xd8>)
 8019c5a:	441a      	add	r2, r3
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	3304      	adds	r3, #4
 8019c60:	4619      	mov	r1, r3
 8019c62:	4610      	mov	r0, r2
 8019c64:	f7fe f937 	bl	8017ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019c68:	f001 fd0c 	bl	801b684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019c6c:	4b0d      	ldr	r3, [pc, #52]	; (8019ca4 <prvAddNewTaskToReadyList+0xcc>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d00e      	beq.n	8019c92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019c74:	4b0a      	ldr	r3, [pc, #40]	; (8019ca0 <prvAddNewTaskToReadyList+0xc8>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	d207      	bcs.n	8019c92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019c82:	4b0c      	ldr	r3, [pc, #48]	; (8019cb4 <prvAddNewTaskToReadyList+0xdc>)
 8019c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c88:	601a      	str	r2, [r3, #0]
 8019c8a:	f3bf 8f4f 	dsb	sy
 8019c8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019c92:	bf00      	nop
 8019c94:	3708      	adds	r7, #8
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}
 8019c9a:	bf00      	nop
 8019c9c:	200022e8 	.word	0x200022e8
 8019ca0:	20001e14 	.word	0x20001e14
 8019ca4:	200022f4 	.word	0x200022f4
 8019ca8:	20002304 	.word	0x20002304
 8019cac:	200022f0 	.word	0x200022f0
 8019cb0:	20001e18 	.word	0x20001e18
 8019cb4:	e000ed04 	.word	0xe000ed04

08019cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b084      	sub	sp, #16
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d017      	beq.n	8019cfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019cca:	4b13      	ldr	r3, [pc, #76]	; (8019d18 <vTaskDelay+0x60>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d00a      	beq.n	8019ce8 <vTaskDelay+0x30>
	__asm volatile
 8019cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cd6:	f383 8811 	msr	BASEPRI, r3
 8019cda:	f3bf 8f6f 	isb	sy
 8019cde:	f3bf 8f4f 	dsb	sy
 8019ce2:	60bb      	str	r3, [r7, #8]
}
 8019ce4:	bf00      	nop
 8019ce6:	e7fe      	b.n	8019ce6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019ce8:	f000 f88c 	bl	8019e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019cec:	2100      	movs	r1, #0
 8019cee:	6878      	ldr	r0, [r7, #4]
 8019cf0:	f000 ffca 	bl	801ac88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019cf4:	f000 f894 	bl	8019e20 <xTaskResumeAll>
 8019cf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d107      	bne.n	8019d10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8019d00:	4b06      	ldr	r3, [pc, #24]	; (8019d1c <vTaskDelay+0x64>)
 8019d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d06:	601a      	str	r2, [r3, #0]
 8019d08:	f3bf 8f4f 	dsb	sy
 8019d0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019d10:	bf00      	nop
 8019d12:	3710      	adds	r7, #16
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}
 8019d18:	20002310 	.word	0x20002310
 8019d1c:	e000ed04 	.word	0xe000ed04

08019d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b08a      	sub	sp, #40	; 0x28
 8019d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019d26:	2300      	movs	r3, #0
 8019d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019d2e:	463a      	mov	r2, r7
 8019d30:	1d39      	adds	r1, r7, #4
 8019d32:	f107 0308 	add.w	r3, r7, #8
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7fe f86c 	bl	8017e14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019d3c:	6839      	ldr	r1, [r7, #0]
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	68ba      	ldr	r2, [r7, #8]
 8019d42:	9202      	str	r2, [sp, #8]
 8019d44:	9301      	str	r3, [sp, #4]
 8019d46:	2300      	movs	r3, #0
 8019d48:	9300      	str	r3, [sp, #0]
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	460a      	mov	r2, r1
 8019d4e:	4925      	ldr	r1, [pc, #148]	; (8019de4 <vTaskStartScheduler+0xc4>)
 8019d50:	4825      	ldr	r0, [pc, #148]	; (8019de8 <vTaskStartScheduler+0xc8>)
 8019d52:	f7ff fdf5 	bl	8019940 <xTaskCreateStatic>
 8019d56:	4603      	mov	r3, r0
 8019d58:	4a24      	ldr	r2, [pc, #144]	; (8019dec <vTaskStartScheduler+0xcc>)
 8019d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019d5c:	4b23      	ldr	r3, [pc, #140]	; (8019dec <vTaskStartScheduler+0xcc>)
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d002      	beq.n	8019d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019d64:	2301      	movs	r3, #1
 8019d66:	617b      	str	r3, [r7, #20]
 8019d68:	e001      	b.n	8019d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	2b01      	cmp	r3, #1
 8019d72:	d102      	bne.n	8019d7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019d74:	f000 ffdc 	bl	801ad30 <xTimerCreateTimerTask>
 8019d78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	2b01      	cmp	r3, #1
 8019d7e:	d11d      	bne.n	8019dbc <vTaskStartScheduler+0x9c>
	__asm volatile
 8019d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d84:	f383 8811 	msr	BASEPRI, r3
 8019d88:	f3bf 8f6f 	isb	sy
 8019d8c:	f3bf 8f4f 	dsb	sy
 8019d90:	613b      	str	r3, [r7, #16]
}
 8019d92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019d94:	4b16      	ldr	r3, [pc, #88]	; (8019df0 <vTaskStartScheduler+0xd0>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	3358      	adds	r3, #88	; 0x58
 8019d9a:	4a16      	ldr	r2, [pc, #88]	; (8019df4 <vTaskStartScheduler+0xd4>)
 8019d9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019d9e:	4b16      	ldr	r3, [pc, #88]	; (8019df8 <vTaskStartScheduler+0xd8>)
 8019da0:	f04f 32ff 	mov.w	r2, #4294967295
 8019da4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019da6:	4b15      	ldr	r3, [pc, #84]	; (8019dfc <vTaskStartScheduler+0xdc>)
 8019da8:	2201      	movs	r2, #1
 8019daa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019dac:	4b14      	ldr	r3, [pc, #80]	; (8019e00 <vTaskStartScheduler+0xe0>)
 8019dae:	2200      	movs	r2, #0
 8019db0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8019db2:	f7f5 fbf3 	bl	800f59c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019db6:	f001 fb93 	bl	801b4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019dba:	e00e      	b.n	8019dda <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019dc2:	d10a      	bne.n	8019dda <vTaskStartScheduler+0xba>
	__asm volatile
 8019dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dc8:	f383 8811 	msr	BASEPRI, r3
 8019dcc:	f3bf 8f6f 	isb	sy
 8019dd0:	f3bf 8f4f 	dsb	sy
 8019dd4:	60fb      	str	r3, [r7, #12]
}
 8019dd6:	bf00      	nop
 8019dd8:	e7fe      	b.n	8019dd8 <vTaskStartScheduler+0xb8>
}
 8019dda:	bf00      	nop
 8019ddc:	3718      	adds	r7, #24
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bd80      	pop	{r7, pc}
 8019de2:	bf00      	nop
 8019de4:	0801f050 	.word	0x0801f050
 8019de8:	0801a4cd 	.word	0x0801a4cd
 8019dec:	2000230c 	.word	0x2000230c
 8019df0:	20001e14 	.word	0x20001e14
 8019df4:	20000040 	.word	0x20000040
 8019df8:	20002308 	.word	0x20002308
 8019dfc:	200022f4 	.word	0x200022f4
 8019e00:	200022ec 	.word	0x200022ec

08019e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019e04:	b480      	push	{r7}
 8019e06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019e08:	4b04      	ldr	r3, [pc, #16]	; (8019e1c <vTaskSuspendAll+0x18>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	3301      	adds	r3, #1
 8019e0e:	4a03      	ldr	r2, [pc, #12]	; (8019e1c <vTaskSuspendAll+0x18>)
 8019e10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019e12:	bf00      	nop
 8019e14:	46bd      	mov	sp, r7
 8019e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e1a:	4770      	bx	lr
 8019e1c:	20002310 	.word	0x20002310

08019e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b084      	sub	sp, #16
 8019e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019e26:	2300      	movs	r3, #0
 8019e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019e2e:	4b42      	ldr	r3, [pc, #264]	; (8019f38 <xTaskResumeAll+0x118>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d10a      	bne.n	8019e4c <xTaskResumeAll+0x2c>
	__asm volatile
 8019e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e3a:	f383 8811 	msr	BASEPRI, r3
 8019e3e:	f3bf 8f6f 	isb	sy
 8019e42:	f3bf 8f4f 	dsb	sy
 8019e46:	603b      	str	r3, [r7, #0]
}
 8019e48:	bf00      	nop
 8019e4a:	e7fe      	b.n	8019e4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019e4c:	f001 fbea 	bl	801b624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019e50:	4b39      	ldr	r3, [pc, #228]	; (8019f38 <xTaskResumeAll+0x118>)
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	3b01      	subs	r3, #1
 8019e56:	4a38      	ldr	r2, [pc, #224]	; (8019f38 <xTaskResumeAll+0x118>)
 8019e58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019e5a:	4b37      	ldr	r3, [pc, #220]	; (8019f38 <xTaskResumeAll+0x118>)
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d162      	bne.n	8019f28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019e62:	4b36      	ldr	r3, [pc, #216]	; (8019f3c <xTaskResumeAll+0x11c>)
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d05e      	beq.n	8019f28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019e6a:	e02f      	b.n	8019ecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019e6c:	4b34      	ldr	r3, [pc, #208]	; (8019f40 <xTaskResumeAll+0x120>)
 8019e6e:	68db      	ldr	r3, [r3, #12]
 8019e70:	68db      	ldr	r3, [r3, #12]
 8019e72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	3318      	adds	r3, #24
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7fe f889 	bl	8017f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	3304      	adds	r3, #4
 8019e82:	4618      	mov	r0, r3
 8019e84:	f7fe f884 	bl	8017f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e8c:	4b2d      	ldr	r3, [pc, #180]	; (8019f44 <xTaskResumeAll+0x124>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d903      	bls.n	8019e9c <xTaskResumeAll+0x7c>
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e98:	4a2a      	ldr	r2, [pc, #168]	; (8019f44 <xTaskResumeAll+0x124>)
 8019e9a:	6013      	str	r3, [r2, #0]
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ea0:	4613      	mov	r3, r2
 8019ea2:	009b      	lsls	r3, r3, #2
 8019ea4:	4413      	add	r3, r2
 8019ea6:	009b      	lsls	r3, r3, #2
 8019ea8:	4a27      	ldr	r2, [pc, #156]	; (8019f48 <xTaskResumeAll+0x128>)
 8019eaa:	441a      	add	r2, r3
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	3304      	adds	r3, #4
 8019eb0:	4619      	mov	r1, r3
 8019eb2:	4610      	mov	r0, r2
 8019eb4:	f7fe f80f 	bl	8017ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ebc:	4b23      	ldr	r3, [pc, #140]	; (8019f4c <xTaskResumeAll+0x12c>)
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	d302      	bcc.n	8019ecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019ec6:	4b22      	ldr	r3, [pc, #136]	; (8019f50 <xTaskResumeAll+0x130>)
 8019ec8:	2201      	movs	r2, #1
 8019eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019ecc:	4b1c      	ldr	r3, [pc, #112]	; (8019f40 <xTaskResumeAll+0x120>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d1cb      	bne.n	8019e6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d001      	beq.n	8019ede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019eda:	f000 fbb1 	bl	801a640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019ede:	4b1d      	ldr	r3, [pc, #116]	; (8019f54 <xTaskResumeAll+0x134>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d010      	beq.n	8019f0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019eea:	f000 f847 	bl	8019f7c <xTaskIncrementTick>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d002      	beq.n	8019efa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019ef4:	4b16      	ldr	r3, [pc, #88]	; (8019f50 <xTaskResumeAll+0x130>)
 8019ef6:	2201      	movs	r2, #1
 8019ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	3b01      	subs	r3, #1
 8019efe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d1f1      	bne.n	8019eea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8019f06:	4b13      	ldr	r3, [pc, #76]	; (8019f54 <xTaskResumeAll+0x134>)
 8019f08:	2200      	movs	r2, #0
 8019f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019f0c:	4b10      	ldr	r3, [pc, #64]	; (8019f50 <xTaskResumeAll+0x130>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d009      	beq.n	8019f28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019f14:	2301      	movs	r3, #1
 8019f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019f18:	4b0f      	ldr	r3, [pc, #60]	; (8019f58 <xTaskResumeAll+0x138>)
 8019f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f1e:	601a      	str	r2, [r3, #0]
 8019f20:	f3bf 8f4f 	dsb	sy
 8019f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019f28:	f001 fbac 	bl	801b684 <vPortExitCritical>

	return xAlreadyYielded;
 8019f2c:	68bb      	ldr	r3, [r7, #8]
}
 8019f2e:	4618      	mov	r0, r3
 8019f30:	3710      	adds	r7, #16
 8019f32:	46bd      	mov	sp, r7
 8019f34:	bd80      	pop	{r7, pc}
 8019f36:	bf00      	nop
 8019f38:	20002310 	.word	0x20002310
 8019f3c:	200022e8 	.word	0x200022e8
 8019f40:	200022a8 	.word	0x200022a8
 8019f44:	200022f0 	.word	0x200022f0
 8019f48:	20001e18 	.word	0x20001e18
 8019f4c:	20001e14 	.word	0x20001e14
 8019f50:	200022fc 	.word	0x200022fc
 8019f54:	200022f8 	.word	0x200022f8
 8019f58:	e000ed04 	.word	0xe000ed04

08019f5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	b083      	sub	sp, #12
 8019f60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019f62:	4b05      	ldr	r3, [pc, #20]	; (8019f78 <xTaskGetTickCount+0x1c>)
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019f68:	687b      	ldr	r3, [r7, #4]
}
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	370c      	adds	r7, #12
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f74:	4770      	bx	lr
 8019f76:	bf00      	nop
 8019f78:	200022ec 	.word	0x200022ec

08019f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b086      	sub	sp, #24
 8019f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019f82:	2300      	movs	r3, #0
 8019f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019f86:	4b4f      	ldr	r3, [pc, #316]	; (801a0c4 <xTaskIncrementTick+0x148>)
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	f040 808f 	bne.w	801a0ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019f90:	4b4d      	ldr	r3, [pc, #308]	; (801a0c8 <xTaskIncrementTick+0x14c>)
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	3301      	adds	r3, #1
 8019f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019f98:	4a4b      	ldr	r2, [pc, #300]	; (801a0c8 <xTaskIncrementTick+0x14c>)
 8019f9a:	693b      	ldr	r3, [r7, #16]
 8019f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019f9e:	693b      	ldr	r3, [r7, #16]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d120      	bne.n	8019fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8019fa4:	4b49      	ldr	r3, [pc, #292]	; (801a0cc <xTaskIncrementTick+0x150>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d00a      	beq.n	8019fc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8019fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fb2:	f383 8811 	msr	BASEPRI, r3
 8019fb6:	f3bf 8f6f 	isb	sy
 8019fba:	f3bf 8f4f 	dsb	sy
 8019fbe:	603b      	str	r3, [r7, #0]
}
 8019fc0:	bf00      	nop
 8019fc2:	e7fe      	b.n	8019fc2 <xTaskIncrementTick+0x46>
 8019fc4:	4b41      	ldr	r3, [pc, #260]	; (801a0cc <xTaskIncrementTick+0x150>)
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	60fb      	str	r3, [r7, #12]
 8019fca:	4b41      	ldr	r3, [pc, #260]	; (801a0d0 <xTaskIncrementTick+0x154>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	4a3f      	ldr	r2, [pc, #252]	; (801a0cc <xTaskIncrementTick+0x150>)
 8019fd0:	6013      	str	r3, [r2, #0]
 8019fd2:	4a3f      	ldr	r2, [pc, #252]	; (801a0d0 <xTaskIncrementTick+0x154>)
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	6013      	str	r3, [r2, #0]
 8019fd8:	4b3e      	ldr	r3, [pc, #248]	; (801a0d4 <xTaskIncrementTick+0x158>)
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	3301      	adds	r3, #1
 8019fde:	4a3d      	ldr	r2, [pc, #244]	; (801a0d4 <xTaskIncrementTick+0x158>)
 8019fe0:	6013      	str	r3, [r2, #0]
 8019fe2:	f000 fb2d 	bl	801a640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019fe6:	4b3c      	ldr	r3, [pc, #240]	; (801a0d8 <xTaskIncrementTick+0x15c>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	693a      	ldr	r2, [r7, #16]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d349      	bcc.n	801a084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019ff0:	4b36      	ldr	r3, [pc, #216]	; (801a0cc <xTaskIncrementTick+0x150>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d104      	bne.n	801a004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019ffa:	4b37      	ldr	r3, [pc, #220]	; (801a0d8 <xTaskIncrementTick+0x15c>)
 8019ffc:	f04f 32ff 	mov.w	r2, #4294967295
 801a000:	601a      	str	r2, [r3, #0]
					break;
 801a002:	e03f      	b.n	801a084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a004:	4b31      	ldr	r3, [pc, #196]	; (801a0cc <xTaskIncrementTick+0x150>)
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	68db      	ldr	r3, [r3, #12]
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	685b      	ldr	r3, [r3, #4]
 801a012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a014:	693a      	ldr	r2, [r7, #16]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	429a      	cmp	r2, r3
 801a01a:	d203      	bcs.n	801a024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a01c:	4a2e      	ldr	r2, [pc, #184]	; (801a0d8 <xTaskIncrementTick+0x15c>)
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a022:	e02f      	b.n	801a084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a024:	68bb      	ldr	r3, [r7, #8]
 801a026:	3304      	adds	r3, #4
 801a028:	4618      	mov	r0, r3
 801a02a:	f7fd ffb1 	bl	8017f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a032:	2b00      	cmp	r3, #0
 801a034:	d004      	beq.n	801a040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	3318      	adds	r3, #24
 801a03a:	4618      	mov	r0, r3
 801a03c:	f7fd ffa8 	bl	8017f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a040:	68bb      	ldr	r3, [r7, #8]
 801a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a044:	4b25      	ldr	r3, [pc, #148]	; (801a0dc <xTaskIncrementTick+0x160>)
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	429a      	cmp	r2, r3
 801a04a:	d903      	bls.n	801a054 <xTaskIncrementTick+0xd8>
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a050:	4a22      	ldr	r2, [pc, #136]	; (801a0dc <xTaskIncrementTick+0x160>)
 801a052:	6013      	str	r3, [r2, #0]
 801a054:	68bb      	ldr	r3, [r7, #8]
 801a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a058:	4613      	mov	r3, r2
 801a05a:	009b      	lsls	r3, r3, #2
 801a05c:	4413      	add	r3, r2
 801a05e:	009b      	lsls	r3, r3, #2
 801a060:	4a1f      	ldr	r2, [pc, #124]	; (801a0e0 <xTaskIncrementTick+0x164>)
 801a062:	441a      	add	r2, r3
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	3304      	adds	r3, #4
 801a068:	4619      	mov	r1, r3
 801a06a:	4610      	mov	r0, r2
 801a06c:	f7fd ff33 	bl	8017ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a074:	4b1b      	ldr	r3, [pc, #108]	; (801a0e4 <xTaskIncrementTick+0x168>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d3b8      	bcc.n	8019ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a07e:	2301      	movs	r3, #1
 801a080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a082:	e7b5      	b.n	8019ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a084:	4b17      	ldr	r3, [pc, #92]	; (801a0e4 <xTaskIncrementTick+0x168>)
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a08a:	4915      	ldr	r1, [pc, #84]	; (801a0e0 <xTaskIncrementTick+0x164>)
 801a08c:	4613      	mov	r3, r2
 801a08e:	009b      	lsls	r3, r3, #2
 801a090:	4413      	add	r3, r2
 801a092:	009b      	lsls	r3, r3, #2
 801a094:	440b      	add	r3, r1
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	2b01      	cmp	r3, #1
 801a09a:	d901      	bls.n	801a0a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a09c:	2301      	movs	r3, #1
 801a09e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a0a0:	4b11      	ldr	r3, [pc, #68]	; (801a0e8 <xTaskIncrementTick+0x16c>)
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d007      	beq.n	801a0b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801a0a8:	2301      	movs	r3, #1
 801a0aa:	617b      	str	r3, [r7, #20]
 801a0ac:	e004      	b.n	801a0b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a0ae:	4b0f      	ldr	r3, [pc, #60]	; (801a0ec <xTaskIncrementTick+0x170>)
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	4a0d      	ldr	r2, [pc, #52]	; (801a0ec <xTaskIncrementTick+0x170>)
 801a0b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a0b8:	697b      	ldr	r3, [r7, #20]
}
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	3718      	adds	r7, #24
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	bd80      	pop	{r7, pc}
 801a0c2:	bf00      	nop
 801a0c4:	20002310 	.word	0x20002310
 801a0c8:	200022ec 	.word	0x200022ec
 801a0cc:	200022a0 	.word	0x200022a0
 801a0d0:	200022a4 	.word	0x200022a4
 801a0d4:	20002300 	.word	0x20002300
 801a0d8:	20002308 	.word	0x20002308
 801a0dc:	200022f0 	.word	0x200022f0
 801a0e0:	20001e18 	.word	0x20001e18
 801a0e4:	20001e14 	.word	0x20001e14
 801a0e8:	200022fc 	.word	0x200022fc
 801a0ec:	200022f8 	.word	0x200022f8

0801a0f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b084      	sub	sp, #16
 801a0f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a0f6:	4b3e      	ldr	r3, [pc, #248]	; (801a1f0 <vTaskSwitchContext+0x100>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d003      	beq.n	801a106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a0fe:	4b3d      	ldr	r3, [pc, #244]	; (801a1f4 <vTaskSwitchContext+0x104>)
 801a100:	2201      	movs	r2, #1
 801a102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a104:	e070      	b.n	801a1e8 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801a106:	4b3b      	ldr	r3, [pc, #236]	; (801a1f4 <vTaskSwitchContext+0x104>)
 801a108:	2200      	movs	r2, #0
 801a10a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801a10c:	f7f5 fa4d 	bl	800f5aa <getRunTimeCounterValue>
 801a110:	4603      	mov	r3, r0
 801a112:	4a39      	ldr	r2, [pc, #228]	; (801a1f8 <vTaskSwitchContext+0x108>)
 801a114:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801a116:	4b38      	ldr	r3, [pc, #224]	; (801a1f8 <vTaskSwitchContext+0x108>)
 801a118:	681a      	ldr	r2, [r3, #0]
 801a11a:	4b38      	ldr	r3, [pc, #224]	; (801a1fc <vTaskSwitchContext+0x10c>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	429a      	cmp	r2, r3
 801a120:	d909      	bls.n	801a136 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801a122:	4b37      	ldr	r3, [pc, #220]	; (801a200 <vTaskSwitchContext+0x110>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a128:	4a33      	ldr	r2, [pc, #204]	; (801a1f8 <vTaskSwitchContext+0x108>)
 801a12a:	6810      	ldr	r0, [r2, #0]
 801a12c:	4a33      	ldr	r2, [pc, #204]	; (801a1fc <vTaskSwitchContext+0x10c>)
 801a12e:	6812      	ldr	r2, [r2, #0]
 801a130:	1a82      	subs	r2, r0, r2
 801a132:	440a      	add	r2, r1
 801a134:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801a136:	4b30      	ldr	r3, [pc, #192]	; (801a1f8 <vTaskSwitchContext+0x108>)
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	4a30      	ldr	r2, [pc, #192]	; (801a1fc <vTaskSwitchContext+0x10c>)
 801a13c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801a13e:	4b30      	ldr	r3, [pc, #192]	; (801a200 <vTaskSwitchContext+0x110>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	681a      	ldr	r2, [r3, #0]
 801a144:	4b2e      	ldr	r3, [pc, #184]	; (801a200 <vTaskSwitchContext+0x110>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a14a:	429a      	cmp	r2, r3
 801a14c:	d808      	bhi.n	801a160 <vTaskSwitchContext+0x70>
 801a14e:	4b2c      	ldr	r3, [pc, #176]	; (801a200 <vTaskSwitchContext+0x110>)
 801a150:	681a      	ldr	r2, [r3, #0]
 801a152:	4b2b      	ldr	r3, [pc, #172]	; (801a200 <vTaskSwitchContext+0x110>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	3334      	adds	r3, #52	; 0x34
 801a158:	4619      	mov	r1, r3
 801a15a:	4610      	mov	r0, r2
 801a15c:	f7f5 fa2d 	bl	800f5ba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a160:	4b28      	ldr	r3, [pc, #160]	; (801a204 <vTaskSwitchContext+0x114>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	60fb      	str	r3, [r7, #12]
 801a166:	e010      	b.n	801a18a <vTaskSwitchContext+0x9a>
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d10a      	bne.n	801a184 <vTaskSwitchContext+0x94>
	__asm volatile
 801a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a172:	f383 8811 	msr	BASEPRI, r3
 801a176:	f3bf 8f6f 	isb	sy
 801a17a:	f3bf 8f4f 	dsb	sy
 801a17e:	607b      	str	r3, [r7, #4]
}
 801a180:	bf00      	nop
 801a182:	e7fe      	b.n	801a182 <vTaskSwitchContext+0x92>
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	3b01      	subs	r3, #1
 801a188:	60fb      	str	r3, [r7, #12]
 801a18a:	491f      	ldr	r1, [pc, #124]	; (801a208 <vTaskSwitchContext+0x118>)
 801a18c:	68fa      	ldr	r2, [r7, #12]
 801a18e:	4613      	mov	r3, r2
 801a190:	009b      	lsls	r3, r3, #2
 801a192:	4413      	add	r3, r2
 801a194:	009b      	lsls	r3, r3, #2
 801a196:	440b      	add	r3, r1
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d0e4      	beq.n	801a168 <vTaskSwitchContext+0x78>
 801a19e:	68fa      	ldr	r2, [r7, #12]
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	009b      	lsls	r3, r3, #2
 801a1a4:	4413      	add	r3, r2
 801a1a6:	009b      	lsls	r3, r3, #2
 801a1a8:	4a17      	ldr	r2, [pc, #92]	; (801a208 <vTaskSwitchContext+0x118>)
 801a1aa:	4413      	add	r3, r2
 801a1ac:	60bb      	str	r3, [r7, #8]
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	685a      	ldr	r2, [r3, #4]
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	605a      	str	r2, [r3, #4]
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	685a      	ldr	r2, [r3, #4]
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	3308      	adds	r3, #8
 801a1c0:	429a      	cmp	r2, r3
 801a1c2:	d104      	bne.n	801a1ce <vTaskSwitchContext+0xde>
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	685b      	ldr	r3, [r3, #4]
 801a1c8:	685a      	ldr	r2, [r3, #4]
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	605a      	str	r2, [r3, #4]
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	685b      	ldr	r3, [r3, #4]
 801a1d2:	68db      	ldr	r3, [r3, #12]
 801a1d4:	4a0a      	ldr	r2, [pc, #40]	; (801a200 <vTaskSwitchContext+0x110>)
 801a1d6:	6013      	str	r3, [r2, #0]
 801a1d8:	4a0a      	ldr	r2, [pc, #40]	; (801a204 <vTaskSwitchContext+0x114>)
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a1de:	4b08      	ldr	r3, [pc, #32]	; (801a200 <vTaskSwitchContext+0x110>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	3358      	adds	r3, #88	; 0x58
 801a1e4:	4a09      	ldr	r2, [pc, #36]	; (801a20c <vTaskSwitchContext+0x11c>)
 801a1e6:	6013      	str	r3, [r2, #0]
}
 801a1e8:	bf00      	nop
 801a1ea:	3710      	adds	r7, #16
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	20002310 	.word	0x20002310
 801a1f4:	200022fc 	.word	0x200022fc
 801a1f8:	20002318 	.word	0x20002318
 801a1fc:	20002314 	.word	0x20002314
 801a200:	20001e14 	.word	0x20001e14
 801a204:	200022f0 	.word	0x200022f0
 801a208:	20001e18 	.word	0x20001e18
 801a20c:	20000040 	.word	0x20000040

0801a210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b084      	sub	sp, #16
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
 801a218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d10a      	bne.n	801a236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a224:	f383 8811 	msr	BASEPRI, r3
 801a228:	f3bf 8f6f 	isb	sy
 801a22c:	f3bf 8f4f 	dsb	sy
 801a230:	60fb      	str	r3, [r7, #12]
}
 801a232:	bf00      	nop
 801a234:	e7fe      	b.n	801a234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a236:	4b07      	ldr	r3, [pc, #28]	; (801a254 <vTaskPlaceOnEventList+0x44>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	3318      	adds	r3, #24
 801a23c:	4619      	mov	r1, r3
 801a23e:	6878      	ldr	r0, [r7, #4]
 801a240:	f7fd fe6d 	bl	8017f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a244:	2101      	movs	r1, #1
 801a246:	6838      	ldr	r0, [r7, #0]
 801a248:	f000 fd1e 	bl	801ac88 <prvAddCurrentTaskToDelayedList>
}
 801a24c:	bf00      	nop
 801a24e:	3710      	adds	r7, #16
 801a250:	46bd      	mov	sp, r7
 801a252:	bd80      	pop	{r7, pc}
 801a254:	20001e14 	.word	0x20001e14

0801a258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a258:	b580      	push	{r7, lr}
 801a25a:	b086      	sub	sp, #24
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	60f8      	str	r0, [r7, #12]
 801a260:	60b9      	str	r1, [r7, #8]
 801a262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d10a      	bne.n	801a280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a26e:	f383 8811 	msr	BASEPRI, r3
 801a272:	f3bf 8f6f 	isb	sy
 801a276:	f3bf 8f4f 	dsb	sy
 801a27a:	617b      	str	r3, [r7, #20]
}
 801a27c:	bf00      	nop
 801a27e:	e7fe      	b.n	801a27e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a280:	4b0a      	ldr	r3, [pc, #40]	; (801a2ac <vTaskPlaceOnEventListRestricted+0x54>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	3318      	adds	r3, #24
 801a286:	4619      	mov	r1, r3
 801a288:	68f8      	ldr	r0, [r7, #12]
 801a28a:	f7fd fe24 	bl	8017ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d002      	beq.n	801a29a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a294:	f04f 33ff 	mov.w	r3, #4294967295
 801a298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a29a:	6879      	ldr	r1, [r7, #4]
 801a29c:	68b8      	ldr	r0, [r7, #8]
 801a29e:	f000 fcf3 	bl	801ac88 <prvAddCurrentTaskToDelayedList>
	}
 801a2a2:	bf00      	nop
 801a2a4:	3718      	adds	r7, #24
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd80      	pop	{r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	20001e14 	.word	0x20001e14

0801a2b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b086      	sub	sp, #24
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	68db      	ldr	r3, [r3, #12]
 801a2bc:	68db      	ldr	r3, [r3, #12]
 801a2be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a2c0:	693b      	ldr	r3, [r7, #16]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d10a      	bne.n	801a2dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2ca:	f383 8811 	msr	BASEPRI, r3
 801a2ce:	f3bf 8f6f 	isb	sy
 801a2d2:	f3bf 8f4f 	dsb	sy
 801a2d6:	60fb      	str	r3, [r7, #12]
}
 801a2d8:	bf00      	nop
 801a2da:	e7fe      	b.n	801a2da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a2dc:	693b      	ldr	r3, [r7, #16]
 801a2de:	3318      	adds	r3, #24
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7fd fe55 	bl	8017f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a2e6:	4b1e      	ldr	r3, [pc, #120]	; (801a360 <xTaskRemoveFromEventList+0xb0>)
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d11d      	bne.n	801a32a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	3304      	adds	r3, #4
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	f7fd fe4c 	bl	8017f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a2f8:	693b      	ldr	r3, [r7, #16]
 801a2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2fc:	4b19      	ldr	r3, [pc, #100]	; (801a364 <xTaskRemoveFromEventList+0xb4>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	429a      	cmp	r2, r3
 801a302:	d903      	bls.n	801a30c <xTaskRemoveFromEventList+0x5c>
 801a304:	693b      	ldr	r3, [r7, #16]
 801a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a308:	4a16      	ldr	r2, [pc, #88]	; (801a364 <xTaskRemoveFromEventList+0xb4>)
 801a30a:	6013      	str	r3, [r2, #0]
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a310:	4613      	mov	r3, r2
 801a312:	009b      	lsls	r3, r3, #2
 801a314:	4413      	add	r3, r2
 801a316:	009b      	lsls	r3, r3, #2
 801a318:	4a13      	ldr	r2, [pc, #76]	; (801a368 <xTaskRemoveFromEventList+0xb8>)
 801a31a:	441a      	add	r2, r3
 801a31c:	693b      	ldr	r3, [r7, #16]
 801a31e:	3304      	adds	r3, #4
 801a320:	4619      	mov	r1, r3
 801a322:	4610      	mov	r0, r2
 801a324:	f7fd fdd7 	bl	8017ed6 <vListInsertEnd>
 801a328:	e005      	b.n	801a336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a32a:	693b      	ldr	r3, [r7, #16]
 801a32c:	3318      	adds	r3, #24
 801a32e:	4619      	mov	r1, r3
 801a330:	480e      	ldr	r0, [pc, #56]	; (801a36c <xTaskRemoveFromEventList+0xbc>)
 801a332:	f7fd fdd0 	bl	8017ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a336:	693b      	ldr	r3, [r7, #16]
 801a338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a33a:	4b0d      	ldr	r3, [pc, #52]	; (801a370 <xTaskRemoveFromEventList+0xc0>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a340:	429a      	cmp	r2, r3
 801a342:	d905      	bls.n	801a350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a344:	2301      	movs	r3, #1
 801a346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a348:	4b0a      	ldr	r3, [pc, #40]	; (801a374 <xTaskRemoveFromEventList+0xc4>)
 801a34a:	2201      	movs	r2, #1
 801a34c:	601a      	str	r2, [r3, #0]
 801a34e:	e001      	b.n	801a354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a350:	2300      	movs	r3, #0
 801a352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a354:	697b      	ldr	r3, [r7, #20]
}
 801a356:	4618      	mov	r0, r3
 801a358:	3718      	adds	r7, #24
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd80      	pop	{r7, pc}
 801a35e:	bf00      	nop
 801a360:	20002310 	.word	0x20002310
 801a364:	200022f0 	.word	0x200022f0
 801a368:	20001e18 	.word	0x20001e18
 801a36c:	200022a8 	.word	0x200022a8
 801a370:	20001e14 	.word	0x20001e14
 801a374:	200022fc 	.word	0x200022fc

0801a378 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b084      	sub	sp, #16
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d10a      	bne.n	801a39c <vTaskSetTimeOutState+0x24>
	__asm volatile
 801a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a38a:	f383 8811 	msr	BASEPRI, r3
 801a38e:	f3bf 8f6f 	isb	sy
 801a392:	f3bf 8f4f 	dsb	sy
 801a396:	60fb      	str	r3, [r7, #12]
}
 801a398:	bf00      	nop
 801a39a:	e7fe      	b.n	801a39a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 801a39c:	f001 f942 	bl	801b624 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a3a0:	4b06      	ldr	r3, [pc, #24]	; (801a3bc <vTaskSetTimeOutState+0x44>)
 801a3a2:	681a      	ldr	r2, [r3, #0]
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 801a3a8:	4b05      	ldr	r3, [pc, #20]	; (801a3c0 <vTaskSetTimeOutState+0x48>)
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 801a3b0:	f001 f968 	bl	801b684 <vPortExitCritical>
}
 801a3b4:	bf00      	nop
 801a3b6:	3710      	adds	r7, #16
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}
 801a3bc:	20002300 	.word	0x20002300
 801a3c0:	200022ec 	.word	0x200022ec

0801a3c4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a3c4:	b480      	push	{r7}
 801a3c6:	b083      	sub	sp, #12
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a3cc:	4b06      	ldr	r3, [pc, #24]	; (801a3e8 <vTaskInternalSetTimeOutState+0x24>)
 801a3ce:	681a      	ldr	r2, [r3, #0]
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a3d4:	4b05      	ldr	r3, [pc, #20]	; (801a3ec <vTaskInternalSetTimeOutState+0x28>)
 801a3d6:	681a      	ldr	r2, [r3, #0]
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	605a      	str	r2, [r3, #4]
}
 801a3dc:	bf00      	nop
 801a3de:	370c      	adds	r7, #12
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e6:	4770      	bx	lr
 801a3e8:	20002300 	.word	0x20002300
 801a3ec:	200022ec 	.word	0x200022ec

0801a3f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b088      	sub	sp, #32
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d10a      	bne.n	801a416 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a404:	f383 8811 	msr	BASEPRI, r3
 801a408:	f3bf 8f6f 	isb	sy
 801a40c:	f3bf 8f4f 	dsb	sy
 801a410:	613b      	str	r3, [r7, #16]
}
 801a412:	bf00      	nop
 801a414:	e7fe      	b.n	801a414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d10a      	bne.n	801a432 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a420:	f383 8811 	msr	BASEPRI, r3
 801a424:	f3bf 8f6f 	isb	sy
 801a428:	f3bf 8f4f 	dsb	sy
 801a42c:	60fb      	str	r3, [r7, #12]
}
 801a42e:	bf00      	nop
 801a430:	e7fe      	b.n	801a430 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a432:	f001 f8f7 	bl	801b624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a436:	4b1d      	ldr	r3, [pc, #116]	; (801a4ac <xTaskCheckForTimeOut+0xbc>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	685b      	ldr	r3, [r3, #4]
 801a440:	69ba      	ldr	r2, [r7, #24]
 801a442:	1ad3      	subs	r3, r2, r3
 801a444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a44e:	d102      	bne.n	801a456 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a450:	2300      	movs	r3, #0
 801a452:	61fb      	str	r3, [r7, #28]
 801a454:	e023      	b.n	801a49e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681a      	ldr	r2, [r3, #0]
 801a45a:	4b15      	ldr	r3, [pc, #84]	; (801a4b0 <xTaskCheckForTimeOut+0xc0>)
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	429a      	cmp	r2, r3
 801a460:	d007      	beq.n	801a472 <xTaskCheckForTimeOut+0x82>
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	69ba      	ldr	r2, [r7, #24]
 801a468:	429a      	cmp	r2, r3
 801a46a:	d302      	bcc.n	801a472 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a46c:	2301      	movs	r3, #1
 801a46e:	61fb      	str	r3, [r7, #28]
 801a470:	e015      	b.n	801a49e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	697a      	ldr	r2, [r7, #20]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d20b      	bcs.n	801a494 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	681a      	ldr	r2, [r3, #0]
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	1ad2      	subs	r2, r2, r3
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a488:	6878      	ldr	r0, [r7, #4]
 801a48a:	f7ff ff9b 	bl	801a3c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a48e:	2300      	movs	r3, #0
 801a490:	61fb      	str	r3, [r7, #28]
 801a492:	e004      	b.n	801a49e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	2200      	movs	r2, #0
 801a498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a49a:	2301      	movs	r3, #1
 801a49c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a49e:	f001 f8f1 	bl	801b684 <vPortExitCritical>

	return xReturn;
 801a4a2:	69fb      	ldr	r3, [r7, #28]
}
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3720      	adds	r7, #32
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}
 801a4ac:	200022ec 	.word	0x200022ec
 801a4b0:	20002300 	.word	0x20002300

0801a4b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a4b8:	4b03      	ldr	r3, [pc, #12]	; (801a4c8 <vTaskMissedYield+0x14>)
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	601a      	str	r2, [r3, #0]
}
 801a4be:	bf00      	nop
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c6:	4770      	bx	lr
 801a4c8:	200022fc 	.word	0x200022fc

0801a4cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b082      	sub	sp, #8
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a4d4:	f000 f852 	bl	801a57c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a4d8:	4b06      	ldr	r3, [pc, #24]	; (801a4f4 <prvIdleTask+0x28>)
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	2b01      	cmp	r3, #1
 801a4de:	d9f9      	bls.n	801a4d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a4e0:	4b05      	ldr	r3, [pc, #20]	; (801a4f8 <prvIdleTask+0x2c>)
 801a4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4e6:	601a      	str	r2, [r3, #0]
 801a4e8:	f3bf 8f4f 	dsb	sy
 801a4ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a4f0:	e7f0      	b.n	801a4d4 <prvIdleTask+0x8>
 801a4f2:	bf00      	nop
 801a4f4:	20001e18 	.word	0x20001e18
 801a4f8:	e000ed04 	.word	0xe000ed04

0801a4fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b082      	sub	sp, #8
 801a500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a502:	2300      	movs	r3, #0
 801a504:	607b      	str	r3, [r7, #4]
 801a506:	e00c      	b.n	801a522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a508:	687a      	ldr	r2, [r7, #4]
 801a50a:	4613      	mov	r3, r2
 801a50c:	009b      	lsls	r3, r3, #2
 801a50e:	4413      	add	r3, r2
 801a510:	009b      	lsls	r3, r3, #2
 801a512:	4a12      	ldr	r2, [pc, #72]	; (801a55c <prvInitialiseTaskLists+0x60>)
 801a514:	4413      	add	r3, r2
 801a516:	4618      	mov	r0, r3
 801a518:	f7fd fcb0 	bl	8017e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	3301      	adds	r3, #1
 801a520:	607b      	str	r3, [r7, #4]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	2b37      	cmp	r3, #55	; 0x37
 801a526:	d9ef      	bls.n	801a508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a528:	480d      	ldr	r0, [pc, #52]	; (801a560 <prvInitialiseTaskLists+0x64>)
 801a52a:	f7fd fca7 	bl	8017e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a52e:	480d      	ldr	r0, [pc, #52]	; (801a564 <prvInitialiseTaskLists+0x68>)
 801a530:	f7fd fca4 	bl	8017e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a534:	480c      	ldr	r0, [pc, #48]	; (801a568 <prvInitialiseTaskLists+0x6c>)
 801a536:	f7fd fca1 	bl	8017e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a53a:	480c      	ldr	r0, [pc, #48]	; (801a56c <prvInitialiseTaskLists+0x70>)
 801a53c:	f7fd fc9e 	bl	8017e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a540:	480b      	ldr	r0, [pc, #44]	; (801a570 <prvInitialiseTaskLists+0x74>)
 801a542:	f7fd fc9b 	bl	8017e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a546:	4b0b      	ldr	r3, [pc, #44]	; (801a574 <prvInitialiseTaskLists+0x78>)
 801a548:	4a05      	ldr	r2, [pc, #20]	; (801a560 <prvInitialiseTaskLists+0x64>)
 801a54a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a54c:	4b0a      	ldr	r3, [pc, #40]	; (801a578 <prvInitialiseTaskLists+0x7c>)
 801a54e:	4a05      	ldr	r2, [pc, #20]	; (801a564 <prvInitialiseTaskLists+0x68>)
 801a550:	601a      	str	r2, [r3, #0]
}
 801a552:	bf00      	nop
 801a554:	3708      	adds	r7, #8
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}
 801a55a:	bf00      	nop
 801a55c:	20001e18 	.word	0x20001e18
 801a560:	20002278 	.word	0x20002278
 801a564:	2000228c 	.word	0x2000228c
 801a568:	200022a8 	.word	0x200022a8
 801a56c:	200022bc 	.word	0x200022bc
 801a570:	200022d4 	.word	0x200022d4
 801a574:	200022a0 	.word	0x200022a0
 801a578:	200022a4 	.word	0x200022a4

0801a57c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b082      	sub	sp, #8
 801a580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a582:	e019      	b.n	801a5b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a584:	f001 f84e 	bl	801b624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a588:	4b10      	ldr	r3, [pc, #64]	; (801a5cc <prvCheckTasksWaitingTermination+0x50>)
 801a58a:	68db      	ldr	r3, [r3, #12]
 801a58c:	68db      	ldr	r3, [r3, #12]
 801a58e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	3304      	adds	r3, #4
 801a594:	4618      	mov	r0, r3
 801a596:	f7fd fcfb 	bl	8017f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a59a:	4b0d      	ldr	r3, [pc, #52]	; (801a5d0 <prvCheckTasksWaitingTermination+0x54>)
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	3b01      	subs	r3, #1
 801a5a0:	4a0b      	ldr	r2, [pc, #44]	; (801a5d0 <prvCheckTasksWaitingTermination+0x54>)
 801a5a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a5a4:	4b0b      	ldr	r3, [pc, #44]	; (801a5d4 <prvCheckTasksWaitingTermination+0x58>)
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	3b01      	subs	r3, #1
 801a5aa:	4a0a      	ldr	r2, [pc, #40]	; (801a5d4 <prvCheckTasksWaitingTermination+0x58>)
 801a5ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a5ae:	f001 f869 	bl	801b684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a5b2:	6878      	ldr	r0, [r7, #4]
 801a5b4:	f000 f810 	bl	801a5d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a5b8:	4b06      	ldr	r3, [pc, #24]	; (801a5d4 <prvCheckTasksWaitingTermination+0x58>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d1e1      	bne.n	801a584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a5c0:	bf00      	nop
 801a5c2:	bf00      	nop
 801a5c4:	3708      	adds	r7, #8
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bd80      	pop	{r7, pc}
 801a5ca:	bf00      	nop
 801a5cc:	200022bc 	.word	0x200022bc
 801a5d0:	200022e8 	.word	0x200022e8
 801a5d4:	200022d0 	.word	0x200022d0

0801a5d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	3358      	adds	r3, #88	; 0x58
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f002 fc43 	bl	801ce70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d108      	bne.n	801a606 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	f001 fa05 	bl	801ba08 <vPortFree>
				vPortFree( pxTCB );
 801a5fe:	6878      	ldr	r0, [r7, #4]
 801a600:	f001 fa02 	bl	801ba08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a604:	e018      	b.n	801a638 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801a60c:	2b01      	cmp	r3, #1
 801a60e:	d103      	bne.n	801a618 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f001 f9f9 	bl	801ba08 <vPortFree>
	}
 801a616:	e00f      	b.n	801a638 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801a61e:	2b02      	cmp	r3, #2
 801a620:	d00a      	beq.n	801a638 <prvDeleteTCB+0x60>
	__asm volatile
 801a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a626:	f383 8811 	msr	BASEPRI, r3
 801a62a:	f3bf 8f6f 	isb	sy
 801a62e:	f3bf 8f4f 	dsb	sy
 801a632:	60fb      	str	r3, [r7, #12]
}
 801a634:	bf00      	nop
 801a636:	e7fe      	b.n	801a636 <prvDeleteTCB+0x5e>
	}
 801a638:	bf00      	nop
 801a63a:	3710      	adds	r7, #16
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a640:	b480      	push	{r7}
 801a642:	b083      	sub	sp, #12
 801a644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a646:	4b0c      	ldr	r3, [pc, #48]	; (801a678 <prvResetNextTaskUnblockTime+0x38>)
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d104      	bne.n	801a65a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a650:	4b0a      	ldr	r3, [pc, #40]	; (801a67c <prvResetNextTaskUnblockTime+0x3c>)
 801a652:	f04f 32ff 	mov.w	r2, #4294967295
 801a656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a658:	e008      	b.n	801a66c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a65a:	4b07      	ldr	r3, [pc, #28]	; (801a678 <prvResetNextTaskUnblockTime+0x38>)
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	68db      	ldr	r3, [r3, #12]
 801a660:	68db      	ldr	r3, [r3, #12]
 801a662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	685b      	ldr	r3, [r3, #4]
 801a668:	4a04      	ldr	r2, [pc, #16]	; (801a67c <prvResetNextTaskUnblockTime+0x3c>)
 801a66a:	6013      	str	r3, [r2, #0]
}
 801a66c:	bf00      	nop
 801a66e:	370c      	adds	r7, #12
 801a670:	46bd      	mov	sp, r7
 801a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a676:	4770      	bx	lr
 801a678:	200022a0 	.word	0x200022a0
 801a67c:	20002308 	.word	0x20002308

0801a680 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801a680:	b480      	push	{r7}
 801a682:	b083      	sub	sp, #12
 801a684:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801a686:	4b05      	ldr	r3, [pc, #20]	; (801a69c <xTaskGetCurrentTaskHandle+0x1c>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801a68c:	687b      	ldr	r3, [r7, #4]
	}
 801a68e:	4618      	mov	r0, r3
 801a690:	370c      	adds	r7, #12
 801a692:	46bd      	mov	sp, r7
 801a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a698:	4770      	bx	lr
 801a69a:	bf00      	nop
 801a69c:	20001e14 	.word	0x20001e14

0801a6a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a6a0:	b480      	push	{r7}
 801a6a2:	b083      	sub	sp, #12
 801a6a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a6a6:	4b0b      	ldr	r3, [pc, #44]	; (801a6d4 <xTaskGetSchedulerState+0x34>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d102      	bne.n	801a6b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a6ae:	2301      	movs	r3, #1
 801a6b0:	607b      	str	r3, [r7, #4]
 801a6b2:	e008      	b.n	801a6c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a6b4:	4b08      	ldr	r3, [pc, #32]	; (801a6d8 <xTaskGetSchedulerState+0x38>)
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d102      	bne.n	801a6c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a6bc:	2302      	movs	r3, #2
 801a6be:	607b      	str	r3, [r7, #4]
 801a6c0:	e001      	b.n	801a6c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a6c6:	687b      	ldr	r3, [r7, #4]
	}
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	370c      	adds	r7, #12
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d2:	4770      	bx	lr
 801a6d4:	200022f4 	.word	0x200022f4
 801a6d8:	20002310 	.word	0x20002310

0801a6dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b084      	sub	sp, #16
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d051      	beq.n	801a796 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a6f2:	68bb      	ldr	r3, [r7, #8]
 801a6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6f6:	4b2a      	ldr	r3, [pc, #168]	; (801a7a0 <xTaskPriorityInherit+0xc4>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d241      	bcs.n	801a784 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a700:	68bb      	ldr	r3, [r7, #8]
 801a702:	699b      	ldr	r3, [r3, #24]
 801a704:	2b00      	cmp	r3, #0
 801a706:	db06      	blt.n	801a716 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a708:	4b25      	ldr	r3, [pc, #148]	; (801a7a0 <xTaskPriorityInherit+0xc4>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a70e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a716:	68bb      	ldr	r3, [r7, #8]
 801a718:	6959      	ldr	r1, [r3, #20]
 801a71a:	68bb      	ldr	r3, [r7, #8]
 801a71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a71e:	4613      	mov	r3, r2
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	4413      	add	r3, r2
 801a724:	009b      	lsls	r3, r3, #2
 801a726:	4a1f      	ldr	r2, [pc, #124]	; (801a7a4 <xTaskPriorityInherit+0xc8>)
 801a728:	4413      	add	r3, r2
 801a72a:	4299      	cmp	r1, r3
 801a72c:	d122      	bne.n	801a774 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	3304      	adds	r3, #4
 801a732:	4618      	mov	r0, r3
 801a734:	f7fd fc2c 	bl	8017f90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a738:	4b19      	ldr	r3, [pc, #100]	; (801a7a0 <xTaskPriorityInherit+0xc4>)
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a73e:	68bb      	ldr	r3, [r7, #8]
 801a740:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a746:	4b18      	ldr	r3, [pc, #96]	; (801a7a8 <xTaskPriorityInherit+0xcc>)
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d903      	bls.n	801a756 <xTaskPriorityInherit+0x7a>
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a752:	4a15      	ldr	r2, [pc, #84]	; (801a7a8 <xTaskPriorityInherit+0xcc>)
 801a754:	6013      	str	r3, [r2, #0]
 801a756:	68bb      	ldr	r3, [r7, #8]
 801a758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a75a:	4613      	mov	r3, r2
 801a75c:	009b      	lsls	r3, r3, #2
 801a75e:	4413      	add	r3, r2
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	4a10      	ldr	r2, [pc, #64]	; (801a7a4 <xTaskPriorityInherit+0xc8>)
 801a764:	441a      	add	r2, r3
 801a766:	68bb      	ldr	r3, [r7, #8]
 801a768:	3304      	adds	r3, #4
 801a76a:	4619      	mov	r1, r3
 801a76c:	4610      	mov	r0, r2
 801a76e:	f7fd fbb2 	bl	8017ed6 <vListInsertEnd>
 801a772:	e004      	b.n	801a77e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a774:	4b0a      	ldr	r3, [pc, #40]	; (801a7a0 <xTaskPriorityInherit+0xc4>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a77e:	2301      	movs	r3, #1
 801a780:	60fb      	str	r3, [r7, #12]
 801a782:	e008      	b.n	801a796 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a788:	4b05      	ldr	r3, [pc, #20]	; (801a7a0 <xTaskPriorityInherit+0xc4>)
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a78e:	429a      	cmp	r2, r3
 801a790:	d201      	bcs.n	801a796 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a792:	2301      	movs	r3, #1
 801a794:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a796:	68fb      	ldr	r3, [r7, #12]
	}
 801a798:	4618      	mov	r0, r3
 801a79a:	3710      	adds	r7, #16
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	20001e14 	.word	0x20001e14
 801a7a4:	20001e18 	.word	0x20001e18
 801a7a8:	200022f0 	.word	0x200022f0

0801a7ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b086      	sub	sp, #24
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d056      	beq.n	801a870 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a7c2:	4b2e      	ldr	r3, [pc, #184]	; (801a87c <xTaskPriorityDisinherit+0xd0>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	693a      	ldr	r2, [r7, #16]
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d00a      	beq.n	801a7e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d0:	f383 8811 	msr	BASEPRI, r3
 801a7d4:	f3bf 8f6f 	isb	sy
 801a7d8:	f3bf 8f4f 	dsb	sy
 801a7dc:	60fb      	str	r3, [r7, #12]
}
 801a7de:	bf00      	nop
 801a7e0:	e7fe      	b.n	801a7e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a7e2:	693b      	ldr	r3, [r7, #16]
 801a7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d10a      	bne.n	801a800 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7ee:	f383 8811 	msr	BASEPRI, r3
 801a7f2:	f3bf 8f6f 	isb	sy
 801a7f6:	f3bf 8f4f 	dsb	sy
 801a7fa:	60bb      	str	r3, [r7, #8]
}
 801a7fc:	bf00      	nop
 801a7fe:	e7fe      	b.n	801a7fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801a800:	693b      	ldr	r3, [r7, #16]
 801a802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a804:	1e5a      	subs	r2, r3, #1
 801a806:	693b      	ldr	r3, [r7, #16]
 801a808:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a80a:	693b      	ldr	r3, [r7, #16]
 801a80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a80e:	693b      	ldr	r3, [r7, #16]
 801a810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a812:	429a      	cmp	r2, r3
 801a814:	d02c      	beq.n	801a870 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a816:	693b      	ldr	r3, [r7, #16]
 801a818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d128      	bne.n	801a870 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a81e:	693b      	ldr	r3, [r7, #16]
 801a820:	3304      	adds	r3, #4
 801a822:	4618      	mov	r0, r3
 801a824:	f7fd fbb4 	bl	8017f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a828:	693b      	ldr	r3, [r7, #16]
 801a82a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a82c:	693b      	ldr	r3, [r7, #16]
 801a82e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a830:	693b      	ldr	r3, [r7, #16]
 801a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a838:	693b      	ldr	r3, [r7, #16]
 801a83a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a83c:	693b      	ldr	r3, [r7, #16]
 801a83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a840:	4b0f      	ldr	r3, [pc, #60]	; (801a880 <xTaskPriorityDisinherit+0xd4>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	429a      	cmp	r2, r3
 801a846:	d903      	bls.n	801a850 <xTaskPriorityDisinherit+0xa4>
 801a848:	693b      	ldr	r3, [r7, #16]
 801a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a84c:	4a0c      	ldr	r2, [pc, #48]	; (801a880 <xTaskPriorityDisinherit+0xd4>)
 801a84e:	6013      	str	r3, [r2, #0]
 801a850:	693b      	ldr	r3, [r7, #16]
 801a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a854:	4613      	mov	r3, r2
 801a856:	009b      	lsls	r3, r3, #2
 801a858:	4413      	add	r3, r2
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	4a09      	ldr	r2, [pc, #36]	; (801a884 <xTaskPriorityDisinherit+0xd8>)
 801a85e:	441a      	add	r2, r3
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	3304      	adds	r3, #4
 801a864:	4619      	mov	r1, r3
 801a866:	4610      	mov	r0, r2
 801a868:	f7fd fb35 	bl	8017ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a86c:	2301      	movs	r3, #1
 801a86e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a870:	697b      	ldr	r3, [r7, #20]
	}
 801a872:	4618      	mov	r0, r3
 801a874:	3718      	adds	r7, #24
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}
 801a87a:	bf00      	nop
 801a87c:	20001e14 	.word	0x20001e14
 801a880:	200022f0 	.word	0x200022f0
 801a884:	20001e18 	.word	0x20001e18

0801a888 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b088      	sub	sp, #32
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
 801a890:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a896:	2301      	movs	r3, #1
 801a898:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d06a      	beq.n	801a976 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a8a0:	69bb      	ldr	r3, [r7, #24]
 801a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d10a      	bne.n	801a8be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8ac:	f383 8811 	msr	BASEPRI, r3
 801a8b0:	f3bf 8f6f 	isb	sy
 801a8b4:	f3bf 8f4f 	dsb	sy
 801a8b8:	60fb      	str	r3, [r7, #12]
}
 801a8ba:	bf00      	nop
 801a8bc:	e7fe      	b.n	801a8bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a8be:	69bb      	ldr	r3, [r7, #24]
 801a8c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a8c2:	683a      	ldr	r2, [r7, #0]
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d902      	bls.n	801a8ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	61fb      	str	r3, [r7, #28]
 801a8cc:	e002      	b.n	801a8d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a8ce:	69bb      	ldr	r3, [r7, #24]
 801a8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a8d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a8d4:	69bb      	ldr	r3, [r7, #24]
 801a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8d8:	69fa      	ldr	r2, [r7, #28]
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d04b      	beq.n	801a976 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a8de:	69bb      	ldr	r3, [r7, #24]
 801a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8e2:	697a      	ldr	r2, [r7, #20]
 801a8e4:	429a      	cmp	r2, r3
 801a8e6:	d146      	bne.n	801a976 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a8e8:	4b25      	ldr	r3, [pc, #148]	; (801a980 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	69ba      	ldr	r2, [r7, #24]
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d10a      	bne.n	801a908 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8f6:	f383 8811 	msr	BASEPRI, r3
 801a8fa:	f3bf 8f6f 	isb	sy
 801a8fe:	f3bf 8f4f 	dsb	sy
 801a902:	60bb      	str	r3, [r7, #8]
}
 801a904:	bf00      	nop
 801a906:	e7fe      	b.n	801a906 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a908:	69bb      	ldr	r3, [r7, #24]
 801a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a90c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a90e:	69bb      	ldr	r3, [r7, #24]
 801a910:	69fa      	ldr	r2, [r7, #28]
 801a912:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a914:	69bb      	ldr	r3, [r7, #24]
 801a916:	699b      	ldr	r3, [r3, #24]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	db04      	blt.n	801a926 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a91c:	69fb      	ldr	r3, [r7, #28]
 801a91e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a922:	69bb      	ldr	r3, [r7, #24]
 801a924:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a926:	69bb      	ldr	r3, [r7, #24]
 801a928:	6959      	ldr	r1, [r3, #20]
 801a92a:	693a      	ldr	r2, [r7, #16]
 801a92c:	4613      	mov	r3, r2
 801a92e:	009b      	lsls	r3, r3, #2
 801a930:	4413      	add	r3, r2
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	4a13      	ldr	r2, [pc, #76]	; (801a984 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a936:	4413      	add	r3, r2
 801a938:	4299      	cmp	r1, r3
 801a93a:	d11c      	bne.n	801a976 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a93c:	69bb      	ldr	r3, [r7, #24]
 801a93e:	3304      	adds	r3, #4
 801a940:	4618      	mov	r0, r3
 801a942:	f7fd fb25 	bl	8017f90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a946:	69bb      	ldr	r3, [r7, #24]
 801a948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a94a:	4b0f      	ldr	r3, [pc, #60]	; (801a988 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	429a      	cmp	r2, r3
 801a950:	d903      	bls.n	801a95a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801a952:	69bb      	ldr	r3, [r7, #24]
 801a954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a956:	4a0c      	ldr	r2, [pc, #48]	; (801a988 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801a958:	6013      	str	r3, [r2, #0]
 801a95a:	69bb      	ldr	r3, [r7, #24]
 801a95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a95e:	4613      	mov	r3, r2
 801a960:	009b      	lsls	r3, r3, #2
 801a962:	4413      	add	r3, r2
 801a964:	009b      	lsls	r3, r3, #2
 801a966:	4a07      	ldr	r2, [pc, #28]	; (801a984 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a968:	441a      	add	r2, r3
 801a96a:	69bb      	ldr	r3, [r7, #24]
 801a96c:	3304      	adds	r3, #4
 801a96e:	4619      	mov	r1, r3
 801a970:	4610      	mov	r0, r2
 801a972:	f7fd fab0 	bl	8017ed6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a976:	bf00      	nop
 801a978:	3720      	adds	r7, #32
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	bf00      	nop
 801a980:	20001e14 	.word	0x20001e14
 801a984:	20001e18 	.word	0x20001e18
 801a988:	200022f0 	.word	0x200022f0

0801a98c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a98c:	b480      	push	{r7}
 801a98e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a990:	4b07      	ldr	r3, [pc, #28]	; (801a9b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d004      	beq.n	801a9a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a998:	4b05      	ldr	r3, [pc, #20]	; (801a9b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a99e:	3201      	adds	r2, #1
 801a9a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801a9a2:	4b03      	ldr	r3, [pc, #12]	; (801a9b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
	}
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ae:	4770      	bx	lr
 801a9b0:	20001e14 	.word	0x20001e14

0801a9b4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b086      	sub	sp, #24
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	60f8      	str	r0, [r7, #12]
 801a9bc:	60b9      	str	r1, [r7, #8]
 801a9be:	607a      	str	r2, [r7, #4]
 801a9c0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801a9c2:	f000 fe2f 	bl	801b624 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801a9c6:	4b29      	ldr	r3, [pc, #164]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801a9ce:	b2db      	uxtb	r3, r3
 801a9d0:	2b02      	cmp	r3, #2
 801a9d2:	d01c      	beq.n	801aa0e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801a9d4:	4b25      	ldr	r3, [pc, #148]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801a9dc:	68fa      	ldr	r2, [r7, #12]
 801a9de:	43d2      	mvns	r2, r2
 801a9e0:	400a      	ands	r2, r1
 801a9e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801a9e6:	4b21      	ldr	r3, [pc, #132]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	2201      	movs	r2, #1
 801a9ec:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 801a9f0:	683b      	ldr	r3, [r7, #0]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d00b      	beq.n	801aa0e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a9f6:	2101      	movs	r1, #1
 801a9f8:	6838      	ldr	r0, [r7, #0]
 801a9fa:	f000 f945 	bl	801ac88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801a9fe:	4b1c      	ldr	r3, [pc, #112]	; (801aa70 <xTaskNotifyWait+0xbc>)
 801aa00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa04:	601a      	str	r2, [r3, #0]
 801aa06:	f3bf 8f4f 	dsb	sy
 801aa0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801aa0e:	f000 fe39 	bl	801b684 <vPortExitCritical>

		taskENTER_CRITICAL();
 801aa12:	f000 fe07 	bl	801b624 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d005      	beq.n	801aa28 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801aa1c:	4b13      	ldr	r3, [pc, #76]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801aa28:	4b10      	ldr	r3, [pc, #64]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801aa30:	b2db      	uxtb	r3, r3
 801aa32:	2b02      	cmp	r3, #2
 801aa34:	d002      	beq.n	801aa3c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801aa36:	2300      	movs	r3, #0
 801aa38:	617b      	str	r3, [r7, #20]
 801aa3a:	e00a      	b.n	801aa52 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801aa3c:	4b0b      	ldr	r3, [pc, #44]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801aa44:	68ba      	ldr	r2, [r7, #8]
 801aa46:	43d2      	mvns	r2, r2
 801aa48:	400a      	ands	r2, r1
 801aa4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801aa4e:	2301      	movs	r3, #1
 801aa50:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801aa52:	4b06      	ldr	r3, [pc, #24]	; (801aa6c <xTaskNotifyWait+0xb8>)
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	2200      	movs	r2, #0
 801aa58:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 801aa5c:	f000 fe12 	bl	801b684 <vPortExitCritical>

		return xReturn;
 801aa60:	697b      	ldr	r3, [r7, #20]
	}
 801aa62:	4618      	mov	r0, r3
 801aa64:	3718      	adds	r7, #24
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd80      	pop	{r7, pc}
 801aa6a:	bf00      	nop
 801aa6c:	20001e14 	.word	0x20001e14
 801aa70:	e000ed04 	.word	0xe000ed04

0801aa74 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b08a      	sub	sp, #40	; 0x28
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	60f8      	str	r0, [r7, #12]
 801aa7c:	60b9      	str	r1, [r7, #8]
 801aa7e:	603b      	str	r3, [r7, #0]
 801aa80:	4613      	mov	r3, r2
 801aa82:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801aa84:	2301      	movs	r3, #1
 801aa86:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d10a      	bne.n	801aaa4 <xTaskGenericNotify+0x30>
	__asm volatile
 801aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa92:	f383 8811 	msr	BASEPRI, r3
 801aa96:	f3bf 8f6f 	isb	sy
 801aa9a:	f3bf 8f4f 	dsb	sy
 801aa9e:	61bb      	str	r3, [r7, #24]
}
 801aaa0:	bf00      	nop
 801aaa2:	e7fe      	b.n	801aaa2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801aaa8:	f000 fdbc 	bl	801b624 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d004      	beq.n	801aabc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801aab2:	6a3b      	ldr	r3, [r7, #32]
 801aab4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801aab8:	683b      	ldr	r3, [r7, #0]
 801aaba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801aabc:	6a3b      	ldr	r3, [r7, #32]
 801aabe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801aac2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801aac4:	6a3b      	ldr	r3, [r7, #32]
 801aac6:	2202      	movs	r2, #2
 801aac8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801aacc:	79fb      	ldrb	r3, [r7, #7]
 801aace:	2b04      	cmp	r3, #4
 801aad0:	d82d      	bhi.n	801ab2e <xTaskGenericNotify+0xba>
 801aad2:	a201      	add	r2, pc, #4	; (adr r2, 801aad8 <xTaskGenericNotify+0x64>)
 801aad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aad8:	0801ab51 	.word	0x0801ab51
 801aadc:	0801aaed 	.word	0x0801aaed
 801aae0:	0801aaff 	.word	0x0801aaff
 801aae4:	0801ab0f 	.word	0x0801ab0f
 801aae8:	0801ab19 	.word	0x0801ab19
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801aaec:	6a3b      	ldr	r3, [r7, #32]
 801aaee:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	431a      	orrs	r2, r3
 801aaf6:	6a3b      	ldr	r3, [r7, #32]
 801aaf8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801aafc:	e02b      	b.n	801ab56 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801aafe:	6a3b      	ldr	r3, [r7, #32]
 801ab00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ab04:	1c5a      	adds	r2, r3, #1
 801ab06:	6a3b      	ldr	r3, [r7, #32]
 801ab08:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801ab0c:	e023      	b.n	801ab56 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801ab0e:	6a3b      	ldr	r3, [r7, #32]
 801ab10:	68ba      	ldr	r2, [r7, #8]
 801ab12:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801ab16:	e01e      	b.n	801ab56 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801ab18:	7ffb      	ldrb	r3, [r7, #31]
 801ab1a:	2b02      	cmp	r3, #2
 801ab1c:	d004      	beq.n	801ab28 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801ab1e:	6a3b      	ldr	r3, [r7, #32]
 801ab20:	68ba      	ldr	r2, [r7, #8]
 801ab22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801ab26:	e016      	b.n	801ab56 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801ab28:	2300      	movs	r3, #0
 801ab2a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801ab2c:	e013      	b.n	801ab56 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801ab2e:	6a3b      	ldr	r3, [r7, #32]
 801ab30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab38:	d00c      	beq.n	801ab54 <xTaskGenericNotify+0xe0>
	__asm volatile
 801ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab3e:	f383 8811 	msr	BASEPRI, r3
 801ab42:	f3bf 8f6f 	isb	sy
 801ab46:	f3bf 8f4f 	dsb	sy
 801ab4a:	617b      	str	r3, [r7, #20]
}
 801ab4c:	bf00      	nop
 801ab4e:	e7fe      	b.n	801ab4e <xTaskGenericNotify+0xda>
					break;
 801ab50:	bf00      	nop
 801ab52:	e000      	b.n	801ab56 <xTaskGenericNotify+0xe2>

					break;
 801ab54:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801ab56:	7ffb      	ldrb	r3, [r7, #31]
 801ab58:	2b01      	cmp	r3, #1
 801ab5a:	d13a      	bne.n	801abd2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ab5c:	6a3b      	ldr	r3, [r7, #32]
 801ab5e:	3304      	adds	r3, #4
 801ab60:	4618      	mov	r0, r3
 801ab62:	f7fd fa15 	bl	8017f90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801ab66:	6a3b      	ldr	r3, [r7, #32]
 801ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab6a:	4b1d      	ldr	r3, [pc, #116]	; (801abe0 <xTaskGenericNotify+0x16c>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	429a      	cmp	r2, r3
 801ab70:	d903      	bls.n	801ab7a <xTaskGenericNotify+0x106>
 801ab72:	6a3b      	ldr	r3, [r7, #32]
 801ab74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab76:	4a1a      	ldr	r2, [pc, #104]	; (801abe0 <xTaskGenericNotify+0x16c>)
 801ab78:	6013      	str	r3, [r2, #0]
 801ab7a:	6a3b      	ldr	r3, [r7, #32]
 801ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab7e:	4613      	mov	r3, r2
 801ab80:	009b      	lsls	r3, r3, #2
 801ab82:	4413      	add	r3, r2
 801ab84:	009b      	lsls	r3, r3, #2
 801ab86:	4a17      	ldr	r2, [pc, #92]	; (801abe4 <xTaskGenericNotify+0x170>)
 801ab88:	441a      	add	r2, r3
 801ab8a:	6a3b      	ldr	r3, [r7, #32]
 801ab8c:	3304      	adds	r3, #4
 801ab8e:	4619      	mov	r1, r3
 801ab90:	4610      	mov	r0, r2
 801ab92:	f7fd f9a0 	bl	8017ed6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801ab96:	6a3b      	ldr	r3, [r7, #32]
 801ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d00a      	beq.n	801abb4 <xTaskGenericNotify+0x140>
	__asm volatile
 801ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aba2:	f383 8811 	msr	BASEPRI, r3
 801aba6:	f3bf 8f6f 	isb	sy
 801abaa:	f3bf 8f4f 	dsb	sy
 801abae:	613b      	str	r3, [r7, #16]
}
 801abb0:	bf00      	nop
 801abb2:	e7fe      	b.n	801abb2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801abb4:	6a3b      	ldr	r3, [r7, #32]
 801abb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abb8:	4b0b      	ldr	r3, [pc, #44]	; (801abe8 <xTaskGenericNotify+0x174>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abbe:	429a      	cmp	r2, r3
 801abc0:	d907      	bls.n	801abd2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801abc2:	4b0a      	ldr	r3, [pc, #40]	; (801abec <xTaskGenericNotify+0x178>)
 801abc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801abc8:	601a      	str	r2, [r3, #0]
 801abca:	f3bf 8f4f 	dsb	sy
 801abce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801abd2:	f000 fd57 	bl	801b684 <vPortExitCritical>

		return xReturn;
 801abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801abd8:	4618      	mov	r0, r3
 801abda:	3728      	adds	r7, #40	; 0x28
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}
 801abe0:	200022f0 	.word	0x200022f0
 801abe4:	20001e18 	.word	0x20001e18
 801abe8:	20001e14 	.word	0x20001e14
 801abec:	e000ed04 	.word	0xe000ed04

0801abf0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b084      	sub	sp, #16
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d102      	bne.n	801ac04 <xTaskNotifyStateClear+0x14>
 801abfe:	4b0e      	ldr	r3, [pc, #56]	; (801ac38 <xTaskNotifyStateClear+0x48>)
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	e000      	b.n	801ac06 <xTaskNotifyStateClear+0x16>
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 801ac08:	f000 fd0c 	bl	801b624 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 801ac0c:	68bb      	ldr	r3, [r7, #8]
 801ac0e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801ac12:	b2db      	uxtb	r3, r3
 801ac14:	2b02      	cmp	r3, #2
 801ac16:	d106      	bne.n	801ac26 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 801ac20:	2301      	movs	r3, #1
 801ac22:	60fb      	str	r3, [r7, #12]
 801ac24:	e001      	b.n	801ac2a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801ac26:	2300      	movs	r3, #0
 801ac28:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801ac2a:	f000 fd2b 	bl	801b684 <vPortExitCritical>

		return xReturn;
 801ac2e:	68fb      	ldr	r3, [r7, #12]
	}
 801ac30:	4618      	mov	r0, r3
 801ac32:	3710      	adds	r7, #16
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd80      	pop	{r7, pc}
 801ac38:	20001e14 	.word	0x20001e14

0801ac3c <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b084      	sub	sp, #16
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d102      	bne.n	801ac52 <ulTaskNotifyValueClear+0x16>
 801ac4c:	4b0d      	ldr	r3, [pc, #52]	; (801ac84 <ulTaskNotifyValueClear+0x48>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	e000      	b.n	801ac54 <ulTaskNotifyValueClear+0x18>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 801ac56:	f000 fce5 	bl	801b624 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801ac5a:	4b0a      	ldr	r3, [pc, #40]	; (801ac84 <ulTaskNotifyValueClear+0x48>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ac62:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	43db      	mvns	r3, r3
 801ac6e:	401a      	ands	r2, r3
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 801ac76:	f000 fd05 	bl	801b684 <vPortExitCritical>

		return ulReturn;
 801ac7a:	68bb      	ldr	r3, [r7, #8]
	}
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	3710      	adds	r7, #16
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bd80      	pop	{r7, pc}
 801ac84:	20001e14 	.word	0x20001e14

0801ac88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b084      	sub	sp, #16
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ac92:	4b21      	ldr	r3, [pc, #132]	; (801ad18 <prvAddCurrentTaskToDelayedList+0x90>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac98:	4b20      	ldr	r3, [pc, #128]	; (801ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	3304      	adds	r3, #4
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7fd f976 	bl	8017f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801acaa:	d10a      	bne.n	801acc2 <prvAddCurrentTaskToDelayedList+0x3a>
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d007      	beq.n	801acc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801acb2:	4b1a      	ldr	r3, [pc, #104]	; (801ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	3304      	adds	r3, #4
 801acb8:	4619      	mov	r1, r3
 801acba:	4819      	ldr	r0, [pc, #100]	; (801ad20 <prvAddCurrentTaskToDelayedList+0x98>)
 801acbc:	f7fd f90b 	bl	8017ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801acc0:	e026      	b.n	801ad10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801acc2:	68fa      	ldr	r2, [r7, #12]
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	4413      	add	r3, r2
 801acc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801acca:	4b14      	ldr	r3, [pc, #80]	; (801ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	68ba      	ldr	r2, [r7, #8]
 801acd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801acd2:	68ba      	ldr	r2, [r7, #8]
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	429a      	cmp	r2, r3
 801acd8:	d209      	bcs.n	801acee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801acda:	4b12      	ldr	r3, [pc, #72]	; (801ad24 <prvAddCurrentTaskToDelayedList+0x9c>)
 801acdc:	681a      	ldr	r2, [r3, #0]
 801acde:	4b0f      	ldr	r3, [pc, #60]	; (801ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	3304      	adds	r3, #4
 801ace4:	4619      	mov	r1, r3
 801ace6:	4610      	mov	r0, r2
 801ace8:	f7fd f919 	bl	8017f1e <vListInsert>
}
 801acec:	e010      	b.n	801ad10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801acee:	4b0e      	ldr	r3, [pc, #56]	; (801ad28 <prvAddCurrentTaskToDelayedList+0xa0>)
 801acf0:	681a      	ldr	r2, [r3, #0]
 801acf2:	4b0a      	ldr	r3, [pc, #40]	; (801ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	3304      	adds	r3, #4
 801acf8:	4619      	mov	r1, r3
 801acfa:	4610      	mov	r0, r2
 801acfc:	f7fd f90f 	bl	8017f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ad00:	4b0a      	ldr	r3, [pc, #40]	; (801ad2c <prvAddCurrentTaskToDelayedList+0xa4>)
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	68ba      	ldr	r2, [r7, #8]
 801ad06:	429a      	cmp	r2, r3
 801ad08:	d202      	bcs.n	801ad10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801ad0a:	4a08      	ldr	r2, [pc, #32]	; (801ad2c <prvAddCurrentTaskToDelayedList+0xa4>)
 801ad0c:	68bb      	ldr	r3, [r7, #8]
 801ad0e:	6013      	str	r3, [r2, #0]
}
 801ad10:	bf00      	nop
 801ad12:	3710      	adds	r7, #16
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bd80      	pop	{r7, pc}
 801ad18:	200022ec 	.word	0x200022ec
 801ad1c:	20001e14 	.word	0x20001e14
 801ad20:	200022d4 	.word	0x200022d4
 801ad24:	200022a4 	.word	0x200022a4
 801ad28:	200022a0 	.word	0x200022a0
 801ad2c:	20002308 	.word	0x20002308

0801ad30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b08a      	sub	sp, #40	; 0x28
 801ad34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801ad36:	2300      	movs	r3, #0
 801ad38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801ad3a:	f000 fb07 	bl	801b34c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801ad3e:	4b1c      	ldr	r3, [pc, #112]	; (801adb0 <xTimerCreateTimerTask+0x80>)
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d021      	beq.n	801ad8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801ad46:	2300      	movs	r3, #0
 801ad48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801ad4e:	1d3a      	adds	r2, r7, #4
 801ad50:	f107 0108 	add.w	r1, r7, #8
 801ad54:	f107 030c 	add.w	r3, r7, #12
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7fd f875 	bl	8017e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ad5e:	6879      	ldr	r1, [r7, #4]
 801ad60:	68bb      	ldr	r3, [r7, #8]
 801ad62:	68fa      	ldr	r2, [r7, #12]
 801ad64:	9202      	str	r2, [sp, #8]
 801ad66:	9301      	str	r3, [sp, #4]
 801ad68:	2302      	movs	r3, #2
 801ad6a:	9300      	str	r3, [sp, #0]
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	460a      	mov	r2, r1
 801ad70:	4910      	ldr	r1, [pc, #64]	; (801adb4 <xTimerCreateTimerTask+0x84>)
 801ad72:	4811      	ldr	r0, [pc, #68]	; (801adb8 <xTimerCreateTimerTask+0x88>)
 801ad74:	f7fe fde4 	bl	8019940 <xTaskCreateStatic>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	4a10      	ldr	r2, [pc, #64]	; (801adbc <xTimerCreateTimerTask+0x8c>)
 801ad7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801ad7e:	4b0f      	ldr	r3, [pc, #60]	; (801adbc <xTimerCreateTimerTask+0x8c>)
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d001      	beq.n	801ad8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801ad86:	2301      	movs	r3, #1
 801ad88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801ad8a:	697b      	ldr	r3, [r7, #20]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d10a      	bne.n	801ada6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad94:	f383 8811 	msr	BASEPRI, r3
 801ad98:	f3bf 8f6f 	isb	sy
 801ad9c:	f3bf 8f4f 	dsb	sy
 801ada0:	613b      	str	r3, [r7, #16]
}
 801ada2:	bf00      	nop
 801ada4:	e7fe      	b.n	801ada4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801ada6:	697b      	ldr	r3, [r7, #20]
}
 801ada8:	4618      	mov	r0, r3
 801adaa:	3718      	adds	r7, #24
 801adac:	46bd      	mov	sp, r7
 801adae:	bd80      	pop	{r7, pc}
 801adb0:	2000234c 	.word	0x2000234c
 801adb4:	0801f080 	.word	0x0801f080
 801adb8:	0801aef5 	.word	0x0801aef5
 801adbc:	20002350 	.word	0x20002350

0801adc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b08a      	sub	sp, #40	; 0x28
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	60f8      	str	r0, [r7, #12]
 801adc8:	60b9      	str	r1, [r7, #8]
 801adca:	607a      	str	r2, [r7, #4]
 801adcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801adce:	2300      	movs	r3, #0
 801add0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d10a      	bne.n	801adee <xTimerGenericCommand+0x2e>
	__asm volatile
 801add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801addc:	f383 8811 	msr	BASEPRI, r3
 801ade0:	f3bf 8f6f 	isb	sy
 801ade4:	f3bf 8f4f 	dsb	sy
 801ade8:	623b      	str	r3, [r7, #32]
}
 801adea:	bf00      	nop
 801adec:	e7fe      	b.n	801adec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801adee:	4b1a      	ldr	r3, [pc, #104]	; (801ae58 <xTimerGenericCommand+0x98>)
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d02a      	beq.n	801ae4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801adf6:	68bb      	ldr	r3, [r7, #8]
 801adf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801ae02:	68bb      	ldr	r3, [r7, #8]
 801ae04:	2b05      	cmp	r3, #5
 801ae06:	dc18      	bgt.n	801ae3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801ae08:	f7ff fc4a 	bl	801a6a0 <xTaskGetSchedulerState>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	2b02      	cmp	r3, #2
 801ae10:	d109      	bne.n	801ae26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801ae12:	4b11      	ldr	r3, [pc, #68]	; (801ae58 <xTimerGenericCommand+0x98>)
 801ae14:	6818      	ldr	r0, [r3, #0]
 801ae16:	f107 0110 	add.w	r1, r7, #16
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae1e:	f7fd fb3f 	bl	80184a0 <xQueueGenericSend>
 801ae22:	6278      	str	r0, [r7, #36]	; 0x24
 801ae24:	e012      	b.n	801ae4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801ae26:	4b0c      	ldr	r3, [pc, #48]	; (801ae58 <xTimerGenericCommand+0x98>)
 801ae28:	6818      	ldr	r0, [r3, #0]
 801ae2a:	f107 0110 	add.w	r1, r7, #16
 801ae2e:	2300      	movs	r3, #0
 801ae30:	2200      	movs	r2, #0
 801ae32:	f7fd fb35 	bl	80184a0 <xQueueGenericSend>
 801ae36:	6278      	str	r0, [r7, #36]	; 0x24
 801ae38:	e008      	b.n	801ae4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801ae3a:	4b07      	ldr	r3, [pc, #28]	; (801ae58 <xTimerGenericCommand+0x98>)
 801ae3c:	6818      	ldr	r0, [r3, #0]
 801ae3e:	f107 0110 	add.w	r1, r7, #16
 801ae42:	2300      	movs	r3, #0
 801ae44:	683a      	ldr	r2, [r7, #0]
 801ae46:	f7fd fc29 	bl	801869c <xQueueGenericSendFromISR>
 801ae4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ae4e:	4618      	mov	r0, r3
 801ae50:	3728      	adds	r7, #40	; 0x28
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	bf00      	nop
 801ae58:	2000234c 	.word	0x2000234c

0801ae5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b088      	sub	sp, #32
 801ae60:	af02      	add	r7, sp, #8
 801ae62:	6078      	str	r0, [r7, #4]
 801ae64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae66:	4b22      	ldr	r3, [pc, #136]	; (801aef0 <prvProcessExpiredTimer+0x94>)
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	68db      	ldr	r3, [r3, #12]
 801ae6c:	68db      	ldr	r3, [r3, #12]
 801ae6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ae70:	697b      	ldr	r3, [r7, #20]
 801ae72:	3304      	adds	r3, #4
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7fd f88b 	bl	8017f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ae7a:	697b      	ldr	r3, [r7, #20]
 801ae7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae80:	f003 0304 	and.w	r3, r3, #4
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d022      	beq.n	801aece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801ae88:	697b      	ldr	r3, [r7, #20]
 801ae8a:	699a      	ldr	r2, [r3, #24]
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	18d1      	adds	r1, r2, r3
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	683a      	ldr	r2, [r7, #0]
 801ae94:	6978      	ldr	r0, [r7, #20]
 801ae96:	f000 f8d1 	bl	801b03c <prvInsertTimerInActiveList>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d01f      	beq.n	801aee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aea0:	2300      	movs	r3, #0
 801aea2:	9300      	str	r3, [sp, #0]
 801aea4:	2300      	movs	r3, #0
 801aea6:	687a      	ldr	r2, [r7, #4]
 801aea8:	2100      	movs	r1, #0
 801aeaa:	6978      	ldr	r0, [r7, #20]
 801aeac:	f7ff ff88 	bl	801adc0 <xTimerGenericCommand>
 801aeb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801aeb2:	693b      	ldr	r3, [r7, #16]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d113      	bne.n	801aee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aebc:	f383 8811 	msr	BASEPRI, r3
 801aec0:	f3bf 8f6f 	isb	sy
 801aec4:	f3bf 8f4f 	dsb	sy
 801aec8:	60fb      	str	r3, [r7, #12]
}
 801aeca:	bf00      	nop
 801aecc:	e7fe      	b.n	801aecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aed4:	f023 0301 	bic.w	r3, r3, #1
 801aed8:	b2da      	uxtb	r2, r3
 801aeda:	697b      	ldr	r3, [r7, #20]
 801aedc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aee0:	697b      	ldr	r3, [r7, #20]
 801aee2:	6a1b      	ldr	r3, [r3, #32]
 801aee4:	6978      	ldr	r0, [r7, #20]
 801aee6:	4798      	blx	r3
}
 801aee8:	bf00      	nop
 801aeea:	3718      	adds	r7, #24
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}
 801aef0:	20002344 	.word	0x20002344

0801aef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b084      	sub	sp, #16
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aefc:	f107 0308 	add.w	r3, r7, #8
 801af00:	4618      	mov	r0, r3
 801af02:	f000 f857 	bl	801afb4 <prvGetNextExpireTime>
 801af06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801af08:	68bb      	ldr	r3, [r7, #8]
 801af0a:	4619      	mov	r1, r3
 801af0c:	68f8      	ldr	r0, [r7, #12]
 801af0e:	f000 f803 	bl	801af18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801af12:	f000 f8d5 	bl	801b0c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801af16:	e7f1      	b.n	801aefc <prvTimerTask+0x8>

0801af18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b084      	sub	sp, #16
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
 801af20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801af22:	f7fe ff6f 	bl	8019e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801af26:	f107 0308 	add.w	r3, r7, #8
 801af2a:	4618      	mov	r0, r3
 801af2c:	f000 f866 	bl	801affc <prvSampleTimeNow>
 801af30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d130      	bne.n	801af9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d10a      	bne.n	801af54 <prvProcessTimerOrBlockTask+0x3c>
 801af3e:	687a      	ldr	r2, [r7, #4]
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	429a      	cmp	r2, r3
 801af44:	d806      	bhi.n	801af54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801af46:	f7fe ff6b 	bl	8019e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801af4a:	68f9      	ldr	r1, [r7, #12]
 801af4c:	6878      	ldr	r0, [r7, #4]
 801af4e:	f7ff ff85 	bl	801ae5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801af52:	e024      	b.n	801af9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801af54:	683b      	ldr	r3, [r7, #0]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d008      	beq.n	801af6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801af5a:	4b13      	ldr	r3, [pc, #76]	; (801afa8 <prvProcessTimerOrBlockTask+0x90>)
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d101      	bne.n	801af68 <prvProcessTimerOrBlockTask+0x50>
 801af64:	2301      	movs	r3, #1
 801af66:	e000      	b.n	801af6a <prvProcessTimerOrBlockTask+0x52>
 801af68:	2300      	movs	r3, #0
 801af6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801af6c:	4b0f      	ldr	r3, [pc, #60]	; (801afac <prvProcessTimerOrBlockTask+0x94>)
 801af6e:	6818      	ldr	r0, [r3, #0]
 801af70:	687a      	ldr	r2, [r7, #4]
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	1ad3      	subs	r3, r2, r3
 801af76:	683a      	ldr	r2, [r7, #0]
 801af78:	4619      	mov	r1, r3
 801af7a:	f7fe f8ff 	bl	801917c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801af7e:	f7fe ff4f 	bl	8019e20 <xTaskResumeAll>
 801af82:	4603      	mov	r3, r0
 801af84:	2b00      	cmp	r3, #0
 801af86:	d10a      	bne.n	801af9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801af88:	4b09      	ldr	r3, [pc, #36]	; (801afb0 <prvProcessTimerOrBlockTask+0x98>)
 801af8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af8e:	601a      	str	r2, [r3, #0]
 801af90:	f3bf 8f4f 	dsb	sy
 801af94:	f3bf 8f6f 	isb	sy
}
 801af98:	e001      	b.n	801af9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801af9a:	f7fe ff41 	bl	8019e20 <xTaskResumeAll>
}
 801af9e:	bf00      	nop
 801afa0:	3710      	adds	r7, #16
 801afa2:	46bd      	mov	sp, r7
 801afa4:	bd80      	pop	{r7, pc}
 801afa6:	bf00      	nop
 801afa8:	20002348 	.word	0x20002348
 801afac:	2000234c 	.word	0x2000234c
 801afb0:	e000ed04 	.word	0xe000ed04

0801afb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801afb4:	b480      	push	{r7}
 801afb6:	b085      	sub	sp, #20
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801afbc:	4b0e      	ldr	r3, [pc, #56]	; (801aff8 <prvGetNextExpireTime+0x44>)
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d101      	bne.n	801afca <prvGetNextExpireTime+0x16>
 801afc6:	2201      	movs	r2, #1
 801afc8:	e000      	b.n	801afcc <prvGetNextExpireTime+0x18>
 801afca:	2200      	movs	r2, #0
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d105      	bne.n	801afe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801afd8:	4b07      	ldr	r3, [pc, #28]	; (801aff8 <prvGetNextExpireTime+0x44>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	68db      	ldr	r3, [r3, #12]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	60fb      	str	r3, [r7, #12]
 801afe2:	e001      	b.n	801afe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801afe4:	2300      	movs	r3, #0
 801afe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801afe8:	68fb      	ldr	r3, [r7, #12]
}
 801afea:	4618      	mov	r0, r3
 801afec:	3714      	adds	r7, #20
 801afee:	46bd      	mov	sp, r7
 801aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff4:	4770      	bx	lr
 801aff6:	bf00      	nop
 801aff8:	20002344 	.word	0x20002344

0801affc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b084      	sub	sp, #16
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b004:	f7fe ffaa 	bl	8019f5c <xTaskGetTickCount>
 801b008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b00a:	4b0b      	ldr	r3, [pc, #44]	; (801b038 <prvSampleTimeNow+0x3c>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	68fa      	ldr	r2, [r7, #12]
 801b010:	429a      	cmp	r2, r3
 801b012:	d205      	bcs.n	801b020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b014:	f000 f936 	bl	801b284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2201      	movs	r2, #1
 801b01c:	601a      	str	r2, [r3, #0]
 801b01e:	e002      	b.n	801b026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	2200      	movs	r2, #0
 801b024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b026:	4a04      	ldr	r2, [pc, #16]	; (801b038 <prvSampleTimeNow+0x3c>)
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b02c:	68fb      	ldr	r3, [r7, #12]
}
 801b02e:	4618      	mov	r0, r3
 801b030:	3710      	adds	r7, #16
 801b032:	46bd      	mov	sp, r7
 801b034:	bd80      	pop	{r7, pc}
 801b036:	bf00      	nop
 801b038:	20002354 	.word	0x20002354

0801b03c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b086      	sub	sp, #24
 801b040:	af00      	add	r7, sp, #0
 801b042:	60f8      	str	r0, [r7, #12]
 801b044:	60b9      	str	r1, [r7, #8]
 801b046:	607a      	str	r2, [r7, #4]
 801b048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b04a:	2300      	movs	r3, #0
 801b04c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	68ba      	ldr	r2, [r7, #8]
 801b052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	68fa      	ldr	r2, [r7, #12]
 801b058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b05a:	68ba      	ldr	r2, [r7, #8]
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	429a      	cmp	r2, r3
 801b060:	d812      	bhi.n	801b088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b062:	687a      	ldr	r2, [r7, #4]
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	1ad2      	subs	r2, r2, r3
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	699b      	ldr	r3, [r3, #24]
 801b06c:	429a      	cmp	r2, r3
 801b06e:	d302      	bcc.n	801b076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b070:	2301      	movs	r3, #1
 801b072:	617b      	str	r3, [r7, #20]
 801b074:	e01b      	b.n	801b0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b076:	4b10      	ldr	r3, [pc, #64]	; (801b0b8 <prvInsertTimerInActiveList+0x7c>)
 801b078:	681a      	ldr	r2, [r3, #0]
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	3304      	adds	r3, #4
 801b07e:	4619      	mov	r1, r3
 801b080:	4610      	mov	r0, r2
 801b082:	f7fc ff4c 	bl	8017f1e <vListInsert>
 801b086:	e012      	b.n	801b0ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b088:	687a      	ldr	r2, [r7, #4]
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	429a      	cmp	r2, r3
 801b08e:	d206      	bcs.n	801b09e <prvInsertTimerInActiveList+0x62>
 801b090:	68ba      	ldr	r2, [r7, #8]
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	429a      	cmp	r2, r3
 801b096:	d302      	bcc.n	801b09e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b098:	2301      	movs	r3, #1
 801b09a:	617b      	str	r3, [r7, #20]
 801b09c:	e007      	b.n	801b0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b09e:	4b07      	ldr	r3, [pc, #28]	; (801b0bc <prvInsertTimerInActiveList+0x80>)
 801b0a0:	681a      	ldr	r2, [r3, #0]
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	3304      	adds	r3, #4
 801b0a6:	4619      	mov	r1, r3
 801b0a8:	4610      	mov	r0, r2
 801b0aa:	f7fc ff38 	bl	8017f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b0ae:	697b      	ldr	r3, [r7, #20]
}
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	3718      	adds	r7, #24
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}
 801b0b8:	20002348 	.word	0x20002348
 801b0bc:	20002344 	.word	0x20002344

0801b0c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b08e      	sub	sp, #56	; 0x38
 801b0c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b0c6:	e0ca      	b.n	801b25e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	da18      	bge.n	801b100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801b0ce:	1d3b      	adds	r3, r7, #4
 801b0d0:	3304      	adds	r3, #4
 801b0d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d10a      	bne.n	801b0f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0de:	f383 8811 	msr	BASEPRI, r3
 801b0e2:	f3bf 8f6f 	isb	sy
 801b0e6:	f3bf 8f4f 	dsb	sy
 801b0ea:	61fb      	str	r3, [r7, #28]
}
 801b0ec:	bf00      	nop
 801b0ee:	e7fe      	b.n	801b0ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b0f6:	6850      	ldr	r0, [r2, #4]
 801b0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b0fa:	6892      	ldr	r2, [r2, #8]
 801b0fc:	4611      	mov	r1, r2
 801b0fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	f2c0 80aa 	blt.w	801b25c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b10e:	695b      	ldr	r3, [r3, #20]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d004      	beq.n	801b11e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b116:	3304      	adds	r3, #4
 801b118:	4618      	mov	r0, r3
 801b11a:	f7fc ff39 	bl	8017f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b11e:	463b      	mov	r3, r7
 801b120:	4618      	mov	r0, r3
 801b122:	f7ff ff6b 	bl	801affc <prvSampleTimeNow>
 801b126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	2b09      	cmp	r3, #9
 801b12c:	f200 8097 	bhi.w	801b25e <prvProcessReceivedCommands+0x19e>
 801b130:	a201      	add	r2, pc, #4	; (adr r2, 801b138 <prvProcessReceivedCommands+0x78>)
 801b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b136:	bf00      	nop
 801b138:	0801b161 	.word	0x0801b161
 801b13c:	0801b161 	.word	0x0801b161
 801b140:	0801b161 	.word	0x0801b161
 801b144:	0801b1d5 	.word	0x0801b1d5
 801b148:	0801b1e9 	.word	0x0801b1e9
 801b14c:	0801b233 	.word	0x0801b233
 801b150:	0801b161 	.word	0x0801b161
 801b154:	0801b161 	.word	0x0801b161
 801b158:	0801b1d5 	.word	0x0801b1d5
 801b15c:	0801b1e9 	.word	0x0801b1e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b166:	f043 0301 	orr.w	r3, r3, #1
 801b16a:	b2da      	uxtb	r2, r3
 801b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b172:	68ba      	ldr	r2, [r7, #8]
 801b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b176:	699b      	ldr	r3, [r3, #24]
 801b178:	18d1      	adds	r1, r2, r3
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b180:	f7ff ff5c 	bl	801b03c <prvInsertTimerInActiveList>
 801b184:	4603      	mov	r3, r0
 801b186:	2b00      	cmp	r3, #0
 801b188:	d069      	beq.n	801b25e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b18c:	6a1b      	ldr	r3, [r3, #32]
 801b18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b198:	f003 0304 	and.w	r3, r3, #4
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d05e      	beq.n	801b25e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b1a0:	68ba      	ldr	r2, [r7, #8]
 801b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1a4:	699b      	ldr	r3, [r3, #24]
 801b1a6:	441a      	add	r2, r3
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	9300      	str	r3, [sp, #0]
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	2100      	movs	r1, #0
 801b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b1b2:	f7ff fe05 	bl	801adc0 <xTimerGenericCommand>
 801b1b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801b1b8:	6a3b      	ldr	r3, [r7, #32]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d14f      	bne.n	801b25e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1c2:	f383 8811 	msr	BASEPRI, r3
 801b1c6:	f3bf 8f6f 	isb	sy
 801b1ca:	f3bf 8f4f 	dsb	sy
 801b1ce:	61bb      	str	r3, [r7, #24]
}
 801b1d0:	bf00      	nop
 801b1d2:	e7fe      	b.n	801b1d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1da:	f023 0301 	bic.w	r3, r3, #1
 801b1de:	b2da      	uxtb	r2, r3
 801b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b1e6:	e03a      	b.n	801b25e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1ee:	f043 0301 	orr.w	r3, r3, #1
 801b1f2:	b2da      	uxtb	r2, r3
 801b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b1fa:	68ba      	ldr	r2, [r7, #8]
 801b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b202:	699b      	ldr	r3, [r3, #24]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d10a      	bne.n	801b21e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b20c:	f383 8811 	msr	BASEPRI, r3
 801b210:	f3bf 8f6f 	isb	sy
 801b214:	f3bf 8f4f 	dsb	sy
 801b218:	617b      	str	r3, [r7, #20]
}
 801b21a:	bf00      	nop
 801b21c:	e7fe      	b.n	801b21c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b220:	699a      	ldr	r2, [r3, #24]
 801b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b224:	18d1      	adds	r1, r2, r3
 801b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b22c:	f7ff ff06 	bl	801b03c <prvInsertTimerInActiveList>
					break;
 801b230:	e015      	b.n	801b25e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b238:	f003 0302 	and.w	r3, r3, #2
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d103      	bne.n	801b248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801b240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b242:	f000 fbe1 	bl	801ba08 <vPortFree>
 801b246:	e00a      	b.n	801b25e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b24a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b24e:	f023 0301 	bic.w	r3, r3, #1
 801b252:	b2da      	uxtb	r2, r3
 801b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b25a:	e000      	b.n	801b25e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b25c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b25e:	4b08      	ldr	r3, [pc, #32]	; (801b280 <prvProcessReceivedCommands+0x1c0>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	1d39      	adds	r1, r7, #4
 801b264:	2200      	movs	r2, #0
 801b266:	4618      	mov	r0, r3
 801b268:	f7fd fb40 	bl	80188ec <xQueueReceive>
 801b26c:	4603      	mov	r3, r0
 801b26e:	2b00      	cmp	r3, #0
 801b270:	f47f af2a 	bne.w	801b0c8 <prvProcessReceivedCommands+0x8>
	}
}
 801b274:	bf00      	nop
 801b276:	bf00      	nop
 801b278:	3730      	adds	r7, #48	; 0x30
 801b27a:	46bd      	mov	sp, r7
 801b27c:	bd80      	pop	{r7, pc}
 801b27e:	bf00      	nop
 801b280:	2000234c 	.word	0x2000234c

0801b284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b284:	b580      	push	{r7, lr}
 801b286:	b088      	sub	sp, #32
 801b288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b28a:	e048      	b.n	801b31e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b28c:	4b2d      	ldr	r3, [pc, #180]	; (801b344 <prvSwitchTimerLists+0xc0>)
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	68db      	ldr	r3, [r3, #12]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b296:	4b2b      	ldr	r3, [pc, #172]	; (801b344 <prvSwitchTimerLists+0xc0>)
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	68db      	ldr	r3, [r3, #12]
 801b29c:	68db      	ldr	r3, [r3, #12]
 801b29e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	3304      	adds	r3, #4
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f7fc fe73 	bl	8017f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	6a1b      	ldr	r3, [r3, #32]
 801b2ae:	68f8      	ldr	r0, [r7, #12]
 801b2b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b2b8:	f003 0304 	and.w	r3, r3, #4
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d02e      	beq.n	801b31e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	699b      	ldr	r3, [r3, #24]
 801b2c4:	693a      	ldr	r2, [r7, #16]
 801b2c6:	4413      	add	r3, r2
 801b2c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b2ca:	68ba      	ldr	r2, [r7, #8]
 801b2cc:	693b      	ldr	r3, [r7, #16]
 801b2ce:	429a      	cmp	r2, r3
 801b2d0:	d90e      	bls.n	801b2f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	68ba      	ldr	r2, [r7, #8]
 801b2d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	68fa      	ldr	r2, [r7, #12]
 801b2dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b2de:	4b19      	ldr	r3, [pc, #100]	; (801b344 <prvSwitchTimerLists+0xc0>)
 801b2e0:	681a      	ldr	r2, [r3, #0]
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	3304      	adds	r3, #4
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	4610      	mov	r0, r2
 801b2ea:	f7fc fe18 	bl	8017f1e <vListInsert>
 801b2ee:	e016      	b.n	801b31e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	9300      	str	r3, [sp, #0]
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	693a      	ldr	r2, [r7, #16]
 801b2f8:	2100      	movs	r1, #0
 801b2fa:	68f8      	ldr	r0, [r7, #12]
 801b2fc:	f7ff fd60 	bl	801adc0 <xTimerGenericCommand>
 801b300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d10a      	bne.n	801b31e <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b30c:	f383 8811 	msr	BASEPRI, r3
 801b310:	f3bf 8f6f 	isb	sy
 801b314:	f3bf 8f4f 	dsb	sy
 801b318:	603b      	str	r3, [r7, #0]
}
 801b31a:	bf00      	nop
 801b31c:	e7fe      	b.n	801b31c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b31e:	4b09      	ldr	r3, [pc, #36]	; (801b344 <prvSwitchTimerLists+0xc0>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d1b1      	bne.n	801b28c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b328:	4b06      	ldr	r3, [pc, #24]	; (801b344 <prvSwitchTimerLists+0xc0>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b32e:	4b06      	ldr	r3, [pc, #24]	; (801b348 <prvSwitchTimerLists+0xc4>)
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	4a04      	ldr	r2, [pc, #16]	; (801b344 <prvSwitchTimerLists+0xc0>)
 801b334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b336:	4a04      	ldr	r2, [pc, #16]	; (801b348 <prvSwitchTimerLists+0xc4>)
 801b338:	697b      	ldr	r3, [r7, #20]
 801b33a:	6013      	str	r3, [r2, #0]
}
 801b33c:	bf00      	nop
 801b33e:	3718      	adds	r7, #24
 801b340:	46bd      	mov	sp, r7
 801b342:	bd80      	pop	{r7, pc}
 801b344:	20002344 	.word	0x20002344
 801b348:	20002348 	.word	0x20002348

0801b34c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b082      	sub	sp, #8
 801b350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b352:	f000 f967 	bl	801b624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b356:	4b15      	ldr	r3, [pc, #84]	; (801b3ac <prvCheckForValidListAndQueue+0x60>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d120      	bne.n	801b3a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b35e:	4814      	ldr	r0, [pc, #80]	; (801b3b0 <prvCheckForValidListAndQueue+0x64>)
 801b360:	f7fc fd8c 	bl	8017e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b364:	4813      	ldr	r0, [pc, #76]	; (801b3b4 <prvCheckForValidListAndQueue+0x68>)
 801b366:	f7fc fd89 	bl	8017e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b36a:	4b13      	ldr	r3, [pc, #76]	; (801b3b8 <prvCheckForValidListAndQueue+0x6c>)
 801b36c:	4a10      	ldr	r2, [pc, #64]	; (801b3b0 <prvCheckForValidListAndQueue+0x64>)
 801b36e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b370:	4b12      	ldr	r3, [pc, #72]	; (801b3bc <prvCheckForValidListAndQueue+0x70>)
 801b372:	4a10      	ldr	r2, [pc, #64]	; (801b3b4 <prvCheckForValidListAndQueue+0x68>)
 801b374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b376:	2300      	movs	r3, #0
 801b378:	9300      	str	r3, [sp, #0]
 801b37a:	4b11      	ldr	r3, [pc, #68]	; (801b3c0 <prvCheckForValidListAndQueue+0x74>)
 801b37c:	4a11      	ldr	r2, [pc, #68]	; (801b3c4 <prvCheckForValidListAndQueue+0x78>)
 801b37e:	2110      	movs	r1, #16
 801b380:	200a      	movs	r0, #10
 801b382:	f7fc fe97 	bl	80180b4 <xQueueGenericCreateStatic>
 801b386:	4603      	mov	r3, r0
 801b388:	4a08      	ldr	r2, [pc, #32]	; (801b3ac <prvCheckForValidListAndQueue+0x60>)
 801b38a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b38c:	4b07      	ldr	r3, [pc, #28]	; (801b3ac <prvCheckForValidListAndQueue+0x60>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d005      	beq.n	801b3a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b394:	4b05      	ldr	r3, [pc, #20]	; (801b3ac <prvCheckForValidListAndQueue+0x60>)
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	490b      	ldr	r1, [pc, #44]	; (801b3c8 <prvCheckForValidListAndQueue+0x7c>)
 801b39a:	4618      	mov	r0, r3
 801b39c:	f7fd fe9a 	bl	80190d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b3a0:	f000 f970 	bl	801b684 <vPortExitCritical>
}
 801b3a4:	bf00      	nop
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
 801b3aa:	bf00      	nop
 801b3ac:	2000234c 	.word	0x2000234c
 801b3b0:	2000231c 	.word	0x2000231c
 801b3b4:	20002330 	.word	0x20002330
 801b3b8:	20002344 	.word	0x20002344
 801b3bc:	20002348 	.word	0x20002348
 801b3c0:	200023f8 	.word	0x200023f8
 801b3c4:	20002358 	.word	0x20002358
 801b3c8:	0801f088 	.word	0x0801f088

0801b3cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b3cc:	b480      	push	{r7}
 801b3ce:	b085      	sub	sp, #20
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	60f8      	str	r0, [r7, #12]
 801b3d4:	60b9      	str	r1, [r7, #8]
 801b3d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	3b04      	subs	r3, #4
 801b3dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	3b04      	subs	r3, #4
 801b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b3ec:	68bb      	ldr	r3, [r7, #8]
 801b3ee:	f023 0201 	bic.w	r2, r3, #1
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	3b04      	subs	r3, #4
 801b3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b3fc:	4a0c      	ldr	r2, [pc, #48]	; (801b430 <pxPortInitialiseStack+0x64>)
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	3b14      	subs	r3, #20
 801b406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b408:	687a      	ldr	r2, [r7, #4]
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	3b04      	subs	r3, #4
 801b412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	f06f 0202 	mvn.w	r2, #2
 801b41a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	3b20      	subs	r3, #32
 801b420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b422:	68fb      	ldr	r3, [r7, #12]
}
 801b424:	4618      	mov	r0, r3
 801b426:	3714      	adds	r7, #20
 801b428:	46bd      	mov	sp, r7
 801b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b42e:	4770      	bx	lr
 801b430:	0801b435 	.word	0x0801b435

0801b434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b434:	b480      	push	{r7}
 801b436:	b085      	sub	sp, #20
 801b438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b43a:	2300      	movs	r3, #0
 801b43c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b43e:	4b12      	ldr	r3, [pc, #72]	; (801b488 <prvTaskExitError+0x54>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b446:	d00a      	beq.n	801b45e <prvTaskExitError+0x2a>
	__asm volatile
 801b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b44c:	f383 8811 	msr	BASEPRI, r3
 801b450:	f3bf 8f6f 	isb	sy
 801b454:	f3bf 8f4f 	dsb	sy
 801b458:	60fb      	str	r3, [r7, #12]
}
 801b45a:	bf00      	nop
 801b45c:	e7fe      	b.n	801b45c <prvTaskExitError+0x28>
	__asm volatile
 801b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b462:	f383 8811 	msr	BASEPRI, r3
 801b466:	f3bf 8f6f 	isb	sy
 801b46a:	f3bf 8f4f 	dsb	sy
 801b46e:	60bb      	str	r3, [r7, #8]
}
 801b470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b472:	bf00      	nop
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d0fc      	beq.n	801b474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b47a:	bf00      	nop
 801b47c:	bf00      	nop
 801b47e:	3714      	adds	r7, #20
 801b480:	46bd      	mov	sp, r7
 801b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b486:	4770      	bx	lr
 801b488:	2000003c 	.word	0x2000003c
 801b48c:	00000000 	.word	0x00000000

0801b490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b490:	4b07      	ldr	r3, [pc, #28]	; (801b4b0 <pxCurrentTCBConst2>)
 801b492:	6819      	ldr	r1, [r3, #0]
 801b494:	6808      	ldr	r0, [r1, #0]
 801b496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b49a:	f380 8809 	msr	PSP, r0
 801b49e:	f3bf 8f6f 	isb	sy
 801b4a2:	f04f 0000 	mov.w	r0, #0
 801b4a6:	f380 8811 	msr	BASEPRI, r0
 801b4aa:	4770      	bx	lr
 801b4ac:	f3af 8000 	nop.w

0801b4b0 <pxCurrentTCBConst2>:
 801b4b0:	20001e14 	.word	0x20001e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b4b4:	bf00      	nop
 801b4b6:	bf00      	nop

0801b4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b4b8:	4808      	ldr	r0, [pc, #32]	; (801b4dc <prvPortStartFirstTask+0x24>)
 801b4ba:	6800      	ldr	r0, [r0, #0]
 801b4bc:	6800      	ldr	r0, [r0, #0]
 801b4be:	f380 8808 	msr	MSP, r0
 801b4c2:	f04f 0000 	mov.w	r0, #0
 801b4c6:	f380 8814 	msr	CONTROL, r0
 801b4ca:	b662      	cpsie	i
 801b4cc:	b661      	cpsie	f
 801b4ce:	f3bf 8f4f 	dsb	sy
 801b4d2:	f3bf 8f6f 	isb	sy
 801b4d6:	df00      	svc	0
 801b4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b4da:	bf00      	nop
 801b4dc:	e000ed08 	.word	0xe000ed08

0801b4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	b086      	sub	sp, #24
 801b4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b4e6:	4b46      	ldr	r3, [pc, #280]	; (801b600 <xPortStartScheduler+0x120>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a46      	ldr	r2, [pc, #280]	; (801b604 <xPortStartScheduler+0x124>)
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d10a      	bne.n	801b506 <xPortStartScheduler+0x26>
	__asm volatile
 801b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4f4:	f383 8811 	msr	BASEPRI, r3
 801b4f8:	f3bf 8f6f 	isb	sy
 801b4fc:	f3bf 8f4f 	dsb	sy
 801b500:	613b      	str	r3, [r7, #16]
}
 801b502:	bf00      	nop
 801b504:	e7fe      	b.n	801b504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b506:	4b3e      	ldr	r3, [pc, #248]	; (801b600 <xPortStartScheduler+0x120>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	4a3f      	ldr	r2, [pc, #252]	; (801b608 <xPortStartScheduler+0x128>)
 801b50c:	4293      	cmp	r3, r2
 801b50e:	d10a      	bne.n	801b526 <xPortStartScheduler+0x46>
	__asm volatile
 801b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b514:	f383 8811 	msr	BASEPRI, r3
 801b518:	f3bf 8f6f 	isb	sy
 801b51c:	f3bf 8f4f 	dsb	sy
 801b520:	60fb      	str	r3, [r7, #12]
}
 801b522:	bf00      	nop
 801b524:	e7fe      	b.n	801b524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b526:	4b39      	ldr	r3, [pc, #228]	; (801b60c <xPortStartScheduler+0x12c>)
 801b528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b52a:	697b      	ldr	r3, [r7, #20]
 801b52c:	781b      	ldrb	r3, [r3, #0]
 801b52e:	b2db      	uxtb	r3, r3
 801b530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	22ff      	movs	r2, #255	; 0xff
 801b536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b538:	697b      	ldr	r3, [r7, #20]
 801b53a:	781b      	ldrb	r3, [r3, #0]
 801b53c:	b2db      	uxtb	r3, r3
 801b53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b540:	78fb      	ldrb	r3, [r7, #3]
 801b542:	b2db      	uxtb	r3, r3
 801b544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b548:	b2da      	uxtb	r2, r3
 801b54a:	4b31      	ldr	r3, [pc, #196]	; (801b610 <xPortStartScheduler+0x130>)
 801b54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b54e:	4b31      	ldr	r3, [pc, #196]	; (801b614 <xPortStartScheduler+0x134>)
 801b550:	2207      	movs	r2, #7
 801b552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b554:	e009      	b.n	801b56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b556:	4b2f      	ldr	r3, [pc, #188]	; (801b614 <xPortStartScheduler+0x134>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	3b01      	subs	r3, #1
 801b55c:	4a2d      	ldr	r2, [pc, #180]	; (801b614 <xPortStartScheduler+0x134>)
 801b55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b560:	78fb      	ldrb	r3, [r7, #3]
 801b562:	b2db      	uxtb	r3, r3
 801b564:	005b      	lsls	r3, r3, #1
 801b566:	b2db      	uxtb	r3, r3
 801b568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b56a:	78fb      	ldrb	r3, [r7, #3]
 801b56c:	b2db      	uxtb	r3, r3
 801b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b572:	2b80      	cmp	r3, #128	; 0x80
 801b574:	d0ef      	beq.n	801b556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b576:	4b27      	ldr	r3, [pc, #156]	; (801b614 <xPortStartScheduler+0x134>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	f1c3 0307 	rsb	r3, r3, #7
 801b57e:	2b04      	cmp	r3, #4
 801b580:	d00a      	beq.n	801b598 <xPortStartScheduler+0xb8>
	__asm volatile
 801b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b586:	f383 8811 	msr	BASEPRI, r3
 801b58a:	f3bf 8f6f 	isb	sy
 801b58e:	f3bf 8f4f 	dsb	sy
 801b592:	60bb      	str	r3, [r7, #8]
}
 801b594:	bf00      	nop
 801b596:	e7fe      	b.n	801b596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b598:	4b1e      	ldr	r3, [pc, #120]	; (801b614 <xPortStartScheduler+0x134>)
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	021b      	lsls	r3, r3, #8
 801b59e:	4a1d      	ldr	r2, [pc, #116]	; (801b614 <xPortStartScheduler+0x134>)
 801b5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b5a2:	4b1c      	ldr	r3, [pc, #112]	; (801b614 <xPortStartScheduler+0x134>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b5aa:	4a1a      	ldr	r2, [pc, #104]	; (801b614 <xPortStartScheduler+0x134>)
 801b5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	b2da      	uxtb	r2, r3
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b5b6:	4b18      	ldr	r3, [pc, #96]	; (801b618 <xPortStartScheduler+0x138>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4a17      	ldr	r2, [pc, #92]	; (801b618 <xPortStartScheduler+0x138>)
 801b5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b5c2:	4b15      	ldr	r3, [pc, #84]	; (801b618 <xPortStartScheduler+0x138>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	4a14      	ldr	r2, [pc, #80]	; (801b618 <xPortStartScheduler+0x138>)
 801b5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b5ce:	f000 f8dd 	bl	801b78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b5d2:	4b12      	ldr	r3, [pc, #72]	; (801b61c <xPortStartScheduler+0x13c>)
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b5d8:	f000 f8fc 	bl	801b7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b5dc:	4b10      	ldr	r3, [pc, #64]	; (801b620 <xPortStartScheduler+0x140>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	4a0f      	ldr	r2, [pc, #60]	; (801b620 <xPortStartScheduler+0x140>)
 801b5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b5e8:	f7ff ff66 	bl	801b4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b5ec:	f7fe fd80 	bl	801a0f0 <vTaskSwitchContext>
	prvTaskExitError();
 801b5f0:	f7ff ff20 	bl	801b434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b5f4:	2300      	movs	r3, #0
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3718      	adds	r7, #24
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	e000ed00 	.word	0xe000ed00
 801b604:	410fc271 	.word	0x410fc271
 801b608:	410fc270 	.word	0x410fc270
 801b60c:	e000e400 	.word	0xe000e400
 801b610:	20002448 	.word	0x20002448
 801b614:	2000244c 	.word	0x2000244c
 801b618:	e000ed20 	.word	0xe000ed20
 801b61c:	2000003c 	.word	0x2000003c
 801b620:	e000ef34 	.word	0xe000ef34

0801b624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b624:	b480      	push	{r7}
 801b626:	b083      	sub	sp, #12
 801b628:	af00      	add	r7, sp, #0
	__asm volatile
 801b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b62e:	f383 8811 	msr	BASEPRI, r3
 801b632:	f3bf 8f6f 	isb	sy
 801b636:	f3bf 8f4f 	dsb	sy
 801b63a:	607b      	str	r3, [r7, #4]
}
 801b63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b63e:	4b0f      	ldr	r3, [pc, #60]	; (801b67c <vPortEnterCritical+0x58>)
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	3301      	adds	r3, #1
 801b644:	4a0d      	ldr	r2, [pc, #52]	; (801b67c <vPortEnterCritical+0x58>)
 801b646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b648:	4b0c      	ldr	r3, [pc, #48]	; (801b67c <vPortEnterCritical+0x58>)
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	2b01      	cmp	r3, #1
 801b64e:	d10f      	bne.n	801b670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b650:	4b0b      	ldr	r3, [pc, #44]	; (801b680 <vPortEnterCritical+0x5c>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	b2db      	uxtb	r3, r3
 801b656:	2b00      	cmp	r3, #0
 801b658:	d00a      	beq.n	801b670 <vPortEnterCritical+0x4c>
	__asm volatile
 801b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b65e:	f383 8811 	msr	BASEPRI, r3
 801b662:	f3bf 8f6f 	isb	sy
 801b666:	f3bf 8f4f 	dsb	sy
 801b66a:	603b      	str	r3, [r7, #0]
}
 801b66c:	bf00      	nop
 801b66e:	e7fe      	b.n	801b66e <vPortEnterCritical+0x4a>
	}
}
 801b670:	bf00      	nop
 801b672:	370c      	adds	r7, #12
 801b674:	46bd      	mov	sp, r7
 801b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67a:	4770      	bx	lr
 801b67c:	2000003c 	.word	0x2000003c
 801b680:	e000ed04 	.word	0xe000ed04

0801b684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b684:	b480      	push	{r7}
 801b686:	b083      	sub	sp, #12
 801b688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b68a:	4b12      	ldr	r3, [pc, #72]	; (801b6d4 <vPortExitCritical+0x50>)
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d10a      	bne.n	801b6a8 <vPortExitCritical+0x24>
	__asm volatile
 801b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b696:	f383 8811 	msr	BASEPRI, r3
 801b69a:	f3bf 8f6f 	isb	sy
 801b69e:	f3bf 8f4f 	dsb	sy
 801b6a2:	607b      	str	r3, [r7, #4]
}
 801b6a4:	bf00      	nop
 801b6a6:	e7fe      	b.n	801b6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b6a8:	4b0a      	ldr	r3, [pc, #40]	; (801b6d4 <vPortExitCritical+0x50>)
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	3b01      	subs	r3, #1
 801b6ae:	4a09      	ldr	r2, [pc, #36]	; (801b6d4 <vPortExitCritical+0x50>)
 801b6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b6b2:	4b08      	ldr	r3, [pc, #32]	; (801b6d4 <vPortExitCritical+0x50>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d105      	bne.n	801b6c6 <vPortExitCritical+0x42>
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	f383 8811 	msr	BASEPRI, r3
}
 801b6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b6c6:	bf00      	nop
 801b6c8:	370c      	adds	r7, #12
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d0:	4770      	bx	lr
 801b6d2:	bf00      	nop
 801b6d4:	2000003c 	.word	0x2000003c
	...

0801b6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b6e0:	f3ef 8009 	mrs	r0, PSP
 801b6e4:	f3bf 8f6f 	isb	sy
 801b6e8:	4b15      	ldr	r3, [pc, #84]	; (801b740 <pxCurrentTCBConst>)
 801b6ea:	681a      	ldr	r2, [r3, #0]
 801b6ec:	f01e 0f10 	tst.w	lr, #16
 801b6f0:	bf08      	it	eq
 801b6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fa:	6010      	str	r0, [r2, #0]
 801b6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b700:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b704:	f380 8811 	msr	BASEPRI, r0
 801b708:	f3bf 8f4f 	dsb	sy
 801b70c:	f3bf 8f6f 	isb	sy
 801b710:	f7fe fcee 	bl	801a0f0 <vTaskSwitchContext>
 801b714:	f04f 0000 	mov.w	r0, #0
 801b718:	f380 8811 	msr	BASEPRI, r0
 801b71c:	bc09      	pop	{r0, r3}
 801b71e:	6819      	ldr	r1, [r3, #0]
 801b720:	6808      	ldr	r0, [r1, #0]
 801b722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b726:	f01e 0f10 	tst.w	lr, #16
 801b72a:	bf08      	it	eq
 801b72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b730:	f380 8809 	msr	PSP, r0
 801b734:	f3bf 8f6f 	isb	sy
 801b738:	4770      	bx	lr
 801b73a:	bf00      	nop
 801b73c:	f3af 8000 	nop.w

0801b740 <pxCurrentTCBConst>:
 801b740:	20001e14 	.word	0x20001e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b744:	bf00      	nop
 801b746:	bf00      	nop

0801b748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b082      	sub	sp, #8
 801b74c:	af00      	add	r7, sp, #0
	__asm volatile
 801b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b752:	f383 8811 	msr	BASEPRI, r3
 801b756:	f3bf 8f6f 	isb	sy
 801b75a:	f3bf 8f4f 	dsb	sy
 801b75e:	607b      	str	r3, [r7, #4]
}
 801b760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b762:	f7fe fc0b 	bl	8019f7c <xTaskIncrementTick>
 801b766:	4603      	mov	r3, r0
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d003      	beq.n	801b774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b76c:	4b06      	ldr	r3, [pc, #24]	; (801b788 <xPortSysTickHandler+0x40>)
 801b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b772:	601a      	str	r2, [r3, #0]
 801b774:	2300      	movs	r3, #0
 801b776:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b778:	683b      	ldr	r3, [r7, #0]
 801b77a:	f383 8811 	msr	BASEPRI, r3
}
 801b77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b780:	bf00      	nop
 801b782:	3708      	adds	r7, #8
 801b784:	46bd      	mov	sp, r7
 801b786:	bd80      	pop	{r7, pc}
 801b788:	e000ed04 	.word	0xe000ed04

0801b78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b78c:	b480      	push	{r7}
 801b78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b790:	4b0b      	ldr	r3, [pc, #44]	; (801b7c0 <vPortSetupTimerInterrupt+0x34>)
 801b792:	2200      	movs	r2, #0
 801b794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b796:	4b0b      	ldr	r3, [pc, #44]	; (801b7c4 <vPortSetupTimerInterrupt+0x38>)
 801b798:	2200      	movs	r2, #0
 801b79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b79c:	4b0a      	ldr	r3, [pc, #40]	; (801b7c8 <vPortSetupTimerInterrupt+0x3c>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	4a0a      	ldr	r2, [pc, #40]	; (801b7cc <vPortSetupTimerInterrupt+0x40>)
 801b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 801b7a6:	099b      	lsrs	r3, r3, #6
 801b7a8:	4a09      	ldr	r2, [pc, #36]	; (801b7d0 <vPortSetupTimerInterrupt+0x44>)
 801b7aa:	3b01      	subs	r3, #1
 801b7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b7ae:	4b04      	ldr	r3, [pc, #16]	; (801b7c0 <vPortSetupTimerInterrupt+0x34>)
 801b7b0:	2207      	movs	r2, #7
 801b7b2:	601a      	str	r2, [r3, #0]
}
 801b7b4:	bf00      	nop
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7bc:	4770      	bx	lr
 801b7be:	bf00      	nop
 801b7c0:	e000e010 	.word	0xe000e010
 801b7c4:	e000e018 	.word	0xe000e018
 801b7c8:	20000030 	.word	0x20000030
 801b7cc:	10624dd3 	.word	0x10624dd3
 801b7d0:	e000e014 	.word	0xe000e014

0801b7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b7e4 <vPortEnableVFP+0x10>
 801b7d8:	6801      	ldr	r1, [r0, #0]
 801b7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b7de:	6001      	str	r1, [r0, #0]
 801b7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b7e2:	bf00      	nop
 801b7e4:	e000ed88 	.word	0xe000ed88

0801b7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b085      	sub	sp, #20
 801b7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b7ee:	f3ef 8305 	mrs	r3, IPSR
 801b7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	2b0f      	cmp	r3, #15
 801b7f8:	d914      	bls.n	801b824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b7fa:	4a17      	ldr	r2, [pc, #92]	; (801b858 <vPortValidateInterruptPriority+0x70>)
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	4413      	add	r3, r2
 801b800:	781b      	ldrb	r3, [r3, #0]
 801b802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b804:	4b15      	ldr	r3, [pc, #84]	; (801b85c <vPortValidateInterruptPriority+0x74>)
 801b806:	781b      	ldrb	r3, [r3, #0]
 801b808:	7afa      	ldrb	r2, [r7, #11]
 801b80a:	429a      	cmp	r2, r3
 801b80c:	d20a      	bcs.n	801b824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b812:	f383 8811 	msr	BASEPRI, r3
 801b816:	f3bf 8f6f 	isb	sy
 801b81a:	f3bf 8f4f 	dsb	sy
 801b81e:	607b      	str	r3, [r7, #4]
}
 801b820:	bf00      	nop
 801b822:	e7fe      	b.n	801b822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b824:	4b0e      	ldr	r3, [pc, #56]	; (801b860 <vPortValidateInterruptPriority+0x78>)
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b82c:	4b0d      	ldr	r3, [pc, #52]	; (801b864 <vPortValidateInterruptPriority+0x7c>)
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	429a      	cmp	r2, r3
 801b832:	d90a      	bls.n	801b84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b838:	f383 8811 	msr	BASEPRI, r3
 801b83c:	f3bf 8f6f 	isb	sy
 801b840:	f3bf 8f4f 	dsb	sy
 801b844:	603b      	str	r3, [r7, #0]
}
 801b846:	bf00      	nop
 801b848:	e7fe      	b.n	801b848 <vPortValidateInterruptPriority+0x60>
	}
 801b84a:	bf00      	nop
 801b84c:	3714      	adds	r7, #20
 801b84e:	46bd      	mov	sp, r7
 801b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop
 801b858:	e000e3f0 	.word	0xe000e3f0
 801b85c:	20002448 	.word	0x20002448
 801b860:	e000ed0c 	.word	0xe000ed0c
 801b864:	2000244c 	.word	0x2000244c

0801b868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b868:	b580      	push	{r7, lr}
 801b86a:	b08a      	sub	sp, #40	; 0x28
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b870:	2300      	movs	r3, #0
 801b872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b874:	f7fe fac6 	bl	8019e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b878:	4b5d      	ldr	r3, [pc, #372]	; (801b9f0 <pvPortMalloc+0x188>)
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d101      	bne.n	801b884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b880:	f000 f930 	bl	801bae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b884:	4b5b      	ldr	r3, [pc, #364]	; (801b9f4 <pvPortMalloc+0x18c>)
 801b886:	681a      	ldr	r2, [r3, #0]
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	4013      	ands	r3, r2
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	f040 8093 	bne.w	801b9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d01d      	beq.n	801b8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b898:	2208      	movs	r2, #8
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	4413      	add	r3, r2
 801b89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	f003 0307 	and.w	r3, r3, #7
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d014      	beq.n	801b8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	f023 0307 	bic.w	r3, r3, #7
 801b8b0:	3308      	adds	r3, #8
 801b8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	f003 0307 	and.w	r3, r3, #7
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d00a      	beq.n	801b8d4 <pvPortMalloc+0x6c>
	__asm volatile
 801b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8c2:	f383 8811 	msr	BASEPRI, r3
 801b8c6:	f3bf 8f6f 	isb	sy
 801b8ca:	f3bf 8f4f 	dsb	sy
 801b8ce:	617b      	str	r3, [r7, #20]
}
 801b8d0:	bf00      	nop
 801b8d2:	e7fe      	b.n	801b8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d06e      	beq.n	801b9b8 <pvPortMalloc+0x150>
 801b8da:	4b47      	ldr	r3, [pc, #284]	; (801b9f8 <pvPortMalloc+0x190>)
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	687a      	ldr	r2, [r7, #4]
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d869      	bhi.n	801b9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b8e4:	4b45      	ldr	r3, [pc, #276]	; (801b9fc <pvPortMalloc+0x194>)
 801b8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b8e8:	4b44      	ldr	r3, [pc, #272]	; (801b9fc <pvPortMalloc+0x194>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8ee:	e004      	b.n	801b8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	687a      	ldr	r2, [r7, #4]
 801b900:	429a      	cmp	r2, r3
 801b902:	d903      	bls.n	801b90c <pvPortMalloc+0xa4>
 801b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d1f1      	bne.n	801b8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b90c:	4b38      	ldr	r3, [pc, #224]	; (801b9f0 <pvPortMalloc+0x188>)
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b912:	429a      	cmp	r2, r3
 801b914:	d050      	beq.n	801b9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b916:	6a3b      	ldr	r3, [r7, #32]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	2208      	movs	r2, #8
 801b91c:	4413      	add	r3, r2
 801b91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b922:	681a      	ldr	r2, [r3, #0]
 801b924:	6a3b      	ldr	r3, [r7, #32]
 801b926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92a:	685a      	ldr	r2, [r3, #4]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	1ad2      	subs	r2, r2, r3
 801b930:	2308      	movs	r3, #8
 801b932:	005b      	lsls	r3, r3, #1
 801b934:	429a      	cmp	r2, r3
 801b936:	d91f      	bls.n	801b978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	4413      	add	r3, r2
 801b93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b940:	69bb      	ldr	r3, [r7, #24]
 801b942:	f003 0307 	and.w	r3, r3, #7
 801b946:	2b00      	cmp	r3, #0
 801b948:	d00a      	beq.n	801b960 <pvPortMalloc+0xf8>
	__asm volatile
 801b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b94e:	f383 8811 	msr	BASEPRI, r3
 801b952:	f3bf 8f6f 	isb	sy
 801b956:	f3bf 8f4f 	dsb	sy
 801b95a:	613b      	str	r3, [r7, #16]
}
 801b95c:	bf00      	nop
 801b95e:	e7fe      	b.n	801b95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b962:	685a      	ldr	r2, [r3, #4]
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	1ad2      	subs	r2, r2, r3
 801b968:	69bb      	ldr	r3, [r7, #24]
 801b96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b96e:	687a      	ldr	r2, [r7, #4]
 801b970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b972:	69b8      	ldr	r0, [r7, #24]
 801b974:	f000 f918 	bl	801bba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b978:	4b1f      	ldr	r3, [pc, #124]	; (801b9f8 <pvPortMalloc+0x190>)
 801b97a:	681a      	ldr	r2, [r3, #0]
 801b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97e:	685b      	ldr	r3, [r3, #4]
 801b980:	1ad3      	subs	r3, r2, r3
 801b982:	4a1d      	ldr	r2, [pc, #116]	; (801b9f8 <pvPortMalloc+0x190>)
 801b984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b986:	4b1c      	ldr	r3, [pc, #112]	; (801b9f8 <pvPortMalloc+0x190>)
 801b988:	681a      	ldr	r2, [r3, #0]
 801b98a:	4b1d      	ldr	r3, [pc, #116]	; (801ba00 <pvPortMalloc+0x198>)
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	429a      	cmp	r2, r3
 801b990:	d203      	bcs.n	801b99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b992:	4b19      	ldr	r3, [pc, #100]	; (801b9f8 <pvPortMalloc+0x190>)
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4a1a      	ldr	r2, [pc, #104]	; (801ba00 <pvPortMalloc+0x198>)
 801b998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99c:	685a      	ldr	r2, [r3, #4]
 801b99e:	4b15      	ldr	r3, [pc, #84]	; (801b9f4 <pvPortMalloc+0x18c>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	431a      	orrs	r2, r3
 801b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b9ae:	4b15      	ldr	r3, [pc, #84]	; (801ba04 <pvPortMalloc+0x19c>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	3301      	adds	r3, #1
 801b9b4:	4a13      	ldr	r2, [pc, #76]	; (801ba04 <pvPortMalloc+0x19c>)
 801b9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b9b8:	f7fe fa32 	bl	8019e20 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801b9bc:	69fb      	ldr	r3, [r7, #28]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d101      	bne.n	801b9c6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801b9c2:	f7f3 fe05 	bl	800f5d0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b9c6:	69fb      	ldr	r3, [r7, #28]
 801b9c8:	f003 0307 	and.w	r3, r3, #7
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d00a      	beq.n	801b9e6 <pvPortMalloc+0x17e>
	__asm volatile
 801b9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9d4:	f383 8811 	msr	BASEPRI, r3
 801b9d8:	f3bf 8f6f 	isb	sy
 801b9dc:	f3bf 8f4f 	dsb	sy
 801b9e0:	60fb      	str	r3, [r7, #12]
}
 801b9e2:	bf00      	nop
 801b9e4:	e7fe      	b.n	801b9e4 <pvPortMalloc+0x17c>
	return pvReturn;
 801b9e6:	69fb      	ldr	r3, [r7, #28]
}
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	3728      	adds	r7, #40	; 0x28
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd80      	pop	{r7, pc}
 801b9f0:	20007458 	.word	0x20007458
 801b9f4:	2000746c 	.word	0x2000746c
 801b9f8:	2000745c 	.word	0x2000745c
 801b9fc:	20007450 	.word	0x20007450
 801ba00:	20007460 	.word	0x20007460
 801ba04:	20007464 	.word	0x20007464

0801ba08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b086      	sub	sp, #24
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d04d      	beq.n	801bab6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ba1a:	2308      	movs	r3, #8
 801ba1c:	425b      	negs	r3, r3
 801ba1e:	697a      	ldr	r2, [r7, #20]
 801ba20:	4413      	add	r3, r2
 801ba22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ba24:	697b      	ldr	r3, [r7, #20]
 801ba26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ba28:	693b      	ldr	r3, [r7, #16]
 801ba2a:	685a      	ldr	r2, [r3, #4]
 801ba2c:	4b24      	ldr	r3, [pc, #144]	; (801bac0 <vPortFree+0xb8>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	4013      	ands	r3, r2
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d10a      	bne.n	801ba4c <vPortFree+0x44>
	__asm volatile
 801ba36:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba3a:	f383 8811 	msr	BASEPRI, r3
 801ba3e:	f3bf 8f6f 	isb	sy
 801ba42:	f3bf 8f4f 	dsb	sy
 801ba46:	60fb      	str	r3, [r7, #12]
}
 801ba48:	bf00      	nop
 801ba4a:	e7fe      	b.n	801ba4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ba4c:	693b      	ldr	r3, [r7, #16]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d00a      	beq.n	801ba6a <vPortFree+0x62>
	__asm volatile
 801ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba58:	f383 8811 	msr	BASEPRI, r3
 801ba5c:	f3bf 8f6f 	isb	sy
 801ba60:	f3bf 8f4f 	dsb	sy
 801ba64:	60bb      	str	r3, [r7, #8]
}
 801ba66:	bf00      	nop
 801ba68:	e7fe      	b.n	801ba68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ba6a:	693b      	ldr	r3, [r7, #16]
 801ba6c:	685a      	ldr	r2, [r3, #4]
 801ba6e:	4b14      	ldr	r3, [pc, #80]	; (801bac0 <vPortFree+0xb8>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	4013      	ands	r3, r2
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d01e      	beq.n	801bab6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ba78:	693b      	ldr	r3, [r7, #16]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d11a      	bne.n	801bab6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ba80:	693b      	ldr	r3, [r7, #16]
 801ba82:	685a      	ldr	r2, [r3, #4]
 801ba84:	4b0e      	ldr	r3, [pc, #56]	; (801bac0 <vPortFree+0xb8>)
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	43db      	mvns	r3, r3
 801ba8a:	401a      	ands	r2, r3
 801ba8c:	693b      	ldr	r3, [r7, #16]
 801ba8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ba90:	f7fe f9b8 	bl	8019e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ba94:	693b      	ldr	r3, [r7, #16]
 801ba96:	685a      	ldr	r2, [r3, #4]
 801ba98:	4b0a      	ldr	r3, [pc, #40]	; (801bac4 <vPortFree+0xbc>)
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	4413      	add	r3, r2
 801ba9e:	4a09      	ldr	r2, [pc, #36]	; (801bac4 <vPortFree+0xbc>)
 801baa0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801baa2:	6938      	ldr	r0, [r7, #16]
 801baa4:	f000 f880 	bl	801bba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801baa8:	4b07      	ldr	r3, [pc, #28]	; (801bac8 <vPortFree+0xc0>)
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	3301      	adds	r3, #1
 801baae:	4a06      	ldr	r2, [pc, #24]	; (801bac8 <vPortFree+0xc0>)
 801bab0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801bab2:	f7fe f9b5 	bl	8019e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801bab6:	bf00      	nop
 801bab8:	3718      	adds	r7, #24
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	2000746c 	.word	0x2000746c
 801bac4:	2000745c 	.word	0x2000745c
 801bac8:	20007468 	.word	0x20007468

0801bacc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801bacc:	b480      	push	{r7}
 801bace:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 801bad0:	4b03      	ldr	r3, [pc, #12]	; (801bae0 <xPortGetFreeHeapSize+0x14>)
 801bad2:	681b      	ldr	r3, [r3, #0]
}
 801bad4:	4618      	mov	r0, r3
 801bad6:	46bd      	mov	sp, r7
 801bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801badc:	4770      	bx	lr
 801bade:	bf00      	nop
 801bae0:	2000745c 	.word	0x2000745c

0801bae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801bae4:	b480      	push	{r7}
 801bae6:	b085      	sub	sp, #20
 801bae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801baea:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801baee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801baf0:	4b27      	ldr	r3, [pc, #156]	; (801bb90 <prvHeapInit+0xac>)
 801baf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	f003 0307 	and.w	r3, r3, #7
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d00c      	beq.n	801bb18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	3307      	adds	r3, #7
 801bb02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	f023 0307 	bic.w	r3, r3, #7
 801bb0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bb0c:	68ba      	ldr	r2, [r7, #8]
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	1ad3      	subs	r3, r2, r3
 801bb12:	4a1f      	ldr	r2, [pc, #124]	; (801bb90 <prvHeapInit+0xac>)
 801bb14:	4413      	add	r3, r2
 801bb16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bb1c:	4a1d      	ldr	r2, [pc, #116]	; (801bb94 <prvHeapInit+0xb0>)
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bb22:	4b1c      	ldr	r3, [pc, #112]	; (801bb94 <prvHeapInit+0xb0>)
 801bb24:	2200      	movs	r2, #0
 801bb26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	68ba      	ldr	r2, [r7, #8]
 801bb2c:	4413      	add	r3, r2
 801bb2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801bb30:	2208      	movs	r2, #8
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	1a9b      	subs	r3, r3, r2
 801bb36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	f023 0307 	bic.w	r3, r3, #7
 801bb3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	4a15      	ldr	r2, [pc, #84]	; (801bb98 <prvHeapInit+0xb4>)
 801bb44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801bb46:	4b14      	ldr	r3, [pc, #80]	; (801bb98 <prvHeapInit+0xb4>)
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801bb4e:	4b12      	ldr	r3, [pc, #72]	; (801bb98 <prvHeapInit+0xb4>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	2200      	movs	r2, #0
 801bb54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	68fa      	ldr	r2, [r7, #12]
 801bb5e:	1ad2      	subs	r2, r2, r3
 801bb60:	683b      	ldr	r3, [r7, #0]
 801bb62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bb64:	4b0c      	ldr	r3, [pc, #48]	; (801bb98 <prvHeapInit+0xb4>)
 801bb66:	681a      	ldr	r2, [r3, #0]
 801bb68:	683b      	ldr	r3, [r7, #0]
 801bb6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	685b      	ldr	r3, [r3, #4]
 801bb70:	4a0a      	ldr	r2, [pc, #40]	; (801bb9c <prvHeapInit+0xb8>)
 801bb72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb74:	683b      	ldr	r3, [r7, #0]
 801bb76:	685b      	ldr	r3, [r3, #4]
 801bb78:	4a09      	ldr	r2, [pc, #36]	; (801bba0 <prvHeapInit+0xbc>)
 801bb7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bb7c:	4b09      	ldr	r3, [pc, #36]	; (801bba4 <prvHeapInit+0xc0>)
 801bb7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bb82:	601a      	str	r2, [r3, #0]
}
 801bb84:	bf00      	nop
 801bb86:	3714      	adds	r7, #20
 801bb88:	46bd      	mov	sp, r7
 801bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb8e:	4770      	bx	lr
 801bb90:	20002450 	.word	0x20002450
 801bb94:	20007450 	.word	0x20007450
 801bb98:	20007458 	.word	0x20007458
 801bb9c:	20007460 	.word	0x20007460
 801bba0:	2000745c 	.word	0x2000745c
 801bba4:	2000746c 	.word	0x2000746c

0801bba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801bba8:	b480      	push	{r7}
 801bbaa:	b085      	sub	sp, #20
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bbb0:	4b28      	ldr	r3, [pc, #160]	; (801bc54 <prvInsertBlockIntoFreeList+0xac>)
 801bbb2:	60fb      	str	r3, [r7, #12]
 801bbb4:	e002      	b.n	801bbbc <prvInsertBlockIntoFreeList+0x14>
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	60fb      	str	r3, [r7, #12]
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	687a      	ldr	r2, [r7, #4]
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	d8f7      	bhi.n	801bbb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	685b      	ldr	r3, [r3, #4]
 801bbce:	68ba      	ldr	r2, [r7, #8]
 801bbd0:	4413      	add	r3, r2
 801bbd2:	687a      	ldr	r2, [r7, #4]
 801bbd4:	429a      	cmp	r2, r3
 801bbd6:	d108      	bne.n	801bbea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	685a      	ldr	r2, [r3, #4]
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	685b      	ldr	r3, [r3, #4]
 801bbe0:	441a      	add	r2, r3
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	685b      	ldr	r3, [r3, #4]
 801bbf2:	68ba      	ldr	r2, [r7, #8]
 801bbf4:	441a      	add	r2, r3
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d118      	bne.n	801bc30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	681a      	ldr	r2, [r3, #0]
 801bc02:	4b15      	ldr	r3, [pc, #84]	; (801bc58 <prvInsertBlockIntoFreeList+0xb0>)
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	429a      	cmp	r2, r3
 801bc08:	d00d      	beq.n	801bc26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	685a      	ldr	r2, [r3, #4]
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	685b      	ldr	r3, [r3, #4]
 801bc14:	441a      	add	r2, r3
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	681a      	ldr	r2, [r3, #0]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	601a      	str	r2, [r3, #0]
 801bc24:	e008      	b.n	801bc38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801bc26:	4b0c      	ldr	r3, [pc, #48]	; (801bc58 <prvInsertBlockIntoFreeList+0xb0>)
 801bc28:	681a      	ldr	r2, [r3, #0]
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	601a      	str	r2, [r3, #0]
 801bc2e:	e003      	b.n	801bc38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	681a      	ldr	r2, [r3, #0]
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bc38:	68fa      	ldr	r2, [r7, #12]
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	429a      	cmp	r2, r3
 801bc3e:	d002      	beq.n	801bc46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	687a      	ldr	r2, [r7, #4]
 801bc44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bc46:	bf00      	nop
 801bc48:	3714      	adds	r7, #20
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc50:	4770      	bx	lr
 801bc52:	bf00      	nop
 801bc54:	20007450 	.word	0x20007450
 801bc58:	20007458 	.word	0x20007458

0801bc5c <_ZdaPv>:
 801bc5c:	f000 b814 	b.w	801bc88 <_ZdlPv>

0801bc60 <__cxa_guard_acquire>:
 801bc60:	6803      	ldr	r3, [r0, #0]
 801bc62:	07db      	lsls	r3, r3, #31
 801bc64:	d406      	bmi.n	801bc74 <__cxa_guard_acquire+0x14>
 801bc66:	7843      	ldrb	r3, [r0, #1]
 801bc68:	b103      	cbz	r3, 801bc6c <__cxa_guard_acquire+0xc>
 801bc6a:	deff      	udf	#255	; 0xff
 801bc6c:	2301      	movs	r3, #1
 801bc6e:	7043      	strb	r3, [r0, #1]
 801bc70:	4618      	mov	r0, r3
 801bc72:	4770      	bx	lr
 801bc74:	2000      	movs	r0, #0
 801bc76:	4770      	bx	lr

0801bc78 <__cxa_guard_release>:
 801bc78:	2301      	movs	r3, #1
 801bc7a:	6003      	str	r3, [r0, #0]
 801bc7c:	4770      	bx	lr

0801bc7e <_Znaj>:
 801bc7e:	f000 b805 	b.w	801bc8c <_Znwj>

0801bc82 <_ZSt25__throw_bad_function_callv>:
 801bc82:	b508      	push	{r3, lr}
 801bc84:	f000 fa44 	bl	801c110 <abort>

0801bc88 <_ZdlPv>:
 801bc88:	f000 bb7c 	b.w	801c384 <free>

0801bc8c <_Znwj>:
 801bc8c:	2801      	cmp	r0, #1
 801bc8e:	bf38      	it	cc
 801bc90:	2001      	movcc	r0, #1
 801bc92:	b510      	push	{r4, lr}
 801bc94:	4604      	mov	r4, r0
 801bc96:	4620      	mov	r0, r4
 801bc98:	f000 fb6c 	bl	801c374 <malloc>
 801bc9c:	b930      	cbnz	r0, 801bcac <_Znwj+0x20>
 801bc9e:	f000 f807 	bl	801bcb0 <_ZSt15get_new_handlerv>
 801bca2:	b908      	cbnz	r0, 801bca8 <_Znwj+0x1c>
 801bca4:	f000 fa34 	bl	801c110 <abort>
 801bca8:	4780      	blx	r0
 801bcaa:	e7f4      	b.n	801bc96 <_Znwj+0xa>
 801bcac:	bd10      	pop	{r4, pc}
	...

0801bcb0 <_ZSt15get_new_handlerv>:
 801bcb0:	4b02      	ldr	r3, [pc, #8]	; (801bcbc <_ZSt15get_new_handlerv+0xc>)
 801bcb2:	6818      	ldr	r0, [r3, #0]
 801bcb4:	f3bf 8f5b 	dmb	ish
 801bcb8:	4770      	bx	lr
 801bcba:	bf00      	nop
 801bcbc:	20007470 	.word	0x20007470

0801bcc0 <roundf>:
 801bcc0:	ee10 0a10 	vmov	r0, s0
 801bcc4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801bcc8:	3a7f      	subs	r2, #127	; 0x7f
 801bcca:	2a16      	cmp	r2, #22
 801bccc:	dc15      	bgt.n	801bcfa <roundf+0x3a>
 801bcce:	2a00      	cmp	r2, #0
 801bcd0:	da08      	bge.n	801bce4 <roundf+0x24>
 801bcd2:	3201      	adds	r2, #1
 801bcd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801bcd8:	d101      	bne.n	801bcde <roundf+0x1e>
 801bcda:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801bcde:	ee00 3a10 	vmov	s0, r3
 801bce2:	4770      	bx	lr
 801bce4:	4907      	ldr	r1, [pc, #28]	; (801bd04 <roundf+0x44>)
 801bce6:	4111      	asrs	r1, r2
 801bce8:	4208      	tst	r0, r1
 801bcea:	d0fa      	beq.n	801bce2 <roundf+0x22>
 801bcec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801bcf0:	4113      	asrs	r3, r2
 801bcf2:	4403      	add	r3, r0
 801bcf4:	ea23 0301 	bic.w	r3, r3, r1
 801bcf8:	e7f1      	b.n	801bcde <roundf+0x1e>
 801bcfa:	2a80      	cmp	r2, #128	; 0x80
 801bcfc:	d1f1      	bne.n	801bce2 <roundf+0x22>
 801bcfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bd02:	4770      	bx	lr
 801bd04:	007fffff 	.word	0x007fffff

0801bd08 <log>:
 801bd08:	b538      	push	{r3, r4, r5, lr}
 801bd0a:	ed2d 8b02 	vpush	{d8}
 801bd0e:	ec55 4b10 	vmov	r4, r5, d0
 801bd12:	f000 f839 	bl	801bd88 <__ieee754_log>
 801bd16:	4622      	mov	r2, r4
 801bd18:	462b      	mov	r3, r5
 801bd1a:	4620      	mov	r0, r4
 801bd1c:	4629      	mov	r1, r5
 801bd1e:	eeb0 8a40 	vmov.f32	s16, s0
 801bd22:	eef0 8a60 	vmov.f32	s17, s1
 801bd26:	f7e4 ff01 	bl	8000b2c <__aeabi_dcmpun>
 801bd2a:	b998      	cbnz	r0, 801bd54 <log+0x4c>
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	2300      	movs	r3, #0
 801bd30:	4620      	mov	r0, r4
 801bd32:	4629      	mov	r1, r5
 801bd34:	f7e4 fef0 	bl	8000b18 <__aeabi_dcmpgt>
 801bd38:	b960      	cbnz	r0, 801bd54 <log+0x4c>
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	4620      	mov	r0, r4
 801bd40:	4629      	mov	r1, r5
 801bd42:	f7e4 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd46:	b160      	cbz	r0, 801bd62 <log+0x5a>
 801bd48:	f000 f9f0 	bl	801c12c <__errno>
 801bd4c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801bd78 <log+0x70>
 801bd50:	2322      	movs	r3, #34	; 0x22
 801bd52:	6003      	str	r3, [r0, #0]
 801bd54:	eeb0 0a48 	vmov.f32	s0, s16
 801bd58:	eef0 0a68 	vmov.f32	s1, s17
 801bd5c:	ecbd 8b02 	vpop	{d8}
 801bd60:	bd38      	pop	{r3, r4, r5, pc}
 801bd62:	f000 f9e3 	bl	801c12c <__errno>
 801bd66:	ecbd 8b02 	vpop	{d8}
 801bd6a:	2321      	movs	r3, #33	; 0x21
 801bd6c:	6003      	str	r3, [r0, #0]
 801bd6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd72:	4803      	ldr	r0, [pc, #12]	; (801bd80 <log+0x78>)
 801bd74:	f000 b9c4 	b.w	801c100 <nan>
 801bd78:	00000000 	.word	0x00000000
 801bd7c:	fff00000 	.word	0xfff00000
 801bd80:	0801f617 	.word	0x0801f617
 801bd84:	00000000 	.word	0x00000000

0801bd88 <__ieee754_log>:
 801bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd8c:	ec51 0b10 	vmov	r0, r1, d0
 801bd90:	ed2d 8b04 	vpush	{d8-d9}
 801bd94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801bd98:	b083      	sub	sp, #12
 801bd9a:	460d      	mov	r5, r1
 801bd9c:	da29      	bge.n	801bdf2 <__ieee754_log+0x6a>
 801bd9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bda2:	4303      	orrs	r3, r0
 801bda4:	ee10 2a10 	vmov	r2, s0
 801bda8:	d10c      	bne.n	801bdc4 <__ieee754_log+0x3c>
 801bdaa:	49cf      	ldr	r1, [pc, #828]	; (801c0e8 <__ieee754_log+0x360>)
 801bdac:	2200      	movs	r2, #0
 801bdae:	2300      	movs	r3, #0
 801bdb0:	2000      	movs	r0, #0
 801bdb2:	f7e4 fd4b 	bl	800084c <__aeabi_ddiv>
 801bdb6:	ec41 0b10 	vmov	d0, r0, r1
 801bdba:	b003      	add	sp, #12
 801bdbc:	ecbd 8b04 	vpop	{d8-d9}
 801bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc4:	2900      	cmp	r1, #0
 801bdc6:	da05      	bge.n	801bdd4 <__ieee754_log+0x4c>
 801bdc8:	460b      	mov	r3, r1
 801bdca:	f7e4 fa5d 	bl	8000288 <__aeabi_dsub>
 801bdce:	2200      	movs	r2, #0
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	e7ee      	b.n	801bdb2 <__ieee754_log+0x2a>
 801bdd4:	4bc5      	ldr	r3, [pc, #788]	; (801c0ec <__ieee754_log+0x364>)
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	f7e4 fc0e 	bl	80005f8 <__aeabi_dmul>
 801bddc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801bde0:	460d      	mov	r5, r1
 801bde2:	4ac3      	ldr	r2, [pc, #780]	; (801c0f0 <__ieee754_log+0x368>)
 801bde4:	4295      	cmp	r5, r2
 801bde6:	dd06      	ble.n	801bdf6 <__ieee754_log+0x6e>
 801bde8:	4602      	mov	r2, r0
 801bdea:	460b      	mov	r3, r1
 801bdec:	f7e4 fa4e 	bl	800028c <__adddf3>
 801bdf0:	e7e1      	b.n	801bdb6 <__ieee754_log+0x2e>
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	e7f5      	b.n	801bde2 <__ieee754_log+0x5a>
 801bdf6:	152c      	asrs	r4, r5, #20
 801bdf8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801bdfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801be00:	441c      	add	r4, r3
 801be02:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801be06:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801be0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801be0e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801be12:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801be16:	ea42 0105 	orr.w	r1, r2, r5
 801be1a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801be1e:	2200      	movs	r2, #0
 801be20:	4bb4      	ldr	r3, [pc, #720]	; (801c0f4 <__ieee754_log+0x36c>)
 801be22:	f7e4 fa31 	bl	8000288 <__aeabi_dsub>
 801be26:	1cab      	adds	r3, r5, #2
 801be28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801be2c:	2b02      	cmp	r3, #2
 801be2e:	4682      	mov	sl, r0
 801be30:	468b      	mov	fp, r1
 801be32:	f04f 0200 	mov.w	r2, #0
 801be36:	dc53      	bgt.n	801bee0 <__ieee754_log+0x158>
 801be38:	2300      	movs	r3, #0
 801be3a:	f7e4 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 801be3e:	b1d0      	cbz	r0, 801be76 <__ieee754_log+0xee>
 801be40:	2c00      	cmp	r4, #0
 801be42:	f000 8122 	beq.w	801c08a <__ieee754_log+0x302>
 801be46:	4620      	mov	r0, r4
 801be48:	f7e4 fb6c 	bl	8000524 <__aeabi_i2d>
 801be4c:	a390      	add	r3, pc, #576	; (adr r3, 801c090 <__ieee754_log+0x308>)
 801be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be52:	4606      	mov	r6, r0
 801be54:	460f      	mov	r7, r1
 801be56:	f7e4 fbcf 	bl	80005f8 <__aeabi_dmul>
 801be5a:	a38f      	add	r3, pc, #572	; (adr r3, 801c098 <__ieee754_log+0x310>)
 801be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be60:	4604      	mov	r4, r0
 801be62:	460d      	mov	r5, r1
 801be64:	4630      	mov	r0, r6
 801be66:	4639      	mov	r1, r7
 801be68:	f7e4 fbc6 	bl	80005f8 <__aeabi_dmul>
 801be6c:	4602      	mov	r2, r0
 801be6e:	460b      	mov	r3, r1
 801be70:	4620      	mov	r0, r4
 801be72:	4629      	mov	r1, r5
 801be74:	e7ba      	b.n	801bdec <__ieee754_log+0x64>
 801be76:	a38a      	add	r3, pc, #552	; (adr r3, 801c0a0 <__ieee754_log+0x318>)
 801be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be7c:	4650      	mov	r0, sl
 801be7e:	4659      	mov	r1, fp
 801be80:	f7e4 fbba 	bl	80005f8 <__aeabi_dmul>
 801be84:	4602      	mov	r2, r0
 801be86:	460b      	mov	r3, r1
 801be88:	2000      	movs	r0, #0
 801be8a:	499b      	ldr	r1, [pc, #620]	; (801c0f8 <__ieee754_log+0x370>)
 801be8c:	f7e4 f9fc 	bl	8000288 <__aeabi_dsub>
 801be90:	4652      	mov	r2, sl
 801be92:	4606      	mov	r6, r0
 801be94:	460f      	mov	r7, r1
 801be96:	465b      	mov	r3, fp
 801be98:	4650      	mov	r0, sl
 801be9a:	4659      	mov	r1, fp
 801be9c:	f7e4 fbac 	bl	80005f8 <__aeabi_dmul>
 801bea0:	4602      	mov	r2, r0
 801bea2:	460b      	mov	r3, r1
 801bea4:	4630      	mov	r0, r6
 801bea6:	4639      	mov	r1, r7
 801bea8:	f7e4 fba6 	bl	80005f8 <__aeabi_dmul>
 801beac:	4606      	mov	r6, r0
 801beae:	460f      	mov	r7, r1
 801beb0:	b914      	cbnz	r4, 801beb8 <__ieee754_log+0x130>
 801beb2:	4632      	mov	r2, r6
 801beb4:	463b      	mov	r3, r7
 801beb6:	e0a2      	b.n	801bffe <__ieee754_log+0x276>
 801beb8:	4620      	mov	r0, r4
 801beba:	f7e4 fb33 	bl	8000524 <__aeabi_i2d>
 801bebe:	a374      	add	r3, pc, #464	; (adr r3, 801c090 <__ieee754_log+0x308>)
 801bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bec4:	4680      	mov	r8, r0
 801bec6:	4689      	mov	r9, r1
 801bec8:	f7e4 fb96 	bl	80005f8 <__aeabi_dmul>
 801becc:	a372      	add	r3, pc, #456	; (adr r3, 801c098 <__ieee754_log+0x310>)
 801bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bed2:	4604      	mov	r4, r0
 801bed4:	460d      	mov	r5, r1
 801bed6:	4640      	mov	r0, r8
 801bed8:	4649      	mov	r1, r9
 801beda:	f7e4 fb8d 	bl	80005f8 <__aeabi_dmul>
 801bede:	e0a7      	b.n	801c030 <__ieee754_log+0x2a8>
 801bee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bee4:	f7e4 f9d2 	bl	800028c <__adddf3>
 801bee8:	4602      	mov	r2, r0
 801beea:	460b      	mov	r3, r1
 801beec:	4650      	mov	r0, sl
 801beee:	4659      	mov	r1, fp
 801bef0:	f7e4 fcac 	bl	800084c <__aeabi_ddiv>
 801bef4:	ec41 0b18 	vmov	d8, r0, r1
 801bef8:	4620      	mov	r0, r4
 801befa:	f7e4 fb13 	bl	8000524 <__aeabi_i2d>
 801befe:	ec53 2b18 	vmov	r2, r3, d8
 801bf02:	ec41 0b19 	vmov	d9, r0, r1
 801bf06:	ec51 0b18 	vmov	r0, r1, d8
 801bf0a:	f7e4 fb75 	bl	80005f8 <__aeabi_dmul>
 801bf0e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801bf12:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801bf16:	9301      	str	r3, [sp, #4]
 801bf18:	4602      	mov	r2, r0
 801bf1a:	460b      	mov	r3, r1
 801bf1c:	4680      	mov	r8, r0
 801bf1e:	4689      	mov	r9, r1
 801bf20:	f7e4 fb6a 	bl	80005f8 <__aeabi_dmul>
 801bf24:	a360      	add	r3, pc, #384	; (adr r3, 801c0a8 <__ieee754_log+0x320>)
 801bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf2a:	4606      	mov	r6, r0
 801bf2c:	460f      	mov	r7, r1
 801bf2e:	f7e4 fb63 	bl	80005f8 <__aeabi_dmul>
 801bf32:	a35f      	add	r3, pc, #380	; (adr r3, 801c0b0 <__ieee754_log+0x328>)
 801bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf38:	f7e4 f9a8 	bl	800028c <__adddf3>
 801bf3c:	4632      	mov	r2, r6
 801bf3e:	463b      	mov	r3, r7
 801bf40:	f7e4 fb5a 	bl	80005f8 <__aeabi_dmul>
 801bf44:	a35c      	add	r3, pc, #368	; (adr r3, 801c0b8 <__ieee754_log+0x330>)
 801bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf4a:	f7e4 f99f 	bl	800028c <__adddf3>
 801bf4e:	4632      	mov	r2, r6
 801bf50:	463b      	mov	r3, r7
 801bf52:	f7e4 fb51 	bl	80005f8 <__aeabi_dmul>
 801bf56:	a35a      	add	r3, pc, #360	; (adr r3, 801c0c0 <__ieee754_log+0x338>)
 801bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf5c:	f7e4 f996 	bl	800028c <__adddf3>
 801bf60:	4642      	mov	r2, r8
 801bf62:	464b      	mov	r3, r9
 801bf64:	f7e4 fb48 	bl	80005f8 <__aeabi_dmul>
 801bf68:	a357      	add	r3, pc, #348	; (adr r3, 801c0c8 <__ieee754_log+0x340>)
 801bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf6e:	4680      	mov	r8, r0
 801bf70:	4689      	mov	r9, r1
 801bf72:	4630      	mov	r0, r6
 801bf74:	4639      	mov	r1, r7
 801bf76:	f7e4 fb3f 	bl	80005f8 <__aeabi_dmul>
 801bf7a:	a355      	add	r3, pc, #340	; (adr r3, 801c0d0 <__ieee754_log+0x348>)
 801bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf80:	f7e4 f984 	bl	800028c <__adddf3>
 801bf84:	4632      	mov	r2, r6
 801bf86:	463b      	mov	r3, r7
 801bf88:	f7e4 fb36 	bl	80005f8 <__aeabi_dmul>
 801bf8c:	a352      	add	r3, pc, #328	; (adr r3, 801c0d8 <__ieee754_log+0x350>)
 801bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf92:	f7e4 f97b 	bl	800028c <__adddf3>
 801bf96:	4632      	mov	r2, r6
 801bf98:	463b      	mov	r3, r7
 801bf9a:	f7e4 fb2d 	bl	80005f8 <__aeabi_dmul>
 801bf9e:	460b      	mov	r3, r1
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	4649      	mov	r1, r9
 801bfa4:	4640      	mov	r0, r8
 801bfa6:	f7e4 f971 	bl	800028c <__adddf3>
 801bfaa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801bfae:	9b01      	ldr	r3, [sp, #4]
 801bfb0:	3551      	adds	r5, #81	; 0x51
 801bfb2:	431d      	orrs	r5, r3
 801bfb4:	2d00      	cmp	r5, #0
 801bfb6:	4680      	mov	r8, r0
 801bfb8:	4689      	mov	r9, r1
 801bfba:	dd48      	ble.n	801c04e <__ieee754_log+0x2c6>
 801bfbc:	4b4e      	ldr	r3, [pc, #312]	; (801c0f8 <__ieee754_log+0x370>)
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	4650      	mov	r0, sl
 801bfc2:	4659      	mov	r1, fp
 801bfc4:	f7e4 fb18 	bl	80005f8 <__aeabi_dmul>
 801bfc8:	4652      	mov	r2, sl
 801bfca:	465b      	mov	r3, fp
 801bfcc:	f7e4 fb14 	bl	80005f8 <__aeabi_dmul>
 801bfd0:	4602      	mov	r2, r0
 801bfd2:	460b      	mov	r3, r1
 801bfd4:	4606      	mov	r6, r0
 801bfd6:	460f      	mov	r7, r1
 801bfd8:	4640      	mov	r0, r8
 801bfda:	4649      	mov	r1, r9
 801bfdc:	f7e4 f956 	bl	800028c <__adddf3>
 801bfe0:	ec53 2b18 	vmov	r2, r3, d8
 801bfe4:	f7e4 fb08 	bl	80005f8 <__aeabi_dmul>
 801bfe8:	4680      	mov	r8, r0
 801bfea:	4689      	mov	r9, r1
 801bfec:	b964      	cbnz	r4, 801c008 <__ieee754_log+0x280>
 801bfee:	4602      	mov	r2, r0
 801bff0:	460b      	mov	r3, r1
 801bff2:	4630      	mov	r0, r6
 801bff4:	4639      	mov	r1, r7
 801bff6:	f7e4 f947 	bl	8000288 <__aeabi_dsub>
 801bffa:	4602      	mov	r2, r0
 801bffc:	460b      	mov	r3, r1
 801bffe:	4650      	mov	r0, sl
 801c000:	4659      	mov	r1, fp
 801c002:	f7e4 f941 	bl	8000288 <__aeabi_dsub>
 801c006:	e6d6      	b.n	801bdb6 <__ieee754_log+0x2e>
 801c008:	a321      	add	r3, pc, #132	; (adr r3, 801c090 <__ieee754_log+0x308>)
 801c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c00e:	ec51 0b19 	vmov	r0, r1, d9
 801c012:	f7e4 faf1 	bl	80005f8 <__aeabi_dmul>
 801c016:	a320      	add	r3, pc, #128	; (adr r3, 801c098 <__ieee754_log+0x310>)
 801c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c01c:	4604      	mov	r4, r0
 801c01e:	460d      	mov	r5, r1
 801c020:	ec51 0b19 	vmov	r0, r1, d9
 801c024:	f7e4 fae8 	bl	80005f8 <__aeabi_dmul>
 801c028:	4642      	mov	r2, r8
 801c02a:	464b      	mov	r3, r9
 801c02c:	f7e4 f92e 	bl	800028c <__adddf3>
 801c030:	4602      	mov	r2, r0
 801c032:	460b      	mov	r3, r1
 801c034:	4630      	mov	r0, r6
 801c036:	4639      	mov	r1, r7
 801c038:	f7e4 f926 	bl	8000288 <__aeabi_dsub>
 801c03c:	4652      	mov	r2, sl
 801c03e:	465b      	mov	r3, fp
 801c040:	f7e4 f922 	bl	8000288 <__aeabi_dsub>
 801c044:	4602      	mov	r2, r0
 801c046:	460b      	mov	r3, r1
 801c048:	4620      	mov	r0, r4
 801c04a:	4629      	mov	r1, r5
 801c04c:	e7d9      	b.n	801c002 <__ieee754_log+0x27a>
 801c04e:	4602      	mov	r2, r0
 801c050:	460b      	mov	r3, r1
 801c052:	4650      	mov	r0, sl
 801c054:	4659      	mov	r1, fp
 801c056:	f7e4 f917 	bl	8000288 <__aeabi_dsub>
 801c05a:	ec53 2b18 	vmov	r2, r3, d8
 801c05e:	f7e4 facb 	bl	80005f8 <__aeabi_dmul>
 801c062:	4606      	mov	r6, r0
 801c064:	460f      	mov	r7, r1
 801c066:	2c00      	cmp	r4, #0
 801c068:	f43f af23 	beq.w	801beb2 <__ieee754_log+0x12a>
 801c06c:	a308      	add	r3, pc, #32	; (adr r3, 801c090 <__ieee754_log+0x308>)
 801c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c072:	ec51 0b19 	vmov	r0, r1, d9
 801c076:	f7e4 fabf 	bl	80005f8 <__aeabi_dmul>
 801c07a:	a307      	add	r3, pc, #28	; (adr r3, 801c098 <__ieee754_log+0x310>)
 801c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c080:	4604      	mov	r4, r0
 801c082:	460d      	mov	r5, r1
 801c084:	ec51 0b19 	vmov	r0, r1, d9
 801c088:	e727      	b.n	801beda <__ieee754_log+0x152>
 801c08a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801c0e0 <__ieee754_log+0x358>
 801c08e:	e694      	b.n	801bdba <__ieee754_log+0x32>
 801c090:	fee00000 	.word	0xfee00000
 801c094:	3fe62e42 	.word	0x3fe62e42
 801c098:	35793c76 	.word	0x35793c76
 801c09c:	3dea39ef 	.word	0x3dea39ef
 801c0a0:	55555555 	.word	0x55555555
 801c0a4:	3fd55555 	.word	0x3fd55555
 801c0a8:	df3e5244 	.word	0xdf3e5244
 801c0ac:	3fc2f112 	.word	0x3fc2f112
 801c0b0:	96cb03de 	.word	0x96cb03de
 801c0b4:	3fc74664 	.word	0x3fc74664
 801c0b8:	94229359 	.word	0x94229359
 801c0bc:	3fd24924 	.word	0x3fd24924
 801c0c0:	55555593 	.word	0x55555593
 801c0c4:	3fe55555 	.word	0x3fe55555
 801c0c8:	d078c69f 	.word	0xd078c69f
 801c0cc:	3fc39a09 	.word	0x3fc39a09
 801c0d0:	1d8e78af 	.word	0x1d8e78af
 801c0d4:	3fcc71c5 	.word	0x3fcc71c5
 801c0d8:	9997fa04 	.word	0x9997fa04
 801c0dc:	3fd99999 	.word	0x3fd99999
	...
 801c0e8:	c3500000 	.word	0xc3500000
 801c0ec:	43500000 	.word	0x43500000
 801c0f0:	7fefffff 	.word	0x7fefffff
 801c0f4:	3ff00000 	.word	0x3ff00000
 801c0f8:	3fe00000 	.word	0x3fe00000
 801c0fc:	00000000 	.word	0x00000000

0801c100 <nan>:
 801c100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c108 <nan+0x8>
 801c104:	4770      	bx	lr
 801c106:	bf00      	nop
 801c108:	00000000 	.word	0x00000000
 801c10c:	7ff80000 	.word	0x7ff80000

0801c110 <abort>:
 801c110:	b508      	push	{r3, lr}
 801c112:	2006      	movs	r0, #6
 801c114:	f000 ff40 	bl	801cf98 <raise>
 801c118:	2001      	movs	r0, #1
 801c11a:	f7f3 fd9b 	bl	800fc54 <_exit>

0801c11e <atexit>:
 801c11e:	2300      	movs	r3, #0
 801c120:	4601      	mov	r1, r0
 801c122:	461a      	mov	r2, r3
 801c124:	4618      	mov	r0, r3
 801c126:	f000 bfa9 	b.w	801d07c <__register_exitproc>
	...

0801c12c <__errno>:
 801c12c:	4b01      	ldr	r3, [pc, #4]	; (801c134 <__errno+0x8>)
 801c12e:	6818      	ldr	r0, [r3, #0]
 801c130:	4770      	bx	lr
 801c132:	bf00      	nop
 801c134:	20000040 	.word	0x20000040

0801c138 <std>:
 801c138:	2300      	movs	r3, #0
 801c13a:	b510      	push	{r4, lr}
 801c13c:	4604      	mov	r4, r0
 801c13e:	e9c0 3300 	strd	r3, r3, [r0]
 801c142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c146:	6083      	str	r3, [r0, #8]
 801c148:	8181      	strh	r1, [r0, #12]
 801c14a:	6643      	str	r3, [r0, #100]	; 0x64
 801c14c:	81c2      	strh	r2, [r0, #14]
 801c14e:	6183      	str	r3, [r0, #24]
 801c150:	4619      	mov	r1, r3
 801c152:	2208      	movs	r2, #8
 801c154:	305c      	adds	r0, #92	; 0x5c
 801c156:	f000 f92b 	bl	801c3b0 <memset>
 801c15a:	4b05      	ldr	r3, [pc, #20]	; (801c170 <std+0x38>)
 801c15c:	6263      	str	r3, [r4, #36]	; 0x24
 801c15e:	4b05      	ldr	r3, [pc, #20]	; (801c174 <std+0x3c>)
 801c160:	62a3      	str	r3, [r4, #40]	; 0x28
 801c162:	4b05      	ldr	r3, [pc, #20]	; (801c178 <std+0x40>)
 801c164:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c166:	4b05      	ldr	r3, [pc, #20]	; (801c17c <std+0x44>)
 801c168:	6224      	str	r4, [r4, #32]
 801c16a:	6323      	str	r3, [r4, #48]	; 0x30
 801c16c:	bd10      	pop	{r4, pc}
 801c16e:	bf00      	nop
 801c170:	0801cfd1 	.word	0x0801cfd1
 801c174:	0801cff3 	.word	0x0801cff3
 801c178:	0801d02b 	.word	0x0801d02b
 801c17c:	0801d04f 	.word	0x0801d04f

0801c180 <_cleanup_r>:
 801c180:	4901      	ldr	r1, [pc, #4]	; (801c188 <_cleanup_r+0x8>)
 801c182:	f000 b8af 	b.w	801c2e4 <_fwalk_reent>
 801c186:	bf00      	nop
 801c188:	0801df61 	.word	0x0801df61

0801c18c <__sfmoreglue>:
 801c18c:	b570      	push	{r4, r5, r6, lr}
 801c18e:	2268      	movs	r2, #104	; 0x68
 801c190:	1e4d      	subs	r5, r1, #1
 801c192:	4355      	muls	r5, r2
 801c194:	460e      	mov	r6, r1
 801c196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c19a:	f000 f97d 	bl	801c498 <_malloc_r>
 801c19e:	4604      	mov	r4, r0
 801c1a0:	b140      	cbz	r0, 801c1b4 <__sfmoreglue+0x28>
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	e9c0 1600 	strd	r1, r6, [r0]
 801c1a8:	300c      	adds	r0, #12
 801c1aa:	60a0      	str	r0, [r4, #8]
 801c1ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c1b0:	f000 f8fe 	bl	801c3b0 <memset>
 801c1b4:	4620      	mov	r0, r4
 801c1b6:	bd70      	pop	{r4, r5, r6, pc}

0801c1b8 <__sfp_lock_acquire>:
 801c1b8:	4801      	ldr	r0, [pc, #4]	; (801c1c0 <__sfp_lock_acquire+0x8>)
 801c1ba:	f000 b8d8 	b.w	801c36e <__retarget_lock_acquire_recursive>
 801c1be:	bf00      	nop
 801c1c0:	20007476 	.word	0x20007476

0801c1c4 <__sfp_lock_release>:
 801c1c4:	4801      	ldr	r0, [pc, #4]	; (801c1cc <__sfp_lock_release+0x8>)
 801c1c6:	f000 b8d4 	b.w	801c372 <__retarget_lock_release_recursive>
 801c1ca:	bf00      	nop
 801c1cc:	20007476 	.word	0x20007476

0801c1d0 <__sinit_lock_acquire>:
 801c1d0:	4801      	ldr	r0, [pc, #4]	; (801c1d8 <__sinit_lock_acquire+0x8>)
 801c1d2:	f000 b8cc 	b.w	801c36e <__retarget_lock_acquire_recursive>
 801c1d6:	bf00      	nop
 801c1d8:	20007477 	.word	0x20007477

0801c1dc <__sinit_lock_release>:
 801c1dc:	4801      	ldr	r0, [pc, #4]	; (801c1e4 <__sinit_lock_release+0x8>)
 801c1de:	f000 b8c8 	b.w	801c372 <__retarget_lock_release_recursive>
 801c1e2:	bf00      	nop
 801c1e4:	20007477 	.word	0x20007477

0801c1e8 <__sinit>:
 801c1e8:	b510      	push	{r4, lr}
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	f7ff fff0 	bl	801c1d0 <__sinit_lock_acquire>
 801c1f0:	69a3      	ldr	r3, [r4, #24]
 801c1f2:	b11b      	cbz	r3, 801c1fc <__sinit+0x14>
 801c1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1f8:	f7ff bff0 	b.w	801c1dc <__sinit_lock_release>
 801c1fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c200:	6523      	str	r3, [r4, #80]	; 0x50
 801c202:	4b13      	ldr	r3, [pc, #76]	; (801c250 <__sinit+0x68>)
 801c204:	4a13      	ldr	r2, [pc, #76]	; (801c254 <__sinit+0x6c>)
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	62a2      	str	r2, [r4, #40]	; 0x28
 801c20a:	42a3      	cmp	r3, r4
 801c20c:	bf04      	itt	eq
 801c20e:	2301      	moveq	r3, #1
 801c210:	61a3      	streq	r3, [r4, #24]
 801c212:	4620      	mov	r0, r4
 801c214:	f000 f820 	bl	801c258 <__sfp>
 801c218:	6060      	str	r0, [r4, #4]
 801c21a:	4620      	mov	r0, r4
 801c21c:	f000 f81c 	bl	801c258 <__sfp>
 801c220:	60a0      	str	r0, [r4, #8]
 801c222:	4620      	mov	r0, r4
 801c224:	f000 f818 	bl	801c258 <__sfp>
 801c228:	2200      	movs	r2, #0
 801c22a:	60e0      	str	r0, [r4, #12]
 801c22c:	2104      	movs	r1, #4
 801c22e:	6860      	ldr	r0, [r4, #4]
 801c230:	f7ff ff82 	bl	801c138 <std>
 801c234:	68a0      	ldr	r0, [r4, #8]
 801c236:	2201      	movs	r2, #1
 801c238:	2109      	movs	r1, #9
 801c23a:	f7ff ff7d 	bl	801c138 <std>
 801c23e:	68e0      	ldr	r0, [r4, #12]
 801c240:	2202      	movs	r2, #2
 801c242:	2112      	movs	r1, #18
 801c244:	f7ff ff78 	bl	801c138 <std>
 801c248:	2301      	movs	r3, #1
 801c24a:	61a3      	str	r3, [r4, #24]
 801c24c:	e7d2      	b.n	801c1f4 <__sinit+0xc>
 801c24e:	bf00      	nop
 801c250:	0801f3b8 	.word	0x0801f3b8
 801c254:	0801c181 	.word	0x0801c181

0801c258 <__sfp>:
 801c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c25a:	4607      	mov	r7, r0
 801c25c:	f7ff ffac 	bl	801c1b8 <__sfp_lock_acquire>
 801c260:	4b1e      	ldr	r3, [pc, #120]	; (801c2dc <__sfp+0x84>)
 801c262:	681e      	ldr	r6, [r3, #0]
 801c264:	69b3      	ldr	r3, [r6, #24]
 801c266:	b913      	cbnz	r3, 801c26e <__sfp+0x16>
 801c268:	4630      	mov	r0, r6
 801c26a:	f7ff ffbd 	bl	801c1e8 <__sinit>
 801c26e:	3648      	adds	r6, #72	; 0x48
 801c270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c274:	3b01      	subs	r3, #1
 801c276:	d503      	bpl.n	801c280 <__sfp+0x28>
 801c278:	6833      	ldr	r3, [r6, #0]
 801c27a:	b30b      	cbz	r3, 801c2c0 <__sfp+0x68>
 801c27c:	6836      	ldr	r6, [r6, #0]
 801c27e:	e7f7      	b.n	801c270 <__sfp+0x18>
 801c280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c284:	b9d5      	cbnz	r5, 801c2bc <__sfp+0x64>
 801c286:	4b16      	ldr	r3, [pc, #88]	; (801c2e0 <__sfp+0x88>)
 801c288:	60e3      	str	r3, [r4, #12]
 801c28a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c28e:	6665      	str	r5, [r4, #100]	; 0x64
 801c290:	f000 f86c 	bl	801c36c <__retarget_lock_init_recursive>
 801c294:	f7ff ff96 	bl	801c1c4 <__sfp_lock_release>
 801c298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c29c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c2a0:	6025      	str	r5, [r4, #0]
 801c2a2:	61a5      	str	r5, [r4, #24]
 801c2a4:	2208      	movs	r2, #8
 801c2a6:	4629      	mov	r1, r5
 801c2a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c2ac:	f000 f880 	bl	801c3b0 <memset>
 801c2b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c2b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2bc:	3468      	adds	r4, #104	; 0x68
 801c2be:	e7d9      	b.n	801c274 <__sfp+0x1c>
 801c2c0:	2104      	movs	r1, #4
 801c2c2:	4638      	mov	r0, r7
 801c2c4:	f7ff ff62 	bl	801c18c <__sfmoreglue>
 801c2c8:	4604      	mov	r4, r0
 801c2ca:	6030      	str	r0, [r6, #0]
 801c2cc:	2800      	cmp	r0, #0
 801c2ce:	d1d5      	bne.n	801c27c <__sfp+0x24>
 801c2d0:	f7ff ff78 	bl	801c1c4 <__sfp_lock_release>
 801c2d4:	230c      	movs	r3, #12
 801c2d6:	603b      	str	r3, [r7, #0]
 801c2d8:	e7ee      	b.n	801c2b8 <__sfp+0x60>
 801c2da:	bf00      	nop
 801c2dc:	0801f3b8 	.word	0x0801f3b8
 801c2e0:	ffff0001 	.word	0xffff0001

0801c2e4 <_fwalk_reent>:
 801c2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2e8:	4606      	mov	r6, r0
 801c2ea:	4688      	mov	r8, r1
 801c2ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c2f0:	2700      	movs	r7, #0
 801c2f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c2f6:	f1b9 0901 	subs.w	r9, r9, #1
 801c2fa:	d505      	bpl.n	801c308 <_fwalk_reent+0x24>
 801c2fc:	6824      	ldr	r4, [r4, #0]
 801c2fe:	2c00      	cmp	r4, #0
 801c300:	d1f7      	bne.n	801c2f2 <_fwalk_reent+0xe>
 801c302:	4638      	mov	r0, r7
 801c304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c308:	89ab      	ldrh	r3, [r5, #12]
 801c30a:	2b01      	cmp	r3, #1
 801c30c:	d907      	bls.n	801c31e <_fwalk_reent+0x3a>
 801c30e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c312:	3301      	adds	r3, #1
 801c314:	d003      	beq.n	801c31e <_fwalk_reent+0x3a>
 801c316:	4629      	mov	r1, r5
 801c318:	4630      	mov	r0, r6
 801c31a:	47c0      	blx	r8
 801c31c:	4307      	orrs	r7, r0
 801c31e:	3568      	adds	r5, #104	; 0x68
 801c320:	e7e9      	b.n	801c2f6 <_fwalk_reent+0x12>
	...

0801c324 <__libc_init_array>:
 801c324:	b570      	push	{r4, r5, r6, lr}
 801c326:	4d0d      	ldr	r5, [pc, #52]	; (801c35c <__libc_init_array+0x38>)
 801c328:	4c0d      	ldr	r4, [pc, #52]	; (801c360 <__libc_init_array+0x3c>)
 801c32a:	1b64      	subs	r4, r4, r5
 801c32c:	10a4      	asrs	r4, r4, #2
 801c32e:	2600      	movs	r6, #0
 801c330:	42a6      	cmp	r6, r4
 801c332:	d109      	bne.n	801c348 <__libc_init_array+0x24>
 801c334:	4d0b      	ldr	r5, [pc, #44]	; (801c364 <__libc_init_array+0x40>)
 801c336:	4c0c      	ldr	r4, [pc, #48]	; (801c368 <__libc_init_array+0x44>)
 801c338:	f002 fd0e 	bl	801ed58 <_init>
 801c33c:	1b64      	subs	r4, r4, r5
 801c33e:	10a4      	asrs	r4, r4, #2
 801c340:	2600      	movs	r6, #0
 801c342:	42a6      	cmp	r6, r4
 801c344:	d105      	bne.n	801c352 <__libc_init_array+0x2e>
 801c346:	bd70      	pop	{r4, r5, r6, pc}
 801c348:	f855 3b04 	ldr.w	r3, [r5], #4
 801c34c:	4798      	blx	r3
 801c34e:	3601      	adds	r6, #1
 801c350:	e7ee      	b.n	801c330 <__libc_init_array+0xc>
 801c352:	f855 3b04 	ldr.w	r3, [r5], #4
 801c356:	4798      	blx	r3
 801c358:	3601      	adds	r6, #1
 801c35a:	e7f2      	b.n	801c342 <__libc_init_array+0x1e>
 801c35c:	0801f73c 	.word	0x0801f73c
 801c360:	0801f73c 	.word	0x0801f73c
 801c364:	0801f73c 	.word	0x0801f73c
 801c368:	0801f760 	.word	0x0801f760

0801c36c <__retarget_lock_init_recursive>:
 801c36c:	4770      	bx	lr

0801c36e <__retarget_lock_acquire_recursive>:
 801c36e:	4770      	bx	lr

0801c370 <__retarget_lock_release>:
 801c370:	4770      	bx	lr

0801c372 <__retarget_lock_release_recursive>:
 801c372:	4770      	bx	lr

0801c374 <malloc>:
 801c374:	4b02      	ldr	r3, [pc, #8]	; (801c380 <malloc+0xc>)
 801c376:	4601      	mov	r1, r0
 801c378:	6818      	ldr	r0, [r3, #0]
 801c37a:	f000 b88d 	b.w	801c498 <_malloc_r>
 801c37e:	bf00      	nop
 801c380:	20000040 	.word	0x20000040

0801c384 <free>:
 801c384:	4b02      	ldr	r3, [pc, #8]	; (801c390 <free+0xc>)
 801c386:	4601      	mov	r1, r0
 801c388:	6818      	ldr	r0, [r3, #0]
 801c38a:	f000 b819 	b.w	801c3c0 <_free_r>
 801c38e:	bf00      	nop
 801c390:	20000040 	.word	0x20000040

0801c394 <memcpy>:
 801c394:	440a      	add	r2, r1
 801c396:	4291      	cmp	r1, r2
 801c398:	f100 33ff 	add.w	r3, r0, #4294967295
 801c39c:	d100      	bne.n	801c3a0 <memcpy+0xc>
 801c39e:	4770      	bx	lr
 801c3a0:	b510      	push	{r4, lr}
 801c3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c3aa:	4291      	cmp	r1, r2
 801c3ac:	d1f9      	bne.n	801c3a2 <memcpy+0xe>
 801c3ae:	bd10      	pop	{r4, pc}

0801c3b0 <memset>:
 801c3b0:	4402      	add	r2, r0
 801c3b2:	4603      	mov	r3, r0
 801c3b4:	4293      	cmp	r3, r2
 801c3b6:	d100      	bne.n	801c3ba <memset+0xa>
 801c3b8:	4770      	bx	lr
 801c3ba:	f803 1b01 	strb.w	r1, [r3], #1
 801c3be:	e7f9      	b.n	801c3b4 <memset+0x4>

0801c3c0 <_free_r>:
 801c3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c3c2:	2900      	cmp	r1, #0
 801c3c4:	d044      	beq.n	801c450 <_free_r+0x90>
 801c3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3ca:	9001      	str	r0, [sp, #4]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	f1a1 0404 	sub.w	r4, r1, #4
 801c3d2:	bfb8      	it	lt
 801c3d4:	18e4      	addlt	r4, r4, r3
 801c3d6:	f001 fe15 	bl	801e004 <__malloc_lock>
 801c3da:	4a1e      	ldr	r2, [pc, #120]	; (801c454 <_free_r+0x94>)
 801c3dc:	9801      	ldr	r0, [sp, #4]
 801c3de:	6813      	ldr	r3, [r2, #0]
 801c3e0:	b933      	cbnz	r3, 801c3f0 <_free_r+0x30>
 801c3e2:	6063      	str	r3, [r4, #4]
 801c3e4:	6014      	str	r4, [r2, #0]
 801c3e6:	b003      	add	sp, #12
 801c3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c3ec:	f001 be10 	b.w	801e010 <__malloc_unlock>
 801c3f0:	42a3      	cmp	r3, r4
 801c3f2:	d908      	bls.n	801c406 <_free_r+0x46>
 801c3f4:	6825      	ldr	r5, [r4, #0]
 801c3f6:	1961      	adds	r1, r4, r5
 801c3f8:	428b      	cmp	r3, r1
 801c3fa:	bf01      	itttt	eq
 801c3fc:	6819      	ldreq	r1, [r3, #0]
 801c3fe:	685b      	ldreq	r3, [r3, #4]
 801c400:	1949      	addeq	r1, r1, r5
 801c402:	6021      	streq	r1, [r4, #0]
 801c404:	e7ed      	b.n	801c3e2 <_free_r+0x22>
 801c406:	461a      	mov	r2, r3
 801c408:	685b      	ldr	r3, [r3, #4]
 801c40a:	b10b      	cbz	r3, 801c410 <_free_r+0x50>
 801c40c:	42a3      	cmp	r3, r4
 801c40e:	d9fa      	bls.n	801c406 <_free_r+0x46>
 801c410:	6811      	ldr	r1, [r2, #0]
 801c412:	1855      	adds	r5, r2, r1
 801c414:	42a5      	cmp	r5, r4
 801c416:	d10b      	bne.n	801c430 <_free_r+0x70>
 801c418:	6824      	ldr	r4, [r4, #0]
 801c41a:	4421      	add	r1, r4
 801c41c:	1854      	adds	r4, r2, r1
 801c41e:	42a3      	cmp	r3, r4
 801c420:	6011      	str	r1, [r2, #0]
 801c422:	d1e0      	bne.n	801c3e6 <_free_r+0x26>
 801c424:	681c      	ldr	r4, [r3, #0]
 801c426:	685b      	ldr	r3, [r3, #4]
 801c428:	6053      	str	r3, [r2, #4]
 801c42a:	4421      	add	r1, r4
 801c42c:	6011      	str	r1, [r2, #0]
 801c42e:	e7da      	b.n	801c3e6 <_free_r+0x26>
 801c430:	d902      	bls.n	801c438 <_free_r+0x78>
 801c432:	230c      	movs	r3, #12
 801c434:	6003      	str	r3, [r0, #0]
 801c436:	e7d6      	b.n	801c3e6 <_free_r+0x26>
 801c438:	6825      	ldr	r5, [r4, #0]
 801c43a:	1961      	adds	r1, r4, r5
 801c43c:	428b      	cmp	r3, r1
 801c43e:	bf04      	itt	eq
 801c440:	6819      	ldreq	r1, [r3, #0]
 801c442:	685b      	ldreq	r3, [r3, #4]
 801c444:	6063      	str	r3, [r4, #4]
 801c446:	bf04      	itt	eq
 801c448:	1949      	addeq	r1, r1, r5
 801c44a:	6021      	streq	r1, [r4, #0]
 801c44c:	6054      	str	r4, [r2, #4]
 801c44e:	e7ca      	b.n	801c3e6 <_free_r+0x26>
 801c450:	b003      	add	sp, #12
 801c452:	bd30      	pop	{r4, r5, pc}
 801c454:	20007478 	.word	0x20007478

0801c458 <sbrk_aligned>:
 801c458:	b570      	push	{r4, r5, r6, lr}
 801c45a:	4e0e      	ldr	r6, [pc, #56]	; (801c494 <sbrk_aligned+0x3c>)
 801c45c:	460c      	mov	r4, r1
 801c45e:	6831      	ldr	r1, [r6, #0]
 801c460:	4605      	mov	r5, r0
 801c462:	b911      	cbnz	r1, 801c46a <sbrk_aligned+0x12>
 801c464:	f000 fd60 	bl	801cf28 <_sbrk_r>
 801c468:	6030      	str	r0, [r6, #0]
 801c46a:	4621      	mov	r1, r4
 801c46c:	4628      	mov	r0, r5
 801c46e:	f000 fd5b 	bl	801cf28 <_sbrk_r>
 801c472:	1c43      	adds	r3, r0, #1
 801c474:	d00a      	beq.n	801c48c <sbrk_aligned+0x34>
 801c476:	1cc4      	adds	r4, r0, #3
 801c478:	f024 0403 	bic.w	r4, r4, #3
 801c47c:	42a0      	cmp	r0, r4
 801c47e:	d007      	beq.n	801c490 <sbrk_aligned+0x38>
 801c480:	1a21      	subs	r1, r4, r0
 801c482:	4628      	mov	r0, r5
 801c484:	f000 fd50 	bl	801cf28 <_sbrk_r>
 801c488:	3001      	adds	r0, #1
 801c48a:	d101      	bne.n	801c490 <sbrk_aligned+0x38>
 801c48c:	f04f 34ff 	mov.w	r4, #4294967295
 801c490:	4620      	mov	r0, r4
 801c492:	bd70      	pop	{r4, r5, r6, pc}
 801c494:	2000747c 	.word	0x2000747c

0801c498 <_malloc_r>:
 801c498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c49c:	1ccd      	adds	r5, r1, #3
 801c49e:	f025 0503 	bic.w	r5, r5, #3
 801c4a2:	3508      	adds	r5, #8
 801c4a4:	2d0c      	cmp	r5, #12
 801c4a6:	bf38      	it	cc
 801c4a8:	250c      	movcc	r5, #12
 801c4aa:	2d00      	cmp	r5, #0
 801c4ac:	4607      	mov	r7, r0
 801c4ae:	db01      	blt.n	801c4b4 <_malloc_r+0x1c>
 801c4b0:	42a9      	cmp	r1, r5
 801c4b2:	d905      	bls.n	801c4c0 <_malloc_r+0x28>
 801c4b4:	230c      	movs	r3, #12
 801c4b6:	603b      	str	r3, [r7, #0]
 801c4b8:	2600      	movs	r6, #0
 801c4ba:	4630      	mov	r0, r6
 801c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4c0:	4e2e      	ldr	r6, [pc, #184]	; (801c57c <_malloc_r+0xe4>)
 801c4c2:	f001 fd9f 	bl	801e004 <__malloc_lock>
 801c4c6:	6833      	ldr	r3, [r6, #0]
 801c4c8:	461c      	mov	r4, r3
 801c4ca:	bb34      	cbnz	r4, 801c51a <_malloc_r+0x82>
 801c4cc:	4629      	mov	r1, r5
 801c4ce:	4638      	mov	r0, r7
 801c4d0:	f7ff ffc2 	bl	801c458 <sbrk_aligned>
 801c4d4:	1c43      	adds	r3, r0, #1
 801c4d6:	4604      	mov	r4, r0
 801c4d8:	d14d      	bne.n	801c576 <_malloc_r+0xde>
 801c4da:	6834      	ldr	r4, [r6, #0]
 801c4dc:	4626      	mov	r6, r4
 801c4de:	2e00      	cmp	r6, #0
 801c4e0:	d140      	bne.n	801c564 <_malloc_r+0xcc>
 801c4e2:	6823      	ldr	r3, [r4, #0]
 801c4e4:	4631      	mov	r1, r6
 801c4e6:	4638      	mov	r0, r7
 801c4e8:	eb04 0803 	add.w	r8, r4, r3
 801c4ec:	f000 fd1c 	bl	801cf28 <_sbrk_r>
 801c4f0:	4580      	cmp	r8, r0
 801c4f2:	d13a      	bne.n	801c56a <_malloc_r+0xd2>
 801c4f4:	6821      	ldr	r1, [r4, #0]
 801c4f6:	3503      	adds	r5, #3
 801c4f8:	1a6d      	subs	r5, r5, r1
 801c4fa:	f025 0503 	bic.w	r5, r5, #3
 801c4fe:	3508      	adds	r5, #8
 801c500:	2d0c      	cmp	r5, #12
 801c502:	bf38      	it	cc
 801c504:	250c      	movcc	r5, #12
 801c506:	4629      	mov	r1, r5
 801c508:	4638      	mov	r0, r7
 801c50a:	f7ff ffa5 	bl	801c458 <sbrk_aligned>
 801c50e:	3001      	adds	r0, #1
 801c510:	d02b      	beq.n	801c56a <_malloc_r+0xd2>
 801c512:	6823      	ldr	r3, [r4, #0]
 801c514:	442b      	add	r3, r5
 801c516:	6023      	str	r3, [r4, #0]
 801c518:	e00e      	b.n	801c538 <_malloc_r+0xa0>
 801c51a:	6822      	ldr	r2, [r4, #0]
 801c51c:	1b52      	subs	r2, r2, r5
 801c51e:	d41e      	bmi.n	801c55e <_malloc_r+0xc6>
 801c520:	2a0b      	cmp	r2, #11
 801c522:	d916      	bls.n	801c552 <_malloc_r+0xba>
 801c524:	1961      	adds	r1, r4, r5
 801c526:	42a3      	cmp	r3, r4
 801c528:	6025      	str	r5, [r4, #0]
 801c52a:	bf18      	it	ne
 801c52c:	6059      	strne	r1, [r3, #4]
 801c52e:	6863      	ldr	r3, [r4, #4]
 801c530:	bf08      	it	eq
 801c532:	6031      	streq	r1, [r6, #0]
 801c534:	5162      	str	r2, [r4, r5]
 801c536:	604b      	str	r3, [r1, #4]
 801c538:	4638      	mov	r0, r7
 801c53a:	f104 060b 	add.w	r6, r4, #11
 801c53e:	f001 fd67 	bl	801e010 <__malloc_unlock>
 801c542:	f026 0607 	bic.w	r6, r6, #7
 801c546:	1d23      	adds	r3, r4, #4
 801c548:	1af2      	subs	r2, r6, r3
 801c54a:	d0b6      	beq.n	801c4ba <_malloc_r+0x22>
 801c54c:	1b9b      	subs	r3, r3, r6
 801c54e:	50a3      	str	r3, [r4, r2]
 801c550:	e7b3      	b.n	801c4ba <_malloc_r+0x22>
 801c552:	6862      	ldr	r2, [r4, #4]
 801c554:	42a3      	cmp	r3, r4
 801c556:	bf0c      	ite	eq
 801c558:	6032      	streq	r2, [r6, #0]
 801c55a:	605a      	strne	r2, [r3, #4]
 801c55c:	e7ec      	b.n	801c538 <_malloc_r+0xa0>
 801c55e:	4623      	mov	r3, r4
 801c560:	6864      	ldr	r4, [r4, #4]
 801c562:	e7b2      	b.n	801c4ca <_malloc_r+0x32>
 801c564:	4634      	mov	r4, r6
 801c566:	6876      	ldr	r6, [r6, #4]
 801c568:	e7b9      	b.n	801c4de <_malloc_r+0x46>
 801c56a:	230c      	movs	r3, #12
 801c56c:	603b      	str	r3, [r7, #0]
 801c56e:	4638      	mov	r0, r7
 801c570:	f001 fd4e 	bl	801e010 <__malloc_unlock>
 801c574:	e7a1      	b.n	801c4ba <_malloc_r+0x22>
 801c576:	6025      	str	r5, [r4, #0]
 801c578:	e7de      	b.n	801c538 <_malloc_r+0xa0>
 801c57a:	bf00      	nop
 801c57c:	20007478 	.word	0x20007478

0801c580 <__cvt>:
 801c580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c584:	ec55 4b10 	vmov	r4, r5, d0
 801c588:	2d00      	cmp	r5, #0
 801c58a:	460e      	mov	r6, r1
 801c58c:	4619      	mov	r1, r3
 801c58e:	462b      	mov	r3, r5
 801c590:	bfbb      	ittet	lt
 801c592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c596:	461d      	movlt	r5, r3
 801c598:	2300      	movge	r3, #0
 801c59a:	232d      	movlt	r3, #45	; 0x2d
 801c59c:	700b      	strb	r3, [r1, #0]
 801c59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c5a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c5a4:	4691      	mov	r9, r2
 801c5a6:	f023 0820 	bic.w	r8, r3, #32
 801c5aa:	bfbc      	itt	lt
 801c5ac:	4622      	movlt	r2, r4
 801c5ae:	4614      	movlt	r4, r2
 801c5b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c5b4:	d005      	beq.n	801c5c2 <__cvt+0x42>
 801c5b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c5ba:	d100      	bne.n	801c5be <__cvt+0x3e>
 801c5bc:	3601      	adds	r6, #1
 801c5be:	2102      	movs	r1, #2
 801c5c0:	e000      	b.n	801c5c4 <__cvt+0x44>
 801c5c2:	2103      	movs	r1, #3
 801c5c4:	ab03      	add	r3, sp, #12
 801c5c6:	9301      	str	r3, [sp, #4]
 801c5c8:	ab02      	add	r3, sp, #8
 801c5ca:	9300      	str	r3, [sp, #0]
 801c5cc:	ec45 4b10 	vmov	d0, r4, r5
 801c5d0:	4653      	mov	r3, sl
 801c5d2:	4632      	mov	r2, r6
 801c5d4:	f000 fe50 	bl	801d278 <_dtoa_r>
 801c5d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c5dc:	4607      	mov	r7, r0
 801c5de:	d102      	bne.n	801c5e6 <__cvt+0x66>
 801c5e0:	f019 0f01 	tst.w	r9, #1
 801c5e4:	d022      	beq.n	801c62c <__cvt+0xac>
 801c5e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c5ea:	eb07 0906 	add.w	r9, r7, r6
 801c5ee:	d110      	bne.n	801c612 <__cvt+0x92>
 801c5f0:	783b      	ldrb	r3, [r7, #0]
 801c5f2:	2b30      	cmp	r3, #48	; 0x30
 801c5f4:	d10a      	bne.n	801c60c <__cvt+0x8c>
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	4620      	mov	r0, r4
 801c5fc:	4629      	mov	r1, r5
 801c5fe:	f7e4 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 801c602:	b918      	cbnz	r0, 801c60c <__cvt+0x8c>
 801c604:	f1c6 0601 	rsb	r6, r6, #1
 801c608:	f8ca 6000 	str.w	r6, [sl]
 801c60c:	f8da 3000 	ldr.w	r3, [sl]
 801c610:	4499      	add	r9, r3
 801c612:	2200      	movs	r2, #0
 801c614:	2300      	movs	r3, #0
 801c616:	4620      	mov	r0, r4
 801c618:	4629      	mov	r1, r5
 801c61a:	f7e4 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 801c61e:	b108      	cbz	r0, 801c624 <__cvt+0xa4>
 801c620:	f8cd 900c 	str.w	r9, [sp, #12]
 801c624:	2230      	movs	r2, #48	; 0x30
 801c626:	9b03      	ldr	r3, [sp, #12]
 801c628:	454b      	cmp	r3, r9
 801c62a:	d307      	bcc.n	801c63c <__cvt+0xbc>
 801c62c:	9b03      	ldr	r3, [sp, #12]
 801c62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c630:	1bdb      	subs	r3, r3, r7
 801c632:	4638      	mov	r0, r7
 801c634:	6013      	str	r3, [r2, #0]
 801c636:	b004      	add	sp, #16
 801c638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c63c:	1c59      	adds	r1, r3, #1
 801c63e:	9103      	str	r1, [sp, #12]
 801c640:	701a      	strb	r2, [r3, #0]
 801c642:	e7f0      	b.n	801c626 <__cvt+0xa6>

0801c644 <__exponent>:
 801c644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c646:	4603      	mov	r3, r0
 801c648:	2900      	cmp	r1, #0
 801c64a:	bfb8      	it	lt
 801c64c:	4249      	neglt	r1, r1
 801c64e:	f803 2b02 	strb.w	r2, [r3], #2
 801c652:	bfb4      	ite	lt
 801c654:	222d      	movlt	r2, #45	; 0x2d
 801c656:	222b      	movge	r2, #43	; 0x2b
 801c658:	2909      	cmp	r1, #9
 801c65a:	7042      	strb	r2, [r0, #1]
 801c65c:	dd2a      	ble.n	801c6b4 <__exponent+0x70>
 801c65e:	f10d 0407 	add.w	r4, sp, #7
 801c662:	46a4      	mov	ip, r4
 801c664:	270a      	movs	r7, #10
 801c666:	46a6      	mov	lr, r4
 801c668:	460a      	mov	r2, r1
 801c66a:	fb91 f6f7 	sdiv	r6, r1, r7
 801c66e:	fb07 1516 	mls	r5, r7, r6, r1
 801c672:	3530      	adds	r5, #48	; 0x30
 801c674:	2a63      	cmp	r2, #99	; 0x63
 801c676:	f104 34ff 	add.w	r4, r4, #4294967295
 801c67a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c67e:	4631      	mov	r1, r6
 801c680:	dcf1      	bgt.n	801c666 <__exponent+0x22>
 801c682:	3130      	adds	r1, #48	; 0x30
 801c684:	f1ae 0502 	sub.w	r5, lr, #2
 801c688:	f804 1c01 	strb.w	r1, [r4, #-1]
 801c68c:	1c44      	adds	r4, r0, #1
 801c68e:	4629      	mov	r1, r5
 801c690:	4561      	cmp	r1, ip
 801c692:	d30a      	bcc.n	801c6aa <__exponent+0x66>
 801c694:	f10d 0209 	add.w	r2, sp, #9
 801c698:	eba2 020e 	sub.w	r2, r2, lr
 801c69c:	4565      	cmp	r5, ip
 801c69e:	bf88      	it	hi
 801c6a0:	2200      	movhi	r2, #0
 801c6a2:	4413      	add	r3, r2
 801c6a4:	1a18      	subs	r0, r3, r0
 801c6a6:	b003      	add	sp, #12
 801c6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c6ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 801c6b2:	e7ed      	b.n	801c690 <__exponent+0x4c>
 801c6b4:	2330      	movs	r3, #48	; 0x30
 801c6b6:	3130      	adds	r1, #48	; 0x30
 801c6b8:	7083      	strb	r3, [r0, #2]
 801c6ba:	70c1      	strb	r1, [r0, #3]
 801c6bc:	1d03      	adds	r3, r0, #4
 801c6be:	e7f1      	b.n	801c6a4 <__exponent+0x60>

0801c6c0 <_printf_float>:
 801c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6c4:	ed2d 8b02 	vpush	{d8}
 801c6c8:	b08d      	sub	sp, #52	; 0x34
 801c6ca:	460c      	mov	r4, r1
 801c6cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c6d0:	4616      	mov	r6, r2
 801c6d2:	461f      	mov	r7, r3
 801c6d4:	4605      	mov	r5, r0
 801c6d6:	f001 fc7f 	bl	801dfd8 <_localeconv_r>
 801c6da:	f8d0 a000 	ldr.w	sl, [r0]
 801c6de:	4650      	mov	r0, sl
 801c6e0:	f7e3 fd76 	bl	80001d0 <strlen>
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	930a      	str	r3, [sp, #40]	; 0x28
 801c6e8:	6823      	ldr	r3, [r4, #0]
 801c6ea:	9305      	str	r3, [sp, #20]
 801c6ec:	f8d8 3000 	ldr.w	r3, [r8]
 801c6f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c6f4:	3307      	adds	r3, #7
 801c6f6:	f023 0307 	bic.w	r3, r3, #7
 801c6fa:	f103 0208 	add.w	r2, r3, #8
 801c6fe:	f8c8 2000 	str.w	r2, [r8]
 801c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801c70a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801c70e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c712:	9307      	str	r3, [sp, #28]
 801c714:	f8cd 8018 	str.w	r8, [sp, #24]
 801c718:	ee08 0a10 	vmov	s16, r0
 801c71c:	4b9f      	ldr	r3, [pc, #636]	; (801c99c <_printf_float+0x2dc>)
 801c71e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c722:	f04f 32ff 	mov.w	r2, #4294967295
 801c726:	f7e4 fa01 	bl	8000b2c <__aeabi_dcmpun>
 801c72a:	bb88      	cbnz	r0, 801c790 <_printf_float+0xd0>
 801c72c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c730:	4b9a      	ldr	r3, [pc, #616]	; (801c99c <_printf_float+0x2dc>)
 801c732:	f04f 32ff 	mov.w	r2, #4294967295
 801c736:	f7e4 f9db 	bl	8000af0 <__aeabi_dcmple>
 801c73a:	bb48      	cbnz	r0, 801c790 <_printf_float+0xd0>
 801c73c:	2200      	movs	r2, #0
 801c73e:	2300      	movs	r3, #0
 801c740:	4640      	mov	r0, r8
 801c742:	4649      	mov	r1, r9
 801c744:	f7e4 f9ca 	bl	8000adc <__aeabi_dcmplt>
 801c748:	b110      	cbz	r0, 801c750 <_printf_float+0x90>
 801c74a:	232d      	movs	r3, #45	; 0x2d
 801c74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c750:	4b93      	ldr	r3, [pc, #588]	; (801c9a0 <_printf_float+0x2e0>)
 801c752:	4894      	ldr	r0, [pc, #592]	; (801c9a4 <_printf_float+0x2e4>)
 801c754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c758:	bf94      	ite	ls
 801c75a:	4698      	movls	r8, r3
 801c75c:	4680      	movhi	r8, r0
 801c75e:	2303      	movs	r3, #3
 801c760:	6123      	str	r3, [r4, #16]
 801c762:	9b05      	ldr	r3, [sp, #20]
 801c764:	f023 0204 	bic.w	r2, r3, #4
 801c768:	6022      	str	r2, [r4, #0]
 801c76a:	f04f 0900 	mov.w	r9, #0
 801c76e:	9700      	str	r7, [sp, #0]
 801c770:	4633      	mov	r3, r6
 801c772:	aa0b      	add	r2, sp, #44	; 0x2c
 801c774:	4621      	mov	r1, r4
 801c776:	4628      	mov	r0, r5
 801c778:	f000 f9d8 	bl	801cb2c <_printf_common>
 801c77c:	3001      	adds	r0, #1
 801c77e:	f040 8090 	bne.w	801c8a2 <_printf_float+0x1e2>
 801c782:	f04f 30ff 	mov.w	r0, #4294967295
 801c786:	b00d      	add	sp, #52	; 0x34
 801c788:	ecbd 8b02 	vpop	{d8}
 801c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c790:	4642      	mov	r2, r8
 801c792:	464b      	mov	r3, r9
 801c794:	4640      	mov	r0, r8
 801c796:	4649      	mov	r1, r9
 801c798:	f7e4 f9c8 	bl	8000b2c <__aeabi_dcmpun>
 801c79c:	b140      	cbz	r0, 801c7b0 <_printf_float+0xf0>
 801c79e:	464b      	mov	r3, r9
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	bfbc      	itt	lt
 801c7a4:	232d      	movlt	r3, #45	; 0x2d
 801c7a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c7aa:	487f      	ldr	r0, [pc, #508]	; (801c9a8 <_printf_float+0x2e8>)
 801c7ac:	4b7f      	ldr	r3, [pc, #508]	; (801c9ac <_printf_float+0x2ec>)
 801c7ae:	e7d1      	b.n	801c754 <_printf_float+0x94>
 801c7b0:	6863      	ldr	r3, [r4, #4]
 801c7b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c7b6:	9206      	str	r2, [sp, #24]
 801c7b8:	1c5a      	adds	r2, r3, #1
 801c7ba:	d13f      	bne.n	801c83c <_printf_float+0x17c>
 801c7bc:	2306      	movs	r3, #6
 801c7be:	6063      	str	r3, [r4, #4]
 801c7c0:	9b05      	ldr	r3, [sp, #20]
 801c7c2:	6861      	ldr	r1, [r4, #4]
 801c7c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	9303      	str	r3, [sp, #12]
 801c7cc:	ab0a      	add	r3, sp, #40	; 0x28
 801c7ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c7d2:	ab09      	add	r3, sp, #36	; 0x24
 801c7d4:	ec49 8b10 	vmov	d0, r8, r9
 801c7d8:	9300      	str	r3, [sp, #0]
 801c7da:	6022      	str	r2, [r4, #0]
 801c7dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c7e0:	4628      	mov	r0, r5
 801c7e2:	f7ff fecd 	bl	801c580 <__cvt>
 801c7e6:	9b06      	ldr	r3, [sp, #24]
 801c7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c7ea:	2b47      	cmp	r3, #71	; 0x47
 801c7ec:	4680      	mov	r8, r0
 801c7ee:	d108      	bne.n	801c802 <_printf_float+0x142>
 801c7f0:	1cc8      	adds	r0, r1, #3
 801c7f2:	db02      	blt.n	801c7fa <_printf_float+0x13a>
 801c7f4:	6863      	ldr	r3, [r4, #4]
 801c7f6:	4299      	cmp	r1, r3
 801c7f8:	dd41      	ble.n	801c87e <_printf_float+0x1be>
 801c7fa:	f1ab 0b02 	sub.w	fp, fp, #2
 801c7fe:	fa5f fb8b 	uxtb.w	fp, fp
 801c802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c806:	d820      	bhi.n	801c84a <_printf_float+0x18a>
 801c808:	3901      	subs	r1, #1
 801c80a:	465a      	mov	r2, fp
 801c80c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c810:	9109      	str	r1, [sp, #36]	; 0x24
 801c812:	f7ff ff17 	bl	801c644 <__exponent>
 801c816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c818:	1813      	adds	r3, r2, r0
 801c81a:	2a01      	cmp	r2, #1
 801c81c:	4681      	mov	r9, r0
 801c81e:	6123      	str	r3, [r4, #16]
 801c820:	dc02      	bgt.n	801c828 <_printf_float+0x168>
 801c822:	6822      	ldr	r2, [r4, #0]
 801c824:	07d2      	lsls	r2, r2, #31
 801c826:	d501      	bpl.n	801c82c <_printf_float+0x16c>
 801c828:	3301      	adds	r3, #1
 801c82a:	6123      	str	r3, [r4, #16]
 801c82c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c830:	2b00      	cmp	r3, #0
 801c832:	d09c      	beq.n	801c76e <_printf_float+0xae>
 801c834:	232d      	movs	r3, #45	; 0x2d
 801c836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c83a:	e798      	b.n	801c76e <_printf_float+0xae>
 801c83c:	9a06      	ldr	r2, [sp, #24]
 801c83e:	2a47      	cmp	r2, #71	; 0x47
 801c840:	d1be      	bne.n	801c7c0 <_printf_float+0x100>
 801c842:	2b00      	cmp	r3, #0
 801c844:	d1bc      	bne.n	801c7c0 <_printf_float+0x100>
 801c846:	2301      	movs	r3, #1
 801c848:	e7b9      	b.n	801c7be <_printf_float+0xfe>
 801c84a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c84e:	d118      	bne.n	801c882 <_printf_float+0x1c2>
 801c850:	2900      	cmp	r1, #0
 801c852:	6863      	ldr	r3, [r4, #4]
 801c854:	dd0b      	ble.n	801c86e <_printf_float+0x1ae>
 801c856:	6121      	str	r1, [r4, #16]
 801c858:	b913      	cbnz	r3, 801c860 <_printf_float+0x1a0>
 801c85a:	6822      	ldr	r2, [r4, #0]
 801c85c:	07d0      	lsls	r0, r2, #31
 801c85e:	d502      	bpl.n	801c866 <_printf_float+0x1a6>
 801c860:	3301      	adds	r3, #1
 801c862:	440b      	add	r3, r1
 801c864:	6123      	str	r3, [r4, #16]
 801c866:	65a1      	str	r1, [r4, #88]	; 0x58
 801c868:	f04f 0900 	mov.w	r9, #0
 801c86c:	e7de      	b.n	801c82c <_printf_float+0x16c>
 801c86e:	b913      	cbnz	r3, 801c876 <_printf_float+0x1b6>
 801c870:	6822      	ldr	r2, [r4, #0]
 801c872:	07d2      	lsls	r2, r2, #31
 801c874:	d501      	bpl.n	801c87a <_printf_float+0x1ba>
 801c876:	3302      	adds	r3, #2
 801c878:	e7f4      	b.n	801c864 <_printf_float+0x1a4>
 801c87a:	2301      	movs	r3, #1
 801c87c:	e7f2      	b.n	801c864 <_printf_float+0x1a4>
 801c87e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c884:	4299      	cmp	r1, r3
 801c886:	db05      	blt.n	801c894 <_printf_float+0x1d4>
 801c888:	6823      	ldr	r3, [r4, #0]
 801c88a:	6121      	str	r1, [r4, #16]
 801c88c:	07d8      	lsls	r0, r3, #31
 801c88e:	d5ea      	bpl.n	801c866 <_printf_float+0x1a6>
 801c890:	1c4b      	adds	r3, r1, #1
 801c892:	e7e7      	b.n	801c864 <_printf_float+0x1a4>
 801c894:	2900      	cmp	r1, #0
 801c896:	bfd4      	ite	le
 801c898:	f1c1 0202 	rsble	r2, r1, #2
 801c89c:	2201      	movgt	r2, #1
 801c89e:	4413      	add	r3, r2
 801c8a0:	e7e0      	b.n	801c864 <_printf_float+0x1a4>
 801c8a2:	6823      	ldr	r3, [r4, #0]
 801c8a4:	055a      	lsls	r2, r3, #21
 801c8a6:	d407      	bmi.n	801c8b8 <_printf_float+0x1f8>
 801c8a8:	6923      	ldr	r3, [r4, #16]
 801c8aa:	4642      	mov	r2, r8
 801c8ac:	4631      	mov	r1, r6
 801c8ae:	4628      	mov	r0, r5
 801c8b0:	47b8      	blx	r7
 801c8b2:	3001      	adds	r0, #1
 801c8b4:	d12c      	bne.n	801c910 <_printf_float+0x250>
 801c8b6:	e764      	b.n	801c782 <_printf_float+0xc2>
 801c8b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c8bc:	f240 80e0 	bls.w	801ca80 <_printf_float+0x3c0>
 801c8c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c8c4:	2200      	movs	r2, #0
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	f7e4 f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 801c8cc:	2800      	cmp	r0, #0
 801c8ce:	d034      	beq.n	801c93a <_printf_float+0x27a>
 801c8d0:	4a37      	ldr	r2, [pc, #220]	; (801c9b0 <_printf_float+0x2f0>)
 801c8d2:	2301      	movs	r3, #1
 801c8d4:	4631      	mov	r1, r6
 801c8d6:	4628      	mov	r0, r5
 801c8d8:	47b8      	blx	r7
 801c8da:	3001      	adds	r0, #1
 801c8dc:	f43f af51 	beq.w	801c782 <_printf_float+0xc2>
 801c8e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	db02      	blt.n	801c8ee <_printf_float+0x22e>
 801c8e8:	6823      	ldr	r3, [r4, #0]
 801c8ea:	07d8      	lsls	r0, r3, #31
 801c8ec:	d510      	bpl.n	801c910 <_printf_float+0x250>
 801c8ee:	ee18 3a10 	vmov	r3, s16
 801c8f2:	4652      	mov	r2, sl
 801c8f4:	4631      	mov	r1, r6
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	47b8      	blx	r7
 801c8fa:	3001      	adds	r0, #1
 801c8fc:	f43f af41 	beq.w	801c782 <_printf_float+0xc2>
 801c900:	f04f 0800 	mov.w	r8, #0
 801c904:	f104 091a 	add.w	r9, r4, #26
 801c908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c90a:	3b01      	subs	r3, #1
 801c90c:	4543      	cmp	r3, r8
 801c90e:	dc09      	bgt.n	801c924 <_printf_float+0x264>
 801c910:	6823      	ldr	r3, [r4, #0]
 801c912:	079b      	lsls	r3, r3, #30
 801c914:	f100 8105 	bmi.w	801cb22 <_printf_float+0x462>
 801c918:	68e0      	ldr	r0, [r4, #12]
 801c91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c91c:	4298      	cmp	r0, r3
 801c91e:	bfb8      	it	lt
 801c920:	4618      	movlt	r0, r3
 801c922:	e730      	b.n	801c786 <_printf_float+0xc6>
 801c924:	2301      	movs	r3, #1
 801c926:	464a      	mov	r2, r9
 801c928:	4631      	mov	r1, r6
 801c92a:	4628      	mov	r0, r5
 801c92c:	47b8      	blx	r7
 801c92e:	3001      	adds	r0, #1
 801c930:	f43f af27 	beq.w	801c782 <_printf_float+0xc2>
 801c934:	f108 0801 	add.w	r8, r8, #1
 801c938:	e7e6      	b.n	801c908 <_printf_float+0x248>
 801c93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	dc39      	bgt.n	801c9b4 <_printf_float+0x2f4>
 801c940:	4a1b      	ldr	r2, [pc, #108]	; (801c9b0 <_printf_float+0x2f0>)
 801c942:	2301      	movs	r3, #1
 801c944:	4631      	mov	r1, r6
 801c946:	4628      	mov	r0, r5
 801c948:	47b8      	blx	r7
 801c94a:	3001      	adds	r0, #1
 801c94c:	f43f af19 	beq.w	801c782 <_printf_float+0xc2>
 801c950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c954:	4313      	orrs	r3, r2
 801c956:	d102      	bne.n	801c95e <_printf_float+0x29e>
 801c958:	6823      	ldr	r3, [r4, #0]
 801c95a:	07d9      	lsls	r1, r3, #31
 801c95c:	d5d8      	bpl.n	801c910 <_printf_float+0x250>
 801c95e:	ee18 3a10 	vmov	r3, s16
 801c962:	4652      	mov	r2, sl
 801c964:	4631      	mov	r1, r6
 801c966:	4628      	mov	r0, r5
 801c968:	47b8      	blx	r7
 801c96a:	3001      	adds	r0, #1
 801c96c:	f43f af09 	beq.w	801c782 <_printf_float+0xc2>
 801c970:	f04f 0900 	mov.w	r9, #0
 801c974:	f104 0a1a 	add.w	sl, r4, #26
 801c978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c97a:	425b      	negs	r3, r3
 801c97c:	454b      	cmp	r3, r9
 801c97e:	dc01      	bgt.n	801c984 <_printf_float+0x2c4>
 801c980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c982:	e792      	b.n	801c8aa <_printf_float+0x1ea>
 801c984:	2301      	movs	r3, #1
 801c986:	4652      	mov	r2, sl
 801c988:	4631      	mov	r1, r6
 801c98a:	4628      	mov	r0, r5
 801c98c:	47b8      	blx	r7
 801c98e:	3001      	adds	r0, #1
 801c990:	f43f aef7 	beq.w	801c782 <_printf_float+0xc2>
 801c994:	f109 0901 	add.w	r9, r9, #1
 801c998:	e7ee      	b.n	801c978 <_printf_float+0x2b8>
 801c99a:	bf00      	nop
 801c99c:	7fefffff 	.word	0x7fefffff
 801c9a0:	0801f3bc 	.word	0x0801f3bc
 801c9a4:	0801f3c0 	.word	0x0801f3c0
 801c9a8:	0801f3c8 	.word	0x0801f3c8
 801c9ac:	0801f3c4 	.word	0x0801f3c4
 801c9b0:	0801f3cc 	.word	0x0801f3cc
 801c9b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c9b8:	429a      	cmp	r2, r3
 801c9ba:	bfa8      	it	ge
 801c9bc:	461a      	movge	r2, r3
 801c9be:	2a00      	cmp	r2, #0
 801c9c0:	4691      	mov	r9, r2
 801c9c2:	dc37      	bgt.n	801ca34 <_printf_float+0x374>
 801c9c4:	f04f 0b00 	mov.w	fp, #0
 801c9c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c9cc:	f104 021a 	add.w	r2, r4, #26
 801c9d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c9d2:	9305      	str	r3, [sp, #20]
 801c9d4:	eba3 0309 	sub.w	r3, r3, r9
 801c9d8:	455b      	cmp	r3, fp
 801c9da:	dc33      	bgt.n	801ca44 <_printf_float+0x384>
 801c9dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	db3b      	blt.n	801ca5c <_printf_float+0x39c>
 801c9e4:	6823      	ldr	r3, [r4, #0]
 801c9e6:	07da      	lsls	r2, r3, #31
 801c9e8:	d438      	bmi.n	801ca5c <_printf_float+0x39c>
 801c9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9ec:	9a05      	ldr	r2, [sp, #20]
 801c9ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c9f0:	1a9a      	subs	r2, r3, r2
 801c9f2:	eba3 0901 	sub.w	r9, r3, r1
 801c9f6:	4591      	cmp	r9, r2
 801c9f8:	bfa8      	it	ge
 801c9fa:	4691      	movge	r9, r2
 801c9fc:	f1b9 0f00 	cmp.w	r9, #0
 801ca00:	dc35      	bgt.n	801ca6e <_printf_float+0x3ae>
 801ca02:	f04f 0800 	mov.w	r8, #0
 801ca06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ca0a:	f104 0a1a 	add.w	sl, r4, #26
 801ca0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ca12:	1a9b      	subs	r3, r3, r2
 801ca14:	eba3 0309 	sub.w	r3, r3, r9
 801ca18:	4543      	cmp	r3, r8
 801ca1a:	f77f af79 	ble.w	801c910 <_printf_float+0x250>
 801ca1e:	2301      	movs	r3, #1
 801ca20:	4652      	mov	r2, sl
 801ca22:	4631      	mov	r1, r6
 801ca24:	4628      	mov	r0, r5
 801ca26:	47b8      	blx	r7
 801ca28:	3001      	adds	r0, #1
 801ca2a:	f43f aeaa 	beq.w	801c782 <_printf_float+0xc2>
 801ca2e:	f108 0801 	add.w	r8, r8, #1
 801ca32:	e7ec      	b.n	801ca0e <_printf_float+0x34e>
 801ca34:	4613      	mov	r3, r2
 801ca36:	4631      	mov	r1, r6
 801ca38:	4642      	mov	r2, r8
 801ca3a:	4628      	mov	r0, r5
 801ca3c:	47b8      	blx	r7
 801ca3e:	3001      	adds	r0, #1
 801ca40:	d1c0      	bne.n	801c9c4 <_printf_float+0x304>
 801ca42:	e69e      	b.n	801c782 <_printf_float+0xc2>
 801ca44:	2301      	movs	r3, #1
 801ca46:	4631      	mov	r1, r6
 801ca48:	4628      	mov	r0, r5
 801ca4a:	9205      	str	r2, [sp, #20]
 801ca4c:	47b8      	blx	r7
 801ca4e:	3001      	adds	r0, #1
 801ca50:	f43f ae97 	beq.w	801c782 <_printf_float+0xc2>
 801ca54:	9a05      	ldr	r2, [sp, #20]
 801ca56:	f10b 0b01 	add.w	fp, fp, #1
 801ca5a:	e7b9      	b.n	801c9d0 <_printf_float+0x310>
 801ca5c:	ee18 3a10 	vmov	r3, s16
 801ca60:	4652      	mov	r2, sl
 801ca62:	4631      	mov	r1, r6
 801ca64:	4628      	mov	r0, r5
 801ca66:	47b8      	blx	r7
 801ca68:	3001      	adds	r0, #1
 801ca6a:	d1be      	bne.n	801c9ea <_printf_float+0x32a>
 801ca6c:	e689      	b.n	801c782 <_printf_float+0xc2>
 801ca6e:	9a05      	ldr	r2, [sp, #20]
 801ca70:	464b      	mov	r3, r9
 801ca72:	4442      	add	r2, r8
 801ca74:	4631      	mov	r1, r6
 801ca76:	4628      	mov	r0, r5
 801ca78:	47b8      	blx	r7
 801ca7a:	3001      	adds	r0, #1
 801ca7c:	d1c1      	bne.n	801ca02 <_printf_float+0x342>
 801ca7e:	e680      	b.n	801c782 <_printf_float+0xc2>
 801ca80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ca82:	2a01      	cmp	r2, #1
 801ca84:	dc01      	bgt.n	801ca8a <_printf_float+0x3ca>
 801ca86:	07db      	lsls	r3, r3, #31
 801ca88:	d538      	bpl.n	801cafc <_printf_float+0x43c>
 801ca8a:	2301      	movs	r3, #1
 801ca8c:	4642      	mov	r2, r8
 801ca8e:	4631      	mov	r1, r6
 801ca90:	4628      	mov	r0, r5
 801ca92:	47b8      	blx	r7
 801ca94:	3001      	adds	r0, #1
 801ca96:	f43f ae74 	beq.w	801c782 <_printf_float+0xc2>
 801ca9a:	ee18 3a10 	vmov	r3, s16
 801ca9e:	4652      	mov	r2, sl
 801caa0:	4631      	mov	r1, r6
 801caa2:	4628      	mov	r0, r5
 801caa4:	47b8      	blx	r7
 801caa6:	3001      	adds	r0, #1
 801caa8:	f43f ae6b 	beq.w	801c782 <_printf_float+0xc2>
 801caac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cab0:	2200      	movs	r2, #0
 801cab2:	2300      	movs	r3, #0
 801cab4:	f7e4 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 801cab8:	b9d8      	cbnz	r0, 801caf2 <_printf_float+0x432>
 801caba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cabc:	f108 0201 	add.w	r2, r8, #1
 801cac0:	3b01      	subs	r3, #1
 801cac2:	4631      	mov	r1, r6
 801cac4:	4628      	mov	r0, r5
 801cac6:	47b8      	blx	r7
 801cac8:	3001      	adds	r0, #1
 801caca:	d10e      	bne.n	801caea <_printf_float+0x42a>
 801cacc:	e659      	b.n	801c782 <_printf_float+0xc2>
 801cace:	2301      	movs	r3, #1
 801cad0:	4652      	mov	r2, sl
 801cad2:	4631      	mov	r1, r6
 801cad4:	4628      	mov	r0, r5
 801cad6:	47b8      	blx	r7
 801cad8:	3001      	adds	r0, #1
 801cada:	f43f ae52 	beq.w	801c782 <_printf_float+0xc2>
 801cade:	f108 0801 	add.w	r8, r8, #1
 801cae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cae4:	3b01      	subs	r3, #1
 801cae6:	4543      	cmp	r3, r8
 801cae8:	dcf1      	bgt.n	801cace <_printf_float+0x40e>
 801caea:	464b      	mov	r3, r9
 801caec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801caf0:	e6dc      	b.n	801c8ac <_printf_float+0x1ec>
 801caf2:	f04f 0800 	mov.w	r8, #0
 801caf6:	f104 0a1a 	add.w	sl, r4, #26
 801cafa:	e7f2      	b.n	801cae2 <_printf_float+0x422>
 801cafc:	2301      	movs	r3, #1
 801cafe:	4642      	mov	r2, r8
 801cb00:	e7df      	b.n	801cac2 <_printf_float+0x402>
 801cb02:	2301      	movs	r3, #1
 801cb04:	464a      	mov	r2, r9
 801cb06:	4631      	mov	r1, r6
 801cb08:	4628      	mov	r0, r5
 801cb0a:	47b8      	blx	r7
 801cb0c:	3001      	adds	r0, #1
 801cb0e:	f43f ae38 	beq.w	801c782 <_printf_float+0xc2>
 801cb12:	f108 0801 	add.w	r8, r8, #1
 801cb16:	68e3      	ldr	r3, [r4, #12]
 801cb18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cb1a:	1a5b      	subs	r3, r3, r1
 801cb1c:	4543      	cmp	r3, r8
 801cb1e:	dcf0      	bgt.n	801cb02 <_printf_float+0x442>
 801cb20:	e6fa      	b.n	801c918 <_printf_float+0x258>
 801cb22:	f04f 0800 	mov.w	r8, #0
 801cb26:	f104 0919 	add.w	r9, r4, #25
 801cb2a:	e7f4      	b.n	801cb16 <_printf_float+0x456>

0801cb2c <_printf_common>:
 801cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb30:	4616      	mov	r6, r2
 801cb32:	4699      	mov	r9, r3
 801cb34:	688a      	ldr	r2, [r1, #8]
 801cb36:	690b      	ldr	r3, [r1, #16]
 801cb38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cb3c:	4293      	cmp	r3, r2
 801cb3e:	bfb8      	it	lt
 801cb40:	4613      	movlt	r3, r2
 801cb42:	6033      	str	r3, [r6, #0]
 801cb44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cb48:	4607      	mov	r7, r0
 801cb4a:	460c      	mov	r4, r1
 801cb4c:	b10a      	cbz	r2, 801cb52 <_printf_common+0x26>
 801cb4e:	3301      	adds	r3, #1
 801cb50:	6033      	str	r3, [r6, #0]
 801cb52:	6823      	ldr	r3, [r4, #0]
 801cb54:	0699      	lsls	r1, r3, #26
 801cb56:	bf42      	ittt	mi
 801cb58:	6833      	ldrmi	r3, [r6, #0]
 801cb5a:	3302      	addmi	r3, #2
 801cb5c:	6033      	strmi	r3, [r6, #0]
 801cb5e:	6825      	ldr	r5, [r4, #0]
 801cb60:	f015 0506 	ands.w	r5, r5, #6
 801cb64:	d106      	bne.n	801cb74 <_printf_common+0x48>
 801cb66:	f104 0a19 	add.w	sl, r4, #25
 801cb6a:	68e3      	ldr	r3, [r4, #12]
 801cb6c:	6832      	ldr	r2, [r6, #0]
 801cb6e:	1a9b      	subs	r3, r3, r2
 801cb70:	42ab      	cmp	r3, r5
 801cb72:	dc26      	bgt.n	801cbc2 <_printf_common+0x96>
 801cb74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cb78:	1e13      	subs	r3, r2, #0
 801cb7a:	6822      	ldr	r2, [r4, #0]
 801cb7c:	bf18      	it	ne
 801cb7e:	2301      	movne	r3, #1
 801cb80:	0692      	lsls	r2, r2, #26
 801cb82:	d42b      	bmi.n	801cbdc <_printf_common+0xb0>
 801cb84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cb88:	4649      	mov	r1, r9
 801cb8a:	4638      	mov	r0, r7
 801cb8c:	47c0      	blx	r8
 801cb8e:	3001      	adds	r0, #1
 801cb90:	d01e      	beq.n	801cbd0 <_printf_common+0xa4>
 801cb92:	6823      	ldr	r3, [r4, #0]
 801cb94:	68e5      	ldr	r5, [r4, #12]
 801cb96:	6832      	ldr	r2, [r6, #0]
 801cb98:	f003 0306 	and.w	r3, r3, #6
 801cb9c:	2b04      	cmp	r3, #4
 801cb9e:	bf08      	it	eq
 801cba0:	1aad      	subeq	r5, r5, r2
 801cba2:	68a3      	ldr	r3, [r4, #8]
 801cba4:	6922      	ldr	r2, [r4, #16]
 801cba6:	bf0c      	ite	eq
 801cba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cbac:	2500      	movne	r5, #0
 801cbae:	4293      	cmp	r3, r2
 801cbb0:	bfc4      	itt	gt
 801cbb2:	1a9b      	subgt	r3, r3, r2
 801cbb4:	18ed      	addgt	r5, r5, r3
 801cbb6:	2600      	movs	r6, #0
 801cbb8:	341a      	adds	r4, #26
 801cbba:	42b5      	cmp	r5, r6
 801cbbc:	d11a      	bne.n	801cbf4 <_printf_common+0xc8>
 801cbbe:	2000      	movs	r0, #0
 801cbc0:	e008      	b.n	801cbd4 <_printf_common+0xa8>
 801cbc2:	2301      	movs	r3, #1
 801cbc4:	4652      	mov	r2, sl
 801cbc6:	4649      	mov	r1, r9
 801cbc8:	4638      	mov	r0, r7
 801cbca:	47c0      	blx	r8
 801cbcc:	3001      	adds	r0, #1
 801cbce:	d103      	bne.n	801cbd8 <_printf_common+0xac>
 801cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 801cbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbd8:	3501      	adds	r5, #1
 801cbda:	e7c6      	b.n	801cb6a <_printf_common+0x3e>
 801cbdc:	18e1      	adds	r1, r4, r3
 801cbde:	1c5a      	adds	r2, r3, #1
 801cbe0:	2030      	movs	r0, #48	; 0x30
 801cbe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cbe6:	4422      	add	r2, r4
 801cbe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cbec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cbf0:	3302      	adds	r3, #2
 801cbf2:	e7c7      	b.n	801cb84 <_printf_common+0x58>
 801cbf4:	2301      	movs	r3, #1
 801cbf6:	4622      	mov	r2, r4
 801cbf8:	4649      	mov	r1, r9
 801cbfa:	4638      	mov	r0, r7
 801cbfc:	47c0      	blx	r8
 801cbfe:	3001      	adds	r0, #1
 801cc00:	d0e6      	beq.n	801cbd0 <_printf_common+0xa4>
 801cc02:	3601      	adds	r6, #1
 801cc04:	e7d9      	b.n	801cbba <_printf_common+0x8e>
	...

0801cc08 <_printf_i>:
 801cc08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cc0c:	7e0f      	ldrb	r7, [r1, #24]
 801cc0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cc10:	2f78      	cmp	r7, #120	; 0x78
 801cc12:	4691      	mov	r9, r2
 801cc14:	4680      	mov	r8, r0
 801cc16:	460c      	mov	r4, r1
 801cc18:	469a      	mov	sl, r3
 801cc1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cc1e:	d807      	bhi.n	801cc30 <_printf_i+0x28>
 801cc20:	2f62      	cmp	r7, #98	; 0x62
 801cc22:	d80a      	bhi.n	801cc3a <_printf_i+0x32>
 801cc24:	2f00      	cmp	r7, #0
 801cc26:	f000 80d8 	beq.w	801cdda <_printf_i+0x1d2>
 801cc2a:	2f58      	cmp	r7, #88	; 0x58
 801cc2c:	f000 80a3 	beq.w	801cd76 <_printf_i+0x16e>
 801cc30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cc34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cc38:	e03a      	b.n	801ccb0 <_printf_i+0xa8>
 801cc3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cc3e:	2b15      	cmp	r3, #21
 801cc40:	d8f6      	bhi.n	801cc30 <_printf_i+0x28>
 801cc42:	a101      	add	r1, pc, #4	; (adr r1, 801cc48 <_printf_i+0x40>)
 801cc44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cc48:	0801cca1 	.word	0x0801cca1
 801cc4c:	0801ccb5 	.word	0x0801ccb5
 801cc50:	0801cc31 	.word	0x0801cc31
 801cc54:	0801cc31 	.word	0x0801cc31
 801cc58:	0801cc31 	.word	0x0801cc31
 801cc5c:	0801cc31 	.word	0x0801cc31
 801cc60:	0801ccb5 	.word	0x0801ccb5
 801cc64:	0801cc31 	.word	0x0801cc31
 801cc68:	0801cc31 	.word	0x0801cc31
 801cc6c:	0801cc31 	.word	0x0801cc31
 801cc70:	0801cc31 	.word	0x0801cc31
 801cc74:	0801cdc1 	.word	0x0801cdc1
 801cc78:	0801cce5 	.word	0x0801cce5
 801cc7c:	0801cda3 	.word	0x0801cda3
 801cc80:	0801cc31 	.word	0x0801cc31
 801cc84:	0801cc31 	.word	0x0801cc31
 801cc88:	0801cde3 	.word	0x0801cde3
 801cc8c:	0801cc31 	.word	0x0801cc31
 801cc90:	0801cce5 	.word	0x0801cce5
 801cc94:	0801cc31 	.word	0x0801cc31
 801cc98:	0801cc31 	.word	0x0801cc31
 801cc9c:	0801cdab 	.word	0x0801cdab
 801cca0:	682b      	ldr	r3, [r5, #0]
 801cca2:	1d1a      	adds	r2, r3, #4
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	602a      	str	r2, [r5, #0]
 801cca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ccac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ccb0:	2301      	movs	r3, #1
 801ccb2:	e0a3      	b.n	801cdfc <_printf_i+0x1f4>
 801ccb4:	6820      	ldr	r0, [r4, #0]
 801ccb6:	6829      	ldr	r1, [r5, #0]
 801ccb8:	0606      	lsls	r6, r0, #24
 801ccba:	f101 0304 	add.w	r3, r1, #4
 801ccbe:	d50a      	bpl.n	801ccd6 <_printf_i+0xce>
 801ccc0:	680e      	ldr	r6, [r1, #0]
 801ccc2:	602b      	str	r3, [r5, #0]
 801ccc4:	2e00      	cmp	r6, #0
 801ccc6:	da03      	bge.n	801ccd0 <_printf_i+0xc8>
 801ccc8:	232d      	movs	r3, #45	; 0x2d
 801ccca:	4276      	negs	r6, r6
 801cccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ccd0:	485e      	ldr	r0, [pc, #376]	; (801ce4c <_printf_i+0x244>)
 801ccd2:	230a      	movs	r3, #10
 801ccd4:	e019      	b.n	801cd0a <_printf_i+0x102>
 801ccd6:	680e      	ldr	r6, [r1, #0]
 801ccd8:	602b      	str	r3, [r5, #0]
 801ccda:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ccde:	bf18      	it	ne
 801cce0:	b236      	sxthne	r6, r6
 801cce2:	e7ef      	b.n	801ccc4 <_printf_i+0xbc>
 801cce4:	682b      	ldr	r3, [r5, #0]
 801cce6:	6820      	ldr	r0, [r4, #0]
 801cce8:	1d19      	adds	r1, r3, #4
 801ccea:	6029      	str	r1, [r5, #0]
 801ccec:	0601      	lsls	r1, r0, #24
 801ccee:	d501      	bpl.n	801ccf4 <_printf_i+0xec>
 801ccf0:	681e      	ldr	r6, [r3, #0]
 801ccf2:	e002      	b.n	801ccfa <_printf_i+0xf2>
 801ccf4:	0646      	lsls	r6, r0, #25
 801ccf6:	d5fb      	bpl.n	801ccf0 <_printf_i+0xe8>
 801ccf8:	881e      	ldrh	r6, [r3, #0]
 801ccfa:	4854      	ldr	r0, [pc, #336]	; (801ce4c <_printf_i+0x244>)
 801ccfc:	2f6f      	cmp	r7, #111	; 0x6f
 801ccfe:	bf0c      	ite	eq
 801cd00:	2308      	moveq	r3, #8
 801cd02:	230a      	movne	r3, #10
 801cd04:	2100      	movs	r1, #0
 801cd06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cd0a:	6865      	ldr	r5, [r4, #4]
 801cd0c:	60a5      	str	r5, [r4, #8]
 801cd0e:	2d00      	cmp	r5, #0
 801cd10:	bfa2      	ittt	ge
 801cd12:	6821      	ldrge	r1, [r4, #0]
 801cd14:	f021 0104 	bicge.w	r1, r1, #4
 801cd18:	6021      	strge	r1, [r4, #0]
 801cd1a:	b90e      	cbnz	r6, 801cd20 <_printf_i+0x118>
 801cd1c:	2d00      	cmp	r5, #0
 801cd1e:	d04d      	beq.n	801cdbc <_printf_i+0x1b4>
 801cd20:	4615      	mov	r5, r2
 801cd22:	fbb6 f1f3 	udiv	r1, r6, r3
 801cd26:	fb03 6711 	mls	r7, r3, r1, r6
 801cd2a:	5dc7      	ldrb	r7, [r0, r7]
 801cd2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cd30:	4637      	mov	r7, r6
 801cd32:	42bb      	cmp	r3, r7
 801cd34:	460e      	mov	r6, r1
 801cd36:	d9f4      	bls.n	801cd22 <_printf_i+0x11a>
 801cd38:	2b08      	cmp	r3, #8
 801cd3a:	d10b      	bne.n	801cd54 <_printf_i+0x14c>
 801cd3c:	6823      	ldr	r3, [r4, #0]
 801cd3e:	07de      	lsls	r6, r3, #31
 801cd40:	d508      	bpl.n	801cd54 <_printf_i+0x14c>
 801cd42:	6923      	ldr	r3, [r4, #16]
 801cd44:	6861      	ldr	r1, [r4, #4]
 801cd46:	4299      	cmp	r1, r3
 801cd48:	bfde      	ittt	le
 801cd4a:	2330      	movle	r3, #48	; 0x30
 801cd4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cd50:	f105 35ff 	addle.w	r5, r5, #4294967295
 801cd54:	1b52      	subs	r2, r2, r5
 801cd56:	6122      	str	r2, [r4, #16]
 801cd58:	f8cd a000 	str.w	sl, [sp]
 801cd5c:	464b      	mov	r3, r9
 801cd5e:	aa03      	add	r2, sp, #12
 801cd60:	4621      	mov	r1, r4
 801cd62:	4640      	mov	r0, r8
 801cd64:	f7ff fee2 	bl	801cb2c <_printf_common>
 801cd68:	3001      	adds	r0, #1
 801cd6a:	d14c      	bne.n	801ce06 <_printf_i+0x1fe>
 801cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 801cd70:	b004      	add	sp, #16
 801cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd76:	4835      	ldr	r0, [pc, #212]	; (801ce4c <_printf_i+0x244>)
 801cd78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801cd7c:	6829      	ldr	r1, [r5, #0]
 801cd7e:	6823      	ldr	r3, [r4, #0]
 801cd80:	f851 6b04 	ldr.w	r6, [r1], #4
 801cd84:	6029      	str	r1, [r5, #0]
 801cd86:	061d      	lsls	r5, r3, #24
 801cd88:	d514      	bpl.n	801cdb4 <_printf_i+0x1ac>
 801cd8a:	07df      	lsls	r7, r3, #31
 801cd8c:	bf44      	itt	mi
 801cd8e:	f043 0320 	orrmi.w	r3, r3, #32
 801cd92:	6023      	strmi	r3, [r4, #0]
 801cd94:	b91e      	cbnz	r6, 801cd9e <_printf_i+0x196>
 801cd96:	6823      	ldr	r3, [r4, #0]
 801cd98:	f023 0320 	bic.w	r3, r3, #32
 801cd9c:	6023      	str	r3, [r4, #0]
 801cd9e:	2310      	movs	r3, #16
 801cda0:	e7b0      	b.n	801cd04 <_printf_i+0xfc>
 801cda2:	6823      	ldr	r3, [r4, #0]
 801cda4:	f043 0320 	orr.w	r3, r3, #32
 801cda8:	6023      	str	r3, [r4, #0]
 801cdaa:	2378      	movs	r3, #120	; 0x78
 801cdac:	4828      	ldr	r0, [pc, #160]	; (801ce50 <_printf_i+0x248>)
 801cdae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cdb2:	e7e3      	b.n	801cd7c <_printf_i+0x174>
 801cdb4:	0659      	lsls	r1, r3, #25
 801cdb6:	bf48      	it	mi
 801cdb8:	b2b6      	uxthmi	r6, r6
 801cdba:	e7e6      	b.n	801cd8a <_printf_i+0x182>
 801cdbc:	4615      	mov	r5, r2
 801cdbe:	e7bb      	b.n	801cd38 <_printf_i+0x130>
 801cdc0:	682b      	ldr	r3, [r5, #0]
 801cdc2:	6826      	ldr	r6, [r4, #0]
 801cdc4:	6961      	ldr	r1, [r4, #20]
 801cdc6:	1d18      	adds	r0, r3, #4
 801cdc8:	6028      	str	r0, [r5, #0]
 801cdca:	0635      	lsls	r5, r6, #24
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	d501      	bpl.n	801cdd4 <_printf_i+0x1cc>
 801cdd0:	6019      	str	r1, [r3, #0]
 801cdd2:	e002      	b.n	801cdda <_printf_i+0x1d2>
 801cdd4:	0670      	lsls	r0, r6, #25
 801cdd6:	d5fb      	bpl.n	801cdd0 <_printf_i+0x1c8>
 801cdd8:	8019      	strh	r1, [r3, #0]
 801cdda:	2300      	movs	r3, #0
 801cddc:	6123      	str	r3, [r4, #16]
 801cdde:	4615      	mov	r5, r2
 801cde0:	e7ba      	b.n	801cd58 <_printf_i+0x150>
 801cde2:	682b      	ldr	r3, [r5, #0]
 801cde4:	1d1a      	adds	r2, r3, #4
 801cde6:	602a      	str	r2, [r5, #0]
 801cde8:	681d      	ldr	r5, [r3, #0]
 801cdea:	6862      	ldr	r2, [r4, #4]
 801cdec:	2100      	movs	r1, #0
 801cdee:	4628      	mov	r0, r5
 801cdf0:	f7e3 f9f6 	bl	80001e0 <memchr>
 801cdf4:	b108      	cbz	r0, 801cdfa <_printf_i+0x1f2>
 801cdf6:	1b40      	subs	r0, r0, r5
 801cdf8:	6060      	str	r0, [r4, #4]
 801cdfa:	6863      	ldr	r3, [r4, #4]
 801cdfc:	6123      	str	r3, [r4, #16]
 801cdfe:	2300      	movs	r3, #0
 801ce00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ce04:	e7a8      	b.n	801cd58 <_printf_i+0x150>
 801ce06:	6923      	ldr	r3, [r4, #16]
 801ce08:	462a      	mov	r2, r5
 801ce0a:	4649      	mov	r1, r9
 801ce0c:	4640      	mov	r0, r8
 801ce0e:	47d0      	blx	sl
 801ce10:	3001      	adds	r0, #1
 801ce12:	d0ab      	beq.n	801cd6c <_printf_i+0x164>
 801ce14:	6823      	ldr	r3, [r4, #0]
 801ce16:	079b      	lsls	r3, r3, #30
 801ce18:	d413      	bmi.n	801ce42 <_printf_i+0x23a>
 801ce1a:	68e0      	ldr	r0, [r4, #12]
 801ce1c:	9b03      	ldr	r3, [sp, #12]
 801ce1e:	4298      	cmp	r0, r3
 801ce20:	bfb8      	it	lt
 801ce22:	4618      	movlt	r0, r3
 801ce24:	e7a4      	b.n	801cd70 <_printf_i+0x168>
 801ce26:	2301      	movs	r3, #1
 801ce28:	4632      	mov	r2, r6
 801ce2a:	4649      	mov	r1, r9
 801ce2c:	4640      	mov	r0, r8
 801ce2e:	47d0      	blx	sl
 801ce30:	3001      	adds	r0, #1
 801ce32:	d09b      	beq.n	801cd6c <_printf_i+0x164>
 801ce34:	3501      	adds	r5, #1
 801ce36:	68e3      	ldr	r3, [r4, #12]
 801ce38:	9903      	ldr	r1, [sp, #12]
 801ce3a:	1a5b      	subs	r3, r3, r1
 801ce3c:	42ab      	cmp	r3, r5
 801ce3e:	dcf2      	bgt.n	801ce26 <_printf_i+0x21e>
 801ce40:	e7eb      	b.n	801ce1a <_printf_i+0x212>
 801ce42:	2500      	movs	r5, #0
 801ce44:	f104 0619 	add.w	r6, r4, #25
 801ce48:	e7f5      	b.n	801ce36 <_printf_i+0x22e>
 801ce4a:	bf00      	nop
 801ce4c:	0801f3ce 	.word	0x0801f3ce
 801ce50:	0801f3df 	.word	0x0801f3df

0801ce54 <cleanup_glue>:
 801ce54:	b538      	push	{r3, r4, r5, lr}
 801ce56:	460c      	mov	r4, r1
 801ce58:	6809      	ldr	r1, [r1, #0]
 801ce5a:	4605      	mov	r5, r0
 801ce5c:	b109      	cbz	r1, 801ce62 <cleanup_glue+0xe>
 801ce5e:	f7ff fff9 	bl	801ce54 <cleanup_glue>
 801ce62:	4621      	mov	r1, r4
 801ce64:	4628      	mov	r0, r5
 801ce66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce6a:	f7ff baa9 	b.w	801c3c0 <_free_r>
	...

0801ce70 <_reclaim_reent>:
 801ce70:	4b2c      	ldr	r3, [pc, #176]	; (801cf24 <_reclaim_reent+0xb4>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	4283      	cmp	r3, r0
 801ce76:	b570      	push	{r4, r5, r6, lr}
 801ce78:	4604      	mov	r4, r0
 801ce7a:	d051      	beq.n	801cf20 <_reclaim_reent+0xb0>
 801ce7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ce7e:	b143      	cbz	r3, 801ce92 <_reclaim_reent+0x22>
 801ce80:	68db      	ldr	r3, [r3, #12]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d14a      	bne.n	801cf1c <_reclaim_reent+0xac>
 801ce86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce88:	6819      	ldr	r1, [r3, #0]
 801ce8a:	b111      	cbz	r1, 801ce92 <_reclaim_reent+0x22>
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	f7ff fa97 	bl	801c3c0 <_free_r>
 801ce92:	6961      	ldr	r1, [r4, #20]
 801ce94:	b111      	cbz	r1, 801ce9c <_reclaim_reent+0x2c>
 801ce96:	4620      	mov	r0, r4
 801ce98:	f7ff fa92 	bl	801c3c0 <_free_r>
 801ce9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ce9e:	b111      	cbz	r1, 801cea6 <_reclaim_reent+0x36>
 801cea0:	4620      	mov	r0, r4
 801cea2:	f7ff fa8d 	bl	801c3c0 <_free_r>
 801cea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cea8:	b111      	cbz	r1, 801ceb0 <_reclaim_reent+0x40>
 801ceaa:	4620      	mov	r0, r4
 801ceac:	f7ff fa88 	bl	801c3c0 <_free_r>
 801ceb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ceb2:	b111      	cbz	r1, 801ceba <_reclaim_reent+0x4a>
 801ceb4:	4620      	mov	r0, r4
 801ceb6:	f7ff fa83 	bl	801c3c0 <_free_r>
 801ceba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cebc:	b111      	cbz	r1, 801cec4 <_reclaim_reent+0x54>
 801cebe:	4620      	mov	r0, r4
 801cec0:	f7ff fa7e 	bl	801c3c0 <_free_r>
 801cec4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801cec6:	b111      	cbz	r1, 801cece <_reclaim_reent+0x5e>
 801cec8:	4620      	mov	r0, r4
 801ceca:	f7ff fa79 	bl	801c3c0 <_free_r>
 801cece:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ced0:	b111      	cbz	r1, 801ced8 <_reclaim_reent+0x68>
 801ced2:	4620      	mov	r0, r4
 801ced4:	f7ff fa74 	bl	801c3c0 <_free_r>
 801ced8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ceda:	b111      	cbz	r1, 801cee2 <_reclaim_reent+0x72>
 801cedc:	4620      	mov	r0, r4
 801cede:	f7ff fa6f 	bl	801c3c0 <_free_r>
 801cee2:	69a3      	ldr	r3, [r4, #24]
 801cee4:	b1e3      	cbz	r3, 801cf20 <_reclaim_reent+0xb0>
 801cee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cee8:	4620      	mov	r0, r4
 801ceea:	4798      	blx	r3
 801ceec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ceee:	b1b9      	cbz	r1, 801cf20 <_reclaim_reent+0xb0>
 801cef0:	4620      	mov	r0, r4
 801cef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cef6:	f7ff bfad 	b.w	801ce54 <cleanup_glue>
 801cefa:	5949      	ldr	r1, [r1, r5]
 801cefc:	b941      	cbnz	r1, 801cf10 <_reclaim_reent+0xa0>
 801cefe:	3504      	adds	r5, #4
 801cf00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf02:	2d80      	cmp	r5, #128	; 0x80
 801cf04:	68d9      	ldr	r1, [r3, #12]
 801cf06:	d1f8      	bne.n	801cefa <_reclaim_reent+0x8a>
 801cf08:	4620      	mov	r0, r4
 801cf0a:	f7ff fa59 	bl	801c3c0 <_free_r>
 801cf0e:	e7ba      	b.n	801ce86 <_reclaim_reent+0x16>
 801cf10:	680e      	ldr	r6, [r1, #0]
 801cf12:	4620      	mov	r0, r4
 801cf14:	f7ff fa54 	bl	801c3c0 <_free_r>
 801cf18:	4631      	mov	r1, r6
 801cf1a:	e7ef      	b.n	801cefc <_reclaim_reent+0x8c>
 801cf1c:	2500      	movs	r5, #0
 801cf1e:	e7ef      	b.n	801cf00 <_reclaim_reent+0x90>
 801cf20:	bd70      	pop	{r4, r5, r6, pc}
 801cf22:	bf00      	nop
 801cf24:	20000040 	.word	0x20000040

0801cf28 <_sbrk_r>:
 801cf28:	b538      	push	{r3, r4, r5, lr}
 801cf2a:	4d06      	ldr	r5, [pc, #24]	; (801cf44 <_sbrk_r+0x1c>)
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	4604      	mov	r4, r0
 801cf30:	4608      	mov	r0, r1
 801cf32:	602b      	str	r3, [r5, #0]
 801cf34:	f7f2 ff06 	bl	800fd44 <_sbrk>
 801cf38:	1c43      	adds	r3, r0, #1
 801cf3a:	d102      	bne.n	801cf42 <_sbrk_r+0x1a>
 801cf3c:	682b      	ldr	r3, [r5, #0]
 801cf3e:	b103      	cbz	r3, 801cf42 <_sbrk_r+0x1a>
 801cf40:	6023      	str	r3, [r4, #0]
 801cf42:	bd38      	pop	{r3, r4, r5, pc}
 801cf44:	20007480 	.word	0x20007480

0801cf48 <_raise_r>:
 801cf48:	291f      	cmp	r1, #31
 801cf4a:	b538      	push	{r3, r4, r5, lr}
 801cf4c:	4604      	mov	r4, r0
 801cf4e:	460d      	mov	r5, r1
 801cf50:	d904      	bls.n	801cf5c <_raise_r+0x14>
 801cf52:	2316      	movs	r3, #22
 801cf54:	6003      	str	r3, [r0, #0]
 801cf56:	f04f 30ff 	mov.w	r0, #4294967295
 801cf5a:	bd38      	pop	{r3, r4, r5, pc}
 801cf5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cf5e:	b112      	cbz	r2, 801cf66 <_raise_r+0x1e>
 801cf60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cf64:	b94b      	cbnz	r3, 801cf7a <_raise_r+0x32>
 801cf66:	4620      	mov	r0, r4
 801cf68:	f000 f830 	bl	801cfcc <_getpid_r>
 801cf6c:	462a      	mov	r2, r5
 801cf6e:	4601      	mov	r1, r0
 801cf70:	4620      	mov	r0, r4
 801cf72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf76:	f000 b817 	b.w	801cfa8 <_kill_r>
 801cf7a:	2b01      	cmp	r3, #1
 801cf7c:	d00a      	beq.n	801cf94 <_raise_r+0x4c>
 801cf7e:	1c59      	adds	r1, r3, #1
 801cf80:	d103      	bne.n	801cf8a <_raise_r+0x42>
 801cf82:	2316      	movs	r3, #22
 801cf84:	6003      	str	r3, [r0, #0]
 801cf86:	2001      	movs	r0, #1
 801cf88:	e7e7      	b.n	801cf5a <_raise_r+0x12>
 801cf8a:	2400      	movs	r4, #0
 801cf8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cf90:	4628      	mov	r0, r5
 801cf92:	4798      	blx	r3
 801cf94:	2000      	movs	r0, #0
 801cf96:	e7e0      	b.n	801cf5a <_raise_r+0x12>

0801cf98 <raise>:
 801cf98:	4b02      	ldr	r3, [pc, #8]	; (801cfa4 <raise+0xc>)
 801cf9a:	4601      	mov	r1, r0
 801cf9c:	6818      	ldr	r0, [r3, #0]
 801cf9e:	f7ff bfd3 	b.w	801cf48 <_raise_r>
 801cfa2:	bf00      	nop
 801cfa4:	20000040 	.word	0x20000040

0801cfa8 <_kill_r>:
 801cfa8:	b538      	push	{r3, r4, r5, lr}
 801cfaa:	4d07      	ldr	r5, [pc, #28]	; (801cfc8 <_kill_r+0x20>)
 801cfac:	2300      	movs	r3, #0
 801cfae:	4604      	mov	r4, r0
 801cfb0:	4608      	mov	r0, r1
 801cfb2:	4611      	mov	r1, r2
 801cfb4:	602b      	str	r3, [r5, #0]
 801cfb6:	f7f2 fe3d 	bl	800fc34 <_kill>
 801cfba:	1c43      	adds	r3, r0, #1
 801cfbc:	d102      	bne.n	801cfc4 <_kill_r+0x1c>
 801cfbe:	682b      	ldr	r3, [r5, #0]
 801cfc0:	b103      	cbz	r3, 801cfc4 <_kill_r+0x1c>
 801cfc2:	6023      	str	r3, [r4, #0]
 801cfc4:	bd38      	pop	{r3, r4, r5, pc}
 801cfc6:	bf00      	nop
 801cfc8:	20007480 	.word	0x20007480

0801cfcc <_getpid_r>:
 801cfcc:	f7f2 be2a 	b.w	800fc24 <_getpid>

0801cfd0 <__sread>:
 801cfd0:	b510      	push	{r4, lr}
 801cfd2:	460c      	mov	r4, r1
 801cfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfd8:	f001 fbba 	bl	801e750 <_read_r>
 801cfdc:	2800      	cmp	r0, #0
 801cfde:	bfab      	itete	ge
 801cfe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cfe2:	89a3      	ldrhlt	r3, [r4, #12]
 801cfe4:	181b      	addge	r3, r3, r0
 801cfe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cfea:	bfac      	ite	ge
 801cfec:	6563      	strge	r3, [r4, #84]	; 0x54
 801cfee:	81a3      	strhlt	r3, [r4, #12]
 801cff0:	bd10      	pop	{r4, pc}

0801cff2 <__swrite>:
 801cff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff6:	461f      	mov	r7, r3
 801cff8:	898b      	ldrh	r3, [r1, #12]
 801cffa:	05db      	lsls	r3, r3, #23
 801cffc:	4605      	mov	r5, r0
 801cffe:	460c      	mov	r4, r1
 801d000:	4616      	mov	r6, r2
 801d002:	d505      	bpl.n	801d010 <__swrite+0x1e>
 801d004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d008:	2302      	movs	r3, #2
 801d00a:	2200      	movs	r2, #0
 801d00c:	f000 ffe8 	bl	801dfe0 <_lseek_r>
 801d010:	89a3      	ldrh	r3, [r4, #12]
 801d012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d01a:	81a3      	strh	r3, [r4, #12]
 801d01c:	4632      	mov	r2, r6
 801d01e:	463b      	mov	r3, r7
 801d020:	4628      	mov	r0, r5
 801d022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d026:	f000 b817 	b.w	801d058 <_write_r>

0801d02a <__sseek>:
 801d02a:	b510      	push	{r4, lr}
 801d02c:	460c      	mov	r4, r1
 801d02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d032:	f000 ffd5 	bl	801dfe0 <_lseek_r>
 801d036:	1c43      	adds	r3, r0, #1
 801d038:	89a3      	ldrh	r3, [r4, #12]
 801d03a:	bf15      	itete	ne
 801d03c:	6560      	strne	r0, [r4, #84]	; 0x54
 801d03e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d046:	81a3      	strheq	r3, [r4, #12]
 801d048:	bf18      	it	ne
 801d04a:	81a3      	strhne	r3, [r4, #12]
 801d04c:	bd10      	pop	{r4, pc}

0801d04e <__sclose>:
 801d04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d052:	f000 b875 	b.w	801d140 <_close_r>
	...

0801d058 <_write_r>:
 801d058:	b538      	push	{r3, r4, r5, lr}
 801d05a:	4d07      	ldr	r5, [pc, #28]	; (801d078 <_write_r+0x20>)
 801d05c:	4604      	mov	r4, r0
 801d05e:	4608      	mov	r0, r1
 801d060:	4611      	mov	r1, r2
 801d062:	2200      	movs	r2, #0
 801d064:	602a      	str	r2, [r5, #0]
 801d066:	461a      	mov	r2, r3
 801d068:	f7f2 fe1b 	bl	800fca2 <_write>
 801d06c:	1c43      	adds	r3, r0, #1
 801d06e:	d102      	bne.n	801d076 <_write_r+0x1e>
 801d070:	682b      	ldr	r3, [r5, #0]
 801d072:	b103      	cbz	r3, 801d076 <_write_r+0x1e>
 801d074:	6023      	str	r3, [r4, #0]
 801d076:	bd38      	pop	{r3, r4, r5, pc}
 801d078:	20007480 	.word	0x20007480

0801d07c <__register_exitproc>:
 801d07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d080:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801d13c <__register_exitproc+0xc0>
 801d084:	4606      	mov	r6, r0
 801d086:	f8d8 0000 	ldr.w	r0, [r8]
 801d08a:	461f      	mov	r7, r3
 801d08c:	460d      	mov	r5, r1
 801d08e:	4691      	mov	r9, r2
 801d090:	f7ff f96d 	bl	801c36e <__retarget_lock_acquire_recursive>
 801d094:	4b25      	ldr	r3, [pc, #148]	; (801d12c <__register_exitproc+0xb0>)
 801d096:	681c      	ldr	r4, [r3, #0]
 801d098:	b934      	cbnz	r4, 801d0a8 <__register_exitproc+0x2c>
 801d09a:	4c25      	ldr	r4, [pc, #148]	; (801d130 <__register_exitproc+0xb4>)
 801d09c:	601c      	str	r4, [r3, #0]
 801d09e:	4b25      	ldr	r3, [pc, #148]	; (801d134 <__register_exitproc+0xb8>)
 801d0a0:	b113      	cbz	r3, 801d0a8 <__register_exitproc+0x2c>
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d0a8:	6863      	ldr	r3, [r4, #4]
 801d0aa:	2b1f      	cmp	r3, #31
 801d0ac:	dd07      	ble.n	801d0be <__register_exitproc+0x42>
 801d0ae:	f8d8 0000 	ldr.w	r0, [r8]
 801d0b2:	f7ff f95e 	bl	801c372 <__retarget_lock_release_recursive>
 801d0b6:	f04f 30ff 	mov.w	r0, #4294967295
 801d0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0be:	b34e      	cbz	r6, 801d114 <__register_exitproc+0x98>
 801d0c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801d0c4:	b988      	cbnz	r0, 801d0ea <__register_exitproc+0x6e>
 801d0c6:	4b1c      	ldr	r3, [pc, #112]	; (801d138 <__register_exitproc+0xbc>)
 801d0c8:	b923      	cbnz	r3, 801d0d4 <__register_exitproc+0x58>
 801d0ca:	f8d8 0000 	ldr.w	r0, [r8]
 801d0ce:	f7ff f94f 	bl	801c370 <__retarget_lock_release>
 801d0d2:	e7f0      	b.n	801d0b6 <__register_exitproc+0x3a>
 801d0d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d0d8:	f7ff f94c 	bl	801c374 <malloc>
 801d0dc:	2800      	cmp	r0, #0
 801d0de:	d0f4      	beq.n	801d0ca <__register_exitproc+0x4e>
 801d0e0:	2300      	movs	r3, #0
 801d0e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801d0e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801d0ea:	6863      	ldr	r3, [r4, #4]
 801d0ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801d0f0:	2201      	movs	r2, #1
 801d0f2:	409a      	lsls	r2, r3
 801d0f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801d0f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801d0fc:	4313      	orrs	r3, r2
 801d0fe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801d102:	2e02      	cmp	r6, #2
 801d104:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801d108:	bf02      	ittt	eq
 801d10a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801d10e:	4313      	orreq	r3, r2
 801d110:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801d114:	6863      	ldr	r3, [r4, #4]
 801d116:	f8d8 0000 	ldr.w	r0, [r8]
 801d11a:	1c5a      	adds	r2, r3, #1
 801d11c:	3302      	adds	r3, #2
 801d11e:	6062      	str	r2, [r4, #4]
 801d120:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801d124:	f7ff f925 	bl	801c372 <__retarget_lock_release_recursive>
 801d128:	2000      	movs	r0, #0
 801d12a:	e7c6      	b.n	801d0ba <__register_exitproc+0x3e>
 801d12c:	20007510 	.word	0x20007510
 801d130:	20007484 	.word	0x20007484
 801d134:	00000000 	.word	0x00000000
 801d138:	0801c375 	.word	0x0801c375
 801d13c:	200000a4 	.word	0x200000a4

0801d140 <_close_r>:
 801d140:	b538      	push	{r3, r4, r5, lr}
 801d142:	4d06      	ldr	r5, [pc, #24]	; (801d15c <_close_r+0x1c>)
 801d144:	2300      	movs	r3, #0
 801d146:	4604      	mov	r4, r0
 801d148:	4608      	mov	r0, r1
 801d14a:	602b      	str	r3, [r5, #0]
 801d14c:	f7f2 fdc5 	bl	800fcda <_close>
 801d150:	1c43      	adds	r3, r0, #1
 801d152:	d102      	bne.n	801d15a <_close_r+0x1a>
 801d154:	682b      	ldr	r3, [r5, #0]
 801d156:	b103      	cbz	r3, 801d15a <_close_r+0x1a>
 801d158:	6023      	str	r3, [r4, #0]
 801d15a:	bd38      	pop	{r3, r4, r5, pc}
 801d15c:	20007480 	.word	0x20007480

0801d160 <quorem>:
 801d160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d164:	6903      	ldr	r3, [r0, #16]
 801d166:	690c      	ldr	r4, [r1, #16]
 801d168:	42a3      	cmp	r3, r4
 801d16a:	4607      	mov	r7, r0
 801d16c:	f2c0 8081 	blt.w	801d272 <quorem+0x112>
 801d170:	3c01      	subs	r4, #1
 801d172:	f101 0814 	add.w	r8, r1, #20
 801d176:	f100 0514 	add.w	r5, r0, #20
 801d17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d17e:	9301      	str	r3, [sp, #4]
 801d180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d188:	3301      	adds	r3, #1
 801d18a:	429a      	cmp	r2, r3
 801d18c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d194:	fbb2 f6f3 	udiv	r6, r2, r3
 801d198:	d331      	bcc.n	801d1fe <quorem+0x9e>
 801d19a:	f04f 0e00 	mov.w	lr, #0
 801d19e:	4640      	mov	r0, r8
 801d1a0:	46ac      	mov	ip, r5
 801d1a2:	46f2      	mov	sl, lr
 801d1a4:	f850 2b04 	ldr.w	r2, [r0], #4
 801d1a8:	b293      	uxth	r3, r2
 801d1aa:	fb06 e303 	mla	r3, r6, r3, lr
 801d1ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d1b2:	b29b      	uxth	r3, r3
 801d1b4:	ebaa 0303 	sub.w	r3, sl, r3
 801d1b8:	f8dc a000 	ldr.w	sl, [ip]
 801d1bc:	0c12      	lsrs	r2, r2, #16
 801d1be:	fa13 f38a 	uxtah	r3, r3, sl
 801d1c2:	fb06 e202 	mla	r2, r6, r2, lr
 801d1c6:	9300      	str	r3, [sp, #0]
 801d1c8:	9b00      	ldr	r3, [sp, #0]
 801d1ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d1ce:	b292      	uxth	r2, r2
 801d1d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d1d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d1d8:	f8bd 3000 	ldrh.w	r3, [sp]
 801d1dc:	4581      	cmp	r9, r0
 801d1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d1e2:	f84c 3b04 	str.w	r3, [ip], #4
 801d1e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d1ea:	d2db      	bcs.n	801d1a4 <quorem+0x44>
 801d1ec:	f855 300b 	ldr.w	r3, [r5, fp]
 801d1f0:	b92b      	cbnz	r3, 801d1fe <quorem+0x9e>
 801d1f2:	9b01      	ldr	r3, [sp, #4]
 801d1f4:	3b04      	subs	r3, #4
 801d1f6:	429d      	cmp	r5, r3
 801d1f8:	461a      	mov	r2, r3
 801d1fa:	d32e      	bcc.n	801d25a <quorem+0xfa>
 801d1fc:	613c      	str	r4, [r7, #16]
 801d1fe:	4638      	mov	r0, r7
 801d200:	f001 f98e 	bl	801e520 <__mcmp>
 801d204:	2800      	cmp	r0, #0
 801d206:	db24      	blt.n	801d252 <quorem+0xf2>
 801d208:	3601      	adds	r6, #1
 801d20a:	4628      	mov	r0, r5
 801d20c:	f04f 0c00 	mov.w	ip, #0
 801d210:	f858 2b04 	ldr.w	r2, [r8], #4
 801d214:	f8d0 e000 	ldr.w	lr, [r0]
 801d218:	b293      	uxth	r3, r2
 801d21a:	ebac 0303 	sub.w	r3, ip, r3
 801d21e:	0c12      	lsrs	r2, r2, #16
 801d220:	fa13 f38e 	uxtah	r3, r3, lr
 801d224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d22c:	b29b      	uxth	r3, r3
 801d22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d232:	45c1      	cmp	r9, r8
 801d234:	f840 3b04 	str.w	r3, [r0], #4
 801d238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d23c:	d2e8      	bcs.n	801d210 <quorem+0xb0>
 801d23e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d246:	b922      	cbnz	r2, 801d252 <quorem+0xf2>
 801d248:	3b04      	subs	r3, #4
 801d24a:	429d      	cmp	r5, r3
 801d24c:	461a      	mov	r2, r3
 801d24e:	d30a      	bcc.n	801d266 <quorem+0x106>
 801d250:	613c      	str	r4, [r7, #16]
 801d252:	4630      	mov	r0, r6
 801d254:	b003      	add	sp, #12
 801d256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d25a:	6812      	ldr	r2, [r2, #0]
 801d25c:	3b04      	subs	r3, #4
 801d25e:	2a00      	cmp	r2, #0
 801d260:	d1cc      	bne.n	801d1fc <quorem+0x9c>
 801d262:	3c01      	subs	r4, #1
 801d264:	e7c7      	b.n	801d1f6 <quorem+0x96>
 801d266:	6812      	ldr	r2, [r2, #0]
 801d268:	3b04      	subs	r3, #4
 801d26a:	2a00      	cmp	r2, #0
 801d26c:	d1f0      	bne.n	801d250 <quorem+0xf0>
 801d26e:	3c01      	subs	r4, #1
 801d270:	e7eb      	b.n	801d24a <quorem+0xea>
 801d272:	2000      	movs	r0, #0
 801d274:	e7ee      	b.n	801d254 <quorem+0xf4>
	...

0801d278 <_dtoa_r>:
 801d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d27c:	ed2d 8b04 	vpush	{d8-d9}
 801d280:	ec57 6b10 	vmov	r6, r7, d0
 801d284:	b093      	sub	sp, #76	; 0x4c
 801d286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d28c:	9106      	str	r1, [sp, #24]
 801d28e:	ee10 aa10 	vmov	sl, s0
 801d292:	4604      	mov	r4, r0
 801d294:	9209      	str	r2, [sp, #36]	; 0x24
 801d296:	930c      	str	r3, [sp, #48]	; 0x30
 801d298:	46bb      	mov	fp, r7
 801d29a:	b975      	cbnz	r5, 801d2ba <_dtoa_r+0x42>
 801d29c:	2010      	movs	r0, #16
 801d29e:	f7ff f869 	bl	801c374 <malloc>
 801d2a2:	4602      	mov	r2, r0
 801d2a4:	6260      	str	r0, [r4, #36]	; 0x24
 801d2a6:	b920      	cbnz	r0, 801d2b2 <_dtoa_r+0x3a>
 801d2a8:	4ba7      	ldr	r3, [pc, #668]	; (801d548 <_dtoa_r+0x2d0>)
 801d2aa:	21ea      	movs	r1, #234	; 0xea
 801d2ac:	48a7      	ldr	r0, [pc, #668]	; (801d54c <_dtoa_r+0x2d4>)
 801d2ae:	f001 fa61 	bl	801e774 <__assert_func>
 801d2b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d2b6:	6005      	str	r5, [r0, #0]
 801d2b8:	60c5      	str	r5, [r0, #12]
 801d2ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2bc:	6819      	ldr	r1, [r3, #0]
 801d2be:	b151      	cbz	r1, 801d2d6 <_dtoa_r+0x5e>
 801d2c0:	685a      	ldr	r2, [r3, #4]
 801d2c2:	604a      	str	r2, [r1, #4]
 801d2c4:	2301      	movs	r3, #1
 801d2c6:	4093      	lsls	r3, r2
 801d2c8:	608b      	str	r3, [r1, #8]
 801d2ca:	4620      	mov	r0, r4
 801d2cc:	f000 fee6 	bl	801e09c <_Bfree>
 801d2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2d2:	2200      	movs	r2, #0
 801d2d4:	601a      	str	r2, [r3, #0]
 801d2d6:	1e3b      	subs	r3, r7, #0
 801d2d8:	bfaa      	itet	ge
 801d2da:	2300      	movge	r3, #0
 801d2dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d2e0:	f8c8 3000 	strge.w	r3, [r8]
 801d2e4:	4b9a      	ldr	r3, [pc, #616]	; (801d550 <_dtoa_r+0x2d8>)
 801d2e6:	bfbc      	itt	lt
 801d2e8:	2201      	movlt	r2, #1
 801d2ea:	f8c8 2000 	strlt.w	r2, [r8]
 801d2ee:	ea33 030b 	bics.w	r3, r3, fp
 801d2f2:	d11b      	bne.n	801d32c <_dtoa_r+0xb4>
 801d2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2f6:	f242 730f 	movw	r3, #9999	; 0x270f
 801d2fa:	6013      	str	r3, [r2, #0]
 801d2fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d300:	4333      	orrs	r3, r6
 801d302:	f000 8592 	beq.w	801de2a <_dtoa_r+0xbb2>
 801d306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d308:	b963      	cbnz	r3, 801d324 <_dtoa_r+0xac>
 801d30a:	4b92      	ldr	r3, [pc, #584]	; (801d554 <_dtoa_r+0x2dc>)
 801d30c:	e022      	b.n	801d354 <_dtoa_r+0xdc>
 801d30e:	4b92      	ldr	r3, [pc, #584]	; (801d558 <_dtoa_r+0x2e0>)
 801d310:	9301      	str	r3, [sp, #4]
 801d312:	3308      	adds	r3, #8
 801d314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d316:	6013      	str	r3, [r2, #0]
 801d318:	9801      	ldr	r0, [sp, #4]
 801d31a:	b013      	add	sp, #76	; 0x4c
 801d31c:	ecbd 8b04 	vpop	{d8-d9}
 801d320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d324:	4b8b      	ldr	r3, [pc, #556]	; (801d554 <_dtoa_r+0x2dc>)
 801d326:	9301      	str	r3, [sp, #4]
 801d328:	3303      	adds	r3, #3
 801d32a:	e7f3      	b.n	801d314 <_dtoa_r+0x9c>
 801d32c:	2200      	movs	r2, #0
 801d32e:	2300      	movs	r3, #0
 801d330:	4650      	mov	r0, sl
 801d332:	4659      	mov	r1, fp
 801d334:	f7e3 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 801d338:	ec4b ab19 	vmov	d9, sl, fp
 801d33c:	4680      	mov	r8, r0
 801d33e:	b158      	cbz	r0, 801d358 <_dtoa_r+0xe0>
 801d340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d342:	2301      	movs	r3, #1
 801d344:	6013      	str	r3, [r2, #0]
 801d346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f000 856b 	beq.w	801de24 <_dtoa_r+0xbac>
 801d34e:	4883      	ldr	r0, [pc, #524]	; (801d55c <_dtoa_r+0x2e4>)
 801d350:	6018      	str	r0, [r3, #0]
 801d352:	1e43      	subs	r3, r0, #1
 801d354:	9301      	str	r3, [sp, #4]
 801d356:	e7df      	b.n	801d318 <_dtoa_r+0xa0>
 801d358:	ec4b ab10 	vmov	d0, sl, fp
 801d35c:	aa10      	add	r2, sp, #64	; 0x40
 801d35e:	a911      	add	r1, sp, #68	; 0x44
 801d360:	4620      	mov	r0, r4
 801d362:	f001 f983 	bl	801e66c <__d2b>
 801d366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d36a:	ee08 0a10 	vmov	s16, r0
 801d36e:	2d00      	cmp	r5, #0
 801d370:	f000 8084 	beq.w	801d47c <_dtoa_r+0x204>
 801d374:	ee19 3a90 	vmov	r3, s19
 801d378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d37c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d380:	4656      	mov	r6, sl
 801d382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d38a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d38e:	4b74      	ldr	r3, [pc, #464]	; (801d560 <_dtoa_r+0x2e8>)
 801d390:	2200      	movs	r2, #0
 801d392:	4630      	mov	r0, r6
 801d394:	4639      	mov	r1, r7
 801d396:	f7e2 ff77 	bl	8000288 <__aeabi_dsub>
 801d39a:	a365      	add	r3, pc, #404	; (adr r3, 801d530 <_dtoa_r+0x2b8>)
 801d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a0:	f7e3 f92a 	bl	80005f8 <__aeabi_dmul>
 801d3a4:	a364      	add	r3, pc, #400	; (adr r3, 801d538 <_dtoa_r+0x2c0>)
 801d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3aa:	f7e2 ff6f 	bl	800028c <__adddf3>
 801d3ae:	4606      	mov	r6, r0
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	460f      	mov	r7, r1
 801d3b4:	f7e3 f8b6 	bl	8000524 <__aeabi_i2d>
 801d3b8:	a361      	add	r3, pc, #388	; (adr r3, 801d540 <_dtoa_r+0x2c8>)
 801d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3be:	f7e3 f91b 	bl	80005f8 <__aeabi_dmul>
 801d3c2:	4602      	mov	r2, r0
 801d3c4:	460b      	mov	r3, r1
 801d3c6:	4630      	mov	r0, r6
 801d3c8:	4639      	mov	r1, r7
 801d3ca:	f7e2 ff5f 	bl	800028c <__adddf3>
 801d3ce:	4606      	mov	r6, r0
 801d3d0:	460f      	mov	r7, r1
 801d3d2:	f7e3 fbc1 	bl	8000b58 <__aeabi_d2iz>
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	9000      	str	r0, [sp, #0]
 801d3da:	2300      	movs	r3, #0
 801d3dc:	4630      	mov	r0, r6
 801d3de:	4639      	mov	r1, r7
 801d3e0:	f7e3 fb7c 	bl	8000adc <__aeabi_dcmplt>
 801d3e4:	b150      	cbz	r0, 801d3fc <_dtoa_r+0x184>
 801d3e6:	9800      	ldr	r0, [sp, #0]
 801d3e8:	f7e3 f89c 	bl	8000524 <__aeabi_i2d>
 801d3ec:	4632      	mov	r2, r6
 801d3ee:	463b      	mov	r3, r7
 801d3f0:	f7e3 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d3f4:	b910      	cbnz	r0, 801d3fc <_dtoa_r+0x184>
 801d3f6:	9b00      	ldr	r3, [sp, #0]
 801d3f8:	3b01      	subs	r3, #1
 801d3fa:	9300      	str	r3, [sp, #0]
 801d3fc:	9b00      	ldr	r3, [sp, #0]
 801d3fe:	2b16      	cmp	r3, #22
 801d400:	d85a      	bhi.n	801d4b8 <_dtoa_r+0x240>
 801d402:	9a00      	ldr	r2, [sp, #0]
 801d404:	4b57      	ldr	r3, [pc, #348]	; (801d564 <_dtoa_r+0x2ec>)
 801d406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d40e:	ec51 0b19 	vmov	r0, r1, d9
 801d412:	f7e3 fb63 	bl	8000adc <__aeabi_dcmplt>
 801d416:	2800      	cmp	r0, #0
 801d418:	d050      	beq.n	801d4bc <_dtoa_r+0x244>
 801d41a:	9b00      	ldr	r3, [sp, #0]
 801d41c:	3b01      	subs	r3, #1
 801d41e:	9300      	str	r3, [sp, #0]
 801d420:	2300      	movs	r3, #0
 801d422:	930b      	str	r3, [sp, #44]	; 0x2c
 801d424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d426:	1b5d      	subs	r5, r3, r5
 801d428:	1e6b      	subs	r3, r5, #1
 801d42a:	9305      	str	r3, [sp, #20]
 801d42c:	bf45      	ittet	mi
 801d42e:	f1c5 0301 	rsbmi	r3, r5, #1
 801d432:	9304      	strmi	r3, [sp, #16]
 801d434:	2300      	movpl	r3, #0
 801d436:	2300      	movmi	r3, #0
 801d438:	bf4c      	ite	mi
 801d43a:	9305      	strmi	r3, [sp, #20]
 801d43c:	9304      	strpl	r3, [sp, #16]
 801d43e:	9b00      	ldr	r3, [sp, #0]
 801d440:	2b00      	cmp	r3, #0
 801d442:	db3d      	blt.n	801d4c0 <_dtoa_r+0x248>
 801d444:	9b05      	ldr	r3, [sp, #20]
 801d446:	9a00      	ldr	r2, [sp, #0]
 801d448:	920a      	str	r2, [sp, #40]	; 0x28
 801d44a:	4413      	add	r3, r2
 801d44c:	9305      	str	r3, [sp, #20]
 801d44e:	2300      	movs	r3, #0
 801d450:	9307      	str	r3, [sp, #28]
 801d452:	9b06      	ldr	r3, [sp, #24]
 801d454:	2b09      	cmp	r3, #9
 801d456:	f200 8089 	bhi.w	801d56c <_dtoa_r+0x2f4>
 801d45a:	2b05      	cmp	r3, #5
 801d45c:	bfc4      	itt	gt
 801d45e:	3b04      	subgt	r3, #4
 801d460:	9306      	strgt	r3, [sp, #24]
 801d462:	9b06      	ldr	r3, [sp, #24]
 801d464:	f1a3 0302 	sub.w	r3, r3, #2
 801d468:	bfcc      	ite	gt
 801d46a:	2500      	movgt	r5, #0
 801d46c:	2501      	movle	r5, #1
 801d46e:	2b03      	cmp	r3, #3
 801d470:	f200 8087 	bhi.w	801d582 <_dtoa_r+0x30a>
 801d474:	e8df f003 	tbb	[pc, r3]
 801d478:	59383a2d 	.word	0x59383a2d
 801d47c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d480:	441d      	add	r5, r3
 801d482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d486:	2b20      	cmp	r3, #32
 801d488:	bfc1      	itttt	gt
 801d48a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d48e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d492:	fa0b f303 	lslgt.w	r3, fp, r3
 801d496:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d49a:	bfda      	itte	le
 801d49c:	f1c3 0320 	rsble	r3, r3, #32
 801d4a0:	fa06 f003 	lslle.w	r0, r6, r3
 801d4a4:	4318      	orrgt	r0, r3
 801d4a6:	f7e3 f82d 	bl	8000504 <__aeabi_ui2d>
 801d4aa:	2301      	movs	r3, #1
 801d4ac:	4606      	mov	r6, r0
 801d4ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d4b2:	3d01      	subs	r5, #1
 801d4b4:	930e      	str	r3, [sp, #56]	; 0x38
 801d4b6:	e76a      	b.n	801d38e <_dtoa_r+0x116>
 801d4b8:	2301      	movs	r3, #1
 801d4ba:	e7b2      	b.n	801d422 <_dtoa_r+0x1aa>
 801d4bc:	900b      	str	r0, [sp, #44]	; 0x2c
 801d4be:	e7b1      	b.n	801d424 <_dtoa_r+0x1ac>
 801d4c0:	9b04      	ldr	r3, [sp, #16]
 801d4c2:	9a00      	ldr	r2, [sp, #0]
 801d4c4:	1a9b      	subs	r3, r3, r2
 801d4c6:	9304      	str	r3, [sp, #16]
 801d4c8:	4253      	negs	r3, r2
 801d4ca:	9307      	str	r3, [sp, #28]
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	930a      	str	r3, [sp, #40]	; 0x28
 801d4d0:	e7bf      	b.n	801d452 <_dtoa_r+0x1da>
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	9308      	str	r3, [sp, #32]
 801d4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	dc55      	bgt.n	801d588 <_dtoa_r+0x310>
 801d4dc:	2301      	movs	r3, #1
 801d4de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d4e2:	461a      	mov	r2, r3
 801d4e4:	9209      	str	r2, [sp, #36]	; 0x24
 801d4e6:	e00c      	b.n	801d502 <_dtoa_r+0x28a>
 801d4e8:	2301      	movs	r3, #1
 801d4ea:	e7f3      	b.n	801d4d4 <_dtoa_r+0x25c>
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4f0:	9308      	str	r3, [sp, #32]
 801d4f2:	9b00      	ldr	r3, [sp, #0]
 801d4f4:	4413      	add	r3, r2
 801d4f6:	9302      	str	r3, [sp, #8]
 801d4f8:	3301      	adds	r3, #1
 801d4fa:	2b01      	cmp	r3, #1
 801d4fc:	9303      	str	r3, [sp, #12]
 801d4fe:	bfb8      	it	lt
 801d500:	2301      	movlt	r3, #1
 801d502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d504:	2200      	movs	r2, #0
 801d506:	6042      	str	r2, [r0, #4]
 801d508:	2204      	movs	r2, #4
 801d50a:	f102 0614 	add.w	r6, r2, #20
 801d50e:	429e      	cmp	r6, r3
 801d510:	6841      	ldr	r1, [r0, #4]
 801d512:	d93d      	bls.n	801d590 <_dtoa_r+0x318>
 801d514:	4620      	mov	r0, r4
 801d516:	f000 fd81 	bl	801e01c <_Balloc>
 801d51a:	9001      	str	r0, [sp, #4]
 801d51c:	2800      	cmp	r0, #0
 801d51e:	d13b      	bne.n	801d598 <_dtoa_r+0x320>
 801d520:	4b11      	ldr	r3, [pc, #68]	; (801d568 <_dtoa_r+0x2f0>)
 801d522:	4602      	mov	r2, r0
 801d524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d528:	e6c0      	b.n	801d2ac <_dtoa_r+0x34>
 801d52a:	2301      	movs	r3, #1
 801d52c:	e7df      	b.n	801d4ee <_dtoa_r+0x276>
 801d52e:	bf00      	nop
 801d530:	636f4361 	.word	0x636f4361
 801d534:	3fd287a7 	.word	0x3fd287a7
 801d538:	8b60c8b3 	.word	0x8b60c8b3
 801d53c:	3fc68a28 	.word	0x3fc68a28
 801d540:	509f79fb 	.word	0x509f79fb
 801d544:	3fd34413 	.word	0x3fd34413
 801d548:	0801f3fd 	.word	0x0801f3fd
 801d54c:	0801f414 	.word	0x0801f414
 801d550:	7ff00000 	.word	0x7ff00000
 801d554:	0801f3f9 	.word	0x0801f3f9
 801d558:	0801f3f0 	.word	0x0801f3f0
 801d55c:	0801f3cd 	.word	0x0801f3cd
 801d560:	3ff80000 	.word	0x3ff80000
 801d564:	0801f508 	.word	0x0801f508
 801d568:	0801f46f 	.word	0x0801f46f
 801d56c:	2501      	movs	r5, #1
 801d56e:	2300      	movs	r3, #0
 801d570:	9306      	str	r3, [sp, #24]
 801d572:	9508      	str	r5, [sp, #32]
 801d574:	f04f 33ff 	mov.w	r3, #4294967295
 801d578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d57c:	2200      	movs	r2, #0
 801d57e:	2312      	movs	r3, #18
 801d580:	e7b0      	b.n	801d4e4 <_dtoa_r+0x26c>
 801d582:	2301      	movs	r3, #1
 801d584:	9308      	str	r3, [sp, #32]
 801d586:	e7f5      	b.n	801d574 <_dtoa_r+0x2fc>
 801d588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d58a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d58e:	e7b8      	b.n	801d502 <_dtoa_r+0x28a>
 801d590:	3101      	adds	r1, #1
 801d592:	6041      	str	r1, [r0, #4]
 801d594:	0052      	lsls	r2, r2, #1
 801d596:	e7b8      	b.n	801d50a <_dtoa_r+0x292>
 801d598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d59a:	9a01      	ldr	r2, [sp, #4]
 801d59c:	601a      	str	r2, [r3, #0]
 801d59e:	9b03      	ldr	r3, [sp, #12]
 801d5a0:	2b0e      	cmp	r3, #14
 801d5a2:	f200 809d 	bhi.w	801d6e0 <_dtoa_r+0x468>
 801d5a6:	2d00      	cmp	r5, #0
 801d5a8:	f000 809a 	beq.w	801d6e0 <_dtoa_r+0x468>
 801d5ac:	9b00      	ldr	r3, [sp, #0]
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	dd32      	ble.n	801d618 <_dtoa_r+0x3a0>
 801d5b2:	4ab7      	ldr	r2, [pc, #732]	; (801d890 <_dtoa_r+0x618>)
 801d5b4:	f003 030f 	and.w	r3, r3, #15
 801d5b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d5bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d5c0:	9b00      	ldr	r3, [sp, #0]
 801d5c2:	05d8      	lsls	r0, r3, #23
 801d5c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d5c8:	d516      	bpl.n	801d5f8 <_dtoa_r+0x380>
 801d5ca:	4bb2      	ldr	r3, [pc, #712]	; (801d894 <_dtoa_r+0x61c>)
 801d5cc:	ec51 0b19 	vmov	r0, r1, d9
 801d5d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d5d4:	f7e3 f93a 	bl	800084c <__aeabi_ddiv>
 801d5d8:	f007 070f 	and.w	r7, r7, #15
 801d5dc:	4682      	mov	sl, r0
 801d5de:	468b      	mov	fp, r1
 801d5e0:	2503      	movs	r5, #3
 801d5e2:	4eac      	ldr	r6, [pc, #688]	; (801d894 <_dtoa_r+0x61c>)
 801d5e4:	b957      	cbnz	r7, 801d5fc <_dtoa_r+0x384>
 801d5e6:	4642      	mov	r2, r8
 801d5e8:	464b      	mov	r3, r9
 801d5ea:	4650      	mov	r0, sl
 801d5ec:	4659      	mov	r1, fp
 801d5ee:	f7e3 f92d 	bl	800084c <__aeabi_ddiv>
 801d5f2:	4682      	mov	sl, r0
 801d5f4:	468b      	mov	fp, r1
 801d5f6:	e028      	b.n	801d64a <_dtoa_r+0x3d2>
 801d5f8:	2502      	movs	r5, #2
 801d5fa:	e7f2      	b.n	801d5e2 <_dtoa_r+0x36a>
 801d5fc:	07f9      	lsls	r1, r7, #31
 801d5fe:	d508      	bpl.n	801d612 <_dtoa_r+0x39a>
 801d600:	4640      	mov	r0, r8
 801d602:	4649      	mov	r1, r9
 801d604:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d608:	f7e2 fff6 	bl	80005f8 <__aeabi_dmul>
 801d60c:	3501      	adds	r5, #1
 801d60e:	4680      	mov	r8, r0
 801d610:	4689      	mov	r9, r1
 801d612:	107f      	asrs	r7, r7, #1
 801d614:	3608      	adds	r6, #8
 801d616:	e7e5      	b.n	801d5e4 <_dtoa_r+0x36c>
 801d618:	f000 809b 	beq.w	801d752 <_dtoa_r+0x4da>
 801d61c:	9b00      	ldr	r3, [sp, #0]
 801d61e:	4f9d      	ldr	r7, [pc, #628]	; (801d894 <_dtoa_r+0x61c>)
 801d620:	425e      	negs	r6, r3
 801d622:	4b9b      	ldr	r3, [pc, #620]	; (801d890 <_dtoa_r+0x618>)
 801d624:	f006 020f 	and.w	r2, r6, #15
 801d628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d630:	ec51 0b19 	vmov	r0, r1, d9
 801d634:	f7e2 ffe0 	bl	80005f8 <__aeabi_dmul>
 801d638:	1136      	asrs	r6, r6, #4
 801d63a:	4682      	mov	sl, r0
 801d63c:	468b      	mov	fp, r1
 801d63e:	2300      	movs	r3, #0
 801d640:	2502      	movs	r5, #2
 801d642:	2e00      	cmp	r6, #0
 801d644:	d17a      	bne.n	801d73c <_dtoa_r+0x4c4>
 801d646:	2b00      	cmp	r3, #0
 801d648:	d1d3      	bne.n	801d5f2 <_dtoa_r+0x37a>
 801d64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	f000 8082 	beq.w	801d756 <_dtoa_r+0x4de>
 801d652:	4b91      	ldr	r3, [pc, #580]	; (801d898 <_dtoa_r+0x620>)
 801d654:	2200      	movs	r2, #0
 801d656:	4650      	mov	r0, sl
 801d658:	4659      	mov	r1, fp
 801d65a:	f7e3 fa3f 	bl	8000adc <__aeabi_dcmplt>
 801d65e:	2800      	cmp	r0, #0
 801d660:	d079      	beq.n	801d756 <_dtoa_r+0x4de>
 801d662:	9b03      	ldr	r3, [sp, #12]
 801d664:	2b00      	cmp	r3, #0
 801d666:	d076      	beq.n	801d756 <_dtoa_r+0x4de>
 801d668:	9b02      	ldr	r3, [sp, #8]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	dd36      	ble.n	801d6dc <_dtoa_r+0x464>
 801d66e:	9b00      	ldr	r3, [sp, #0]
 801d670:	4650      	mov	r0, sl
 801d672:	4659      	mov	r1, fp
 801d674:	1e5f      	subs	r7, r3, #1
 801d676:	2200      	movs	r2, #0
 801d678:	4b88      	ldr	r3, [pc, #544]	; (801d89c <_dtoa_r+0x624>)
 801d67a:	f7e2 ffbd 	bl	80005f8 <__aeabi_dmul>
 801d67e:	9e02      	ldr	r6, [sp, #8]
 801d680:	4682      	mov	sl, r0
 801d682:	468b      	mov	fp, r1
 801d684:	3501      	adds	r5, #1
 801d686:	4628      	mov	r0, r5
 801d688:	f7e2 ff4c 	bl	8000524 <__aeabi_i2d>
 801d68c:	4652      	mov	r2, sl
 801d68e:	465b      	mov	r3, fp
 801d690:	f7e2 ffb2 	bl	80005f8 <__aeabi_dmul>
 801d694:	4b82      	ldr	r3, [pc, #520]	; (801d8a0 <_dtoa_r+0x628>)
 801d696:	2200      	movs	r2, #0
 801d698:	f7e2 fdf8 	bl	800028c <__adddf3>
 801d69c:	46d0      	mov	r8, sl
 801d69e:	46d9      	mov	r9, fp
 801d6a0:	4682      	mov	sl, r0
 801d6a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d6a6:	2e00      	cmp	r6, #0
 801d6a8:	d158      	bne.n	801d75c <_dtoa_r+0x4e4>
 801d6aa:	4b7e      	ldr	r3, [pc, #504]	; (801d8a4 <_dtoa_r+0x62c>)
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	4640      	mov	r0, r8
 801d6b0:	4649      	mov	r1, r9
 801d6b2:	f7e2 fde9 	bl	8000288 <__aeabi_dsub>
 801d6b6:	4652      	mov	r2, sl
 801d6b8:	465b      	mov	r3, fp
 801d6ba:	4680      	mov	r8, r0
 801d6bc:	4689      	mov	r9, r1
 801d6be:	f7e3 fa2b 	bl	8000b18 <__aeabi_dcmpgt>
 801d6c2:	2800      	cmp	r0, #0
 801d6c4:	f040 8295 	bne.w	801dbf2 <_dtoa_r+0x97a>
 801d6c8:	4652      	mov	r2, sl
 801d6ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d6ce:	4640      	mov	r0, r8
 801d6d0:	4649      	mov	r1, r9
 801d6d2:	f7e3 fa03 	bl	8000adc <__aeabi_dcmplt>
 801d6d6:	2800      	cmp	r0, #0
 801d6d8:	f040 8289 	bne.w	801dbee <_dtoa_r+0x976>
 801d6dc:	ec5b ab19 	vmov	sl, fp, d9
 801d6e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	f2c0 8148 	blt.w	801d978 <_dtoa_r+0x700>
 801d6e8:	9a00      	ldr	r2, [sp, #0]
 801d6ea:	2a0e      	cmp	r2, #14
 801d6ec:	f300 8144 	bgt.w	801d978 <_dtoa_r+0x700>
 801d6f0:	4b67      	ldr	r3, [pc, #412]	; (801d890 <_dtoa_r+0x618>)
 801d6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d6f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	f280 80d5 	bge.w	801d8ac <_dtoa_r+0x634>
 801d702:	9b03      	ldr	r3, [sp, #12]
 801d704:	2b00      	cmp	r3, #0
 801d706:	f300 80d1 	bgt.w	801d8ac <_dtoa_r+0x634>
 801d70a:	f040 826f 	bne.w	801dbec <_dtoa_r+0x974>
 801d70e:	4b65      	ldr	r3, [pc, #404]	; (801d8a4 <_dtoa_r+0x62c>)
 801d710:	2200      	movs	r2, #0
 801d712:	4640      	mov	r0, r8
 801d714:	4649      	mov	r1, r9
 801d716:	f7e2 ff6f 	bl	80005f8 <__aeabi_dmul>
 801d71a:	4652      	mov	r2, sl
 801d71c:	465b      	mov	r3, fp
 801d71e:	f7e3 f9f1 	bl	8000b04 <__aeabi_dcmpge>
 801d722:	9e03      	ldr	r6, [sp, #12]
 801d724:	4637      	mov	r7, r6
 801d726:	2800      	cmp	r0, #0
 801d728:	f040 8245 	bne.w	801dbb6 <_dtoa_r+0x93e>
 801d72c:	9d01      	ldr	r5, [sp, #4]
 801d72e:	2331      	movs	r3, #49	; 0x31
 801d730:	f805 3b01 	strb.w	r3, [r5], #1
 801d734:	9b00      	ldr	r3, [sp, #0]
 801d736:	3301      	adds	r3, #1
 801d738:	9300      	str	r3, [sp, #0]
 801d73a:	e240      	b.n	801dbbe <_dtoa_r+0x946>
 801d73c:	07f2      	lsls	r2, r6, #31
 801d73e:	d505      	bpl.n	801d74c <_dtoa_r+0x4d4>
 801d740:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d744:	f7e2 ff58 	bl	80005f8 <__aeabi_dmul>
 801d748:	3501      	adds	r5, #1
 801d74a:	2301      	movs	r3, #1
 801d74c:	1076      	asrs	r6, r6, #1
 801d74e:	3708      	adds	r7, #8
 801d750:	e777      	b.n	801d642 <_dtoa_r+0x3ca>
 801d752:	2502      	movs	r5, #2
 801d754:	e779      	b.n	801d64a <_dtoa_r+0x3d2>
 801d756:	9f00      	ldr	r7, [sp, #0]
 801d758:	9e03      	ldr	r6, [sp, #12]
 801d75a:	e794      	b.n	801d686 <_dtoa_r+0x40e>
 801d75c:	9901      	ldr	r1, [sp, #4]
 801d75e:	4b4c      	ldr	r3, [pc, #304]	; (801d890 <_dtoa_r+0x618>)
 801d760:	4431      	add	r1, r6
 801d762:	910d      	str	r1, [sp, #52]	; 0x34
 801d764:	9908      	ldr	r1, [sp, #32]
 801d766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d76a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d76e:	2900      	cmp	r1, #0
 801d770:	d043      	beq.n	801d7fa <_dtoa_r+0x582>
 801d772:	494d      	ldr	r1, [pc, #308]	; (801d8a8 <_dtoa_r+0x630>)
 801d774:	2000      	movs	r0, #0
 801d776:	f7e3 f869 	bl	800084c <__aeabi_ddiv>
 801d77a:	4652      	mov	r2, sl
 801d77c:	465b      	mov	r3, fp
 801d77e:	f7e2 fd83 	bl	8000288 <__aeabi_dsub>
 801d782:	9d01      	ldr	r5, [sp, #4]
 801d784:	4682      	mov	sl, r0
 801d786:	468b      	mov	fp, r1
 801d788:	4649      	mov	r1, r9
 801d78a:	4640      	mov	r0, r8
 801d78c:	f7e3 f9e4 	bl	8000b58 <__aeabi_d2iz>
 801d790:	4606      	mov	r6, r0
 801d792:	f7e2 fec7 	bl	8000524 <__aeabi_i2d>
 801d796:	4602      	mov	r2, r0
 801d798:	460b      	mov	r3, r1
 801d79a:	4640      	mov	r0, r8
 801d79c:	4649      	mov	r1, r9
 801d79e:	f7e2 fd73 	bl	8000288 <__aeabi_dsub>
 801d7a2:	3630      	adds	r6, #48	; 0x30
 801d7a4:	f805 6b01 	strb.w	r6, [r5], #1
 801d7a8:	4652      	mov	r2, sl
 801d7aa:	465b      	mov	r3, fp
 801d7ac:	4680      	mov	r8, r0
 801d7ae:	4689      	mov	r9, r1
 801d7b0:	f7e3 f994 	bl	8000adc <__aeabi_dcmplt>
 801d7b4:	2800      	cmp	r0, #0
 801d7b6:	d163      	bne.n	801d880 <_dtoa_r+0x608>
 801d7b8:	4642      	mov	r2, r8
 801d7ba:	464b      	mov	r3, r9
 801d7bc:	4936      	ldr	r1, [pc, #216]	; (801d898 <_dtoa_r+0x620>)
 801d7be:	2000      	movs	r0, #0
 801d7c0:	f7e2 fd62 	bl	8000288 <__aeabi_dsub>
 801d7c4:	4652      	mov	r2, sl
 801d7c6:	465b      	mov	r3, fp
 801d7c8:	f7e3 f988 	bl	8000adc <__aeabi_dcmplt>
 801d7cc:	2800      	cmp	r0, #0
 801d7ce:	f040 80b5 	bne.w	801d93c <_dtoa_r+0x6c4>
 801d7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7d4:	429d      	cmp	r5, r3
 801d7d6:	d081      	beq.n	801d6dc <_dtoa_r+0x464>
 801d7d8:	4b30      	ldr	r3, [pc, #192]	; (801d89c <_dtoa_r+0x624>)
 801d7da:	2200      	movs	r2, #0
 801d7dc:	4650      	mov	r0, sl
 801d7de:	4659      	mov	r1, fp
 801d7e0:	f7e2 ff0a 	bl	80005f8 <__aeabi_dmul>
 801d7e4:	4b2d      	ldr	r3, [pc, #180]	; (801d89c <_dtoa_r+0x624>)
 801d7e6:	4682      	mov	sl, r0
 801d7e8:	468b      	mov	fp, r1
 801d7ea:	4640      	mov	r0, r8
 801d7ec:	4649      	mov	r1, r9
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	f7e2 ff02 	bl	80005f8 <__aeabi_dmul>
 801d7f4:	4680      	mov	r8, r0
 801d7f6:	4689      	mov	r9, r1
 801d7f8:	e7c6      	b.n	801d788 <_dtoa_r+0x510>
 801d7fa:	4650      	mov	r0, sl
 801d7fc:	4659      	mov	r1, fp
 801d7fe:	f7e2 fefb 	bl	80005f8 <__aeabi_dmul>
 801d802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d804:	9d01      	ldr	r5, [sp, #4]
 801d806:	930f      	str	r3, [sp, #60]	; 0x3c
 801d808:	4682      	mov	sl, r0
 801d80a:	468b      	mov	fp, r1
 801d80c:	4649      	mov	r1, r9
 801d80e:	4640      	mov	r0, r8
 801d810:	f7e3 f9a2 	bl	8000b58 <__aeabi_d2iz>
 801d814:	4606      	mov	r6, r0
 801d816:	f7e2 fe85 	bl	8000524 <__aeabi_i2d>
 801d81a:	3630      	adds	r6, #48	; 0x30
 801d81c:	4602      	mov	r2, r0
 801d81e:	460b      	mov	r3, r1
 801d820:	4640      	mov	r0, r8
 801d822:	4649      	mov	r1, r9
 801d824:	f7e2 fd30 	bl	8000288 <__aeabi_dsub>
 801d828:	f805 6b01 	strb.w	r6, [r5], #1
 801d82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d82e:	429d      	cmp	r5, r3
 801d830:	4680      	mov	r8, r0
 801d832:	4689      	mov	r9, r1
 801d834:	f04f 0200 	mov.w	r2, #0
 801d838:	d124      	bne.n	801d884 <_dtoa_r+0x60c>
 801d83a:	4b1b      	ldr	r3, [pc, #108]	; (801d8a8 <_dtoa_r+0x630>)
 801d83c:	4650      	mov	r0, sl
 801d83e:	4659      	mov	r1, fp
 801d840:	f7e2 fd24 	bl	800028c <__adddf3>
 801d844:	4602      	mov	r2, r0
 801d846:	460b      	mov	r3, r1
 801d848:	4640      	mov	r0, r8
 801d84a:	4649      	mov	r1, r9
 801d84c:	f7e3 f964 	bl	8000b18 <__aeabi_dcmpgt>
 801d850:	2800      	cmp	r0, #0
 801d852:	d173      	bne.n	801d93c <_dtoa_r+0x6c4>
 801d854:	4652      	mov	r2, sl
 801d856:	465b      	mov	r3, fp
 801d858:	4913      	ldr	r1, [pc, #76]	; (801d8a8 <_dtoa_r+0x630>)
 801d85a:	2000      	movs	r0, #0
 801d85c:	f7e2 fd14 	bl	8000288 <__aeabi_dsub>
 801d860:	4602      	mov	r2, r0
 801d862:	460b      	mov	r3, r1
 801d864:	4640      	mov	r0, r8
 801d866:	4649      	mov	r1, r9
 801d868:	f7e3 f938 	bl	8000adc <__aeabi_dcmplt>
 801d86c:	2800      	cmp	r0, #0
 801d86e:	f43f af35 	beq.w	801d6dc <_dtoa_r+0x464>
 801d872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d874:	1e6b      	subs	r3, r5, #1
 801d876:	930f      	str	r3, [sp, #60]	; 0x3c
 801d878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d87c:	2b30      	cmp	r3, #48	; 0x30
 801d87e:	d0f8      	beq.n	801d872 <_dtoa_r+0x5fa>
 801d880:	9700      	str	r7, [sp, #0]
 801d882:	e049      	b.n	801d918 <_dtoa_r+0x6a0>
 801d884:	4b05      	ldr	r3, [pc, #20]	; (801d89c <_dtoa_r+0x624>)
 801d886:	f7e2 feb7 	bl	80005f8 <__aeabi_dmul>
 801d88a:	4680      	mov	r8, r0
 801d88c:	4689      	mov	r9, r1
 801d88e:	e7bd      	b.n	801d80c <_dtoa_r+0x594>
 801d890:	0801f508 	.word	0x0801f508
 801d894:	0801f4e0 	.word	0x0801f4e0
 801d898:	3ff00000 	.word	0x3ff00000
 801d89c:	40240000 	.word	0x40240000
 801d8a0:	401c0000 	.word	0x401c0000
 801d8a4:	40140000 	.word	0x40140000
 801d8a8:	3fe00000 	.word	0x3fe00000
 801d8ac:	9d01      	ldr	r5, [sp, #4]
 801d8ae:	4656      	mov	r6, sl
 801d8b0:	465f      	mov	r7, fp
 801d8b2:	4642      	mov	r2, r8
 801d8b4:	464b      	mov	r3, r9
 801d8b6:	4630      	mov	r0, r6
 801d8b8:	4639      	mov	r1, r7
 801d8ba:	f7e2 ffc7 	bl	800084c <__aeabi_ddiv>
 801d8be:	f7e3 f94b 	bl	8000b58 <__aeabi_d2iz>
 801d8c2:	4682      	mov	sl, r0
 801d8c4:	f7e2 fe2e 	bl	8000524 <__aeabi_i2d>
 801d8c8:	4642      	mov	r2, r8
 801d8ca:	464b      	mov	r3, r9
 801d8cc:	f7e2 fe94 	bl	80005f8 <__aeabi_dmul>
 801d8d0:	4602      	mov	r2, r0
 801d8d2:	460b      	mov	r3, r1
 801d8d4:	4630      	mov	r0, r6
 801d8d6:	4639      	mov	r1, r7
 801d8d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d8dc:	f7e2 fcd4 	bl	8000288 <__aeabi_dsub>
 801d8e0:	f805 6b01 	strb.w	r6, [r5], #1
 801d8e4:	9e01      	ldr	r6, [sp, #4]
 801d8e6:	9f03      	ldr	r7, [sp, #12]
 801d8e8:	1bae      	subs	r6, r5, r6
 801d8ea:	42b7      	cmp	r7, r6
 801d8ec:	4602      	mov	r2, r0
 801d8ee:	460b      	mov	r3, r1
 801d8f0:	d135      	bne.n	801d95e <_dtoa_r+0x6e6>
 801d8f2:	f7e2 fccb 	bl	800028c <__adddf3>
 801d8f6:	4642      	mov	r2, r8
 801d8f8:	464b      	mov	r3, r9
 801d8fa:	4606      	mov	r6, r0
 801d8fc:	460f      	mov	r7, r1
 801d8fe:	f7e3 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 801d902:	b9d0      	cbnz	r0, 801d93a <_dtoa_r+0x6c2>
 801d904:	4642      	mov	r2, r8
 801d906:	464b      	mov	r3, r9
 801d908:	4630      	mov	r0, r6
 801d90a:	4639      	mov	r1, r7
 801d90c:	f7e3 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 801d910:	b110      	cbz	r0, 801d918 <_dtoa_r+0x6a0>
 801d912:	f01a 0f01 	tst.w	sl, #1
 801d916:	d110      	bne.n	801d93a <_dtoa_r+0x6c2>
 801d918:	4620      	mov	r0, r4
 801d91a:	ee18 1a10 	vmov	r1, s16
 801d91e:	f000 fbbd 	bl	801e09c <_Bfree>
 801d922:	2300      	movs	r3, #0
 801d924:	9800      	ldr	r0, [sp, #0]
 801d926:	702b      	strb	r3, [r5, #0]
 801d928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d92a:	3001      	adds	r0, #1
 801d92c:	6018      	str	r0, [r3, #0]
 801d92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d930:	2b00      	cmp	r3, #0
 801d932:	f43f acf1 	beq.w	801d318 <_dtoa_r+0xa0>
 801d936:	601d      	str	r5, [r3, #0]
 801d938:	e4ee      	b.n	801d318 <_dtoa_r+0xa0>
 801d93a:	9f00      	ldr	r7, [sp, #0]
 801d93c:	462b      	mov	r3, r5
 801d93e:	461d      	mov	r5, r3
 801d940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d944:	2a39      	cmp	r2, #57	; 0x39
 801d946:	d106      	bne.n	801d956 <_dtoa_r+0x6de>
 801d948:	9a01      	ldr	r2, [sp, #4]
 801d94a:	429a      	cmp	r2, r3
 801d94c:	d1f7      	bne.n	801d93e <_dtoa_r+0x6c6>
 801d94e:	9901      	ldr	r1, [sp, #4]
 801d950:	2230      	movs	r2, #48	; 0x30
 801d952:	3701      	adds	r7, #1
 801d954:	700a      	strb	r2, [r1, #0]
 801d956:	781a      	ldrb	r2, [r3, #0]
 801d958:	3201      	adds	r2, #1
 801d95a:	701a      	strb	r2, [r3, #0]
 801d95c:	e790      	b.n	801d880 <_dtoa_r+0x608>
 801d95e:	4ba6      	ldr	r3, [pc, #664]	; (801dbf8 <_dtoa_r+0x980>)
 801d960:	2200      	movs	r2, #0
 801d962:	f7e2 fe49 	bl	80005f8 <__aeabi_dmul>
 801d966:	2200      	movs	r2, #0
 801d968:	2300      	movs	r3, #0
 801d96a:	4606      	mov	r6, r0
 801d96c:	460f      	mov	r7, r1
 801d96e:	f7e3 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 801d972:	2800      	cmp	r0, #0
 801d974:	d09d      	beq.n	801d8b2 <_dtoa_r+0x63a>
 801d976:	e7cf      	b.n	801d918 <_dtoa_r+0x6a0>
 801d978:	9a08      	ldr	r2, [sp, #32]
 801d97a:	2a00      	cmp	r2, #0
 801d97c:	f000 80d7 	beq.w	801db2e <_dtoa_r+0x8b6>
 801d980:	9a06      	ldr	r2, [sp, #24]
 801d982:	2a01      	cmp	r2, #1
 801d984:	f300 80ba 	bgt.w	801dafc <_dtoa_r+0x884>
 801d988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d98a:	2a00      	cmp	r2, #0
 801d98c:	f000 80b2 	beq.w	801daf4 <_dtoa_r+0x87c>
 801d990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d994:	9e07      	ldr	r6, [sp, #28]
 801d996:	9d04      	ldr	r5, [sp, #16]
 801d998:	9a04      	ldr	r2, [sp, #16]
 801d99a:	441a      	add	r2, r3
 801d99c:	9204      	str	r2, [sp, #16]
 801d99e:	9a05      	ldr	r2, [sp, #20]
 801d9a0:	2101      	movs	r1, #1
 801d9a2:	441a      	add	r2, r3
 801d9a4:	4620      	mov	r0, r4
 801d9a6:	9205      	str	r2, [sp, #20]
 801d9a8:	f000 fc30 	bl	801e20c <__i2b>
 801d9ac:	4607      	mov	r7, r0
 801d9ae:	2d00      	cmp	r5, #0
 801d9b0:	dd0c      	ble.n	801d9cc <_dtoa_r+0x754>
 801d9b2:	9b05      	ldr	r3, [sp, #20]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	dd09      	ble.n	801d9cc <_dtoa_r+0x754>
 801d9b8:	42ab      	cmp	r3, r5
 801d9ba:	9a04      	ldr	r2, [sp, #16]
 801d9bc:	bfa8      	it	ge
 801d9be:	462b      	movge	r3, r5
 801d9c0:	1ad2      	subs	r2, r2, r3
 801d9c2:	9204      	str	r2, [sp, #16]
 801d9c4:	9a05      	ldr	r2, [sp, #20]
 801d9c6:	1aed      	subs	r5, r5, r3
 801d9c8:	1ad3      	subs	r3, r2, r3
 801d9ca:	9305      	str	r3, [sp, #20]
 801d9cc:	9b07      	ldr	r3, [sp, #28]
 801d9ce:	b31b      	cbz	r3, 801da18 <_dtoa_r+0x7a0>
 801d9d0:	9b08      	ldr	r3, [sp, #32]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	f000 80af 	beq.w	801db36 <_dtoa_r+0x8be>
 801d9d8:	2e00      	cmp	r6, #0
 801d9da:	dd13      	ble.n	801da04 <_dtoa_r+0x78c>
 801d9dc:	4639      	mov	r1, r7
 801d9de:	4632      	mov	r2, r6
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	f000 fcd3 	bl	801e38c <__pow5mult>
 801d9e6:	ee18 2a10 	vmov	r2, s16
 801d9ea:	4601      	mov	r1, r0
 801d9ec:	4607      	mov	r7, r0
 801d9ee:	4620      	mov	r0, r4
 801d9f0:	f000 fc22 	bl	801e238 <__multiply>
 801d9f4:	ee18 1a10 	vmov	r1, s16
 801d9f8:	4680      	mov	r8, r0
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	f000 fb4e 	bl	801e09c <_Bfree>
 801da00:	ee08 8a10 	vmov	s16, r8
 801da04:	9b07      	ldr	r3, [sp, #28]
 801da06:	1b9a      	subs	r2, r3, r6
 801da08:	d006      	beq.n	801da18 <_dtoa_r+0x7a0>
 801da0a:	ee18 1a10 	vmov	r1, s16
 801da0e:	4620      	mov	r0, r4
 801da10:	f000 fcbc 	bl	801e38c <__pow5mult>
 801da14:	ee08 0a10 	vmov	s16, r0
 801da18:	2101      	movs	r1, #1
 801da1a:	4620      	mov	r0, r4
 801da1c:	f000 fbf6 	bl	801e20c <__i2b>
 801da20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da22:	2b00      	cmp	r3, #0
 801da24:	4606      	mov	r6, r0
 801da26:	f340 8088 	ble.w	801db3a <_dtoa_r+0x8c2>
 801da2a:	461a      	mov	r2, r3
 801da2c:	4601      	mov	r1, r0
 801da2e:	4620      	mov	r0, r4
 801da30:	f000 fcac 	bl	801e38c <__pow5mult>
 801da34:	9b06      	ldr	r3, [sp, #24]
 801da36:	2b01      	cmp	r3, #1
 801da38:	4606      	mov	r6, r0
 801da3a:	f340 8081 	ble.w	801db40 <_dtoa_r+0x8c8>
 801da3e:	f04f 0800 	mov.w	r8, #0
 801da42:	6933      	ldr	r3, [r6, #16]
 801da44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801da48:	6918      	ldr	r0, [r3, #16]
 801da4a:	f000 fb8f 	bl	801e16c <__hi0bits>
 801da4e:	f1c0 0020 	rsb	r0, r0, #32
 801da52:	9b05      	ldr	r3, [sp, #20]
 801da54:	4418      	add	r0, r3
 801da56:	f010 001f 	ands.w	r0, r0, #31
 801da5a:	f000 8092 	beq.w	801db82 <_dtoa_r+0x90a>
 801da5e:	f1c0 0320 	rsb	r3, r0, #32
 801da62:	2b04      	cmp	r3, #4
 801da64:	f340 808a 	ble.w	801db7c <_dtoa_r+0x904>
 801da68:	f1c0 001c 	rsb	r0, r0, #28
 801da6c:	9b04      	ldr	r3, [sp, #16]
 801da6e:	4403      	add	r3, r0
 801da70:	9304      	str	r3, [sp, #16]
 801da72:	9b05      	ldr	r3, [sp, #20]
 801da74:	4403      	add	r3, r0
 801da76:	4405      	add	r5, r0
 801da78:	9305      	str	r3, [sp, #20]
 801da7a:	9b04      	ldr	r3, [sp, #16]
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	dd07      	ble.n	801da90 <_dtoa_r+0x818>
 801da80:	ee18 1a10 	vmov	r1, s16
 801da84:	461a      	mov	r2, r3
 801da86:	4620      	mov	r0, r4
 801da88:	f000 fcda 	bl	801e440 <__lshift>
 801da8c:	ee08 0a10 	vmov	s16, r0
 801da90:	9b05      	ldr	r3, [sp, #20]
 801da92:	2b00      	cmp	r3, #0
 801da94:	dd05      	ble.n	801daa2 <_dtoa_r+0x82a>
 801da96:	4631      	mov	r1, r6
 801da98:	461a      	mov	r2, r3
 801da9a:	4620      	mov	r0, r4
 801da9c:	f000 fcd0 	bl	801e440 <__lshift>
 801daa0:	4606      	mov	r6, r0
 801daa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	d06e      	beq.n	801db86 <_dtoa_r+0x90e>
 801daa8:	ee18 0a10 	vmov	r0, s16
 801daac:	4631      	mov	r1, r6
 801daae:	f000 fd37 	bl	801e520 <__mcmp>
 801dab2:	2800      	cmp	r0, #0
 801dab4:	da67      	bge.n	801db86 <_dtoa_r+0x90e>
 801dab6:	9b00      	ldr	r3, [sp, #0]
 801dab8:	3b01      	subs	r3, #1
 801daba:	ee18 1a10 	vmov	r1, s16
 801dabe:	9300      	str	r3, [sp, #0]
 801dac0:	220a      	movs	r2, #10
 801dac2:	2300      	movs	r3, #0
 801dac4:	4620      	mov	r0, r4
 801dac6:	f000 fb0b 	bl	801e0e0 <__multadd>
 801daca:	9b08      	ldr	r3, [sp, #32]
 801dacc:	ee08 0a10 	vmov	s16, r0
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	f000 81b1 	beq.w	801de38 <_dtoa_r+0xbc0>
 801dad6:	2300      	movs	r3, #0
 801dad8:	4639      	mov	r1, r7
 801dada:	220a      	movs	r2, #10
 801dadc:	4620      	mov	r0, r4
 801dade:	f000 faff 	bl	801e0e0 <__multadd>
 801dae2:	9b02      	ldr	r3, [sp, #8]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	4607      	mov	r7, r0
 801dae8:	f300 808e 	bgt.w	801dc08 <_dtoa_r+0x990>
 801daec:	9b06      	ldr	r3, [sp, #24]
 801daee:	2b02      	cmp	r3, #2
 801daf0:	dc51      	bgt.n	801db96 <_dtoa_r+0x91e>
 801daf2:	e089      	b.n	801dc08 <_dtoa_r+0x990>
 801daf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801daf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dafa:	e74b      	b.n	801d994 <_dtoa_r+0x71c>
 801dafc:	9b03      	ldr	r3, [sp, #12]
 801dafe:	1e5e      	subs	r6, r3, #1
 801db00:	9b07      	ldr	r3, [sp, #28]
 801db02:	42b3      	cmp	r3, r6
 801db04:	bfbf      	itttt	lt
 801db06:	9b07      	ldrlt	r3, [sp, #28]
 801db08:	9607      	strlt	r6, [sp, #28]
 801db0a:	1af2      	sublt	r2, r6, r3
 801db0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801db0e:	bfb6      	itet	lt
 801db10:	189b      	addlt	r3, r3, r2
 801db12:	1b9e      	subge	r6, r3, r6
 801db14:	930a      	strlt	r3, [sp, #40]	; 0x28
 801db16:	9b03      	ldr	r3, [sp, #12]
 801db18:	bfb8      	it	lt
 801db1a:	2600      	movlt	r6, #0
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	bfb7      	itett	lt
 801db20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801db24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801db28:	1a9d      	sublt	r5, r3, r2
 801db2a:	2300      	movlt	r3, #0
 801db2c:	e734      	b.n	801d998 <_dtoa_r+0x720>
 801db2e:	9e07      	ldr	r6, [sp, #28]
 801db30:	9d04      	ldr	r5, [sp, #16]
 801db32:	9f08      	ldr	r7, [sp, #32]
 801db34:	e73b      	b.n	801d9ae <_dtoa_r+0x736>
 801db36:	9a07      	ldr	r2, [sp, #28]
 801db38:	e767      	b.n	801da0a <_dtoa_r+0x792>
 801db3a:	9b06      	ldr	r3, [sp, #24]
 801db3c:	2b01      	cmp	r3, #1
 801db3e:	dc18      	bgt.n	801db72 <_dtoa_r+0x8fa>
 801db40:	f1ba 0f00 	cmp.w	sl, #0
 801db44:	d115      	bne.n	801db72 <_dtoa_r+0x8fa>
 801db46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801db4a:	b993      	cbnz	r3, 801db72 <_dtoa_r+0x8fa>
 801db4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801db50:	0d1b      	lsrs	r3, r3, #20
 801db52:	051b      	lsls	r3, r3, #20
 801db54:	b183      	cbz	r3, 801db78 <_dtoa_r+0x900>
 801db56:	9b04      	ldr	r3, [sp, #16]
 801db58:	3301      	adds	r3, #1
 801db5a:	9304      	str	r3, [sp, #16]
 801db5c:	9b05      	ldr	r3, [sp, #20]
 801db5e:	3301      	adds	r3, #1
 801db60:	9305      	str	r3, [sp, #20]
 801db62:	f04f 0801 	mov.w	r8, #1
 801db66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db68:	2b00      	cmp	r3, #0
 801db6a:	f47f af6a 	bne.w	801da42 <_dtoa_r+0x7ca>
 801db6e:	2001      	movs	r0, #1
 801db70:	e76f      	b.n	801da52 <_dtoa_r+0x7da>
 801db72:	f04f 0800 	mov.w	r8, #0
 801db76:	e7f6      	b.n	801db66 <_dtoa_r+0x8ee>
 801db78:	4698      	mov	r8, r3
 801db7a:	e7f4      	b.n	801db66 <_dtoa_r+0x8ee>
 801db7c:	f43f af7d 	beq.w	801da7a <_dtoa_r+0x802>
 801db80:	4618      	mov	r0, r3
 801db82:	301c      	adds	r0, #28
 801db84:	e772      	b.n	801da6c <_dtoa_r+0x7f4>
 801db86:	9b03      	ldr	r3, [sp, #12]
 801db88:	2b00      	cmp	r3, #0
 801db8a:	dc37      	bgt.n	801dbfc <_dtoa_r+0x984>
 801db8c:	9b06      	ldr	r3, [sp, #24]
 801db8e:	2b02      	cmp	r3, #2
 801db90:	dd34      	ble.n	801dbfc <_dtoa_r+0x984>
 801db92:	9b03      	ldr	r3, [sp, #12]
 801db94:	9302      	str	r3, [sp, #8]
 801db96:	9b02      	ldr	r3, [sp, #8]
 801db98:	b96b      	cbnz	r3, 801dbb6 <_dtoa_r+0x93e>
 801db9a:	4631      	mov	r1, r6
 801db9c:	2205      	movs	r2, #5
 801db9e:	4620      	mov	r0, r4
 801dba0:	f000 fa9e 	bl	801e0e0 <__multadd>
 801dba4:	4601      	mov	r1, r0
 801dba6:	4606      	mov	r6, r0
 801dba8:	ee18 0a10 	vmov	r0, s16
 801dbac:	f000 fcb8 	bl	801e520 <__mcmp>
 801dbb0:	2800      	cmp	r0, #0
 801dbb2:	f73f adbb 	bgt.w	801d72c <_dtoa_r+0x4b4>
 801dbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbb8:	9d01      	ldr	r5, [sp, #4]
 801dbba:	43db      	mvns	r3, r3
 801dbbc:	9300      	str	r3, [sp, #0]
 801dbbe:	f04f 0800 	mov.w	r8, #0
 801dbc2:	4631      	mov	r1, r6
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	f000 fa69 	bl	801e09c <_Bfree>
 801dbca:	2f00      	cmp	r7, #0
 801dbcc:	f43f aea4 	beq.w	801d918 <_dtoa_r+0x6a0>
 801dbd0:	f1b8 0f00 	cmp.w	r8, #0
 801dbd4:	d005      	beq.n	801dbe2 <_dtoa_r+0x96a>
 801dbd6:	45b8      	cmp	r8, r7
 801dbd8:	d003      	beq.n	801dbe2 <_dtoa_r+0x96a>
 801dbda:	4641      	mov	r1, r8
 801dbdc:	4620      	mov	r0, r4
 801dbde:	f000 fa5d 	bl	801e09c <_Bfree>
 801dbe2:	4639      	mov	r1, r7
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f000 fa59 	bl	801e09c <_Bfree>
 801dbea:	e695      	b.n	801d918 <_dtoa_r+0x6a0>
 801dbec:	2600      	movs	r6, #0
 801dbee:	4637      	mov	r7, r6
 801dbf0:	e7e1      	b.n	801dbb6 <_dtoa_r+0x93e>
 801dbf2:	9700      	str	r7, [sp, #0]
 801dbf4:	4637      	mov	r7, r6
 801dbf6:	e599      	b.n	801d72c <_dtoa_r+0x4b4>
 801dbf8:	40240000 	.word	0x40240000
 801dbfc:	9b08      	ldr	r3, [sp, #32]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	f000 80ca 	beq.w	801dd98 <_dtoa_r+0xb20>
 801dc04:	9b03      	ldr	r3, [sp, #12]
 801dc06:	9302      	str	r3, [sp, #8]
 801dc08:	2d00      	cmp	r5, #0
 801dc0a:	dd05      	ble.n	801dc18 <_dtoa_r+0x9a0>
 801dc0c:	4639      	mov	r1, r7
 801dc0e:	462a      	mov	r2, r5
 801dc10:	4620      	mov	r0, r4
 801dc12:	f000 fc15 	bl	801e440 <__lshift>
 801dc16:	4607      	mov	r7, r0
 801dc18:	f1b8 0f00 	cmp.w	r8, #0
 801dc1c:	d05b      	beq.n	801dcd6 <_dtoa_r+0xa5e>
 801dc1e:	6879      	ldr	r1, [r7, #4]
 801dc20:	4620      	mov	r0, r4
 801dc22:	f000 f9fb 	bl	801e01c <_Balloc>
 801dc26:	4605      	mov	r5, r0
 801dc28:	b928      	cbnz	r0, 801dc36 <_dtoa_r+0x9be>
 801dc2a:	4b87      	ldr	r3, [pc, #540]	; (801de48 <_dtoa_r+0xbd0>)
 801dc2c:	4602      	mov	r2, r0
 801dc2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801dc32:	f7ff bb3b 	b.w	801d2ac <_dtoa_r+0x34>
 801dc36:	693a      	ldr	r2, [r7, #16]
 801dc38:	3202      	adds	r2, #2
 801dc3a:	0092      	lsls	r2, r2, #2
 801dc3c:	f107 010c 	add.w	r1, r7, #12
 801dc40:	300c      	adds	r0, #12
 801dc42:	f7fe fba7 	bl	801c394 <memcpy>
 801dc46:	2201      	movs	r2, #1
 801dc48:	4629      	mov	r1, r5
 801dc4a:	4620      	mov	r0, r4
 801dc4c:	f000 fbf8 	bl	801e440 <__lshift>
 801dc50:	9b01      	ldr	r3, [sp, #4]
 801dc52:	f103 0901 	add.w	r9, r3, #1
 801dc56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801dc5a:	4413      	add	r3, r2
 801dc5c:	9305      	str	r3, [sp, #20]
 801dc5e:	f00a 0301 	and.w	r3, sl, #1
 801dc62:	46b8      	mov	r8, r7
 801dc64:	9304      	str	r3, [sp, #16]
 801dc66:	4607      	mov	r7, r0
 801dc68:	4631      	mov	r1, r6
 801dc6a:	ee18 0a10 	vmov	r0, s16
 801dc6e:	f7ff fa77 	bl	801d160 <quorem>
 801dc72:	4641      	mov	r1, r8
 801dc74:	9002      	str	r0, [sp, #8]
 801dc76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801dc7a:	ee18 0a10 	vmov	r0, s16
 801dc7e:	f000 fc4f 	bl	801e520 <__mcmp>
 801dc82:	463a      	mov	r2, r7
 801dc84:	9003      	str	r0, [sp, #12]
 801dc86:	4631      	mov	r1, r6
 801dc88:	4620      	mov	r0, r4
 801dc8a:	f000 fc65 	bl	801e558 <__mdiff>
 801dc8e:	68c2      	ldr	r2, [r0, #12]
 801dc90:	f109 3bff 	add.w	fp, r9, #4294967295
 801dc94:	4605      	mov	r5, r0
 801dc96:	bb02      	cbnz	r2, 801dcda <_dtoa_r+0xa62>
 801dc98:	4601      	mov	r1, r0
 801dc9a:	ee18 0a10 	vmov	r0, s16
 801dc9e:	f000 fc3f 	bl	801e520 <__mcmp>
 801dca2:	4602      	mov	r2, r0
 801dca4:	4629      	mov	r1, r5
 801dca6:	4620      	mov	r0, r4
 801dca8:	9207      	str	r2, [sp, #28]
 801dcaa:	f000 f9f7 	bl	801e09c <_Bfree>
 801dcae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801dcb2:	ea43 0102 	orr.w	r1, r3, r2
 801dcb6:	9b04      	ldr	r3, [sp, #16]
 801dcb8:	430b      	orrs	r3, r1
 801dcba:	464d      	mov	r5, r9
 801dcbc:	d10f      	bne.n	801dcde <_dtoa_r+0xa66>
 801dcbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dcc2:	d02a      	beq.n	801dd1a <_dtoa_r+0xaa2>
 801dcc4:	9b03      	ldr	r3, [sp, #12]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	dd02      	ble.n	801dcd0 <_dtoa_r+0xa58>
 801dcca:	9b02      	ldr	r3, [sp, #8]
 801dccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801dcd0:	f88b a000 	strb.w	sl, [fp]
 801dcd4:	e775      	b.n	801dbc2 <_dtoa_r+0x94a>
 801dcd6:	4638      	mov	r0, r7
 801dcd8:	e7ba      	b.n	801dc50 <_dtoa_r+0x9d8>
 801dcda:	2201      	movs	r2, #1
 801dcdc:	e7e2      	b.n	801dca4 <_dtoa_r+0xa2c>
 801dcde:	9b03      	ldr	r3, [sp, #12]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	db04      	blt.n	801dcee <_dtoa_r+0xa76>
 801dce4:	9906      	ldr	r1, [sp, #24]
 801dce6:	430b      	orrs	r3, r1
 801dce8:	9904      	ldr	r1, [sp, #16]
 801dcea:	430b      	orrs	r3, r1
 801dcec:	d122      	bne.n	801dd34 <_dtoa_r+0xabc>
 801dcee:	2a00      	cmp	r2, #0
 801dcf0:	ddee      	ble.n	801dcd0 <_dtoa_r+0xa58>
 801dcf2:	ee18 1a10 	vmov	r1, s16
 801dcf6:	2201      	movs	r2, #1
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	f000 fba1 	bl	801e440 <__lshift>
 801dcfe:	4631      	mov	r1, r6
 801dd00:	ee08 0a10 	vmov	s16, r0
 801dd04:	f000 fc0c 	bl	801e520 <__mcmp>
 801dd08:	2800      	cmp	r0, #0
 801dd0a:	dc03      	bgt.n	801dd14 <_dtoa_r+0xa9c>
 801dd0c:	d1e0      	bne.n	801dcd0 <_dtoa_r+0xa58>
 801dd0e:	f01a 0f01 	tst.w	sl, #1
 801dd12:	d0dd      	beq.n	801dcd0 <_dtoa_r+0xa58>
 801dd14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dd18:	d1d7      	bne.n	801dcca <_dtoa_r+0xa52>
 801dd1a:	2339      	movs	r3, #57	; 0x39
 801dd1c:	f88b 3000 	strb.w	r3, [fp]
 801dd20:	462b      	mov	r3, r5
 801dd22:	461d      	mov	r5, r3
 801dd24:	3b01      	subs	r3, #1
 801dd26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dd2a:	2a39      	cmp	r2, #57	; 0x39
 801dd2c:	d071      	beq.n	801de12 <_dtoa_r+0xb9a>
 801dd2e:	3201      	adds	r2, #1
 801dd30:	701a      	strb	r2, [r3, #0]
 801dd32:	e746      	b.n	801dbc2 <_dtoa_r+0x94a>
 801dd34:	2a00      	cmp	r2, #0
 801dd36:	dd07      	ble.n	801dd48 <_dtoa_r+0xad0>
 801dd38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dd3c:	d0ed      	beq.n	801dd1a <_dtoa_r+0xaa2>
 801dd3e:	f10a 0301 	add.w	r3, sl, #1
 801dd42:	f88b 3000 	strb.w	r3, [fp]
 801dd46:	e73c      	b.n	801dbc2 <_dtoa_r+0x94a>
 801dd48:	9b05      	ldr	r3, [sp, #20]
 801dd4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801dd4e:	4599      	cmp	r9, r3
 801dd50:	d047      	beq.n	801dde2 <_dtoa_r+0xb6a>
 801dd52:	ee18 1a10 	vmov	r1, s16
 801dd56:	2300      	movs	r3, #0
 801dd58:	220a      	movs	r2, #10
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f000 f9c0 	bl	801e0e0 <__multadd>
 801dd60:	45b8      	cmp	r8, r7
 801dd62:	ee08 0a10 	vmov	s16, r0
 801dd66:	f04f 0300 	mov.w	r3, #0
 801dd6a:	f04f 020a 	mov.w	r2, #10
 801dd6e:	4641      	mov	r1, r8
 801dd70:	4620      	mov	r0, r4
 801dd72:	d106      	bne.n	801dd82 <_dtoa_r+0xb0a>
 801dd74:	f000 f9b4 	bl	801e0e0 <__multadd>
 801dd78:	4680      	mov	r8, r0
 801dd7a:	4607      	mov	r7, r0
 801dd7c:	f109 0901 	add.w	r9, r9, #1
 801dd80:	e772      	b.n	801dc68 <_dtoa_r+0x9f0>
 801dd82:	f000 f9ad 	bl	801e0e0 <__multadd>
 801dd86:	4639      	mov	r1, r7
 801dd88:	4680      	mov	r8, r0
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	220a      	movs	r2, #10
 801dd8e:	4620      	mov	r0, r4
 801dd90:	f000 f9a6 	bl	801e0e0 <__multadd>
 801dd94:	4607      	mov	r7, r0
 801dd96:	e7f1      	b.n	801dd7c <_dtoa_r+0xb04>
 801dd98:	9b03      	ldr	r3, [sp, #12]
 801dd9a:	9302      	str	r3, [sp, #8]
 801dd9c:	9d01      	ldr	r5, [sp, #4]
 801dd9e:	ee18 0a10 	vmov	r0, s16
 801dda2:	4631      	mov	r1, r6
 801dda4:	f7ff f9dc 	bl	801d160 <quorem>
 801dda8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ddac:	9b01      	ldr	r3, [sp, #4]
 801ddae:	f805 ab01 	strb.w	sl, [r5], #1
 801ddb2:	1aea      	subs	r2, r5, r3
 801ddb4:	9b02      	ldr	r3, [sp, #8]
 801ddb6:	4293      	cmp	r3, r2
 801ddb8:	dd09      	ble.n	801ddce <_dtoa_r+0xb56>
 801ddba:	ee18 1a10 	vmov	r1, s16
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	220a      	movs	r2, #10
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f000 f98c 	bl	801e0e0 <__multadd>
 801ddc8:	ee08 0a10 	vmov	s16, r0
 801ddcc:	e7e7      	b.n	801dd9e <_dtoa_r+0xb26>
 801ddce:	9b02      	ldr	r3, [sp, #8]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	bfc8      	it	gt
 801ddd4:	461d      	movgt	r5, r3
 801ddd6:	9b01      	ldr	r3, [sp, #4]
 801ddd8:	bfd8      	it	le
 801ddda:	2501      	movle	r5, #1
 801dddc:	441d      	add	r5, r3
 801ddde:	f04f 0800 	mov.w	r8, #0
 801dde2:	ee18 1a10 	vmov	r1, s16
 801dde6:	2201      	movs	r2, #1
 801dde8:	4620      	mov	r0, r4
 801ddea:	f000 fb29 	bl	801e440 <__lshift>
 801ddee:	4631      	mov	r1, r6
 801ddf0:	ee08 0a10 	vmov	s16, r0
 801ddf4:	f000 fb94 	bl	801e520 <__mcmp>
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	dc91      	bgt.n	801dd20 <_dtoa_r+0xaa8>
 801ddfc:	d102      	bne.n	801de04 <_dtoa_r+0xb8c>
 801ddfe:	f01a 0f01 	tst.w	sl, #1
 801de02:	d18d      	bne.n	801dd20 <_dtoa_r+0xaa8>
 801de04:	462b      	mov	r3, r5
 801de06:	461d      	mov	r5, r3
 801de08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de0c:	2a30      	cmp	r2, #48	; 0x30
 801de0e:	d0fa      	beq.n	801de06 <_dtoa_r+0xb8e>
 801de10:	e6d7      	b.n	801dbc2 <_dtoa_r+0x94a>
 801de12:	9a01      	ldr	r2, [sp, #4]
 801de14:	429a      	cmp	r2, r3
 801de16:	d184      	bne.n	801dd22 <_dtoa_r+0xaaa>
 801de18:	9b00      	ldr	r3, [sp, #0]
 801de1a:	3301      	adds	r3, #1
 801de1c:	9300      	str	r3, [sp, #0]
 801de1e:	2331      	movs	r3, #49	; 0x31
 801de20:	7013      	strb	r3, [r2, #0]
 801de22:	e6ce      	b.n	801dbc2 <_dtoa_r+0x94a>
 801de24:	4b09      	ldr	r3, [pc, #36]	; (801de4c <_dtoa_r+0xbd4>)
 801de26:	f7ff ba95 	b.w	801d354 <_dtoa_r+0xdc>
 801de2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	f47f aa6e 	bne.w	801d30e <_dtoa_r+0x96>
 801de32:	4b07      	ldr	r3, [pc, #28]	; (801de50 <_dtoa_r+0xbd8>)
 801de34:	f7ff ba8e 	b.w	801d354 <_dtoa_r+0xdc>
 801de38:	9b02      	ldr	r3, [sp, #8]
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	dcae      	bgt.n	801dd9c <_dtoa_r+0xb24>
 801de3e:	9b06      	ldr	r3, [sp, #24]
 801de40:	2b02      	cmp	r3, #2
 801de42:	f73f aea8 	bgt.w	801db96 <_dtoa_r+0x91e>
 801de46:	e7a9      	b.n	801dd9c <_dtoa_r+0xb24>
 801de48:	0801f46f 	.word	0x0801f46f
 801de4c:	0801f3cc 	.word	0x0801f3cc
 801de50:	0801f3f0 	.word	0x0801f3f0

0801de54 <__sflush_r>:
 801de54:	898a      	ldrh	r2, [r1, #12]
 801de56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de5a:	4605      	mov	r5, r0
 801de5c:	0710      	lsls	r0, r2, #28
 801de5e:	460c      	mov	r4, r1
 801de60:	d458      	bmi.n	801df14 <__sflush_r+0xc0>
 801de62:	684b      	ldr	r3, [r1, #4]
 801de64:	2b00      	cmp	r3, #0
 801de66:	dc05      	bgt.n	801de74 <__sflush_r+0x20>
 801de68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	dc02      	bgt.n	801de74 <__sflush_r+0x20>
 801de6e:	2000      	movs	r0, #0
 801de70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801de76:	2e00      	cmp	r6, #0
 801de78:	d0f9      	beq.n	801de6e <__sflush_r+0x1a>
 801de7a:	2300      	movs	r3, #0
 801de7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801de80:	682f      	ldr	r7, [r5, #0]
 801de82:	602b      	str	r3, [r5, #0]
 801de84:	d032      	beq.n	801deec <__sflush_r+0x98>
 801de86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801de88:	89a3      	ldrh	r3, [r4, #12]
 801de8a:	075a      	lsls	r2, r3, #29
 801de8c:	d505      	bpl.n	801de9a <__sflush_r+0x46>
 801de8e:	6863      	ldr	r3, [r4, #4]
 801de90:	1ac0      	subs	r0, r0, r3
 801de92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de94:	b10b      	cbz	r3, 801de9a <__sflush_r+0x46>
 801de96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801de98:	1ac0      	subs	r0, r0, r3
 801de9a:	2300      	movs	r3, #0
 801de9c:	4602      	mov	r2, r0
 801de9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dea0:	6a21      	ldr	r1, [r4, #32]
 801dea2:	4628      	mov	r0, r5
 801dea4:	47b0      	blx	r6
 801dea6:	1c43      	adds	r3, r0, #1
 801dea8:	89a3      	ldrh	r3, [r4, #12]
 801deaa:	d106      	bne.n	801deba <__sflush_r+0x66>
 801deac:	6829      	ldr	r1, [r5, #0]
 801deae:	291d      	cmp	r1, #29
 801deb0:	d82c      	bhi.n	801df0c <__sflush_r+0xb8>
 801deb2:	4a2a      	ldr	r2, [pc, #168]	; (801df5c <__sflush_r+0x108>)
 801deb4:	40ca      	lsrs	r2, r1
 801deb6:	07d6      	lsls	r6, r2, #31
 801deb8:	d528      	bpl.n	801df0c <__sflush_r+0xb8>
 801deba:	2200      	movs	r2, #0
 801debc:	6062      	str	r2, [r4, #4]
 801debe:	04d9      	lsls	r1, r3, #19
 801dec0:	6922      	ldr	r2, [r4, #16]
 801dec2:	6022      	str	r2, [r4, #0]
 801dec4:	d504      	bpl.n	801ded0 <__sflush_r+0x7c>
 801dec6:	1c42      	adds	r2, r0, #1
 801dec8:	d101      	bne.n	801dece <__sflush_r+0x7a>
 801deca:	682b      	ldr	r3, [r5, #0]
 801decc:	b903      	cbnz	r3, 801ded0 <__sflush_r+0x7c>
 801dece:	6560      	str	r0, [r4, #84]	; 0x54
 801ded0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ded2:	602f      	str	r7, [r5, #0]
 801ded4:	2900      	cmp	r1, #0
 801ded6:	d0ca      	beq.n	801de6e <__sflush_r+0x1a>
 801ded8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dedc:	4299      	cmp	r1, r3
 801dede:	d002      	beq.n	801dee6 <__sflush_r+0x92>
 801dee0:	4628      	mov	r0, r5
 801dee2:	f7fe fa6d 	bl	801c3c0 <_free_r>
 801dee6:	2000      	movs	r0, #0
 801dee8:	6360      	str	r0, [r4, #52]	; 0x34
 801deea:	e7c1      	b.n	801de70 <__sflush_r+0x1c>
 801deec:	6a21      	ldr	r1, [r4, #32]
 801deee:	2301      	movs	r3, #1
 801def0:	4628      	mov	r0, r5
 801def2:	47b0      	blx	r6
 801def4:	1c41      	adds	r1, r0, #1
 801def6:	d1c7      	bne.n	801de88 <__sflush_r+0x34>
 801def8:	682b      	ldr	r3, [r5, #0]
 801defa:	2b00      	cmp	r3, #0
 801defc:	d0c4      	beq.n	801de88 <__sflush_r+0x34>
 801defe:	2b1d      	cmp	r3, #29
 801df00:	d001      	beq.n	801df06 <__sflush_r+0xb2>
 801df02:	2b16      	cmp	r3, #22
 801df04:	d101      	bne.n	801df0a <__sflush_r+0xb6>
 801df06:	602f      	str	r7, [r5, #0]
 801df08:	e7b1      	b.n	801de6e <__sflush_r+0x1a>
 801df0a:	89a3      	ldrh	r3, [r4, #12]
 801df0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df10:	81a3      	strh	r3, [r4, #12]
 801df12:	e7ad      	b.n	801de70 <__sflush_r+0x1c>
 801df14:	690f      	ldr	r7, [r1, #16]
 801df16:	2f00      	cmp	r7, #0
 801df18:	d0a9      	beq.n	801de6e <__sflush_r+0x1a>
 801df1a:	0793      	lsls	r3, r2, #30
 801df1c:	680e      	ldr	r6, [r1, #0]
 801df1e:	bf08      	it	eq
 801df20:	694b      	ldreq	r3, [r1, #20]
 801df22:	600f      	str	r7, [r1, #0]
 801df24:	bf18      	it	ne
 801df26:	2300      	movne	r3, #0
 801df28:	eba6 0807 	sub.w	r8, r6, r7
 801df2c:	608b      	str	r3, [r1, #8]
 801df2e:	f1b8 0f00 	cmp.w	r8, #0
 801df32:	dd9c      	ble.n	801de6e <__sflush_r+0x1a>
 801df34:	6a21      	ldr	r1, [r4, #32]
 801df36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801df38:	4643      	mov	r3, r8
 801df3a:	463a      	mov	r2, r7
 801df3c:	4628      	mov	r0, r5
 801df3e:	47b0      	blx	r6
 801df40:	2800      	cmp	r0, #0
 801df42:	dc06      	bgt.n	801df52 <__sflush_r+0xfe>
 801df44:	89a3      	ldrh	r3, [r4, #12]
 801df46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df4a:	81a3      	strh	r3, [r4, #12]
 801df4c:	f04f 30ff 	mov.w	r0, #4294967295
 801df50:	e78e      	b.n	801de70 <__sflush_r+0x1c>
 801df52:	4407      	add	r7, r0
 801df54:	eba8 0800 	sub.w	r8, r8, r0
 801df58:	e7e9      	b.n	801df2e <__sflush_r+0xda>
 801df5a:	bf00      	nop
 801df5c:	20400001 	.word	0x20400001

0801df60 <_fflush_r>:
 801df60:	b538      	push	{r3, r4, r5, lr}
 801df62:	690b      	ldr	r3, [r1, #16]
 801df64:	4605      	mov	r5, r0
 801df66:	460c      	mov	r4, r1
 801df68:	b913      	cbnz	r3, 801df70 <_fflush_r+0x10>
 801df6a:	2500      	movs	r5, #0
 801df6c:	4628      	mov	r0, r5
 801df6e:	bd38      	pop	{r3, r4, r5, pc}
 801df70:	b118      	cbz	r0, 801df7a <_fflush_r+0x1a>
 801df72:	6983      	ldr	r3, [r0, #24]
 801df74:	b90b      	cbnz	r3, 801df7a <_fflush_r+0x1a>
 801df76:	f7fe f937 	bl	801c1e8 <__sinit>
 801df7a:	4b14      	ldr	r3, [pc, #80]	; (801dfcc <_fflush_r+0x6c>)
 801df7c:	429c      	cmp	r4, r3
 801df7e:	d11b      	bne.n	801dfb8 <_fflush_r+0x58>
 801df80:	686c      	ldr	r4, [r5, #4]
 801df82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d0ef      	beq.n	801df6a <_fflush_r+0xa>
 801df8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801df8c:	07d0      	lsls	r0, r2, #31
 801df8e:	d404      	bmi.n	801df9a <_fflush_r+0x3a>
 801df90:	0599      	lsls	r1, r3, #22
 801df92:	d402      	bmi.n	801df9a <_fflush_r+0x3a>
 801df94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df96:	f7fe f9ea 	bl	801c36e <__retarget_lock_acquire_recursive>
 801df9a:	4628      	mov	r0, r5
 801df9c:	4621      	mov	r1, r4
 801df9e:	f7ff ff59 	bl	801de54 <__sflush_r>
 801dfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dfa4:	07da      	lsls	r2, r3, #31
 801dfa6:	4605      	mov	r5, r0
 801dfa8:	d4e0      	bmi.n	801df6c <_fflush_r+0xc>
 801dfaa:	89a3      	ldrh	r3, [r4, #12]
 801dfac:	059b      	lsls	r3, r3, #22
 801dfae:	d4dd      	bmi.n	801df6c <_fflush_r+0xc>
 801dfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dfb2:	f7fe f9de 	bl	801c372 <__retarget_lock_release_recursive>
 801dfb6:	e7d9      	b.n	801df6c <_fflush_r+0xc>
 801dfb8:	4b05      	ldr	r3, [pc, #20]	; (801dfd0 <_fflush_r+0x70>)
 801dfba:	429c      	cmp	r4, r3
 801dfbc:	d101      	bne.n	801dfc2 <_fflush_r+0x62>
 801dfbe:	68ac      	ldr	r4, [r5, #8]
 801dfc0:	e7df      	b.n	801df82 <_fflush_r+0x22>
 801dfc2:	4b04      	ldr	r3, [pc, #16]	; (801dfd4 <_fflush_r+0x74>)
 801dfc4:	429c      	cmp	r4, r3
 801dfc6:	bf08      	it	eq
 801dfc8:	68ec      	ldreq	r4, [r5, #12]
 801dfca:	e7da      	b.n	801df82 <_fflush_r+0x22>
 801dfcc:	0801f378 	.word	0x0801f378
 801dfd0:	0801f398 	.word	0x0801f398
 801dfd4:	0801f358 	.word	0x0801f358

0801dfd8 <_localeconv_r>:
 801dfd8:	4800      	ldr	r0, [pc, #0]	; (801dfdc <_localeconv_r+0x4>)
 801dfda:	4770      	bx	lr
 801dfdc:	20000198 	.word	0x20000198

0801dfe0 <_lseek_r>:
 801dfe0:	b538      	push	{r3, r4, r5, lr}
 801dfe2:	4d07      	ldr	r5, [pc, #28]	; (801e000 <_lseek_r+0x20>)
 801dfe4:	4604      	mov	r4, r0
 801dfe6:	4608      	mov	r0, r1
 801dfe8:	4611      	mov	r1, r2
 801dfea:	2200      	movs	r2, #0
 801dfec:	602a      	str	r2, [r5, #0]
 801dfee:	461a      	mov	r2, r3
 801dff0:	f7f1 fe9a 	bl	800fd28 <_lseek>
 801dff4:	1c43      	adds	r3, r0, #1
 801dff6:	d102      	bne.n	801dffe <_lseek_r+0x1e>
 801dff8:	682b      	ldr	r3, [r5, #0]
 801dffa:	b103      	cbz	r3, 801dffe <_lseek_r+0x1e>
 801dffc:	6023      	str	r3, [r4, #0]
 801dffe:	bd38      	pop	{r3, r4, r5, pc}
 801e000:	20007480 	.word	0x20007480

0801e004 <__malloc_lock>:
 801e004:	4801      	ldr	r0, [pc, #4]	; (801e00c <__malloc_lock+0x8>)
 801e006:	f7fe b9b2 	b.w	801c36e <__retarget_lock_acquire_recursive>
 801e00a:	bf00      	nop
 801e00c:	20007475 	.word	0x20007475

0801e010 <__malloc_unlock>:
 801e010:	4801      	ldr	r0, [pc, #4]	; (801e018 <__malloc_unlock+0x8>)
 801e012:	f7fe b9ae 	b.w	801c372 <__retarget_lock_release_recursive>
 801e016:	bf00      	nop
 801e018:	20007475 	.word	0x20007475

0801e01c <_Balloc>:
 801e01c:	b570      	push	{r4, r5, r6, lr}
 801e01e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e020:	4604      	mov	r4, r0
 801e022:	460d      	mov	r5, r1
 801e024:	b976      	cbnz	r6, 801e044 <_Balloc+0x28>
 801e026:	2010      	movs	r0, #16
 801e028:	f7fe f9a4 	bl	801c374 <malloc>
 801e02c:	4602      	mov	r2, r0
 801e02e:	6260      	str	r0, [r4, #36]	; 0x24
 801e030:	b920      	cbnz	r0, 801e03c <_Balloc+0x20>
 801e032:	4b18      	ldr	r3, [pc, #96]	; (801e094 <_Balloc+0x78>)
 801e034:	4818      	ldr	r0, [pc, #96]	; (801e098 <_Balloc+0x7c>)
 801e036:	2166      	movs	r1, #102	; 0x66
 801e038:	f000 fb9c 	bl	801e774 <__assert_func>
 801e03c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e040:	6006      	str	r6, [r0, #0]
 801e042:	60c6      	str	r6, [r0, #12]
 801e044:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e046:	68f3      	ldr	r3, [r6, #12]
 801e048:	b183      	cbz	r3, 801e06c <_Balloc+0x50>
 801e04a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e04c:	68db      	ldr	r3, [r3, #12]
 801e04e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e052:	b9b8      	cbnz	r0, 801e084 <_Balloc+0x68>
 801e054:	2101      	movs	r1, #1
 801e056:	fa01 f605 	lsl.w	r6, r1, r5
 801e05a:	1d72      	adds	r2, r6, #5
 801e05c:	0092      	lsls	r2, r2, #2
 801e05e:	4620      	mov	r0, r4
 801e060:	f000 fb60 	bl	801e724 <_calloc_r>
 801e064:	b160      	cbz	r0, 801e080 <_Balloc+0x64>
 801e066:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e06a:	e00e      	b.n	801e08a <_Balloc+0x6e>
 801e06c:	2221      	movs	r2, #33	; 0x21
 801e06e:	2104      	movs	r1, #4
 801e070:	4620      	mov	r0, r4
 801e072:	f000 fb57 	bl	801e724 <_calloc_r>
 801e076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e078:	60f0      	str	r0, [r6, #12]
 801e07a:	68db      	ldr	r3, [r3, #12]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d1e4      	bne.n	801e04a <_Balloc+0x2e>
 801e080:	2000      	movs	r0, #0
 801e082:	bd70      	pop	{r4, r5, r6, pc}
 801e084:	6802      	ldr	r2, [r0, #0]
 801e086:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e08a:	2300      	movs	r3, #0
 801e08c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e090:	e7f7      	b.n	801e082 <_Balloc+0x66>
 801e092:	bf00      	nop
 801e094:	0801f3fd 	.word	0x0801f3fd
 801e098:	0801f480 	.word	0x0801f480

0801e09c <_Bfree>:
 801e09c:	b570      	push	{r4, r5, r6, lr}
 801e09e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	460c      	mov	r4, r1
 801e0a4:	b976      	cbnz	r6, 801e0c4 <_Bfree+0x28>
 801e0a6:	2010      	movs	r0, #16
 801e0a8:	f7fe f964 	bl	801c374 <malloc>
 801e0ac:	4602      	mov	r2, r0
 801e0ae:	6268      	str	r0, [r5, #36]	; 0x24
 801e0b0:	b920      	cbnz	r0, 801e0bc <_Bfree+0x20>
 801e0b2:	4b09      	ldr	r3, [pc, #36]	; (801e0d8 <_Bfree+0x3c>)
 801e0b4:	4809      	ldr	r0, [pc, #36]	; (801e0dc <_Bfree+0x40>)
 801e0b6:	218a      	movs	r1, #138	; 0x8a
 801e0b8:	f000 fb5c 	bl	801e774 <__assert_func>
 801e0bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e0c0:	6006      	str	r6, [r0, #0]
 801e0c2:	60c6      	str	r6, [r0, #12]
 801e0c4:	b13c      	cbz	r4, 801e0d6 <_Bfree+0x3a>
 801e0c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e0c8:	6862      	ldr	r2, [r4, #4]
 801e0ca:	68db      	ldr	r3, [r3, #12]
 801e0cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e0d0:	6021      	str	r1, [r4, #0]
 801e0d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e0d6:	bd70      	pop	{r4, r5, r6, pc}
 801e0d8:	0801f3fd 	.word	0x0801f3fd
 801e0dc:	0801f480 	.word	0x0801f480

0801e0e0 <__multadd>:
 801e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0e4:	690d      	ldr	r5, [r1, #16]
 801e0e6:	4607      	mov	r7, r0
 801e0e8:	460c      	mov	r4, r1
 801e0ea:	461e      	mov	r6, r3
 801e0ec:	f101 0c14 	add.w	ip, r1, #20
 801e0f0:	2000      	movs	r0, #0
 801e0f2:	f8dc 3000 	ldr.w	r3, [ip]
 801e0f6:	b299      	uxth	r1, r3
 801e0f8:	fb02 6101 	mla	r1, r2, r1, r6
 801e0fc:	0c1e      	lsrs	r6, r3, #16
 801e0fe:	0c0b      	lsrs	r3, r1, #16
 801e100:	fb02 3306 	mla	r3, r2, r6, r3
 801e104:	b289      	uxth	r1, r1
 801e106:	3001      	adds	r0, #1
 801e108:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e10c:	4285      	cmp	r5, r0
 801e10e:	f84c 1b04 	str.w	r1, [ip], #4
 801e112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e116:	dcec      	bgt.n	801e0f2 <__multadd+0x12>
 801e118:	b30e      	cbz	r6, 801e15e <__multadd+0x7e>
 801e11a:	68a3      	ldr	r3, [r4, #8]
 801e11c:	42ab      	cmp	r3, r5
 801e11e:	dc19      	bgt.n	801e154 <__multadd+0x74>
 801e120:	6861      	ldr	r1, [r4, #4]
 801e122:	4638      	mov	r0, r7
 801e124:	3101      	adds	r1, #1
 801e126:	f7ff ff79 	bl	801e01c <_Balloc>
 801e12a:	4680      	mov	r8, r0
 801e12c:	b928      	cbnz	r0, 801e13a <__multadd+0x5a>
 801e12e:	4602      	mov	r2, r0
 801e130:	4b0c      	ldr	r3, [pc, #48]	; (801e164 <__multadd+0x84>)
 801e132:	480d      	ldr	r0, [pc, #52]	; (801e168 <__multadd+0x88>)
 801e134:	21b5      	movs	r1, #181	; 0xb5
 801e136:	f000 fb1d 	bl	801e774 <__assert_func>
 801e13a:	6922      	ldr	r2, [r4, #16]
 801e13c:	3202      	adds	r2, #2
 801e13e:	f104 010c 	add.w	r1, r4, #12
 801e142:	0092      	lsls	r2, r2, #2
 801e144:	300c      	adds	r0, #12
 801e146:	f7fe f925 	bl	801c394 <memcpy>
 801e14a:	4621      	mov	r1, r4
 801e14c:	4638      	mov	r0, r7
 801e14e:	f7ff ffa5 	bl	801e09c <_Bfree>
 801e152:	4644      	mov	r4, r8
 801e154:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e158:	3501      	adds	r5, #1
 801e15a:	615e      	str	r6, [r3, #20]
 801e15c:	6125      	str	r5, [r4, #16]
 801e15e:	4620      	mov	r0, r4
 801e160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e164:	0801f46f 	.word	0x0801f46f
 801e168:	0801f480 	.word	0x0801f480

0801e16c <__hi0bits>:
 801e16c:	0c03      	lsrs	r3, r0, #16
 801e16e:	041b      	lsls	r3, r3, #16
 801e170:	b9d3      	cbnz	r3, 801e1a8 <__hi0bits+0x3c>
 801e172:	0400      	lsls	r0, r0, #16
 801e174:	2310      	movs	r3, #16
 801e176:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e17a:	bf04      	itt	eq
 801e17c:	0200      	lsleq	r0, r0, #8
 801e17e:	3308      	addeq	r3, #8
 801e180:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e184:	bf04      	itt	eq
 801e186:	0100      	lsleq	r0, r0, #4
 801e188:	3304      	addeq	r3, #4
 801e18a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e18e:	bf04      	itt	eq
 801e190:	0080      	lsleq	r0, r0, #2
 801e192:	3302      	addeq	r3, #2
 801e194:	2800      	cmp	r0, #0
 801e196:	db05      	blt.n	801e1a4 <__hi0bits+0x38>
 801e198:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e19c:	f103 0301 	add.w	r3, r3, #1
 801e1a0:	bf08      	it	eq
 801e1a2:	2320      	moveq	r3, #32
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	4770      	bx	lr
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	e7e4      	b.n	801e176 <__hi0bits+0xa>

0801e1ac <__lo0bits>:
 801e1ac:	6803      	ldr	r3, [r0, #0]
 801e1ae:	f013 0207 	ands.w	r2, r3, #7
 801e1b2:	4601      	mov	r1, r0
 801e1b4:	d00b      	beq.n	801e1ce <__lo0bits+0x22>
 801e1b6:	07da      	lsls	r2, r3, #31
 801e1b8:	d423      	bmi.n	801e202 <__lo0bits+0x56>
 801e1ba:	0798      	lsls	r0, r3, #30
 801e1bc:	bf49      	itett	mi
 801e1be:	085b      	lsrmi	r3, r3, #1
 801e1c0:	089b      	lsrpl	r3, r3, #2
 801e1c2:	2001      	movmi	r0, #1
 801e1c4:	600b      	strmi	r3, [r1, #0]
 801e1c6:	bf5c      	itt	pl
 801e1c8:	600b      	strpl	r3, [r1, #0]
 801e1ca:	2002      	movpl	r0, #2
 801e1cc:	4770      	bx	lr
 801e1ce:	b298      	uxth	r0, r3
 801e1d0:	b9a8      	cbnz	r0, 801e1fe <__lo0bits+0x52>
 801e1d2:	0c1b      	lsrs	r3, r3, #16
 801e1d4:	2010      	movs	r0, #16
 801e1d6:	b2da      	uxtb	r2, r3
 801e1d8:	b90a      	cbnz	r2, 801e1de <__lo0bits+0x32>
 801e1da:	3008      	adds	r0, #8
 801e1dc:	0a1b      	lsrs	r3, r3, #8
 801e1de:	071a      	lsls	r2, r3, #28
 801e1e0:	bf04      	itt	eq
 801e1e2:	091b      	lsreq	r3, r3, #4
 801e1e4:	3004      	addeq	r0, #4
 801e1e6:	079a      	lsls	r2, r3, #30
 801e1e8:	bf04      	itt	eq
 801e1ea:	089b      	lsreq	r3, r3, #2
 801e1ec:	3002      	addeq	r0, #2
 801e1ee:	07da      	lsls	r2, r3, #31
 801e1f0:	d403      	bmi.n	801e1fa <__lo0bits+0x4e>
 801e1f2:	085b      	lsrs	r3, r3, #1
 801e1f4:	f100 0001 	add.w	r0, r0, #1
 801e1f8:	d005      	beq.n	801e206 <__lo0bits+0x5a>
 801e1fa:	600b      	str	r3, [r1, #0]
 801e1fc:	4770      	bx	lr
 801e1fe:	4610      	mov	r0, r2
 801e200:	e7e9      	b.n	801e1d6 <__lo0bits+0x2a>
 801e202:	2000      	movs	r0, #0
 801e204:	4770      	bx	lr
 801e206:	2020      	movs	r0, #32
 801e208:	4770      	bx	lr
	...

0801e20c <__i2b>:
 801e20c:	b510      	push	{r4, lr}
 801e20e:	460c      	mov	r4, r1
 801e210:	2101      	movs	r1, #1
 801e212:	f7ff ff03 	bl	801e01c <_Balloc>
 801e216:	4602      	mov	r2, r0
 801e218:	b928      	cbnz	r0, 801e226 <__i2b+0x1a>
 801e21a:	4b05      	ldr	r3, [pc, #20]	; (801e230 <__i2b+0x24>)
 801e21c:	4805      	ldr	r0, [pc, #20]	; (801e234 <__i2b+0x28>)
 801e21e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e222:	f000 faa7 	bl	801e774 <__assert_func>
 801e226:	2301      	movs	r3, #1
 801e228:	6144      	str	r4, [r0, #20]
 801e22a:	6103      	str	r3, [r0, #16]
 801e22c:	bd10      	pop	{r4, pc}
 801e22e:	bf00      	nop
 801e230:	0801f46f 	.word	0x0801f46f
 801e234:	0801f480 	.word	0x0801f480

0801e238 <__multiply>:
 801e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e23c:	4691      	mov	r9, r2
 801e23e:	690a      	ldr	r2, [r1, #16]
 801e240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e244:	429a      	cmp	r2, r3
 801e246:	bfb8      	it	lt
 801e248:	460b      	movlt	r3, r1
 801e24a:	460c      	mov	r4, r1
 801e24c:	bfbc      	itt	lt
 801e24e:	464c      	movlt	r4, r9
 801e250:	4699      	movlt	r9, r3
 801e252:	6927      	ldr	r7, [r4, #16]
 801e254:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e258:	68a3      	ldr	r3, [r4, #8]
 801e25a:	6861      	ldr	r1, [r4, #4]
 801e25c:	eb07 060a 	add.w	r6, r7, sl
 801e260:	42b3      	cmp	r3, r6
 801e262:	b085      	sub	sp, #20
 801e264:	bfb8      	it	lt
 801e266:	3101      	addlt	r1, #1
 801e268:	f7ff fed8 	bl	801e01c <_Balloc>
 801e26c:	b930      	cbnz	r0, 801e27c <__multiply+0x44>
 801e26e:	4602      	mov	r2, r0
 801e270:	4b44      	ldr	r3, [pc, #272]	; (801e384 <__multiply+0x14c>)
 801e272:	4845      	ldr	r0, [pc, #276]	; (801e388 <__multiply+0x150>)
 801e274:	f240 115d 	movw	r1, #349	; 0x15d
 801e278:	f000 fa7c 	bl	801e774 <__assert_func>
 801e27c:	f100 0514 	add.w	r5, r0, #20
 801e280:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e284:	462b      	mov	r3, r5
 801e286:	2200      	movs	r2, #0
 801e288:	4543      	cmp	r3, r8
 801e28a:	d321      	bcc.n	801e2d0 <__multiply+0x98>
 801e28c:	f104 0314 	add.w	r3, r4, #20
 801e290:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e294:	f109 0314 	add.w	r3, r9, #20
 801e298:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e29c:	9202      	str	r2, [sp, #8]
 801e29e:	1b3a      	subs	r2, r7, r4
 801e2a0:	3a15      	subs	r2, #21
 801e2a2:	f022 0203 	bic.w	r2, r2, #3
 801e2a6:	3204      	adds	r2, #4
 801e2a8:	f104 0115 	add.w	r1, r4, #21
 801e2ac:	428f      	cmp	r7, r1
 801e2ae:	bf38      	it	cc
 801e2b0:	2204      	movcc	r2, #4
 801e2b2:	9201      	str	r2, [sp, #4]
 801e2b4:	9a02      	ldr	r2, [sp, #8]
 801e2b6:	9303      	str	r3, [sp, #12]
 801e2b8:	429a      	cmp	r2, r3
 801e2ba:	d80c      	bhi.n	801e2d6 <__multiply+0x9e>
 801e2bc:	2e00      	cmp	r6, #0
 801e2be:	dd03      	ble.n	801e2c8 <__multiply+0x90>
 801e2c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d05a      	beq.n	801e37e <__multiply+0x146>
 801e2c8:	6106      	str	r6, [r0, #16]
 801e2ca:	b005      	add	sp, #20
 801e2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2d0:	f843 2b04 	str.w	r2, [r3], #4
 801e2d4:	e7d8      	b.n	801e288 <__multiply+0x50>
 801e2d6:	f8b3 a000 	ldrh.w	sl, [r3]
 801e2da:	f1ba 0f00 	cmp.w	sl, #0
 801e2de:	d024      	beq.n	801e32a <__multiply+0xf2>
 801e2e0:	f104 0e14 	add.w	lr, r4, #20
 801e2e4:	46a9      	mov	r9, r5
 801e2e6:	f04f 0c00 	mov.w	ip, #0
 801e2ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e2ee:	f8d9 1000 	ldr.w	r1, [r9]
 801e2f2:	fa1f fb82 	uxth.w	fp, r2
 801e2f6:	b289      	uxth	r1, r1
 801e2f8:	fb0a 110b 	mla	r1, sl, fp, r1
 801e2fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e300:	f8d9 2000 	ldr.w	r2, [r9]
 801e304:	4461      	add	r1, ip
 801e306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e30a:	fb0a c20b 	mla	r2, sl, fp, ip
 801e30e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e312:	b289      	uxth	r1, r1
 801e314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e318:	4577      	cmp	r7, lr
 801e31a:	f849 1b04 	str.w	r1, [r9], #4
 801e31e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e322:	d8e2      	bhi.n	801e2ea <__multiply+0xb2>
 801e324:	9a01      	ldr	r2, [sp, #4]
 801e326:	f845 c002 	str.w	ip, [r5, r2]
 801e32a:	9a03      	ldr	r2, [sp, #12]
 801e32c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e330:	3304      	adds	r3, #4
 801e332:	f1b9 0f00 	cmp.w	r9, #0
 801e336:	d020      	beq.n	801e37a <__multiply+0x142>
 801e338:	6829      	ldr	r1, [r5, #0]
 801e33a:	f104 0c14 	add.w	ip, r4, #20
 801e33e:	46ae      	mov	lr, r5
 801e340:	f04f 0a00 	mov.w	sl, #0
 801e344:	f8bc b000 	ldrh.w	fp, [ip]
 801e348:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e34c:	fb09 220b 	mla	r2, r9, fp, r2
 801e350:	4492      	add	sl, r2
 801e352:	b289      	uxth	r1, r1
 801e354:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e358:	f84e 1b04 	str.w	r1, [lr], #4
 801e35c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e360:	f8be 1000 	ldrh.w	r1, [lr]
 801e364:	0c12      	lsrs	r2, r2, #16
 801e366:	fb09 1102 	mla	r1, r9, r2, r1
 801e36a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e36e:	4567      	cmp	r7, ip
 801e370:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e374:	d8e6      	bhi.n	801e344 <__multiply+0x10c>
 801e376:	9a01      	ldr	r2, [sp, #4]
 801e378:	50a9      	str	r1, [r5, r2]
 801e37a:	3504      	adds	r5, #4
 801e37c:	e79a      	b.n	801e2b4 <__multiply+0x7c>
 801e37e:	3e01      	subs	r6, #1
 801e380:	e79c      	b.n	801e2bc <__multiply+0x84>
 801e382:	bf00      	nop
 801e384:	0801f46f 	.word	0x0801f46f
 801e388:	0801f480 	.word	0x0801f480

0801e38c <__pow5mult>:
 801e38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e390:	4615      	mov	r5, r2
 801e392:	f012 0203 	ands.w	r2, r2, #3
 801e396:	4606      	mov	r6, r0
 801e398:	460f      	mov	r7, r1
 801e39a:	d007      	beq.n	801e3ac <__pow5mult+0x20>
 801e39c:	4c25      	ldr	r4, [pc, #148]	; (801e434 <__pow5mult+0xa8>)
 801e39e:	3a01      	subs	r2, #1
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e3a6:	f7ff fe9b 	bl	801e0e0 <__multadd>
 801e3aa:	4607      	mov	r7, r0
 801e3ac:	10ad      	asrs	r5, r5, #2
 801e3ae:	d03d      	beq.n	801e42c <__pow5mult+0xa0>
 801e3b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e3b2:	b97c      	cbnz	r4, 801e3d4 <__pow5mult+0x48>
 801e3b4:	2010      	movs	r0, #16
 801e3b6:	f7fd ffdd 	bl	801c374 <malloc>
 801e3ba:	4602      	mov	r2, r0
 801e3bc:	6270      	str	r0, [r6, #36]	; 0x24
 801e3be:	b928      	cbnz	r0, 801e3cc <__pow5mult+0x40>
 801e3c0:	4b1d      	ldr	r3, [pc, #116]	; (801e438 <__pow5mult+0xac>)
 801e3c2:	481e      	ldr	r0, [pc, #120]	; (801e43c <__pow5mult+0xb0>)
 801e3c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e3c8:	f000 f9d4 	bl	801e774 <__assert_func>
 801e3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e3d0:	6004      	str	r4, [r0, #0]
 801e3d2:	60c4      	str	r4, [r0, #12]
 801e3d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e3d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e3dc:	b94c      	cbnz	r4, 801e3f2 <__pow5mult+0x66>
 801e3de:	f240 2171 	movw	r1, #625	; 0x271
 801e3e2:	4630      	mov	r0, r6
 801e3e4:	f7ff ff12 	bl	801e20c <__i2b>
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	f8c8 0008 	str.w	r0, [r8, #8]
 801e3ee:	4604      	mov	r4, r0
 801e3f0:	6003      	str	r3, [r0, #0]
 801e3f2:	f04f 0900 	mov.w	r9, #0
 801e3f6:	07eb      	lsls	r3, r5, #31
 801e3f8:	d50a      	bpl.n	801e410 <__pow5mult+0x84>
 801e3fa:	4639      	mov	r1, r7
 801e3fc:	4622      	mov	r2, r4
 801e3fe:	4630      	mov	r0, r6
 801e400:	f7ff ff1a 	bl	801e238 <__multiply>
 801e404:	4639      	mov	r1, r7
 801e406:	4680      	mov	r8, r0
 801e408:	4630      	mov	r0, r6
 801e40a:	f7ff fe47 	bl	801e09c <_Bfree>
 801e40e:	4647      	mov	r7, r8
 801e410:	106d      	asrs	r5, r5, #1
 801e412:	d00b      	beq.n	801e42c <__pow5mult+0xa0>
 801e414:	6820      	ldr	r0, [r4, #0]
 801e416:	b938      	cbnz	r0, 801e428 <__pow5mult+0x9c>
 801e418:	4622      	mov	r2, r4
 801e41a:	4621      	mov	r1, r4
 801e41c:	4630      	mov	r0, r6
 801e41e:	f7ff ff0b 	bl	801e238 <__multiply>
 801e422:	6020      	str	r0, [r4, #0]
 801e424:	f8c0 9000 	str.w	r9, [r0]
 801e428:	4604      	mov	r4, r0
 801e42a:	e7e4      	b.n	801e3f6 <__pow5mult+0x6a>
 801e42c:	4638      	mov	r0, r7
 801e42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e432:	bf00      	nop
 801e434:	0801f5d0 	.word	0x0801f5d0
 801e438:	0801f3fd 	.word	0x0801f3fd
 801e43c:	0801f480 	.word	0x0801f480

0801e440 <__lshift>:
 801e440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e444:	460c      	mov	r4, r1
 801e446:	6849      	ldr	r1, [r1, #4]
 801e448:	6923      	ldr	r3, [r4, #16]
 801e44a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e44e:	68a3      	ldr	r3, [r4, #8]
 801e450:	4607      	mov	r7, r0
 801e452:	4691      	mov	r9, r2
 801e454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e458:	f108 0601 	add.w	r6, r8, #1
 801e45c:	42b3      	cmp	r3, r6
 801e45e:	db0b      	blt.n	801e478 <__lshift+0x38>
 801e460:	4638      	mov	r0, r7
 801e462:	f7ff fddb 	bl	801e01c <_Balloc>
 801e466:	4605      	mov	r5, r0
 801e468:	b948      	cbnz	r0, 801e47e <__lshift+0x3e>
 801e46a:	4602      	mov	r2, r0
 801e46c:	4b2a      	ldr	r3, [pc, #168]	; (801e518 <__lshift+0xd8>)
 801e46e:	482b      	ldr	r0, [pc, #172]	; (801e51c <__lshift+0xdc>)
 801e470:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e474:	f000 f97e 	bl	801e774 <__assert_func>
 801e478:	3101      	adds	r1, #1
 801e47a:	005b      	lsls	r3, r3, #1
 801e47c:	e7ee      	b.n	801e45c <__lshift+0x1c>
 801e47e:	2300      	movs	r3, #0
 801e480:	f100 0114 	add.w	r1, r0, #20
 801e484:	f100 0210 	add.w	r2, r0, #16
 801e488:	4618      	mov	r0, r3
 801e48a:	4553      	cmp	r3, sl
 801e48c:	db37      	blt.n	801e4fe <__lshift+0xbe>
 801e48e:	6920      	ldr	r0, [r4, #16]
 801e490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e494:	f104 0314 	add.w	r3, r4, #20
 801e498:	f019 091f 	ands.w	r9, r9, #31
 801e49c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e4a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e4a4:	d02f      	beq.n	801e506 <__lshift+0xc6>
 801e4a6:	f1c9 0e20 	rsb	lr, r9, #32
 801e4aa:	468a      	mov	sl, r1
 801e4ac:	f04f 0c00 	mov.w	ip, #0
 801e4b0:	681a      	ldr	r2, [r3, #0]
 801e4b2:	fa02 f209 	lsl.w	r2, r2, r9
 801e4b6:	ea42 020c 	orr.w	r2, r2, ip
 801e4ba:	f84a 2b04 	str.w	r2, [sl], #4
 801e4be:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4c2:	4298      	cmp	r0, r3
 801e4c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e4c8:	d8f2      	bhi.n	801e4b0 <__lshift+0x70>
 801e4ca:	1b03      	subs	r3, r0, r4
 801e4cc:	3b15      	subs	r3, #21
 801e4ce:	f023 0303 	bic.w	r3, r3, #3
 801e4d2:	3304      	adds	r3, #4
 801e4d4:	f104 0215 	add.w	r2, r4, #21
 801e4d8:	4290      	cmp	r0, r2
 801e4da:	bf38      	it	cc
 801e4dc:	2304      	movcc	r3, #4
 801e4de:	f841 c003 	str.w	ip, [r1, r3]
 801e4e2:	f1bc 0f00 	cmp.w	ip, #0
 801e4e6:	d001      	beq.n	801e4ec <__lshift+0xac>
 801e4e8:	f108 0602 	add.w	r6, r8, #2
 801e4ec:	3e01      	subs	r6, #1
 801e4ee:	4638      	mov	r0, r7
 801e4f0:	612e      	str	r6, [r5, #16]
 801e4f2:	4621      	mov	r1, r4
 801e4f4:	f7ff fdd2 	bl	801e09c <_Bfree>
 801e4f8:	4628      	mov	r0, r5
 801e4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4fe:	f842 0f04 	str.w	r0, [r2, #4]!
 801e502:	3301      	adds	r3, #1
 801e504:	e7c1      	b.n	801e48a <__lshift+0x4a>
 801e506:	3904      	subs	r1, #4
 801e508:	f853 2b04 	ldr.w	r2, [r3], #4
 801e50c:	f841 2f04 	str.w	r2, [r1, #4]!
 801e510:	4298      	cmp	r0, r3
 801e512:	d8f9      	bhi.n	801e508 <__lshift+0xc8>
 801e514:	e7ea      	b.n	801e4ec <__lshift+0xac>
 801e516:	bf00      	nop
 801e518:	0801f46f 	.word	0x0801f46f
 801e51c:	0801f480 	.word	0x0801f480

0801e520 <__mcmp>:
 801e520:	b530      	push	{r4, r5, lr}
 801e522:	6902      	ldr	r2, [r0, #16]
 801e524:	690c      	ldr	r4, [r1, #16]
 801e526:	1b12      	subs	r2, r2, r4
 801e528:	d10e      	bne.n	801e548 <__mcmp+0x28>
 801e52a:	f100 0314 	add.w	r3, r0, #20
 801e52e:	3114      	adds	r1, #20
 801e530:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e534:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e538:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e53c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e540:	42a5      	cmp	r5, r4
 801e542:	d003      	beq.n	801e54c <__mcmp+0x2c>
 801e544:	d305      	bcc.n	801e552 <__mcmp+0x32>
 801e546:	2201      	movs	r2, #1
 801e548:	4610      	mov	r0, r2
 801e54a:	bd30      	pop	{r4, r5, pc}
 801e54c:	4283      	cmp	r3, r0
 801e54e:	d3f3      	bcc.n	801e538 <__mcmp+0x18>
 801e550:	e7fa      	b.n	801e548 <__mcmp+0x28>
 801e552:	f04f 32ff 	mov.w	r2, #4294967295
 801e556:	e7f7      	b.n	801e548 <__mcmp+0x28>

0801e558 <__mdiff>:
 801e558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e55c:	460c      	mov	r4, r1
 801e55e:	4606      	mov	r6, r0
 801e560:	4611      	mov	r1, r2
 801e562:	4620      	mov	r0, r4
 801e564:	4690      	mov	r8, r2
 801e566:	f7ff ffdb 	bl	801e520 <__mcmp>
 801e56a:	1e05      	subs	r5, r0, #0
 801e56c:	d110      	bne.n	801e590 <__mdiff+0x38>
 801e56e:	4629      	mov	r1, r5
 801e570:	4630      	mov	r0, r6
 801e572:	f7ff fd53 	bl	801e01c <_Balloc>
 801e576:	b930      	cbnz	r0, 801e586 <__mdiff+0x2e>
 801e578:	4b3a      	ldr	r3, [pc, #232]	; (801e664 <__mdiff+0x10c>)
 801e57a:	4602      	mov	r2, r0
 801e57c:	f240 2132 	movw	r1, #562	; 0x232
 801e580:	4839      	ldr	r0, [pc, #228]	; (801e668 <__mdiff+0x110>)
 801e582:	f000 f8f7 	bl	801e774 <__assert_func>
 801e586:	2301      	movs	r3, #1
 801e588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e58c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e590:	bfa4      	itt	ge
 801e592:	4643      	movge	r3, r8
 801e594:	46a0      	movge	r8, r4
 801e596:	4630      	mov	r0, r6
 801e598:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e59c:	bfa6      	itte	ge
 801e59e:	461c      	movge	r4, r3
 801e5a0:	2500      	movge	r5, #0
 801e5a2:	2501      	movlt	r5, #1
 801e5a4:	f7ff fd3a 	bl	801e01c <_Balloc>
 801e5a8:	b920      	cbnz	r0, 801e5b4 <__mdiff+0x5c>
 801e5aa:	4b2e      	ldr	r3, [pc, #184]	; (801e664 <__mdiff+0x10c>)
 801e5ac:	4602      	mov	r2, r0
 801e5ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e5b2:	e7e5      	b.n	801e580 <__mdiff+0x28>
 801e5b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e5b8:	6926      	ldr	r6, [r4, #16]
 801e5ba:	60c5      	str	r5, [r0, #12]
 801e5bc:	f104 0914 	add.w	r9, r4, #20
 801e5c0:	f108 0514 	add.w	r5, r8, #20
 801e5c4:	f100 0e14 	add.w	lr, r0, #20
 801e5c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e5cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e5d0:	f108 0210 	add.w	r2, r8, #16
 801e5d4:	46f2      	mov	sl, lr
 801e5d6:	2100      	movs	r1, #0
 801e5d8:	f859 3b04 	ldr.w	r3, [r9], #4
 801e5dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e5e0:	fa1f f883 	uxth.w	r8, r3
 801e5e4:	fa11 f18b 	uxtah	r1, r1, fp
 801e5e8:	0c1b      	lsrs	r3, r3, #16
 801e5ea:	eba1 0808 	sub.w	r8, r1, r8
 801e5ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e5f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e5f6:	fa1f f888 	uxth.w	r8, r8
 801e5fa:	1419      	asrs	r1, r3, #16
 801e5fc:	454e      	cmp	r6, r9
 801e5fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e602:	f84a 3b04 	str.w	r3, [sl], #4
 801e606:	d8e7      	bhi.n	801e5d8 <__mdiff+0x80>
 801e608:	1b33      	subs	r3, r6, r4
 801e60a:	3b15      	subs	r3, #21
 801e60c:	f023 0303 	bic.w	r3, r3, #3
 801e610:	3304      	adds	r3, #4
 801e612:	3415      	adds	r4, #21
 801e614:	42a6      	cmp	r6, r4
 801e616:	bf38      	it	cc
 801e618:	2304      	movcc	r3, #4
 801e61a:	441d      	add	r5, r3
 801e61c:	4473      	add	r3, lr
 801e61e:	469e      	mov	lr, r3
 801e620:	462e      	mov	r6, r5
 801e622:	4566      	cmp	r6, ip
 801e624:	d30e      	bcc.n	801e644 <__mdiff+0xec>
 801e626:	f10c 0203 	add.w	r2, ip, #3
 801e62a:	1b52      	subs	r2, r2, r5
 801e62c:	f022 0203 	bic.w	r2, r2, #3
 801e630:	3d03      	subs	r5, #3
 801e632:	45ac      	cmp	ip, r5
 801e634:	bf38      	it	cc
 801e636:	2200      	movcc	r2, #0
 801e638:	441a      	add	r2, r3
 801e63a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e63e:	b17b      	cbz	r3, 801e660 <__mdiff+0x108>
 801e640:	6107      	str	r7, [r0, #16]
 801e642:	e7a3      	b.n	801e58c <__mdiff+0x34>
 801e644:	f856 8b04 	ldr.w	r8, [r6], #4
 801e648:	fa11 f288 	uxtah	r2, r1, r8
 801e64c:	1414      	asrs	r4, r2, #16
 801e64e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e652:	b292      	uxth	r2, r2
 801e654:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e658:	f84e 2b04 	str.w	r2, [lr], #4
 801e65c:	1421      	asrs	r1, r4, #16
 801e65e:	e7e0      	b.n	801e622 <__mdiff+0xca>
 801e660:	3f01      	subs	r7, #1
 801e662:	e7ea      	b.n	801e63a <__mdiff+0xe2>
 801e664:	0801f46f 	.word	0x0801f46f
 801e668:	0801f480 	.word	0x0801f480

0801e66c <__d2b>:
 801e66c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e670:	4689      	mov	r9, r1
 801e672:	2101      	movs	r1, #1
 801e674:	ec57 6b10 	vmov	r6, r7, d0
 801e678:	4690      	mov	r8, r2
 801e67a:	f7ff fccf 	bl	801e01c <_Balloc>
 801e67e:	4604      	mov	r4, r0
 801e680:	b930      	cbnz	r0, 801e690 <__d2b+0x24>
 801e682:	4602      	mov	r2, r0
 801e684:	4b25      	ldr	r3, [pc, #148]	; (801e71c <__d2b+0xb0>)
 801e686:	4826      	ldr	r0, [pc, #152]	; (801e720 <__d2b+0xb4>)
 801e688:	f240 310a 	movw	r1, #778	; 0x30a
 801e68c:	f000 f872 	bl	801e774 <__assert_func>
 801e690:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e694:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e698:	bb35      	cbnz	r5, 801e6e8 <__d2b+0x7c>
 801e69a:	2e00      	cmp	r6, #0
 801e69c:	9301      	str	r3, [sp, #4]
 801e69e:	d028      	beq.n	801e6f2 <__d2b+0x86>
 801e6a0:	4668      	mov	r0, sp
 801e6a2:	9600      	str	r6, [sp, #0]
 801e6a4:	f7ff fd82 	bl	801e1ac <__lo0bits>
 801e6a8:	9900      	ldr	r1, [sp, #0]
 801e6aa:	b300      	cbz	r0, 801e6ee <__d2b+0x82>
 801e6ac:	9a01      	ldr	r2, [sp, #4]
 801e6ae:	f1c0 0320 	rsb	r3, r0, #32
 801e6b2:	fa02 f303 	lsl.w	r3, r2, r3
 801e6b6:	430b      	orrs	r3, r1
 801e6b8:	40c2      	lsrs	r2, r0
 801e6ba:	6163      	str	r3, [r4, #20]
 801e6bc:	9201      	str	r2, [sp, #4]
 801e6be:	9b01      	ldr	r3, [sp, #4]
 801e6c0:	61a3      	str	r3, [r4, #24]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	bf14      	ite	ne
 801e6c6:	2202      	movne	r2, #2
 801e6c8:	2201      	moveq	r2, #1
 801e6ca:	6122      	str	r2, [r4, #16]
 801e6cc:	b1d5      	cbz	r5, 801e704 <__d2b+0x98>
 801e6ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e6d2:	4405      	add	r5, r0
 801e6d4:	f8c9 5000 	str.w	r5, [r9]
 801e6d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e6dc:	f8c8 0000 	str.w	r0, [r8]
 801e6e0:	4620      	mov	r0, r4
 801e6e2:	b003      	add	sp, #12
 801e6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e6ec:	e7d5      	b.n	801e69a <__d2b+0x2e>
 801e6ee:	6161      	str	r1, [r4, #20]
 801e6f0:	e7e5      	b.n	801e6be <__d2b+0x52>
 801e6f2:	a801      	add	r0, sp, #4
 801e6f4:	f7ff fd5a 	bl	801e1ac <__lo0bits>
 801e6f8:	9b01      	ldr	r3, [sp, #4]
 801e6fa:	6163      	str	r3, [r4, #20]
 801e6fc:	2201      	movs	r2, #1
 801e6fe:	6122      	str	r2, [r4, #16]
 801e700:	3020      	adds	r0, #32
 801e702:	e7e3      	b.n	801e6cc <__d2b+0x60>
 801e704:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e708:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e70c:	f8c9 0000 	str.w	r0, [r9]
 801e710:	6918      	ldr	r0, [r3, #16]
 801e712:	f7ff fd2b 	bl	801e16c <__hi0bits>
 801e716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e71a:	e7df      	b.n	801e6dc <__d2b+0x70>
 801e71c:	0801f46f 	.word	0x0801f46f
 801e720:	0801f480 	.word	0x0801f480

0801e724 <_calloc_r>:
 801e724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e726:	fba1 2402 	umull	r2, r4, r1, r2
 801e72a:	b94c      	cbnz	r4, 801e740 <_calloc_r+0x1c>
 801e72c:	4611      	mov	r1, r2
 801e72e:	9201      	str	r2, [sp, #4]
 801e730:	f7fd feb2 	bl	801c498 <_malloc_r>
 801e734:	9a01      	ldr	r2, [sp, #4]
 801e736:	4605      	mov	r5, r0
 801e738:	b930      	cbnz	r0, 801e748 <_calloc_r+0x24>
 801e73a:	4628      	mov	r0, r5
 801e73c:	b003      	add	sp, #12
 801e73e:	bd30      	pop	{r4, r5, pc}
 801e740:	220c      	movs	r2, #12
 801e742:	6002      	str	r2, [r0, #0]
 801e744:	2500      	movs	r5, #0
 801e746:	e7f8      	b.n	801e73a <_calloc_r+0x16>
 801e748:	4621      	mov	r1, r4
 801e74a:	f7fd fe31 	bl	801c3b0 <memset>
 801e74e:	e7f4      	b.n	801e73a <_calloc_r+0x16>

0801e750 <_read_r>:
 801e750:	b538      	push	{r3, r4, r5, lr}
 801e752:	4d07      	ldr	r5, [pc, #28]	; (801e770 <_read_r+0x20>)
 801e754:	4604      	mov	r4, r0
 801e756:	4608      	mov	r0, r1
 801e758:	4611      	mov	r1, r2
 801e75a:	2200      	movs	r2, #0
 801e75c:	602a      	str	r2, [r5, #0]
 801e75e:	461a      	mov	r2, r3
 801e760:	f7f1 fa82 	bl	800fc68 <_read>
 801e764:	1c43      	adds	r3, r0, #1
 801e766:	d102      	bne.n	801e76e <_read_r+0x1e>
 801e768:	682b      	ldr	r3, [r5, #0]
 801e76a:	b103      	cbz	r3, 801e76e <_read_r+0x1e>
 801e76c:	6023      	str	r3, [r4, #0]
 801e76e:	bd38      	pop	{r3, r4, r5, pc}
 801e770:	20007480 	.word	0x20007480

0801e774 <__assert_func>:
 801e774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e776:	4614      	mov	r4, r2
 801e778:	461a      	mov	r2, r3
 801e77a:	4b09      	ldr	r3, [pc, #36]	; (801e7a0 <__assert_func+0x2c>)
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	4605      	mov	r5, r0
 801e780:	68d8      	ldr	r0, [r3, #12]
 801e782:	b14c      	cbz	r4, 801e798 <__assert_func+0x24>
 801e784:	4b07      	ldr	r3, [pc, #28]	; (801e7a4 <__assert_func+0x30>)
 801e786:	9100      	str	r1, [sp, #0]
 801e788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e78c:	4906      	ldr	r1, [pc, #24]	; (801e7a8 <__assert_func+0x34>)
 801e78e:	462b      	mov	r3, r5
 801e790:	f000 f80e 	bl	801e7b0 <fiprintf>
 801e794:	f7fd fcbc 	bl	801c110 <abort>
 801e798:	4b04      	ldr	r3, [pc, #16]	; (801e7ac <__assert_func+0x38>)
 801e79a:	461c      	mov	r4, r3
 801e79c:	e7f3      	b.n	801e786 <__assert_func+0x12>
 801e79e:	bf00      	nop
 801e7a0:	20000040 	.word	0x20000040
 801e7a4:	0801f5dc 	.word	0x0801f5dc
 801e7a8:	0801f5e9 	.word	0x0801f5e9
 801e7ac:	0801f617 	.word	0x0801f617

0801e7b0 <fiprintf>:
 801e7b0:	b40e      	push	{r1, r2, r3}
 801e7b2:	b503      	push	{r0, r1, lr}
 801e7b4:	4601      	mov	r1, r0
 801e7b6:	ab03      	add	r3, sp, #12
 801e7b8:	4805      	ldr	r0, [pc, #20]	; (801e7d0 <fiprintf+0x20>)
 801e7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801e7be:	6800      	ldr	r0, [r0, #0]
 801e7c0:	9301      	str	r3, [sp, #4]
 801e7c2:	f000 f843 	bl	801e84c <_vfiprintf_r>
 801e7c6:	b002      	add	sp, #8
 801e7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e7cc:	b003      	add	sp, #12
 801e7ce:	4770      	bx	lr
 801e7d0:	20000040 	.word	0x20000040

0801e7d4 <__ascii_mbtowc>:
 801e7d4:	b082      	sub	sp, #8
 801e7d6:	b901      	cbnz	r1, 801e7da <__ascii_mbtowc+0x6>
 801e7d8:	a901      	add	r1, sp, #4
 801e7da:	b142      	cbz	r2, 801e7ee <__ascii_mbtowc+0x1a>
 801e7dc:	b14b      	cbz	r3, 801e7f2 <__ascii_mbtowc+0x1e>
 801e7de:	7813      	ldrb	r3, [r2, #0]
 801e7e0:	600b      	str	r3, [r1, #0]
 801e7e2:	7812      	ldrb	r2, [r2, #0]
 801e7e4:	1e10      	subs	r0, r2, #0
 801e7e6:	bf18      	it	ne
 801e7e8:	2001      	movne	r0, #1
 801e7ea:	b002      	add	sp, #8
 801e7ec:	4770      	bx	lr
 801e7ee:	4610      	mov	r0, r2
 801e7f0:	e7fb      	b.n	801e7ea <__ascii_mbtowc+0x16>
 801e7f2:	f06f 0001 	mvn.w	r0, #1
 801e7f6:	e7f8      	b.n	801e7ea <__ascii_mbtowc+0x16>

0801e7f8 <__sfputc_r>:
 801e7f8:	6893      	ldr	r3, [r2, #8]
 801e7fa:	3b01      	subs	r3, #1
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	b410      	push	{r4}
 801e800:	6093      	str	r3, [r2, #8]
 801e802:	da08      	bge.n	801e816 <__sfputc_r+0x1e>
 801e804:	6994      	ldr	r4, [r2, #24]
 801e806:	42a3      	cmp	r3, r4
 801e808:	db01      	blt.n	801e80e <__sfputc_r+0x16>
 801e80a:	290a      	cmp	r1, #10
 801e80c:	d103      	bne.n	801e816 <__sfputc_r+0x1e>
 801e80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e812:	f000 b94b 	b.w	801eaac <__swbuf_r>
 801e816:	6813      	ldr	r3, [r2, #0]
 801e818:	1c58      	adds	r0, r3, #1
 801e81a:	6010      	str	r0, [r2, #0]
 801e81c:	7019      	strb	r1, [r3, #0]
 801e81e:	4608      	mov	r0, r1
 801e820:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e824:	4770      	bx	lr

0801e826 <__sfputs_r>:
 801e826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e828:	4606      	mov	r6, r0
 801e82a:	460f      	mov	r7, r1
 801e82c:	4614      	mov	r4, r2
 801e82e:	18d5      	adds	r5, r2, r3
 801e830:	42ac      	cmp	r4, r5
 801e832:	d101      	bne.n	801e838 <__sfputs_r+0x12>
 801e834:	2000      	movs	r0, #0
 801e836:	e007      	b.n	801e848 <__sfputs_r+0x22>
 801e838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e83c:	463a      	mov	r2, r7
 801e83e:	4630      	mov	r0, r6
 801e840:	f7ff ffda 	bl	801e7f8 <__sfputc_r>
 801e844:	1c43      	adds	r3, r0, #1
 801e846:	d1f3      	bne.n	801e830 <__sfputs_r+0xa>
 801e848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e84c <_vfiprintf_r>:
 801e84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e850:	460d      	mov	r5, r1
 801e852:	b09d      	sub	sp, #116	; 0x74
 801e854:	4614      	mov	r4, r2
 801e856:	4698      	mov	r8, r3
 801e858:	4606      	mov	r6, r0
 801e85a:	b118      	cbz	r0, 801e864 <_vfiprintf_r+0x18>
 801e85c:	6983      	ldr	r3, [r0, #24]
 801e85e:	b90b      	cbnz	r3, 801e864 <_vfiprintf_r+0x18>
 801e860:	f7fd fcc2 	bl	801c1e8 <__sinit>
 801e864:	4b89      	ldr	r3, [pc, #548]	; (801ea8c <_vfiprintf_r+0x240>)
 801e866:	429d      	cmp	r5, r3
 801e868:	d11b      	bne.n	801e8a2 <_vfiprintf_r+0x56>
 801e86a:	6875      	ldr	r5, [r6, #4]
 801e86c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e86e:	07d9      	lsls	r1, r3, #31
 801e870:	d405      	bmi.n	801e87e <_vfiprintf_r+0x32>
 801e872:	89ab      	ldrh	r3, [r5, #12]
 801e874:	059a      	lsls	r2, r3, #22
 801e876:	d402      	bmi.n	801e87e <_vfiprintf_r+0x32>
 801e878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e87a:	f7fd fd78 	bl	801c36e <__retarget_lock_acquire_recursive>
 801e87e:	89ab      	ldrh	r3, [r5, #12]
 801e880:	071b      	lsls	r3, r3, #28
 801e882:	d501      	bpl.n	801e888 <_vfiprintf_r+0x3c>
 801e884:	692b      	ldr	r3, [r5, #16]
 801e886:	b9eb      	cbnz	r3, 801e8c4 <_vfiprintf_r+0x78>
 801e888:	4629      	mov	r1, r5
 801e88a:	4630      	mov	r0, r6
 801e88c:	f000 f96e 	bl	801eb6c <__swsetup_r>
 801e890:	b1c0      	cbz	r0, 801e8c4 <_vfiprintf_r+0x78>
 801e892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e894:	07dc      	lsls	r4, r3, #31
 801e896:	d50e      	bpl.n	801e8b6 <_vfiprintf_r+0x6a>
 801e898:	f04f 30ff 	mov.w	r0, #4294967295
 801e89c:	b01d      	add	sp, #116	; 0x74
 801e89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8a2:	4b7b      	ldr	r3, [pc, #492]	; (801ea90 <_vfiprintf_r+0x244>)
 801e8a4:	429d      	cmp	r5, r3
 801e8a6:	d101      	bne.n	801e8ac <_vfiprintf_r+0x60>
 801e8a8:	68b5      	ldr	r5, [r6, #8]
 801e8aa:	e7df      	b.n	801e86c <_vfiprintf_r+0x20>
 801e8ac:	4b79      	ldr	r3, [pc, #484]	; (801ea94 <_vfiprintf_r+0x248>)
 801e8ae:	429d      	cmp	r5, r3
 801e8b0:	bf08      	it	eq
 801e8b2:	68f5      	ldreq	r5, [r6, #12]
 801e8b4:	e7da      	b.n	801e86c <_vfiprintf_r+0x20>
 801e8b6:	89ab      	ldrh	r3, [r5, #12]
 801e8b8:	0598      	lsls	r0, r3, #22
 801e8ba:	d4ed      	bmi.n	801e898 <_vfiprintf_r+0x4c>
 801e8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8be:	f7fd fd58 	bl	801c372 <__retarget_lock_release_recursive>
 801e8c2:	e7e9      	b.n	801e898 <_vfiprintf_r+0x4c>
 801e8c4:	2300      	movs	r3, #0
 801e8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801e8c8:	2320      	movs	r3, #32
 801e8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e8ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8d2:	2330      	movs	r3, #48	; 0x30
 801e8d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ea98 <_vfiprintf_r+0x24c>
 801e8d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e8dc:	f04f 0901 	mov.w	r9, #1
 801e8e0:	4623      	mov	r3, r4
 801e8e2:	469a      	mov	sl, r3
 801e8e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e8e8:	b10a      	cbz	r2, 801e8ee <_vfiprintf_r+0xa2>
 801e8ea:	2a25      	cmp	r2, #37	; 0x25
 801e8ec:	d1f9      	bne.n	801e8e2 <_vfiprintf_r+0x96>
 801e8ee:	ebba 0b04 	subs.w	fp, sl, r4
 801e8f2:	d00b      	beq.n	801e90c <_vfiprintf_r+0xc0>
 801e8f4:	465b      	mov	r3, fp
 801e8f6:	4622      	mov	r2, r4
 801e8f8:	4629      	mov	r1, r5
 801e8fa:	4630      	mov	r0, r6
 801e8fc:	f7ff ff93 	bl	801e826 <__sfputs_r>
 801e900:	3001      	adds	r0, #1
 801e902:	f000 80aa 	beq.w	801ea5a <_vfiprintf_r+0x20e>
 801e906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e908:	445a      	add	r2, fp
 801e90a:	9209      	str	r2, [sp, #36]	; 0x24
 801e90c:	f89a 3000 	ldrb.w	r3, [sl]
 801e910:	2b00      	cmp	r3, #0
 801e912:	f000 80a2 	beq.w	801ea5a <_vfiprintf_r+0x20e>
 801e916:	2300      	movs	r3, #0
 801e918:	f04f 32ff 	mov.w	r2, #4294967295
 801e91c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e920:	f10a 0a01 	add.w	sl, sl, #1
 801e924:	9304      	str	r3, [sp, #16]
 801e926:	9307      	str	r3, [sp, #28]
 801e928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e92c:	931a      	str	r3, [sp, #104]	; 0x68
 801e92e:	4654      	mov	r4, sl
 801e930:	2205      	movs	r2, #5
 801e932:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e936:	4858      	ldr	r0, [pc, #352]	; (801ea98 <_vfiprintf_r+0x24c>)
 801e938:	f7e1 fc52 	bl	80001e0 <memchr>
 801e93c:	9a04      	ldr	r2, [sp, #16]
 801e93e:	b9d8      	cbnz	r0, 801e978 <_vfiprintf_r+0x12c>
 801e940:	06d1      	lsls	r1, r2, #27
 801e942:	bf44      	itt	mi
 801e944:	2320      	movmi	r3, #32
 801e946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e94a:	0713      	lsls	r3, r2, #28
 801e94c:	bf44      	itt	mi
 801e94e:	232b      	movmi	r3, #43	; 0x2b
 801e950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e954:	f89a 3000 	ldrb.w	r3, [sl]
 801e958:	2b2a      	cmp	r3, #42	; 0x2a
 801e95a:	d015      	beq.n	801e988 <_vfiprintf_r+0x13c>
 801e95c:	9a07      	ldr	r2, [sp, #28]
 801e95e:	4654      	mov	r4, sl
 801e960:	2000      	movs	r0, #0
 801e962:	f04f 0c0a 	mov.w	ip, #10
 801e966:	4621      	mov	r1, r4
 801e968:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e96c:	3b30      	subs	r3, #48	; 0x30
 801e96e:	2b09      	cmp	r3, #9
 801e970:	d94e      	bls.n	801ea10 <_vfiprintf_r+0x1c4>
 801e972:	b1b0      	cbz	r0, 801e9a2 <_vfiprintf_r+0x156>
 801e974:	9207      	str	r2, [sp, #28]
 801e976:	e014      	b.n	801e9a2 <_vfiprintf_r+0x156>
 801e978:	eba0 0308 	sub.w	r3, r0, r8
 801e97c:	fa09 f303 	lsl.w	r3, r9, r3
 801e980:	4313      	orrs	r3, r2
 801e982:	9304      	str	r3, [sp, #16]
 801e984:	46a2      	mov	sl, r4
 801e986:	e7d2      	b.n	801e92e <_vfiprintf_r+0xe2>
 801e988:	9b03      	ldr	r3, [sp, #12]
 801e98a:	1d19      	adds	r1, r3, #4
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	9103      	str	r1, [sp, #12]
 801e990:	2b00      	cmp	r3, #0
 801e992:	bfbb      	ittet	lt
 801e994:	425b      	neglt	r3, r3
 801e996:	f042 0202 	orrlt.w	r2, r2, #2
 801e99a:	9307      	strge	r3, [sp, #28]
 801e99c:	9307      	strlt	r3, [sp, #28]
 801e99e:	bfb8      	it	lt
 801e9a0:	9204      	strlt	r2, [sp, #16]
 801e9a2:	7823      	ldrb	r3, [r4, #0]
 801e9a4:	2b2e      	cmp	r3, #46	; 0x2e
 801e9a6:	d10c      	bne.n	801e9c2 <_vfiprintf_r+0x176>
 801e9a8:	7863      	ldrb	r3, [r4, #1]
 801e9aa:	2b2a      	cmp	r3, #42	; 0x2a
 801e9ac:	d135      	bne.n	801ea1a <_vfiprintf_r+0x1ce>
 801e9ae:	9b03      	ldr	r3, [sp, #12]
 801e9b0:	1d1a      	adds	r2, r3, #4
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	9203      	str	r2, [sp, #12]
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	bfb8      	it	lt
 801e9ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801e9be:	3402      	adds	r4, #2
 801e9c0:	9305      	str	r3, [sp, #20]
 801e9c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801eaa8 <_vfiprintf_r+0x25c>
 801e9c6:	7821      	ldrb	r1, [r4, #0]
 801e9c8:	2203      	movs	r2, #3
 801e9ca:	4650      	mov	r0, sl
 801e9cc:	f7e1 fc08 	bl	80001e0 <memchr>
 801e9d0:	b140      	cbz	r0, 801e9e4 <_vfiprintf_r+0x198>
 801e9d2:	2340      	movs	r3, #64	; 0x40
 801e9d4:	eba0 000a 	sub.w	r0, r0, sl
 801e9d8:	fa03 f000 	lsl.w	r0, r3, r0
 801e9dc:	9b04      	ldr	r3, [sp, #16]
 801e9de:	4303      	orrs	r3, r0
 801e9e0:	3401      	adds	r4, #1
 801e9e2:	9304      	str	r3, [sp, #16]
 801e9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9e8:	482c      	ldr	r0, [pc, #176]	; (801ea9c <_vfiprintf_r+0x250>)
 801e9ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e9ee:	2206      	movs	r2, #6
 801e9f0:	f7e1 fbf6 	bl	80001e0 <memchr>
 801e9f4:	2800      	cmp	r0, #0
 801e9f6:	d03f      	beq.n	801ea78 <_vfiprintf_r+0x22c>
 801e9f8:	4b29      	ldr	r3, [pc, #164]	; (801eaa0 <_vfiprintf_r+0x254>)
 801e9fa:	bb1b      	cbnz	r3, 801ea44 <_vfiprintf_r+0x1f8>
 801e9fc:	9b03      	ldr	r3, [sp, #12]
 801e9fe:	3307      	adds	r3, #7
 801ea00:	f023 0307 	bic.w	r3, r3, #7
 801ea04:	3308      	adds	r3, #8
 801ea06:	9303      	str	r3, [sp, #12]
 801ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea0a:	443b      	add	r3, r7
 801ea0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea0e:	e767      	b.n	801e8e0 <_vfiprintf_r+0x94>
 801ea10:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea14:	460c      	mov	r4, r1
 801ea16:	2001      	movs	r0, #1
 801ea18:	e7a5      	b.n	801e966 <_vfiprintf_r+0x11a>
 801ea1a:	2300      	movs	r3, #0
 801ea1c:	3401      	adds	r4, #1
 801ea1e:	9305      	str	r3, [sp, #20]
 801ea20:	4619      	mov	r1, r3
 801ea22:	f04f 0c0a 	mov.w	ip, #10
 801ea26:	4620      	mov	r0, r4
 801ea28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea2c:	3a30      	subs	r2, #48	; 0x30
 801ea2e:	2a09      	cmp	r2, #9
 801ea30:	d903      	bls.n	801ea3a <_vfiprintf_r+0x1ee>
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d0c5      	beq.n	801e9c2 <_vfiprintf_r+0x176>
 801ea36:	9105      	str	r1, [sp, #20]
 801ea38:	e7c3      	b.n	801e9c2 <_vfiprintf_r+0x176>
 801ea3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea3e:	4604      	mov	r4, r0
 801ea40:	2301      	movs	r3, #1
 801ea42:	e7f0      	b.n	801ea26 <_vfiprintf_r+0x1da>
 801ea44:	ab03      	add	r3, sp, #12
 801ea46:	9300      	str	r3, [sp, #0]
 801ea48:	462a      	mov	r2, r5
 801ea4a:	4b16      	ldr	r3, [pc, #88]	; (801eaa4 <_vfiprintf_r+0x258>)
 801ea4c:	a904      	add	r1, sp, #16
 801ea4e:	4630      	mov	r0, r6
 801ea50:	f7fd fe36 	bl	801c6c0 <_printf_float>
 801ea54:	4607      	mov	r7, r0
 801ea56:	1c78      	adds	r0, r7, #1
 801ea58:	d1d6      	bne.n	801ea08 <_vfiprintf_r+0x1bc>
 801ea5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ea5c:	07d9      	lsls	r1, r3, #31
 801ea5e:	d405      	bmi.n	801ea6c <_vfiprintf_r+0x220>
 801ea60:	89ab      	ldrh	r3, [r5, #12]
 801ea62:	059a      	lsls	r2, r3, #22
 801ea64:	d402      	bmi.n	801ea6c <_vfiprintf_r+0x220>
 801ea66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ea68:	f7fd fc83 	bl	801c372 <__retarget_lock_release_recursive>
 801ea6c:	89ab      	ldrh	r3, [r5, #12]
 801ea6e:	065b      	lsls	r3, r3, #25
 801ea70:	f53f af12 	bmi.w	801e898 <_vfiprintf_r+0x4c>
 801ea74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea76:	e711      	b.n	801e89c <_vfiprintf_r+0x50>
 801ea78:	ab03      	add	r3, sp, #12
 801ea7a:	9300      	str	r3, [sp, #0]
 801ea7c:	462a      	mov	r2, r5
 801ea7e:	4b09      	ldr	r3, [pc, #36]	; (801eaa4 <_vfiprintf_r+0x258>)
 801ea80:	a904      	add	r1, sp, #16
 801ea82:	4630      	mov	r0, r6
 801ea84:	f7fe f8c0 	bl	801cc08 <_printf_i>
 801ea88:	e7e4      	b.n	801ea54 <_vfiprintf_r+0x208>
 801ea8a:	bf00      	nop
 801ea8c:	0801f378 	.word	0x0801f378
 801ea90:	0801f398 	.word	0x0801f398
 801ea94:	0801f358 	.word	0x0801f358
 801ea98:	0801f622 	.word	0x0801f622
 801ea9c:	0801f62c 	.word	0x0801f62c
 801eaa0:	0801c6c1 	.word	0x0801c6c1
 801eaa4:	0801e827 	.word	0x0801e827
 801eaa8:	0801f628 	.word	0x0801f628

0801eaac <__swbuf_r>:
 801eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaae:	460e      	mov	r6, r1
 801eab0:	4614      	mov	r4, r2
 801eab2:	4605      	mov	r5, r0
 801eab4:	b118      	cbz	r0, 801eabe <__swbuf_r+0x12>
 801eab6:	6983      	ldr	r3, [r0, #24]
 801eab8:	b90b      	cbnz	r3, 801eabe <__swbuf_r+0x12>
 801eaba:	f7fd fb95 	bl	801c1e8 <__sinit>
 801eabe:	4b21      	ldr	r3, [pc, #132]	; (801eb44 <__swbuf_r+0x98>)
 801eac0:	429c      	cmp	r4, r3
 801eac2:	d12b      	bne.n	801eb1c <__swbuf_r+0x70>
 801eac4:	686c      	ldr	r4, [r5, #4]
 801eac6:	69a3      	ldr	r3, [r4, #24]
 801eac8:	60a3      	str	r3, [r4, #8]
 801eaca:	89a3      	ldrh	r3, [r4, #12]
 801eacc:	071a      	lsls	r2, r3, #28
 801eace:	d52f      	bpl.n	801eb30 <__swbuf_r+0x84>
 801ead0:	6923      	ldr	r3, [r4, #16]
 801ead2:	b36b      	cbz	r3, 801eb30 <__swbuf_r+0x84>
 801ead4:	6923      	ldr	r3, [r4, #16]
 801ead6:	6820      	ldr	r0, [r4, #0]
 801ead8:	1ac0      	subs	r0, r0, r3
 801eada:	6963      	ldr	r3, [r4, #20]
 801eadc:	b2f6      	uxtb	r6, r6
 801eade:	4283      	cmp	r3, r0
 801eae0:	4637      	mov	r7, r6
 801eae2:	dc04      	bgt.n	801eaee <__swbuf_r+0x42>
 801eae4:	4621      	mov	r1, r4
 801eae6:	4628      	mov	r0, r5
 801eae8:	f7ff fa3a 	bl	801df60 <_fflush_r>
 801eaec:	bb30      	cbnz	r0, 801eb3c <__swbuf_r+0x90>
 801eaee:	68a3      	ldr	r3, [r4, #8]
 801eaf0:	3b01      	subs	r3, #1
 801eaf2:	60a3      	str	r3, [r4, #8]
 801eaf4:	6823      	ldr	r3, [r4, #0]
 801eaf6:	1c5a      	adds	r2, r3, #1
 801eaf8:	6022      	str	r2, [r4, #0]
 801eafa:	701e      	strb	r6, [r3, #0]
 801eafc:	6963      	ldr	r3, [r4, #20]
 801eafe:	3001      	adds	r0, #1
 801eb00:	4283      	cmp	r3, r0
 801eb02:	d004      	beq.n	801eb0e <__swbuf_r+0x62>
 801eb04:	89a3      	ldrh	r3, [r4, #12]
 801eb06:	07db      	lsls	r3, r3, #31
 801eb08:	d506      	bpl.n	801eb18 <__swbuf_r+0x6c>
 801eb0a:	2e0a      	cmp	r6, #10
 801eb0c:	d104      	bne.n	801eb18 <__swbuf_r+0x6c>
 801eb0e:	4621      	mov	r1, r4
 801eb10:	4628      	mov	r0, r5
 801eb12:	f7ff fa25 	bl	801df60 <_fflush_r>
 801eb16:	b988      	cbnz	r0, 801eb3c <__swbuf_r+0x90>
 801eb18:	4638      	mov	r0, r7
 801eb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb1c:	4b0a      	ldr	r3, [pc, #40]	; (801eb48 <__swbuf_r+0x9c>)
 801eb1e:	429c      	cmp	r4, r3
 801eb20:	d101      	bne.n	801eb26 <__swbuf_r+0x7a>
 801eb22:	68ac      	ldr	r4, [r5, #8]
 801eb24:	e7cf      	b.n	801eac6 <__swbuf_r+0x1a>
 801eb26:	4b09      	ldr	r3, [pc, #36]	; (801eb4c <__swbuf_r+0xa0>)
 801eb28:	429c      	cmp	r4, r3
 801eb2a:	bf08      	it	eq
 801eb2c:	68ec      	ldreq	r4, [r5, #12]
 801eb2e:	e7ca      	b.n	801eac6 <__swbuf_r+0x1a>
 801eb30:	4621      	mov	r1, r4
 801eb32:	4628      	mov	r0, r5
 801eb34:	f000 f81a 	bl	801eb6c <__swsetup_r>
 801eb38:	2800      	cmp	r0, #0
 801eb3a:	d0cb      	beq.n	801ead4 <__swbuf_r+0x28>
 801eb3c:	f04f 37ff 	mov.w	r7, #4294967295
 801eb40:	e7ea      	b.n	801eb18 <__swbuf_r+0x6c>
 801eb42:	bf00      	nop
 801eb44:	0801f378 	.word	0x0801f378
 801eb48:	0801f398 	.word	0x0801f398
 801eb4c:	0801f358 	.word	0x0801f358

0801eb50 <__ascii_wctomb>:
 801eb50:	b149      	cbz	r1, 801eb66 <__ascii_wctomb+0x16>
 801eb52:	2aff      	cmp	r2, #255	; 0xff
 801eb54:	bf85      	ittet	hi
 801eb56:	238a      	movhi	r3, #138	; 0x8a
 801eb58:	6003      	strhi	r3, [r0, #0]
 801eb5a:	700a      	strbls	r2, [r1, #0]
 801eb5c:	f04f 30ff 	movhi.w	r0, #4294967295
 801eb60:	bf98      	it	ls
 801eb62:	2001      	movls	r0, #1
 801eb64:	4770      	bx	lr
 801eb66:	4608      	mov	r0, r1
 801eb68:	4770      	bx	lr
	...

0801eb6c <__swsetup_r>:
 801eb6c:	4b32      	ldr	r3, [pc, #200]	; (801ec38 <__swsetup_r+0xcc>)
 801eb6e:	b570      	push	{r4, r5, r6, lr}
 801eb70:	681d      	ldr	r5, [r3, #0]
 801eb72:	4606      	mov	r6, r0
 801eb74:	460c      	mov	r4, r1
 801eb76:	b125      	cbz	r5, 801eb82 <__swsetup_r+0x16>
 801eb78:	69ab      	ldr	r3, [r5, #24]
 801eb7a:	b913      	cbnz	r3, 801eb82 <__swsetup_r+0x16>
 801eb7c:	4628      	mov	r0, r5
 801eb7e:	f7fd fb33 	bl	801c1e8 <__sinit>
 801eb82:	4b2e      	ldr	r3, [pc, #184]	; (801ec3c <__swsetup_r+0xd0>)
 801eb84:	429c      	cmp	r4, r3
 801eb86:	d10f      	bne.n	801eba8 <__swsetup_r+0x3c>
 801eb88:	686c      	ldr	r4, [r5, #4]
 801eb8a:	89a3      	ldrh	r3, [r4, #12]
 801eb8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801eb90:	0719      	lsls	r1, r3, #28
 801eb92:	d42c      	bmi.n	801ebee <__swsetup_r+0x82>
 801eb94:	06dd      	lsls	r5, r3, #27
 801eb96:	d411      	bmi.n	801ebbc <__swsetup_r+0x50>
 801eb98:	2309      	movs	r3, #9
 801eb9a:	6033      	str	r3, [r6, #0]
 801eb9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801eba0:	81a3      	strh	r3, [r4, #12]
 801eba2:	f04f 30ff 	mov.w	r0, #4294967295
 801eba6:	e03e      	b.n	801ec26 <__swsetup_r+0xba>
 801eba8:	4b25      	ldr	r3, [pc, #148]	; (801ec40 <__swsetup_r+0xd4>)
 801ebaa:	429c      	cmp	r4, r3
 801ebac:	d101      	bne.n	801ebb2 <__swsetup_r+0x46>
 801ebae:	68ac      	ldr	r4, [r5, #8]
 801ebb0:	e7eb      	b.n	801eb8a <__swsetup_r+0x1e>
 801ebb2:	4b24      	ldr	r3, [pc, #144]	; (801ec44 <__swsetup_r+0xd8>)
 801ebb4:	429c      	cmp	r4, r3
 801ebb6:	bf08      	it	eq
 801ebb8:	68ec      	ldreq	r4, [r5, #12]
 801ebba:	e7e6      	b.n	801eb8a <__swsetup_r+0x1e>
 801ebbc:	0758      	lsls	r0, r3, #29
 801ebbe:	d512      	bpl.n	801ebe6 <__swsetup_r+0x7a>
 801ebc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ebc2:	b141      	cbz	r1, 801ebd6 <__swsetup_r+0x6a>
 801ebc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ebc8:	4299      	cmp	r1, r3
 801ebca:	d002      	beq.n	801ebd2 <__swsetup_r+0x66>
 801ebcc:	4630      	mov	r0, r6
 801ebce:	f7fd fbf7 	bl	801c3c0 <_free_r>
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	6363      	str	r3, [r4, #52]	; 0x34
 801ebd6:	89a3      	ldrh	r3, [r4, #12]
 801ebd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ebdc:	81a3      	strh	r3, [r4, #12]
 801ebde:	2300      	movs	r3, #0
 801ebe0:	6063      	str	r3, [r4, #4]
 801ebe2:	6923      	ldr	r3, [r4, #16]
 801ebe4:	6023      	str	r3, [r4, #0]
 801ebe6:	89a3      	ldrh	r3, [r4, #12]
 801ebe8:	f043 0308 	orr.w	r3, r3, #8
 801ebec:	81a3      	strh	r3, [r4, #12]
 801ebee:	6923      	ldr	r3, [r4, #16]
 801ebf0:	b94b      	cbnz	r3, 801ec06 <__swsetup_r+0x9a>
 801ebf2:	89a3      	ldrh	r3, [r4, #12]
 801ebf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ebf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ebfc:	d003      	beq.n	801ec06 <__swsetup_r+0x9a>
 801ebfe:	4621      	mov	r1, r4
 801ec00:	4630      	mov	r0, r6
 801ec02:	f000 f847 	bl	801ec94 <__smakebuf_r>
 801ec06:	89a0      	ldrh	r0, [r4, #12]
 801ec08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ec0c:	f010 0301 	ands.w	r3, r0, #1
 801ec10:	d00a      	beq.n	801ec28 <__swsetup_r+0xbc>
 801ec12:	2300      	movs	r3, #0
 801ec14:	60a3      	str	r3, [r4, #8]
 801ec16:	6963      	ldr	r3, [r4, #20]
 801ec18:	425b      	negs	r3, r3
 801ec1a:	61a3      	str	r3, [r4, #24]
 801ec1c:	6923      	ldr	r3, [r4, #16]
 801ec1e:	b943      	cbnz	r3, 801ec32 <__swsetup_r+0xc6>
 801ec20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ec24:	d1ba      	bne.n	801eb9c <__swsetup_r+0x30>
 801ec26:	bd70      	pop	{r4, r5, r6, pc}
 801ec28:	0781      	lsls	r1, r0, #30
 801ec2a:	bf58      	it	pl
 801ec2c:	6963      	ldrpl	r3, [r4, #20]
 801ec2e:	60a3      	str	r3, [r4, #8]
 801ec30:	e7f4      	b.n	801ec1c <__swsetup_r+0xb0>
 801ec32:	2000      	movs	r0, #0
 801ec34:	e7f7      	b.n	801ec26 <__swsetup_r+0xba>
 801ec36:	bf00      	nop
 801ec38:	20000040 	.word	0x20000040
 801ec3c:	0801f378 	.word	0x0801f378
 801ec40:	0801f398 	.word	0x0801f398
 801ec44:	0801f358 	.word	0x0801f358

0801ec48 <__swhatbuf_r>:
 801ec48:	b570      	push	{r4, r5, r6, lr}
 801ec4a:	460e      	mov	r6, r1
 801ec4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec50:	2900      	cmp	r1, #0
 801ec52:	b096      	sub	sp, #88	; 0x58
 801ec54:	4614      	mov	r4, r2
 801ec56:	461d      	mov	r5, r3
 801ec58:	da08      	bge.n	801ec6c <__swhatbuf_r+0x24>
 801ec5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ec5e:	2200      	movs	r2, #0
 801ec60:	602a      	str	r2, [r5, #0]
 801ec62:	061a      	lsls	r2, r3, #24
 801ec64:	d410      	bmi.n	801ec88 <__swhatbuf_r+0x40>
 801ec66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec6a:	e00e      	b.n	801ec8a <__swhatbuf_r+0x42>
 801ec6c:	466a      	mov	r2, sp
 801ec6e:	f000 f851 	bl	801ed14 <_fstat_r>
 801ec72:	2800      	cmp	r0, #0
 801ec74:	dbf1      	blt.n	801ec5a <__swhatbuf_r+0x12>
 801ec76:	9a01      	ldr	r2, [sp, #4]
 801ec78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ec7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ec80:	425a      	negs	r2, r3
 801ec82:	415a      	adcs	r2, r3
 801ec84:	602a      	str	r2, [r5, #0]
 801ec86:	e7ee      	b.n	801ec66 <__swhatbuf_r+0x1e>
 801ec88:	2340      	movs	r3, #64	; 0x40
 801ec8a:	2000      	movs	r0, #0
 801ec8c:	6023      	str	r3, [r4, #0]
 801ec8e:	b016      	add	sp, #88	; 0x58
 801ec90:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ec94 <__smakebuf_r>:
 801ec94:	898b      	ldrh	r3, [r1, #12]
 801ec96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec98:	079d      	lsls	r5, r3, #30
 801ec9a:	4606      	mov	r6, r0
 801ec9c:	460c      	mov	r4, r1
 801ec9e:	d507      	bpl.n	801ecb0 <__smakebuf_r+0x1c>
 801eca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eca4:	6023      	str	r3, [r4, #0]
 801eca6:	6123      	str	r3, [r4, #16]
 801eca8:	2301      	movs	r3, #1
 801ecaa:	6163      	str	r3, [r4, #20]
 801ecac:	b002      	add	sp, #8
 801ecae:	bd70      	pop	{r4, r5, r6, pc}
 801ecb0:	ab01      	add	r3, sp, #4
 801ecb2:	466a      	mov	r2, sp
 801ecb4:	f7ff ffc8 	bl	801ec48 <__swhatbuf_r>
 801ecb8:	9900      	ldr	r1, [sp, #0]
 801ecba:	4605      	mov	r5, r0
 801ecbc:	4630      	mov	r0, r6
 801ecbe:	f7fd fbeb 	bl	801c498 <_malloc_r>
 801ecc2:	b948      	cbnz	r0, 801ecd8 <__smakebuf_r+0x44>
 801ecc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecc8:	059a      	lsls	r2, r3, #22
 801ecca:	d4ef      	bmi.n	801ecac <__smakebuf_r+0x18>
 801eccc:	f023 0303 	bic.w	r3, r3, #3
 801ecd0:	f043 0302 	orr.w	r3, r3, #2
 801ecd4:	81a3      	strh	r3, [r4, #12]
 801ecd6:	e7e3      	b.n	801eca0 <__smakebuf_r+0xc>
 801ecd8:	4b0d      	ldr	r3, [pc, #52]	; (801ed10 <__smakebuf_r+0x7c>)
 801ecda:	62b3      	str	r3, [r6, #40]	; 0x28
 801ecdc:	89a3      	ldrh	r3, [r4, #12]
 801ecde:	6020      	str	r0, [r4, #0]
 801ece0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ece4:	81a3      	strh	r3, [r4, #12]
 801ece6:	9b00      	ldr	r3, [sp, #0]
 801ece8:	6163      	str	r3, [r4, #20]
 801ecea:	9b01      	ldr	r3, [sp, #4]
 801ecec:	6120      	str	r0, [r4, #16]
 801ecee:	b15b      	cbz	r3, 801ed08 <__smakebuf_r+0x74>
 801ecf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ecf4:	4630      	mov	r0, r6
 801ecf6:	f000 f81f 	bl	801ed38 <_isatty_r>
 801ecfa:	b128      	cbz	r0, 801ed08 <__smakebuf_r+0x74>
 801ecfc:	89a3      	ldrh	r3, [r4, #12]
 801ecfe:	f023 0303 	bic.w	r3, r3, #3
 801ed02:	f043 0301 	orr.w	r3, r3, #1
 801ed06:	81a3      	strh	r3, [r4, #12]
 801ed08:	89a0      	ldrh	r0, [r4, #12]
 801ed0a:	4305      	orrs	r5, r0
 801ed0c:	81a5      	strh	r5, [r4, #12]
 801ed0e:	e7cd      	b.n	801ecac <__smakebuf_r+0x18>
 801ed10:	0801c181 	.word	0x0801c181

0801ed14 <_fstat_r>:
 801ed14:	b538      	push	{r3, r4, r5, lr}
 801ed16:	4d07      	ldr	r5, [pc, #28]	; (801ed34 <_fstat_r+0x20>)
 801ed18:	2300      	movs	r3, #0
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	4608      	mov	r0, r1
 801ed1e:	4611      	mov	r1, r2
 801ed20:	602b      	str	r3, [r5, #0]
 801ed22:	f7f0 ffe6 	bl	800fcf2 <_fstat>
 801ed26:	1c43      	adds	r3, r0, #1
 801ed28:	d102      	bne.n	801ed30 <_fstat_r+0x1c>
 801ed2a:	682b      	ldr	r3, [r5, #0]
 801ed2c:	b103      	cbz	r3, 801ed30 <_fstat_r+0x1c>
 801ed2e:	6023      	str	r3, [r4, #0]
 801ed30:	bd38      	pop	{r3, r4, r5, pc}
 801ed32:	bf00      	nop
 801ed34:	20007480 	.word	0x20007480

0801ed38 <_isatty_r>:
 801ed38:	b538      	push	{r3, r4, r5, lr}
 801ed3a:	4d06      	ldr	r5, [pc, #24]	; (801ed54 <_isatty_r+0x1c>)
 801ed3c:	2300      	movs	r3, #0
 801ed3e:	4604      	mov	r4, r0
 801ed40:	4608      	mov	r0, r1
 801ed42:	602b      	str	r3, [r5, #0]
 801ed44:	f7f0 ffe5 	bl	800fd12 <_isatty>
 801ed48:	1c43      	adds	r3, r0, #1
 801ed4a:	d102      	bne.n	801ed52 <_isatty_r+0x1a>
 801ed4c:	682b      	ldr	r3, [r5, #0]
 801ed4e:	b103      	cbz	r3, 801ed52 <_isatty_r+0x1a>
 801ed50:	6023      	str	r3, [r4, #0]
 801ed52:	bd38      	pop	{r3, r4, r5, pc}
 801ed54:	20007480 	.word	0x20007480

0801ed58 <_init>:
 801ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed5a:	bf00      	nop
 801ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed5e:	bc08      	pop	{r3}
 801ed60:	469e      	mov	lr, r3
 801ed62:	4770      	bx	lr

0801ed64 <_fini>:
 801ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed66:	bf00      	nop
 801ed68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed6a:	bc08      	pop	{r3}
 801ed6c:	469e      	mov	lr, r3
 801ed6e:	4770      	bx	lr
