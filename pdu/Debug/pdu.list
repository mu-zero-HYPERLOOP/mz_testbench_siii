
pdu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0801bc54  0801bc54  0002bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c828  0801c828  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c828  0801c828  0002c828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c830  0801c830  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801c830  0801c830  0002c830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0801c840  0801c840  0002c840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801c84c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00008ffc  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  200090a4  200090a4  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046d9e  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008d6e  00000000  00000000  00076e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003190  00000000  00000000  0007fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e98  00000000  00000000  00082d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f67d  00000000  00000000  00085c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000354c1  00000000  00000000  000b528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100775  00000000  00000000  000ea74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001eaec3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e43c  00000000  00000000  001eaf14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bc3c 	.word	0x0801bc3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0801bc3c 	.word	0x0801bc3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	ed87 0a01 	vstr	s0, [r7, #4]
 800057e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000582:	f018 ffb1 	bl	80194e8 <roundf>
 8000586:	eef0 7a40 	vmov.f32	s15, s0
 800058a:	eeb0 0a67 	vmov.f32	s0, s15
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	4611      	mov	r1, r2
 80005a0:	461a      	mov	r2, r3
 80005a2:	460b      	mov	r3, r1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	4613      	mov	r3, r2
 80005a8:	71bb      	strb	r3, [r7, #6]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	711a      	strb	r2, [r3, #4]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	79ba      	ldrb	r2, [r7, #6]
 80005ba:	715a      	strb	r2, [r3, #5]
 80005bc:	68f9      	ldr	r1, [r7, #12]
 80005be:	f04f 0200 	mov.w	r2, #0
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80005ca:	68f9      	ldr	r1, [r7, #12]
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	f04f 0300 	mov.w	r3, #0
 80005d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <_ZN3can11MessageBaseC1EmhbPKh>:

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80005e6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005ea:	b0a2      	sub	sp, #136	; 0x88
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80005f2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80005f6:	4619      	mov	r1, r3
 80005f8:	4613      	mov	r3, r2
 80005fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80005fe:	460b      	mov	r3, r1
 8000600:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000604:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000612:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000616:	7113      	strb	r3, [r2, #4]
 8000618:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800061c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000620:	7153      	strb	r3, [r2, #5]
            // Using bitshift instead of memcpy because in this way the code does not depend on the endianess of the used microcontroller
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8000622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800062e:	3301      	adds	r3, #1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	441a      	add	r2, r3
 8000636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800063a:	3302      	adds	r3, #2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	441a      	add	r2, r3
 8000642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000646:	3303      	adds	r3, #3
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	061b      	lsls	r3, r3, #24
 800064c:	4413      	add	r3, r2
 800064e:	2200      	movs	r2, #0
 8000650:	461c      	mov	r4, r3
 8000652:	4615      	mov	r5, r2
 8000654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000658:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800065c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000660:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000668:	3304      	adds	r3, #4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2200      	movs	r2, #0
 8000670:	673b      	str	r3, [r7, #112]	; 0x70
 8000672:	677a      	str	r2, [r7, #116]	; 0x74
 8000674:	f04f 0000 	mov.w	r0, #0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800067e:	0019      	movs	r1, r3
 8000680:	2000      	movs	r0, #0
 8000682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000686:	3305      	adds	r3, #5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2200      	movs	r2, #0
 800068e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000690:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800069c:	0233      	lsls	r3, r6, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	eb10 0802 	adds.w	r8, r0, r2
 80006a4:	eb41 0903 	adc.w	r9, r1, r3
 80006a8:	eb14 0308 	adds.w	r3, r4, r8
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
 80006ae:	eb45 0309 	adc.w	r3, r5, r9
 80006b2:	667b      	str	r3, [r7, #100]	; 0x64
 80006b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80006bc:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 80006c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006c4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80006c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006cc:	3306      	adds	r3, #6
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80006d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006e2:	0419      	lsls	r1, r3, #16
 80006e4:	2000      	movs	r0, #0
 80006e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006ea:	3307      	adds	r3, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2200      	movs	r2, #0
 80006f2:	653b      	str	r3, [r7, #80]	; 0x50
 80006f4:	657a      	str	r2, [r7, #84]	; 0x54
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8000700:	0633      	lsls	r3, r6, #24
 8000702:	2200      	movs	r2, #0
 8000704:	eb10 0a02 	adds.w	sl, r0, r2
 8000708:	eb41 0b03 	adc.w	fp, r1, r3
 800070c:	eb14 030a 	adds.w	r3, r4, sl
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
 8000712:	eb45 030b 	adc.w	r3, r5, fp
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800071c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8000720:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8000724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000728:	3307      	adds	r3, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000732:	3306      	adds	r3, #6
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	441a      	add	r2, r3
 800073a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800073e:	3305      	adds	r3, #5
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	441a      	add	r2, r3
 8000746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800074a:	3304      	adds	r3, #4
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	061b      	lsls	r3, r3, #24
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	643b      	str	r3, [r7, #64]	; 0x40
 8000756:	647a      	str	r2, [r7, #68]	; 0x44
 8000758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800075c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000760:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8000764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000768:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800076c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000770:	3303      	adds	r3, #3
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2200      	movs	r2, #0
 8000778:	63bb      	str	r3, [r7, #56]	; 0x38
 800077a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000786:	0019      	movs	r1, r3
 8000788:	2000      	movs	r0, #0
 800078a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800078e:	3302      	adds	r3, #2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2200      	movs	r2, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
 8000798:	637a      	str	r2, [r7, #52]	; 0x34
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80007a4:	0233      	lsls	r3, r6, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	1886      	adds	r6, r0, r2
 80007aa:	62be      	str	r6, [r7, #40]	; 0x28
 80007ac:	eb41 0303 	adc.w	r3, r1, r3
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80007b6:	460b      	mov	r3, r1
 80007b8:	18e3      	adds	r3, r4, r3
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	4613      	mov	r3, r2
 80007be:	eb45 0303 	adc.w	r3, r5, r3
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
 80007c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80007cc:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 80007d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007d4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80007d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007dc:	3301      	adds	r3, #1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	61fa      	str	r2, [r7, #28]
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	0419      	lsls	r1, r3, #16
 80007f4:	2000      	movs	r0, #0
 80007f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2200      	movs	r2, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	617a      	str	r2, [r7, #20]
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	693e      	ldr	r6, [r7, #16]
 800080e:	0633      	lsls	r3, r6, #24
 8000810:	2200      	movs	r2, #0
 8000812:	1886      	adds	r6, r0, r2
 8000814:	60be      	str	r6, [r7, #8]
 8000816:	eb41 0303 	adc.w	r3, r1, r3
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000820:	460b      	mov	r3, r1
 8000822:	18e3      	adds	r3, r4, r3
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4613      	mov	r3, r2
 8000828:	eb45 0303 	adc.w	r3, r5, r3
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000836:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 800083a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800083e:	4618      	mov	r0, r3
 8000840:	3788      	adds	r7, #136	; 0x88
 8000842:	46bd      	mov	sp, r7
 8000844:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000848:	4770      	bx	lr

0800084a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 800084a:	b490      	push	{r4, r7}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00a      	beq.n	8000876 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	2204      	movs	r2, #4
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	e009      	b.n	800088a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	461a      	mov	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2200      	movs	r2, #0
 800089e:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008a6:	b2d4      	uxtb	r4, r2
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	0e0a      	lsrs	r2, r1, #24
 80008b8:	2300      	movs	r3, #0
 80008ba:	b2d3      	uxtb	r3, r2
 80008bc:	4323      	orrs	r3, r4
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80008ca:	f04f 0200 	mov.w	r2, #0
 80008ce:	f04f 0300 	mov.w	r3, #0
 80008d2:	0a02      	lsrs	r2, r0, #8
 80008d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008d8:	0a0b      	lsrs	r3, r1, #8
 80008da:	b2d4      	uxtb	r4, r2
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	0c0a      	lsrs	r2, r1, #16
 80008ec:	2300      	movs	r3, #0
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4322      	orrs	r2, r4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	0c02      	lsrs	r2, r0, #16
 800090a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800090e:	0c0b      	lsrs	r3, r1, #16
 8000910:	b2d4      	uxtb	r4, r2
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	0a0a      	lsrs	r2, r1, #8
 8000922:	2300      	movs	r3, #0
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	4322      	orrs	r2, r4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	0e02      	lsrs	r2, r0, #24
 8000940:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000944:	0e0b      	lsrs	r3, r1, #24
 8000946:	b2d4      	uxtb	r4, r2
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	000a      	movs	r2, r1
 8000958:	2300      	movs	r3, #0
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3303      	adds	r3, #3
 8000960:	4322      	orrs	r2, r4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	000a      	movs	r2, r1
 8000976:	2300      	movs	r3, #0
 8000978:	b2d4      	uxtb	r4, r2
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	0e02      	lsrs	r2, r0, #24
 800098a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800098e:	0e0b      	lsrs	r3, r1, #24
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3304      	adds	r3, #4
 8000996:	4322      	orrs	r2, r4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	0a0a      	lsrs	r2, r1, #8
 80009ac:	2300      	movs	r3, #0
 80009ae:	b2d4      	uxtb	r4, r2
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	0c02      	lsrs	r2, r0, #16
 80009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3305      	adds	r3, #5
 80009cc:	4322      	orrs	r2, r4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	0c0a      	lsrs	r2, r1, #16
 80009e2:	2300      	movs	r3, #0
 80009e4:	b2d4      	uxtb	r4, r2
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	0a02      	lsrs	r2, r0, #8
 80009f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80009fa:	0a0b      	lsrs	r3, r1, #8
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3306      	adds	r3, #6
 8000a02:	4322      	orrs	r2, r4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	0e0a      	lsrs	r2, r1, #24
 8000a18:	2300      	movs	r3, #0
 8000a1a:	b2d1      	uxtb	r1, r2
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3307      	adds	r3, #7
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	701a      	strb	r2, [r3, #0]
        }
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc90      	pop	{r4, r7}
 8000a36:	4770      	bx	lr

08000a38 <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2300      	movs	r3, #0
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	6053      	str	r3, [r2, #4]
 8000a4a:	6093      	str	r3, [r2, #8]
 8000a4c:	60d3      	str	r3, [r2, #12]
 8000a4e:	6113      	str	r3, [r2, #16]
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff ffe3 	bl	8000a38 <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f103 0218 	add.w	r2, r3, #24
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68f9      	ldr	r1, [r7, #12]
 8000a7c:	68b8      	ldr	r0, [r7, #8]
 8000a7e:	f7ff fee4 	bl	800084a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8000a82:	bf00      	nop
        }
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA, 0x61A };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8000a8c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000a90:	b087      	sub	sp, #28
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa2:	d302      	bcc.n	8000aaa <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8000aa4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000aa8:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab4:	8af9      	ldrh	r1, [r7, #22]
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	468a      	mov	sl, r1
 8000aba:	4683      	mov	fp, r0
 8000abc:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	ea42 0804 	orr.w	r8, r2, r4
 8000ac6:	ea43 0905 	orr.w	r9, r3, r5
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8000ad0:	bf00      	nop
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ada:	4770      	bx	lr

08000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aec:	b293      	uxth	r3, r2
 8000aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000af2:	81fb      	strh	r3, [r7, #14]
                return value;
 8000af4:	89fb      	ldrh	r3, [r7, #14]
            }
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_ZN3can7signals16PDU_SDO_RespCode3setERyS2_Rhh>:
        class PDU_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x59A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8000b02:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4698      	mov	r8, r3
 8000b22:	4691      	mov	r9, r2
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8000b30:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8000b34:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8000b38:	b294      	uxth	r4, r2
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	ea40 0a04 	orr.w	sl, r0, r4
 8000b40:	ea41 0b05 	orr.w	fp, r1, r5
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8000b4a:	bf00      	nop
 8000b4c:	371c      	adds	r7, #28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000b54:	4770      	bx	lr

08000b56 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2816            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8000b56:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2816);
 8000b66:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff ff8c 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	2200      	movs	r2, #0
 8000b82:	4698      	mov	r8, r3
 8000b84:	4691      	mov	r9, r2
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	f04f 0300 	mov.w	r3, #0
 8000b8e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8000b92:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8000b96:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8000b9a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	ea40 0a04 	orr.w	sl, r0, r4
 8000ba4:	ea41 0b05 	orr.w	fp, r1, r5
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	701a      	strb	r2, [r3, #0]
            }
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000bbe <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2816) {
 8000bc8:	6839      	ldr	r1, [r7, #0]
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff86 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d000      	beq.n	8000be4 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_+0x26>
                    while(1);
 8000be2:	e7fe      	b.n	8000be2 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	0c02      	lsrs	r2, r0, #16
 8000bf4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf8:	0c0b      	lsrs	r3, r1, #16
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	73fb      	strb	r3, [r7, #15]
                return value;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
            }
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_ZN3can7signals18PDU_OD_LedCommands3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2562            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8000c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c0c:	b088      	sub	sp, #32
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6178      	str	r0, [r7, #20]
 8000c12:	6139      	str	r1, [r7, #16]
 8000c14:	60fa      	str	r2, [r7, #12]
 8000c16:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2562);
 8000c18:	f640 2302 	movw	r3, #2562	; 0xa02
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	6939      	ldr	r1, [r7, #16]
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff ff33 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	8bf9      	ldrh	r1, [r7, #30]
 8000c32:	2000      	movs	r0, #0
 8000c34:	4688      	mov	r8, r1
 8000c36:	4681      	mov	r9, r0
 8000c38:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8000c3c:	6079      	str	r1, [r7, #4]
 8000c3e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8000c42:	6039      	str	r1, [r7, #0]
 8000c44:	683c      	ldr	r4, [r7, #0]
 8000c46:	2500      	movs	r5, #0
 8000c48:	ea42 0a04 	orr.w	sl, r2, r4
 8000c4c:	ea43 0b05 	orr.w	fp, r3, r5
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	701a      	strb	r2, [r3, #0]
            }
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c66 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2562) {
 8000c70:	6839      	ldr	r1, [r7, #0]
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff32 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f640 2302 	movw	r3, #2562	; 0xa02
 8000c80:	429a      	cmp	r2, r3
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d000      	beq.n	8000c90 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_+0x2a>
                    while(1);
 8000c8e:	e7fe      	b.n	8000c8e <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0c02      	lsrs	r2, r0, #16
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	0c0b      	lsrs	r3, r1, #16
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	81fb      	strh	r3, [r7, #14]
                return value;
 8000caa:	89fb      	ldrh	r3, [r7, #14]
            }
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN3can7signals23PDU_OD_projectXXEnabled3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2560            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8000cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2560);
 8000cc4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff fedd 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	4691      	mov	r9, r2
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8000cf0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8000cf4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8000cf8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	ea40 0a04 	orr.w	sl, r0, r4
 8000d02:	ea41 0b05 	orr.w	fp, r1, r5
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	701a      	strb	r2, [r3, #0]
            }
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000d1c <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2560) {
 8000d26:	6839      	ldr	r1, [r7, #0]
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fed7 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d000      	beq.n	8000d42 <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_+0x26>
                    while(1);
 8000d40:	e7fe      	b.n	8000d40 <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	0c02      	lsrs	r2, r0, #16
 8000d52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d56:	0c0b      	lsrs	r3, r1, #16
 8000d58:	4613      	mov	r3, r2
 8000d5a:	73fb      	strb	r3, [r7, #15]
                return value;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
            }
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_ZN3can7signals22PDU_OD_watchdogTimeout3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2306            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8000d66:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6178      	str	r0, [r7, #20]
 8000d70:	6139      	str	r1, [r7, #16]
 8000d72:	60fa      	str	r2, [r7, #12]
 8000d74:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2306);
 8000d76:	f640 1302 	movw	r3, #2306	; 0x902
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	6939      	ldr	r1, [r7, #16]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff fe84 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8000d84:	897b      	ldrh	r3, [r7, #10]
 8000d86:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	8bf9      	ldrh	r1, [r7, #30]
 8000d90:	2000      	movs	r0, #0
 8000d92:	4688      	mov	r8, r1
 8000d94:	4681      	mov	r9, r0
 8000d96:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8000d9a:	6079      	str	r1, [r7, #4]
 8000d9c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	683c      	ldr	r4, [r7, #0]
 8000da4:	2500      	movs	r5, #0
 8000da6:	ea42 0a04 	orr.w	sl, r2, r4
 8000daa:	ea43 0b05 	orr.w	fp, r3, r5
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2204      	movs	r2, #4
 8000db8:	701a      	strb	r2, [r3, #0]
            }
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000dc4 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2306) {
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fe83 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f640 1302 	movw	r3, #2306	; 0x902
 8000dde:	429a      	cmp	r2, r3
 8000de0:	bf14      	ite	ne
 8000de2:	2301      	movne	r3, #1
 8000de4:	2300      	moveq	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d000      	beq.n	8000dee <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_+0x2a>
                    while(1);
 8000dec:	e7fe      	b.n	8000dec <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	0c02      	lsrs	r2, r0, #16
 8000dfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e02:	0c0b      	lsrs	r3, r1, #16
 8000e04:	4613      	mov	r3, r2
 8000e06:	81fb      	strh	r3, [r7, #14]
                return value;
 8000e08:	89fb      	ldrh	r3, [r7, #14]
            }
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_ZN3can7signals25PDU_OD_statusSendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2305            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8000e12:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6178      	str	r0, [r7, #20]
 8000e1c:	6139      	str	r1, [r7, #16]
 8000e1e:	60fa      	str	r2, [r7, #12]
 8000e20:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2305);
 8000e22:	f640 1301 	movw	r3, #2305	; 0x901
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	6939      	ldr	r1, [r7, #16]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff fe2e 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8000e30:	897b      	ldrh	r3, [r7, #10]
 8000e32:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	8bf9      	ldrh	r1, [r7, #30]
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	4688      	mov	r8, r1
 8000e40:	4681      	mov	r9, r0
 8000e42:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8000e46:	6079      	str	r1, [r7, #4]
 8000e48:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	683c      	ldr	r4, [r7, #0]
 8000e50:	2500      	movs	r5, #0
 8000e52:	ea42 0a04 	orr.w	sl, r2, r4
 8000e56:	ea43 0b05 	orr.w	fp, r3, r5
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2204      	movs	r2, #4
 8000e64:	701a      	strb	r2, [r3, #0]
            }
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000e70 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2305) {
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fe2d 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	f640 1301 	movw	r3, #2305	; 0x901
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	bf14      	ite	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	2300      	moveq	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d000      	beq.n	8000e9a <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_+0x2a>
                    while(1);
 8000e98:	e7fe      	b.n	8000e98 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	0c02      	lsrs	r2, r0, #16
 8000eaa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eae:	0c0b      	lsrs	r3, r1, #16
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	81fb      	strh	r3, [r7, #14]
                return value;
 8000eb4:	89fb      	ldrh	r3, [r7, #14]
            }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN3can7signals26PDU_OD_currentReadInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2304            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8000ebe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6178      	str	r0, [r7, #20]
 8000ec8:	6139      	str	r1, [r7, #16]
 8000eca:	60fa      	str	r2, [r7, #12]
 8000ecc:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 2304);
 8000ece:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	6939      	ldr	r1, [r7, #16]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff fdd8 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8000edc:	897b      	ldrh	r3, [r7, #10]
 8000ede:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	8bf9      	ldrh	r1, [r7, #30]
 8000ee8:	2000      	movs	r0, #0
 8000eea:	4688      	mov	r8, r1
 8000eec:	4681      	mov	r9, r0
 8000eee:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8000ef2:	6079      	str	r1, [r7, #4]
 8000ef4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	683c      	ldr	r4, [r7, #0]
 8000efc:	2500      	movs	r5, #0
 8000efe:	ea42 0a04 	orr.w	sl, r2, r4
 8000f02:	ea43 0b05 	orr.w	fp, r3, r5
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	701a      	strb	r2, [r3, #0]
            }
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f1c <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2304) {
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fdd7 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d000      	beq.n	8000f42 <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_+0x26>
                    while(1);
 8000f40:	e7fe      	b.n	8000f40 <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	0c02      	lsrs	r2, r0, #16
 8000f52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f56:	0c0b      	lsrs	r3, r1, #16
 8000f58:	4613      	mov	r3, r2
 8000f5a:	81fb      	strh	r3, [r7, #14]
                return value;
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
            }
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8000f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f6c:	b088      	sub	sp, #32
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6178      	str	r0, [r7, #20]
 8000f72:	6139      	str	r1, [r7, #16]
 8000f74:	60fa      	str	r2, [r7, #12]
 8000f76:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001010 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xa8>
 8000f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	dd01      	ble.n	8000f90 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0x28>
                    value = max;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xac>)
 8000f8e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8000f90:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	d502      	bpl.n	8000fa4 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0x3c>
                    value = min;
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2128);
 8000fa4:	f44f 6305 	mov.w	r3, #2128	; 0x850
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	6978      	ldr	r0, [r7, #20]
 8000fae:	f7ff fd6d 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8000fb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001018 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf+0xb0>
 8000fba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fbe:	eeb0 0a47 	vmov.f32	s0, s14
 8000fc2:	f7ff fad7 	bl	8000574 <_ZSt5roundf>
 8000fc6:	eef0 7a40 	vmov.f32	s15, s0
 8000fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
 8000fd2:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	8bf9      	ldrh	r1, [r7, #30]
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4688      	mov	r8, r1
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8000fe6:	6079      	str	r1, [r7, #4]
 8000fe8:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	683c      	ldr	r4, [r7, #0]
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	ea42 0a04 	orr.w	sl, r2, r4
 8000ff6:	ea43 0b05 	orr.w	fp, r3, r5
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2204      	movs	r2, #4
 8001004:	701a      	strb	r2, [r3, #0]
            }
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001010:	4423d666 	.word	0x4423d666
 8001014:	4423d666 	.word	0x4423d666
 8001018:	3c23d70a 	.word	0x3c23d70a

0800101c <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2128) {
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fd57 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800102e:	4603      	mov	r3, r0
 8001030:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8001034:	bf14      	ite	ne
 8001036:	2301      	movne	r3, #1
 8001038:	2300      	moveq	r3, #0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d000      	beq.n	8001042 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x26>
                    while(1);
 8001040:	e7fe      	b.n	8001040 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	0c02      	lsrs	r2, r0, #16
 8001052:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001056:	0c0b      	lsrs	r3, r1, #16
 8001058:	4613      	mov	r3, r2
 800105a:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001078 <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_+0x5c>
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	3c23d70a 	.word	0x3c23d70a

0800107c <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(6553.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800107c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001080:	b088      	sub	sp, #32
 8001082:	af00      	add	r7, sp, #0
 8001084:	6178      	str	r0, [r7, #20]
 8001086:	6139      	str	r1, [r7, #16]
 8001088:	60fa      	str	r2, [r7, #12]
 800108a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800108e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001092:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001124 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xa8>
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	dd01      	ble.n	80010a4 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0x28>
                    value = max;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xac>)
 80010a2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80010a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	d502      	bpl.n	80010b8 <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0x3c>
                    value = min;
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2051);
 80010b8:	f640 0303 	movw	r3, #2051	; 0x803
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f7ff fce3 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.1f)));
 80010c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ca:	eddf 6a18 	vldr	s13, [pc, #96]	; 800112c <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf+0xb0>
 80010ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010d2:	eeb0 0a47 	vmov.f32	s0, s14
 80010d6:	f7ff fa4d 	bl	8000574 <_ZSt5roundf>
 80010da:	eef0 7a40 	vmov.f32	s15, s0
 80010de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e2:	ee17 3a90 	vmov	r3, s15
 80010e6:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	8bf9      	ldrh	r1, [r7, #30]
 80010f0:	2000      	movs	r0, #0
 80010f2:	4688      	mov	r8, r1
 80010f4:	4681      	mov	r9, r0
 80010f6:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80010fa:	6079      	str	r1, [r7, #4]
 80010fc:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	683c      	ldr	r4, [r7, #0]
 8001104:	2500      	movs	r5, #0
 8001106:	ea42 0a04 	orr.w	sl, r2, r4
 800110a:	ea43 0b05 	orr.w	fp, r3, r5
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2204      	movs	r2, #4
 8001118:	701a      	strb	r2, [r3, #0]
            }
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001124:	45cccc00 	.word	0x45cccc00
 8001128:	45cccc00 	.word	0x45cccc00
 800112c:	3dcccccd 	.word	0x3dcccccd

08001130 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2051) {
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fccd 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	f640 0303 	movw	r3, #2051	; 0x803
 800114a:	429a      	cmp	r2, r3
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d000      	beq.n	800115a <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x2a>
                    while(1);
 8001158:	e7fe      	b.n	8001158 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	0c02      	lsrs	r2, r0, #16
 800116a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800116e:	0c0b      	lsrs	r3, r1, #16
 8001170:	4613      	mov	r3, r2
 8001172:	81fb      	strh	r3, [r7, #14]
                return value * (0.1f);
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001190 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_+0x60>
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	3dcccccd 	.word	0x3dcccccd

08001194 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(6553.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8001194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af00      	add	r7, sp, #0
 800119c:	6178      	str	r0, [r7, #20]
 800119e:	6139      	str	r1, [r7, #16]
 80011a0:	60fa      	str	r2, [r7, #12]
 80011a2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80011a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800123c <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xa8>
 80011ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	dd01      	ble.n	80011bc <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0x28>
                    value = max;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xac>)
 80011ba:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80011bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	d502      	bpl.n	80011d0 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0x3c>
                    value = min;
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2050);
 80011d0:	f640 0302 	movw	r3, #2050	; 0x802
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff fc57 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.1f)));
 80011de:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001244 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf+0xb0>
 80011e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011ea:	eeb0 0a47 	vmov.f32	s0, s14
 80011ee:	f7ff f9c1 	bl	8000574 <_ZSt5roundf>
 80011f2:	eef0 7a40 	vmov.f32	s15, s0
 80011f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fa:	ee17 3a90 	vmov	r3, s15
 80011fe:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	8bf9      	ldrh	r1, [r7, #30]
 8001208:	2000      	movs	r0, #0
 800120a:	4688      	mov	r8, r1
 800120c:	4681      	mov	r9, r0
 800120e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8001212:	6079      	str	r1, [r7, #4]
 8001214:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	683c      	ldr	r4, [r7, #0]
 800121c:	2500      	movs	r5, #0
 800121e:	ea42 0a04 	orr.w	sl, r2, r4
 8001222:	ea43 0b05 	orr.w	fp, r3, r5
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
            }
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800123c:	45cccc00 	.word	0x45cccc00
 8001240:	45cccc00 	.word	0x45cccc00
 8001244:	3dcccccd 	.word	0x3dcccccd

08001248 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2050) {
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fc41 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	f640 0302 	movw	r3, #2050	; 0x802
 8001262:	429a      	cmp	r2, r3
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d000      	beq.n	8001272 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x2a>
                    while(1);
 8001270:	e7fe      	b.n	8001270 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	0c02      	lsrs	r2, r0, #16
 8001282:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001286:	0c0b      	lsrs	r3, r1, #16
 8001288:	4613      	mov	r3, r2
 800128a:	81fb      	strh	r3, [r7, #14]
                return value * (0.1f);
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80012a8 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_+0x60>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	3dcccccd 	.word	0x3dcccccd

080012ac <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80012ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012b0:	b088      	sub	sp, #32
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6178      	str	r0, [r7, #20]
 80012b6:	6139      	str	r1, [r7, #16]
 80012b8:	60fa      	str	r2, [r7, #12]
 80012ba:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80012be:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001354 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xa8>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	dd01      	ble.n	80012d4 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0x28>
                    value = max;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xac>)
 80012d2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80012d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d502      	bpl.n	80012e8 <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0x3c>
                    value = min;
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2049);
 80012e8:	f640 0301 	movw	r3, #2049	; 0x801
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	6978      	ldr	r0, [r7, #20]
 80012f2:	f7ff fbcb 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	eddf 6a18 	vldr	s13, [pc, #96]	; 800135c <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf+0xb0>
 80012fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001302:	eeb0 0a47 	vmov.f32	s0, s14
 8001306:	f7ff f935 	bl	8000574 <_ZSt5roundf>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001312:	ee17 3a90 	vmov	r3, s15
 8001316:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	8bf9      	ldrh	r1, [r7, #30]
 8001320:	2000      	movs	r0, #0
 8001322:	4688      	mov	r8, r1
 8001324:	4681      	mov	r9, r0
 8001326:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800132a:	6079      	str	r1, [r7, #4]
 800132c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	683c      	ldr	r4, [r7, #0]
 8001334:	2500      	movs	r5, #0
 8001336:	ea42 0a04 	orr.w	sl, r2, r4
 800133a:	ea43 0b05 	orr.w	fp, r3, r5
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2204      	movs	r2, #4
 8001348:	701a      	strb	r2, [r3, #0]
            }
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001354:	4423d666 	.word	0x4423d666
 8001358:	4423d666 	.word	0x4423d666
 800135c:	3c23d70a 	.word	0x3c23d70a

08001360 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2049) {
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fbb5 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f640 0301 	movw	r3, #2049	; 0x801
 800137a:	429a      	cmp	r2, r3
 800137c:	bf14      	ite	ne
 800137e:	2301      	movne	r3, #1
 8001380:	2300      	moveq	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d000      	beq.n	800138a <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x2a>
                    while(1);
 8001388:	e7fe      	b.n	8001388 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	0c02      	lsrs	r2, r0, #16
 800139a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800139e:	0c0b      	lsrs	r3, r1, #16
 80013a0:	4613      	mov	r3, r2
 80013a2:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ae:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80013c0 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_+0x60>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	3c23d70a 	.word	0x3c23d70a

080013c4 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(655.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80013c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c8:	b088      	sub	sp, #32
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6178      	str	r0, [r7, #20]
 80013ce:	6139      	str	r1, [r7, #16]
 80013d0:	60fa      	str	r2, [r7, #12]
 80013d2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80013d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013da:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800146c <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xa8>
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	dd01      	ble.n	80013ec <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0x28>
                    value = max;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xac>)
 80013ea:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80013ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d502      	bpl.n	8001400 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0x3c>
                    value = min;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 2048);
 8001400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	6939      	ldr	r1, [r7, #16]
 8001408:	6978      	ldr	r0, [r7, #20]
 800140a:	f7ff fb3f 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 800140e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001412:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001474 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf+0xb0>
 8001416:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800141a:	eeb0 0a47 	vmov.f32	s0, s14
 800141e:	f7ff f8a9 	bl	8000574 <_ZSt5roundf>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	8bf9      	ldrh	r1, [r7, #30]
 8001438:	2000      	movs	r0, #0
 800143a:	4688      	mov	r8, r1
 800143c:	4681      	mov	r9, r0
 800143e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8001442:	6079      	str	r1, [r7, #4]
 8001444:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	683c      	ldr	r4, [r7, #0]
 800144c:	2500      	movs	r5, #0
 800144e:	ea42 0a04 	orr.w	sl, r2, r4
 8001452:	ea43 0b05 	orr.w	fp, r3, r5
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2204      	movs	r2, #4
 8001460:	701a      	strb	r2, [r3, #0]
            }
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800146c:	4423d666 	.word	0x4423d666
 8001470:	4423d666 	.word	0x4423d666
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 2048) {
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fb29 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800148a:	4603      	mov	r3, r0
 800148c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x26>
                    while(1);
 800149c:	e7fe      	b.n	800149c <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	0c02      	lsrs	r2, r0, #16
 80014ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014b2:	0c0b      	lsrs	r3, r1, #16
 80014b4:	4613      	mov	r3, r2
 80014b6:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80014d4 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_+0x5c>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	3c23d70a 	.word	0x3c23d70a

080014d8 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6178      	str	r0, [r7, #20]
 80014e2:	6139      	str	r1, [r7, #16]
 80014e4:	60fa      	str	r2, [r7, #12]
 80014e6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ee:	d302      	bcc.n	80014f6 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80014f0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80014f4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1129);
 80014f6:	f240 4369 	movw	r3, #1129	; 0x469
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff fac4 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	69f9      	ldr	r1, [r7, #28]
 8001510:	2000      	movs	r0, #0
 8001512:	468a      	mov	sl, r1
 8001514:	4683      	mov	fp, r0
 8001516:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800151a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800151e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001522:	0424      	lsls	r4, r4, #16
 8001524:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001528:	ea42 0104 	orr.w	r1, r2, r4
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	432b      	orrs	r3, r5
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001538:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2205      	movs	r2, #5
 8001540:	701a      	strb	r2, [r3, #0]
            }
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800154c <_ZN3can7signals23PDU_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800154c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1128);
 800155c:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fa91 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2200      	movs	r2, #0
 8001578:	4698      	mov	r8, r3
 800157a:	4691      	mov	r9, r2
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001588:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800158c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001590:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001594:	2500      	movs	r5, #0
 8001596:	ea40 0a04 	orr.w	sl, r0, r4
 800159a:	ea41 0b05 	orr.w	fp, r1, r5
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	701a      	strb	r2, [r3, #0]
            }
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080015b4 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80015b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b8:	b088      	sub	sp, #32
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6178      	str	r0, [r7, #20]
 80015be:	6139      	str	r1, [r7, #16]
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ca:	d302      	bcc.n	80015d2 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80015cc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80015d0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1127);
 80015d2:	f240 4367 	movw	r3, #1127	; 0x467
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff fa56 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	69f9      	ldr	r1, [r7, #28]
 80015ec:	2000      	movs	r0, #0
 80015ee:	468a      	mov	sl, r1
 80015f0:	4683      	mov	fp, r0
 80015f2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80015f6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80015fa:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80015fe:	0424      	lsls	r4, r4, #16
 8001600:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001604:	ea42 0104 	orr.w	r1, r2, r4
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	432b      	orrs	r3, r5
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001614:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2205      	movs	r2, #5
 800161c:	701a      	strb	r2, [r3, #0]
            }
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001628 <_ZN3can7signals18PDU_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1126);
 8001638:	f240 4366 	movw	r3, #1126	; 0x466
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fa23 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2200      	movs	r2, #0
 8001654:	4698      	mov	r8, r3
 8001656:	4691      	mov	r9, r2
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001664:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001668:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800166c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001670:	2500      	movs	r5, #0
 8001672:	ea40 0a04 	orr.w	sl, r0, r4
 8001676:	ea41 0b05 	orr.w	fp, r1, r5
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	701a      	strb	r2, [r3, #0]
            }
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001690 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8001690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001694:	b088      	sub	sp, #32
 8001696:	af00      	add	r7, sp, #0
 8001698:	6178      	str	r0, [r7, #20]
 800169a:	6139      	str	r1, [r7, #16]
 800169c:	60fa      	str	r2, [r7, #12]
 800169e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a6:	d902      	bls.n	80016ae <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 80016a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ac:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 80016ae:	897b      	ldrh	r3, [r7, #10]
 80016b0:	2b7c      	cmp	r3, #124	; 0x7c
 80016b2:	d801      	bhi.n	80016b8 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80016b4:	237d      	movs	r3, #125	; 0x7d
 80016b6:	817b      	strh	r3, [r7, #10]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1124);
 80016b8:	f240 4364 	movw	r3, #1124	; 0x464
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff f9e3 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	8bf9      	ldrh	r1, [r7, #30]
 80016d2:	2000      	movs	r0, #0
 80016d4:	4688      	mov	r8, r1
 80016d6:	4681      	mov	r9, r0
 80016d8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80016dc:	6079      	str	r1, [r7, #4]
 80016de:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80016e2:	6039      	str	r1, [r7, #0]
 80016e4:	683c      	ldr	r4, [r7, #0]
 80016e6:	2500      	movs	r5, #0
 80016e8:	ea42 0a04 	orr.w	sl, r2, r4
 80016ec:	ea43 0b05 	orr.w	fp, r3, r5
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2204      	movs	r2, #4
 80016fa:	701a      	strb	r2, [r3, #0]
            }
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001706 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1124) {
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff f9e2 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	f240 4364 	movw	r3, #1124	; 0x464
 8001720:	429a      	cmp	r2, r3
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d000      	beq.n	8001730 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800172e:	e7fe      	b.n	800172e <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	0c02      	lsrs	r2, r0, #16
 8001740:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001744:	0c0b      	lsrs	r3, r1, #16
 8001746:	4613      	mov	r3, r2
 8001748:	81fb      	strh	r3, [r7, #14]
                return value;
 800174a:	89fb      	ldrh	r3, [r7, #14]
            }
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1123);
 8001764:	f240 4363 	movw	r3, #1123	; 0x463
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7ff f98d 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2200      	movs	r2, #0
 8001780:	4698      	mov	r8, r3
 8001782:	4691      	mov	r9, r2
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001790:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001794:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001798:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800179c:	2500      	movs	r5, #0
 800179e:	ea40 0a04 	orr.w	sl, r0, r4
 80017a2:	ea41 0b05 	orr.w	fp, r1, r5
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
            }
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017bc <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1123) {
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff f987 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	f240 4363 	movw	r3, #1123	; 0x463
 80017d6:	429a      	cmp	r2, r3
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d000      	beq.n	80017e6 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80017e4:	e7fe      	b.n	80017e4 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	0c02      	lsrs	r2, r0, #16
 80017f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80017fa:	0c0b      	lsrs	r3, r1, #16
 80017fc:	4613      	mov	r3, r2
 80017fe:	73fb      	strb	r3, [r7, #15]
                return value;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
            }
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800180c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001810:	b088      	sub	sp, #32
 8001812:	af00      	add	r7, sp, #0
 8001814:	6178      	str	r0, [r7, #20]
 8001816:	6139      	str	r1, [r7, #16]
 8001818:	60fa      	str	r2, [r7, #12]
 800181a:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1122);
 800181c:	f240 4362 	movw	r3, #1122	; 0x462
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	6978      	ldr	r0, [r7, #20]
 8001826:	f7ff f931 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	69f9      	ldr	r1, [r7, #28]
 8001836:	2000      	movs	r0, #0
 8001838:	468a      	mov	sl, r1
 800183a:	4683      	mov	fp, r0
 800183c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001840:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8001846:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800184a:	ea08 0400 	and.w	r4, r8, r0
 800184e:	ea09 0501 	and.w	r5, r9, r1
 8001852:	ea42 0104 	orr.w	r1, r2, r4
 8001856:	6039      	str	r1, [r7, #0]
 8001858:	432b      	orrs	r3, r5
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001862:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2206      	movs	r2, #6
 800186a:	701a      	strb	r2, [r3, #0]
            }
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001876:	bf00      	nop
 8001878:	ffff0000 	.word	0xffff0000

0800187c <_ZN3can7signals20PDU_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800187c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1121);
 800188c:	f240 4361 	movw	r3, #1121	; 0x461
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff f8f9 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4698      	mov	r8, r3
 80018aa:	4691      	mov	r9, r2
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80018b8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80018bc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80018c0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80018c4:	2500      	movs	r5, #0
 80018c6:	ea40 0a04 	orr.w	sl, r0, r4
 80018ca:	ea41 0b05 	orr.w	fp, r1, r5
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2203      	movs	r2, #3
 80018d8:	701a      	strb	r2, [r3, #0]
            }
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080018e4 <_ZN3can7signals20PDU_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1120);
 80018f4:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff f8c5 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2200      	movs	r2, #0
 8001910:	4698      	mov	r8, r3
 8001912:	4691      	mov	r9, r2
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001920:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001924:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001928:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800192c:	2500      	movs	r5, #0
 800192e:	ea40 0a04 	orr.w	sl, r0, r4
 8001932:	ea41 0b05 	orr.w	fp, r1, r5
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2203      	movs	r2, #3
 8001940:	701a      	strb	r2, [r3, #0]
            }
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800194c <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800194c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001950:	b088      	sub	sp, #32
 8001952:	af00      	add	r7, sp, #0
 8001954:	6178      	str	r0, [r7, #20]
 8001956:	6139      	str	r1, [r7, #16]
 8001958:	60fa      	str	r2, [r7, #12]
 800195a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001962:	d302      	bcc.n	800196a <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8001964:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001968:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1113);
 800196a:	f240 4359 	movw	r3, #1113	; 0x459
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff f88a 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	69f9      	ldr	r1, [r7, #28]
 8001984:	2000      	movs	r0, #0
 8001986:	468a      	mov	sl, r1
 8001988:	4683      	mov	fp, r0
 800198a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800198e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001992:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001996:	0424      	lsls	r4, r4, #16
 8001998:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800199c:	ea42 0104 	orr.w	r1, r2, r4
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	432b      	orrs	r3, r5
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80019ac:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2205      	movs	r2, #5
 80019b4:	701a      	strb	r2, [r3, #0]
            }
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019c0 <_ZN3can7signals23PDU_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1112);
 80019d0:	f44f 638b 	mov.w	r3, #1112	; 0x458
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff f857 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2200      	movs	r2, #0
 80019ec:	4698      	mov	r8, r3
 80019ee:	4691      	mov	r9, r2
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80019fc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001a00:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001a04:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001a08:	2500      	movs	r5, #0
 8001a0a:	ea40 0a04 	orr.w	sl, r0, r4
 8001a0e:	ea41 0b05 	orr.w	fp, r1, r5
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	701a      	strb	r2, [r3, #0]
            }
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a28 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a2c:	b088      	sub	sp, #32
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6178      	str	r0, [r7, #20]
 8001a32:	6139      	str	r1, [r7, #16]
 8001a34:	60fa      	str	r2, [r7, #12]
 8001a36:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3e:	d302      	bcc.n	8001a46 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8001a40:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001a44:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1111);
 8001a46:	f240 4357 	movw	r3, #1111	; 0x457
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff f81c 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	69f9      	ldr	r1, [r7, #28]
 8001a60:	2000      	movs	r0, #0
 8001a62:	468a      	mov	sl, r1
 8001a64:	4683      	mov	fp, r0
 8001a66:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001a6a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001a6e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001a72:	0424      	lsls	r4, r4, #16
 8001a74:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001a78:	ea42 0104 	orr.w	r1, r2, r4
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	432b      	orrs	r3, r5
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a88:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	701a      	strb	r2, [r3, #0]
            }
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a9c <_ZN3can7signals18PDU_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1110);
 8001aac:	f240 4356 	movw	r3, #1110	; 0x456
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7fe ffe9 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4698      	mov	r8, r3
 8001aca:	4691      	mov	r9, r2
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001ad8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001adc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001ae0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	ea40 0a04 	orr.w	sl, r0, r4
 8001aea:	ea41 0b05 	orr.w	fp, r1, r5
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2203      	movs	r2, #3
 8001af8:	701a      	strb	r2, [r3, #0]
            }
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b04 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b088      	sub	sp, #32
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6178      	str	r0, [r7, #20]
 8001b0e:	6139      	str	r1, [r7, #16]
 8001b10:	60fa      	str	r2, [r7, #12]
 8001b12:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b1a:	d902      	bls.n	8001b22 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	2b7c      	cmp	r3, #124	; 0x7c
 8001b26:	d801      	bhi.n	8001b2c <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8001b28:	237d      	movs	r3, #125	; 0x7d
 8001b2a:	817b      	strh	r3, [r7, #10]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1108);
 8001b2c:	f240 4354 	movw	r3, #1108	; 0x454
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f7fe ffa9 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	8bf9      	ldrh	r1, [r7, #30]
 8001b46:	2000      	movs	r0, #0
 8001b48:	4688      	mov	r8, r1
 8001b4a:	4681      	mov	r9, r0
 8001b4c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8001b50:	6079      	str	r1, [r7, #4]
 8001b52:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001b56:	6039      	str	r1, [r7, #0]
 8001b58:	683c      	ldr	r4, [r7, #0]
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	ea42 0a04 	orr.w	sl, r2, r4
 8001b60:	ea43 0b05 	orr.w	fp, r3, r5
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	701a      	strb	r2, [r3, #0]
            }
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b7a <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1108) {
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe ffa8 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f240 4354 	movw	r3, #1108	; 0x454
 8001b94:	429a      	cmp	r2, r3
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d000      	beq.n	8001ba4 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8001ba2:	e7fe      	b.n	8001ba2 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	0c02      	lsrs	r2, r0, #16
 8001bb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001bb8:	0c0b      	lsrs	r3, r1, #16
 8001bba:	4613      	mov	r3, r2
 8001bbc:	81fb      	strh	r3, [r7, #14]
                return value;
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
            }
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1107);
 8001bd8:	f240 4353 	movw	r3, #1107	; 0x453
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7fe ff53 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001c04:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001c08:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001c0c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001c10:	2500      	movs	r5, #0
 8001c12:	ea40 0a04 	orr.w	sl, r0, r4
 8001c16:	ea41 0b05 	orr.w	fp, r1, r5
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	701a      	strb	r2, [r3, #0]
            }
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c30 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 1107) {
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7fe ff4d 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	f240 4353 	movw	r3, #1107	; 0x453
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d000      	beq.n	8001c5a <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8001c58:	e7fe      	b.n	8001c58 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	0c02      	lsrs	r2, r0, #16
 8001c6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c6e:	0c0b      	lsrs	r3, r1, #16
 8001c70:	4613      	mov	r3, r2
 8001c72:	73fb      	strb	r3, [r7, #15]
                return value;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
            }
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c84:	b088      	sub	sp, #32
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6178      	str	r0, [r7, #20]
 8001c8a:	6139      	str	r1, [r7, #16]
 8001c8c:	60fa      	str	r2, [r7, #12]
 8001c8e:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1106);
 8001c90:	f240 4352 	movw	r3, #1106	; 0x452
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	6939      	ldr	r1, [r7, #16]
 8001c98:	6978      	ldr	r0, [r7, #20]
 8001c9a:	f7fe fef7 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	69f9      	ldr	r1, [r7, #28]
 8001caa:	2000      	movs	r0, #0
 8001cac:	468a      	mov	sl, r1
 8001cae:	4683      	mov	fp, r0
 8001cb0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001cb4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8001cba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cbe:	ea08 0400 	and.w	r4, r8, r0
 8001cc2:	ea09 0501 	and.w	r5, r9, r1
 8001cc6:	ea42 0104 	orr.w	r1, r2, r4
 8001cca:	6039      	str	r1, [r7, #0]
 8001ccc:	432b      	orrs	r3, r5
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cd6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2206      	movs	r2, #6
 8001cde:	701a      	strb	r2, [r3, #0]
            }
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	ffff0000 	.word	0xffff0000

08001cf0 <_ZN3can7signals20PDU_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1105);
 8001d00:	f240 4351 	movw	r3, #1105	; 0x451
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7fe febf 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4698      	mov	r8, r3
 8001d1e:	4691      	mov	r9, r2
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001d2c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001d30:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001d34:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001d38:	2500      	movs	r5, #0
 8001d3a:	ea40 0a04 	orr.w	sl, r0, r4
 8001d3e:	ea41 0b05 	orr.w	fp, r1, r5
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	701a      	strb	r2, [r3, #0]
            }
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d58 <_ZN3can7signals20PDU_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1104);
 8001d68:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7fe fe8b 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2200      	movs	r2, #0
 8001d84:	4698      	mov	r8, r3
 8001d86:	4691      	mov	r9, r2
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001d94:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001d98:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001d9c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001da0:	2500      	movs	r5, #0
 8001da2:	ea40 0a04 	orr.w	sl, r0, r4
 8001da6:	ea41 0b05 	orr.w	fp, r1, r5
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	701a      	strb	r2, [r3, #0]
            }
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001dc0 <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b088      	sub	sp, #32
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6178      	str	r0, [r7, #20]
 8001dca:	6139      	str	r1, [r7, #16]
 8001dcc:	60fa      	str	r2, [r7, #12]
 8001dce:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd6:	d302      	bcc.n	8001dde <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8001dd8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ddc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1073);
 8001dde:	f240 4331 	movw	r3, #1073	; 0x431
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	6939      	ldr	r1, [r7, #16]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7fe fe50 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	69f9      	ldr	r1, [r7, #28]
 8001df8:	2000      	movs	r0, #0
 8001dfa:	468a      	mov	sl, r1
 8001dfc:	4683      	mov	fp, r0
 8001dfe:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001e02:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001e06:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001e0a:	0424      	lsls	r4, r4, #16
 8001e0c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001e10:	ea42 0104 	orr.w	r1, r2, r4
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	432b      	orrs	r3, r5
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e20:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2205      	movs	r2, #5
 8001e28:	701a      	strb	r2, [r3, #0]
            }
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e34 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e38:	b088      	sub	sp, #32
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6178      	str	r0, [r7, #20]
 8001e3e:	6139      	str	r1, [r7, #16]
 8001e40:	60fa      	str	r2, [r7, #12]
 8001e42:	60bb      	str	r3, [r7, #8]
                PDU_SDO_ID::set(intel, motorola, dlc, 1072);
 8001e44:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6939      	ldr	r1, [r7, #16]
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7fe fe1d 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	69f9      	ldr	r1, [r7, #28]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	468a      	mov	sl, r1
 8001e62:	4683      	mov	fp, r0
 8001e64:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001e68:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8001e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e72:	ea08 0400 	and.w	r4, r8, r0
 8001e76:	ea09 0501 	and.w	r5, r9, r1
 8001e7a:	ea42 0104 	orr.w	r1, r2, r4
 8001e7e:	6039      	str	r1, [r7, #0]
 8001e80:	432b      	orrs	r3, r5
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e8a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2206      	movs	r2, #6
 8001e92:	701a      	strb	r2, [r3, #0]
            }
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9e:	bf00      	nop
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8001ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8001eb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d305      	bcc.n	8001ec8 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1057);
 8001ec8:	f240 4321 	movw	r3, #1057	; 0x421
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7fe fddb 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8001ed6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eda:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	040b      	lsls	r3, r1, #16
 8001ef2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001ef6:	0402      	lsls	r2, r0, #16
 8001ef8:	ea48 0402 	orr.w	r4, r8, r2
 8001efc:	ea49 0503 	orr.w	r5, r9, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	701a      	strb	r2, [r3, #0]
            }
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001f16 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8001f16:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8001f24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d305      	bcc.n	8001f3a <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8001f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1056);
 8001f3a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7fe fda2 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8001f48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	040b      	lsls	r3, r1, #16
 8001f64:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001f68:	0402      	lsls	r2, r0, #16
 8001f6a:	ea48 0402 	orr.w	r4, r8, r2
 8001f6e:	ea49 0503 	orr.w	r5, r9, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	701a      	strb	r2, [r3, #0]
            }
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001f88 <_ZN3can7signals13PDU_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1046);
 8001f98:	f240 4316 	movw	r3, #1046	; 0x416
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f7fe fd73 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001fc4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001fc8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001fcc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	ea40 0a04 	orr.w	sl, r0, r4
 8001fd6:	ea41 0b05 	orr.w	fp, r1, r5
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	701a      	strb	r2, [r3, #0]
            }
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ff0 <_ZN3can7signals12PDU_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1045);
 8002000:	f240 4315 	movw	r3, #1045	; 0x415
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7fe fd3f 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2200      	movs	r2, #0
 800201c:	4698      	mov	r8, r3
 800201e:	4691      	mov	r9, r2
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800202c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002030:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002034:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002038:	2500      	movs	r5, #0
 800203a:	ea40 0a04 	orr.w	sl, r0, r4
 800203e:	ea41 0b05 	orr.w	fp, r1, r5
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	701a      	strb	r2, [r3, #0]
            }
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002058 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800205c:	b088      	sub	sp, #32
 800205e:	af00      	add	r7, sp, #0
 8002060:	6178      	str	r0, [r7, #20]
 8002062:	6139      	str	r1, [r7, #16]
 8002064:	60fa      	str	r2, [r7, #12]
 8002066:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206e:	d302      	bcc.n	8002076 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8002070:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002074:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1044);
 8002076:	f240 4314 	movw	r3, #1044	; 0x414
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	6939      	ldr	r1, [r7, #16]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7fe fd04 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	69f9      	ldr	r1, [r7, #28]
 8002090:	2000      	movs	r0, #0
 8002092:	468a      	mov	sl, r1
 8002094:	4683      	mov	fp, r0
 8002096:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800209a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800209e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80020a2:	0424      	lsls	r4, r4, #16
 80020a4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80020a8:	ea42 0104 	orr.w	r1, r2, r4
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	432b      	orrs	r3, r5
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020b8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2205      	movs	r2, #5
 80020c0:	701a      	strb	r2, [r3, #0]
            }
 80020c2:	bf00      	nop
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080020cc <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b088      	sub	sp, #32
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6178      	str	r0, [r7, #20]
 80020d6:	6139      	str	r1, [r7, #16]
 80020d8:	60fa      	str	r2, [r7, #12]
 80020da:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80020de:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002174 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80020e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	dd01      	ble.n	80020f4 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80020f2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80020f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d502      	bpl.n	8002108 <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1043);
 8002108:	f240 4313 	movw	r3, #1043	; 0x413
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	6939      	ldr	r1, [r7, #16]
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f7fe fcbb 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8002116:	edd7 7a02 	vldr	s15, [r7, #8]
 800211a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800217c <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf+0xb0>
 800211e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002122:	eeb0 0a47 	vmov.f32	s0, s14
 8002126:	f7fe fa25 	bl	8000574 <_ZSt5roundf>
 800212a:	eef0 7a40 	vmov.f32	s15, s0
 800212e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002132:	ee17 3a90 	vmov	r3, s15
 8002136:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	8bf9      	ldrh	r1, [r7, #30]
 8002140:	2000      	movs	r0, #0
 8002142:	4688      	mov	r8, r1
 8002144:	4681      	mov	r9, r0
 8002146:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800214a:	6079      	str	r1, [r7, #4]
 800214c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	683c      	ldr	r4, [r7, #0]
 8002154:	2500      	movs	r5, #0
 8002156:	ea42 0a04 	orr.w	sl, r2, r4
 800215a:	ea43 0b05 	orr.w	fp, r3, r5
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2204      	movs	r2, #4
 8002168:	701a      	strb	r2, [r3, #0]
            }
 800216a:	bf00      	nop
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002174:	428311ec 	.word	0x428311ec
 8002178:	428311ec 	.word	0x428311ec
 800217c:	3a83126f 	.word	0x3a83126f

08002180 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002184:	b088      	sub	sp, #32
 8002186:	af00      	add	r7, sp, #0
 8002188:	6178      	str	r0, [r7, #20]
 800218a:	6139      	str	r1, [r7, #16]
 800218c:	60fa      	str	r2, [r7, #12]
 800218e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002192:	edd7 7a02 	vldr	s15, [r7, #8]
 8002196:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002234 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xb4>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	dd01      	ble.n	80021a8 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 80021a6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80021a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ac:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	d501      	bpl.n	80021be <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 80021bc:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1042);
 80021be:	f240 4312 	movw	r3, #1042	; 0x412
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	6939      	ldr	r1, [r7, #16]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7fe fc60 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 80021cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021d8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002240 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf+0xc0>
 80021dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021e0:	eeb0 0a47 	vmov.f32	s0, s14
 80021e4:	f7fe f9c6 	bl	8000574 <_ZSt5roundf>
 80021e8:	eef0 7a40 	vmov.f32	s15, s0
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	ee17 3a90 	vmov	r3, s15
 80021f4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	8bf9      	ldrh	r1, [r7, #30]
 80021fe:	2000      	movs	r0, #0
 8002200:	4688      	mov	r8, r1
 8002202:	4681      	mov	r9, r0
 8002204:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002208:	6079      	str	r1, [r7, #4]
 800220a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800220e:	6039      	str	r1, [r7, #0]
 8002210:	683c      	ldr	r4, [r7, #0]
 8002212:	2500      	movs	r5, #0
 8002214:	ea42 0a04 	orr.w	sl, r2, r4
 8002218:	ea43 0b05 	orr.w	fp, r3, r5
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2204      	movs	r2, #4
 8002226:	701a      	strb	r2, [r3, #0]
            }
 8002228:	bf00      	nop
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002232:	bf00      	nop
 8002234:	441c5666 	.word	0x441c5666
 8002238:	441c5666 	.word	0x441c5666
 800223c:	c1f00000 	.word	0xc1f00000
 8002240:	3c23d70a 	.word	0x3c23d70a

08002244 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af00      	add	r7, sp, #0
 800224c:	6178      	str	r0, [r7, #20]
 800224e:	6139      	str	r1, [r7, #16]
 8002250:	60fa      	str	r2, [r7, #12]
 8002252:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x6c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm+0x6c>)
 800225e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1041);
 8002260:	f240 4311 	movw	r3, #1041	; 0x411
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7fe fc0f 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	69f9      	ldr	r1, [r7, #28]
 800227c:	2000      	movs	r0, #0
 800227e:	4688      	mov	r8, r1
 8002280:	4681      	mov	r9, r0
 8002282:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002286:	6079      	str	r1, [r7, #4]
 8002288:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	683c      	ldr	r4, [r7, #0]
 8002290:	2500      	movs	r5, #0
 8002292:	ea42 0a04 	orr.w	sl, r2, r4
 8002296:	ea43 0b05 	orr.w	fp, r3, r5
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2204      	movs	r2, #4
 80022a4:	701a      	strb	r2, [r3, #0]
            }
 80022a6:	bf00      	nop
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b0:	0003fffc 	.word	0x0003fffc

080022b4 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80022b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b8:	b088      	sub	sp, #32
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6178      	str	r0, [r7, #20]
 80022be:	6139      	str	r1, [r7, #16]
 80022c0:	60fa      	str	r2, [r7, #12]
 80022c2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80022c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ca:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002368 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0xb4>
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	dd01      	ble.n	80022dc <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 80022da:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80022dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	d502      	bpl.n	80022f0 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
                }
                PDU_SDO_ID::set(intel, motorola, dlc, 1040);
 80022f0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	6939      	ldr	r1, [r7, #16]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7fe fbc7 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80022fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002302:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002306:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	f7fe f931 	bl	8000574 <_ZSt5roundf>
 8002312:	eef0 7a40 	vmov.f32	s15, s0
 8002316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231a:	edc7 7a01 	vstr	s15, [r7, #4]
 800231e:	793b      	ldrb	r3, [r7, #4]
 8002320:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002328:	7ffb      	ldrb	r3, [r7, #31]
 800232a:	2200      	movs	r2, #0
 800232c:	4698      	mov	r8, r3
 800232e:	4691      	mov	r9, r2
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800233c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002340:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002344:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002348:	2500      	movs	r5, #0
 800234a:	ea40 0a04 	orr.w	sl, r0, r4
 800234e:	ea41 0b05 	orr.w	fp, r1, r5
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2203      	movs	r2, #3
 800235c:	701a      	strb	r2, [r3, #0]
            }
 800235e:	bf00      	nop
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002368:	42c80000 	.word	0x42c80000
 800236c:	42c80000 	.word	0x42c80000

08002370 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002374:	b088      	sub	sp, #32
 8002376:	af00      	add	r7, sp, #0
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	6139      	str	r1, [r7, #16]
 800237c:	60fa      	str	r2, [r7, #12]
 800237e:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 33);
 8002380:	2321      	movs	r3, #33	; 0x21
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6939      	ldr	r1, [r7, #16]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7fe fb80 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	8bf9      	ldrh	r1, [r7, #30]
 8002398:	2000      	movs	r0, #0
 800239a:	4688      	mov	r8, r1
 800239c:	4681      	mov	r9, r0
 800239e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80023a2:	6079      	str	r1, [r7, #4]
 80023a4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	683c      	ldr	r4, [r7, #0]
 80023ac:	2500      	movs	r5, #0
 80023ae:	ea42 0a04 	orr.w	sl, r2, r4
 80023b2:	ea43 0b05 	orr.w	fp, r3, r5
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2204      	movs	r2, #4
 80023c0:	701a      	strb	r2, [r3, #0]
            }
 80023c2:	bf00      	nop
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080023cc <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 33) {
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fb7f 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b21      	cmp	r3, #33	; 0x21
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d000      	beq.n	80023f0 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80023ee:	e7fe      	b.n	80023ee <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	0c02      	lsrs	r2, r0, #16
 8002400:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002404:	0c0b      	lsrs	r3, r1, #16
 8002406:	4613      	mov	r3, r2
 8002408:	81fb      	strh	r3, [r7, #14]
                return value;
 800240a:	89fb      	ldrh	r3, [r7, #14]
            }
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZN3can7signals21PDU_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 32);
 8002424:	2320      	movs	r3, #32
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7fe fb2e 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2200      	movs	r2, #0
 800243e:	4698      	mov	r8, r3
 8002440:	4691      	mov	r9, r2
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800244e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002452:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002456:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800245a:	2500      	movs	r5, #0
 800245c:	ea40 0a04 	orr.w	sl, r0, r4
 8002460:	ea41 0b05 	orr.w	fp, r1, r5
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
            }
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800247a <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 32) {
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fb28 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 800248c:	4603      	mov	r3, r0
 800248e:	2b20      	cmp	r3, #32
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d000      	beq.n	800249e <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 800249c:	e7fe      	b.n	800249c <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	0c02      	lsrs	r2, r0, #16
 80024ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024b2:	0c0b      	lsrs	r3, r1, #16
 80024b4:	4613      	mov	r3, r2
 80024b6:	73fb      	strb	r3, [r7, #15]
                return value;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_ZN3can7signals24PDU_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80024c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6178      	str	r0, [r7, #20]
 80024cc:	6139      	str	r1, [r7, #16]
 80024ce:	60fa      	str	r2, [r7, #12]
 80024d0:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 16);
 80024d2:	2310      	movs	r3, #16
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	6939      	ldr	r1, [r7, #16]
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f7fe fad7 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	8bf9      	ldrh	r1, [r7, #30]
 80024ea:	2000      	movs	r0, #0
 80024ec:	4688      	mov	r8, r1
 80024ee:	4681      	mov	r9, r0
 80024f0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80024f4:	6079      	str	r1, [r7, #4]
 80024f6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80024fa:	6039      	str	r1, [r7, #0]
 80024fc:	683c      	ldr	r4, [r7, #0]
 80024fe:	2500      	movs	r5, #0
 8002500:	ea42 0a04 	orr.w	sl, r2, r4
 8002504:	ea43 0b05 	orr.w	fp, r3, r5
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2204      	movs	r2, #4
 8002512:	701a      	strb	r2, [r3, #0]
            }
 8002514:	bf00      	nop
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800251e <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
                if (PDU_SDO_ID::get(intel, motorola) != 16) {
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fad6 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8002530:	4603      	mov	r3, r0
 8002532:	2b10      	cmp	r3, #16
 8002534:	bf14      	ite	ne
 8002536:	2301      	movne	r3, #1
 8002538:	2300      	moveq	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d000      	beq.n	8002542 <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8002540:	e7fe      	b.n	8002540 <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	0c02      	lsrs	r2, r0, #16
 8002552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002556:	0c0b      	lsrs	r3, r1, #16
 8002558:	4613      	mov	r3, r2
 800255a:	81fb      	strh	r3, [r7, #14]
                return value;
 800255c:	89fb      	ldrh	r3, [r7, #14]
            }
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_ZN3can7signals17PDU_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002566:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6178      	str	r0, [r7, #20]
 8002570:	6139      	str	r1, [r7, #16]
 8002572:	60fa      	str	r2, [r7, #12]
 8002574:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 5);
 8002576:	2305      	movs	r3, #5
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6939      	ldr	r1, [r7, #16]
 800257c:	6978      	ldr	r0, [r7, #20]
 800257e:	f7fe fa85 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	8bf9      	ldrh	r1, [r7, #30]
 800258e:	2000      	movs	r0, #0
 8002590:	4688      	mov	r8, r1
 8002592:	4681      	mov	r9, r0
 8002594:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002598:	6079      	str	r1, [r7, #4]
 800259a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800259e:	6039      	str	r1, [r7, #0]
 80025a0:	683c      	ldr	r4, [r7, #0]
 80025a2:	2500      	movs	r5, #0
 80025a4:	ea42 0a04 	orr.w	sl, r2, r4
 80025a8:	ea43 0b05 	orr.w	fp, r3, r5
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2204      	movs	r2, #4
 80025b6:	701a      	strb	r2, [r3, #0]
            }
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025c2 <_ZN3can7signals19PDU_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80025c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6178      	str	r0, [r7, #20]
 80025cc:	6139      	str	r1, [r7, #16]
 80025ce:	60fa      	str	r2, [r7, #12]
 80025d0:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 4);
 80025d2:	2304      	movs	r3, #4
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	6939      	ldr	r1, [r7, #16]
 80025d8:	6978      	ldr	r0, [r7, #20]
 80025da:	f7fe fa57 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80025de:	897b      	ldrh	r3, [r7, #10]
 80025e0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	8bf9      	ldrh	r1, [r7, #30]
 80025ea:	2000      	movs	r0, #0
 80025ec:	4688      	mov	r8, r1
 80025ee:	4681      	mov	r9, r0
 80025f0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80025f4:	6079      	str	r1, [r7, #4]
 80025f6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80025fa:	6039      	str	r1, [r7, #0]
 80025fc:	683c      	ldr	r4, [r7, #0]
 80025fe:	2500      	movs	r5, #0
 8002600:	ea42 0a04 	orr.w	sl, r2, r4
 8002604:	ea43 0b05 	orr.w	fp, r3, r5
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2204      	movs	r2, #4
 8002612:	701a      	strb	r2, [r3, #0]
            }
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800261e <_ZN3can7signals22PDU_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800261e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6178      	str	r0, [r7, #20]
 8002628:	6139      	str	r1, [r7, #16]
 800262a:	60fa      	str	r2, [r7, #12]
 800262c:	817b      	strh	r3, [r7, #10]
                PDU_SDO_ID::set(intel, motorola, dlc, 3);
 800262e:	2303      	movs	r3, #3
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7fe fa29 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	8bf9      	ldrh	r1, [r7, #30]
 8002646:	2000      	movs	r0, #0
 8002648:	4688      	mov	r8, r1
 800264a:	4681      	mov	r9, r0
 800264c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002650:	6079      	str	r1, [r7, #4]
 8002652:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002656:	6039      	str	r1, [r7, #0]
 8002658:	683c      	ldr	r4, [r7, #0]
 800265a:	2500      	movs	r5, #0
 800265c:	ea42 0a04 	orr.w	sl, r2, r4
 8002660:	ea43 0b05 	orr.w	fp, r3, r5
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2204      	movs	r2, #4
 800266e:	701a      	strb	r2, [r3, #0]
            }
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800267a <_ZN3can7signals17PDU_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800267a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 2);
 800268a:	2302      	movs	r3, #2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7fe f9fb 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2200      	movs	r2, #0
 80026a4:	4698      	mov	r8, r3
 80026a6:	4691      	mov	r9, r2
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80026b4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80026b8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80026bc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80026c0:	2500      	movs	r5, #0
 80026c2:	ea40 0a04 	orr.w	sl, r0, r4
 80026c6:	ea41 0b05 	orr.w	fp, r1, r5
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	701a      	strb	r2, [r3, #0]
            }
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026e0 <_ZN3can7signals13PDU_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by PDU_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x59A, 0x5DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80026e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	70fb      	strb	r3, [r7, #3]
                PDU_SDO_ID::set(intel, motorola, dlc, 1);
 80026f0:	2301      	movs	r3, #1
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7fe f9c8 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2200      	movs	r2, #0
 800270a:	4698      	mov	r8, r3
 800270c:	4691      	mov	r9, r2
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800271a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800271e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002722:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002726:	2500      	movs	r5, #0
 8002728:	ea40 0a04 	orr.w	sl, r0, r4
 800272c:	ea41 0b05 	orr.w	fp, r1, r5
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	701a      	strb	r2, [r3, #0]
            }
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002746 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af02      	add	r7, sp, #8
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2300      	movs	r3, #0
 800275a:	2202      	movs	r2, #2
 800275c:	f240 611a 	movw	r1, #1562	; 0x61a
 8002760:	f7fd ff41 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8002768:	f240 621a 	movw	r2, #1562	; 0x61a
 800276c:	4293      	cmp	r3, r2
 800276e:	d000      	beq.n	8002772 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8002770:	e7fe      	b.n	8002770 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	331c      	adds	r3, #28
 800278c:	461a      	mov	r2, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffd9 	bl	8002746 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 800279e:	b580      	push	{r7, lr}
 80027a0:	b08a      	sub	sp, #40	; 0x28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::PDU_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ffe5 	bl	800277c <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::PDU_SDO_ID>();
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 ffec 	bl	8004794 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>
 80027bc:	4603      	mov	r3, r0
 80027be:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 80027c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f814 	bl	80027f0 <_Z31handleSDORequestDownloadBySDOIDt>
}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	2300      	movs	r3, #0
 80027dc:	2208      	movs	r2, #8
 80027de:	f240 519a 	movw	r1, #1434	; 0x59a
 80027e2:	f7fd fed7 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b092      	sub	sp, #72	; 0x48
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::PDU_SDO_Resp> msgSdoResp;
 80027fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ffe6 	bl	80027d0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::PDU_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002810:	f000 83f8 	beq.w	8003004 <_Z31handleSDORequestDownloadBySDOIDt+0x814>
 8002814:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002818:	f300 8402 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 800281c:	f640 2202 	movw	r2, #2562	; 0xa02
 8002820:	4293      	cmp	r3, r2
 8002822:	f000 83e1 	beq.w	8002fe8 <_Z31handleSDORequestDownloadBySDOIDt+0x7f8>
 8002826:	f640 2202 	movw	r2, #2562	; 0xa02
 800282a:	4293      	cmp	r3, r2
 800282c:	f300 83f8 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002830:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002834:	f000 83ca 	beq.w	8002fcc <_Z31handleSDORequestDownloadBySDOIDt+0x7dc>
 8002838:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800283c:	f300 83f0 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002840:	f640 1202 	movw	r2, #2306	; 0x902
 8002844:	4293      	cmp	r3, r2
 8002846:	f000 83b3 	beq.w	8002fb0 <_Z31handleSDORequestDownloadBySDOIDt+0x7c0>
 800284a:	f640 1202 	movw	r2, #2306	; 0x902
 800284e:	4293      	cmp	r3, r2
 8002850:	f300 83e6 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002854:	f640 1201 	movw	r2, #2305	; 0x901
 8002858:	4293      	cmp	r3, r2
 800285a:	f000 839b 	beq.w	8002f94 <_Z31handleSDORequestDownloadBySDOIDt+0x7a4>
 800285e:	f640 1201 	movw	r2, #2305	; 0x901
 8002862:	4293      	cmp	r3, r2
 8002864:	f300 83dc 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002868:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800286c:	f000 8384 	beq.w	8002f78 <_Z31handleSDORequestDownloadBySDOIDt+0x788>
 8002870:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002874:	f300 83d4 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002878:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800287c:	f000 836d 	beq.w	8002f5a <_Z31handleSDORequestDownloadBySDOIDt+0x76a>
 8002880:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002884:	f300 83cc 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002888:	f640 0203 	movw	r2, #2051	; 0x803
 800288c:	4293      	cmp	r3, r2
 800288e:	f300 83c7 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002896:	da06      	bge.n	80028a6 <_Z31handleSDORequestDownloadBySDOIDt+0xb6>
 8002898:	2b21      	cmp	r3, #33	; 0x21
 800289a:	f300 811b 	bgt.w	8002ad4 <_Z31handleSDORequestDownloadBySDOIDt+0x2e4>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f300 80ce 	bgt.w	8002a40 <_Z31handleSDORequestDownloadBySDOIDt+0x250>
 80028a4:	e3bc      	b.n	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80028a6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	f200 83b8 	bhi.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <_Z31handleSDORequestDownloadBySDOIDt+0xc8>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	08002ee3 	.word	0x08002ee3
 80028bc:	08002f01 	.word	0x08002f01
 80028c0:	08002f1f 	.word	0x08002f1f
 80028c4:	08002f3d 	.word	0x08002f3d
 80028c8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80028cc:	2b59      	cmp	r3, #89	; 0x59
 80028ce:	f200 83a7 	bhi.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 80028d2:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <_Z31handleSDORequestDownloadBySDOIDt+0xe8>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	08002bc9 	.word	0x08002bc9
 80028dc:	08002be7 	.word	0x08002be7
 80028e0:	08002c01 	.word	0x08002c01
 80028e4:	08002c1f 	.word	0x08002c1f
 80028e8:	08002c3d 	.word	0x08002c3d
 80028ec:	08002c57 	.word	0x08002c57
 80028f0:	08002c73 	.word	0x08002c73
 80028f4:	08003021 	.word	0x08003021
 80028f8:	08003021 	.word	0x08003021
 80028fc:	08003021 	.word	0x08003021
 8002900:	08003021 	.word	0x08003021
 8002904:	08003021 	.word	0x08003021
 8002908:	08003021 	.word	0x08003021
 800290c:	08003021 	.word	0x08003021
 8002910:	08003021 	.word	0x08003021
 8002914:	08003021 	.word	0x08003021
 8002918:	08002c8f 	.word	0x08002c8f
 800291c:	08002ca9 	.word	0x08002ca9
 8002920:	08003021 	.word	0x08003021
 8002924:	08003021 	.word	0x08003021
 8002928:	08003021 	.word	0x08003021
 800292c:	08003021 	.word	0x08003021
 8002930:	08003021 	.word	0x08003021
 8002934:	08003021 	.word	0x08003021
 8002938:	08003021 	.word	0x08003021
 800293c:	08003021 	.word	0x08003021
 8002940:	08003021 	.word	0x08003021
 8002944:	08003021 	.word	0x08003021
 8002948:	08003021 	.word	0x08003021
 800294c:	08003021 	.word	0x08003021
 8002950:	08003021 	.word	0x08003021
 8002954:	08003021 	.word	0x08003021
 8002958:	08002cc3 	.word	0x08002cc3
 800295c:	08002cdd 	.word	0x08002cdd
 8002960:	08003021 	.word	0x08003021
 8002964:	08003021 	.word	0x08003021
 8002968:	08003021 	.word	0x08003021
 800296c:	08003021 	.word	0x08003021
 8002970:	08003021 	.word	0x08003021
 8002974:	08003021 	.word	0x08003021
 8002978:	08003021 	.word	0x08003021
 800297c:	08003021 	.word	0x08003021
 8002980:	08003021 	.word	0x08003021
 8002984:	08003021 	.word	0x08003021
 8002988:	08003021 	.word	0x08003021
 800298c:	08003021 	.word	0x08003021
 8002990:	08003021 	.word	0x08003021
 8002994:	08003021 	.word	0x08003021
 8002998:	08003021 	.word	0x08003021
 800299c:	08003021 	.word	0x08003021
 80029a0:	08003021 	.word	0x08003021
 80029a4:	08003021 	.word	0x08003021
 80029a8:	08003021 	.word	0x08003021
 80029ac:	08003021 	.word	0x08003021
 80029b0:	08003021 	.word	0x08003021
 80029b4:	08003021 	.word	0x08003021
 80029b8:	08003021 	.word	0x08003021
 80029bc:	08003021 	.word	0x08003021
 80029c0:	08003021 	.word	0x08003021
 80029c4:	08003021 	.word	0x08003021
 80029c8:	08003021 	.word	0x08003021
 80029cc:	08003021 	.word	0x08003021
 80029d0:	08003021 	.word	0x08003021
 80029d4:	08003021 	.word	0x08003021
 80029d8:	08002cf7 	.word	0x08002cf7
 80029dc:	08002d13 	.word	0x08002d13
 80029e0:	08002d2f 	.word	0x08002d2f
 80029e4:	08002d49 	.word	0x08002d49
 80029e8:	08002d65 	.word	0x08002d65
 80029ec:	08003021 	.word	0x08003021
 80029f0:	08002d81 	.word	0x08002d81
 80029f4:	08002d9d 	.word	0x08002d9d
 80029f8:	08002db7 	.word	0x08002db7
 80029fc:	08002dd3 	.word	0x08002dd3
 8002a00:	08003021 	.word	0x08003021
 8002a04:	08003021 	.word	0x08003021
 8002a08:	08003021 	.word	0x08003021
 8002a0c:	08003021 	.word	0x08003021
 8002a10:	08003021 	.word	0x08003021
 8002a14:	08003021 	.word	0x08003021
 8002a18:	08002ded 	.word	0x08002ded
 8002a1c:	08002e09 	.word	0x08002e09
 8002a20:	08002e25 	.word	0x08002e25
 8002a24:	08002e3f 	.word	0x08002e3f
 8002a28:	08002e5b 	.word	0x08002e5b
 8002a2c:	08003021 	.word	0x08003021
 8002a30:	08002e77 	.word	0x08002e77
 8002a34:	08002e93 	.word	0x08002e93
 8002a38:	08002ead 	.word	0x08002ead
 8002a3c:	08002ec9 	.word	0x08002ec9
 8002a40:	3b01      	subs	r3, #1
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	f200 82ec 	bhi.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002a48:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <_Z31handleSDORequestDownloadBySDOIDt+0x260>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002ae9 	.word	0x08002ae9
 8002a54:	08002b05 	.word	0x08002b05
 8002a58:	08002b21 	.word	0x08002b21
 8002a5c:	08002b3d 	.word	0x08002b3d
 8002a60:	08002b59 	.word	0x08002b59
 8002a64:	08003021 	.word	0x08003021
 8002a68:	08003021 	.word	0x08003021
 8002a6c:	08003021 	.word	0x08003021
 8002a70:	08003021 	.word	0x08003021
 8002a74:	08003021 	.word	0x08003021
 8002a78:	08003021 	.word	0x08003021
 8002a7c:	08003021 	.word	0x08003021
 8002a80:	08003021 	.word	0x08003021
 8002a84:	08003021 	.word	0x08003021
 8002a88:	08003021 	.word	0x08003021
 8002a8c:	08002b75 	.word	0x08002b75
 8002a90:	08003021 	.word	0x08003021
 8002a94:	08003021 	.word	0x08003021
 8002a98:	08003021 	.word	0x08003021
 8002a9c:	08003021 	.word	0x08003021
 8002aa0:	08003021 	.word	0x08003021
 8002aa4:	08003021 	.word	0x08003021
 8002aa8:	08003021 	.word	0x08003021
 8002aac:	08003021 	.word	0x08003021
 8002ab0:	08003021 	.word	0x08003021
 8002ab4:	08003021 	.word	0x08003021
 8002ab8:	08003021 	.word	0x08003021
 8002abc:	08003021 	.word	0x08003021
 8002ac0:	08003021 	.word	0x08003021
 8002ac4:	08003021 	.word	0x08003021
 8002ac8:	08003021 	.word	0x08003021
 8002acc:	08002b91 	.word	0x08002b91
 8002ad0:	08002bad 	.word	0x08002bad
 8002ad4:	f240 4269 	movw	r2, #1129	; 0x469
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	f300 82a1 	bgt.w	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
 8002ade:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8002ae2:	f6bf aef1 	bge.w	80028c8 <_Z31handleSDORequestDownloadBySDOIDt+0xd8>
 8002ae6:	e29b      	b.n	8003020 <_Z31handleSDORequestDownloadBySDOIDt+0x830>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::PDU_OD_NodeID>(OD_NodeID_get());
 8002ae8:	f002 fd8a 	bl	8005600 <_Z13OD_NodeID_getv>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fe5e 	bl	80047b8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002b02:	e295      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::PDU_OD_NodeStatus>(OD_NodeStatus_get());
 8002b04:	f001 f88e 	bl	8003c24 <_Z17OD_NodeStatus_getv>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 fe65 	bl	80047e2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002b1e:	e287      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::PDU_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8002b20:	f002 fd76 	bl	8005610 <_Z22OD_ProtocolVersion_getv>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 fe6c 	bl	800480c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002b3a:	e279      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::PDU_OD_StackVersion>(OD_StackVersion_get());
 8002b3c:	f002 fd70 	bl	8005620 <_Z19OD_StackVersion_getv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fe73 	bl	8004836 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002b56:	e26b      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::PDU_OD_DbcVersion>(OD_DbcVersion_get());
 8002b58:	f002 fd6a 	bl	8005630 <_Z17OD_DbcVersion_getv>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fe7a 	bl	8004860 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002b72:	e25d      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::PDU_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8002b74:	f001 f872 	bl	8003c5c <_Z24OD_HeartbeatInterval_getv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fe81 	bl	800488a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002b8e:	e24f      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::PDU_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8002b90:	f002 fd7a 	bl	8005688 <_Z21OD_SendOdOnBootup_getv>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fe88 	bl	80048b4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002baa:	e241      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::PDU_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8002bac:	f001 f88e 	bl	8003ccc <_Z26OD_OdEntrySendInterval_getv>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fe8f 	bl	80048de <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002bc6:	e233      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::PDU_OD_CpuUsage>(OD_CpuUsage_get());
 8002bc8:	f001 f8b8 	bl	8003d3c <_Z15OD_CpuUsage_getv>
 8002bcc:	eef0 7a40 	vmov.f32	s15, s0
 8002bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 fe95 	bl	8004908 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002be4:	e224      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::PDU_OD_MemFree>(OD_MemFree_get());
 8002be6:	f001 f8e3 	bl	8003db0 <_Z14OD_MemFree_getv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fe9f 	bl	8004936 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002bfe:	e217      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::PDU_OD_BoardTemp>(OD_BoardTemp_get());
 8002c00:	f001 f90e 	bl	8003e20 <_Z16OD_BoardTemp_getv>
 8002c04:	eef0 7a40 	vmov.f32	s15, s0
 8002c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fea4 	bl	800495e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c1c:	e208      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::PDU_OD_InputVoltage>(OD_InputVoltage_get());
 8002c1e:	f001 f939 	bl	8003e94 <_Z19OD_InputVoltage_getv>
 8002c22:	eef0 7a40 	vmov.f32	s15, s0
 8002c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 feac 	bl	800498c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c3a:	e1f9      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::PDU_OD_runtime>(OD_runtime_get());
 8002c3c:	f002 fd42 	bl	80056c4 <_Z14OD_runtime_getv>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 feb6 	bl	80049ba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c54:	e1ec      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::PDU_OD_SdcIn>(OD_SdcIn_get());
 8002c56:	f002 fd4f 	bl	80056f8 <_Z12OD_SdcIn_getv>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 febc 	bl	80049e2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c70:	e1de      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::PDU_OD_SdcOut>(OD_SdcOut_get());
 8002c72:	f002 fd51 	bl	8005718 <_Z13OD_SdcOut_getv>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fec3 	bl	8004a0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c8c:	e1d0      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::PDU_OD_ChipUID1>(OD_ChipUID1_get());
 8002c8e:	f002 fd53 	bl	8005738 <_Z15OD_ChipUID1_getv>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002c9a:	4608      	mov	r0, r1
 8002c9c:	f001 fecb 	bl	8004a36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ca6:	e1c3      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::PDU_OD_ChipUID2>(OD_ChipUID2_get());
 8002ca8:	f002 fd6b 	bl	8005782 <_Z15OD_ChipUID2_getv>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	f001 fed7 	bl	8004a68 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002cc0:	e1b6      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::PDU_OD_BuildDate>(OD_BuildDate_get());
 8002cc2:	f002 fd85 	bl	80057d0 <_Z16OD_BuildDate_getv>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fee3 	bl	8004a9a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002cda:	e1a9      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::PDU_OD_BuildTime>(OD_BuildTime_get());
 8002cdc:	f002 fd84 	bl	80057e8 <_Z16OD_BuildTime_getv>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 feea 	bl	8004ac2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002cf4:	e19c      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8002cf6:	f002 fd83 	bl	8005800 <_Z20OD_CAN1_TxErrCnt_getv>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fef0 	bl	8004aea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d10:	e18e      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8002d12:	f002 fd89 	bl	8005828 <_Z20OD_CAN1_RxErrCnt_getv>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 fef7 	bl	8004b14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d2c:	e180      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::PDU_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8002d2e:	f002 fd8f 	bl	8005850 <_Z25OD_CAN1_lastErrorCode_getv>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 feff 	bl	8004b3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d46:	e173      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::PDU_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8002d48:	f001 f8de 	bl	8003f08 <_Z26OD_CAN1_autoErrorReset_getv>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 ff05 	bl	8004b66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d62:	e165      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8002d64:	f001 f908 	bl	8003f78 <_Z20OD_CAN1_Baudrate_getv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 ff0c 	bl	8004b90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d7e:	e157      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Status>(OD_CAN1_Status_get());
 8002d80:	f002 fd70 	bl	8005864 <_Z18OD_CAN1_Status_getv>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 ff13 	bl	8004bba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d9a:	e149      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8002d9c:	f001 f924 	bl	8003fe8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 ff1b 	bl	8004be4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002db4:	e13c      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::PDU_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8002db6:	f001 f933 	bl	8004020 <_Z23OD_CAN1_ErrorStatus_getv>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 ff21 	bl	8004c0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002dd0:	e12e      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8002dd2:	f001 f941 	bl	8004058 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 ff29 	bl	8004c36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002dea:	e121      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8002dec:	f002 fd44 	bl	8005878 <_Z20OD_CAN2_TxErrCnt_getv>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 ff2f 	bl	8004c5e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e06:	e113      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::PDU_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8002e08:	f002 fd4a 	bl	80058a0 <_Z20OD_CAN2_RxErrCnt_getv>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 ff36 	bl	8004c88 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e22:	e105      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::PDU_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8002e24:	f002 fd50 	bl	80058c8 <_Z25OD_CAN2_lastErrorCode_getv>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 ff3e 	bl	8004cb2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e3c:	e0f8      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::PDU_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8002e3e:	f001 f927 	bl	8004090 <_Z26OD_CAN2_autoErrorReset_getv>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 ff44 	bl	8004cda <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e58:	e0ea      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8002e5a:	f001 f951 	bl	8004100 <_Z20OD_CAN2_Baudrate_getv>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 ff4b 	bl	8004d04 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e74:	e0dc      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Status>(OD_CAN2_Status_get());
 8002e76:	f002 fd31 	bl	80058dc <_Z18OD_CAN2_Status_getv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 ff52 	bl	8004d2e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e90:	e0ce      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8002e92:	f001 f96d 	bl	8004170 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 ff5a 	bl	8004d58 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002eaa:	e0c1      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::PDU_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8002eac:	f001 f97c 	bl	80041a8 <_Z23OD_CAN2_ErrorStatus_getv>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 ff60 	bl	8004d80 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ec6:	e0b3      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8002ec8:	f001 f98a 	bl	80041e0 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 ff68 	bl	8004daa <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ee0:	e0a6      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x800:    // OD_batterVoltageLow
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageLow>(OD_batterVoltageLow_get());
 8002ee2:	f001 f999 	bl	8004218 <_Z23OD_batterVoltageLow_getv>
 8002ee6:	eef0 7a40 	vmov.f32	s15, s0
 8002eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 ff6d 	bl	8004dd2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002efe:	e097      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x801:    // OD_batterVoltageCritical
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageCritical>(OD_batterVoltageCritical_get());
 8002f00:	f001 f9c4 	bl	800428c <_Z28OD_batterVoltageCritical_getv>
 8002f04:	eef0 7a40 	vmov.f32	s15, s0
 8002f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 ff75 	bl	8004e00 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f1c:	e088      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x802:    // OD_overTempWarn
            msgSdoResp.set<can::signals::PDU_OD_overTempWarn>(OD_overTempWarn_get());
 8002f1e:	f001 f9ef 	bl	8004300 <_Z19OD_overTempWarn_getv>
 8002f22:	eef0 7a40 	vmov.f32	s15, s0
 8002f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 ff7d 	bl	8004e2e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f3a:	e079      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x803:    // OD_overTempCritical
            msgSdoResp.set<can::signals::PDU_OD_overTempCritical>(OD_overTempCritical_get());
 8002f3c:	f001 fa1a 	bl	8004374 <_Z23OD_overTempCritical_getv>
 8002f40:	eef0 7a40 	vmov.f32	s15, s0
 8002f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f48:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 ff85 	bl	8004e5c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f58:	e06a      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x850:    // OD_batteryOvercurrent
            msgSdoResp.set<can::signals::PDU_OD_batteryOvercurrent>(OD_batteryOvercurrent_get());
 8002f5a:	f001 fa45 	bl	80043e8 <_Z25OD_batteryOvercurrent_getv>
 8002f5e:	eef0 7a40 	vmov.f32	s15, s0
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 ff8d 	bl	8004e8a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f76:	e05b      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x900:    // OD_currentReadInterval
            msgSdoResp.set<can::signals::PDU_OD_currentReadInterval>(OD_currentReadInterval_get());
 8002f78:	f001 fa70 	bl	800445c <_Z26OD_currentReadInterval_getv>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 ff96 	bl	8004eb8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f92:	e04d      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x901:    // OD_statusSendInterval
            msgSdoResp.set<can::signals::PDU_OD_statusSendInterval>(OD_statusSendInterval_get());
 8002f94:	f001 fa9a 	bl	80044cc <_Z25OD_statusSendInterval_getv>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 ff9d 	bl	8004ee2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002fae:	e03f      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0x902:    // OD_watchdogTimeout
            msgSdoResp.set<can::signals::PDU_OD_watchdogTimeout>(OD_watchdogTimeout_get());
 8002fb0:	f001 fac4 	bl	800453c <_Z22OD_watchdogTimeout_getv>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 ffa4 	bl	8004f0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002fca:	e031      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xA00:    // OD_projectXXEnabled
            msgSdoResp.set<can::signals::PDU_OD_projectXXEnabled>(OD_projectXXEnabled_get());
 8002fcc:	f001 faee 	bl	80045ac <_Z23OD_projectXXEnabled_getv>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 ffab 	bl	8004f36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002fe6:	e023      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xA02:    // OD_LedCommands
            msgSdoResp.set<can::signals::PDU_OD_LedCommands>(OD_LedCommands_get());
 8002fe8:	f001 fb18 	bl	800461c <_Z18OD_LedCommands_getv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 ffb2 	bl	8004f60 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003002:	e015      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        case 0xB00:    // OD_CoolingPumpEnabled
            msgSdoResp.set<can::signals::PDU_OD_CoolingPumpEnabled>(OD_CoolingPumpEnabled_get());
 8003004:	f001 fb42 	bl	800468c <_Z25OD_CoolingPumpEnabled_getv>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f001 ffb9 	bl	8004f8a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>
            respCode = can::signals::PDU_SDO_RespCode::OK;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800301e:	e007      	b.n	8003030 <_Z31handleSDORequestDownloadBySDOIDt+0x840>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::PDU_SDO_ID>(sdoId);
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f001 ffc3 	bl	8004fb4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>
            break;
 800302e:	bf00      	nop
    }

    msgSdoResp.set<can::signals::PDU_SDO_RespCode>(respCode);
 8003030:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 ffcf 	bl	8004fde <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003040:	f107 0308 	add.w	r3, r7, #8
 8003044:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fd08 	bl	8000a60 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <_Z31handleSDORequestDownloadBySDOIDt+0x878>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	f107 0108 	add.w	r1, r7, #8
 8003058:	2300      	movs	r3, #0
 800305a:	2200      	movs	r2, #0
 800305c:	f012 fa56 	bl	801550c <osMessageQueuePut>
}
 8003060:	bf00      	nop
 8003062:	3748      	adds	r7, #72	; 0x48
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	200003ec 	.word	0x200003ec

0800306c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2300      	movs	r3, #0
 8003080:	2208      	movs	r2, #8
 8003082:	f240 51da 	movw	r1, #1498	; 0x5da
 8003086:	f7fd faae 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800308e:	f240 52da 	movw	r2, #1498	; 0x5da
 8003092:	4293      	cmp	r3, r2
 8003094:	d000      	beq.n	8003098 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003096:	e7fe      	b.n	8003096 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	331c      	adds	r3, #28
 80030b2:	461a      	mov	r2, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ffd9 	bl	800306c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b0a4      	sub	sp, #144	; 0x90
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::PDU_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 80030cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ffe5 	bl	80030a2 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::PDU_SDO_Resp> msgSdoResp;
 80030d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fb77 	bl	80027d0 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::PDU_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    uint16_t sdoId = msgSdoReq.get<can::signals::PDU_SDO_ID>();
 80030e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 ff8b 	bl	8005008 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    switch (sdoId) {
 80030f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80030fc:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8003100:	f000 8549 	beq.w	8003b96 <_Z22handleSDORequestUploadRK9RxMessage+0xad2>
 8003104:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8003108:	f300 8560 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 800310c:	f640 2202 	movw	r2, #2562	; 0xa02
 8003110:	4293      	cmp	r3, r2
 8003112:	f000 8525 	beq.w	8003b60 <_Z22handleSDORequestUploadRK9RxMessage+0xa9c>
 8003116:	f640 2202 	movw	r2, #2562	; 0xa02
 800311a:	4293      	cmp	r3, r2
 800311c:	f300 8556 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003120:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003124:	f000 8501 	beq.w	8003b2a <_Z22handleSDORequestUploadRK9RxMessage+0xa66>
 8003128:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800312c:	f300 854e 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003130:	f640 1202 	movw	r2, #2306	; 0x902
 8003134:	4293      	cmp	r3, r2
 8003136:	f000 84dd 	beq.w	8003af4 <_Z22handleSDORequestUploadRK9RxMessage+0xa30>
 800313a:	f640 1202 	movw	r2, #2306	; 0x902
 800313e:	4293      	cmp	r3, r2
 8003140:	f300 8544 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003144:	f640 1201 	movw	r2, #2305	; 0x901
 8003148:	4293      	cmp	r3, r2
 800314a:	f000 84b8 	beq.w	8003abe <_Z22handleSDORequestUploadRK9RxMessage+0x9fa>
 800314e:	f640 1201 	movw	r2, #2305	; 0x901
 8003152:	4293      	cmp	r3, r2
 8003154:	f300 853a 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003158:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800315c:	f000 8494 	beq.w	8003a88 <_Z22handleSDORequestUploadRK9RxMessage+0x9c4>
 8003160:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003164:	f300 8532 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003168:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800316c:	f000 845e 	beq.w	8003a2c <_Z22handleSDORequestUploadRK9RxMessage+0x968>
 8003170:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003174:	f300 852a 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003178:	f640 0203 	movw	r2, #2051	; 0x803
 800317c:	4293      	cmp	r3, r2
 800317e:	f300 8525 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003186:	da07      	bge.n	8003198 <_Z22handleSDORequestUploadRK9RxMessage+0xd4>
 8003188:	2b21      	cmp	r3, #33	; 0x21
 800318a:	f300 811b 	bgt.w	80033c4 <_Z22handleSDORequestUploadRK9RxMessage+0x300>
 800318e:	2b00      	cmp	r3, #0
 8003190:	f300 80ce 	bgt.w	8003330 <_Z22handleSDORequestUploadRK9RxMessage+0x26c>
 8003194:	f000 bd1a 	b.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003198:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800319c:	2b03      	cmp	r3, #3
 800319e:	f200 8515 	bhi.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <_Z22handleSDORequestUploadRK9RxMessage+0xe4>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080038bd 	.word	0x080038bd
 80031ac:	08003919 	.word	0x08003919
 80031b0:	08003975 	.word	0x08003975
 80031b4:	080039d1 	.word	0x080039d1
 80031b8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80031bc:	2b59      	cmp	r3, #89	; 0x59
 80031be:	f200 8505 	bhi.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <_Z22handleSDORequestUploadRK9RxMessage+0x104>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	08003507 	.word	0x08003507
 80031cc:	08003525 	.word	0x08003525
 80031d0:	0800353f 	.word	0x0800353f
 80031d4:	0800355d 	.word	0x0800355d
 80031d8:	0800357b 	.word	0x0800357b
 80031dc:	08003595 	.word	0x08003595
 80031e0:	080035b1 	.word	0x080035b1
 80031e4:	08003bcd 	.word	0x08003bcd
 80031e8:	08003bcd 	.word	0x08003bcd
 80031ec:	08003bcd 	.word	0x08003bcd
 80031f0:	08003bcd 	.word	0x08003bcd
 80031f4:	08003bcd 	.word	0x08003bcd
 80031f8:	08003bcd 	.word	0x08003bcd
 80031fc:	08003bcd 	.word	0x08003bcd
 8003200:	08003bcd 	.word	0x08003bcd
 8003204:	08003bcd 	.word	0x08003bcd
 8003208:	080035cd 	.word	0x080035cd
 800320c:	080035e7 	.word	0x080035e7
 8003210:	08003bcd 	.word	0x08003bcd
 8003214:	08003bcd 	.word	0x08003bcd
 8003218:	08003bcd 	.word	0x08003bcd
 800321c:	08003bcd 	.word	0x08003bcd
 8003220:	08003bcd 	.word	0x08003bcd
 8003224:	08003bcd 	.word	0x08003bcd
 8003228:	08003bcd 	.word	0x08003bcd
 800322c:	08003bcd 	.word	0x08003bcd
 8003230:	08003bcd 	.word	0x08003bcd
 8003234:	08003bcd 	.word	0x08003bcd
 8003238:	08003bcd 	.word	0x08003bcd
 800323c:	08003bcd 	.word	0x08003bcd
 8003240:	08003bcd 	.word	0x08003bcd
 8003244:	08003bcd 	.word	0x08003bcd
 8003248:	08003601 	.word	0x08003601
 800324c:	0800361b 	.word	0x0800361b
 8003250:	08003bcd 	.word	0x08003bcd
 8003254:	08003bcd 	.word	0x08003bcd
 8003258:	08003bcd 	.word	0x08003bcd
 800325c:	08003bcd 	.word	0x08003bcd
 8003260:	08003bcd 	.word	0x08003bcd
 8003264:	08003bcd 	.word	0x08003bcd
 8003268:	08003bcd 	.word	0x08003bcd
 800326c:	08003bcd 	.word	0x08003bcd
 8003270:	08003bcd 	.word	0x08003bcd
 8003274:	08003bcd 	.word	0x08003bcd
 8003278:	08003bcd 	.word	0x08003bcd
 800327c:	08003bcd 	.word	0x08003bcd
 8003280:	08003bcd 	.word	0x08003bcd
 8003284:	08003bcd 	.word	0x08003bcd
 8003288:	08003bcd 	.word	0x08003bcd
 800328c:	08003bcd 	.word	0x08003bcd
 8003290:	08003bcd 	.word	0x08003bcd
 8003294:	08003bcd 	.word	0x08003bcd
 8003298:	08003bcd 	.word	0x08003bcd
 800329c:	08003bcd 	.word	0x08003bcd
 80032a0:	08003bcd 	.word	0x08003bcd
 80032a4:	08003bcd 	.word	0x08003bcd
 80032a8:	08003bcd 	.word	0x08003bcd
 80032ac:	08003bcd 	.word	0x08003bcd
 80032b0:	08003bcd 	.word	0x08003bcd
 80032b4:	08003bcd 	.word	0x08003bcd
 80032b8:	08003bcd 	.word	0x08003bcd
 80032bc:	08003bcd 	.word	0x08003bcd
 80032c0:	08003bcd 	.word	0x08003bcd
 80032c4:	08003bcd 	.word	0x08003bcd
 80032c8:	08003635 	.word	0x08003635
 80032cc:	08003651 	.word	0x08003651
 80032d0:	0800366d 	.word	0x0800366d
 80032d4:	08003687 	.word	0x08003687
 80032d8:	080036bd 	.word	0x080036bd
 80032dc:	08003bcd 	.word	0x08003bcd
 80032e0:	0800370d 	.word	0x0800370d
 80032e4:	08003729 	.word	0x08003729
 80032e8:	08003743 	.word	0x08003743
 80032ec:	0800375f 	.word	0x0800375f
 80032f0:	08003bcd 	.word	0x08003bcd
 80032f4:	08003bcd 	.word	0x08003bcd
 80032f8:	08003bcd 	.word	0x08003bcd
 80032fc:	08003bcd 	.word	0x08003bcd
 8003300:	08003bcd 	.word	0x08003bcd
 8003304:	08003bcd 	.word	0x08003bcd
 8003308:	08003779 	.word	0x08003779
 800330c:	08003795 	.word	0x08003795
 8003310:	080037b1 	.word	0x080037b1
 8003314:	080037cb 	.word	0x080037cb
 8003318:	08003801 	.word	0x08003801
 800331c:	08003bcd 	.word	0x08003bcd
 8003320:	08003851 	.word	0x08003851
 8003324:	0800386d 	.word	0x0800386d
 8003328:	08003887 	.word	0x08003887
 800332c:	080038a3 	.word	0x080038a3
 8003330:	3b01      	subs	r3, #1
 8003332:	2b20      	cmp	r3, #32
 8003334:	f200 844a 	bhi.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <_Z22handleSDORequestUploadRK9RxMessage+0x27c>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	080033d9 	.word	0x080033d9
 8003344:	080033f5 	.word	0x080033f5
 8003348:	08003411 	.word	0x08003411
 800334c:	0800342d 	.word	0x0800342d
 8003350:	08003449 	.word	0x08003449
 8003354:	08003bcd 	.word	0x08003bcd
 8003358:	08003bcd 	.word	0x08003bcd
 800335c:	08003bcd 	.word	0x08003bcd
 8003360:	08003bcd 	.word	0x08003bcd
 8003364:	08003bcd 	.word	0x08003bcd
 8003368:	08003bcd 	.word	0x08003bcd
 800336c:	08003bcd 	.word	0x08003bcd
 8003370:	08003bcd 	.word	0x08003bcd
 8003374:	08003bcd 	.word	0x08003bcd
 8003378:	08003bcd 	.word	0x08003bcd
 800337c:	08003465 	.word	0x08003465
 8003380:	08003bcd 	.word	0x08003bcd
 8003384:	08003bcd 	.word	0x08003bcd
 8003388:	08003bcd 	.word	0x08003bcd
 800338c:	08003bcd 	.word	0x08003bcd
 8003390:	08003bcd 	.word	0x08003bcd
 8003394:	08003bcd 	.word	0x08003bcd
 8003398:	08003bcd 	.word	0x08003bcd
 800339c:	08003bcd 	.word	0x08003bcd
 80033a0:	08003bcd 	.word	0x08003bcd
 80033a4:	08003bcd 	.word	0x08003bcd
 80033a8:	08003bcd 	.word	0x08003bcd
 80033ac:	08003bcd 	.word	0x08003bcd
 80033b0:	08003bcd 	.word	0x08003bcd
 80033b4:	08003bcd 	.word	0x08003bcd
 80033b8:	08003bcd 	.word	0x08003bcd
 80033bc:	0800349b 	.word	0x0800349b
 80033c0:	080034d1 	.word	0x080034d1
 80033c4:	f240 4269 	movw	r2, #1129	; 0x469
 80033c8:	4293      	cmp	r3, r2
 80033ca:	f300 83ff 	bgt.w	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
 80033ce:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80033d2:	f6bf aef1 	bge.w	80031b8 <_Z22handleSDORequestUploadRK9RxMessage+0xf4>
 80033d6:	e3f9      	b.n	8003bcc <_Z22handleSDORequestUploadRK9RxMessage+0xb08>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80033d8:	2303      	movs	r3, #3
 80033da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_NodeID>(OD_NodeID_get());
 80033de:	f002 f90f 	bl	8005600 <_Z13OD_NodeID_getv>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 f9e3 	bl	80047b8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 80033f2:	e3f4      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_NodeStatus>(OD_NodeStatus_get());
 80033fa:	f000 fc13 	bl	8003c24 <_Z17OD_NodeStatus_getv>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f001 f9ea 	bl	80047e2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800340e:	e3e6      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003410:	2303      	movs	r3, #3
 8003412:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003416:	f002 f8fb 	bl	8005610 <_Z22OD_ProtocolVersion_getv>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 f9f1 	bl	800480c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 800342a:	e3d8      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800342c:	2303      	movs	r3, #3
 800342e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_StackVersion>(OD_StackVersion_get());
 8003432:	f002 f8f5 	bl	8005620 <_Z19OD_StackVersion_getv>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 f9f8 	bl	8004836 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8003446:	e3ca      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003448:	2303      	movs	r3, #3
 800344a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_DbcVersion>(OD_DbcVersion_get());
 800344e:	f002 f8ef 	bl	8005630 <_Z17OD_DbcVersion_getv>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f9ff 	bl	8004860 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8003462:	e3bc      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_HeartbeatInterval>();
 8003464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fddf 	bl	800502c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals24PDU_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 800346e:	4603      	mov	r3, r0
 8003470:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8003474:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fc0b 	bl	8003c94 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003484:	f000 fbea 	bl	8003c5c <_Z24OD_HeartbeatInterval_getv>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f9f9 	bl	800488a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8003498:	e3a1      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_SendOdOnBootup>();
 800349a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 fdd6 	bl	8005050 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals21PDU_OD_SendOdOnBootupEEENT_8dataTypeEv>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 80034aa:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 f8c6 	bl	8005640 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 80034ba:	f002 f8e5 	bl	8005688 <_Z21OD_SendOdOnBootup_getv>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 f9f3 	bl	80048b4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 80034ce:	e386      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_OdEntrySendInterval>();
 80034d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 fdcd 	bl	8005074 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 80034da:	4603      	mov	r3, r0
 80034dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 80034e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fc0d 	bl	8003d04 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 80034f0:	f000 fbec 	bl	8003ccc <_Z26OD_OdEntrySendInterval_getv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 f9ed 	bl	80048de <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8003504:	e36b      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003506:	2303      	movs	r3, #3
 8003508:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CpuUsage>(OD_CpuUsage_get());
 800350c:	f000 fc16 	bl	8003d3c <_Z15OD_CpuUsage_getv>
 8003510:	eef0 7a40 	vmov.f32	s15, s0
 8003514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003518:	eeb0 0a67 	vmov.f32	s0, s15
 800351c:	4618      	mov	r0, r3
 800351e:	f001 f9f3 	bl	8004908 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8003522:	e35c      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003524:	2303      	movs	r3, #3
 8003526:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_MemFree>(OD_MemFree_get());
 800352a:	f000 fc41 	bl	8003db0 <_Z14OD_MemFree_getv>
 800352e:	4602      	mov	r2, r0
 8003530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f9fd 	bl	8004936 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 800353c:	e34f      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800353e:	2303      	movs	r3, #3
 8003540:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BoardTemp>(OD_BoardTemp_get());
 8003544:	f000 fc6c 	bl	8003e20 <_Z16OD_BoardTemp_getv>
 8003548:	eef0 7a40 	vmov.f32	s15, s0
 800354c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003550:	eeb0 0a67 	vmov.f32	s0, s15
 8003554:	4618      	mov	r0, r3
 8003556:	f001 fa02 	bl	800495e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 800355a:	e340      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800355c:	2303      	movs	r3, #3
 800355e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_InputVoltage>(OD_InputVoltage_get());
 8003562:	f000 fc97 	bl	8003e94 <_Z19OD_InputVoltage_getv>
 8003566:	eef0 7a40 	vmov.f32	s15, s0
 800356a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fa0a 	bl	800498c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8003578:	e331      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800357a:	2303      	movs	r3, #3
 800357c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_runtime>(OD_runtime_get());
 8003580:	f002 f8a0 	bl	80056c4 <_Z14OD_runtime_getv>
 8003584:	4602      	mov	r2, r0
 8003586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fa14 	bl	80049ba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8003592:	e324      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003594:	2303      	movs	r3, #3
 8003596:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SdcIn>(OD_SdcIn_get());
 800359a:	f002 f8ad 	bl	80056f8 <_Z12OD_SdcIn_getv>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fa1a 	bl	80049e2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>
            break;
 80035ae:	e316      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_SdcOut>(OD_SdcOut_get());
 80035b6:	f002 f8af 	bl	8005718 <_Z13OD_SdcOut_getv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fa21 	bl	8004a0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 80035ca:	e308      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ChipUID1>(OD_ChipUID1_get());
 80035d2:	f002 f8b1 	bl	8005738 <_Z15OD_ChipUID1_getv>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80035de:	4608      	mov	r0, r1
 80035e0:	f001 fa29 	bl	8004a36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 80035e4:	e2fb      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_ChipUID2>(OD_ChipUID2_get());
 80035ec:	f002 f8c9 	bl	8005782 <_Z15OD_ChipUID2_getv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80035f8:	4608      	mov	r0, r1
 80035fa:	f001 fa35 	bl	8004a68 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 80035fe:	e2ee      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003600:	2303      	movs	r3, #3
 8003602:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BuildDate>(OD_BuildDate_get());
 8003606:	f002 f8e3 	bl	80057d0 <_Z16OD_BuildDate_getv>
 800360a:	4602      	mov	r2, r0
 800360c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f001 fa41 	bl	8004a9a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8003618:	e2e1      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800361a:	2303      	movs	r3, #3
 800361c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_BuildTime>(OD_BuildTime_get());
 8003620:	f002 f8e2 	bl	80057e8 <_Z16OD_BuildTime_getv>
 8003624:	4602      	mov	r2, r0
 8003626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f001 fa48 	bl	8004ac2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8003632:	e2d4      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003634:	2303      	movs	r3, #3
 8003636:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800363a:	f002 f8e1 	bl	8005800 <_Z20OD_CAN1_TxErrCnt_getv>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f001 fa4e 	bl	8004aea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 800364e:	e2c6      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003650:	2303      	movs	r3, #3
 8003652:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003656:	f002 f8e7 	bl	8005828 <_Z20OD_CAN1_RxErrCnt_getv>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f001 fa55 	bl	8004b14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 800366a:	e2b8      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800366c:	2303      	movs	r3, #3
 800366e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003672:	f002 f8ed 	bl	8005850 <_Z25OD_CAN1_lastErrorCode_getv>
 8003676:	4602      	mov	r2, r0
 8003678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fa5d 	bl	8004b3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8003684:	e2ab      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CAN1_autoErrorReset>();
 8003686:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fd04 	bl	8005098 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8003696:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fc50 	bl	8003f40 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80036a6:	f000 fc2f 	bl	8003f08 <_Z26OD_CAN1_autoErrorReset_getv>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fa56 	bl	8004b66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80036ba:	e290      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_CAN1_Baudrate>();
 80036bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fcfb 	bl	80050bc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 80036cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80036d0:	2b7c      	cmp	r3, #124	; 0x7c
 80036d2:	d904      	bls.n	80036de <_Z22handleSDORequestUploadRK9RxMessage+0x61a>
 80036d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80036d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036dc:	d903      	bls.n	80036e6 <_Z22handleSDORequestUploadRK9RxMessage+0x622>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80036de:	2305      	movs	r3, #5
 80036e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80036e4:	e007      	b.n	80036f6 <_Z22handleSDORequestUploadRK9RxMessage+0x632>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 80036e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fc60 	bl	8003fb0 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80036f6:	f000 fc3f 	bl	8003f78 <_Z20OD_CAN1_Baudrate_getv>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fa43 	bl	8004b90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 800370a:	e268      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800370c:	2303      	movs	r3, #3
 800370e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003712:	f002 f8a7 	bl	8005864 <_Z18OD_CAN1_Status_getv>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fa4a 	bl	8004bba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8003726:	e25a      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003728:	2303      	movs	r3, #3
 800372a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 800372e:	f000 fc5b 	bl	8003fe8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003732:	4602      	mov	r2, r0
 8003734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fa52 	bl	8004be4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003740:	e24d      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003742:	2303      	movs	r3, #3
 8003744:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003748:	f000 fc6a 	bl	8004020 <_Z23OD_CAN1_ErrorStatus_getv>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fa58 	bl	8004c0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 800375c:	e23f      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800375e:	2303      	movs	r3, #3
 8003760:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8003764:	f000 fc78 	bl	8004058 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8003768:	4602      	mov	r2, r0
 800376a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f001 fa60 	bl	8004c36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003776:	e232      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003778:	2303      	movs	r3, #3
 800377a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 800377e:	f002 f87b 	bl	8005878 <_Z20OD_CAN2_TxErrCnt_getv>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fa66 	bl	8004c5e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8003792:	e224      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003794:	2303      	movs	r3, #3
 8003796:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 800379a:	f002 f881 	bl	80058a0 <_Z20OD_CAN2_RxErrCnt_getv>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fa6d 	bl	8004c88 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 80037ae:	e216      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80037b6:	f002 f887 	bl	80058c8 <_Z25OD_CAN2_lastErrorCode_getv>
 80037ba:	4602      	mov	r2, r0
 80037bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fa75 	bl	8004cb2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80037c8:	e209      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CAN2_autoErrorReset>();
 80037ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fc86 	bl	80050e0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 80037da:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fc72 	bl	80040c8 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80037ea:	f000 fc51 	bl	8004090 <_Z26OD_CAN2_autoErrorReset_getv>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fa6e 	bl	8004cda <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80037fe:	e1ee      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_CAN2_Baudrate>();
 8003800:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fc7d 	bl	8005104 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 800380a:	4603      	mov	r3, r0
 800380c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8003810:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003814:	2b7c      	cmp	r3, #124	; 0x7c
 8003816:	d904      	bls.n	8003822 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
 8003818:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800381c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003820:	d903      	bls.n	800382a <_Z22handleSDORequestUploadRK9RxMessage+0x766>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003822:	2305      	movs	r3, #5
 8003824:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8003828:	e007      	b.n	800383a <_Z22handleSDORequestUploadRK9RxMessage+0x776>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 800382a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fc82 	bl	8004138 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 800383a:	f000 fc61 	bl	8004100 <_Z20OD_CAN2_Baudrate_getv>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fa5b 	bl	8004d04 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 800384e:	e1c6      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003850:	2303      	movs	r3, #3
 8003852:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_Status>(OD_CAN2_Status_get());
 8003856:	f002 f841 	bl	80058dc <_Z18OD_CAN2_Status_getv>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fa62 	bl	8004d2e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 800386a:	e1b8      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800386c:	2303      	movs	r3, #3
 800386e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8003872:	f000 fc7d 	bl	8004170 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8003876:	4602      	mov	r2, r0
 8003878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fa6a 	bl	8004d58 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003884:	e1ab      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003886:	2303      	movs	r3, #3
 8003888:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 800388c:	f000 fc8c 	bl	80041a8 <_Z23OD_CAN2_ErrorStatus_getv>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fa70 	bl	8004d80 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80038a0:	e19d      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::PDU_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 80038a8:	f000 fc9a 	bl	80041e0 <_Z29OD_CAN2_DelayedTxMessages_getv>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 fa78 	bl	8004daa <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80038ba:	e190      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x800: {   // OD_batterVoltageLow
            float value = msgSdoReq.get<can::signals::PDU_OD_batterVoltageLow>();
 80038bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fc31 	bl	8005128 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_batterVoltageLowEEENT_8dataTypeEv>
 80038c6:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.0f || value > 655.35f) {
 80038ca:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80038ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	d408      	bmi.n	80038ea <_Z22handleSDORequestUploadRK9RxMessage+0x826>
 80038d8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80038dc:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8003c18 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 80038e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e8:	dd03      	ble.n	80038f2 <_Z22handleSDORequestUploadRK9RxMessage+0x82e>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80038ea:	2305      	movs	r3, #5
 80038ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80038f0:	e006      	b.n	8003900 <_Z22handleSDORequestUploadRK9RxMessage+0x83c>
            }
            else {
                OD_batterVoltageLow_set(value);
 80038f2:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80038f6:	f000 fcad 	bl	8004254 <_Z23OD_batterVoltageLow_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageLow>(OD_batterVoltageLow_get());
 8003900:	f000 fc8a 	bl	8004218 <_Z23OD_batterVoltageLow_getv>
 8003904:	eef0 7a40 	vmov.f32	s15, s0
 8003908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800390c:	eeb0 0a67 	vmov.f32	s0, s15
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fa5e 	bl	8004dd2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>
            break;
 8003916:	e162      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x801: {   // OD_batterVoltageCritical
            float value = msgSdoReq.get<can::signals::PDU_OD_batterVoltageCritical>();
 8003918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391c:	4618      	mov	r0, r3
 800391e:	f001 fc17 	bl	8005150 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals28PDU_OD_batterVoltageCriticalEEENT_8dataTypeEv>
 8003922:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
if (value < 0.0f || value > 655.35f) {
 8003926:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800392a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	d408      	bmi.n	8003946 <_Z22handleSDORequestUploadRK9RxMessage+0x882>
 8003934:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003938:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8003c18 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 800393c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	dd03      	ble.n	800394e <_Z22handleSDORequestUploadRK9RxMessage+0x88a>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003946:	2305      	movs	r3, #5
 8003948:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800394c:	e006      	b.n	800395c <_Z22handleSDORequestUploadRK9RxMessage+0x898>
            }
            else {
                OD_batterVoltageCritical_set(value);
 800394e:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8003952:	f000 fcb9 	bl	80042c8 <_Z28OD_batterVoltageCritical_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003956:	2300      	movs	r3, #0
 8003958:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batterVoltageCritical>(OD_batterVoltageCritical_get());
 800395c:	f000 fc96 	bl	800428c <_Z28OD_batterVoltageCritical_getv>
 8003960:	eef0 7a40 	vmov.f32	s15, s0
 8003964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003968:	eeb0 0a67 	vmov.f32	s0, s15
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fa47 	bl	8004e00 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>
            break;
 8003972:	e134      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x802: {   // OD_overTempWarn
            float value = msgSdoReq.get<can::signals::PDU_OD_overTempWarn>();
 8003974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fbfd 	bl	8005178 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals19PDU_OD_overTempWarnEEENT_8dataTypeEv>
 800397e:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 0.0f || value > 6553.5f) {
 8003982:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	d408      	bmi.n	80039a2 <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
 8003990:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003994:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003c1c <_Z22handleSDORequestUploadRK9RxMessage+0xb58>
 8003998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a0:	dd03      	ble.n	80039aa <_Z22handleSDORequestUploadRK9RxMessage+0x8e6>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80039a2:	2305      	movs	r3, #5
 80039a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80039a8:	e006      	b.n	80039b8 <_Z22handleSDORequestUploadRK9RxMessage+0x8f4>
            }
            else {
                OD_overTempWarn_set(value);
 80039aa:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80039ae:	f000 fcc5 	bl	800433c <_Z19OD_overTempWarn_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_overTempWarn>(OD_overTempWarn_get());
 80039b8:	f000 fca2 	bl	8004300 <_Z19OD_overTempWarn_getv>
 80039bc:	eef0 7a40 	vmov.f32	s15, s0
 80039c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c4:	eeb0 0a67 	vmov.f32	s0, s15
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fa30 	bl	8004e2e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>
            break;
 80039ce:	e106      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x803: {   // OD_overTempCritical
            float value = msgSdoReq.get<can::signals::PDU_OD_overTempCritical>();
 80039d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fbe3 	bl	80051a0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_overTempCriticalEEENT_8dataTypeEv>
 80039da:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
if (value < 0.0f || value > 6553.5f) {
 80039de:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80039e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	d408      	bmi.n	80039fe <_Z22handleSDORequestUploadRK9RxMessage+0x93a>
 80039ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80039f0:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003c1c <_Z22handleSDORequestUploadRK9RxMessage+0xb58>
 80039f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	dd03      	ble.n	8003a06 <_Z22handleSDORequestUploadRK9RxMessage+0x942>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 80039fe:	2305      	movs	r3, #5
 8003a00:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8003a04:	e006      	b.n	8003a14 <_Z22handleSDORequestUploadRK9RxMessage+0x950>
            }
            else {
                OD_overTempCritical_set(value);
 8003a06:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8003a0a:	f000 fcd1 	bl	80043b0 <_Z23OD_overTempCritical_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_overTempCritical>(OD_overTempCritical_get());
 8003a14:	f000 fcae 	bl	8004374 <_Z23OD_overTempCritical_getv>
 8003a18:	eef0 7a40 	vmov.f32	s15, s0
 8003a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a20:	eeb0 0a67 	vmov.f32	s0, s15
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fa19 	bl	8004e5c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>
            break;
 8003a2a:	e0d8      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x850: {   // OD_batteryOvercurrent
            float value = msgSdoReq.get<can::signals::PDU_OD_batteryOvercurrent>();
 8003a2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fbc9 	bl	80051c8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_batteryOvercurrentEEENT_8dataTypeEv>
 8003a36:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
if (value < 0.0f || value > 655.35f) {
 8003a3a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d408      	bmi.n	8003a5a <_Z22handleSDORequestUploadRK9RxMessage+0x996>
 8003a48:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003a4c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003c18 <_Z22handleSDORequestUploadRK9RxMessage+0xb54>
 8003a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	dd03      	ble.n	8003a62 <_Z22handleSDORequestUploadRK9RxMessage+0x99e>
                respCode = can::signals::PDU_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8003a60:	e006      	b.n	8003a70 <_Z22handleSDORequestUploadRK9RxMessage+0x9ac>
            }
            else {
                OD_batteryOvercurrent_set(value);
 8003a62:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8003a66:	f000 fcdd 	bl	8004424 <_Z25OD_batteryOvercurrent_setf>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
            msgSdoResp.set<can::signals::PDU_OD_batteryOvercurrent>(OD_batteryOvercurrent_get());
 8003a70:	f000 fcba 	bl	80043e8 <_Z25OD_batteryOvercurrent_getv>
 8003a74:	eef0 7a40 	vmov.f32	s15, s0
 8003a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fa02 	bl	8004e8a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>
            break;
 8003a86:	e0aa      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x900: {   // OD_currentReadInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_currentReadInterval>();
 8003a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fbaf 	bl	80051f0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_currentReadIntervalEEENT_8dataTypeEv>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                OD_currentReadInterval_set(value);
 8003a98:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fcf9 	bl	8004494 <_Z26OD_currentReadInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_currentReadInterval>(OD_currentReadInterval_get());
 8003aa8:	f000 fcd8 	bl	800445c <_Z26OD_currentReadInterval_getv>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f9fe 	bl	8004eb8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>
            break;
 8003abc:	e08f      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x901: {   // OD_statusSendInterval
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_statusSendInterval>();
 8003abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fba6 	bl	8005214 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_statusSendIntervalEEENT_8dataTypeEv>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                OD_statusSendInterval_set(value);
 8003ace:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fd16 	bl	8004504 <_Z25OD_statusSendInterval_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_statusSendInterval>(OD_statusSendInterval_get());
 8003ade:	f000 fcf5 	bl	80044cc <_Z25OD_statusSendInterval_getv>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f9f8 	bl	8004ee2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>
            break;
 8003af2:	e074      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0x902: {   // OD_watchdogTimeout
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_watchdogTimeout>();
 8003af4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 fb9d 	bl	8005238 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals22PDU_OD_watchdogTimeoutEEENT_8dataTypeEv>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                OD_watchdogTimeout_set(value);
 8003b04:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fd33 	bl	8004574 <_Z22OD_watchdogTimeout_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_watchdogTimeout>(OD_watchdogTimeout_get());
 8003b14:	f000 fd12 	bl	800453c <_Z22OD_watchdogTimeout_getv>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f9f2 	bl	8004f0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>
            break;
 8003b28:	e059      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xA00: {   // OD_projectXXEnabled
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_projectXXEnabled>();
 8003b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fb94 	bl	800525c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_projectXXEnabledEEENT_8dataTypeEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                OD_projectXXEnabled_set(value);
 8003b3a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fd50 	bl	80045e4 <_Z23OD_projectXXEnabled_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_projectXXEnabled>(OD_projectXXEnabled_get());
 8003b4a:	f000 fd2f 	bl	80045ac <_Z23OD_projectXXEnabled_getv>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 f9ec 	bl	8004f36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>
            break;
 8003b5e:	e03e      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xA02: {   // OD_LedCommands
            uint16_t value = msgSdoReq.get<can::signals::PDU_OD_LedCommands>();
 8003b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fb8b 	bl	8005280 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals18PDU_OD_LedCommandsEEENT_8dataTypeEv>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                OD_LedCommands_set(value);
 8003b70:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fd6d 	bl	8004654 <_Z18OD_LedCommands_sett>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_LedCommands>(OD_LedCommands_get());
 8003b80:	f000 fd4c 	bl	800461c <_Z18OD_LedCommands_getv>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f9e6 	bl	8004f60 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>
            break;
 8003b94:	e023      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        case 0xB00: {   // OD_CoolingPumpEnabled
            uint8_t value = msgSdoReq.get<can::signals::PDU_OD_CoolingPumpEnabled>();
 8003b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 fb82 	bl	80052a4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_CoolingPumpEnabledEEENT_8dataTypeEv>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                OD_CoolingPumpEnabled_set(value);
 8003ba6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fd8a 	bl	80046c4 <_Z25OD_CoolingPumpEnabled_seth>
                respCode = can::signals::PDU_SDO_RespCode::OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            msgSdoResp.set<can::signals::PDU_OD_CoolingPumpEnabled>(OD_CoolingPumpEnabled_get());
 8003bb6:	f000 fd69 	bl	800468c <_Z25OD_CoolingPumpEnabled_getv>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 f9e0 	bl	8004f8a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>
            break;
 8003bca:	e008      	b.n	8003bde <_Z22handleSDORequestUploadRK9RxMessage+0xb1a>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::PDU_SDO_ID>(sdoId);
 8003bcc:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8003bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f9ec 	bl	8004fb4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003bdc:	bf00      	nop
    }

    msgSdoResp.set<can::signals::PDU_SDO_RespCode>(respCode);
 8003bde:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8003be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f9f8 	bl	8004fde <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc ff31 	bl	8000a60 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <_Z22handleSDORequestUploadRK9RxMessage+0xb5c>)
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f107 0108 	add.w	r1, r7, #8
 8003c06:	2300      	movs	r3, #0
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f011 fc7f 	bl	801550c <osMessageQueuePut>
}
 8003c0e:	bf00      	nop
 8003c10:	3790      	adds	r7, #144	; 0x90
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	4423d666 	.word	0x4423d666
 8003c1c:	45cccc00 	.word	0x45cccc00
 8003c20:	200003ec 	.word	0x200003ec

08003c24 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <_Z17OD_NodeStatus_getv+0x30>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c32:	4618      	mov	r0, r3
 8003c34:	f011 fb6f 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <_Z17OD_NodeStatus_getv+0x34>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <_Z17OD_NodeStatus_getv+0x30>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f011 fbb2 	bl	80153ac <osMutexRelease>
    return value;
 8003c48:	79fb      	ldrb	r3, [r7, #7]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200000f4 	.word	0x200000f4
 8003c58:	200000c4 	.word	0x200000c4

08003c5c <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <_Z24OD_HeartbeatInterval_getv+0x30>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f04f 31ff 	mov.w	r1, #4294967295
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f011 fb53 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <_Z24OD_HeartbeatInterval_getv+0x34>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <_Z24OD_HeartbeatInterval_getv+0x30>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f011 fb96 	bl	80153ac <osMutexRelease>
    return value;
 8003c80:	88fb      	ldrh	r3, [r7, #6]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000104 	.word	0x20000104
 8003c90:	20000000 	.word	0x20000000

08003c94 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f011 fb35 	bl	8015316 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8003cac:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f011 fb78 	bl	80153ac <osMutexRelease>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000104 	.word	0x20000104
 8003cc8:	20000000 	.word	0x20000000

08003ccc <_Z26OD_OdEntrySendInterval_getv>:
    osMutexRelease(mutex_OD_SendOdOnBootup);
}
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f011 fb1b 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f011 fb5e 	bl	80153ac <osMutexRelease>
    return value;
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000010c 	.word	0x2000010c
 8003d00:	20000002 	.word	0x20000002

08003d04 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f04f 31ff 	mov.w	r1, #4294967295
 8003d16:	4618      	mov	r0, r3
 8003d18:	f011 fafd 	bl	8015316 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f011 fb40 	bl	80153ac <osMutexRelease>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000010c 	.word	0x2000010c
 8003d38:	20000002 	.word	0x20000002

08003d3c <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <_Z15OD_CpuUsage_getv+0x34>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f011 fae3 	bl	8015316 <osMutexAcquire>
    float value = OD_CpuUsage;
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_Z15OD_CpuUsage_getv+0x38>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <_Z15OD_CpuUsage_getv+0x34>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f011 fb26 	bl	80153ac <osMutexRelease>
    return value;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	ee07 3a90 	vmov	s15, r3
}
 8003d66:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000110 	.word	0x20000110
 8003d74:	200000c8 	.word	0x200000c8

08003d78 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <_Z15OD_CpuUsage_setf+0x30>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f011 fac3 	bl	8015316 <osMutexAcquire>
    OD_CpuUsage = value;
 8003d90:	4a06      	ldr	r2, [pc, #24]	; (8003dac <_Z15OD_CpuUsage_setf+0x34>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <_Z15OD_CpuUsage_setf+0x30>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f011 fb06 	bl	80153ac <osMutexRelease>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000110 	.word	0x20000110
 8003dac:	200000c8 	.word	0x200000c8

08003db0 <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <_Z14OD_MemFree_getv+0x30>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f04f 31ff 	mov.w	r1, #4294967295
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f011 faa9 	bl	8015316 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <_Z14OD_MemFree_getv+0x34>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <_Z14OD_MemFree_getv+0x30>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f011 faec 	bl	80153ac <osMutexRelease>
    return value;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000114 	.word	0x20000114
 8003de4:	200000cc 	.word	0x200000cc

08003de8 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <_Z14OD_MemFree_setm+0x30>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f011 fa8c 	bl	8015316 <osMutexAcquire>
    OD_MemFree = value;
 8003dfe:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <_Z14OD_MemFree_setm+0x34>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <_Z14OD_MemFree_setm+0x30>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f011 facf 	bl	80153ac <osMutexRelease>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000114 	.word	0x20000114
 8003e1c:	200000cc 	.word	0x200000cc

08003e20 <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <_Z16OD_BoardTemp_getv+0x34>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f011 fa71 	bl	8015316 <osMutexAcquire>
    float value = OD_BoardTemp;
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <_Z16OD_BoardTemp_getv+0x38>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <_Z16OD_BoardTemp_getv+0x34>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f011 fab4 	bl	80153ac <osMutexRelease>
    return value;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	ee07 3a90 	vmov	s15, r3
}
 8003e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000118 	.word	0x20000118
 8003e58:	200000d0 	.word	0x200000d0

08003e5c <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <_Z16OD_BoardTemp_setf+0x30>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f011 fa51 	bl	8015316 <osMutexAcquire>
    OD_BoardTemp = value;
 8003e74:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <_Z16OD_BoardTemp_setf+0x34>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <_Z16OD_BoardTemp_setf+0x30>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f011 fa94 	bl	80153ac <osMutexRelease>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000118 	.word	0x20000118
 8003e90:	200000d0 	.word	0x200000d0

08003e94 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <_Z19OD_InputVoltage_getv+0x34>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f011 fa37 	bl	8015316 <osMutexAcquire>
    float value = OD_InputVoltage;
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <_Z19OD_InputVoltage_getv+0x38>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <_Z19OD_InputVoltage_getv+0x34>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f011 fa7a 	bl	80153ac <osMutexRelease>
    return value;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	ee07 3a90 	vmov	s15, r3
}
 8003ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000011c 	.word	0x2000011c
 8003ecc:	200000d4 	.word	0x200000d4

08003ed0 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <_Z19OD_InputVoltage_setf+0x30>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f011 fa17 	bl	8015316 <osMutexAcquire>
    OD_InputVoltage = value;
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <_Z19OD_InputVoltage_setf+0x34>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <_Z19OD_InputVoltage_setf+0x30>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f011 fa5a 	bl	80153ac <osMutexRelease>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	2000011c 	.word	0x2000011c
 8003f04:	200000d4 	.word	0x200000d4

08003f08 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f04f 31ff 	mov.w	r1, #4294967295
 8003f16:	4618      	mov	r0, r3
 8003f18:	f011 f9fd 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f011 fa40 	bl	80153ac <osMutexRelease>
    return value;
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000148 	.word	0x20000148
 8003f3c:	20000004 	.word	0x20000004

08003f40 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f52:	4618      	mov	r0, r3
 8003f54:	f011 f9df 	bl	8015316 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8003f58:	4a06      	ldr	r2, [pc, #24]	; (8003f74 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8003f5e:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f011 fa22 	bl	80153ac <osMutexRelease>
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000148 	.word	0x20000148
 8003f74:	20000004 	.word	0x20000004

08003f78 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f04f 31ff 	mov.w	r1, #4294967295
 8003f86:	4618      	mov	r0, r3
 8003f88:	f011 f9c5 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f011 fa08 	bl	80153ac <osMutexRelease>
    return value;
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000014c 	.word	0x2000014c
 8003fac:	20000006 	.word	0x20000006

08003fb0 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f011 f9a7 	bl	8015316 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8003fc8:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f011 f9ea 	bl	80153ac <osMutexRelease>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2000014c 	.word	0x2000014c
 8003fe4:	20000006 	.word	0x20000006

08003fe8 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f011 f98d 	bl	8015316 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f011 f9d0 	bl	80153ac <osMutexRelease>
    return value;
 800400c:	687b      	ldr	r3, [r7, #4]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000154 	.word	0x20000154
 800401c:	200000d8 	.word	0x200000d8

08004020 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f04f 31ff 	mov.w	r1, #4294967295
 800402e:	4618      	mov	r0, r3
 8004030:	f011 f971 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f011 f9b4 	bl	80153ac <osMutexRelease>
    return value;
 8004044:	79fb      	ldrb	r3, [r7, #7]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000158 	.word	0x20000158
 8004054:	200000dc 	.word	0x200000dc

08004058 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f04f 31ff 	mov.w	r1, #4294967295
 8004066:	4618      	mov	r0, r3
 8004068:	f011 f955 	bl	8015316 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f011 f998 	bl	80153ac <osMutexRelease>
    return value;
 800407c:	687b      	ldr	r3, [r7, #4]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	2000015c 	.word	0x2000015c
 800408c:	200000e0 	.word	0x200000e0

08004090 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f04f 31ff 	mov.w	r1, #4294967295
 800409e:	4618      	mov	r0, r3
 80040a0:	f011 f939 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f011 f97c 	bl	80153ac <osMutexRelease>
    return value;
 80040b4:	79fb      	ldrb	r3, [r7, #7]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2000016c 	.word	0x2000016c
 80040c4:	20000008 	.word	0x20000008

080040c8 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f04f 31ff 	mov.w	r1, #4294967295
 80040da:	4618      	mov	r0, r3
 80040dc:	f011 f91b 	bl	8015316 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80040e0:	4a06      	ldr	r2, [pc, #24]	; (80040fc <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80040e6:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f011 f95e 	bl	80153ac <osMutexRelease>
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	2000016c 	.word	0x2000016c
 80040fc:	20000008 	.word	0x20000008

08004100 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f04f 31ff 	mov.w	r1, #4294967295
 800410e:	4618      	mov	r0, r3
 8004110:	f011 f901 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f011 f944 	bl	80153ac <osMutexRelease>
    return value;
 8004124:	88fb      	ldrh	r3, [r7, #6]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000170 	.word	0x20000170
 8004134:	2000000a 	.word	0x2000000a

08004138 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f04f 31ff 	mov.w	r1, #4294967295
 800414a:	4618      	mov	r0, r3
 800414c:	f011 f8e3 	bl	8015316 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f011 f926 	bl	80153ac <osMutexRelease>
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000170 	.word	0x20000170
 800416c:	2000000a 	.word	0x2000000a

08004170 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f04f 31ff 	mov.w	r1, #4294967295
 800417e:	4618      	mov	r0, r3
 8004180:	f011 f8c9 	bl	8015316 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f011 f90c 	bl	80153ac <osMutexRelease>
    return value;
 8004194:	687b      	ldr	r3, [r7, #4]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000178 	.word	0x20000178
 80041a4:	200000e4 	.word	0x200000e4

080041a8 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f04f 31ff 	mov.w	r1, #4294967295
 80041b6:	4618      	mov	r0, r3
 80041b8:	f011 f8ad 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f011 f8f0 	bl	80153ac <osMutexRelease>
    return value;
 80041cc:	79fb      	ldrb	r3, [r7, #7]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000017c 	.word	0x2000017c
 80041dc:	200000e8 	.word	0x200000e8

080041e0 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f04f 31ff 	mov.w	r1, #4294967295
 80041ee:	4618      	mov	r0, r3
 80041f0:	f011 f891 	bl	8015316 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f011 f8d4 	bl	80153ac <osMutexRelease>
    return value;
 8004204:	687b      	ldr	r3, [r7, #4]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000180 	.word	0x20000180
 8004214:	200000ec 	.word	0x200000ec

08004218 <_Z23OD_batterVoltageLow_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_batterVoltageLow_GET_OVERWRITE
float WEAK_SYMBOL OD_batterVoltageLow_get() {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batterVoltageLow, portMAX_DELAY);
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <_Z23OD_batterVoltageLow_getv+0x34>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f04f 31ff 	mov.w	r1, #4294967295
 8004226:	4618      	mov	r0, r3
 8004228:	f011 f875 	bl	8015316 <osMutexAcquire>
    float value = OD_batterVoltageLow;
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <_Z23OD_batterVoltageLow_getv+0x38>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batterVoltageLow);
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <_Z23OD_batterVoltageLow_getv+0x34>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f011 f8b8 	bl	80153ac <osMutexRelease>
    return value;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	ee07 3a90 	vmov	s15, r3
}
 8004242:	eeb0 0a67 	vmov.f32	s0, s15
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000184 	.word	0x20000184
 8004250:	2000000c 	.word	0x2000000c

08004254 <_Z23OD_batterVoltageLow_setf>:
#endif
#ifndef OD_batterVoltageLow_SET_OVERWRITE
void WEAK_SYMBOL OD_batterVoltageLow_set(const float value) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batterVoltageLow, portMAX_DELAY);
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <_Z23OD_batterVoltageLow_setf+0x30>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f04f 31ff 	mov.w	r1, #4294967295
 8004266:	4618      	mov	r0, r3
 8004268:	f011 f855 	bl	8015316 <osMutexAcquire>
    OD_batterVoltageLow = value;
 800426c:	4a06      	ldr	r2, [pc, #24]	; (8004288 <_Z23OD_batterVoltageLow_setf+0x34>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batterVoltageLow);
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <_Z23OD_batterVoltageLow_setf+0x30>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f011 f898 	bl	80153ac <osMutexRelease>
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000184 	.word	0x20000184
 8004288:	2000000c 	.word	0x2000000c

0800428c <_Z28OD_batterVoltageCritical_getv>:
#endif

#ifndef OD_batterVoltageCritical_GET_OVERWRITE
float WEAK_SYMBOL OD_batterVoltageCritical_get() {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batterVoltageCritical, portMAX_DELAY);
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <_Z28OD_batterVoltageCritical_getv+0x34>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f04f 31ff 	mov.w	r1, #4294967295
 800429a:	4618      	mov	r0, r3
 800429c:	f011 f83b 	bl	8015316 <osMutexAcquire>
    float value = OD_batterVoltageCritical;
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <_Z28OD_batterVoltageCritical_getv+0x38>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batterVoltageCritical);
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <_Z28OD_batterVoltageCritical_getv+0x34>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f011 f87e 	bl	80153ac <osMutexRelease>
    return value;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	ee07 3a90 	vmov	s15, r3
}
 80042b6:	eeb0 0a67 	vmov.f32	s0, s15
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000188 	.word	0x20000188
 80042c4:	20000010 	.word	0x20000010

080042c8 <_Z28OD_batterVoltageCritical_setf>:
#endif
#ifndef OD_batterVoltageCritical_SET_OVERWRITE
void WEAK_SYMBOL OD_batterVoltageCritical_set(const float value) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batterVoltageCritical, portMAX_DELAY);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <_Z28OD_batterVoltageCritical_setf+0x30>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f04f 31ff 	mov.w	r1, #4294967295
 80042da:	4618      	mov	r0, r3
 80042dc:	f011 f81b 	bl	8015316 <osMutexAcquire>
    OD_batterVoltageCritical = value;
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <_Z28OD_batterVoltageCritical_setf+0x34>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batterVoltageCritical);
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <_Z28OD_batterVoltageCritical_setf+0x30>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f011 f85e 	bl	80153ac <osMutexRelease>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000188 	.word	0x20000188
 80042fc:	20000010 	.word	0x20000010

08004300 <_Z19OD_overTempWarn_getv>:
#endif

#ifndef OD_overTempWarn_GET_OVERWRITE
float WEAK_SYMBOL OD_overTempWarn_get() {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_overTempWarn, portMAX_DELAY);
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <_Z19OD_overTempWarn_getv+0x34>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f04f 31ff 	mov.w	r1, #4294967295
 800430e:	4618      	mov	r0, r3
 8004310:	f011 f801 	bl	8015316 <osMutexAcquire>
    float value = OD_overTempWarn;
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <_Z19OD_overTempWarn_getv+0x38>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_overTempWarn);
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <_Z19OD_overTempWarn_getv+0x34>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f011 f844 	bl	80153ac <osMutexRelease>
    return value;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	ee07 3a90 	vmov	s15, r3
}
 800432a:	eeb0 0a67 	vmov.f32	s0, s15
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	2000018c 	.word	0x2000018c
 8004338:	20000014 	.word	0x20000014

0800433c <_Z19OD_overTempWarn_setf>:
#endif
#ifndef OD_overTempWarn_SET_OVERWRITE
void WEAK_SYMBOL OD_overTempWarn_set(const float value) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_overTempWarn, portMAX_DELAY);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <_Z19OD_overTempWarn_setf+0x30>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f04f 31ff 	mov.w	r1, #4294967295
 800434e:	4618      	mov	r0, r3
 8004350:	f010 ffe1 	bl	8015316 <osMutexAcquire>
    OD_overTempWarn = value;
 8004354:	4a06      	ldr	r2, [pc, #24]	; (8004370 <_Z19OD_overTempWarn_setf+0x34>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_overTempWarn);
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <_Z19OD_overTempWarn_setf+0x30>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f011 f824 	bl	80153ac <osMutexRelease>
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	2000018c 	.word	0x2000018c
 8004370:	20000014 	.word	0x20000014

08004374 <_Z23OD_overTempCritical_getv>:
#endif

#ifndef OD_overTempCritical_GET_OVERWRITE
float WEAK_SYMBOL OD_overTempCritical_get() {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_overTempCritical, portMAX_DELAY);
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <_Z23OD_overTempCritical_getv+0x34>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f04f 31ff 	mov.w	r1, #4294967295
 8004382:	4618      	mov	r0, r3
 8004384:	f010 ffc7 	bl	8015316 <osMutexAcquire>
    float value = OD_overTempCritical;
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <_Z23OD_overTempCritical_getv+0x38>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_overTempCritical);
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <_Z23OD_overTempCritical_getv+0x34>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f011 f80a 	bl	80153ac <osMutexRelease>
    return value;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	ee07 3a90 	vmov	s15, r3
}
 800439e:	eeb0 0a67 	vmov.f32	s0, s15
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000190 	.word	0x20000190
 80043ac:	20000018 	.word	0x20000018

080043b0 <_Z23OD_overTempCritical_setf>:
#endif
#ifndef OD_overTempCritical_SET_OVERWRITE
void WEAK_SYMBOL OD_overTempCritical_set(const float value) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_overTempCritical, portMAX_DELAY);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <_Z23OD_overTempCritical_setf+0x30>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f04f 31ff 	mov.w	r1, #4294967295
 80043c2:	4618      	mov	r0, r3
 80043c4:	f010 ffa7 	bl	8015316 <osMutexAcquire>
    OD_overTempCritical = value;
 80043c8:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <_Z23OD_overTempCritical_setf+0x34>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_overTempCritical);
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <_Z23OD_overTempCritical_setf+0x30>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f010 ffea 	bl	80153ac <osMutexRelease>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000190 	.word	0x20000190
 80043e4:	20000018 	.word	0x20000018

080043e8 <_Z25OD_batteryOvercurrent_getv>:
#endif

#ifndef OD_batteryOvercurrent_GET_OVERWRITE
float WEAK_SYMBOL OD_batteryOvercurrent_get() {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_batteryOvercurrent, portMAX_DELAY);
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <_Z25OD_batteryOvercurrent_getv+0x34>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f04f 31ff 	mov.w	r1, #4294967295
 80043f6:	4618      	mov	r0, r3
 80043f8:	f010 ff8d 	bl	8015316 <osMutexAcquire>
    float value = OD_batteryOvercurrent;
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <_Z25OD_batteryOvercurrent_getv+0x38>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_batteryOvercurrent);
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <_Z25OD_batteryOvercurrent_getv+0x34>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f010 ffd0 	bl	80153ac <osMutexRelease>
    return value;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	ee07 3a90 	vmov	s15, r3
}
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000194 	.word	0x20000194
 8004420:	2000001c 	.word	0x2000001c

08004424 <_Z25OD_batteryOvercurrent_setf>:
#endif
#ifndef OD_batteryOvercurrent_SET_OVERWRITE
void WEAK_SYMBOL OD_batteryOvercurrent_set(const float value) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_batteryOvercurrent, portMAX_DELAY);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <_Z25OD_batteryOvercurrent_setf+0x30>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f04f 31ff 	mov.w	r1, #4294967295
 8004436:	4618      	mov	r0, r3
 8004438:	f010 ff6d 	bl	8015316 <osMutexAcquire>
    OD_batteryOvercurrent = value;
 800443c:	4a06      	ldr	r2, [pc, #24]	; (8004458 <_Z25OD_batteryOvercurrent_setf+0x34>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_batteryOvercurrent);
 8004442:	4b04      	ldr	r3, [pc, #16]	; (8004454 <_Z25OD_batteryOvercurrent_setf+0x30>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f010 ffb0 	bl	80153ac <osMutexRelease>
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000194 	.word	0x20000194
 8004458:	2000001c 	.word	0x2000001c

0800445c <_Z26OD_currentReadInterval_getv>:
#endif

#ifndef OD_currentReadInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_currentReadInterval_get() {
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_currentReadInterval, portMAX_DELAY);
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <_Z26OD_currentReadInterval_getv+0x30>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f04f 31ff 	mov.w	r1, #4294967295
 800446a:	4618      	mov	r0, r3
 800446c:	f010 ff53 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_currentReadInterval;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <_Z26OD_currentReadInterval_getv+0x34>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_currentReadInterval);
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <_Z26OD_currentReadInterval_getv+0x30>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f010 ff96 	bl	80153ac <osMutexRelease>
    return value;
 8004480:	88fb      	ldrh	r3, [r7, #6]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000198 	.word	0x20000198
 8004490:	20000020 	.word	0x20000020

08004494 <_Z26OD_currentReadInterval_sett>:
#endif
#ifndef OD_currentReadInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_currentReadInterval_set(const uint16_t value) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_currentReadInterval, portMAX_DELAY);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <_Z26OD_currentReadInterval_sett+0x30>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f04f 31ff 	mov.w	r1, #4294967295
 80044a6:	4618      	mov	r0, r3
 80044a8:	f010 ff35 	bl	8015316 <osMutexAcquire>
    OD_currentReadInterval = value;
 80044ac:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <_Z26OD_currentReadInterval_sett+0x34>)
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_currentReadInterval);
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <_Z26OD_currentReadInterval_sett+0x30>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f010 ff78 	bl	80153ac <osMutexRelease>
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000198 	.word	0x20000198
 80044c8:	20000020 	.word	0x20000020

080044cc <_Z25OD_statusSendInterval_getv>:
#endif

#ifndef OD_statusSendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_statusSendInterval_get() {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_statusSendInterval, portMAX_DELAY);
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <_Z25OD_statusSendInterval_getv+0x30>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f04f 31ff 	mov.w	r1, #4294967295
 80044da:	4618      	mov	r0, r3
 80044dc:	f010 ff1b 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_statusSendInterval;
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <_Z25OD_statusSendInterval_getv+0x34>)
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_statusSendInterval);
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <_Z25OD_statusSendInterval_getv+0x30>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f010 ff5e 	bl	80153ac <osMutexRelease>
    return value;
 80044f0:	88fb      	ldrh	r3, [r7, #6]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2000019c 	.word	0x2000019c
 8004500:	20000022 	.word	0x20000022

08004504 <_Z25OD_statusSendInterval_sett>:
#endif
#ifndef OD_statusSendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_statusSendInterval_set(const uint16_t value) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_statusSendInterval, portMAX_DELAY);
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <_Z25OD_statusSendInterval_sett+0x30>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f04f 31ff 	mov.w	r1, #4294967295
 8004516:	4618      	mov	r0, r3
 8004518:	f010 fefd 	bl	8015316 <osMutexAcquire>
    OD_statusSendInterval = value;
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <_Z25OD_statusSendInterval_sett+0x34>)
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_statusSendInterval);
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <_Z25OD_statusSendInterval_sett+0x30>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f010 ff40 	bl	80153ac <osMutexRelease>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	2000019c 	.word	0x2000019c
 8004538:	20000022 	.word	0x20000022

0800453c <_Z22OD_watchdogTimeout_getv>:
#endif

#ifndef OD_watchdogTimeout_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_watchdogTimeout_get() {
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_watchdogTimeout, portMAX_DELAY);
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <_Z22OD_watchdogTimeout_getv+0x30>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f04f 31ff 	mov.w	r1, #4294967295
 800454a:	4618      	mov	r0, r3
 800454c:	f010 fee3 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_watchdogTimeout;
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <_Z22OD_watchdogTimeout_getv+0x34>)
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_watchdogTimeout);
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <_Z22OD_watchdogTimeout_getv+0x30>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f010 ff26 	bl	80153ac <osMutexRelease>
    return value;
 8004560:	88fb      	ldrh	r3, [r7, #6]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200001a0 	.word	0x200001a0
 8004570:	20000024 	.word	0x20000024

08004574 <_Z22OD_watchdogTimeout_sett>:
#endif
#ifndef OD_watchdogTimeout_SET_OVERWRITE
void WEAK_SYMBOL OD_watchdogTimeout_set(const uint16_t value) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_watchdogTimeout, portMAX_DELAY);
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <_Z22OD_watchdogTimeout_sett+0x30>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f04f 31ff 	mov.w	r1, #4294967295
 8004586:	4618      	mov	r0, r3
 8004588:	f010 fec5 	bl	8015316 <osMutexAcquire>
    OD_watchdogTimeout = value;
 800458c:	4a06      	ldr	r2, [pc, #24]	; (80045a8 <_Z22OD_watchdogTimeout_sett+0x34>)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_watchdogTimeout);
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <_Z22OD_watchdogTimeout_sett+0x30>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f010 ff08 	bl	80153ac <osMutexRelease>
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200001a0 	.word	0x200001a0
 80045a8:	20000024 	.word	0x20000024

080045ac <_Z23OD_projectXXEnabled_getv>:
#endif

#ifndef OD_projectXXEnabled_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_projectXXEnabled_get() {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_projectXXEnabled, portMAX_DELAY);
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <_Z23OD_projectXXEnabled_getv+0x30>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f04f 31ff 	mov.w	r1, #4294967295
 80045ba:	4618      	mov	r0, r3
 80045bc:	f010 feab 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_projectXXEnabled;
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <_Z23OD_projectXXEnabled_getv+0x34>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_projectXXEnabled);
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <_Z23OD_projectXXEnabled_getv+0x30>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f010 feee 	bl	80153ac <osMutexRelease>
    return value;
 80045d0:	79fb      	ldrb	r3, [r7, #7]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200001a4 	.word	0x200001a4
 80045e0:	20000026 	.word	0x20000026

080045e4 <_Z23OD_projectXXEnabled_seth>:
#endif
#ifndef OD_projectXXEnabled_SET_OVERWRITE
void WEAK_SYMBOL OD_projectXXEnabled_set(const uint8_t value) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_projectXXEnabled, portMAX_DELAY);
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <_Z23OD_projectXXEnabled_seth+0x30>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f04f 31ff 	mov.w	r1, #4294967295
 80045f6:	4618      	mov	r0, r3
 80045f8:	f010 fe8d 	bl	8015316 <osMutexAcquire>
    OD_projectXXEnabled = value;
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <_Z23OD_projectXXEnabled_seth+0x34>)
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_projectXXEnabled);
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <_Z23OD_projectXXEnabled_seth+0x30>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f010 fed0 	bl	80153ac <osMutexRelease>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	200001a4 	.word	0x200001a4
 8004618:	20000026 	.word	0x20000026

0800461c <_Z18OD_LedCommands_getv>:
#endif

#ifndef OD_LedCommands_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_LedCommands_get() {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_LedCommands, portMAX_DELAY);
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <_Z18OD_LedCommands_getv+0x30>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f04f 31ff 	mov.w	r1, #4294967295
 800462a:	4618      	mov	r0, r3
 800462c:	f010 fe73 	bl	8015316 <osMutexAcquire>
    uint16_t value = OD_LedCommands;
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <_Z18OD_LedCommands_getv+0x34>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_LedCommands);
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <_Z18OD_LedCommands_getv+0x30>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f010 feb6 	bl	80153ac <osMutexRelease>
    return value;
 8004640:	88fb      	ldrh	r3, [r7, #6]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	200001a8 	.word	0x200001a8
 8004650:	20000028 	.word	0x20000028

08004654 <_Z18OD_LedCommands_sett>:
#endif
#ifndef OD_LedCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_LedCommands_set(const uint16_t value) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_LedCommands, portMAX_DELAY);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <_Z18OD_LedCommands_sett+0x30>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f04f 31ff 	mov.w	r1, #4294967295
 8004666:	4618      	mov	r0, r3
 8004668:	f010 fe55 	bl	8015316 <osMutexAcquire>
    OD_LedCommands = value;
 800466c:	4a06      	ldr	r2, [pc, #24]	; (8004688 <_Z18OD_LedCommands_sett+0x34>)
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_LedCommands);
 8004672:	4b04      	ldr	r3, [pc, #16]	; (8004684 <_Z18OD_LedCommands_sett+0x30>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f010 fe98 	bl	80153ac <osMutexRelease>
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200001a8 	.word	0x200001a8
 8004688:	20000028 	.word	0x20000028

0800468c <_Z25OD_CoolingPumpEnabled_getv>:
#endif

#ifndef OD_CoolingPumpEnabled_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CoolingPumpEnabled_get() {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPumpEnabled, portMAX_DELAY);
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <_Z25OD_CoolingPumpEnabled_getv+0x30>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f04f 31ff 	mov.w	r1, #4294967295
 800469a:	4618      	mov	r0, r3
 800469c:	f010 fe3b 	bl	8015316 <osMutexAcquire>
    uint8_t value = OD_CoolingPumpEnabled;
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <_Z25OD_CoolingPumpEnabled_getv+0x34>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CoolingPumpEnabled);
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <_Z25OD_CoolingPumpEnabled_getv+0x30>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f010 fe7e 	bl	80153ac <osMutexRelease>
    return value;
 80046b0:	79fb      	ldrb	r3, [r7, #7]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200001ac 	.word	0x200001ac
 80046c0:	2000002a 	.word	0x2000002a

080046c4 <_Z25OD_CoolingPumpEnabled_seth>:
#endif
#ifndef OD_CoolingPumpEnabled_SET_OVERWRITE
void WEAK_SYMBOL OD_CoolingPumpEnabled_set(const uint8_t value) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CoolingPumpEnabled, portMAX_DELAY);
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <_Z25OD_CoolingPumpEnabled_seth+0x30>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f04f 31ff 	mov.w	r1, #4294967295
 80046d6:	4618      	mov	r0, r3
 80046d8:	f010 fe1d 	bl	8015316 <osMutexAcquire>
    OD_CoolingPumpEnabled = value;
 80046dc:	4a06      	ldr	r2, [pc, #24]	; (80046f8 <_Z25OD_CoolingPumpEnabled_seth+0x34>)
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CoolingPumpEnabled);
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <_Z25OD_CoolingPumpEnabled_seth+0x30>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f010 fe60 	bl	80153ac <osMutexRelease>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	200001ac 	.word	0x200001ac
 80046f8:	2000002a 	.word	0x2000002a

080046fc <_Z17sendOdEntriesTaskPv>:
    0x902,    0xA00,    0xA02,    0xB00 
};
constexpr uint16_t NUMBER_OF_READABLE_SDO_IDS = 48;
extern RNG_HandleTypeDef hrng;

void sendOdEntriesTask(void *pvParameters) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    // Delay for random amount so that not all nodes send exactly at the same time
    uint32_t randomDelayMs;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomDelayMs);
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	4619      	mov	r1, r3
 800470a:	481f      	ldr	r0, [pc, #124]	; (8004788 <_Z17sendOdEntriesTaskPv+0x8c>)
 800470c:	f00e f8ac 	bl	8012868 <HAL_RNG_GenerateRandomNumber>
    randomDelayMs = randomDelayMs & 0xFF;   // Use only lower byte, so delay will be 255ms at maximum
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	60fb      	str	r3, [r7, #12]
    osDelay(pdMS_TO_TICKS(randomDelayMs));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	4a1a      	ldr	r2, [pc, #104]	; (800478c <_Z17sendOdEntriesTaskPv+0x90>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	4618      	mov	r0, r3
 800472a:	f010 fd53 	bl	80151d4 <osDelay>

    uint16_t currentSdoListPos = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	82fb      	strh	r3, [r7, #22]

    while(1) {
        uint16_t delayInterval = OD_OdEntrySendInterval_get();
 8004732:	f7ff facb 	bl	8003ccc <_Z26OD_OdEntrySendInterval_getv>
 8004736:	4603      	mov	r3, r0
 8004738:	82bb      	strh	r3, [r7, #20]
        if(delayInterval >= 5) {    // Periodically sending of all readable OD entries is enabled
 800473a:	8abb      	ldrh	r3, [r7, #20]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d91d      	bls.n	800477c <_Z17sendOdEntriesTaskPv+0x80>
            uint16_t sdoId = READABLE_SDO_IDS[currentSdoListPos];
 8004740:	8afb      	ldrh	r3, [r7, #22]
 8004742:	4a13      	ldr	r2, [pc, #76]	; (8004790 <_Z17sendOdEntriesTaskPv+0x94>)
 8004744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004748:	827b      	strh	r3, [r7, #18]

            currentSdoListPos++;
 800474a:	8afb      	ldrh	r3, [r7, #22]
 800474c:	3301      	adds	r3, #1
 800474e:	82fb      	strh	r3, [r7, #22]
            if (currentSdoListPos >= NUMBER_OF_READABLE_SDO_IDS) {
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	2b2f      	cmp	r3, #47	; 0x2f
 8004754:	d901      	bls.n	800475a <_Z17sendOdEntriesTaskPv+0x5e>
                currentSdoListPos = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	82fb      	strh	r3, [r7, #22]
            }

            handleSDORequestDownloadBySDOID(sdoId);
 800475a:	8a7b      	ldrh	r3, [r7, #18]
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe f847 	bl	80027f0 <_Z31handleSDORequestDownloadBySDOIDt>

            osDelay(pdMS_TO_TICKS(delayInterval));
 8004762:	8abb      	ldrh	r3, [r7, #20]
 8004764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004768:	fb02 f303 	mul.w	r3, r2, r3
 800476c:	4a07      	ldr	r2, [pc, #28]	; (800478c <_Z17sendOdEntriesTaskPv+0x90>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	4618      	mov	r0, r3
 8004776:	f010 fd2d 	bl	80151d4 <osDelay>
 800477a:	e7da      	b.n	8004732 <_Z17sendOdEntriesTaskPv+0x36>

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
 800477c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004780:	f010 fd28 	bl	80151d4 <osDelay>
        }
    }
 8004784:	e7d5      	b.n	8004732 <_Z17sendOdEntriesTaskPv+0x36>
 8004786:	bf00      	nop
 8004788:	20002e8c 	.word	0x20002e8c
 800478c:	10624dd3 	.word	0x10624dd3
 8004790:	0801c150 	.word	0x0801c150

08004794 <_ZN3can7MessageINS_8messages16PDU_SDO_Req_DownEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f103 0208 	add.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3310      	adds	r3, #16
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7fc f997 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 80047ae:	4603      	mov	r3, r0
        }
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f103 0008 	add.w	r0, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f103 0110 	add.w	r1, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	f7fd ff83 	bl	80026e0 <_ZN3can7signals13PDU_OD_NodeID3setERyS2_Rhh>
        }
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f103 0008 	add.w	r0, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f103 0110 	add.w	r1, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	1d1a      	adds	r2, r3, #4
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f7fd ff3b 	bl	800267a <_ZN3can7signals17PDU_OD_NodeStatus3setERyS2_Rhh>
        }
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f103 0008 	add.w	r0, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f103 0110 	add.w	r1, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	f7fd fef8 	bl	800261e <_ZN3can7signals22PDU_OD_ProtocolVersion3setERyS2_Rht>
        }
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 0008 	add.w	r0, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f103 0110 	add.w	r1, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	1d1a      	adds	r2, r3, #4
 8004852:	887b      	ldrh	r3, [r7, #2]
 8004854:	f7fd feb5 	bl	80025c2 <_ZN3can7signals19PDU_OD_StackVersion3setERyS2_Rht>
        }
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals17PDU_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 0008 	add.w	r0, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f103 0110 	add.w	r1, r3, #16
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	f7fd fe72 	bl	8002566 <_ZN3can7signals17PDU_OD_DbcVersion3setERyS2_Rht>
        }
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals24PDU_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f103 0008 	add.w	r0, r3, #8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 0110 	add.w	r1, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	f7fd fe0b 	bl	80024c2 <_ZN3can7signals24PDU_OD_HeartbeatInterval3setERyS2_Rht>
        }
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals21PDU_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f103 0008 	add.w	r0, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 0110 	add.w	r1, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1d1a      	adds	r2, r3, #4
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f7fd fd9f 	bl	8002414 <_ZN3can7signals21PDU_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f103 0008 	add.w	r0, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f103 0110 	add.w	r1, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1d1a      	adds	r2, r3, #4
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	f7fd fd38 	bl	8002370 <_ZN3can7signals26PDU_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f103 0008 	add.w	r0, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0110 	add.w	r1, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	ed97 0a00 	vldr	s0, [r7]
 8004928:	461a      	mov	r2, r3
 800492a:	f7fd fcc3 	bl	80022b4 <_ZN3can7signals15PDU_OD_CpuUsage3setERyS2_Rhf>
        }
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f103 0008 	add.w	r0, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 0110 	add.w	r1, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f7fd fc77 	bl	8002244 <_ZN3can7signals14PDU_OD_MemFree3setERyS2_Rhm>
        }
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f103 0008 	add.w	r0, r3, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f103 0110 	add.w	r1, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	ed97 0a00 	vldr	s0, [r7]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fd fbfe 	bl	8002180 <_ZN3can7signals16PDU_OD_BoardTemp3setERyS2_Rhf>
        }
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f103 0008 	add.w	r0, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f103 0110 	add.w	r1, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	ed97 0a00 	vldr	s0, [r7]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f7fd fb8d 	bl	80020cc <_ZN3can7signals19PDU_OD_InputVoltage3setERyS2_Rhf>
        }
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals14PDU_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f103 0008 	add.w	r0, r3, #8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0110 	add.w	r1, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1d1a      	adds	r2, r3, #4
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f7fd fb3f 	bl	8002058 <_ZN3can7signals14PDU_OD_runtime3setERyS2_Rhm>
        }
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals12PDU_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f103 0008 	add.w	r0, r3, #8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 0110 	add.w	r1, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1d1a      	adds	r2, r3, #4
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f7fd faf6 	bl	8001ff0 <_ZN3can7signals12PDU_OD_SdcIn3setERyS2_Rhh>
        }
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals13PDU_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0008 	add.w	r0, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f103 0110 	add.w	r1, r3, #16
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1d1a      	adds	r2, r3, #4
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	f7fd faad 	bl	8001f88 <_ZN3can7signals13PDU_OD_SdcOut3setERyS2_Rhh>
        }
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a36:	b590      	push	{r4, r7, lr}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f103 0008 	add.w	r0, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f103 0110 	add.w	r1, r3, #16
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1d1c      	adds	r4, r3, #4
 8004a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a56:	e9cd 2300 	strd	r2, r3, [sp]
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	f7fd fa5b 	bl	8001f16 <_ZN3can7signals15PDU_OD_ChipUID13setERyS2_Rhy>
        }
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}

08004a68 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals15PDU_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f103 0008 	add.w	r0, r3, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f103 0110 	add.w	r1, r3, #16
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1d1c      	adds	r4, r3, #4
 8004a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a88:	e9cd 2300 	strd	r2, r3, [sp]
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	f7fd fa09 	bl	8001ea4 <_ZN3can7signals15PDU_OD_ChipUID23setERyS2_Rhy>
        }
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}

08004a9a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f103 0008 	add.w	r0, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0110 	add.w	r1, r3, #16
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f7fd f9bd 	bl	8001e34 <_ZN3can7signals16PDU_OD_BuildDate3setERyS2_Rhm>
        }
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f103 0008 	add.w	r0, r3, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f103 0110 	add.w	r1, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f7fd f96f 	bl	8001dc0 <_ZN3can7signals16PDU_OD_BuildTime3setERyS2_Rhm>
        }
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f103 0008 	add.w	r0, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f103 0110 	add.w	r1, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f7fd f926 	bl	8001d58 <_ZN3can7signals20PDU_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f103 0008 	add.w	r0, r3, #8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f103 0110 	add.w	r1, r3, #16
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	f7fd f8dd 	bl	8001cf0 <_ZN3can7signals20PDU_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f103 0008 	add.w	r0, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f103 0110 	add.w	r1, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f7fd f891 	bl	8001c80 <_ZN3can7signals25PDU_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f103 0008 	add.w	r0, r3, #8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f103 0110 	add.w	r1, r3, #16
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f7fd f820 	bl	8001bc8 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f103 0008 	add.w	r0, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f103 0110 	add.w	r1, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	1d1a      	adds	r2, r3, #4
 8004bac:	887b      	ldrh	r3, [r7, #2]
 8004bae:	f7fc ffa9 	bl	8001b04 <_ZN3can7signals20PDU_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f103 0008 	add.w	r0, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f103 0110 	add.w	r1, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1d1a      	adds	r2, r3, #4
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	f7fc ff60 	bl	8001a9c <_ZN3can7signals18PDU_OD_CAN1_Status3setERyS2_Rhh>
        }
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f103 0008 	add.w	r0, r3, #8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0110 	add.w	r1, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1d1a      	adds	r2, r3, #4
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f7fc ff12 	bl	8001a28 <_ZN3can7signals31PDU_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 0008 	add.w	r0, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 0110 	add.w	r1, r3, #16
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f7fc fec9 	bl	80019c0 <_ZN3can7signals23PDU_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f103 0008 	add.w	r0, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f103 0110 	add.w	r1, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f7fc fe7b 	bl	800194c <_ZN3can7signals29PDU_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f103 0008 	add.w	r0, r3, #8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0110 	add.w	r1, r3, #16
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f7fc fe32 	bl	80018e4 <_ZN3can7signals20PDU_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0008 	add.w	r0, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f103 0110 	add.w	r1, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	f7fc fde9 	bl	800187c <_ZN3can7signals20PDU_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f103 0008 	add.w	r0, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f103 0110 	add.w	r1, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f7fc fd9d 	bl	800180c <_ZN3can7signals25PDU_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f103 0008 	add.w	r0, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0110 	add.w	r1, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	f7fc fd2c 	bl	8001754 <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals20PDU_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f103 0008 	add.w	r0, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f103 0110 	add.w	r1, r3, #16
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1d1a      	adds	r2, r3, #4
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	f7fc fcb5 	bl	8001690 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 0008 	add.w	r0, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f103 0110 	add.w	r1, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f7fc fc6c 	bl	8001628 <_ZN3can7signals18PDU_OD_CAN2_Status3setERyS2_Rhh>
        }
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals31PDU_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f103 0008 	add.w	r0, r3, #8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f103 0110 	add.w	r1, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f7fc fc1e 	bl	80015b4 <_ZN3can7signals31PDU_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f103 0008 	add.w	r0, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f103 0110 	add.w	r1, r3, #16
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f7fc fbd5 	bl	800154c <_ZN3can7signals23PDU_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals29PDU_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f103 0008 	add.w	r0, r3, #8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f103 0110 	add.w	r1, r3, #16
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f7fc fb87 	bl	80014d8 <_ZN3can7signals29PDU_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_batterVoltageLowEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f103 0008 	add.w	r0, r3, #8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0110 	add.w	r1, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	ed97 0a00 	vldr	s0, [r7]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fc fae6 	bl	80013c4 <_ZN3can7signals23PDU_OD_batterVoltageLow3setERyS2_Rhf>
        }
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals28PDU_OD_batterVoltageCriticalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f103 0008 	add.w	r0, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f103 0110 	add.w	r1, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	ed97 0a00 	vldr	s0, [r7]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f7fc fa43 	bl	80012ac <_ZN3can7signals28PDU_OD_batterVoltageCritical3setERyS2_Rhf>
        }
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals19PDU_OD_overTempWarnEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f103 0008 	add.w	r0, r3, #8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f103 0110 	add.w	r1, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	ed97 0a00 	vldr	s0, [r7]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7fc f9a0 	bl	8001194 <_ZN3can7signals19PDU_OD_overTempWarn3setERyS2_Rhf>
        }
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_overTempCriticalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f103 0008 	add.w	r0, r3, #8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f103 0110 	add.w	r1, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	ed97 0a00 	vldr	s0, [r7]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f7fc f8fd 	bl	800107c <_ZN3can7signals23PDU_OD_overTempCritical3setERyS2_Rhf>
        }
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_batteryOvercurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f103 0008 	add.w	r0, r3, #8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f103 0110 	add.w	r1, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	ed97 0a00 	vldr	s0, [r7]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fc f85c 	bl	8000f68 <_ZN3can7signals25PDU_OD_batteryOvercurrent3setERyS2_Rhf>
        }
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals26PDU_OD_currentReadIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f103 0008 	add.w	r0, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f103 0110 	add.w	r1, r3, #16
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	f7fb fff2 	bl	8000ebe <_ZN3can7signals26PDU_OD_currentReadInterval3setERyS2_Rht>
        }
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_statusSendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f103 0008 	add.w	r0, r3, #8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f103 0110 	add.w	r1, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	1d1a      	adds	r2, r3, #4
 8004efe:	887b      	ldrh	r3, [r7, #2]
 8004f00:	f7fb ff87 	bl	8000e12 <_ZN3can7signals25PDU_OD_statusSendInterval3setERyS2_Rht>
        }
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals22PDU_OD_watchdogTimeoutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0008 	add.w	r0, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f103 0110 	add.w	r1, r3, #16
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	887b      	ldrh	r3, [r7, #2]
 8004f2a:	f7fb ff1c 	bl	8000d66 <_ZN3can7signals22PDU_OD_watchdogTimeout3setERyS2_Rht>
        }
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals23PDU_OD_projectXXEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f103 0008 	add.w	r0, r3, #8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f103 0110 	add.w	r1, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	1d1a      	adds	r2, r3, #4
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	f7fb feae 	bl	8000cb4 <_ZN3can7signals23PDU_OD_projectXXEnabled3setERyS2_Rhh>
        }
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals18PDU_OD_LedCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0008 	add.w	r0, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f103 0110 	add.w	r1, r3, #16
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	1d1a      	adds	r2, r3, #4
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	f7fb fe43 	bl	8000c08 <_ZN3can7signals18PDU_OD_LedCommands3setERyS2_Rht>
        }
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals25PDU_OD_CoolingPumpEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f103 0008 	add.w	r0, r3, #8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f103 0110 	add.w	r1, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1d1a      	adds	r2, r3, #4
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	f7fb fdd5 	bl	8000b56 <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3setERyS2_Rhh>
        }
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals10PDU_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f103 0008 	add.w	r0, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f103 0110 	add.w	r1, r3, #16
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1d1a      	adds	r2, r3, #4
 8004fd0:	887b      	ldrh	r3, [r7, #2]
 8004fd2:	f7fb fd5b 	bl	8000a8c <_ZN3can7signals10PDU_SDO_ID3setERyS2_Rht>
        }
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZN3can7MessageINS_8messages12PDU_SDO_RespEE3setINS_7signals16PDU_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f103 0008 	add.w	r0, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f103 0110 	add.w	r1, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f7fb fd81 	bl	8000b02 <_ZN3can7signals16PDU_SDO_RespCode3setERyS2_Rhh>
        }
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals10PDU_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f103 0208 	add.w	r2, r3, #8
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3310      	adds	r3, #16
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fb fd5d 	bl	8000adc <_ZN3can7signals10PDU_SDO_ID3getERKyS3_>
 8005022:	4603      	mov	r3, r0
        }
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals24PDU_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3310      	adds	r3, #16
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fd fa6c 	bl	800251e <_ZN3can7signals24PDU_OD_HeartbeatInterval3getERKyS3_>
 8005046:	4603      	mov	r3, r0
        }
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals21PDU_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f103 0208 	add.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3310      	adds	r3, #16
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fd fa08 	bl	800247a <_ZN3can7signals21PDU_OD_SendOdOnBootup3getERKyS3_>
 800506a:	4603      	mov	r3, r0
        }
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f103 0208 	add.w	r2, r3, #8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3310      	adds	r3, #16
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fd f99f 	bl	80023cc <_ZN3can7signals26PDU_OD_OdEntrySendInterval3getERKyS3_>
 800508e:	4603      	mov	r3, r0
        }
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f103 0208 	add.w	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3310      	adds	r3, #16
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f7fc fdbf 	bl	8001c30 <_ZN3can7signals26PDU_OD_CAN1_autoErrorReset3getERKyS3_>
 80050b2:	4603      	mov	r3, r0
        }
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f103 0208 	add.w	r2, r3, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3310      	adds	r3, #16
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fc fd52 	bl	8001b7a <_ZN3can7signals20PDU_OD_CAN1_Baudrate3getERKyS3_>
 80050d6:	4603      	mov	r3, r0
        }
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3310      	adds	r3, #16
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f7fc fb61 	bl	80017bc <_ZN3can7signals26PDU_OD_CAN2_autoErrorReset3getERKyS3_>
 80050fa:	4603      	mov	r3, r0
        }
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals20PDU_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f103 0208 	add.w	r2, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3310      	adds	r3, #16
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7fc faf4 	bl	8001706 <_ZN3can7signals20PDU_OD_CAN2_Baudrate3getERKyS3_>
 800511e:	4603      	mov	r3, r0
        }
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_batterVoltageLowEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 0208 	add.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3310      	adds	r3, #16
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f7fc f99b 	bl	8001478 <_ZN3can7signals23PDU_OD_batterVoltageLow3getERKyS3_>
 8005142:	eef0 7a40 	vmov.f32	s15, s0
        }
 8005146:	eeb0 0a67 	vmov.f32	s0, s15
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals28PDU_OD_batterVoltageCriticalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 0208 	add.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3310      	adds	r3, #16
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f7fc f8fb 	bl	8001360 <_ZN3can7signals28PDU_OD_batterVoltageCritical3getERKyS3_>
 800516a:	eef0 7a40 	vmov.f32	s15, s0
        }
 800516e:	eeb0 0a67 	vmov.f32	s0, s15
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals19PDU_OD_overTempWarnEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f103 0208 	add.w	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3310      	adds	r3, #16
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fc f85b 	bl	8001248 <_ZN3can7signals19PDU_OD_overTempWarn3getERKyS3_>
 8005192:	eef0 7a40 	vmov.f32	s15, s0
        }
 8005196:	eeb0 0a67 	vmov.f32	s0, s15
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_overTempCriticalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f103 0208 	add.w	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3310      	adds	r3, #16
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fb ffbb 	bl	8001130 <_ZN3can7signals23PDU_OD_overTempCritical3getERKyS3_>
 80051ba:	eef0 7a40 	vmov.f32	s15, s0
        }
 80051be:	eeb0 0a67 	vmov.f32	s0, s15
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_batteryOvercurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f103 0208 	add.w	r2, r3, #8
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3310      	adds	r3, #16
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7fb ff1d 	bl	800101c <_ZN3can7signals25PDU_OD_batteryOvercurrent3getERKyS3_>
 80051e2:	eef0 7a40 	vmov.f32	s15, s0
        }
 80051e6:	eeb0 0a67 	vmov.f32	s0, s15
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals26PDU_OD_currentReadIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f103 0208 	add.w	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3310      	adds	r3, #16
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fb fe89 	bl	8000f1c <_ZN3can7signals26PDU_OD_currentReadInterval3getERKyS3_>
 800520a:	4603      	mov	r3, r0
        }
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_statusSendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3310      	adds	r3, #16
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f7fb fe21 	bl	8000e70 <_ZN3can7signals25PDU_OD_statusSendInterval3getERKyS3_>
 800522e:	4603      	mov	r3, r0
        }
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals22PDU_OD_watchdogTimeoutEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3310      	adds	r3, #16
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7fb fdb9 	bl	8000dc4 <_ZN3can7signals22PDU_OD_watchdogTimeout3getERKyS3_>
 8005252:	4603      	mov	r3, r0
        }
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals23PDU_OD_projectXXEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f103 0208 	add.w	r2, r3, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3310      	adds	r3, #16
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fb fd53 	bl	8000d1c <_ZN3can7signals23PDU_OD_projectXXEnabled3getERKyS3_>
 8005276:	4603      	mov	r3, r0
        }
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals18PDU_OD_LedCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f103 0208 	add.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3310      	adds	r3, #16
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7fb fce6 	bl	8000c66 <_ZN3can7signals18PDU_OD_LedCommands3getERKyS3_>
 800529a:	4603      	mov	r3, r0
        }
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <_ZN3can7MessageINS_8messages14PDU_SDO_Req_UpEE3getINS_7signals25PDU_OD_CoolingPumpEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f103 0208 	add.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3310      	adds	r3, #16
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fb fc80 	bl	8000bbe <_ZN3can7signals25PDU_OD_CoolingPumpEnabled3getERKyS3_>
 80052be:	4603      	mov	r3, r0
        }
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_Z41__static_initialization_and_destruction_0ii>:
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	f040 8126 	bne.w	8005526 <_Z41__static_initialization_and_destruction_0ii+0x25e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052e0:	4293      	cmp	r3, r2
 80052e2:	f040 8120 	bne.w	8005526 <_Z41__static_initialization_and_destruction_0ii+0x25e>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f00f ff8f 	bl	801520a <osMutexNew>
 80052ec:	4603      	mov	r3, r0
 80052ee:	4a90      	ldr	r2, [pc, #576]	; (8005530 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80052f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80052f2:	2000      	movs	r0, #0
 80052f4:	f00f ff89 	bl	801520a <osMutexNew>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4a8e      	ldr	r2, [pc, #568]	; (8005534 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80052fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 80052fe:	2000      	movs	r0, #0
 8005300:	f00f ff83 	bl	801520a <osMutexNew>
 8005304:	4603      	mov	r3, r0
 8005306:	4a8c      	ldr	r2, [pc, #560]	; (8005538 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005308:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 800530a:	2000      	movs	r0, #0
 800530c:	f00f ff7d 	bl	801520a <osMutexNew>
 8005310:	4603      	mov	r3, r0
 8005312:	4a8a      	ldr	r2, [pc, #552]	; (800553c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005314:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8005316:	2000      	movs	r0, #0
 8005318:	f00f ff77 	bl	801520a <osMutexNew>
 800531c:	4603      	mov	r3, r0
 800531e:	4a88      	ldr	r2, [pc, #544]	; (8005540 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005320:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8005322:	2000      	movs	r0, #0
 8005324:	f00f ff71 	bl	801520a <osMutexNew>
 8005328:	4603      	mov	r3, r0
 800532a:	4a86      	ldr	r2, [pc, #536]	; (8005544 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800532c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 800532e:	2000      	movs	r0, #0
 8005330:	f00f ff6b 	bl	801520a <osMutexNew>
 8005334:	4603      	mov	r3, r0
 8005336:	4a84      	ldr	r2, [pc, #528]	; (8005548 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005338:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 800533a:	2000      	movs	r0, #0
 800533c:	f00f ff65 	bl	801520a <osMutexNew>
 8005340:	4603      	mov	r3, r0
 8005342:	4a82      	ldr	r2, [pc, #520]	; (800554c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005344:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8005346:	2000      	movs	r0, #0
 8005348:	f00f ff5f 	bl	801520a <osMutexNew>
 800534c:	4603      	mov	r3, r0
 800534e:	4a80      	ldr	r2, [pc, #512]	; (8005550 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005350:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8005352:	2000      	movs	r0, #0
 8005354:	f00f ff59 	bl	801520a <osMutexNew>
 8005358:	4603      	mov	r3, r0
 800535a:	4a7e      	ldr	r2, [pc, #504]	; (8005554 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800535c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 800535e:	2000      	movs	r0, #0
 8005360:	f00f ff53 	bl	801520a <osMutexNew>
 8005364:	4603      	mov	r3, r0
 8005366:	4a7c      	ldr	r2, [pc, #496]	; (8005558 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005368:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 800536a:	2000      	movs	r0, #0
 800536c:	f00f ff4d 	bl	801520a <osMutexNew>
 8005370:	4603      	mov	r3, r0
 8005372:	4a7a      	ldr	r2, [pc, #488]	; (800555c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005374:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8005376:	2000      	movs	r0, #0
 8005378:	f00f ff47 	bl	801520a <osMutexNew>
 800537c:	4603      	mov	r3, r0
 800537e:	4a78      	ldr	r2, [pc, #480]	; (8005560 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005380:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8005382:	2000      	movs	r0, #0
 8005384:	f00f ff41 	bl	801520a <osMutexNew>
 8005388:	4603      	mov	r3, r0
 800538a:	4a76      	ldr	r2, [pc, #472]	; (8005564 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800538c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 800538e:	2000      	movs	r0, #0
 8005390:	f00f ff3b 	bl	801520a <osMutexNew>
 8005394:	4603      	mov	r3, r0
 8005396:	4a74      	ldr	r2, [pc, #464]	; (8005568 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005398:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 800539a:	2000      	movs	r0, #0
 800539c:	f00f ff35 	bl	801520a <osMutexNew>
 80053a0:	4603      	mov	r3, r0
 80053a2:	4a72      	ldr	r2, [pc, #456]	; (800556c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80053a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 80053a6:	2000      	movs	r0, #0
 80053a8:	f00f ff2f 	bl	801520a <osMutexNew>
 80053ac:	4603      	mov	r3, r0
 80053ae:	4a70      	ldr	r2, [pc, #448]	; (8005570 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80053b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f00f ff29 	bl	801520a <osMutexNew>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a6e      	ldr	r2, [pc, #440]	; (8005574 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80053bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 80053be:	2000      	movs	r0, #0
 80053c0:	f00f ff23 	bl	801520a <osMutexNew>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4a6c      	ldr	r2, [pc, #432]	; (8005578 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80053c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f00f ff1d 	bl	801520a <osMutexNew>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4a6a      	ldr	r2, [pc, #424]	; (800557c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80053d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f00f ff17 	bl	801520a <osMutexNew>
 80053dc:	4603      	mov	r3, r0
 80053de:	4a68      	ldr	r2, [pc, #416]	; (8005580 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80053e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 80053e2:	2000      	movs	r0, #0
 80053e4:	f00f ff11 	bl	801520a <osMutexNew>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4a66      	ldr	r2, [pc, #408]	; (8005584 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80053ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80053ee:	2000      	movs	r0, #0
 80053f0:	f00f ff0b 	bl	801520a <osMutexNew>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a64      	ldr	r2, [pc, #400]	; (8005588 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80053f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80053fa:	2000      	movs	r0, #0
 80053fc:	f00f ff05 	bl	801520a <osMutexNew>
 8005400:	4603      	mov	r3, r0
 8005402:	4a62      	ldr	r2, [pc, #392]	; (800558c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8005404:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8005406:	2000      	movs	r0, #0
 8005408:	f00f feff 	bl	801520a <osMutexNew>
 800540c:	4603      	mov	r3, r0
 800540e:	4a60      	ldr	r2, [pc, #384]	; (8005590 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005410:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8005412:	2000      	movs	r0, #0
 8005414:	f00f fef9 	bl	801520a <osMutexNew>
 8005418:	4603      	mov	r3, r0
 800541a:	4a5e      	ldr	r2, [pc, #376]	; (8005594 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800541c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 800541e:	2000      	movs	r0, #0
 8005420:	f00f fef3 	bl	801520a <osMutexNew>
 8005424:	4603      	mov	r3, r0
 8005426:	4a5c      	ldr	r2, [pc, #368]	; (8005598 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8005428:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 800542a:	2000      	movs	r0, #0
 800542c:	f00f feed 	bl	801520a <osMutexNew>
 8005430:	4603      	mov	r3, r0
 8005432:	4a5a      	ldr	r2, [pc, #360]	; (800559c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8005434:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8005436:	2000      	movs	r0, #0
 8005438:	f00f fee7 	bl	801520a <osMutexNew>
 800543c:	4603      	mov	r3, r0
 800543e:	4a58      	ldr	r2, [pc, #352]	; (80055a0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8005440:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8005442:	2000      	movs	r0, #0
 8005444:	f00f fee1 	bl	801520a <osMutexNew>
 8005448:	4603      	mov	r3, r0
 800544a:	4a56      	ldr	r2, [pc, #344]	; (80055a4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800544c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 800544e:	2000      	movs	r0, #0
 8005450:	f00f fedb 	bl	801520a <osMutexNew>
 8005454:	4603      	mov	r3, r0
 8005456:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8005458:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 800545a:	2000      	movs	r0, #0
 800545c:	f00f fed5 	bl	801520a <osMutexNew>
 8005460:	4603      	mov	r3, r0
 8005462:	4a52      	ldr	r2, [pc, #328]	; (80055ac <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005464:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8005466:	2000      	movs	r0, #0
 8005468:	f00f fecf 	bl	801520a <osMutexNew>
 800546c:	4603      	mov	r3, r0
 800546e:	4a50      	ldr	r2, [pc, #320]	; (80055b0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8005470:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8005472:	2000      	movs	r0, #0
 8005474:	f00f fec9 	bl	801520a <osMutexNew>
 8005478:	4603      	mov	r3, r0
 800547a:	4a4e      	ldr	r2, [pc, #312]	; (80055b4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800547c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 800547e:	2000      	movs	r0, #0
 8005480:	f00f fec3 	bl	801520a <osMutexNew>
 8005484:	4603      	mov	r3, r0
 8005486:	4a4c      	ldr	r2, [pc, #304]	; (80055b8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8005488:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 800548a:	2000      	movs	r0, #0
 800548c:	f00f febd 	bl	801520a <osMutexNew>
 8005490:	4603      	mov	r3, r0
 8005492:	4a4a      	ldr	r2, [pc, #296]	; (80055bc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8005494:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8005496:	2000      	movs	r0, #0
 8005498:	f00f feb7 	bl	801520a <osMutexNew>
 800549c:	4603      	mov	r3, r0
 800549e:	4a48      	ldr	r2, [pc, #288]	; (80055c0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80054a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batterVoltageLow         = osMutexNew(NULL);
 80054a2:	2000      	movs	r0, #0
 80054a4:	f00f feb1 	bl	801520a <osMutexNew>
 80054a8:	4603      	mov	r3, r0
 80054aa:	4a46      	ldr	r2, [pc, #280]	; (80055c4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80054ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batterVoltageCritical    = osMutexNew(NULL);
 80054ae:	2000      	movs	r0, #0
 80054b0:	f00f feab 	bl	801520a <osMutexNew>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4a44      	ldr	r2, [pc, #272]	; (80055c8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80054b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_overTempWarn             = osMutexNew(NULL);
 80054ba:	2000      	movs	r0, #0
 80054bc:	f00f fea5 	bl	801520a <osMutexNew>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4a42      	ldr	r2, [pc, #264]	; (80055cc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80054c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_overTempCritical         = osMutexNew(NULL);
 80054c6:	2000      	movs	r0, #0
 80054c8:	f00f fe9f 	bl	801520a <osMutexNew>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4a40      	ldr	r2, [pc, #256]	; (80055d0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80054d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_batteryOvercurrent       = osMutexNew(NULL);
 80054d2:	2000      	movs	r0, #0
 80054d4:	f00f fe99 	bl	801520a <osMutexNew>
 80054d8:	4603      	mov	r3, r0
 80054da:	4a3e      	ldr	r2, [pc, #248]	; (80055d4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80054dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_currentReadInterval      = osMutexNew(NULL);
 80054de:	2000      	movs	r0, #0
 80054e0:	f00f fe93 	bl	801520a <osMutexNew>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4a3c      	ldr	r2, [pc, #240]	; (80055d8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80054e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_statusSendInterval       = osMutexNew(NULL);
 80054ea:	2000      	movs	r0, #0
 80054ec:	f00f fe8d 	bl	801520a <osMutexNew>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4a3a      	ldr	r2, [pc, #232]	; (80055dc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80054f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_watchdogTimeout          = osMutexNew(NULL);
 80054f6:	2000      	movs	r0, #0
 80054f8:	f00f fe87 	bl	801520a <osMutexNew>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4a38      	ldr	r2, [pc, #224]	; (80055e0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8005500:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_projectXXEnabled         = osMutexNew(NULL);
 8005502:	2000      	movs	r0, #0
 8005504:	f00f fe81 	bl	801520a <osMutexNew>
 8005508:	4603      	mov	r3, r0
 800550a:	4a36      	ldr	r2, [pc, #216]	; (80055e4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800550c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_LedCommands              = osMutexNew(NULL);
 800550e:	2000      	movs	r0, #0
 8005510:	f00f fe7b 	bl	801520a <osMutexNew>
 8005514:	4603      	mov	r3, r0
 8005516:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005518:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPumpEnabled       = osMutexNew(NULL);
 800551a:	2000      	movs	r0, #0
 800551c:	f00f fe75 	bl	801520a <osMutexNew>
 8005520:	4603      	mov	r3, r0
 8005522:	4a32      	ldr	r2, [pc, #200]	; (80055ec <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200000f0 	.word	0x200000f0
 8005534:	200000f4 	.word	0x200000f4
 8005538:	200000f8 	.word	0x200000f8
 800553c:	200000fc 	.word	0x200000fc
 8005540:	20000100 	.word	0x20000100
 8005544:	20000104 	.word	0x20000104
 8005548:	20000108 	.word	0x20000108
 800554c:	2000010c 	.word	0x2000010c
 8005550:	20000110 	.word	0x20000110
 8005554:	20000114 	.word	0x20000114
 8005558:	20000118 	.word	0x20000118
 800555c:	2000011c 	.word	0x2000011c
 8005560:	20000120 	.word	0x20000120
 8005564:	20000124 	.word	0x20000124
 8005568:	20000128 	.word	0x20000128
 800556c:	2000012c 	.word	0x2000012c
 8005570:	20000130 	.word	0x20000130
 8005574:	20000134 	.word	0x20000134
 8005578:	20000138 	.word	0x20000138
 800557c:	2000013c 	.word	0x2000013c
 8005580:	20000140 	.word	0x20000140
 8005584:	20000144 	.word	0x20000144
 8005588:	20000148 	.word	0x20000148
 800558c:	2000014c 	.word	0x2000014c
 8005590:	20000150 	.word	0x20000150
 8005594:	20000154 	.word	0x20000154
 8005598:	20000158 	.word	0x20000158
 800559c:	2000015c 	.word	0x2000015c
 80055a0:	20000160 	.word	0x20000160
 80055a4:	20000164 	.word	0x20000164
 80055a8:	20000168 	.word	0x20000168
 80055ac:	2000016c 	.word	0x2000016c
 80055b0:	20000170 	.word	0x20000170
 80055b4:	20000174 	.word	0x20000174
 80055b8:	20000178 	.word	0x20000178
 80055bc:	2000017c 	.word	0x2000017c
 80055c0:	20000180 	.word	0x20000180
 80055c4:	20000184 	.word	0x20000184
 80055c8:	20000188 	.word	0x20000188
 80055cc:	2000018c 	.word	0x2000018c
 80055d0:	20000190 	.word	0x20000190
 80055d4:	20000194 	.word	0x20000194
 80055d8:	20000198 	.word	0x20000198
 80055dc:	2000019c 	.word	0x2000019c
 80055e0:	200001a0 	.word	0x200001a0
 80055e4:	200001a4 	.word	0x200001a4
 80055e8:	200001a8 	.word	0x200001a8
 80055ec:	200001ac 	.word	0x200001ac

080055f0 <_GLOBAL__sub_I_OD_NodeID>:
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80055f8:	2001      	movs	r0, #1
 80055fa:	f7ff fe65 	bl	80052c8 <_Z41__static_initialization_and_destruction_0ii>
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_Z13OD_NodeID_getv>:
#include "TaskManager.hpp"
#include "canzero_defines.h"


// Get CANzero Node-ID of this node
uint8_t OD_NodeID_get() {
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
	return CANZERO_NODE_ID;
 8005604:	231a      	movs	r3, #26
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <_Z22OD_ProtocolVersion_getv>:

// Version of software components. Currently only the DBC version is implemented
uint16_t OD_ProtocolVersion_get() {
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	return 1;
 8005614:	2301      	movs	r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <_Z19OD_StackVersion_getv>:
uint16_t OD_StackVersion_get() {
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	return 1;
 8005624:	2301      	movs	r3, #1
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <_Z17OD_DbcVersion_getv>:
uint16_t OD_DbcVersion_get() {
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
	return can::CANzero_DBCVersion;
 8005634:	23b1      	movs	r3, #177	; 0xb1
}
 8005636:	4618      	mov	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <_Z21OD_SendOdOnBootup_seth>:

void OD_SendOdOnBootup_set(const uint8_t value){
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <_Z21OD_SendOdOnBootup_seth+0x3c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f04f 31ff 	mov.w	r1, #4294967295
 8005652:	4618      	mov	r0, r3
 8005654:	f00f fe5f 	bl	8015316 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <_Z21OD_SendOdOnBootup_seth+0x40>)
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	7013      	strb	r3, [r2, #0]
    flash_write(0x080E00000,value);
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	4619      	mov	r1, r3
 8005662:	4808      	ldr	r0, [pc, #32]	; (8005684 <_Z21OD_SendOdOnBootup_seth+0x44>)
 8005664:	f000 ffe2 	bl	800662c <_Z11flash_writemm>
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <_Z21OD_SendOdOnBootup_seth+0x3c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f00f fe9d 	bl	80153ac <osMutexRelease>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000108 	.word	0x20000108
 8005680:	200000c5 	.word	0x200000c5
 8005684:	80e00000 	.word	0x80e00000

08005688 <_Z21OD_SendOdOnBootup_getv>:
uint8_t OD_SendOdOnBootup_get(){
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <_Z21OD_SendOdOnBootup_getv+0x34>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f04f 31ff 	mov.w	r1, #4294967295
 8005696:	4618      	mov	r0, r3
 8005698:	f00f fe3d 	bl	8015316 <osMutexAcquire>
    uint8_t value = flash_read(0x080E00000);
 800569c:	4808      	ldr	r0, [pc, #32]	; (80056c0 <_Z21OD_SendOdOnBootup_getv+0x38>)
 800569e:	f000 ffb9 	bl	8006614 <_Z10flash_readm>
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <_Z21OD_SendOdOnBootup_getv+0x34>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f00f fe7e 	bl	80153ac <osMutexRelease>
    return value;
 80056b0:	79fb      	ldrb	r3, [r7, #7]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000108 	.word	0x20000108
 80056c0:	80e00000 	.word	0x80e00000

080056c4 <_Z14OD_runtime_getv>:

// Runtime in milliseconds, will overflow after 49 days.
uint32_t OD_runtime_get(){
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <_Z14OD_runtime_getv+0x30>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f04f 31ff 	mov.w	r1, #4294967295
 80056d2:	4618      	mov	r0, r3
 80056d4:	f00f fe1f 	bl	8015316 <osMutexAcquire>
    uint32_t value = portGET_RUN_TIME_COUNTER_VALUE();
 80056d8:	f007 fb2a 	bl	800cd30 <getRunTimeCounterValue>
 80056dc:	6078      	str	r0, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <_Z14OD_runtime_getv+0x30>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f00f fe62 	bl	80153ac <osMutexRelease>
    return value;
 80056e8:	687b      	ldr	r3, [r7, #4]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000120 	.word	0x20000120

080056f8 <_Z12OD_SdcIn_getv>:

// Report the status of the SDC input and output of this node
uint8_t OD_SdcIn_get() {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SDC_IN_STATUS_GPIO_Port, SDC_IN_STATUS_Pin) == GPIO_PIN_SET;
 80056fc:	2108      	movs	r1, #8
 80056fe:	4805      	ldr	r0, [pc, #20]	; (8005714 <_Z12OD_SdcIn_getv+0x1c>)
 8005700:	f00c fb8e 	bl	8011e20 <HAL_GPIO_ReadPin>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	bf0c      	ite	eq
 800570a:	2301      	moveq	r3, #1
 800570c:	2300      	movne	r3, #0
 800570e:	b2db      	uxtb	r3, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40020c00 	.word	0x40020c00

08005718 <_Z13OD_SdcOut_getv>:
uint8_t OD_SdcOut_get() {
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SDC_OUT_STATUS_GPIO_Port, SDC_OUT_STATUS_Pin) == GPIO_PIN_SET;
 800571c:	2110      	movs	r1, #16
 800571e:	4805      	ldr	r0, [pc, #20]	; (8005734 <_Z13OD_SdcOut_getv+0x1c>)
 8005720:	f00c fb7e 	bl	8011e20 <HAL_GPIO_ReadPin>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40020c00 	.word	0x40020c00

08005738 <_Z15OD_ChipUID1_getv>:

// 96-bit unique ID of the STM32 chip
uint64_t OD_ChipUID1_get() {
 8005738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
	return static_cast<uint64_t>(HAL_GetUIDw0()) + (static_cast<uint64_t>(HAL_GetUIDw1() & 0xFFFFull) << 32);
 8005740:	f009 ffd8 	bl	800f6f4 <HAL_GetUIDw0>
 8005744:	4603      	mov	r3, r0
 8005746:	2200      	movs	r2, #0
 8005748:	4698      	mov	r8, r3
 800574a:	4691      	mov	r9, r2
 800574c:	f009 ffde 	bl	800f70c <HAL_GetUIDw1>
 8005750:	4603      	mov	r3, r0
 8005752:	2200      	movs	r2, #0
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	000b      	movs	r3, r1
 8005764:	2200      	movs	r2, #0
 8005766:	2400      	movs	r4, #0
 8005768:	b29d      	uxth	r5, r3
 800576a:	eb18 0a04 	adds.w	sl, r8, r4
 800576e:	eb49 0b05 	adc.w	fp, r9, r5
 8005772:	4652      	mov	r2, sl
 8005774:	465b      	mov	r3, fp
}
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005782 <_Z15OD_ChipUID2_getv>:
uint64_t OD_ChipUID2_get() {
 8005782:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
	return static_cast<uint64_t>(HAL_GetUIDw1() & 0xFFFF0000ull) + (static_cast<uint64_t>(HAL_GetUIDw2()) << 16);
 800578a:	f009 ffbf 	bl	800f70c <HAL_GetUIDw1>
 800578e:	4603      	mov	r3, r0
 8005790:	2200      	movs	r2, #0
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	60fa      	str	r2, [r7, #12]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	0c1c      	lsrs	r4, r3, #16
 800579a:	0424      	lsls	r4, r4, #16
 800579c:	2500      	movs	r5, #0
 800579e:	f009 ffc1 	bl	800f724 <HAL_GetUIDw2>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2200      	movs	r2, #0
 80057a6:	469a      	mov	sl, r3
 80057a8:	4693      	mov	fp, r2
 80057aa:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80057ae:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80057b2:	eb14 0308 	adds.w	r3, r4, r8
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	eb45 0309 	adc.w	r3, r5, r9
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080057d0 <_Z16OD_BuildDate_getv>:

// Build date and time as integers
// Extern volatile variables are used so that the build time updates whenever main.cpp is recompiled.
extern volatile uint32_t BUILD_DATE;
extern volatile uint32_t BUILD_TIME;
uint32_t OD_BuildDate_get() {
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
	return BUILD_DATE;	// Format YYYYMMDD
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_Z16OD_BuildDate_getv+0x14>)
 80057d6:	681b      	ldr	r3, [r3, #0]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	2000002c 	.word	0x2000002c

080057e8 <_Z16OD_BuildTime_getv>:
uint32_t OD_BuildTime_get() {
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	return BUILD_TIME;	// Format HHMMSS
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <_Z16OD_BuildTime_getv+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000030 	.word	0x20000030

08005800 <_Z20OD_CAN1_TxErrCnt_getv>:

// CAN1 and CAN2 internal values (e.g. error counters, status, ...)
uint8_t OD_CAN1_TxErrCnt_get() {
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
	uint32_t can_esr_reg = READ_REG(hcan1.Instance->ESR);
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <_Z20OD_CAN1_TxErrCnt_getv+0x24>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	607b      	str	r3, [r7, #4]
	uint8_t can_tec = static_cast<uint8_t>((can_esr_reg & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);		// 8-bit value
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	70fb      	strb	r3, [r7, #3]
	return can_tec;
 8005814:	78fb      	ldrb	r3, [r7, #3]
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000358 	.word	0x20000358

08005828 <_Z20OD_CAN1_RxErrCnt_getv>:
uint8_t OD_CAN1_RxErrCnt_get() {
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
	uint32_t can_esr_reg = READ_REG(hcan1.Instance->ESR);
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <_Z20OD_CAN1_RxErrCnt_getv+0x24>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	607b      	str	r3, [r7, #4]
	uint8_t can_rec = static_cast<uint8_t>((can_esr_reg & CAN_ESR_REC) >> CAN_ESR_REC_Pos);		// 8-bit value
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	70fb      	strb	r3, [r7, #3]
	return can_rec;
 800583c:	78fb      	ldrb	r3, [r7, #3]
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000358 	.word	0x20000358

08005850 <_Z25OD_CAN1_lastErrorCode_getv>:
uint32_t OD_CAN1_lastErrorCode_get() {
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
	return HAL_CAN_GetError(&hcan1);
 8005854:	4802      	ldr	r0, [pc, #8]	; (8005860 <_Z25OD_CAN1_lastErrorCode_getv+0x10>)
 8005856:	f00b fa1a 	bl	8010c8e <HAL_CAN_GetError>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000358 	.word	0x20000358

08005864 <_Z18OD_CAN1_Status_getv>:
uint8_t OD_CAN1_autoErrorRest_get() {
	// TODO
	return 0;
}
uint8_t OD_CAN1_Status_get() {
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
	return HAL_CAN_GetState(&hcan1);
 8005868:	4802      	ldr	r0, [pc, #8]	; (8005874 <_Z18OD_CAN1_Status_getv+0x10>)
 800586a:	f00b f9e8 	bl	8010c3e <HAL_CAN_GetState>
 800586e:	4603      	mov	r3, r0
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000358 	.word	0x20000358

08005878 <_Z20OD_CAN2_TxErrCnt_getv>:
uint8_t OD_CAN2_TxErrCnt_get() {
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
	uint32_t can_esr_reg = READ_REG(hcan2.Instance->ESR);
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <_Z20OD_CAN2_TxErrCnt_getv+0x24>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	607b      	str	r3, [r7, #4]
	uint8_t can_tec = static_cast<uint8_t>((can_esr_reg & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);		// 8-bit value
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	70fb      	strb	r3, [r7, #3]
	return can_tec;
 800588c:	78fb      	ldrb	r3, [r7, #3]
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000380 	.word	0x20000380

080058a0 <_Z20OD_CAN2_RxErrCnt_getv>:
uint8_t OD_CAN2_RxErrCnt_get() {
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
	uint32_t can_esr_reg = READ_REG(hcan2.Instance->ESR);
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <_Z20OD_CAN2_RxErrCnt_getv+0x24>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	607b      	str	r3, [r7, #4]
	uint8_t can_rec = static_cast<uint8_t>((can_esr_reg & CAN_ESR_REC) >> CAN_ESR_REC_Pos);		// 8-bit value
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	70fb      	strb	r3, [r7, #3]
	return can_rec;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000380 	.word	0x20000380

080058c8 <_Z25OD_CAN2_lastErrorCode_getv>:
uint32_t OD_CAN2_lastErrorCode_get() {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
	return HAL_CAN_GetError(&hcan2);
 80058cc:	4802      	ldr	r0, [pc, #8]	; (80058d8 <_Z25OD_CAN2_lastErrorCode_getv+0x10>)
 80058ce:	f00b f9de 	bl	8010c8e <HAL_CAN_GetError>
 80058d2:	4603      	mov	r3, r0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000380 	.word	0x20000380

080058dc <_Z18OD_CAN2_Status_getv>:
uint8_t OD_CAN2_autoErrorRest_get() {
	// TODO
	return 0;
}
uint8_t OD_CAN2_Status_get() {
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	return HAL_CAN_GetState(&hcan2);
 80058e0:	4802      	ldr	r0, [pc, #8]	; (80058ec <_Z18OD_CAN2_Status_getv+0x10>)
 80058e2:	f00b f9ac 	bl	8010c3e <HAL_CAN_GetState>
 80058e6:	4603      	mov	r3, r0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000380 	.word	0x20000380

080058f0 <_ZNK3can11MessageBase4sendEm>:
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fb f8ac 	bl	8000a60 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <_ZNK3can11MessageBase4sendEm+0x54>)
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	f107 0108 	add.w	r1, r7, #8
 8005910:	2300      	movs	r3, #0
 8005912:	2200      	movs	r2, #0
 8005914:	f00f fdfa 	bl	801550c <osMessageQueuePut>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8005928:	f013 faa4 	bl	8018e74 <vPortEnterCritical>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4619      	mov	r1, r3
 8005930:	4805      	ldr	r0, [pc, #20]	; (8005948 <_ZNK3can11MessageBase4sendEm+0x58>)
 8005932:	f015 faa9 	bl	801ae88 <iprintf>
 8005936:	f013 facd 	bl	8018ed4 <vPortExitCritical>
        }
 800593a:	bf00      	nop
 800593c:	3728      	adds	r7, #40	; 0x28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200003ec 	.word	0x200003ec
 8005948:	0801bc54 	.word	0x0801bc54

0800594c <_ZN9EmergencyC1Ev>:
#include "canzero_defines.h"

/**< singleton object of the Emergency class*/
Emergency *Emergency::em = nullptr;

Emergency::Emergency() {
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <_ZN9EmergencyC1Ev+0x1c>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
}
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	0801c1b8 	.word	0x0801c1b8

0800596c <_ZN9Emergency15handleEmergencyEmm>:


/// This function gets called whenever a warning or error is set or cleared
/// If you want to use it, overwrite it (without the weak attribute) in any other file.
void __attribute__((weak)) Emergency::handleEmergency(uint32_t emergencyBuffer, uint32_t lastEmergencyBuffer) {
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	} else {
		// Error OtherError no present
	}

	*/
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <_ZN3can7MessageINS_8messages8PDU_EMCYEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	2300      	movs	r3, #0
 800598e:	2204      	movs	r2, #4
 8005990:	219a      	movs	r1, #154	; 0x9a
 8005992:	f7fa fdff 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <_ZN9Emergency16waitForEmergencyEPv>:
 * This Task checks new error or warnings, processes them with handleEmergency and
 * sends them on the CAN bus with can::Message::send which puts the message in cz_interface::cz_send
 *
 * @param params: unused
 */
void Emergency::waitForEmergency(void *params) {
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80059a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80059ae:	f107 0310 	add.w	r3, r7, #16
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff ffe5 	bl	8005982 <_ZN3can7MessageINS_8messages8PDU_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (1) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80059c0:	f107 020c 	add.w	r2, r7, #12
 80059c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80059c8:	2100      	movs	r1, #0
 80059ca:	2000      	movs	r0, #0
 80059cc:	f012 fb78 	bl	80180c0 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d004      	beq.n	80059e2 <_ZN9Emergency16waitForEmergencyEPv+0x42>
			handleEmergency(emergencyBuffer, lastEmergencyBuffer);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ffc5 	bl	800596c <_ZN9Emergency15handleEmergencyEmm>
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <_ZN9Emergency16waitForEmergencyEPv+0x50>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d00b      	beq.n	8005a08 <_ZN9Emergency16waitForEmergencyEPv+0x68>
			emcyMessage.intel = emergencyBuffer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	461c      	mov	r4, r3
 80059f6:	4615      	mov	r5, r2
 80059f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80059fc:	f107 0310 	add.w	r3, r7, #16
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ff74 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8005a0c:	e7d8      	b.n	80059c0 <_ZN9Emergency16waitForEmergencyEPv+0x20>
	...

08005a10 <_ZN9EmergencyD1Ev>:
	}
}


Emergency::~Emergency() {
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	4a04      	ldr	r2, [pc, #16]	; (8005a2c <_ZN9EmergencyD1Ev+0x1c>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
}
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	0801c1b8 	.word	0x0801c1b8

08005a30 <_ZN9EmergencyD0Ev>:
Emergency::~Emergency() {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
}
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffe9 	bl	8005a10 <_ZN9EmergencyD1Ev>
 8005a3e:	2104      	movs	r1, #4
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f013 fd33 	bl	80194ac <_ZdlPvj>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN9Emergency20getEmergencyInstanceEv>:
/**
 * @brief create and get the singleton of the Emergency class
 *
 * @return em Emergnecy singleton
 */
Emergency* Emergency::getEmergencyInstance() {
 8005a50:	b598      	push	{r3, r4, r7, lr}
 8005a52:	af00      	add	r7, sp, #0

	if (em == nullptr) {
 8005a54:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <_ZN9Emergency20getEmergencyInstanceEv+0x28>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <_ZN9Emergency20getEmergencyInstanceEv+0x20>
		em = new Emergency();
 8005a5c:	2004      	movs	r0, #4
 8005a5e:	f013 fd27 	bl	80194b0 <_Znwj>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461c      	mov	r4, r3
 8005a66:	4620      	mov	r0, r4
 8005a68:	f7ff ff70 	bl	800594c <_ZN9EmergencyC1Ev>
 8005a6c:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <_ZN9Emergency20getEmergencyInstanceEv+0x28>)
 8005a6e:	601c      	str	r4, [r3, #0]
	}
	return em;
 8005a70:	4b01      	ldr	r3, [pc, #4]	; (8005a78 <_ZN9Emergency20getEmergencyInstanceEv+0x28>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd98      	pop	{r3, r4, r7, pc}
 8005a78:	200001b0 	.word	0x200001b0

08005a7c <_ZN9HeartbeatC1Ev>:
#include "dbc_parser.hpp"
#include "message_buffer.h"

Heartbeat* Heartbeat::hb = nullptr;

Heartbeat::Heartbeat() {
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	4a06      	ldr	r2, [pc, #24]	; (8005aa0 <_ZN9HeartbeatC1Ev+0x24>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <_ZN9HeartbeatC1Ev+0x28>)
 8005a8e:	605a      	str	r2, [r3, #4]
}
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	0801c1c8 	.word	0x0801c1c8
 8005aa4:	20000000 	.word	0x20000000

08005aa8 <_ZN9HeartbeatD1Ev>:

Heartbeat::~Heartbeat() {
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <_ZN9HeartbeatD1Ev+0x1c>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
}
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	0801c1c8 	.word	0x0801c1c8

08005ac8 <_ZN9HeartbeatD0Ev>:
Heartbeat::~Heartbeat() {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
}
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ffe9 	bl	8005aa8 <_ZN9HeartbeatD1Ev>
 8005ad6:	2108      	movs	r1, #8
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f013 fce7 	bl	80194ac <_ZdlPvj>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_ZN9Heartbeat13sendHeartbeatEPv>:


void Heartbeat::sendHeartbeat(void *params) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	TxMessage hbTxMessage;
 8005af0:	f107 0308 	add.w	r3, r7, #8
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa ff9f 	bl	8000a38 <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8005afa:	f240 731a 	movw	r3, #1818	; 0x71a
 8005afe:	60bb      	str	r3, [r7, #8]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 8005b00:	2301      	movs	r3, #1
 8005b02:	61bb      	str	r3, [r7, #24]
	extern osMessageQId czSendQueue;
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) cz_interface::getInstance()->getStatus();
 8005b04:	f000 fc4e 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 faf8 	bl	8006100 <_ZN12cz_interface9getStatusEv>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3020 	strb.w	r3, [r7, #32]
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <_ZN9Heartbeat13sendHeartbeatEPv+0x68>)
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	f107 0108 	add.w	r1, r7, #8
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2200      	movs	r2, #0
 8005b22:	f00f fcf3 	bl	801550c <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(Heartbeat::getHeartbeatInstance()->OD_HeartbeatInterval_get()));
 8005b26:	f000 f867 	bl	8005bf8 <_ZN9Heartbeat20getHeartbeatInstanceEv>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 f847 	bl	8005bc0 <_ZN9Heartbeat24OD_HeartbeatInterval_getEv>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <_ZN9Heartbeat13sendHeartbeatEPv+0x6c>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	099b      	lsrs	r3, r3, #6
 8005b46:	4618      	mov	r0, r3
 8005b48:	f00f fb44 	bl	80151d4 <osDelay>
		hbTxMessage.txBuf[0] = (uint8_t) cz_interface::getInstance()->getStatus();
 8005b4c:	e7da      	b.n	8005b04 <_ZN9Heartbeat13sendHeartbeatEPv+0x1c>
 8005b4e:	bf00      	nop
 8005b50:	200003ec 	.word	0x200003ec
 8005b54:	10624dd3 	.word	0x10624dd3

08005b58 <_ZN9Heartbeat16consumeHeartbeatEPv>:
	}

}
void Heartbeat::consumeHeartbeat(void *params) {
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b08d      	sub	sp, #52	; 0x34
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	RxMessage message;
	extern MessageBufferHandle_t heartbeatMessageBuffer;

	while (1) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message), pdMS_TO_TICKS(Heartbeat::getHeartbeatInstance()->OD_HeartbeatInterval_get() + 5)) != 0) {
 8005b60:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <_ZN9Heartbeat16consumeHeartbeatEPv+0x60>)
 8005b62:	681c      	ldr	r4, [r3, #0]
 8005b64:	f000 f848 	bl	8005bf8 <_ZN9Heartbeat20getHeartbeatInstanceEv>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f828 	bl	8005bc0 <_ZN9Heartbeat24OD_HeartbeatInterval_getEv>
 8005b70:	4603      	mov	r3, r0
 8005b72:	3305      	adds	r3, #5
 8005b74:	461a      	mov	r2, r3
 8005b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <_ZN9Heartbeat16consumeHeartbeatEPv+0x64>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	f107 010c 	add.w	r1, r7, #12
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f010 ff63 	bl	8016a58 <xStreamBufferReceive>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0de      	beq.n	8005b60 <_ZN9Heartbeat16consumeHeartbeatEPv+0x8>
			cz_interface::getInstance()->setStatus((cz_status)message.rxBuf[0]);
 8005ba2:	f000 fbff 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fac2 	bl	8006138 <_ZN12cz_interface9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message), pdMS_TO_TICKS(Heartbeat::getHeartbeatInstance()->OD_HeartbeatInterval_get() + 5)) != 0) {
 8005bb4:	e7d4      	b.n	8005b60 <_ZN9Heartbeat16consumeHeartbeatEPv+0x8>
 8005bb6:	bf00      	nop
 8005bb8:	200003d0 	.word	0x200003d0
 8005bbc:	10624dd3 	.word	0x10624dd3

08005bc0 <_ZN9Heartbeat24OD_HeartbeatInterval_getEv>:
	osMutexAcquire(hbIntervalMutex, osWaitForever);
	interval = value;
	osMutexRelease(hbIntervalMutex);
}

uint16_t Heartbeat::OD_HeartbeatInterval_get() {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	extern osMutexId_t hbIntervalMutex;
	osMutexAcquire(hbIntervalMutex, portMAX_DELAY);
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <_ZN9Heartbeat24OD_HeartbeatInterval_getEv+0x34>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f00f fba0 	bl	8015316 <osMutexAcquire>
	uint16_t returnValue = interval;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(hbIntervalMutex);
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <_ZN9Heartbeat24OD_HeartbeatInterval_getEv+0x34>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f00f fbe2 	bl	80153ac <osMutexRelease>
	return returnValue;
 8005be8:	89fb      	ldrh	r3, [r7, #14]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200003e8 	.word	0x200003e8

08005bf8 <_ZN9Heartbeat20getHeartbeatInstanceEv>:

Heartbeat* Heartbeat::getHeartbeatInstance(){
 8005bf8:	b598      	push	{r3, r4, r7, lr}
 8005bfa:	af00      	add	r7, sp, #0

	if(hb==nullptr){
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <_ZN9Heartbeat20getHeartbeatInstanceEv+0x28>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <_ZN9Heartbeat20getHeartbeatInstanceEv+0x20>
		hb = new Heartbeat();
 8005c04:	2008      	movs	r0, #8
 8005c06:	f013 fc53 	bl	80194b0 <_Znwj>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461c      	mov	r4, r3
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff ff34 	bl	8005a7c <_ZN9HeartbeatC1Ev>
 8005c14:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <_ZN9Heartbeat20getHeartbeatInstanceEv+0x28>)
 8005c16:	601c      	str	r4, [r3, #0]
	}
	return hb;
 8005c18:	4b01      	ldr	r3, [pc, #4]	; (8005c20 <_ZN9Heartbeat20getHeartbeatInstanceEv+0x28>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd98      	pop	{r3, r4, r7, pc}
 8005c20:	200001b4 	.word	0x200001b4

08005c24 <_Z25WARN_batterVoltageLow_setv>:


// Warning: W1_batterVoltageLow
bool WARN_batterVoltageLow_status = false;    // Internal value

void WARN_batterVoltageLow_set() {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
    // Only set warning when it is not set yet
    if(!WARN_batterVoltageLow_status) {
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <_Z25WARN_batterVoltageLow_setv+0x2c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <_Z25WARN_batterVoltageLow_setv+0x26>

        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, WARN_batterVoltageLow_FLAG, eSetBits);
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <_Z25WARN_batterVoltageLow_setv+0x30>)
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	2102      	movs	r1, #2
 8005c40:	f012 fa9e 	bl	8018180 <xTaskGenericNotify>

        // Update internal value
        WARN_batterVoltageLow_status = true;
 8005c44:	4b02      	ldr	r3, [pc, #8]	; (8005c50 <_Z25WARN_batterVoltageLow_setv+0x2c>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
    }
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200001b8 	.word	0x200001b8
 8005c54:	200003bc 	.word	0x200003bc

08005c58 <_Z27WARN_batterVoltageLow_clearv>:

void WARN_batterVoltageLow_clear() {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
    // Only clear warning when it is set
    if(WARN_batterVoltageLow_status) {
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <_Z27WARN_batterVoltageLow_clearv+0x30>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00f      	beq.n	8005c84 <_Z27WARN_batterVoltageLow_clearv+0x2c>
        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, WARN_batterVoltageLow_FLAG);
 8005c64:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <_Z27WARN_batterVoltageLow_clearv+0x34>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f012 fc00 	bl	8018470 <ulTaskNotifyValueClear>

        // Update internal value
        WARN_batterVoltageLow_status = false;
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <_Z27WARN_batterVoltageLow_clearv+0x30>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task manually
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <_Z27WARN_batterVoltageLow_clearv+0x34>)
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f012 fa7e 	bl	8018180 <xTaskGenericNotify>
    }
}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	200001b8 	.word	0x200001b8
 8005c8c:	200003bc 	.word	0x200003bc

08005c90 <_Z23WARN_batterTempHigh_setv>:


// Warning: W2_batterTempHigh
bool WARN_batterTempHigh_status = false;    // Internal value

void WARN_batterTempHigh_set() {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
    // Only set warning when it is not set yet
    if(!WARN_batterTempHigh_status) {
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <_Z23WARN_batterTempHigh_setv+0x2c>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f083 0301 	eor.w	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <_Z23WARN_batterTempHigh_setv+0x26>

        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, WARN_batterTempHigh_FLAG, eSetBits);
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <_Z23WARN_batterTempHigh_setv+0x30>)
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2201      	movs	r2, #1
 8005caa:	2104      	movs	r1, #4
 8005cac:	f012 fa68 	bl	8018180 <xTaskGenericNotify>

        // Update internal value
        WARN_batterTempHigh_status = true;
 8005cb0:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <_Z23WARN_batterTempHigh_setv+0x2c>)
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	701a      	strb	r2, [r3, #0]
    }
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200001b9 	.word	0x200001b9
 8005cc0:	200003bc 	.word	0x200003bc

08005cc4 <_Z25WARN_batterTempHigh_clearv>:

void WARN_batterTempHigh_clear() {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
    // Only clear warning when it is set
    if(WARN_batterTempHigh_status) {
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <_Z25WARN_batterTempHigh_clearv+0x30>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00f      	beq.n	8005cf0 <_Z25WARN_batterTempHigh_clearv+0x2c>
        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, WARN_batterTempHigh_FLAG);
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <_Z25WARN_batterTempHigh_clearv+0x34>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f012 fbca 	bl	8018470 <ulTaskNotifyValueClear>

        // Update internal value
        WARN_batterTempHigh_status = false;
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <_Z25WARN_batterTempHigh_clearv+0x30>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task manually
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <_Z25WARN_batterTempHigh_clearv+0x34>)
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2100      	movs	r1, #0
 8005cec:	f012 fa48 	bl	8018180 <xTaskGenericNotify>
    }
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	200001b9 	.word	0x200001b9
 8005cf8:	200003bc 	.word	0x200003bc

08005cfc <_Z31ERR_batterVoltageCritical_clearv>:
        // Update internal value
        ERR_batterVoltageCritical_status = true;
    }
}

void ERR_batterVoltageCritical_clear() {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
    // Only clear error when it is set
    if(ERR_batterVoltageCritical_status) {
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <_Z31ERR_batterVoltageCritical_clearv+0x34>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <_Z31ERR_batterVoltageCritical_clearv+0x2e>

        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, ERR_batterVoltageCritical_FLAG);
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <_Z31ERR_batterVoltageCritical_clearv+0x38>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d10:	4618      	mov	r0, r3
 8005d12:	f012 fbad 	bl	8018470 <ulTaskNotifyValueClear>

        // Update internal value
        ERR_batterVoltageCritical_status = false;
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <_Z31ERR_batterVoltageCritical_clearv+0x34>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <_Z31ERR_batterVoltageCritical_clearv+0x38>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	2300      	movs	r3, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	2100      	movs	r1, #0
 8005d26:	f012 fa2b 	bl	8018180 <xTaskGenericNotify>
    }
}
 8005d2a:	bf00      	nop
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200001ba 	.word	0x200001ba
 8005d34:	200003bc 	.word	0x200003bc

08005d38 <_Z29ERR_batterVoltageCritical_getv>:

bool ERR_batterVoltageCritical_get() {
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
    // Return internal value
    return ERR_batterVoltageCritical_status;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <_Z29ERR_batterVoltageCritical_getv+0x14>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	200001ba 	.word	0x200001ba

08005d50 <_Z26ERR_batteryOvercurrent_setv>:


// Error: E2_batteryOvercurrent
bool ERR_batteryOvercurrent_status = false;    // Internal value

void ERR_batteryOvercurrent_set() {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
    // Only set error when it is not set yet
    if(!ERR_batteryOvercurrent_status) {
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_Z26ERR_batteryOvercurrent_setv+0x2c>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <_Z26ERR_batteryOvercurrent_setv+0x28>
            
        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, ERR_batteryOvercurrent_FLAG, eSetBits);
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <_Z26ERR_batteryOvercurrent_setv+0x30>)
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d6e:	f012 fa07 	bl	8018180 <xTaskGenericNotify>

        // Update internal value
        ERR_batteryOvercurrent_status = true;
 8005d72:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <_Z26ERR_batteryOvercurrent_setv+0x2c>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
    }
}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	200001bb 	.word	0x200001bb
 8005d80:	200003bc 	.word	0x200003bc

08005d84 <_Z28ERR_batteryOvercurrent_clearv>:

void ERR_batteryOvercurrent_clear() {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
    // Only clear error when it is set
    if(ERR_batteryOvercurrent_status) {
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <_Z28ERR_batteryOvercurrent_clearv+0x34>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <_Z28ERR_batteryOvercurrent_clearv+0x2e>

        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, ERR_batteryOvercurrent_FLAG);
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <_Z28ERR_batteryOvercurrent_clearv+0x38>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f012 fb69 	bl	8018470 <ulTaskNotifyValueClear>

        // Update internal value
        ERR_batteryOvercurrent_status = false;
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <_Z28ERR_batteryOvercurrent_clearv+0x34>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <_Z28ERR_batteryOvercurrent_clearv+0x38>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	2200      	movs	r2, #0
 8005dac:	2100      	movs	r1, #0
 8005dae:	f012 f9e7 	bl	8018180 <xTaskGenericNotify>
    }
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200001bb 	.word	0x200001bb
 8005dbc:	200003bc 	.word	0x200003bc

08005dc0 <_Z26ERR_batteryOvercurrent_getv>:

bool ERR_batteryOvercurrent_get() {
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
    // Return internal value
    return ERR_batteryOvercurrent_status;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <_Z26ERR_batteryOvercurrent_getv+0x14>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	200001bb 	.word	0x200001bb

08005dd8 <_Z26ERR_batterTempCritical_setv>:


// Error: E3_batterTempCritical
bool ERR_batterTempCritical_status = false;    // Internal value

void ERR_batterTempCritical_set() {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
    // Only set error when it is not set yet
    if(!ERR_batterTempCritical_status) {
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <_Z26ERR_batterTempCritical_setv+0x2c>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f083 0301 	eor.w	r3, r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <_Z26ERR_batterTempCritical_setv+0x28>
            
        // Set bit and notify emergency task
        xTaskNotify((TaskHandle_t)emergencyTaskHandle, ERR_batterTempCritical_FLAG, eSetBits);
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <_Z26ERR_batterTempCritical_setv+0x30>)
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	2300      	movs	r3, #0
 8005df0:	2201      	movs	r2, #1
 8005df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df6:	f012 f9c3 	bl	8018180 <xTaskGenericNotify>

        // Update internal value
        ERR_batterTempCritical_status = true;
 8005dfa:	4b02      	ldr	r3, [pc, #8]	; (8005e04 <_Z26ERR_batterTempCritical_setv+0x2c>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
    }
}
 8005e00:	bf00      	nop
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	200001bc 	.word	0x200001bc
 8005e08:	200003bc 	.word	0x200003bc

08005e0c <_Z30ERR_watchdogStateMachine_clearv>:
        // Update internal value
        ERR_watchdogStateMachine_status = true;
    }
}

void ERR_watchdogStateMachine_clear() {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
    // Only clear error when it is set
    if(ERR_watchdogStateMachine_status) {
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <_Z30ERR_watchdogStateMachine_clearv+0x34>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <_Z30ERR_watchdogStateMachine_clearv+0x2e>

        // Reset bit
        (void)ulTaskNotifyValueClear((TaskHandle_t)emergencyTaskHandle, ERR_watchdogStateMachine_FLAG);
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <_Z30ERR_watchdogStateMachine_clearv+0x38>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e20:	4618      	mov	r0, r3
 8005e22:	f012 fb25 	bl	8018470 <ulTaskNotifyValueClear>

        // Update internal value
        ERR_watchdogStateMachine_status = false;
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <_Z30ERR_watchdogStateMachine_clearv+0x34>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]

        // ulTaskNotifyValueClear() seems not to notify the task -> notify the task
        (void)xTaskNotify((TaskHandle_t)emergencyTaskHandle, 0, eNoAction);
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <_Z30ERR_watchdogStateMachine_clearv+0x38>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	f012 f9a3 	bl	8018180 <xTaskGenericNotify>
    }
}
 8005e3a:	bf00      	nop
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200001bd 	.word	0x200001bd
 8005e44:	200003bc 	.word	0x200003bc

08005e48 <_Z28ERR_watchdogStateMachine_getv>:

bool ERR_watchdogStateMachine_get() {
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
    // Return internal value
    return ERR_watchdogStateMachine_status;
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <_Z28ERR_watchdogStateMachine_getv+0x14>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	200001bd 	.word	0x200001bd

08005e60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e64:	f3bf 8f4f 	dsb	sy
}
 8005e68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <__NVIC_SystemReset+0x24>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e72:	4904      	ldr	r1, [pc, #16]	; (8005e84 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <__NVIC_SystemReset+0x28>)
 8005e76:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e7a:	f3bf 8f4f 	dsb	sy
}
 8005e7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <__NVIC_SystemReset+0x20>
 8005e84:	e000ed00 	.word	0xe000ed00
 8005e88:	05fa0004 	.word	0x05fa0004

08005e8c <_ZN12cz_interfaceC1Ev>:
#endif

cz_interface* cz_interface::canInterface = nullptr;


cz_interface::cz_interface() {
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <_ZN12cz_interfaceC1Ev+0x1c>)
 8005e98:	601a      	str	r2, [r3, #0]
}
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	200000c4 	.word	0x200000c4

08005eac <_ZN12cz_interface4initEv>:

void cz_interface::init() {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	setStatus(cz_status::reset);
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f93e 	bl	8006138 <_ZN12cz_interface9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da51      	bge.n	8005f6a <_ZN12cz_interface4initEv+0xbe>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	0b5b      	lsrs	r3, r3, #13
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	60bb      	str	r3, [r7, #8]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f043 0304 	orr.w	r3, r3, #4
 8005ee0:	60fb      	str	r3, [r7, #12]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	0b5b      	lsrs	r3, r3, #13
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	613b      	str	r3, [r7, #16]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8005eea:	2300      	movs	r3, #0
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f043 0306 	orr.w	r3, r3, #6
 8005ef4:	617b      	str	r3, [r7, #20]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	0fda      	lsrs	r2, r3, #31
 8005efa:	4413      	add	r3, r2
 8005efc:	105b      	asrs	r3, r3, #1
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <_ZN12cz_interface4initEv+0x60>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e001      	b.n	8005f10 <_ZN12cz_interface4initEv+0x64>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	61bb      	str	r3, [r7, #24]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8005f14:	230e      	movs	r3, #14
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	61fb      	str	r3, [r7, #28]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	4619      	mov	r1, r3
 8005f22:	4873      	ldr	r0, [pc, #460]	; (80060f0 <_ZN12cz_interface4initEv+0x244>)
 8005f24:	f00a f90e 	bl	8010144 <HAL_CAN_ConfigFilter>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf14      	ite	ne
 8005f2e:	2301      	movne	r3, #1
 8005f30:	2300      	moveq	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <_ZN12cz_interface4initEv+0x90>
			Error_Handler(); /* Filter configuration Error */
 8005f38:	f006 ff06 	bl	800cd48 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	330e      	adds	r3, #14
 8005f40:	61fb      	str	r3, [r7, #28]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4619      	mov	r1, r3
 8005f48:	486a      	ldr	r0, [pc, #424]	; (80060f4 <_ZN12cz_interface4initEv+0x248>)
 8005f4a:	f00a f8fb 	bl	8010144 <HAL_CAN_ConfigFilter>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <_ZN12cz_interface4initEv+0xb6>
			Error_Handler(); /* Filter configuration Error */
 8005f5e:	f006 fef3 	bl	800cd48 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f64:	3301      	adds	r3, #1
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
 8005f68:	e7aa      	b.n	8005ec0 <_ZN12cz_interface4initEv+0x14>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	2b0e      	cmp	r3, #14
 8005f72:	dc6b      	bgt.n	800604c <_ZN12cz_interface4initEv+0x1a0>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	0fda      	lsrs	r2, r3, #31
 8005f78:	4413      	add	r3, r2
 8005f7a:	105b      	asrs	r3, r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	623b      	str	r3, [r7, #32]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8005f82:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <_ZN12cz_interface4initEv+0x24c>)
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8a:	015b      	lsls	r3, r3, #5
 8005f8c:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8005f8e:	4a5b      	ldr	r2, [pc, #364]	; (80060fc <_ZN12cz_interface4initEv+0x250>)
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f96:	015b      	lsls	r3, r3, #5
 8005f98:	f043 0318 	orr.w	r3, r3, #24
 8005f9c:	613b      	str	r3, [r7, #16]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	2b0e      	cmp	r3, #14
 8005fa2:	d106      	bne.n	8005fb2 <_ZN12cz_interface4initEv+0x106>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24

			sFilterConfig.FilterIdLow = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8005fac:	2306      	movs	r3, #6
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e011      	b.n	8005fd6 <_ZN12cz_interface4initEv+0x12a>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <_ZN12cz_interface4initEv+0x24c>)
 8005fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc0:	015b      	lsls	r3, r3, #5
 8005fc2:	60fb      	str	r3, [r7, #12]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	4a4c      	ldr	r2, [pc, #304]	; (80060fc <_ZN12cz_interface4initEv+0x250>)
 8005fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fce:	015b      	lsls	r3, r3, #5
 8005fd0:	f043 0318 	orr.w	r3, r3, #24
 8005fd4:	617b      	str	r3, [r7, #20]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	0fda      	lsrs	r2, r3, #31
 8005fda:	4413      	add	r3, r2
 8005fdc:	105b      	asrs	r3, r3, #1
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <_ZN12cz_interface4initEv+0x140>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e001      	b.n	8005ff0 <_ZN12cz_interface4initEv+0x144>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8005fec:	2301      	movs	r3, #1
 8005fee:	61bb      	str	r3, [r7, #24]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8005ff4:	230e      	movs	r3, #14
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	483c      	ldr	r0, [pc, #240]	; (80060f0 <_ZN12cz_interface4initEv+0x244>)
 8006000:	f00a f8a0 	bl	8010144 <HAL_CAN_ConfigFilter>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <_ZN12cz_interface4initEv+0x16c>
			Error_Handler(); /* Filter configuration Error */
 8006014:	f006 fe98 	bl	800cd48 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	0fda      	lsrs	r2, r3, #31
 800601c:	4413      	add	r3, r2
 800601e:	105b      	asrs	r3, r3, #1
 8006020:	330e      	adds	r3, #14
 8006022:	61fb      	str	r3, [r7, #28]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8006024:	f107 0308 	add.w	r3, r7, #8
 8006028:	4619      	mov	r1, r3
 800602a:	4832      	ldr	r0, [pc, #200]	; (80060f4 <_ZN12cz_interface4initEv+0x248>)
 800602c:	f00a f88a 	bl	8010144 <HAL_CAN_ConfigFilter>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <_ZN12cz_interface4initEv+0x198>
			Error_Handler(); /* Filter configuration Error */
 8006040:	f006 fe82 	bl	800cd48 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	3302      	adds	r3, #2
 8006048:	633b      	str	r3, [r7, #48]	; 0x30
 800604a:	e790      	b.n	8005f6e <_ZN12cz_interface4initEv+0xc2>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 800604c:	4828      	ldr	r0, [pc, #160]	; (80060f0 <_ZN12cz_interface4initEv+0x244>)
 800604e:	f00a f959 	bl	8010304 <HAL_CAN_Start>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <_ZN12cz_interface4initEv+0x1b8>
 8006058:	4826      	ldr	r0, [pc, #152]	; (80060f4 <_ZN12cz_interface4initEv+0x248>)
 800605a:	f00a f953 	bl	8010304 <HAL_CAN_Start>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <_ZN12cz_interface4initEv+0x1bc>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <_ZN12cz_interface4initEv+0x1be>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <_ZN12cz_interface4initEv+0x1c6>
		Error_Handler(); /* Start Error */
 800606e:	f006 fe6b 	bl	800cd48 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8006072:	2102      	movs	r1, #2
 8006074:	481e      	ldr	r0, [pc, #120]	; (80060f0 <_ZN12cz_interface4initEv+0x244>)
 8006076:	f00a fbab 	bl	80107d0 <HAL_CAN_ActivateNotification>
 800607a:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10e      	bne.n	800609e <_ZN12cz_interface4initEv+0x1f2>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8006080:	2110      	movs	r1, #16
 8006082:	481b      	ldr	r0, [pc, #108]	; (80060f0 <_ZN12cz_interface4initEv+0x244>)
 8006084:	f00a fba4 	bl	80107d0 <HAL_CAN_ActivateNotification>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d107      	bne.n	800609e <_ZN12cz_interface4initEv+0x1f2>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800608e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006092:	4817      	ldr	r0, [pc, #92]	; (80060f0 <_ZN12cz_interface4initEv+0x244>)
 8006094:	f00a fb9c 	bl	80107d0 <HAL_CAN_ActivateNotification>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <_ZN12cz_interface4initEv+0x1f6>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <_ZN12cz_interface4initEv+0x1f8>
 80060a2:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <_ZN12cz_interface4initEv+0x200>
		Error_Handler();
 80060a8:	f006 fe4e 	bl	800cd48 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80060ac:	2102      	movs	r1, #2
 80060ae:	4811      	ldr	r0, [pc, #68]	; (80060f4 <_ZN12cz_interface4initEv+0x248>)
 80060b0:	f00a fb8e 	bl	80107d0 <HAL_CAN_ActivateNotification>
 80060b4:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10e      	bne.n	80060d8 <_ZN12cz_interface4initEv+0x22c>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80060ba:	2110      	movs	r1, #16
 80060bc:	480d      	ldr	r0, [pc, #52]	; (80060f4 <_ZN12cz_interface4initEv+0x248>)
 80060be:	f00a fb87 	bl	80107d0 <HAL_CAN_ActivateNotification>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <_ZN12cz_interface4initEv+0x22c>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80060c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060cc:	4809      	ldr	r0, [pc, #36]	; (80060f4 <_ZN12cz_interface4initEv+0x248>)
 80060ce:	f00a fb7f 	bl	80107d0 <HAL_CAN_ActivateNotification>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <_ZN12cz_interface4initEv+0x230>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <_ZN12cz_interface4initEv+0x232>
 80060dc:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <_ZN12cz_interface4initEv+0x23a>
		Error_Handler();
 80060e2:	f006 fe31 	bl	800cd48 <Error_Handler>
	}
}
 80060e6:	bf00      	nop
 80060e8:	3738      	adds	r7, #56	; 0x38
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000358 	.word	0x20000358
 80060f4:	20000380 	.word	0x20000380
 80060f8:	0801c20c 	.word	0x0801c20c
 80060fc:	0801c1d0 	.word	0x0801c1d0

08006100 <_ZN12cz_interface9getStatusEv>:
				canModule);
		return;
	}
}

cz_status cz_interface::getStatus() {
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	extern osMutexId_t nodeStateMutex;
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <_ZN12cz_interface9getStatusEv+0x34>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f04f 31ff 	mov.w	r1, #4294967295
 8006110:	4618      	mov	r0, r3
 8006112:	f00f f900 	bl	8015316 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	73fb      	strb	r3, [r7, #15]
	osMutexRelease(nodeStateMutex);
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <_ZN12cz_interface9getStatusEv+0x34>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f00f f942 	bl	80153ac <osMutexRelease>
	return returnValue;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200003e4 	.word	0x200003e4

08006138 <_ZN12cz_interface9setStatusE9cz_status>:

void cz_interface::setStatus(cz_status new_status){
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
	extern osMutexId_t nodeStateMutex;
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <_ZN12cz_interface9setStatusE9cz_status+0x34>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f04f 31ff 	mov.w	r1, #4294967295
 800614c:	4618      	mov	r0, r3
 800614e:	f00f f8e2 	bl	8015316 <osMutexAcquire>
	nodeStatus = new_status;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	701a      	strb	r2, [r3, #0]
	osMutexRelease(nodeStateMutex);
 800615a:	4b04      	ldr	r3, [pc, #16]	; (800616c <_ZN12cz_interface9setStatusE9cz_status+0x34>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f00f f924 	bl	80153ac <osMutexRelease>
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	200003e4 	.word	0x200003e4

08006170 <_ZN12cz_interface7cz_sendEPv>:

void cz_interface::cz_send(void* params){
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	extern osMessageQId czSendQueue;
	TxMessage sendMessage;
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa fc5b 	bl	8000a38 <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;
#endif

	while(1){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8006182:	4b52      	ldr	r3, [pc, #328]	; (80062cc <_ZN12cz_interface7cz_sendEPv+0x15c>)
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	2200      	movs	r2, #0
 8006190:	f00f fa1c 	bl	80155cc <osMessageQueueGet>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d000      	beq.n	80061a6 <_ZN12cz_interface7cz_sendEPv+0x36>
			while(1);
 80061a4:	e7fe      	b.n	80061a4 <_ZN12cz_interface7cz_sendEPv+0x34>
		}
		if(sendMessage.txHeader.DLC>8){
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d900      	bls.n	80061ae <_ZN12cz_interface7cz_sendEPv+0x3e>
			while(1);
 80061ac:	e7fe      	b.n	80061ac <_ZN12cz_interface7cz_sendEPv+0x3c>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	61fb      	str	r3, [r7, #28]

		if(canBus == can::buses::BUS1) {
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c2:	d102      	bne.n	80061ca <_ZN12cz_interface7cz_sendEPv+0x5a>
			hcanModule = &hcan1;
 80061c4:	4b42      	ldr	r3, [pc, #264]	; (80062d0 <_ZN12cz_interface7cz_sendEPv+0x160>)
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
 80061c8:	e010      	b.n	80061ec <_ZN12cz_interface7cz_sendEPv+0x7c>
		} else if(canBus == can::buses::BUS2) {
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061d0:	d102      	bne.n	80061d8 <_ZN12cz_interface7cz_sendEPv+0x68>
			hcanModule = &hcan2;
 80061d2:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <_ZN12cz_interface7cz_sendEPv+0x164>)
 80061d4:	637b      	str	r3, [r7, #52]	; 0x34
 80061d6:	e009      	b.n	80061ec <_ZN12cz_interface7cz_sendEPv+0x7c>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <_ZN12cz_interface7cz_sendEPv+0x78>
				hcanModule = &hcan1;
 80061e2:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <_ZN12cz_interface7cz_sendEPv+0x160>)
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	e001      	b.n	80061ec <_ZN12cz_interface7cz_sendEPv+0x7c>
			} else{
				hcanModule = &hcan2;
 80061e8:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <_ZN12cz_interface7cz_sendEPv+0x164>)
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif

#ifndef USE_CAN_OVER_UART_INTERFACE

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 80061ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061ee:	f00a f9a8 	bl	8010542 <HAL_CAN_GetTxMailboxesFreeLevel>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf14      	ite	ne
 80061f8:	2301      	movne	r3, #1
 80061fa:	2300      	moveq	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <_ZN12cz_interface7cz_sendEPv+0xc0>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8006202:	f107 000c 	add.w	r0, r7, #12
 8006206:	f107 0310 	add.w	r3, r7, #16
 800620a:	f103 0218 	add.w	r2, r3, #24
 800620e:	f107 0110 	add.w	r1, r7, #16
 8006212:	4603      	mov	r3, r0
 8006214:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006216:	f00a f8b9 	bl	801038c <HAL_CAN_AddTxMessage>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0ab      	beq.n	8006182 <_ZN12cz_interface7cz_sendEPv+0x12>
				/* Transmission request Error */
				Error_Handler();
 800622a:	f006 fd8d 	bl	800cd48 <Error_Handler>
 800622e:	e7a8      	b.n	8006182 <_ZN12cz_interface7cz_sendEPv+0x12>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8006230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006232:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <_ZN12cz_interface7cz_sendEPv+0x160>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d105      	bne.n	8006244 <_ZN12cz_interface7cz_sendEPv+0xd4>
				OD_CAN1_DelayedTxMessages++;
 8006238:	4b27      	ldr	r3, [pc, #156]	; (80062d8 <_ZN12cz_interface7cz_sendEPv+0x168>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	4a26      	ldr	r2, [pc, #152]	; (80062d8 <_ZN12cz_interface7cz_sendEPv+0x168>)
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e004      	b.n	800624e <_ZN12cz_interface7cz_sendEPv+0xde>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8006244:	4b25      	ldr	r3, [pc, #148]	; (80062dc <_ZN12cz_interface7cz_sendEPv+0x16c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a24      	ldr	r2, [pc, #144]	; (80062dc <_ZN12cz_interface7cz_sendEPv+0x16c>)
 800624c:	6013      	str	r3, [r2, #0]
			}

			osDelay(1);		// Use smallest delay possible
 800624e:	2001      	movs	r0, #1
 8006250:	f00e ffc0 	bl	80151d4 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8006254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006256:	f00a f974 	bl	8010542 <HAL_CAN_GetTxMailboxesFreeLevel>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf14      	ite	ne
 8006260:	2301      	movne	r3, #1
 8006262:	2300      	moveq	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d017      	beq.n	800629a <_ZN12cz_interface7cz_sendEPv+0x12a>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 800626a:	f107 000c 	add.w	r0, r7, #12
 800626e:	f107 0310 	add.w	r3, r7, #16
 8006272:	f103 0218 	add.w	r2, r3, #24
 8006276:	f107 0110 	add.w	r1, r7, #16
 800627a:	4603      	mov	r3, r0
 800627c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800627e:	f00a f885 	bl	801038c <HAL_CAN_AddTxMessage>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	f43f af77 	beq.w	8006182 <_ZN12cz_interface7cz_sendEPv+0x12>
					/* Transmission request Error */
					Error_Handler();
 8006294:	f006 fd58 	bl	800cd48 <Error_Handler>
 8006298:	e773      	b.n	8006182 <_ZN12cz_interface7cz_sendEPv+0x12>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <_ZN12cz_interface7cz_sendEPv+0x160>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d105      	bne.n	80062ae <_ZN12cz_interface7cz_sendEPv+0x13e>
					OD_CAN1_DiscardedTxMessages++;
 80062a2:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <_ZN12cz_interface7cz_sendEPv+0x170>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <_ZN12cz_interface7cz_sendEPv+0x170>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e004      	b.n	80062b8 <_ZN12cz_interface7cz_sendEPv+0x148>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <_ZN12cz_interface7cz_sendEPv+0x174>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a0b      	ldr	r2, [pc, #44]	; (80062e4 <_ZN12cz_interface7cz_sendEPv+0x174>)
 80062b6:	6013      	str	r3, [r2, #0]
				}

				printDebug("Discarded TX message with ID %lu !!\n", sendMessage.txHeader.StdId);
 80062b8:	f012 fddc 	bl	8018e74 <vPortEnterCritical>
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4619      	mov	r1, r3
 80062c0:	4809      	ldr	r0, [pc, #36]	; (80062e8 <_ZN12cz_interface7cz_sendEPv+0x178>)
 80062c2:	f014 fde1 	bl	801ae88 <iprintf>
 80062c6:	f012 fe05 	bl	8018ed4 <vPortExitCritical>
			}
		}
#endif

	}
 80062ca:	e75a      	b.n	8006182 <_ZN12cz_interface7cz_sendEPv+0x12>
 80062cc:	200003ec 	.word	0x200003ec
 80062d0:	20000358 	.word	0x20000358
 80062d4:	20000380 	.word	0x20000380
 80062d8:	200000e0 	.word	0x200000e0
 80062dc:	200000ec 	.word	0x200000ec
 80062e0:	200000d8 	.word	0x200000d8
 80062e4:	200000e4 	.word	0x200000e4
 80062e8:	0801bcd0 	.word	0x0801bcd0

080062ec <_ZN12cz_interface10cz_receiveEPv>:
}


void cz_interface::cz_receive(void *params) {
 80062ec:	b5b0      	push	{r4, r5, r7, lr}
 80062ee:	b092      	sub	sp, #72	; 0x48
 80062f0:	af06      	add	r7, sp, #24
 80062f2:	6078      	str	r0, [r7, #4]
#ifdef USE_CAN_OVER_UART_INTERFACE
	spp.startReceiving();
#endif

#ifndef USE_CAN_OVER_UART_INTERFACE
	cz_interface::getInstance()->init();
 80062f4:	f000 f856 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fdd6 	bl	8005eac <_ZN12cz_interface4initEv>
#endif

	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8006300:	4b26      	ldr	r3, [pc, #152]	; (800639c <_ZN12cz_interface10cz_receiveEPv+0xb0>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	f107 010c 	add.w	r1, r7, #12
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	2200      	movs	r2, #0
 800630e:	f00f f95d 	bl	80155cc <osMessageQueueGet>
		for (unsigned int i = 0; i < message.rxHeader.DLC; i++) {
			printDebug(" %u", message.rxBuf[i]);
		}
		printDebug("\n");*/

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d136      	bne.n	8006386 <_ZN12cz_interface10cz_receiveEPv+0x9a>
			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8006318:	f107 030c 	add.w	r3, r7, #12
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f857 	bl	80063d0 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <_ZN12cz_interface10cz_receiveEPv+0x48>
				if(message.rxBuf[0]==0xff) {
 8006328:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800632c:	2bff      	cmp	r3, #255	; 0xff
 800632e:	d1e7      	bne.n	8006300 <_ZN12cz_interface10cz_receiveEPv+0x14>
					NVIC_SystemReset();
 8006330:	f7ff fd96 	bl	8005e60 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f862 	bl	8006402 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <_ZN12cz_interface10cz_receiveEPv+0x64>
				handleSDORequestUpload(message);
 8006344:	f107 030c 	add.w	r3, r7, #12
 8006348:	4618      	mov	r0, r3
 800634a:	f7fc febb 	bl	80030c4 <_Z22handleSDORequestUploadRK9RxMessage>
 800634e:	e7d7      	b.n	8006300 <_ZN12cz_interface10cz_receiveEPv+0x14>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8006350:	f107 030c 	add.w	r3, r7, #12
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f86d 	bl	8006434 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <_ZN12cz_interface10cz_receiveEPv+0x80>
				handleSDORequestDownload(message);
 8006360:	f107 030c 	add.w	r3, r7, #12
 8006364:	4618      	mov	r0, r3
 8006366:	f7fc fa1a 	bl	800279e <_Z24handleSDORequestDownloadRK9RxMessage>
 800636a:	e7c9      	b.n	8006300 <_ZN12cz_interface10cz_receiveEPv+0x14>
			} else {
				processRX(message);
 800636c:	466d      	mov	r5, sp
 800636e:	f107 041c 	add.w	r4, r7, #28
 8006372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	f107 030c 	add.w	r3, r7, #12
 800637e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006380:	f000 f872 	bl	8006468 <_Z9processRX9RxMessage>
 8006384:	e7bc      	b.n	8006300 <_ZN12cz_interface10cz_receiveEPv+0x14>
			}
		} else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d1b9      	bne.n	8006300 <_ZN12cz_interface10cz_receiveEPv+0x14>
			printDebug("RTR must not be used!\n");
 800638c:	f012 fd72 	bl	8018e74 <vPortEnterCritical>
 8006390:	4803      	ldr	r0, [pc, #12]	; (80063a0 <_ZN12cz_interface10cz_receiveEPv+0xb4>)
 8006392:	f014 fdff 	bl	801af94 <puts>
 8006396:	f012 fd9d 	bl	8018ed4 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 800639a:	e7b1      	b.n	8006300 <_ZN12cz_interface10cz_receiveEPv+0x14>
 800639c:	200003f0 	.word	0x200003f0
 80063a0:	0801bcf8 	.word	0x0801bcf8

080063a4 <_ZN12cz_interface11getInstanceEv>:
		}
	}
}
cz_interface* cz_interface::getInstance(){
 80063a4:	b598      	push	{r3, r4, r7, lr}
 80063a6:	af00      	add	r7, sp, #0

	if(canInterface==nullptr){
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <_ZN12cz_interface11getInstanceEv+0x28>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <_ZN12cz_interface11getInstanceEv+0x20>
		canInterface = new cz_interface();
 80063b0:	2054      	movs	r0, #84	; 0x54
 80063b2:	f013 f87d 	bl	80194b0 <_Znwj>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461c      	mov	r4, r3
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff fd66 	bl	8005e8c <_ZN12cz_interfaceC1Ev>
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <_ZN12cz_interface11getInstanceEv+0x28>)
 80063c2:	601c      	str	r4, [r3, #0]
	}
	return canInterface;
 80063c4:	4b01      	ldr	r3, [pc, #4]	; (80063cc <_ZN12cz_interface11getInstanceEv+0x28>)
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd98      	pop	{r3, r4, r7, pc}
 80063cc:	200001c0 	.word	0x200001c0

080063d0 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f240 729a 	movw	r2, #1946	; 0x79a
 80063e8:	4293      	cmp	r3, r2
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e000      	b.n	80063f6 <_ZN3can14checkRxMessageINS_8messages10PDU_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80063f4:	2300      	movs	r3, #0
    }
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f240 52da 	movw	r2, #1498	; 0x5da
 800641a:	4293      	cmp	r3, r2
 800641c:	bf0c      	ite	eq
 800641e:	2301      	moveq	r3, #1
 8006420:	2300      	movne	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	e000      	b.n	8006428 <_ZN3can14checkRxMessageINS_8messages14PDU_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8006426:	2300      	movs	r3, #0
    }
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f240 621a 	movw	r2, #1562	; 0x61a
 800644c:	4293      	cmp	r3, r2
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e000      	b.n	800645a <_ZN3can14checkRxMessageINS_8messages16PDU_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8006458:	2300      	movs	r3, #0
    }
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8006468:	b084      	sub	sp, #16
 800646a:	b580      	push	{r7, lr}
 800646c:	af00      	add	r7, sp, #0
 800646e:	f107 0c08 	add.w	ip, r7, #8
 8006472:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	extern MessageBufferHandle_t handlePodStateMessageBuffer;
	extern MessageBufferHandle_t handleSensorRMessageBuffer;


	if (
		can::checkRxMessage<can::messages::PDU_RX_Control>(message) ||
 8006476:	f107 0008 	add.w	r0, r7, #8
 800647a:	f000 f84f 	bl	800651c <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>
 800647e:	4603      	mov	r3, r0
		can::checkRxMessage<can::messages::PDU_RX_Manual_Control>(message) ||
		can::checkRxMessage<can::messages::PDU_RX_HP_D_Dutycycle>(message) ||
		can::checkRxMessage<can::messages::PDU_RX_LP_Dutycycle>(message) ||
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11b      	bne.n	80064bc <_Z9processRX9RxMessage+0x54>
		can::checkRxMessage<can::messages::PDU_RX_Manual_Control>(message) ||
 8006484:	f107 0008 	add.w	r0, r7, #8
 8006488:	f000 f860 	bl	800654c <_ZN3can14checkRxMessageINS_8messages21PDU_RX_Manual_ControlEEEbRK9RxMessage>
 800648c:	4603      	mov	r3, r0
		can::checkRxMessage<can::messages::PDU_RX_Control>(message) ||
 800648e:	2b00      	cmp	r3, #0
 8006490:	d114      	bne.n	80064bc <_Z9processRX9RxMessage+0x54>
		can::checkRxMessage<can::messages::PDU_RX_HP_D_Dutycycle>(message) ||
 8006492:	f107 0008 	add.w	r0, r7, #8
 8006496:	f000 f872 	bl	800657e <_ZN3can14checkRxMessageINS_8messages21PDU_RX_HP_D_DutycycleEEEbRK9RxMessage>
 800649a:	4603      	mov	r3, r0
		can::checkRxMessage<can::messages::PDU_RX_Manual_Control>(message) ||
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10d      	bne.n	80064bc <_Z9processRX9RxMessage+0x54>
		can::checkRxMessage<can::messages::PDU_RX_LP_Dutycycle>(message) ||
 80064a0:	f107 0008 	add.w	r0, r7, #8
 80064a4:	f000 f884 	bl	80065b0 <_ZN3can14checkRxMessageINS_8messages19PDU_RX_LP_DutycycleEEEbRK9RxMessage>
 80064a8:	4603      	mov	r3, r0
		can::checkRxMessage<can::messages::PDU_RX_HP_D_Dutycycle>(message) ||
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <_Z9processRX9RxMessage+0x54>
		can::checkRxMessage<can::messages::PDU_RX_LP_Enable>(message)
 80064ae:	f107 0008 	add.w	r0, r7, #8
 80064b2:	f000 f896 	bl	80065e2 <_ZN3can14checkRxMessageINS_8messages16PDU_RX_LP_EnableEEEbRK9RxMessage>
 80064b6:	4603      	mov	r3, r0
		can::checkRxMessage<can::messages::PDU_RX_LP_Dutycycle>(message) ||
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <_Z9processRX9RxMessage+0x58>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <_Z9processRX9RxMessage+0x5a>
 80064c0:	2300      	movs	r3, #0
	if (
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <_Z9processRX9RxMessage+0x70>
//		can::checkRxMessage<can::messages::SensorR_TX_Temperature>(message) ||
//		can::checkRxMessage<can::messages::SensorF_TX_Temperature>(message)
	) {
		xMessageBufferSend(handlePduRxMessageBuffer, &message, sizeof(message), 1);
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <_Z9processRX9RxMessage+0xa8>)
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	2301      	movs	r3, #1
 80064cc:	2224      	movs	r2, #36	; 0x24
 80064ce:	f107 0108 	add.w	r1, r7, #8
 80064d2:	f010 f9cf 	bl	8016874 <xStreamBufferSend>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n", message.rxHeader.StdId);
		} else {
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
		}
	}
}
 80064d6:	e015      	b.n	8006504 <_Z9processRX9RxMessage+0x9c>
		if(message.rxHeader.IDE == CAN_ID_STD) {
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <_Z9processRX9RxMessage+0x8a>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n", message.rxHeader.StdId);
 80064de:	f012 fcc9 	bl	8018e74 <vPortEnterCritical>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4619      	mov	r1, r3
 80064e6:	480b      	ldr	r0, [pc, #44]	; (8006514 <_Z9processRX9RxMessage+0xac>)
 80064e8:	f014 fcce 	bl	801ae88 <iprintf>
 80064ec:	f012 fcf2 	bl	8018ed4 <vPortExitCritical>
}
 80064f0:	e008      	b.n	8006504 <_Z9processRX9RxMessage+0x9c>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
 80064f2:	f012 fcbf 	bl	8018e74 <vPortEnterCritical>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4619      	mov	r1, r3
 80064fa:	4807      	ldr	r0, [pc, #28]	; (8006518 <_Z9processRX9RxMessage+0xb0>)
 80064fc:	f014 fcc4 	bl	801ae88 <iprintf>
 8006500:	f012 fce8 	bl	8018ed4 <vPortExitCritical>
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800650c:	b004      	add	sp, #16
 800650e:	4770      	bx	lr
 8006510:	200003d8 	.word	0x200003d8
 8006514:	0801bd10 	.word	0x0801bd10
 8006518:	0801bd34 	.word	0x0801bd34

0800651c <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage+0x22>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e000      	b.n	8006540 <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 800653e:	2300      	movs	r3, #0
    }
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <_ZN3can14checkRxMessageINS_8messages21PDU_RX_Manual_ControlEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <_ZN3can14checkRxMessageINS_8messages21PDU_RX_Manual_ControlEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f240 325a 	movw	r2, #858	; 0x35a
 8006564:	4293      	cmp	r3, r2
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	e000      	b.n	8006572 <_ZN3can14checkRxMessageINS_8messages21PDU_RX_Manual_ControlEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8006570:	2300      	movs	r3, #0
    }
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <_ZN3can14checkRxMessageINS_8messages21PDU_RX_HP_D_DutycycleEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <_ZN3can14checkRxMessageINS_8messages21PDU_RX_HP_D_DutycycleEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f240 22da 	movw	r2, #730	; 0x2da
 8006596:	4293      	cmp	r3, r2
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	e000      	b.n	80065a4 <_ZN3can14checkRxMessageINS_8messages21PDU_RX_HP_D_DutycycleEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80065a2:	2300      	movs	r3, #0
    }
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <_ZN3can14checkRxMessageINS_8messages19PDU_RX_LP_DutycycleEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <_ZN3can14checkRxMessageINS_8messages19PDU_RX_LP_DutycycleEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f240 225a 	movw	r2, #602	; 0x25a
 80065c8:	4293      	cmp	r3, r2
 80065ca:	bf0c      	ite	eq
 80065cc:	2301      	moveq	r3, #1
 80065ce:	2300      	movne	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e000      	b.n	80065d6 <_ZN3can14checkRxMessageINS_8messages19PDU_RX_LP_DutycycleEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80065d4:	2300      	movs	r3, #0
    }
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <_ZN3can14checkRxMessageINS_8messages16PDU_RX_LP_EnableEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <_ZN3can14checkRxMessageINS_8messages16PDU_RX_LP_EnableEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f240 225b 	movw	r2, #603	; 0x25b
 80065fa:	4293      	cmp	r3, r2
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e000      	b.n	8006608 <_ZN3can14checkRxMessageINS_8messages16PDU_RX_LP_EnableEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8006606:	2300      	movs	r3, #0
    }
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <_Z10flash_readm>:
 */

#include "FlashAccess.hpp"
#include "stm32f4xx_hal.h"

uint32_t flash_read(uint32_t address){
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
    return *(uint32_t*)address;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <_Z11flash_writemm>:

void flash_write(uint32_t address, uint32_t data){
 800662c:	b5b0      	push	{r4, r5, r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 8006636:	f00b f8ad 	bl	8011794 <HAL_FLASH_Unlock>
    FLASH_Erase_Sector(FLASH_SECTOR_11,VOLTAGE_RANGE_1);
 800663a:	2100      	movs	r1, #0
 800663c:	200b      	movs	r0, #11
 800663e:	f00b fa0b 	bl	8011a58 <FLASH_Erase_Sector>
    if(0x080E0000<=address && address<=0x080FFFFF){
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <_Z11flash_writemm+0x4c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d910      	bls.n	800666c <_Z11flash_writemm+0x40>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8006650:	d20c      	bcs.n	800666c <_Z11flash_writemm+0x40>
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address,data);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	461c      	mov	r4, r3
 8006658:	4615      	mov	r5, r2
 800665a:	4622      	mov	r2, r4
 800665c:	462b      	mov	r3, r5
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	2002      	movs	r0, #2
 8006662:	f00b f843 	bl	80116ec <HAL_FLASH_Program>
    	HAL_FLASH_Lock();
 8006666:	f00b f8b7 	bl	80117d8 <HAL_FLASH_Lock>
    else{
    	HAL_FLASH_Lock();
    	while(1);
    }

}
 800666a:	e002      	b.n	8006672 <_Z11flash_writemm+0x46>
    	HAL_FLASH_Lock();
 800666c:	f00b f8b4 	bl	80117d8 <HAL_FLASH_Lock>
    	while(1);
 8006670:	e7fe      	b.n	8006670 <_Z11flash_writemm+0x44>
}
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bdb0      	pop	{r4, r5, r7, pc}
 8006678:	080dffff 	.word	0x080dffff

0800667c <_ZN5stats18estimateFreeMemoryEv>:

/**
 * @brief
 *
 */
void stats::estimateFreeMemory(){
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
	OD_MemFree_set(xPortGetFreeHeapSize());
 8006680:	f012 fe4c 	bl	801931c <xPortGetFreeHeapSize>
 8006684:	4603      	mov	r3, r0
 8006686:	4618      	mov	r0, r3
 8006688:	f7fd fbae 	bl	8003de8 <_Z14OD_MemFree_setm>
}
 800668c:	bf00      	nop
 800668e:	bd80      	pop	{r7, pc}

08006690 <_ZN5stats16estimateCPUusageEv>:

void stats::estimateCPUusage(){
 8006690:	b580      	push	{r7, lr}
 8006692:	ed2d 8b02 	vpush	{d8}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
	float cpuUsage = 100.0f * ( 1.0f - ( (float) (xTaskGetIdleRunTimeCounter()-stats::oldIdleTick) / (float) (portGET_RUN_TIME_COUNTER_VALUE()-stats::oldTotalTick) ) );
 800669a:	f011 ff0f 	bl	80184bc <ulTaskGetIdleRunTimeCounter>
 800669e:	4602      	mov	r2, r0
 80066a0:	4b23      	ldr	r3, [pc, #140]	; (8006730 <_ZN5stats16estimateCPUusageEv+0xa0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80066ae:	f006 fb3f 	bl	800cd30 <getRunTimeCounterValue>
 80066b2:	4602      	mov	r2, r0
 80066b4:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <_ZN5stats16estimateCPUusageEv+0xa4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066c2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80066c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006738 <_ZN5stats16estimateCPUusageEv+0xa8>
 80066d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066d6:	edc7 7a01 	vstr	s15, [r7, #4]
	if(cpuUsage > 100.0f) {
 80066da:	edd7 7a01 	vldr	s15, [r7, #4]
 80066de:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006738 <_ZN5stats16estimateCPUusageEv+0xa8>
 80066e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ea:	dd02      	ble.n	80066f2 <_ZN5stats16estimateCPUusageEv+0x62>
		cpuUsage = 100.0f;
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <_ZN5stats16estimateCPUusageEv+0xac>)
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e009      	b.n	8006706 <_ZN5stats16estimateCPUusageEv+0x76>
	} else if(cpuUsage < 0) {
 80066f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80066f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	d502      	bpl.n	8006706 <_ZN5stats16estimateCPUusageEv+0x76>
		cpuUsage = 0;
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
	}
	OD_CpuUsage_set(cpuUsage);
 8006706:	ed97 0a01 	vldr	s0, [r7, #4]
 800670a:	f7fd fb35 	bl	8003d78 <_Z15OD_CpuUsage_setf>
	stats::oldIdleTick = xTaskGetIdleRunTimeCounter();
 800670e:	f011 fed5 	bl	80184bc <ulTaskGetIdleRunTimeCounter>
 8006712:	4603      	mov	r3, r0
 8006714:	4a06      	ldr	r2, [pc, #24]	; (8006730 <_ZN5stats16estimateCPUusageEv+0xa0>)
 8006716:	6013      	str	r3, [r2, #0]
	stats::oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
 8006718:	f006 fb0a 	bl	800cd30 <getRunTimeCounterValue>
 800671c:	4603      	mov	r3, r0
 800671e:	4a05      	ldr	r2, [pc, #20]	; (8006734 <_ZN5stats16estimateCPUusageEv+0xa4>)
 8006720:	6013      	str	r3, [r2, #0]
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	ecbd 8b02 	vpop	{d8}
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000200 	.word	0x20000200
 8006734:	20000204 	.word	0x20000204
 8006738:	42c80000 	.word	0x42c80000
 800673c:	42c80000 	.word	0x42c80000

08006740 <_ZN5stats17updateSensorStatsEPv>:
 * @brief updates all Board Sensors
 * calculates the board temperature and input voltage and updates the corresponding values in the OD: OD_BoardTemp and OD_InputVoltage
 *
 * @param task parameter (unused)
 */
void stats::updateSensorStats(void*){
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	uint8_t cyclesCounter = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	77fb      	strb	r3, [r7, #31]

	// Init AdcDma, get handle of this task for later unblocking. ADC will read four channels. They need to be configured in CubeMx
	adc1.init(10);		// Read each channel ten times and average
 800674c:	210a      	movs	r1, #10
 800674e:	4844      	ldr	r0, [pc, #272]	; (8006860 <_ZN5stats17updateSensorStatsEPv+0x120>)
 8006750:	f000 f8ba 	bl	80068c8 <_ZN6AdcDmaILh4EE4initEt>

	while(1){
		// Start ADC with DMA
		adc1.start();
 8006754:	4842      	ldr	r0, [pc, #264]	; (8006860 <_ZN5stats17updateSensorStatsEPv+0x120>)
 8006756:	f000 f8e9 	bl	800692c <_ZN6AdcDmaILh4EE5startEv>

		// Wait until the ADC finished reading all channels.
		ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(1000));
 800675a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800675e:	2001      	movs	r0, #1
 8006760:	f011 fc62 	bl	8018028 <ulTaskNotifyTake>

		// Get data pointer. Order of values is as configured in CubeMX
		float* adcData = adc1.getData();
 8006764:	483e      	ldr	r0, [pc, #248]	; (8006860 <_ZN5stats17updateSensorStatsEPv+0x120>)
 8006766:	f000 f911 	bl	800698c <_ZN6AdcDmaILh4EE7getDataEv>
 800676a:	61b8      	str	r0, [r7, #24]
		// 1) Using voltage divider equation to convert voltage into R_NTC: R_NTC = R1 * adcValue / (4096 - adcValue)
		// 2) Using NTC equation to get temperature

		// Internal temperature sensor of STM32
		// ADC sampling time should be at least 10us: Our ADC runs at 84MHz/4=21MHz -> at least 210 samples -> 480 samples were selected
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * logf(1.0f / (4095.0f / (float) adcData[0] - 1.0f) )) - 273.15f;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	ed93 7a00 	vldr	s14, [r3]
 8006772:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006864 <_ZN5stats17updateSensorStatsEPv+0x124>
 8006776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800677e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678a:	eeb0 0a47 	vmov.f32	s0, s14
 800678e:	f012 ff35 	bl	80195fc <logf>
 8006792:	eef0 7a40 	vmov.f32	s15, s0
 8006796:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006868 <_ZN5stats17updateSensorStatsEPv+0x128>
 800679a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800679e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800686c <_ZN5stats17updateSensorStatsEPv+0x12c>
 80067a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006870 <_ZN5stats17updateSensorStatsEPv+0x130>
 80067b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067b6:	edc7 7a05 	vstr	s15, [r7, #20]
		float inputVoltage = (float)adcData[1]/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	3304      	adds	r3, #4
 80067be:	ed93 7a00 	vldr	s14, [r3]
 80067c2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006864 <_ZN5stats17updateSensorStatsEPv+0x124>
 80067c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ca:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006874 <_ZN5stats17updateSensorStatsEPv+0x134>
 80067ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067d2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006878 <_ZN5stats17updateSensorStatsEPv+0x138>
 80067d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067da:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800687c <_ZN5stats17updateSensorStatsEPv+0x13c>
 80067de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067e2:	edc7 7a04 	vstr	s15, [r7, #16]
		float internalTemp = (3.3f * (float) adcData[2]/4095.0f - 0.76f) / 0.0025f + 25.0f;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	3308      	adds	r3, #8
 80067ea:	edd3 7a00 	vldr	s15, [r3]
 80067ee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006874 <_ZN5stats17updateSensorStatsEPv+0x134>
 80067f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067f6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8006864 <_ZN5stats17updateSensorStatsEPv+0x124>
 80067fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067fe:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006880 <_ZN5stats17updateSensorStatsEPv+0x140>
 8006802:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006806:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006884 <_ZN5stats17updateSensorStatsEPv+0x144>
 800680a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800680e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006816:	edc7 7a03 	vstr	s15, [r7, #12]

		OD_BoardTemp_set((ntcTemperature + internalTemp) / 2.0f);
 800681a:	ed97 7a05 	vldr	s14, [r7, #20]
 800681e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006826:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800682a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800682e:	eeb0 0a47 	vmov.f32	s0, s14
 8006832:	f7fd fb13 	bl	8003e5c <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(inputVoltage);
 8006836:	ed97 0a04 	vldr	s0, [r7, #16]
 800683a:	f7fd fb49 	bl	8003ed0 <_Z19OD_InputVoltage_setf>

		// Update CPU usage only every twenty cycles, so every second
		cyclesCounter++;
 800683e:	7ffb      	ldrb	r3, [r7, #31]
 8006840:	3301      	adds	r3, #1
 8006842:	77fb      	strb	r3, [r7, #31]
		if(cyclesCounter >= 20) {
 8006844:	7ffb      	ldrb	r3, [r7, #31]
 8006846:	2b13      	cmp	r3, #19
 8006848:	d905      	bls.n	8006856 <_ZN5stats17updateSensorStatsEPv+0x116>
			cyclesCounter = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	77fb      	strb	r3, [r7, #31]
			estimateCPUusage();
 800684e:	f7ff ff1f 	bl	8006690 <_ZN5stats16estimateCPUusageEv>
			estimateFreeMemory();
 8006852:	f7ff ff13 	bl	800667c <_ZN5stats18estimateFreeMemoryEv>
		}

		//osThreadSuspend(runtimeStatsHandle);
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 8006856:	2032      	movs	r0, #50	; 0x32
 8006858:	f00e fcbc 	bl	80151d4 <osDelay>
	}
 800685c:	e77a      	b.n	8006754 <_ZN5stats17updateSensorStatsEPv+0x14>
 800685e:	bf00      	nop
 8006860:	200001c4 	.word	0x200001c4
 8006864:	457ff000 	.word	0x457ff000
 8006868:	399b1d63 	.word	0x399b1d63
 800686c:	3b5bcf0f 	.word	0x3b5bcf0f
 8006870:	43889333 	.word	0x43889333
 8006874:	40533333 	.word	0x40533333
 8006878:	3dda09cc 	.word	0x3dda09cc
 800687c:	3f19999a 	.word	0x3f19999a
 8006880:	3f428f5c 	.word	0x3f428f5c
 8006884:	3b23d70a 	.word	0x3b23d70a

08006888 <_ZN6AdcDmaILh4EEC1EP17ADC_HandleTypeDef>:

	uint16_t m_numberOfAverages = 1;
	uint16_t m_averagingCounter = 0;

public:
	AdcDma(ADC_HandleTypeDef *hadc) : m_hadc{ hadc } {
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <_ZN6AdcDmaILh4EEC1EP17ADC_HandleTypeDef+0x3c>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	721a      	strb	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	871a      	strh	r2, [r3, #56]	; 0x38
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	875a      	strh	r2, [r3, #58]	; 0x3a
		static_assert(NUMBER_OF_CONVERSIONS <= 16, "Number of conversions needs to be less than 17!");
	}
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	0801c250 	.word	0x0801c250

080068c8 <_ZN6AdcDmaILh4EE4initEt>:

	virtual ~AdcDma() {}

	void init(uint16_t numberOfAverages = 1) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	807b      	strh	r3, [r7, #2]
		m_numberOfAverages = numberOfAverages;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	887a      	ldrh	r2, [r7, #2]
 80068d8:	871a      	strh	r2, [r3, #56]	; 0x38
		if(m_numberOfAverages == 0 || m_numberOfAverages >= 1048576) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d107      	bne.n	80068f2 <_ZN6AdcDmaILh4EE4initEt+0x2a>
			printDebug("Error in AdcDMA::init(): Number of averages invalid!\n");
 80068e2:	f012 fac7 	bl	8018e74 <vPortEnterCritical>
 80068e6:	480f      	ldr	r0, [pc, #60]	; (8006924 <_ZN6AdcDmaILh4EE4initEt+0x5c>)
 80068e8:	f014 fb54 	bl	801af94 <puts>
 80068ec:	f012 faf2 	bl	8018ed4 <vPortExitCritical>
			while(1);
 80068f0:	e7fe      	b.n	80068f0 <_ZN6AdcDmaILh4EE4initEt+0x28>
		}

		if(NUMBER_OF_CONVERSIONS != m_hadc->Init.NbrOfConversion) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d007      	beq.n	800690c <_ZN6AdcDmaILh4EE4initEt+0x44>
			printDebug("Error in AdcDMA::init(): Number of conversions does not match the configuration in CubeMX!\n");
 80068fc:	f012 faba 	bl	8018e74 <vPortEnterCritical>
 8006900:	4809      	ldr	r0, [pc, #36]	; (8006928 <_ZN6AdcDmaILh4EE4initEt+0x60>)
 8006902:	f014 fb47 	bl	801af94 <puts>
 8006906:	f012 fae5 	bl	8018ed4 <vPortExitCritical>
			while(1);
 800690a:	e7fe      	b.n	800690a <_ZN6AdcDmaILh4EE4initEt+0x42>
		}

		// Get task handle which should be notified later
		m_xTaskToNotify = xTaskGetCurrentTaskHandle();
 800690c:	f011 f9f2 	bl	8017cf4 <xTaskGetCurrentTaskHandle>
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60da      	str	r2, [r3, #12]

		// Init done
		m_initDone = 1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	721a      	strb	r2, [r3, #8]
	}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	0801bd58 	.word	0x0801bd58
 8006928:	0801bd90 	.word	0x0801bd90

0800692c <_ZN6AdcDmaILh4EE5startEv>:

	void start() {
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
		if(!m_initDone) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7a1b      	ldrb	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <_ZN6AdcDmaILh4EE5startEv+0x20>
			printDebug("Error in AdcDma::start(): init() was not called!\n");
 800693c:	f012 fa9a 	bl	8018e74 <vPortEnterCritical>
 8006940:	4811      	ldr	r0, [pc, #68]	; (8006988 <_ZN6AdcDmaILh4EE5startEv+0x5c>)
 8006942:	f014 fb27 	bl	801af94 <puts>
 8006946:	f012 fac5 	bl	8018ed4 <vPortExitCritical>
			while(1);
 800694a:	e7fe      	b.n	800694a <_ZN6AdcDmaILh4EE5startEv+0x1e>
		}

		// Zero averaging buffer
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b03      	cmp	r3, #3
 8006954:	dc09      	bgt.n	800696a <_ZN6AdcDmaILh4EE5startEv+0x3e>
			m_averagingBuffer[i] = 0;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	3206      	adds	r2, #6
 800695c:	2100      	movs	r1, #0
 800695e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e7f2      	b.n	8006950 <_ZN6AdcDmaILh4EE5startEv+0x24>
		}

		// Reset averaging counter
		m_averagingCounter = 0;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	875a      	strh	r2, [r3, #58]	; 0x3a

		// Start ADC in DMA mode
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)m_dmaBuffer, NUMBER_OF_CONVERSIONS);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6858      	ldr	r0, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3310      	adds	r3, #16
 8006978:	2204      	movs	r2, #4
 800697a:	4619      	mov	r1, r3
 800697c:	f008 ff22 	bl	800f7c4 <HAL_ADC_Start_DMA>
	}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	0801bdec 	.word	0x0801bdec

0800698c <_ZN6AdcDmaILh4EE7getDataEv>:

	float* getData() {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
		if(!m_initDone) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7a1b      	ldrb	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d107      	bne.n	80069ac <_ZN6AdcDmaILh4EE7getDataEv+0x20>
			printDebug("Error in AdcDma::getData(): init() was not called!\n");
 800699c:	f012 fa6a 	bl	8018e74 <vPortEnterCritical>
 80069a0:	4816      	ldr	r0, [pc, #88]	; (80069fc <_ZN6AdcDmaILh4EE7getDataEv+0x70>)
 80069a2:	f014 faf7 	bl	801af94 <puts>
 80069a6:	f012 fa95 	bl	8018ed4 <vPortExitCritical>
			while(1);
 80069aa:	e7fe      	b.n	80069aa <_ZN6AdcDmaILh4EE7getDataEv+0x1e>
		}

		// Divide by number of samples and return buffer
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	dc1b      	bgt.n	80069ee <_ZN6AdcDmaILh4EE7getDataEv+0x62>
			m_dataBuffer[i] = m_averagingBuffer[i] / static_cast<float>(m_numberOfAverages);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	3206      	adds	r2, #6
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	330a      	adds	r3, #10
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e7e0      	b.n	80069b0 <_ZN6AdcDmaILh4EE7getDataEv+0x24>
		}
		return m_dataBuffer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3328      	adds	r3, #40	; 0x28
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	0801be20 	.word	0x0801be20

08006a00 <_Z41__static_initialization_and_destruction_0ii>:
}
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d108      	bne.n	8006a22 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d103      	bne.n	8006a22 <_Z41__static_initialization_and_destruction_0ii+0x22>
AdcDma<4> adc1{&hadc1};
 8006a1a:	4909      	ldr	r1, [pc, #36]	; (8006a40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006a1c:	4809      	ldr	r0, [pc, #36]	; (8006a44 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006a1e:	f7ff ff33 	bl	8006888 <_ZN6AdcDmaILh4EEC1EP17ADC_HandleTypeDef>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d107      	bne.n	8006a38 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d102      	bne.n	8006a38 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006a32:	4804      	ldr	r0, [pc, #16]	; (8006a44 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006a34:	f000 f808 	bl	8006a48 <_ZN6AdcDmaILh4EED1Ev>
}
 8006a38:	bf00      	nop
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000208 	.word	0x20000208
 8006a44:	200001c4 	.word	0x200001c4

08006a48 <_ZN6AdcDmaILh4EED1Ev>:
	virtual ~AdcDma() {}
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <_ZN6AdcDmaILh4EED1Ev+0x1c>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	0801c250 	.word	0x0801c250

08006a68 <_ZN6AdcDmaILh4EED0Ev>:
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ffe9 	bl	8006a48 <_ZN6AdcDmaILh4EED1Ev>
 8006a76:	213c      	movs	r1, #60	; 0x3c
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f012 fd17 	bl	80194ac <_ZdlPvj>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <_GLOBAL__sub_I_adc1>:
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a90:	2001      	movs	r0, #1
 8006a92:	f7ff ffb5 	bl	8006a00 <_Z41__static_initialization_and_destruction_0ii>
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_GLOBAL__sub_D_adc1>:
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	f7ff ffad 	bl	8006a00 <_Z41__static_initialization_and_destruction_0ii>
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <_ZN8WatchdogC1Em>:

/**
 * Constructor for Watchdog class
 * @param timeoutMs Watchdog timeout in milliseconds
 */
Watchdog::Watchdog(uint32_t timeoutMs) : m_timeoutMs{ timeoutMs } {
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <_ZN8WatchdogC1Em+0x2c>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	0801c260 	.word	0x0801c260

08006ad8 <_ZN8WatchdogD1Ev>:

Watchdog::~Watchdog() {
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <_ZN8WatchdogD1Ev+0x1c>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	0801c260 	.word	0x0801c260

08006af8 <_ZN8WatchdogD0Ev>:
Watchdog::~Watchdog() {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
}
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ffe9 	bl	8006ad8 <_ZN8WatchdogD1Ev>
 8006b06:	210c      	movs	r1, #12
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f012 fccf 	bl	80194ac <_ZdlPvj>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <_ZN8Watchdog5resetEv>:

/**
 * Reset the watchdog
 */
void Watchdog::reset() {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	m_lastWatchdogReset = xTaskGetTickCount();
 8006b20:	f010 fd56 	bl	80175d0 <xTaskGetTickCount>
 8006b24:	4602      	mov	r2, r0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <_ZN8Watchdog10isTimedOutEv>:

/**
 * Check whether the watchdog timed out.
 * @return true if there was a timeout
 */
bool Watchdog::isTimedOut() {
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
	if(xTaskGetTickCount() - m_lastWatchdogReset > m_timeoutMs) {
 8006b3a:	f010 fd49 	bl	80175d0 <xTaskGetTickCount>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bf8c      	ite	hi
 8006b4e:	2301      	movhi	r3, #1
 8006b50:	2300      	movls	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <_ZN8Watchdog10isTimedOutEv+0x2a>
		return true;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <_ZN8Watchdog10isTimedOutEv+0x2c>
	} else {
		return false;
 8006b5c:	2300      	movs	r3, #0
	}
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <_ZN11ApplicationC1Ev>:
#include <Application.hpp>
#include "FreeRTOS.h"
#include "task.h"
#include <stdio.h>

Application::Application(){
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
	/* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
	/* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
	taskAttributes.stack_size=256 * 4;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b7c:	619a      	str	r2, [r3, #24]
	taskAttributes.priority = (osPriority_t) osPriorityNormal;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2218      	movs	r2, #24
 8006b82:	61da      	str	r2, [r3, #28]
	//this attributes must be NULL / 0 and are only used for static memory allocation
	taskAttributes.cb_mem = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	60da      	str	r2, [r3, #12]
	taskAttributes.stack_mem = NULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	615a      	str	r2, [r3, #20]
	taskAttributes.cb_size = 0;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
	taskAttributes.attr_bits = 0;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	609a      	str	r2, [r3, #8]
#ifdef DEBUG
	printf("new application!\n");
 8006b9c:	4803      	ldr	r0, [pc, #12]	; (8006bac <_ZN11ApplicationC1Ev+0x44>)
 8006b9e:	f014 f9f9 	bl	801af94 <puts>
#endif
}
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	0801be54 	.word	0x0801be54

08006bb0 <_ZN11Application6createEPKcPFvPvES2_>:

osThreadId_t Application::create(const char* taskName, osThreadFunc_t func, void* attr)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
	setName(taskName);
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f819 	bl	8006bf8 <_ZN11Application7setNameEPKc>
	taskHandle = osThreadNew(func, attr, &taskAttributes);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f00e fa44 	bl	801505c <osThreadNew>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]
	if(taskHandle==NULL){
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <_ZN11Application6createEPKcPFvPvES2_+0x38>
#ifdef DEBUG
	printf("task creation failed (most likely EOM or false parameter)!\n");
 8006be2:	4804      	ldr	r0, [pc, #16]	; (8006bf4 <_ZN11Application6createEPKcPFvPvES2_+0x44>)
 8006be4:	f014 f9d6 	bl	801af94 <puts>
#endif
	}

	return taskHandle;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	0801be68 	.word	0x0801be68

08006bf8 <_ZN11Application7setNameEPKc>:

void Application::setName(const char* name){
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
	taskAttributes.name=name;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	605a      	str	r2, [r3, #4]
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <_ZN11Application12setStackSizeEi>:

void Application::setStackSize(int stacksize){
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	taskAttributes.stack_size=stacksize;
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	619a      	str	r2, [r3, #24]
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <_ZN11Application11setPriorityE12osPriority_t>:

void Application::setPriority(osPriority_t prio){
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
	if(taskHandle==NULL){
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <_ZN11Application11setPriorityE12osPriority_t+0x1a>
		taskAttributes.priority = (osPriority_t) prio;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	61da      	str	r2, [r3, #28]
	}else{
		osThreadSetPriority(taskHandle, prio);
	}
}
 8006c48:	e005      	b.n	8006c56 <_ZN11Application11setPriorityE12osPriority_t+0x26>
		osThreadSetPriority(taskHandle, prio);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f00e fa95 	bl	8015180 <osThreadSetPriority>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c66:	463b      	mov	r3, r7
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006c72:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c74:	4a39      	ldr	r2, [pc, #228]	; (8006d5c <MX_ADC1_Init+0xfc>)
 8006c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006c78:	4b37      	ldr	r3, [pc, #220]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006c80:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006c86:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006c8c:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006ca2:	4a2f      	ldr	r2, [pc, #188]	; (8006d60 <MX_ADC1_Init+0x100>)
 8006ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006cac:	4b2a      	ldr	r3, [pc, #168]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006cae:	2204      	movs	r2, #4
 8006cb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006cb2:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006cba:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006cc0:	4825      	ldr	r0, [pc, #148]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006cc2:	f008 fd3b 	bl	800f73c <HAL_ADC_Init>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006ccc:	f006 f83c 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006cd0:	230a      	movs	r3, #10
 8006cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006cd8:	2307      	movs	r3, #7
 8006cda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006cdc:	463b      	mov	r3, r7
 8006cde:	4619      	mov	r1, r3
 8006ce0:	481d      	ldr	r0, [pc, #116]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006ce2:	f008 fe93 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006cec:	f006 f82c 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006cf0:	230c      	movs	r3, #12
 8006cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8006cf8:	2305      	movs	r3, #5
 8006cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4815      	ldr	r0, [pc, #84]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006d02:	f008 fe83 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8006d0c:	f006 f81c 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006d10:	2310      	movs	r3, #16
 8006d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006d14:	2303      	movs	r3, #3
 8006d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006d18:	2307      	movs	r3, #7
 8006d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	4619      	mov	r1, r3
 8006d20:	480d      	ldr	r0, [pc, #52]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006d22:	f008 fe73 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8006d2c:	f006 f80c 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006d30:	2311      	movs	r3, #17
 8006d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006d34:	2304      	movs	r3, #4
 8006d36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8006d38:	2305      	movs	r3, #5
 8006d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4805      	ldr	r0, [pc, #20]	; (8006d58 <MX_ADC1_Init+0xf8>)
 8006d42:	f008 fe63 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8006d4c:	f005 fffc 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000208 	.word	0x20000208
 8006d5c:	40012000 	.word	0x40012000
 8006d60:	0f000001 	.word	0x0f000001

08006d64 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006d76:	4b7c      	ldr	r3, [pc, #496]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006d78:	4a7c      	ldr	r2, [pc, #496]	; (8006f6c <MX_ADC2_Init+0x208>)
 8006d7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006d7c:	4b7a      	ldr	r3, [pc, #488]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006d84:	4b78      	ldr	r3, [pc, #480]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006d8a:	4b77      	ldr	r3, [pc, #476]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006d90:	4b75      	ldr	r3, [pc, #468]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006d96:	4b74      	ldr	r3, [pc, #464]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d9e:	4b72      	ldr	r3, [pc, #456]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006da4:	4b70      	ldr	r3, [pc, #448]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006da6:	4a72      	ldr	r2, [pc, #456]	; (8006f70 <MX_ADC2_Init+0x20c>)
 8006da8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006daa:	4b6f      	ldr	r3, [pc, #444]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006db0:	4b6d      	ldr	r3, [pc, #436]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006db2:	220e      	movs	r2, #14
 8006db4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006db6:	4b6c      	ldr	r3, [pc, #432]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dbe:	4b6a      	ldr	r3, [pc, #424]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006dc4:	4868      	ldr	r0, [pc, #416]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006dc6:	f008 fcb9 	bl	800f73c <HAL_ADC_Init>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006dd0:	f005 ffba 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006dd4:	2306      	movs	r3, #6
 8006dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006de0:	463b      	mov	r3, r7
 8006de2:	4619      	mov	r1, r3
 8006de4:	4860      	ldr	r0, [pc, #384]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006de6:	f008 fe11 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006df0:	f005 ffaa 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006df4:	2305      	movs	r3, #5
 8006df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4859      	ldr	r0, [pc, #356]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006e02:	f008 fe03 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006e0c:	f005 ff9c 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006e10:	2309      	movs	r3, #9
 8006e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006e14:	2303      	movs	r3, #3
 8006e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e18:	463b      	mov	r3, r7
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4852      	ldr	r0, [pc, #328]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006e1e:	f008 fdf5 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006e28:	f005 ff8e 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006e30:	2304      	movs	r3, #4
 8006e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e34:	463b      	mov	r3, r7
 8006e36:	4619      	mov	r1, r3
 8006e38:	484b      	ldr	r0, [pc, #300]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006e3a:	f008 fde7 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006e44:	f005 ff80 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006e4c:	2305      	movs	r3, #5
 8006e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e50:	463b      	mov	r3, r7
 8006e52:	4619      	mov	r1, r3
 8006e54:	4844      	ldr	r0, [pc, #272]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006e56:	f008 fdd9 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006e60:	f005 ff72 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006e68:	2306      	movs	r3, #6
 8006e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	4619      	mov	r1, r3
 8006e70:	483d      	ldr	r0, [pc, #244]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006e72:	f008 fdcb 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006e7c:	f005 ff64 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006e80:	2304      	movs	r3, #4
 8006e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006e84:	2307      	movs	r3, #7
 8006e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e88:	463b      	mov	r3, r7
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4836      	ldr	r0, [pc, #216]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006e8e:	f008 fdbd 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006e98:	f005 ff56 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	482f      	ldr	r0, [pc, #188]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006eaa:	f008 fdaf 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006eb4:	f005 ff48 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006eb8:	230b      	movs	r3, #11
 8006eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006ebc:	2309      	movs	r3, #9
 8006ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4828      	ldr	r0, [pc, #160]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006ec6:	f008 fda1 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006ed0:	f005 ff3a 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006ed4:	230d      	movs	r3, #13
 8006ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006ed8:	230a      	movs	r3, #10
 8006eda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006edc:	463b      	mov	r3, r7
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4821      	ldr	r0, [pc, #132]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006ee2:	f008 fd93 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006eec:	f005 ff2c 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006ef0:	230e      	movs	r3, #14
 8006ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006ef4:	230b      	movs	r3, #11
 8006ef6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ef8:	463b      	mov	r3, r7
 8006efa:	4619      	mov	r1, r3
 8006efc:	481a      	ldr	r0, [pc, #104]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006efe:	f008 fd85 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006f08:	f005 ff1e 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006f10:	230c      	movs	r3, #12
 8006f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006f14:	463b      	mov	r3, r7
 8006f16:	4619      	mov	r1, r3
 8006f18:	4813      	ldr	r0, [pc, #76]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006f1a:	f008 fd77 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8006f24:	f005 ff10 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006f28:	2307      	movs	r3, #7
 8006f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006f2c:	230d      	movs	r3, #13
 8006f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006f30:	463b      	mov	r3, r7
 8006f32:	4619      	mov	r1, r3
 8006f34:	480c      	ldr	r0, [pc, #48]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006f36:	f008 fd69 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006f40:	f005 ff02 	bl	800cd48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006f44:	230f      	movs	r3, #15
 8006f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006f48:	230e      	movs	r3, #14
 8006f4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4805      	ldr	r0, [pc, #20]	; (8006f68 <MX_ADC2_Init+0x204>)
 8006f52:	f008 fd5b 	bl	800fa0c <HAL_ADC_ConfigChannel>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006f5c:	f005 fef4 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000250 	.word	0x20000250
 8006f6c:	40012100 	.word	0x40012100
 8006f70:	0f000001 	.word	0x0f000001

08006f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	; 0x38
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	609a      	str	r2, [r3, #8]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a78      	ldr	r2, [pc, #480]	; (8007174 <HAL_ADC_MspInit+0x200>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d157      	bne.n	8007046 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f96:	2300      	movs	r3, #0
 8006f98:	623b      	str	r3, [r7, #32]
 8006f9a:	4b77      	ldr	r3, [pc, #476]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9e:	4a76      	ldr	r2, [pc, #472]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8006fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fa6:	4b74      	ldr	r3, [pc, #464]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fae:	623b      	str	r3, [r7, #32]
 8006fb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	4b70      	ldr	r3, [pc, #448]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	4a6f      	ldr	r2, [pc, #444]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fc2:	4b6d      	ldr	r3, [pc, #436]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006fce:	2305      	movs	r3, #5
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4866      	ldr	r0, [pc, #408]	; (800717c <HAL_ADC_MspInit+0x208>)
 8006fe2:	f00a fd81 	bl	8011ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006fe6:	4b66      	ldr	r3, [pc, #408]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8006fe8:	4a66      	ldr	r2, [pc, #408]	; (8007184 <HAL_ADC_MspInit+0x210>)
 8006fea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006fec:	4b64      	ldr	r3, [pc, #400]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ff2:	4b63      	ldr	r3, [pc, #396]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ff8:	4b61      	ldr	r3, [pc, #388]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006ffe:	4b60      	ldr	r3, [pc, #384]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8007000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007004:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007006:	4b5e      	ldr	r3, [pc, #376]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8007008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800700c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800700e:	4b5c      	ldr	r3, [pc, #368]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8007010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007014:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007016:	4b5a      	ldr	r3, [pc, #360]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8007018:	2200      	movs	r2, #0
 800701a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800701c:	4b58      	ldr	r3, [pc, #352]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 800701e:	2200      	movs	r2, #0
 8007020:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007022:	4b57      	ldr	r3, [pc, #348]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8007024:	2200      	movs	r2, #0
 8007026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007028:	4855      	ldr	r0, [pc, #340]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 800702a:	f009 ff5d 	bl	8010ee8 <HAL_DMA_Init>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8007034:	f005 fe88 	bl	800cd48 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a51      	ldr	r2, [pc, #324]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
 800703e:	4a50      	ldr	r2, [pc, #320]	; (8007180 <HAL_ADC_MspInit+0x20c>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8007044:	e092      	b.n	800716c <HAL_ADC_MspInit+0x1f8>
  else if(adcHandle->Instance==ADC2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a4f      	ldr	r2, [pc, #316]	; (8007188 <HAL_ADC_MspInit+0x214>)
 800704c:	4293      	cmp	r3, r2
 800704e:	f040 808d 	bne.w	800716c <HAL_ADC_MspInit+0x1f8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007052:	2300      	movs	r3, #0
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	4b48      	ldr	r3, [pc, #288]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	4a47      	ldr	r2, [pc, #284]	; (8007178 <HAL_ADC_MspInit+0x204>)
 800705c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007060:	6453      	str	r3, [r2, #68]	; 0x44
 8007062:	4b45      	ldr	r3, [pc, #276]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	4b41      	ldr	r3, [pc, #260]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	4a40      	ldr	r2, [pc, #256]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007078:	f043 0304 	orr.w	r3, r3, #4
 800707c:	6313      	str	r3, [r2, #48]	; 0x30
 800707e:	4b3e      	ldr	r3, [pc, #248]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	4a39      	ldr	r2, [pc, #228]	; (8007178 <HAL_ADC_MspInit+0x204>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	6313      	str	r3, [r2, #48]	; 0x30
 800709a:	4b37      	ldr	r3, [pc, #220]	; (8007178 <HAL_ADC_MspInit+0x204>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	4b33      	ldr	r3, [pc, #204]	; (8007178 <HAL_ADC_MspInit+0x204>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	4a32      	ldr	r2, [pc, #200]	; (8007178 <HAL_ADC_MspInit+0x204>)
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	6313      	str	r3, [r2, #48]	; 0x30
 80070b6:	4b30      	ldr	r3, [pc, #192]	; (8007178 <HAL_ADC_MspInit+0x204>)
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|LP9_sensing_Pin|ADC_IN12_Board_VCC_Pin|LP10_sensing_Pin
 80070c2:	233f      	movs	r3, #63	; 0x3f
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070c6:	2303      	movs	r3, #3
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d2:	4619      	mov	r1, r3
 80070d4:	4829      	ldr	r0, [pc, #164]	; (800717c <HAL_ADC_MspInit+0x208>)
 80070d6:	f00a fd07 	bl	8011ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP6_sensing_Pin|LP5_sensing_Pin|HP2_sensing_Pin|LP8_sensing_Pin
 80070da:	23ff      	movs	r3, #255	; 0xff
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070de:	2303      	movs	r3, #3
 80070e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ea:	4619      	mov	r1, r3
 80070ec:	4827      	ldr	r0, [pc, #156]	; (800718c <HAL_ADC_MspInit+0x218>)
 80070ee:	f00a fcfb 	bl	8011ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP4_sensing_Pin|LP3_sensing_Pin;
 80070f2:	2303      	movs	r3, #3
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070f6:	2303      	movs	r3, #3
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007102:	4619      	mov	r1, r3
 8007104:	4822      	ldr	r0, [pc, #136]	; (8007190 <HAL_ADC_MspInit+0x21c>)
 8007106:	f00a fcef 	bl	8011ae8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <HAL_ADC_MspInit+0x220>)
 800710c:	4a22      	ldr	r2, [pc, #136]	; (8007198 <HAL_ADC_MspInit+0x224>)
 800710e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007110:	4b20      	ldr	r3, [pc, #128]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007116:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007118:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <HAL_ADC_MspInit+0x220>)
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800711e:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007120:	2200      	movs	r2, #0
 8007122:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007124:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800712a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <HAL_ADC_MspInit+0x220>)
 800712e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007132:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007134:	4b17      	ldr	r3, [pc, #92]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800713a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800713c:	4b15      	ldr	r3, [pc, #84]	; (8007194 <HAL_ADC_MspInit+0x220>)
 800713e:	2200      	movs	r2, #0
 8007140:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007144:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007148:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <HAL_ADC_MspInit+0x220>)
 800714c:	2200      	movs	r2, #0
 800714e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007150:	4810      	ldr	r0, [pc, #64]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007152:	f009 fec9 	bl	8010ee8 <HAL_DMA_Init>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_ADC_MspInit+0x1ec>
      Error_Handler();
 800715c:	f005 fdf4 	bl	800cd48 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
 8007166:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <HAL_ADC_MspInit+0x220>)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800716c:	bf00      	nop
 800716e:	3738      	adds	r7, #56	; 0x38
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40012000 	.word	0x40012000
 8007178:	40023800 	.word	0x40023800
 800717c:	40020800 	.word	0x40020800
 8007180:	20000298 	.word	0x20000298
 8007184:	40026410 	.word	0x40026410
 8007188:	40012100 	.word	0x40012100
 800718c:	40020000 	.word	0x40020000
 8007190:	40020400 	.word	0x40020400
 8007194:	200002f8 	.word	0x200002f8
 8007198:	40026440 	.word	0x40026440

0800719c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <MX_CAN1_Init+0x64>)
 80071a2:	4a18      	ldr	r2, [pc, #96]	; (8007204 <MX_CAN1_Init+0x68>)
 80071a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80071a6:	4b16      	ldr	r3, [pc, #88]	; (8007200 <MX_CAN1_Init+0x64>)
 80071a8:	2203      	movs	r2, #3
 80071aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80071ac:	4b14      	ldr	r3, [pc, #80]	; (8007200 <MX_CAN1_Init+0x64>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80071b2:	4b13      	ldr	r3, [pc, #76]	; (8007200 <MX_CAN1_Init+0x64>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80071b8:	4b11      	ldr	r3, [pc, #68]	; (8007200 <MX_CAN1_Init+0x64>)
 80071ba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80071be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80071c0:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <MX_CAN1_Init+0x64>)
 80071c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80071c8:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <MX_CAN1_Init+0x64>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <MX_CAN1_Init+0x64>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80071d4:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <MX_CAN1_Init+0x64>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80071da:	4b09      	ldr	r3, [pc, #36]	; (8007200 <MX_CAN1_Init+0x64>)
 80071dc:	2201      	movs	r2, #1
 80071de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <MX_CAN1_Init+0x64>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <MX_CAN1_Init+0x64>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80071ec:	4804      	ldr	r0, [pc, #16]	; (8007200 <MX_CAN1_Init+0x64>)
 80071ee:	f008 fead 	bl	800ff4c <HAL_CAN_Init>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80071f8:	f005 fda6 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80071fc:	bf00      	nop
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000358 	.word	0x20000358
 8007204:	40006400 	.word	0x40006400

08007208 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800720c:	4b17      	ldr	r3, [pc, #92]	; (800726c <MX_CAN2_Init+0x64>)
 800720e:	4a18      	ldr	r2, [pc, #96]	; (8007270 <MX_CAN2_Init+0x68>)
 8007210:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <MX_CAN2_Init+0x64>)
 8007214:	2203      	movs	r2, #3
 8007216:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8007218:	4b14      	ldr	r3, [pc, #80]	; (800726c <MX_CAN2_Init+0x64>)
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <MX_CAN2_Init+0x64>)
 8007220:	2200      	movs	r2, #0
 8007222:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8007224:	4b11      	ldr	r3, [pc, #68]	; (800726c <MX_CAN2_Init+0x64>)
 8007226:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800722a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <MX_CAN2_Init+0x64>)
 800722e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007232:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <MX_CAN2_Init+0x64>)
 8007236:	2200      	movs	r2, #0
 8007238:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <MX_CAN2_Init+0x64>)
 800723c:	2200      	movs	r2, #0
 800723e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <MX_CAN2_Init+0x64>)
 8007242:	2200      	movs	r2, #0
 8007244:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <MX_CAN2_Init+0x64>)
 8007248:	2201      	movs	r2, #1
 800724a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <MX_CAN2_Init+0x64>)
 800724e:	2200      	movs	r2, #0
 8007250:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <MX_CAN2_Init+0x64>)
 8007254:	2200      	movs	r2, #0
 8007256:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8007258:	4804      	ldr	r0, [pc, #16]	; (800726c <MX_CAN2_Init+0x64>)
 800725a:	f008 fe77 	bl	800ff4c <HAL_CAN_Init>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8007264:	f005 fd70 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8007268:	bf00      	nop
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000380 	.word	0x20000380
 8007270:	40006800 	.word	0x40006800

08007274 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	; 0x30
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800727c:	f107 031c 	add.w	r3, r7, #28
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	609a      	str	r2, [r3, #8]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a52      	ldr	r2, [pc, #328]	; (80073dc <HAL_CAN_MspInit+0x168>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d145      	bne.n	8007322 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007296:	4b52      	ldr	r3, [pc, #328]	; (80073e0 <HAL_CAN_MspInit+0x16c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3301      	adds	r3, #1
 800729c:	4a50      	ldr	r2, [pc, #320]	; (80073e0 <HAL_CAN_MspInit+0x16c>)
 800729e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80072a0:	4b4f      	ldr	r3, [pc, #316]	; (80073e0 <HAL_CAN_MspInit+0x16c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10d      	bne.n	80072c4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80072a8:	2300      	movs	r3, #0
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	4b4d      	ldr	r3, [pc, #308]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	4a4c      	ldr	r2, [pc, #304]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 80072b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072b6:	6413      	str	r3, [r2, #64]	; 0x40
 80072b8:	4b4a      	ldr	r3, [pc, #296]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	4b46      	ldr	r3, [pc, #280]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	4a45      	ldr	r2, [pc, #276]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 80072ce:	f043 0308 	orr.w	r3, r3, #8
 80072d2:	6313      	str	r3, [r2, #48]	; 0x30
 80072d4:	4b43      	ldr	r3, [pc, #268]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80072e0:	2303      	movs	r3, #3
 80072e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e4:	2302      	movs	r3, #2
 80072e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ec:	2303      	movs	r3, #3
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80072f0:	2309      	movs	r3, #9
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072f4:	f107 031c 	add.w	r3, r7, #28
 80072f8:	4619      	mov	r1, r3
 80072fa:	483b      	ldr	r0, [pc, #236]	; (80073e8 <HAL_CAN_MspInit+0x174>)
 80072fc:	f00a fbf4 	bl	8011ae8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007300:	2200      	movs	r2, #0
 8007302:	2105      	movs	r1, #5
 8007304:	2014      	movs	r0, #20
 8007306:	f009 fda9 	bl	8010e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800730a:	2014      	movs	r0, #20
 800730c:	f009 fdc2 	bl	8010e94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8007310:	2200      	movs	r2, #0
 8007312:	2105      	movs	r1, #5
 8007314:	2015      	movs	r0, #21
 8007316:	f009 fda1 	bl	8010e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800731a:	2015      	movs	r0, #21
 800731c:	f009 fdba 	bl	8010e94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8007320:	e057      	b.n	80073d2 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a31      	ldr	r2, [pc, #196]	; (80073ec <HAL_CAN_MspInit+0x178>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d152      	bne.n	80073d2 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	4a2b      	ldr	r2, [pc, #172]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 8007336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800733a:	6413      	str	r3, [r2, #64]	; 0x40
 800733c:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <HAL_CAN_MspInit+0x16c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3301      	adds	r3, #1
 800734e:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <HAL_CAN_MspInit+0x16c>)
 8007350:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007352:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <HAL_CAN_MspInit+0x16c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d10d      	bne.n	8007376 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	4b21      	ldr	r3, [pc, #132]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	4a20      	ldr	r2, [pc, #128]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 8007364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007368:	6413      	str	r3, [r2, #64]	; 0x40
 800736a:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	4a19      	ldr	r2, [pc, #100]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	6313      	str	r3, [r2, #48]	; 0x30
 8007386:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <HAL_CAN_MspInit+0x170>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	60bb      	str	r3, [r7, #8]
 8007390:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007392:	2360      	movs	r3, #96	; 0x60
 8007394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007396:	2302      	movs	r3, #2
 8007398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800739e:	2303      	movs	r3, #3
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80073a2:	2309      	movs	r3, #9
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a6:	f107 031c 	add.w	r3, r7, #28
 80073aa:	4619      	mov	r1, r3
 80073ac:	4810      	ldr	r0, [pc, #64]	; (80073f0 <HAL_CAN_MspInit+0x17c>)
 80073ae:	f00a fb9b 	bl	8011ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80073b2:	2200      	movs	r2, #0
 80073b4:	2105      	movs	r1, #5
 80073b6:	2040      	movs	r0, #64	; 0x40
 80073b8:	f009 fd50 	bl	8010e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80073bc:	2040      	movs	r0, #64	; 0x40
 80073be:	f009 fd69 	bl	8010e94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80073c2:	2200      	movs	r2, #0
 80073c4:	2105      	movs	r1, #5
 80073c6:	2041      	movs	r0, #65	; 0x41
 80073c8:	f009 fd48 	bl	8010e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80073cc:	2041      	movs	r0, #65	; 0x41
 80073ce:	f009 fd61 	bl	8010e94 <HAL_NVIC_EnableIRQ>
}
 80073d2:	bf00      	nop
 80073d4:	3730      	adds	r7, #48	; 0x30
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40006400 	.word	0x40006400
 80073e0:	200003a8 	.word	0x200003a8
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40020c00 	.word	0x40020c00
 80073ec:	40006800 	.word	0x40006800
 80073f0:	40020400 	.word	0x40020400

080073f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <MX_CRC_Init+0x20>)
 80073fa:	4a07      	ldr	r2, [pc, #28]	; (8007418 <MX_CRC_Init+0x24>)
 80073fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80073fe:	4805      	ldr	r0, [pc, #20]	; (8007414 <MX_CRC_Init+0x20>)
 8007400:	f009 fd56 	bl	8010eb0 <HAL_CRC_Init>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800740a:	f005 fc9d 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200003ac 	.word	0x200003ac
 8007418:	40023000 	.word	0x40023000

0800741c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a0b      	ldr	r2, [pc, #44]	; (8007458 <HAL_CRC_MspInit+0x3c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d10d      	bne.n	800744a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_CRC_MspInit+0x40>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	4a09      	ldr	r2, [pc, #36]	; (800745c <HAL_CRC_MspInit+0x40>)
 8007438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800743c:	6313      	str	r3, [r2, #48]	; 0x30
 800743e:	4b07      	ldr	r3, [pc, #28]	; (800745c <HAL_CRC_MspInit+0x40>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40023000 	.word	0x40023000
 800745c:	40023800 	.word	0x40023800

08007460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007466:	2300      	movs	r3, #0
 8007468:	607b      	str	r3, [r7, #4]
 800746a:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <MX_DMA_Init+0x98>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	4a22      	ldr	r2, [pc, #136]	; (80074f8 <MX_DMA_Init+0x98>)
 8007470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007474:	6313      	str	r3, [r2, #48]	; 0x30
 8007476:	4b20      	ldr	r3, [pc, #128]	; (80074f8 <MX_DMA_Init+0x98>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800747e:	607b      	str	r3, [r7, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007482:	2300      	movs	r3, #0
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <MX_DMA_Init+0x98>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	4a1b      	ldr	r2, [pc, #108]	; (80074f8 <MX_DMA_Init+0x98>)
 800748c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007490:	6313      	str	r3, [r2, #48]	; 0x30
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <MX_DMA_Init+0x98>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800749e:	2200      	movs	r2, #0
 80074a0:	2105      	movs	r1, #5
 80074a2:	200f      	movs	r0, #15
 80074a4:	f009 fcda 	bl	8010e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80074a8:	200f      	movs	r0, #15
 80074aa:	f009 fcf3 	bl	8010e94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80074ae:	2200      	movs	r2, #0
 80074b0:	2105      	movs	r1, #5
 80074b2:	2010      	movs	r0, #16
 80074b4:	f009 fcd2 	bl	8010e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80074b8:	2010      	movs	r0, #16
 80074ba:	f009 fceb 	bl	8010e94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80074be:	2200      	movs	r2, #0
 80074c0:	2105      	movs	r1, #5
 80074c2:	2011      	movs	r0, #17
 80074c4:	f009 fcca 	bl	8010e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80074c8:	2011      	movs	r0, #17
 80074ca:	f009 fce3 	bl	8010e94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80074ce:	2200      	movs	r2, #0
 80074d0:	2105      	movs	r1, #5
 80074d2:	2038      	movs	r0, #56	; 0x38
 80074d4:	f009 fcc2 	bl	8010e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80074d8:	2038      	movs	r0, #56	; 0x38
 80074da:	f009 fcdb 	bl	8010e94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80074de:	2200      	movs	r2, #0
 80074e0:	2105      	movs	r1, #5
 80074e2:	203a      	movs	r0, #58	; 0x3a
 80074e4:	f009 fcba 	bl	8010e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80074e8:	203a      	movs	r0, #58	; 0x3a
 80074ea:	f009 fcd3 	bl	8010e94 <HAL_NVIC_EnableIRQ>

}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40023800 	.word	0x40023800

080074fc <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0

}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <vApplicationStackOverflowHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007536:	f107 0314 	add.w	r3, r7, #20
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	609a      	str	r2, [r3, #8]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	4b4f      	ldr	r3, [pc, #316]	; (8007688 <MX_GPIO_Init+0x158>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4a4e      	ldr	r2, [pc, #312]	; (8007688 <MX_GPIO_Init+0x158>)
 8007550:	f043 0304 	orr.w	r3, r3, #4
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b4c      	ldr	r3, [pc, #304]	; (8007688 <MX_GPIO_Init+0x158>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	4b48      	ldr	r3, [pc, #288]	; (8007688 <MX_GPIO_Init+0x158>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a47      	ldr	r2, [pc, #284]	; (8007688 <MX_GPIO_Init+0x158>)
 800756c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b45      	ldr	r3, [pc, #276]	; (8007688 <MX_GPIO_Init+0x158>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	4b41      	ldr	r3, [pc, #260]	; (8007688 <MX_GPIO_Init+0x158>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a40      	ldr	r2, [pc, #256]	; (8007688 <MX_GPIO_Init+0x158>)
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b3e      	ldr	r3, [pc, #248]	; (8007688 <MX_GPIO_Init+0x158>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	60bb      	str	r3, [r7, #8]
 8007598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	4b3a      	ldr	r3, [pc, #232]	; (8007688 <MX_GPIO_Init+0x158>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	4a39      	ldr	r2, [pc, #228]	; (8007688 <MX_GPIO_Init+0x158>)
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	6313      	str	r3, [r2, #48]	; 0x30
 80075aa:	4b37      	ldr	r3, [pc, #220]	; (8007688 <MX_GPIO_Init+0x158>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4b33      	ldr	r3, [pc, #204]	; (8007688 <MX_GPIO_Init+0x158>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4a32      	ldr	r2, [pc, #200]	; (8007688 <MX_GPIO_Init+0x158>)
 80075c0:	f043 0308 	orr.w	r3, r3, #8
 80075c4:	6313      	str	r3, [r2, #48]	; 0x30
 80075c6:	4b30      	ldr	r3, [pc, #192]	; (8007688 <MX_GPIO_Init+0x158>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LP7_control_GPIO_Port, LP7_control_Pin, GPIO_PIN_RESET);
 80075d2:	2200      	movs	r2, #0
 80075d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075d8:	482c      	ldr	r0, [pc, #176]	; (800768c <MX_GPIO_Init+0x15c>)
 80075da:	f00a fc39 	bl	8011e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HP3_control_Pin|SDC_control_Pin|HP4_control_Pin|LP4_control_Pin, GPIO_PIN_RESET);
 80075de:	2200      	movs	r2, #0
 80075e0:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 80075e4:	482a      	ldr	r0, [pc, #168]	; (8007690 <MX_GPIO_Init+0x160>)
 80075e6:	f00a fc33 	bl	8011e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LP5_control_Pin|LP6_control_Pin, GPIO_PIN_RESET);
 80075ea:	2200      	movs	r2, #0
 80075ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80075f0:	4828      	ldr	r0, [pc, #160]	; (8007694 <MX_GPIO_Init+0x164>)
 80075f2:	f00a fc2d 	bl	8011e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80075f6:	2305      	movs	r3, #5
 80075f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075fa:	2303      	movs	r3, #3
 80075fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007602:	f107 0314 	add.w	r3, r7, #20
 8007606:	4619      	mov	r1, r3
 8007608:	4822      	ldr	r0, [pc, #136]	; (8007694 <MX_GPIO_Init+0x164>)
 800760a:	f00a fa6d 	bl	8011ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LP7_control_Pin;
 800760e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007614:	2301      	movs	r3, #1
 8007616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800761c:	2300      	movs	r3, #0
 800761e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LP7_control_GPIO_Port, &GPIO_InitStruct);
 8007620:	f107 0314 	add.w	r3, r7, #20
 8007624:	4619      	mov	r1, r3
 8007626:	4819      	ldr	r0, [pc, #100]	; (800768c <MX_GPIO_Init+0x15c>)
 8007628:	f00a fa5e 	bl	8011ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HP3_control_Pin|SDC_control_Pin|HP4_control_Pin|LP4_control_Pin;
 800762c:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8007630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763a:	2300      	movs	r3, #0
 800763c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800763e:	f107 0314 	add.w	r3, r7, #20
 8007642:	4619      	mov	r1, r3
 8007644:	4812      	ldr	r0, [pc, #72]	; (8007690 <MX_GPIO_Init+0x160>)
 8007646:	f00a fa4f 	bl	8011ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LP5_control_Pin|LP6_control_Pin;
 800764a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800764e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007650:	2301      	movs	r3, #1
 8007652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007658:	2300      	movs	r3, #0
 800765a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4619      	mov	r1, r3
 8007662:	480c      	ldr	r0, [pc, #48]	; (8007694 <MX_GPIO_Init+0x164>)
 8007664:	f00a fa40 	bl	8011ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8007668:	2318      	movs	r3, #24
 800766a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	4619      	mov	r1, r3
 800767a:	4807      	ldr	r0, [pc, #28]	; (8007698 <MX_GPIO_Init+0x168>)
 800767c:	f00a fa34 	bl	8011ae8 <HAL_GPIO_Init>

}
 8007680:	bf00      	nop
 8007682:	3728      	adds	r7, #40	; 0x28
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40023800 	.word	0x40023800
 800768c:	40020400 	.word	0x40020400
 8007690:	40020000 	.word	0x40020000
 8007694:	40020800 	.word	0x40020800
 8007698:	40020c00 	.word	0x40020c00

0800769c <LED_RGB_Init>:

#include "main.h"

extern TIM_HandleTypeDef htim4;

void LED_RGB_Init() {
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Green LED
 80076a0:	2100      	movs	r1, #0
 80076a2:	4806      	ldr	r0, [pc, #24]	; (80076bc <LED_RGB_Init+0x20>)
 80076a4:	f00b fa46 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	// Orange LED
 80076a8:	2104      	movs	r1, #4
 80076aa:	4804      	ldr	r0, [pc, #16]	; (80076bc <LED_RGB_Init+0x20>)
 80076ac:	f00b fa42 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Red LED
 80076b0:	2108      	movs	r1, #8
 80076b2:	4802      	ldr	r0, [pc, #8]	; (80076bc <LED_RGB_Init+0x20>)
 80076b4:	f00b fa3e 	bl	8012b34 <HAL_TIM_PWM_Start>
}
 80076b8:	bf00      	nop
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20002f78 	.word	0x20002f78

080076c0 <LED_RGB_Write>:
void LED_RGB_Write(uint8_t green, uint8_t orange, uint8_t red) {
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	71fb      	strb	r3, [r7, #7]
 80076ca:	460b      	mov	r3, r1
 80076cc:	71bb      	strb	r3, [r7, #6]
 80076ce:	4613      	mov	r3, r2
 80076d0:	717b      	strb	r3, [r7, #5]
	htim4.Instance->CCR1 = 255 - green;
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <LED_RGB_Write+0x44>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 255 - orange;
 80076de:	79bb      	ldrb	r3, [r7, #6]
 80076e0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80076e4:	4b07      	ldr	r3, [pc, #28]	; (8007704 <LED_RGB_Write+0x44>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 255 - red;
 80076ea:	797b      	ldrb	r3, [r7, #5]
 80076ec:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <LED_RGB_Write+0x44>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20002f78 	.word	0x20002f78

08007708 <LED_Green_Write>:

void LED_Green_Write(uint8_t green) {
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR1 = 255 - green;
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8007718:	4b04      	ldr	r3, [pc, #16]	; (800772c <LED_Green_Write+0x24>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20002f78 	.word	0x20002f78

08007730 <LED_Orange_Write>:
void LED_Orange_Write(uint8_t orange) {
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR2 = 255 - orange;
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <LED_Orange_Write+0x24>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20002f78 	.word	0x20002f78

08007758 <LED_Red_Write>:
void LED_Red_Write(uint8_t red) {
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
	htim4.Instance->CCR3 = 255 - red;
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <LED_Red_Write+0x24>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20002f78 	.word	0x20002f78

08007780 <_ZN3can7signals19PDU_RX_LPCh4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007790:	f000 0201 	and.w	r2, r0, #1
 8007794:	2300      	movs	r3, #0
 8007796:	4313      	orrs	r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
                return value;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
            }
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <_ZN3can7signals19PDU_RX_LPCh5_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c0:	f000 0202 	and.w	r2, r0, #2
 80077c4:	2300      	movs	r3, #0
 80077c6:	4313      	orrs	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
                return value;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
            }
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <_ZN3can7signals19PDU_RX_LPCh6_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f0:	f000 0204 	and.w	r2, r0, #4
 80077f4:	2300      	movs	r3, #0
 80077f6:	4313      	orrs	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bf14      	ite	ne
 80077fc:	2301      	movne	r3, #1
 80077fe:	2300      	moveq	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
                return value;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
            }
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <_ZN3can7signals19PDU_RX_LPCh7_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8ull) >> 3);
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007820:	f000 0208 	and.w	r2, r0, #8
 8007824:	2300      	movs	r3, #0
 8007826:	4313      	orrs	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	bf14      	ite	ne
 800782c:	2301      	movne	r3, #1
 800782e:	2300      	moveq	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
                return value;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
            }
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <_ZN3can7signals22SensorF_TX_BatteryTemp3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	b293      	uxth	r3, r2
 8007852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007856:	81fb      	strh	r3, [r7, #14]
                return value * (0.05f) + (-30.0f);
 8007858:	89fb      	ldrh	r3, [r7, #14]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007862:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007880 <_ZN3can7signals22SensorF_TX_BatteryTemp3getERKyS3_+0x40>
 8007866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800786a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800786e:	ee77 7ac7 	vsub.f32	s15, s15, s14
            }
 8007872:	eeb0 0a67 	vmov.f32	s0, s15
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	3d4ccccd 	.word	0x3d4ccccd

08007884 <_ZN3can7signals14PDU_TX_Enabled3setERyS2_Rhb>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 8007884:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	7df9      	ldrb	r1, [r7, #23]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	bf14      	ite	ne
 80078a4:	2101      	movne	r1, #1
 80078a6:	2100      	moveq	r1, #0
 80078a8:	b2c9      	uxtb	r1, r1
 80078aa:	b2c9      	uxtb	r1, r1
 80078ac:	2000      	movs	r0, #0
 80078ae:	460c      	mov	r4, r1
 80078b0:	4605      	mov	r5, r0
 80078b2:	ea42 0804 	orr.w	r8, r2, r4
 80078b6:	ea43 0905 	orr.w	r9, r3, r5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80078ca:	4770      	bx	lr

080078cc <_ZN3can7signals16PDU_TX_ErrorFlag3setERyS2_Rhb>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 80078cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80078d0:	b089      	sub	sp, #36	; 0x24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6178      	str	r0, [r7, #20]
 80078d6:	6139      	str	r1, [r7, #16]
 80078d8:	60fa      	str	r2, [r7, #12]
 80078da:	72fb      	strb	r3, [r7, #11]
                bool rawValue = value;
 80078dc:	7afb      	ldrb	r3, [r7, #11]
 80078de:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	7ff9      	ldrb	r1, [r7, #31]
 80078e8:	2000      	movs	r0, #0
 80078ea:	460c      	mov	r4, r1
 80078ec:	4605      	mov	r5, r0
 80078ee:	1921      	adds	r1, r4, r4
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	eb45 0105 	adc.w	r1, r5, r5
 80078f6:	6079      	str	r1, [r7, #4]
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	f000 0802 	and.w	r8, r0, #2
 8007900:	f04f 0900 	mov.w	r9, #0
 8007904:	ea42 0a08 	orr.w	sl, r2, r8
 8007908:	ea43 0b09 	orr.w	fp, r3, r9
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007912:	bf00      	nop
 8007914:	3724      	adds	r7, #36	; 0x24
 8007916:	46bd      	mov	sp, r7
 8007918:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800791c:	4770      	bx	lr

0800791e <_ZN3can7signals18PDU_TX_PEHWEnabled3setERyS2_Rhb>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800791e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2200      	movs	r2, #0
 800793c:	4698      	mov	r8, r3
 800793e:	4691      	mov	r9, r2
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800794c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8007950:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8007954:	f002 0404 	and.w	r4, r2, #4
 8007958:	2500      	movs	r5, #0
 800795a:	ea40 0a04 	orr.w	sl, r0, r4
 800795e:	ea41 0b05 	orr.w	fp, r1, r5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007972:	4770      	bx	lr

08007974 <_ZN3can7signals13PDU_RX_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007984:	f000 0201 	and.w	r2, r0, #1
 8007988:	2300      	movs	r3, #0
 800798a:	4313      	orrs	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	bf14      	ite	ne
 8007990:	2301      	movne	r3, #1
 8007992:	2300      	moveq	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
                return value;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
            }
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <_ZN3can7signals17PDU_RX_ErrorReset3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b4:	f000 0202 	and.w	r2, r0, #2
 80079b8:	2300      	movs	r3, #0
 80079ba:	4313      	orrs	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
                return value;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
            }
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <_ZN3can7signals17PDU_RX_PEHWEnable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e4:	f000 0204 	and.w	r2, r0, #4
 80079e8:	2300      	movs	r3, #0
 80079ea:	4313      	orrs	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf14      	ite	ne
 80079f0:	2301      	movne	r3, #1
 80079f2:	2300      	moveq	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
                return value;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
            }
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8007a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8007a16:	edd7 7a00 	vldr	s15, [r7]
 8007a1a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007a90 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x8c>
 8007a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a26:	dd01      	ble.n	8007a2c <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x28>
                    value = max;
 8007a28:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x90>)
 8007a2a:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8007a2c:	edd7 7a00 	vldr	s15, [r7]
 8007a30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a38:	d502      	bpl.n	8007a40 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 8007a40:	edd7 7a00 	vldr	s15, [r7]
 8007a44:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007a98 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf+0x94>
 8007a48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a50:	f7f8 fd90 	bl	8000574 <_ZSt5roundf>
 8007a54:	eef0 7a40 	vmov.f32	s15, s0
 8007a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a5c:	ee17 3a90 	vmov	r3, s15
 8007a60:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	8af9      	ldrh	r1, [r7, #22]
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	468a      	mov	sl, r1
 8007a6e:	4683      	mov	fp, r0
 8007a70:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8007a74:	2500      	movs	r5, #0
 8007a76:	ea42 0804 	orr.w	r8, r2, r4
 8007a7a:	ea43 0905 	orr.w	r9, r3, r5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8007a84:	bf00      	nop
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a8e:	bf00      	nop
 8007a90:	41830a3d 	.word	0x41830a3d
 8007a94:	41830a3d 	.word	0x41830a3d
 8007a98:	3b83126f 	.word	0x3b83126f

08007a9c <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8007a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa0:	b088      	sub	sp, #32
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6178      	str	r0, [r7, #20]
 8007aa6:	6139      	str	r1, [r7, #16]
 8007aa8:	60fa      	str	r2, [r7, #12]
 8007aaa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8007aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ab2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007b38 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0x9c>
 8007ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abe:	dd01      	ble.n	8007ac4 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0x28>
                    value = max;
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0xa0>)
 8007ac2:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 8007ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad0:	d502      	bpl.n	8007ad8 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8007ad2:	f04f 0300 	mov.w	r3, #0
 8007ad6:	60bb      	str	r3, [r7, #8]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 8007ad8:	edd7 7a02 	vldr	s15, [r7, #8]
 8007adc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007b40 <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf+0xa4>
 8007ae0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8007ae8:	f7f8 fd44 	bl	8000574 <_ZSt5roundf>
 8007aec:	eef0 7a40 	vmov.f32	s15, s0
 8007af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af4:	ee17 3a90 	vmov	r3, s15
 8007af8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFF0000ull;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	8bf9      	ldrh	r1, [r7, #30]
 8007b02:	2000      	movs	r0, #0
 8007b04:	4688      	mov	r8, r1
 8007b06:	4681      	mov	r9, r0
 8007b08:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8007b0c:	6079      	str	r1, [r7, #4]
 8007b0e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8007b12:	6039      	str	r1, [r7, #0]
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	f021 4470 	bic.w	r4, r1, #4026531840	; 0xf0000000
 8007b1a:	0c24      	lsrs	r4, r4, #16
 8007b1c:	0424      	lsls	r4, r4, #16
 8007b1e:	2500      	movs	r5, #0
 8007b20:	ea42 0a04 	orr.w	sl, r2, r4
 8007b24:	ea43 0b05 	orr.w	fp, r3, r5
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007b2e:	bf00      	nop
 8007b30:	3720      	adds	r7, #32
 8007b32:	46bd      	mov	sp, r7
 8007b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b38:	41830a3d 	.word	0x41830a3d
 8007b3c:	41830a3d 	.word	0x41830a3d
 8007b40:	3b83126f 	.word	0x3b83126f

08007b44 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8007b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8007b56:	edd7 7a00 	vldr	s15, [r7]
 8007b5a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007bdc <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x98>
 8007b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b66:	dd01      	ble.n	8007b6c <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x28>
                    value = max;
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x9c>)
 8007b6a:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8007b6c:	edd7 7a00 	vldr	s15, [r7]
 8007b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b78:	d502      	bpl.n	8007b80 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 8007b80:	edd7 7a00 	vldr	s15, [r7]
 8007b84:	eddf 6a17 	vldr	s13, [pc, #92]	; 8007be4 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf+0xa0>
 8007b88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8007b90:	f7f8 fcf0 	bl	8000574 <_ZSt5roundf>
 8007b94:	eef0 7a40 	vmov.f32	s15, s0
 8007b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9c:	ee17 3a90 	vmov	r3, s15
 8007ba0:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFFF00000000ull;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ba8:	8afb      	ldrh	r3, [r7, #22]
 8007baa:	2200      	movs	r2, #0
 8007bac:	469a      	mov	sl, r3
 8007bae:	4693      	mov	fp, r2
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	4653      	mov	r3, sl
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2400      	movs	r4, #0
 8007bbe:	f3c3 050b 	ubfx	r5, r3, #0, #12
 8007bc2:	ea40 0804 	orr.w	r8, r0, r4
 8007bc6:	ea41 0905 	orr.w	r9, r1, r5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8007bd0:	bf00      	nop
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bda:	bf00      	nop
 8007bdc:	41830a3d 	.word	0x41830a3d
 8007be0:	41830a3d 	.word	0x41830a3d
 8007be4:	3b83126f 	.word	0x3b83126f

08007be8 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8007be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8007bfa:	edd7 7a00 	vldr	s15, [r7]
 8007bfe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007c84 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0x9c>
 8007c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	dd01      	ble.n	8007c10 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0x28>
                    value = max;
 8007c0c:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0xa0>)
 8007c0e:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8007c10:	edd7 7a00 	vldr	s15, [r7]
 8007c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1c:	d502      	bpl.n	8007c24 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
 8007c24:	edd7 7a00 	vldr	s15, [r7]
 8007c28:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007c8c <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf+0xa4>
 8007c2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007c30:	eeb0 0a47 	vmov.f32	s0, s14
 8007c34:	f7f8 fc9e 	bl	8000574 <_ZSt5roundf>
 8007c38:	eef0 7a40 	vmov.f32	s15, s0
 8007c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c40:	ee17 3a90 	vmov	r3, s15
 8007c44:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c4c:	8afb      	ldrh	r3, [r7, #22]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	469a      	mov	sl, r3
 8007c52:	4693      	mov	fp, r2
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8007c60:	2200      	movs	r2, #0
 8007c62:	2400      	movs	r4, #0
 8007c64:	f023 4570 	bic.w	r5, r3, #4026531840	; 0xf0000000
 8007c68:	0c2d      	lsrs	r5, r5, #16
 8007c6a:	042d      	lsls	r5, r5, #16
 8007c6c:	ea40 0804 	orr.w	r8, r0, r4
 8007c70:	ea41 0905 	orr.w	r9, r1, r5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8007c7a:	bf00      	nop
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c84:	41830a3d 	.word	0x41830a3d
 8007c88:	41830a3d 	.word	0x41830a3d
 8007c8c:	3b83126f 	.word	0x3b83126f

08007c90 <_ZN3can7signals19PDU_LPCh1_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8007cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <_ZN3can7signals20PDU_LPCh10_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00ull) >> 8);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	0a02      	lsrs	r2, r0, #8
 8007cde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007ce2:	0a0b      	lsrs	r3, r1, #8
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8007cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <_ZN3can7signals19PDU_LPCh2_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	0c02      	lsrs	r2, r0, #16
 8007d22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007d26:	0c0b      	lsrs	r3, r1, #16
 8007d28:	4613      	mov	r3, r2
 8007d2a:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8007d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <_ZN3can7signals19PDU_LPCh3_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF000000ull) >> 24);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	0e02      	lsrs	r2, r0, #24
 8007d66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007d6a:	0e0b      	lsrs	r3, r1, #24
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8007d82:	eeb0 0a67 	vmov.f32	s0, s15
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <_ZN3can7signals19PDU_LPCh8_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00000000ull) >> 32);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	000a      	movs	r2, r1
 8007daa:	2300      	movs	r3, #0
 8007dac:	4613      	mov	r3, r2
 8007dae:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8007dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <_ZN3can7signals19PDU_LPCh9_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000000000ull) >> 40);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	0a0a      	lsrs	r2, r1, #8
 8007dea:	2300      	movs	r3, #0
 8007dec:	4613      	mov	r3, r2
 8007dee:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8007e02:	eeb0 0a67 	vmov.f32	s0, s15
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <_ZN3can7signals18PDU_HPCh1_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8007e10:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d901      	bls.n	8007e2a <_ZN3can7signals18PDU_HPCh1_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8007e26:	230f      	movs	r3, #15
 8007e28:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFull;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	7df9      	ldrb	r1, [r7, #23]
 8007e36:	2000      	movs	r0, #0
 8007e38:	468a      	mov	sl, r1
 8007e3a:	4683      	mov	fp, r0
 8007e3c:	f00a 040f 	and.w	r4, sl, #15
 8007e40:	2500      	movs	r5, #0
 8007e42:	ea42 0804 	orr.w	r8, r2, r4
 8007e46:	ea43 0905 	orr.w	r9, r3, r5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8007e50:	bf00      	nop
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007e5a:	4770      	bx	lr

08007e5c <_ZN3can7signals15PDU_HPCh1_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8007e5c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007e60:	b087      	sub	sp, #28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d901      	bls.n	8007e76 <_ZN3can7signals15PDU_HPCh1_State3setERyS2_Rhh+0x1a>
                    value = max;
 8007e72:	2303      	movs	r3, #3
 8007e74:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 4) & 0x30ull;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2200      	movs	r2, #0
 8007e84:	4698      	mov	r8, r3
 8007e86:	4691      	mov	r9, r2
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8007e94:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8007e98:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8007e9c:	f002 0430 	and.w	r4, r2, #48	; 0x30
 8007ea0:	2500      	movs	r5, #0
 8007ea2:	ea40 0a04 	orr.w	sl, r0, r4
 8007ea6:	ea41 0b05 	orr.w	fp, r1, r5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007eba:	4770      	bx	lr

08007ebc <_ZN3can7signals15PDU_HPCh2_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8007ebc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007ec0:	b087      	sub	sp, #28
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d901      	bls.n	8007ed6 <_ZN3can7signals15PDU_HPCh2_State3setERyS2_Rhh+0x1a>
                    value = max;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 6) & 0xC0ull;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4698      	mov	r8, r3
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ef4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ef8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007efc:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8007f00:	2500      	movs	r5, #0
 8007f02:	ea40 0a04 	orr.w	sl, r0, r4
 8007f06:	ea41 0b05 	orr.w	fp, r1, r5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007f10:	bf00      	nop
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007f1a:	4770      	bx	lr

08007f1c <_ZN3can7signals18PDU_HPCh2_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8007f1c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	2b0f      	cmp	r3, #15
 8007f30:	d901      	bls.n	8007f36 <_ZN3can7signals18PDU_HPCh2_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8007f32:	230f      	movs	r3, #15
 8007f34:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0xF00ull;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	2200      	movs	r2, #0
 8007f44:	4698      	mov	r8, r3
 8007f46:	4691      	mov	r9, r2
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8007f54:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8007f58:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8007f5c:	f402 6470 	and.w	r4, r2, #3840	; 0xf00
 8007f60:	2500      	movs	r5, #0
 8007f62:	ea40 0a04 	orr.w	sl, r0, r4
 8007f66:	ea41 0b05 	orr.w	fp, r1, r5
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007f70:	bf00      	nop
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007f7a:	4770      	bx	lr

08007f7c <_ZN3can7signals18PDU_HPCh3_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8007f7c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	2b0f      	cmp	r3, #15
 8007f90:	d901      	bls.n	8007f96 <_ZN3can7signals18PDU_HPCh3_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8007f92:	230f      	movs	r3, #15
 8007f94:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4698      	mov	r8, r3
 8007fa6:	4691      	mov	r9, r2
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8007fb4:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8007fb8:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8007fbc:	b294      	uxth	r4, r2
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	ea40 0a04 	orr.w	sl, r0, r4
 8007fc4:	ea41 0b05 	orr.w	fp, r1, r5
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007fd8:	4770      	bx	lr

08007fda <_ZN3can7signals15PDU_HPCh3_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8007fda:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d901      	bls.n	8007ff4 <_ZN3can7signals15PDU_HPCh3_State3setERyS2_Rhh+0x1a>
                    value = max;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0x30000ull;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2200      	movs	r2, #0
 8008002:	4698      	mov	r8, r3
 8008004:	4691      	mov	r9, r2
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8008012:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8008016:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800801a:	f402 3440 	and.w	r4, r2, #196608	; 0x30000
 800801e:	2500      	movs	r5, #0
 8008020:	ea40 0a04 	orr.w	sl, r0, r4
 8008024:	ea41 0b05 	orr.w	fp, r1, r5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008038:	4770      	bx	lr

0800803a <_ZN3can7signals18PDU_HPCh4_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800803a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	2b0f      	cmp	r3, #15
 800804e:	d901      	bls.n	8008054 <_ZN3can7signals18PDU_HPCh4_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008050:	230f      	movs	r3, #15
 8008052:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 18) & 0x3C0000ull;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2200      	movs	r2, #0
 8008062:	4698      	mov	r8, r3
 8008064:	4691      	mov	r9, r2
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	ea4f 4389 	mov.w	r3, r9, lsl #18
 8008072:	ea43 3398 	orr.w	r3, r3, r8, lsr #14
 8008076:	ea4f 4288 	mov.w	r2, r8, lsl #18
 800807a:	f402 1470 	and.w	r4, r2, #3932160	; 0x3c0000
 800807e:	2500      	movs	r5, #0
 8008080:	ea40 0a04 	orr.w	sl, r0, r4
 8008084:	ea41 0b05 	orr.w	fp, r1, r5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008098:	4770      	bx	lr

0800809a <_ZN3can7signals15PDU_HPCh4_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800809a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d901      	bls.n	80080b4 <_ZN3can7signals15PDU_HPCh4_State3setERyS2_Rhh+0x1a>
                    value = max;
 80080b0:	2303      	movs	r3, #3
 80080b2:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 22) & 0xC00000ull;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2200      	movs	r2, #0
 80080c2:	4698      	mov	r8, r3
 80080c4:	4691      	mov	r9, r2
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	ea4f 5389 	mov.w	r3, r9, lsl #22
 80080d2:	ea43 2398 	orr.w	r3, r3, r8, lsr #10
 80080d6:	ea4f 5288 	mov.w	r2, r8, lsl #22
 80080da:	f402 0440 	and.w	r4, r2, #12582912	; 0xc00000
 80080de:	2500      	movs	r5, #0
 80080e0:	ea40 0a04 	orr.w	sl, r0, r4
 80080e4:	ea41 0b05 	orr.w	fp, r1, r5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80080f8:	4770      	bx	lr

080080fa <_ZN3can7signals19PDU_HPCh1_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	4613      	mov	r3, r2
 800810c:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800811c:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008120:	eeb0 0a67 	vmov.f32	s0, s15
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <_ZN3can7signals19PDU_HPCh2_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00ull) >> 8);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	0a02      	lsrs	r2, r0, #8
 8008148:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800814c:	0a0b      	lsrs	r3, r1, #8
 800814e:	4613      	mov	r3, r2
 8008150:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	ee07 3a90 	vmov	s15, r3
 8008158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800815c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008160:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8008164:	eeb0 0a67 	vmov.f32	s0, s15
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <_ZN3can7signals16PDU_D1_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	0c02      	lsrs	r2, r0, #16
 800818c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008190:	0c0b      	lsrs	r3, r1, #16
 8008192:	4613      	mov	r3, r2
 8008194:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80081a4:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80081a8:	eeb0 0a67 	vmov.f32	s0, s15
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <_ZN3can7signals16PDU_D2_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF000000ull) >> 24);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	0e02      	lsrs	r2, r0, #24
 80081d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80081d4:	0e0b      	lsrs	r3, r1, #24
 80081d6:	4613      	mov	r3, r2
 80081d8:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80081e8:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80081ec:	eeb0 0a67 	vmov.f32	s0, s15
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <_ZN3can7signals16PDU_D3_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00000000ull) >> 32);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	000a      	movs	r2, r1
 8008214:	2300      	movs	r3, #0
 8008216:	4613      	mov	r3, r2
 8008218:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	ee07 3a90 	vmov	s15, r3
 8008220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008224:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008228:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800822c:	eeb0 0a67 	vmov.f32	s0, s15
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <_ZN3can7signals16PDU_D4_Dutycycle3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000000000ull) >> 40);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800824a:	f04f 0200 	mov.w	r2, #0
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	0a0a      	lsrs	r2, r1, #8
 8008254:	2300      	movs	r3, #0
 8008256:	4613      	mov	r3, r2
 8008258:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008268:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800826c:	eeb0 0a67 	vmov.f32	s0, s15
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <_ZN3can7signals16PDU_LPCh1_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800827a:	b480      	push	{r7}
 800827c:	b085      	sub	sp, #20
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800828a:	f000 0201 	and.w	r2, r0, #1
 800828e:	2300      	movs	r3, #0
 8008290:	4313      	orrs	r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
                return value;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <_ZN3can7signals16PDU_LPCh2_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ba:	f000 0202 	and.w	r2, r0, #2
 80082be:	2300      	movs	r3, #0
 80082c0:	4313      	orrs	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
                return value;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <_ZN3can7signals16PDU_LPCh3_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ea:	f000 0204 	and.w	r2, r0, #4
 80082ee:	2300      	movs	r3, #0
 80082f0:	4313      	orrs	r3, r2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bf14      	ite	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	2300      	moveq	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
                return value;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <_ZN3can7signals16PDU_LPCh4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8ull) >> 3);
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800831a:	f000 0208 	and.w	r2, r0, #8
 800831e:	2300      	movs	r3, #0
 8008320:	4313      	orrs	r3, r2
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
                return value;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <_ZN3can7signals16PDU_LPCh5_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x10ull) >> 4);
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834a:	f000 0210 	and.w	r2, r0, #16
 800834e:	2300      	movs	r3, #0
 8008350:	4313      	orrs	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	bf14      	ite	ne
 8008356:	2301      	movne	r3, #1
 8008358:	2300      	moveq	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
                return value;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <_ZN3can7signals16PDU_LPCh6_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x20ull) >> 5);
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837a:	f000 0220 	and.w	r2, r0, #32
 800837e:	2300      	movs	r3, #0
 8008380:	4313      	orrs	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf14      	ite	ne
 8008386:	2301      	movne	r3, #1
 8008388:	2300      	moveq	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
                return value;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <_ZN3can7signals16PDU_LPCh7_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800839a:	b480      	push	{r7}
 800839c:	b085      	sub	sp, #20
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x40ull) >> 6);
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083aa:	f000 0240 	and.w	r2, r0, #64	; 0x40
 80083ae:	2300      	movs	r3, #0
 80083b0:	4313      	orrs	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bf14      	ite	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	2300      	moveq	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
                return value;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <_ZN3can7signals16PDU_LPCh8_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x80ull) >> 7);
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083da:	f000 0280 	and.w	r2, r0, #128	; 0x80
 80083de:	2300      	movs	r3, #0
 80083e0:	4313      	orrs	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bf14      	ite	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	2300      	moveq	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
                return value;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
            }
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <_ZN3can7signals16PDU_LPCh9_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x100ull) >> 8);
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800840a:	f400 7280 	and.w	r2, r0, #256	; 0x100
 800840e:	2300      	movs	r3, #0
 8008410:	4313      	orrs	r3, r2
 8008412:	2b00      	cmp	r3, #0
 8008414:	bf14      	ite	ne
 8008416:	2301      	movne	r3, #1
 8008418:	2300      	moveq	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
                return value;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <_ZN3can7signals17PDU_LPCh10_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x200ull) >> 9);
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800843a:	f400 7200 	and.w	r2, r0, #512	; 0x200
 800843e:	2300      	movs	r3, #0
 8008440:	4313      	orrs	r3, r2
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf14      	ite	ne
 8008446:	2301      	movne	r3, #1
 8008448:	2300      	moveq	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
                return value;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <_ZN3can7signals16PDU_HPCh1_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x400ull) >> 10);
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800846a:	f400 6280 	and.w	r2, r0, #1024	; 0x400
 800846e:	2300      	movs	r3, #0
 8008470:	4313      	orrs	r3, r2
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf14      	ite	ne
 8008476:	2301      	movne	r3, #1
 8008478:	2300      	moveq	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
                return value;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <_ZN3can7signals16PDU_HPCh2_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x800ull) >> 11);
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849a:	f400 6200 	and.w	r2, r0, #2048	; 0x800
 800849e:	2300      	movs	r3, #0
 80084a0:	4313      	orrs	r3, r2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf14      	ite	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	2300      	moveq	r3, #0
 80084aa:	73fb      	strb	r3, [r7, #15]
                return value;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
            }
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <_ZN3can7signals16PDU_HPCh3_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1000ull) >> 12);
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ca:	f400 5280 	and.w	r2, r0, #4096	; 0x1000
 80084ce:	2300      	movs	r3, #0
 80084d0:	4313      	orrs	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf14      	ite	ne
 80084d6:	2301      	movne	r3, #1
 80084d8:	2300      	moveq	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
                return value;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <_ZN3can7signals16PDU_HPCh4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2000ull) >> 13);
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084fa:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 80084fe:	2300      	movs	r3, #0
 8008500:	4313      	orrs	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	bf14      	ite	ne
 8008506:	2301      	movne	r3, #1
 8008508:	2300      	moveq	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
                return value;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <_ZN3can7signals13PDU_D1_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4000ull) >> 14);
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800852a:	f400 4280 	and.w	r2, r0, #16384	; 0x4000
 800852e:	2300      	movs	r3, #0
 8008530:	4313      	orrs	r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf14      	ite	ne
 8008536:	2301      	movne	r3, #1
 8008538:	2300      	moveq	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
                return value;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <_ZN3can7signals13PDU_D2_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8000ull) >> 15);
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800855a:	f400 4200 	and.w	r2, r0, #32768	; 0x8000
 800855e:	2300      	movs	r3, #0
 8008560:	4313      	orrs	r3, r2
 8008562:	2b00      	cmp	r3, #0
 8008564:	bf14      	ite	ne
 8008566:	2301      	movne	r3, #1
 8008568:	2300      	moveq	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
                return value;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <_ZN3can7signals13PDU_D3_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x10000ull) >> 16);
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858a:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800858e:	2300      	movs	r3, #0
 8008590:	4313      	orrs	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	bf14      	ite	ne
 8008596:	2301      	movne	r3, #1
 8008598:	2300      	moveq	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
                return value;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <_ZN3can7signals13PDU_D4_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x20000ull) >> 17);
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ba:	f400 3200 	and.w	r2, r0, #131072	; 0x20000
 80085be:	2300      	movs	r3, #0
 80085c0:	4313      	orrs	r3, r2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bf14      	ite	ne
 80085c6:	2301      	movne	r3, #1
 80085c8:	2300      	moveq	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
                return value;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <_ZN3can7signals14PDU_SDC_Enable3getERKyS3_>:
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x40000ull) >> 18);
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ea:	f400 2280 	and.w	r2, r0, #262144	; 0x40000
 80085ee:	2300      	movs	r3, #0
 80085f0:	4313      	orrs	r3, r2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bf14      	ite	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	2300      	moveq	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
                return value;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <_ZN3can7signals19PDU_LPCh10_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800860a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d901      	bls.n	8008624 <_ZN3can7signals19PDU_LPCh10_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008620:	230f      	movs	r3, #15
 8008622:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFull;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	7df9      	ldrb	r1, [r7, #23]
 8008630:	2000      	movs	r0, #0
 8008632:	468a      	mov	sl, r1
 8008634:	4683      	mov	fp, r0
 8008636:	f00a 040f 	and.w	r4, sl, #15
 800863a:	2500      	movs	r5, #0
 800863c:	ea42 0804 	orr.w	r8, r2, r4
 8008640:	ea43 0905 	orr.w	r9, r3, r5
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008654:	4770      	bx	lr

08008656 <_ZN3can7signals18PDU_LPCh1_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008656:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	2b0f      	cmp	r3, #15
 800866a:	d901      	bls.n	8008670 <_ZN3can7signals18PDU_LPCh1_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 800866c:	230f      	movs	r3, #15
 800866e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 4) & 0xF0ull;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2200      	movs	r2, #0
 800867e:	4698      	mov	r8, r3
 8008680:	4691      	mov	r9, r2
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	f04f 0300 	mov.w	r3, #0
 800868a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800868e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8008692:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8008696:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800869a:	2500      	movs	r5, #0
 800869c:	ea40 0a04 	orr.w	sl, r0, r4
 80086a0:	ea41 0b05 	orr.w	fp, r1, r5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80086b4:	4770      	bx	lr

080086b6 <_ZN3can7signals18PDU_LPCh2_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80086b6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	2b0f      	cmp	r3, #15
 80086ca:	d901      	bls.n	80086d0 <_ZN3can7signals18PDU_LPCh2_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80086cc:	230f      	movs	r3, #15
 80086ce:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0xF00ull;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2200      	movs	r2, #0
 80086de:	4698      	mov	r8, r3
 80086e0:	4691      	mov	r9, r2
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80086ee:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80086f2:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80086f6:	f402 6470 	and.w	r4, r2, #3840	; 0xf00
 80086fa:	2500      	movs	r5, #0
 80086fc:	ea40 0a04 	orr.w	sl, r0, r4
 8008700:	ea41 0b05 	orr.w	fp, r1, r5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008714:	4770      	bx	lr

08008716 <_ZN3can7signals18PDU_LPCh3_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008716:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	2b0f      	cmp	r3, #15
 800872a:	d901      	bls.n	8008730 <_ZN3can7signals18PDU_LPCh3_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 800872c:	230f      	movs	r3, #15
 800872e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	2200      	movs	r2, #0
 800873e:	4698      	mov	r8, r3
 8008740:	4691      	mov	r9, r2
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	ea4f 3309 	mov.w	r3, r9, lsl #12
 800874e:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8008752:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8008756:	b294      	uxth	r4, r2
 8008758:	2500      	movs	r5, #0
 800875a:	ea40 0a04 	orr.w	sl, r0, r4
 800875e:	ea41 0b05 	orr.w	fp, r1, r5
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008772:	4770      	bx	lr

08008774 <_ZN3can7signals18PDU_LPCh4_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008774:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	d901      	bls.n	800878e <_ZN3can7signals18PDU_LPCh4_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 800878a:	230f      	movs	r3, #15
 800878c:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xF0000ull;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2200      	movs	r2, #0
 800879c:	4698      	mov	r8, r3
 800879e:	4691      	mov	r9, r2
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80087ac:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80087b0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80087b4:	f402 2470 	and.w	r4, r2, #983040	; 0xf0000
 80087b8:	2500      	movs	r5, #0
 80087ba:	ea40 0a04 	orr.w	sl, r0, r4
 80087be:	ea41 0b05 	orr.w	fp, r1, r5
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80087c8:	bf00      	nop
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80087d2:	4770      	bx	lr

080087d4 <_ZN3can7signals18PDU_LPCh5_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80087d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80087d8:	b087      	sub	sp, #28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d901      	bls.n	80087ee <_ZN3can7signals18PDU_LPCh5_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80087ea:	230f      	movs	r3, #15
 80087ec:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 20) & 0xF00000ull;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	2200      	movs	r2, #0
 80087fc:	4698      	mov	r8, r3
 80087fe:	4691      	mov	r9, r2
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	ea4f 5309 	mov.w	r3, r9, lsl #20
 800880c:	ea43 3318 	orr.w	r3, r3, r8, lsr #12
 8008810:	ea4f 5208 	mov.w	r2, r8, lsl #20
 8008814:	f402 0470 	and.w	r4, r2, #15728640	; 0xf00000
 8008818:	2500      	movs	r5, #0
 800881a:	ea40 0a04 	orr.w	sl, r0, r4
 800881e:	ea41 0b05 	orr.w	fp, r1, r5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008828:	bf00      	nop
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008832:	4770      	bx	lr

08008834 <_ZN3can7signals18PDU_LPCh6_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008834:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008838:	b089      	sub	sp, #36	; 0x24
 800883a:	af00      	add	r7, sp, #0
 800883c:	6178      	str	r0, [r7, #20]
 800883e:	6139      	str	r1, [r7, #16]
 8008840:	60fa      	str	r2, [r7, #12]
 8008842:	72fb      	strb	r3, [r7, #11]
                if (value > max) {
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d901      	bls.n	800884e <_ZN3can7signals18PDU_LPCh6_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 800884a:	230f      	movs	r3, #15
 800884c:	72fb      	strb	r3, [r7, #11]
                uint8_t rawValue = (value);
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xF000000ull;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	7ff9      	ldrb	r1, [r7, #31]
 800885a:	2000      	movs	r0, #0
 800885c:	4688      	mov	r8, r1
 800885e:	4681      	mov	r9, r0
 8008860:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8008864:	6079      	str	r1, [r7, #4]
 8008866:	ea4f 6108 	mov.w	r1, r8, lsl #24
 800886a:	6039      	str	r1, [r7, #0]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
 8008872:	2500      	movs	r5, #0
 8008874:	ea42 0a04 	orr.w	sl, r2, r4
 8008878:	ea43 0b05 	orr.w	fp, r3, r5
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008882:	bf00      	nop
 8008884:	3724      	adds	r7, #36	; 0x24
 8008886:	46bd      	mov	sp, r7
 8008888:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800888c:	4770      	bx	lr

0800888e <_ZN3can7signals18PDU_LPCh7_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800888e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6178      	str	r0, [r7, #20]
 8008898:	6139      	str	r1, [r7, #16]
 800889a:	60fa      	str	r2, [r7, #12]
 800889c:	72fb      	strb	r3, [r7, #11]
                if (value > max) {
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	2b0f      	cmp	r3, #15
 80088a2:	d901      	bls.n	80088a8 <_ZN3can7signals18PDU_LPCh7_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80088a4:	230f      	movs	r3, #15
 80088a6:	72fb      	strb	r3, [r7, #11]
                uint8_t rawValue = (value);
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 28) & 0xF0000000ull;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	7ff9      	ldrb	r1, [r7, #31]
 80088b4:	2000      	movs	r0, #0
 80088b6:	4688      	mov	r8, r1
 80088b8:	4681      	mov	r9, r0
 80088ba:	ea4f 1118 	mov.w	r1, r8, lsr #4
 80088be:	6079      	str	r1, [r7, #4]
 80088c0:	ea4f 7108 	mov.w	r1, r8, lsl #28
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	683c      	ldr	r4, [r7, #0]
 80088c8:	2500      	movs	r5, #0
 80088ca:	ea42 0a04 	orr.w	sl, r2, r4
 80088ce:	ea43 0b05 	orr.w	fp, r3, r5
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80088d8:	bf00      	nop
 80088da:	3724      	adds	r7, #36	; 0x24
 80088dc:	46bd      	mov	sp, r7
 80088de:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80088e2:	4770      	bx	lr

080088e4 <_ZN3can7signals18PDU_LPCh8_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80088e4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b0f      	cmp	r3, #15
 80088f8:	d901      	bls.n	80088fe <_ZN3can7signals18PDU_LPCh8_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 80088fa:	230f      	movs	r3, #15
 80088fc:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xF00000000ull;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2200      	movs	r2, #0
 800890c:	469a      	mov	sl, r3
 800890e:	4693      	mov	fp, r2
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	4653      	mov	r3, sl
 800891a:	2200      	movs	r2, #0
 800891c:	2400      	movs	r4, #0
 800891e:	f003 050f 	and.w	r5, r3, #15
 8008922:	ea40 0804 	orr.w	r8, r0, r4
 8008926:	ea41 0905 	orr.w	r9, r1, r5
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008930:	bf00      	nop
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800893a:	4770      	bx	lr

0800893c <_ZN3can7signals18PDU_LPCh9_ShortCnt3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800893c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008940:	b087      	sub	sp, #28
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	2b0f      	cmp	r3, #15
 8008950:	d901      	bls.n	8008956 <_ZN3can7signals18PDU_LPCh9_ShortCnt3setERyS2_Rhh+0x1a>
                    value = max;
 8008952:	230f      	movs	r3, #15
 8008954:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xF000000000ull;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2200      	movs	r2, #0
 8008964:	469a      	mov	sl, r3
 8008966:	4693      	mov	fp, r2
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8008974:	2200      	movs	r2, #0
 8008976:	2400      	movs	r4, #0
 8008978:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800897c:	ea40 0804 	orr.w	r8, r0, r4
 8008980:	ea41 0905 	orr.w	r9, r1, r5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008994:	4770      	bx	lr

08008996 <_ZN3can7signals16PDU_LPCh10_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008996:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d901      	bls.n	80089b0 <_ZN3can7signals16PDU_LPCh10_State3setERyS2_Rhh+0x1a>
                    value = max;
 80089ac:	2303      	movs	r3, #3
 80089ae:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 40) & 0x30000000000ull;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	2200      	movs	r2, #0
 80089be:	469a      	mov	sl, r3
 80089c0:	4693      	mov	fp, r2
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	ea4f 230a 	mov.w	r3, sl, lsl #8
 80089ce:	2200      	movs	r2, #0
 80089d0:	2400      	movs	r4, #0
 80089d2:	f403 7540 	and.w	r5, r3, #768	; 0x300
 80089d6:	ea40 0804 	orr.w	r8, r0, r4
 80089da:	ea41 0905 	orr.w	r9, r1, r5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80089e4:	bf00      	nop
 80089e6:	371c      	adds	r7, #28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80089ee:	4770      	bx	lr

080089f0 <_ZN3can7signals15PDU_LPCh1_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80089f0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80089f4:	b087      	sub	sp, #28
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	60b9      	str	r1, [r7, #8]
 80089fc:	607a      	str	r2, [r7, #4]
 80089fe:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d901      	bls.n	8008a0a <_ZN3can7signals15PDU_LPCh1_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008a06:	2303      	movs	r3, #3
 8008a08:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 42) & 0xC0000000000ull;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2200      	movs	r2, #0
 8008a18:	469a      	mov	sl, r3
 8008a1a:	4693      	mov	fp, r2
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2400      	movs	r4, #0
 8008a2c:	f403 6540 	and.w	r5, r3, #3072	; 0xc00
 8008a30:	ea40 0804 	orr.w	r8, r0, r4
 8008a34:	ea41 0905 	orr.w	r9, r1, r5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008a3e:	bf00      	nop
 8008a40:	371c      	adds	r7, #28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008a48:	4770      	bx	lr

08008a4a <_ZN3can7signals15PDU_LPCh2_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008a4a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d901      	bls.n	8008a64 <_ZN3can7signals15PDU_LPCh2_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008a60:	2303      	movs	r3, #3
 8008a62:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 44) & 0x300000000000ull;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2200      	movs	r2, #0
 8008a72:	469a      	mov	sl, r3
 8008a74:	4693      	mov	fp, r2
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	ea4f 330a 	mov.w	r3, sl, lsl #12
 8008a82:	2200      	movs	r2, #0
 8008a84:	2400      	movs	r4, #0
 8008a86:	f403 5540 	and.w	r5, r3, #12288	; 0x3000
 8008a8a:	ea40 0804 	orr.w	r8, r0, r4
 8008a8e:	ea41 0905 	orr.w	r9, r1, r5
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008aa2:	4770      	bx	lr

08008aa4 <_ZN3can7signals15PDU_LPCh3_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008aa4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d901      	bls.n	8008abe <_ZN3can7signals15PDU_LPCh3_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008aba:	2303      	movs	r3, #3
 8008abc:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 46) & 0xC00000000000ull;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2200      	movs	r2, #0
 8008acc:	469a      	mov	sl, r3
 8008ace:	4693      	mov	fp, r2
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	ea4f 338a 	mov.w	r3, sl, lsl #14
 8008adc:	2200      	movs	r2, #0
 8008ade:	2400      	movs	r4, #0
 8008ae0:	f403 4540 	and.w	r5, r3, #49152	; 0xc000
 8008ae4:	ea40 0804 	orr.w	r8, r0, r4
 8008ae8:	ea41 0905 	orr.w	r9, r1, r5
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008afc:	4770      	bx	lr

08008afe <_ZN3can7signals15PDU_LPCh4_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008afe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d901      	bls.n	8008b18 <_ZN3can7signals15PDU_LPCh4_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008b14:	2303      	movs	r3, #3
 8008b16:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0x3000000000000ull;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	2200      	movs	r2, #0
 8008b26:	469a      	mov	sl, r3
 8008b28:	4693      	mov	fp, r2
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8008b36:	2200      	movs	r2, #0
 8008b38:	2400      	movs	r4, #0
 8008b3a:	f403 3540 	and.w	r5, r3, #196608	; 0x30000
 8008b3e:	ea40 0804 	orr.w	r8, r0, r4
 8008b42:	ea41 0905 	orr.w	r9, r1, r5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b56:	4770      	bx	lr

08008b58 <_ZN3can7signals15PDU_LPCh5_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008b58:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b5c:	b087      	sub	sp, #28
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d901      	bls.n	8008b72 <_ZN3can7signals15PDU_LPCh5_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 50) & 0xC000000000000ull;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	469a      	mov	sl, r3
 8008b82:	4693      	mov	fp, r2
 8008b84:	f04f 0200 	mov.w	r2, #0
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	ea4f 438a 	mov.w	r3, sl, lsl #18
 8008b90:	2200      	movs	r2, #0
 8008b92:	2400      	movs	r4, #0
 8008b94:	f403 2540 	and.w	r5, r3, #786432	; 0xc0000
 8008b98:	ea40 0804 	orr.w	r8, r0, r4
 8008b9c:	ea41 0905 	orr.w	r9, r1, r5
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008ba6:	bf00      	nop
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bb0:	4770      	bx	lr

08008bb2 <_ZN3can7signals15PDU_LPCh6_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008bb2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d901      	bls.n	8008bcc <_ZN3can7signals15PDU_LPCh6_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 52) & 0x30000000000000ull;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	469a      	mov	sl, r3
 8008bdc:	4693      	mov	fp, r2
 8008bde:	f04f 0200 	mov.w	r2, #0
 8008be2:	f04f 0300 	mov.w	r3, #0
 8008be6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8008bea:	2200      	movs	r2, #0
 8008bec:	2400      	movs	r4, #0
 8008bee:	f403 1540 	and.w	r5, r3, #3145728	; 0x300000
 8008bf2:	ea40 0804 	orr.w	r8, r0, r4
 8008bf6:	ea41 0905 	orr.w	r9, r1, r5
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c0a:	4770      	bx	lr

08008c0c <_ZN3can7signals15PDU_LPCh7_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008c0c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c10:	b087      	sub	sp, #28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d901      	bls.n	8008c26 <_ZN3can7signals15PDU_LPCh7_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008c22:	2303      	movs	r3, #3
 8008c24:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 54) & 0xC0000000000000ull;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2200      	movs	r2, #0
 8008c34:	469a      	mov	sl, r3
 8008c36:	4693      	mov	fp, r2
 8008c38:	f04f 0200 	mov.w	r2, #0
 8008c3c:	f04f 0300 	mov.w	r3, #0
 8008c40:	ea4f 538a 	mov.w	r3, sl, lsl #22
 8008c44:	2200      	movs	r2, #0
 8008c46:	2400      	movs	r4, #0
 8008c48:	f403 0540 	and.w	r5, r3, #12582912	; 0xc00000
 8008c4c:	ea40 0804 	orr.w	r8, r0, r4
 8008c50:	ea41 0905 	orr.w	r9, r1, r5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c64:	4770      	bx	lr

08008c66 <_ZN3can7signals15PDU_LPCh8_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008c66:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d901      	bls.n	8008c80 <_ZN3can7signals15PDU_LPCh8_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 56) & 0x300000000000000ull;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	469a      	mov	sl, r3
 8008c90:	4693      	mov	fp, r2
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	f04f 0300 	mov.w	r3, #0
 8008c9a:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2400      	movs	r4, #0
 8008ca2:	f003 7540 	and.w	r5, r3, #50331648	; 0x3000000
 8008ca6:	ea40 0804 	orr.w	r8, r0, r4
 8008caa:	ea41 0905 	orr.w	r9, r1, r5
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008cbe:	4770      	bx	lr

08008cc0 <_ZN3can7signals15PDU_LPCh9_State3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008cc0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d901      	bls.n	8008cda <_ZN3can7signals15PDU_LPCh9_State3setERyS2_Rhh+0x1a>
                    value = max;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 58) & 0xC00000000000000ull;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	469a      	mov	sl, r3
 8008cea:	4693      	mov	fp, r2
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	ea4f 638a 	mov.w	r3, sl, lsl #26
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2400      	movs	r4, #0
 8008cfc:	f003 6540 	and.w	r5, r3, #201326592	; 0xc000000
 8008d00:	ea40 0804 	orr.w	r8, r0, r4
 8008d04:	ea41 0905 	orr.w	r9, r1, r5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008d0e:	bf00      	nop
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d18:	4770      	bx	lr
	...

08008d1c <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d20:	b086      	sub	sp, #24
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8008d2e:	edd7 7a00 	vldr	s15, [r7]
 8008d32:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008da8 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x8c>
 8008d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3e:	dd01      	ble.n	8008d44 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x28>
                    value = max;
 8008d40:	4b1a      	ldr	r3, [pc, #104]	; (8008dac <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x90>)
 8008d42:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8008d44:	edd7 7a00 	vldr	s15, [r7]
 8008d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d50:	d502      	bpl.n	8008d58 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8008d58:	edd7 7a00 	vldr	s15, [r7]
 8008d5c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008db0 <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf+0x94>
 8008d60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008d64:	eeb0 0a47 	vmov.f32	s0, s14
 8008d68:	f7f7 fc04 	bl	8000574 <_ZSt5roundf>
 8008d6c:	eef0 7a40 	vmov.f32	s15, s0
 8008d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d74:	ee17 3a90 	vmov	r3, s15
 8008d78:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	8af9      	ldrh	r1, [r7, #22]
 8008d82:	2000      	movs	r0, #0
 8008d84:	468a      	mov	sl, r1
 8008d86:	4683      	mov	fp, r0
 8008d88:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	ea42 0804 	orr.w	r8, r2, r4
 8008d92:	ea43 0905 	orr.w	r9, r3, r5
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008d9c:	bf00      	nop
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008da6:	bf00      	nop
 8008da8:	4223cccd 	.word	0x4223cccd
 8008dac:	4223cccd 	.word	0x4223cccd
 8008db0:	3c23d70a 	.word	0x3c23d70a

08008db4 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8008dc6:	edd7 7a00 	vldr	s15, [r7]
 8008dca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8008e5c <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0xa8>
 8008dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd6:	dd01      	ble.n	8008ddc <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0x28>
                    value = max;
 8008dd8:	4b21      	ldr	r3, [pc, #132]	; (8008e60 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0xac>)
 8008dda:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8008ddc:	edd7 7a00 	vldr	s15, [r7]
 8008de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	d502      	bpl.n	8008df0 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0x3c>
                    value = min;
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8008df0:	edd7 7a00 	vldr	s15, [r7]
 8008df4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8008e64 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf+0xb0>
 8008df8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8008e00:	f7f7 fbb8 	bl	8000574 <_ZSt5roundf>
 8008e04:	eef0 7a40 	vmov.f32	s15, s0
 8008e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0c:	ee17 3a90 	vmov	r3, s15
 8008e10:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e18:	8afb      	ldrh	r3, [r7, #22]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4698      	mov	r8, r3
 8008e1e:	4691      	mov	r9, r2
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8008e2c:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8008e30:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8008e34:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8008e38:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008e3c:	f024 040f 	bic.w	r4, r4, #15
 8008e40:	2500      	movs	r5, #0
 8008e42:	ea40 0a04 	orr.w	sl, r0, r4
 8008e46:	ea41 0b05 	orr.w	fp, r1, r5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008e50:	bf00      	nop
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5a:	bf00      	nop
 8008e5c:	4223cccd 	.word	0x4223cccd
 8008e60:	4223cccd 	.word	0x4223cccd
 8008e64:	3c23d70a 	.word	0x3c23d70a

08008e68 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, int8_t value) noexcept {
 8008e68:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008e6c:	b089      	sub	sp, #36	; 0x24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6178      	str	r0, [r7, #20]
 8008e72:	6139      	str	r1, [r7, #16]
 8008e74:	60fa      	str	r2, [r7, #12]
 8008e76:	72fb      	strb	r3, [r7, #11]
                if (value > max) {
 8008e78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e7c:	2b64      	cmp	r3, #100	; 0x64
 8008e7e:	dd01      	ble.n	8008e84 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha+0x1c>
                    value = max;
 8008e80:	2364      	movs	r3, #100	; 0x64
 8008e82:	72fb      	strb	r3, [r7, #11]
                if (value < min) {
 8008e84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	da01      	bge.n	8008e90 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha+0x28>
                    value = min;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	72fb      	strb	r3, [r7, #11]
                int8_t rawValue = (value);
 8008e90:	7afb      	ldrb	r3, [r7, #11]
 8008e92:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFF000000ull;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8008e9e:	17c8      	asrs	r0, r1, #31
 8008ea0:	4688      	mov	r8, r1
 8008ea2:	4681      	mov	r9, r0
 8008ea4:	ea4f 2128 	mov.w	r1, r8, asr #8
 8008ea8:	6079      	str	r1, [r7, #4]
 8008eaa:	ea4f 6108 	mov.w	r1, r8, lsl #24
 8008eae:	6039      	str	r1, [r7, #0]
 8008eb0:	683c      	ldr	r4, [r7, #0]
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	ea42 0a04 	orr.w	sl, r2, r4
 8008eb8:	ea43 0b05 	orr.w	fp, r3, r5
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008ec2:	bf00      	nop
 8008ec4:	3724      	adds	r7, #36	; 0x24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008ecc:	4770      	bx	lr
	...

08008ed0 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8008ee2:	edd7 7a00 	vldr	s15, [r7]
 8008ee6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008f5c <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x8c>
 8008eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef2:	dd01      	ble.n	8008ef8 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x28>
                    value = max;
 8008ef4:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x90>)
 8008ef6:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8008ef8:	edd7 7a00 	vldr	s15, [r7]
 8008efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	d502      	bpl.n	8008f0c <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8008f06:	f04f 0300 	mov.w	r3, #0
 8008f0a:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8008f0c:	edd7 7a00 	vldr	s15, [r7]
 8008f10:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008f64 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf+0x94>
 8008f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f18:	eeb0 0a47 	vmov.f32	s0, s14
 8008f1c:	f7f7 fb2a 	bl	8000574 <_ZSt5roundf>
 8008f20:	eef0 7a40 	vmov.f32	s15, s0
 8008f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f28:	ee17 3a90 	vmov	r3, s15
 8008f2c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	8af9      	ldrh	r1, [r7, #22]
 8008f36:	2000      	movs	r0, #0
 8008f38:	468a      	mov	sl, r1
 8008f3a:	4683      	mov	fp, r0
 8008f3c:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8008f40:	2500      	movs	r5, #0
 8008f42:	ea42 0804 	orr.w	r8, r2, r4
 8008f46:	ea43 0905 	orr.w	r9, r3, r5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008f50:	bf00      	nop
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f5a:	bf00      	nop
 8008f5c:	41030a3d 	.word	0x41030a3d
 8008f60:	41030a3d 	.word	0x41030a3d
 8008f64:	3b03126f 	.word	0x3b03126f

08008f68 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8008f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f6c:	b086      	sub	sp, #24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8008f7a:	edd7 7a00 	vldr	s15, [r7]
 8008f7e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009010 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0xa8>
 8008f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	dd01      	ble.n	8008f90 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0x28>
                    value = max;
 8008f8c:	4b21      	ldr	r3, [pc, #132]	; (8009014 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0xac>)
 8008f8e:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8008f90:	edd7 7a00 	vldr	s15, [r7]
 8008f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9c:	d502      	bpl.n	8008fa4 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8008f9e:	f04f 0300 	mov.w	r3, #0
 8008fa2:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8008fa4:	edd7 7a00 	vldr	s15, [r7]
 8008fa8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8009018 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf+0xb0>
 8008fac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8008fb4:	f7f7 fade 	bl	8000574 <_ZSt5roundf>
 8008fb8:	eef0 7a40 	vmov.f32	s15, s0
 8008fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc0:	ee17 3a90 	vmov	r3, s15
 8008fc4:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fcc:	8afb      	ldrh	r3, [r7, #22]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4698      	mov	r8, r3
 8008fd2:	4691      	mov	r9, r2
 8008fd4:	f04f 0200 	mov.w	r2, #0
 8008fd8:	f04f 0300 	mov.w	r3, #0
 8008fdc:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8008fe0:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8008fe4:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8008fe8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8008fec:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008ff0:	f024 040f 	bic.w	r4, r4, #15
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	ea40 0a04 	orr.w	sl, r0, r4
 8008ffa:	ea41 0b05 	orr.w	fp, r1, r5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009004:	bf00      	nop
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800900e:	bf00      	nop
 8009010:	41030a3d 	.word	0x41030a3d
 8009014:	41030a3d 	.word	0x41030a3d
 8009018:	3b03126f 	.word	0x3b03126f

0800901c <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800901c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009020:	b088      	sub	sp, #32
 8009022:	af00      	add	r7, sp, #0
 8009024:	6178      	str	r0, [r7, #20]
 8009026:	6139      	str	r1, [r7, #16]
 8009028:	60fa      	str	r2, [r7, #12]
 800902a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800902e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009032:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80090b8 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0x9c>
 8009036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903e:	dd01      	ble.n	8009044 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009040:	4b1e      	ldr	r3, [pc, #120]	; (80090bc <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0xa0>)
 8009042:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 8009044:	edd7 7a02 	vldr	s15, [r7, #8]
 8009048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800904c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009050:	d502      	bpl.n	8009058 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009058:	edd7 7a02 	vldr	s15, [r7, #8]
 800905c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80090c0 <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf+0xa4>
 8009060:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009064:	eeb0 0a47 	vmov.f32	s0, s14
 8009068:	f7f7 fa84 	bl	8000574 <_ZSt5roundf>
 800906c:	eef0 7a40 	vmov.f32	s15, s0
 8009070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009074:	ee17 3a90 	vmov	r3, s15
 8009078:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	8bf9      	ldrh	r1, [r7, #30]
 8009082:	2000      	movs	r0, #0
 8009084:	468a      	mov	sl, r1
 8009086:	4683      	mov	fp, r0
 8009088:	ea4f 291a 	mov.w	r9, sl, lsr #8
 800908c:	ea4f 680a 	mov.w	r8, sl, lsl #24
 8009090:	f008 447f 	and.w	r4, r8, #4278190080	; 0xff000000
 8009094:	f009 050f 	and.w	r5, r9, #15
 8009098:	ea42 0104 	orr.w	r1, r2, r4
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	432b      	orrs	r3, r5
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090a8:	e9c3 1200 	strd	r1, r2, [r3]
            }
 80090ac:	bf00      	nop
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090b6:	bf00      	nop
 80090b8:	41030a3d 	.word	0x41030a3d
 80090bc:	41030a3d 	.word	0x41030a3d
 80090c0:	3b03126f 	.word	0x3b03126f

080090c4 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80090c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 80090d6:	edd7 7a00 	vldr	s15, [r7]
 80090da:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009160 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0x9c>
 80090de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e6:	dd01      	ble.n	80090ec <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0x28>
                    value = max;
 80090e8:	4b1e      	ldr	r3, [pc, #120]	; (8009164 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0xa0>)
 80090ea:	603b      	str	r3, [r7, #0]
                if (value < min) {
 80090ec:	edd7 7a00 	vldr	s15, [r7]
 80090f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	d502      	bpl.n	8009100 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009100:	edd7 7a00 	vldr	s15, [r7]
 8009104:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009168 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf+0xa4>
 8009108:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800910c:	eeb0 0a47 	vmov.f32	s0, s14
 8009110:	f7f7 fa30 	bl	8000574 <_ZSt5roundf>
 8009114:	eef0 7a40 	vmov.f32	s15, s0
 8009118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911c:	ee17 3a90 	vmov	r3, s15
 8009120:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009128:	8afb      	ldrh	r3, [r7, #22]
 800912a:	2200      	movs	r2, #0
 800912c:	469a      	mov	sl, r3
 800912e:	4693      	mov	fp, r2
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800913c:	2200      	movs	r2, #0
 800913e:	2400      	movs	r4, #0
 8009140:	f023 050f 	bic.w	r5, r3, #15
 8009144:	042d      	lsls	r5, r5, #16
 8009146:	0c2d      	lsrs	r5, r5, #16
 8009148:	ea40 0804 	orr.w	r8, r0, r4
 800914c:	ea41 0905 	orr.w	r9, r1, r5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009156:	bf00      	nop
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009160:	41030a3d 	.word	0x41030a3d
 8009164:	41030a3d 	.word	0x41030a3d
 8009168:	3b03126f 	.word	0x3b03126f

0800916c <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800916c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800917e:	edd7 7a00 	vldr	s15, [r7]
 8009182:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009208 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0x9c>
 8009186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	dd01      	ble.n	8009194 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009190:	4b1e      	ldr	r3, [pc, #120]	; (800920c <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0xa0>)
 8009192:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009194:	edd7 7a00 	vldr	s15, [r7]
 8009198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800919c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a0:	d502      	bpl.n	80091a8 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80091a2:	f04f 0300 	mov.w	r3, #0
 80091a6:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 80091a8:	edd7 7a00 	vldr	s15, [r7]
 80091ac:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009210 <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf+0xa4>
 80091b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80091b4:	eeb0 0a47 	vmov.f32	s0, s14
 80091b8:	f7f7 f9dc 	bl	8000574 <_ZSt5roundf>
 80091bc:	eef0 7a40 	vmov.f32	s15, s0
 80091c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c4:	ee17 3a90 	vmov	r3, s15
 80091c8:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091d0:	8afb      	ldrh	r3, [r7, #22]
 80091d2:	2200      	movs	r2, #0
 80091d4:	469a      	mov	sl, r3
 80091d6:	4693      	mov	fp, r2
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	ea4f 430a 	mov.w	r3, sl, lsl #16
 80091e4:	2200      	movs	r2, #0
 80091e6:	2400      	movs	r4, #0
 80091e8:	f023 4570 	bic.w	r5, r3, #4026531840	; 0xf0000000
 80091ec:	0c2d      	lsrs	r5, r5, #16
 80091ee:	042d      	lsls	r5, r5, #16
 80091f0:	ea40 0804 	orr.w	r8, r0, r4
 80091f4:	ea41 0905 	orr.w	r9, r1, r5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80091fe:	bf00      	nop
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009208:	41030a3d 	.word	0x41030a3d
 800920c:	41030a3d 	.word	0x41030a3d
 8009210:	3b03126f 	.word	0x3b03126f

08009214 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 8009226:	edd7 7a00 	vldr	s15, [r7]
 800922a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80092a0 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x8c>
 800922e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009236:	dd01      	ble.n	800923c <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009238:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x90>)
 800923a:	603b      	str	r3, [r7, #0]
                if (value < min) {
 800923c:	edd7 7a00 	vldr	s15, [r7]
 8009240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009248:	d502      	bpl.n	8009250 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x3c>
                    value = min;
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009250:	edd7 7a00 	vldr	s15, [r7]
 8009254:	eddf 6a14 	vldr	s13, [pc, #80]	; 80092a8 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf+0x94>
 8009258:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800925c:	eeb0 0a47 	vmov.f32	s0, s14
 8009260:	f7f7 f988 	bl	8000574 <_ZSt5roundf>
 8009264:	eef0 7a40 	vmov.f32	s15, s0
 8009268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800926c:	ee17 3a90 	vmov	r3, s15
 8009270:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	8af9      	ldrh	r1, [r7, #22]
 800927a:	2000      	movs	r0, #0
 800927c:	468a      	mov	sl, r1
 800927e:	4683      	mov	fp, r0
 8009280:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8009284:	2500      	movs	r5, #0
 8009286:	ea42 0804 	orr.w	r8, r2, r4
 800928a:	ea43 0905 	orr.w	r9, r3, r5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009294:	bf00      	nop
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800929e:	bf00      	nop
 80092a0:	41030a3d 	.word	0x41030a3d
 80092a4:	41030a3d 	.word	0x41030a3d
 80092a8:	3b03126f 	.word	0x3b03126f

080092ac <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80092ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092b0:	b086      	sub	sp, #24
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 80092be:	edd7 7a00 	vldr	s15, [r7]
 80092c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009354 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0xa8>
 80092c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ce:	dd01      	ble.n	80092d4 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0x28>
                    value = max;
 80092d0:	4b21      	ldr	r3, [pc, #132]	; (8009358 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0xac>)
 80092d2:	603b      	str	r3, [r7, #0]
                if (value < min) {
 80092d4:	edd7 7a00 	vldr	s15, [r7]
 80092d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e0:	d502      	bpl.n	80092e8 <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 80092e8:	edd7 7a00 	vldr	s15, [r7]
 80092ec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800935c <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf+0xb0>
 80092f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092f4:	eeb0 0a47 	vmov.f32	s0, s14
 80092f8:	f7f7 f93c 	bl	8000574 <_ZSt5roundf>
 80092fc:	eef0 7a40 	vmov.f32	s15, s0
 8009300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009304:	ee17 3a90 	vmov	r3, s15
 8009308:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009310:	8afb      	ldrh	r3, [r7, #22]
 8009312:	2200      	movs	r2, #0
 8009314:	4698      	mov	r8, r3
 8009316:	4691      	mov	r9, r2
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	f04f 0300 	mov.w	r3, #0
 8009320:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8009324:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8009328:	ea4f 3208 	mov.w	r2, r8, lsl #12
 800932c:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8009330:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009334:	f024 040f 	bic.w	r4, r4, #15
 8009338:	2500      	movs	r5, #0
 800933a:	ea40 0a04 	orr.w	sl, r0, r4
 800933e:	ea41 0b05 	orr.w	fp, r1, r5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8009348:	bf00      	nop
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009352:	bf00      	nop
 8009354:	41030a3d 	.word	0x41030a3d
 8009358:	41030a3d 	.word	0x41030a3d
 800935c:	3b03126f 	.word	0x3b03126f

08009360 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009364:	b088      	sub	sp, #32
 8009366:	af00      	add	r7, sp, #0
 8009368:	6178      	str	r0, [r7, #20]
 800936a:	6139      	str	r1, [r7, #16]
 800936c:	60fa      	str	r2, [r7, #12]
 800936e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8009372:	edd7 7a02 	vldr	s15, [r7, #8]
 8009376:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80093fc <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0x9c>
 800937a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800937e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009382:	dd01      	ble.n	8009388 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0x28>
                    value = max;
 8009384:	4b1e      	ldr	r3, [pc, #120]	; (8009400 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0xa0>)
 8009386:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 8009388:	edd7 7a02 	vldr	s15, [r7, #8]
 800938c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009394:	d502      	bpl.n	800939c <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0x3c>
                    value = min;
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	60bb      	str	r3, [r7, #8]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 800939c:	edd7 7a02 	vldr	s15, [r7, #8]
 80093a0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009404 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf+0xa4>
 80093a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80093a8:	eeb0 0a47 	vmov.f32	s0, s14
 80093ac:	f7f7 f8e2 	bl	8000574 <_ZSt5roundf>
 80093b0:	eef0 7a40 	vmov.f32	s15, s0
 80093b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b8:	ee17 3a90 	vmov	r3, s15
 80093bc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	8bf9      	ldrh	r1, [r7, #30]
 80093c6:	2000      	movs	r0, #0
 80093c8:	468a      	mov	sl, r1
 80093ca:	4683      	mov	fp, r0
 80093cc:	ea4f 291a 	mov.w	r9, sl, lsr #8
 80093d0:	ea4f 680a 	mov.w	r8, sl, lsl #24
 80093d4:	f008 447f 	and.w	r4, r8, #4278190080	; 0xff000000
 80093d8:	f009 050f 	and.w	r5, r9, #15
 80093dc:	ea42 0104 	orr.w	r1, r2, r4
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	432b      	orrs	r3, r5
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80093ec:	e9c3 1200 	strd	r1, r2, [r3]
            }
 80093f0:	bf00      	nop
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093fa:	bf00      	nop
 80093fc:	41030a3d 	.word	0x41030a3d
 8009400:	41030a3d 	.word	0x41030a3d
 8009404:	3b03126f 	.word	0x3b03126f

08009408 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8009408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800940c:	b086      	sub	sp, #24
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	607a      	str	r2, [r7, #4]
 8009416:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800941a:	edd7 7a00 	vldr	s15, [r7]
 800941e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80094a4 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0x9c>
 8009422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942a:	dd01      	ble.n	8009430 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0x28>
                    value = max;
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0xa0>)
 800942e:	603b      	str	r3, [r7, #0]
                if (value < min) {
 8009430:	edd7 7a00 	vldr	s15, [r7]
 8009434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943c:	d502      	bpl.n	8009444 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0x3c>
                    value = min;
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 8009444:	edd7 7a00 	vldr	s15, [r7]
 8009448:	eddf 6a18 	vldr	s13, [pc, #96]	; 80094ac <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf+0xa4>
 800944c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009450:	eeb0 0a47 	vmov.f32	s0, s14
 8009454:	f7f7 f88e 	bl	8000574 <_ZSt5roundf>
 8009458:	eef0 7a40 	vmov.f32	s15, s0
 800945c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009460:	ee17 3a90 	vmov	r3, s15
 8009464:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800946c:	8afb      	ldrh	r3, [r7, #22]
 800946e:	2200      	movs	r2, #0
 8009470:	469a      	mov	sl, r3
 8009472:	4693      	mov	fp, r2
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8009480:	2200      	movs	r2, #0
 8009482:	2400      	movs	r4, #0
 8009484:	f023 050f 	bic.w	r5, r3, #15
 8009488:	042d      	lsls	r5, r5, #16
 800948a:	0c2d      	lsrs	r5, r5, #16
 800948c:	ea40 0804 	orr.w	r8, r0, r4
 8009490:	ea41 0905 	orr.w	r9, r1, r5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800949a:	bf00      	nop
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094a4:	41030a3d 	.word	0x41030a3d
 80094a8:	41030a3d 	.word	0x41030a3d
 80094ac:	3b03126f 	.word	0x3b03126f

080094b0 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80094b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094b4:	b086      	sub	sp, #24
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 80094c2:	edd7 7a00 	vldr	s15, [r7]
 80094c6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800954c <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0x9c>
 80094ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d2:	dd01      	ble.n	80094d8 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0x28>
                    value = max;
 80094d4:	4b1e      	ldr	r3, [pc, #120]	; (8009550 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0xa0>)
 80094d6:	603b      	str	r3, [r7, #0]
                if (value < min) {
 80094d8:	edd7 7a00 	vldr	s15, [r7]
 80094dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80094e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e4:	d502      	bpl.n	80094ec <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0x3c>
                    value = min;
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	603b      	str	r3, [r7, #0]
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
 80094ec:	edd7 7a00 	vldr	s15, [r7]
 80094f0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8009554 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf+0xa4>
 80094f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80094f8:	eeb0 0a47 	vmov.f32	s0, s14
 80094fc:	f7f7 f83a 	bl	8000574 <_ZSt5roundf>
 8009500:	eef0 7a40 	vmov.f32	s15, s0
 8009504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009508:	ee17 3a90 	vmov	r3, s15
 800950c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009514:	8afb      	ldrh	r3, [r7, #22]
 8009516:	2200      	movs	r2, #0
 8009518:	469a      	mov	sl, r3
 800951a:	4693      	mov	fp, r2
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	f04f 0300 	mov.w	r3, #0
 8009524:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8009528:	2200      	movs	r2, #0
 800952a:	2400      	movs	r4, #0
 800952c:	f023 4570 	bic.w	r5, r3, #4026531840	; 0xf0000000
 8009530:	0c2d      	lsrs	r5, r5, #16
 8009532:	042d      	lsls	r5, r5, #16
 8009534:	ea40 0804 	orr.w	r8, r0, r4
 8009538:	ea41 0905 	orr.w	r9, r1, r5
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8009542:	bf00      	nop
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800954c:	41030a3d 	.word	0x41030a3d
 8009550:	41030a3d 	.word	0x41030a3d
 8009554:	3b03126f 	.word	0x3b03126f

08009558 <_ZN16OutputChannelPwmC1Ebf>:
	bool m_shortCircuitResetOngoing = false;

	using OUTPUT_STATE = signals::PDU_LPCh1_State;

public:
	OutputChannelPwm(bool _on = false, float _duty = 100.0f) : m_on {_on}, m_duty{_duty}, m_switchOn{_on} {
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	460b      	mov	r3, r1
 8009562:	ed87 0a01 	vstr	s0, [r7, #4]
 8009566:	72fb      	strb	r3, [r7, #11]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	7afa      	ldrb	r2, [r7, #11]
 800956c:	711a      	strb	r2, [r3, #4]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	609a      	str	r2, [r3, #8]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	7afa      	ldrb	r2, [r7, #11]
 8009578:	731a      	strb	r2, [r3, #12]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	611a      	str	r2, [r3, #16]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	751a      	strb	r2, [r3, #20]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	755a      	strb	r2, [r3, #21]
		m_lastChange = xTaskGetTickCount();
 800958c:	f00e f820 	bl	80175d0 <xTaskGetTickCount>
 8009590:	4602      	mov	r2, r0
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	611a      	str	r2, [r3, #16]
	}
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <_ZN16OutputChannelPwm3setEbf>:

	void set(bool _on, float _duty = -100.0f) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	460b      	mov	r3, r1
 80095aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80095ae:	72fb      	strb	r3, [r7, #11]
		if(_on != m_on || (_duty >= 0.0f && _duty != m_duty)) {
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	791b      	ldrb	r3, [r3, #4]
 80095b4:	7afa      	ldrb	r2, [r7, #11]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d111      	bne.n	80095de <_ZN16OutputChannelPwm3setEbf+0x3e>
 80095ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80095be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	da00      	bge.n	80095ca <_ZN16OutputChannelPwm3setEbf+0x2a>

			if(!m_on) {
				m_shortCircuitsDetected = 0;
			}
		}
	}
 80095c8:	e02a      	b.n	8009620 <_ZN16OutputChannelPwm3setEbf+0x80>
		if(_on != m_on || (_duty >= 0.0f && _duty != m_duty)) {
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80095d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80095d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	d020      	beq.n	8009620 <_ZN16OutputChannelPwm3setEbf+0x80>
			m_lastChange = xTaskGetTickCount();
 80095de:	f00d fff7 	bl	80175d0 <xTaskGetTickCount>
 80095e2:	4602      	mov	r2, r0
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	611a      	str	r2, [r3, #16]
			m_on = _on;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	7afa      	ldrb	r2, [r7, #11]
 80095ec:	711a      	strb	r2, [r3, #4]
			if(m_duty >= 0.0f) {
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80095f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fc:	db02      	blt.n	8009604 <_ZN16OutputChannelPwm3setEbf+0x64>
				m_duty = _duty;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	609a      	str	r2, [r3, #8]
			m_switchOn = m_on;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	791a      	ldrb	r2, [r3, #4]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	731a      	strb	r2, [r3, #12]
			if(!m_on) {
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	791b      	ldrb	r3, [r3, #4]
 8009610:	f083 0301 	eor.w	r3, r3, #1
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <_ZN16OutputChannelPwm3setEbf+0x80>
				m_shortCircuitsDetected = 0;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	751a      	strb	r2, [r3, #20]
	}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <_ZN16OutputChannelPwm7setDutyEf>:
	void setDuty(float _duty) {
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	ed87 0a00 	vstr	s0, [r7]
		m_duty = _duty;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	609a      	str	r2, [r3, #8]
	}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <_ZNK16OutputChannelPwm7getDutyEv>:
	float getDuty() const {
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
		return m_duty;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	ee07 3a90 	vmov	s15, r3
	}
 8009656:	eeb0 0a67 	vmov.f32	s0, s15
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <_ZNK16OutputChannelPwm3getEv>:
	bool get() const {
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
		return m_on;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	791b      	ldrb	r3, [r3, #4]
	}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <_ZNK16OutputChannelPwm9getSwitchEv>:

	bool getSwitch() const {
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
		return m_switchOn;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7b1b      	ldrb	r3, [r3, #12]
	}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <_ZN16OutputChannelPwm10setCurrentEf>:

	void setCurrent(float _current) {
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	ed87 0a00 	vstr	s0, [r7]
		m_current = _current;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	601a      	str	r2, [r3, #0]
	}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <_ZN16OutputChannelPwm9getStatusEv>:

	uint8_t getStatus() {
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
		if(xTaskGetTickCount() - m_lastChange >= m_waitingPeriodAfterChange) {
 80096ba:	f00d ff89 	bl	80175d0 <xTaskGetTickCount>
 80096be:	4602      	mov	r2, r0
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b7c      	cmp	r3, #124	; 0x7c
 80096c8:	bf8c      	ite	hi
 80096ca:	2301      	movhi	r3, #1
 80096cc:	2300      	movls	r3, #0
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d013      	beq.n	80096fc <_ZN16OutputChannelPwm9getStatusEv+0x4a>
			if(m_current >= m_errorCurrent) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	edd3 7a00 	vldr	s15, [r3]
 80096da:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80096de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e6:	db07      	blt.n	80096f8 <_ZN16OutputChannelPwm9getStatusEv+0x46>
				if(m_on) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	791b      	ldrb	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <_ZN16OutputChannelPwm9getStatusEv+0x42>
					return OUTPUT_STATE::OUTPUT_SHORT_CIRCUIT;
 80096f0:	2302      	movs	r3, #2
 80096f2:	e004      	b.n	80096fe <_ZN16OutputChannelPwm9getStatusEv+0x4c>
				} else {
					return OUTPUT_STATE::EXTERNAL_VOLTAGE;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e002      	b.n	80096fe <_ZN16OutputChannelPwm9getStatusEv+0x4c>
				}
			} else {
				return OUTPUT_STATE::OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	e000      	b.n	80096fe <_ZN16OutputChannelPwm9getStatusEv+0x4c>
			}
		} else {
			return OUTPUT_STATE::STATUS_CHANGE_PENDING;
 80096fc:	2301      	movs	r3, #1
		}
	}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <_ZN16OutputChannelPwm9numShortsEv>:

	uint8_t numShorts() {
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
		return m_shortCircuitsDetected;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	7d1b      	ldrb	r3, [r3, #20]
	}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <_ZN16OutputChannelPwm6updateEv>:

	void update() {
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
		uint8_t status = getStatus();
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff ffc3 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

		if(status == OUTPUT_STATE::OUTPUT_SHORT_CIRCUIT) {
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d114      	bne.n	8009760 <_ZN16OutputChannelPwm6updateEv+0x42>
			if(m_shortCircuitsDetected <= m_shortCircuitResetAttempts) {
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7d1b      	ldrb	r3, [r3, #20]
 800973a:	2b0e      	cmp	r3, #14
 800973c:	d810      	bhi.n	8009760 <_ZN16OutputChannelPwm6updateEv+0x42>
				m_shortCircuitsDetected++;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7d1b      	ldrb	r3, [r3, #20]
 8009742:	3301      	adds	r3, #1
 8009744:	b2da      	uxtb	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	751a      	strb	r2, [r3, #20]

				m_switchOn = false;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	731a      	strb	r2, [r3, #12]
				m_lastChange = xTaskGetTickCount();
 8009750:	f00d ff3e 	bl	80175d0 <xTaskGetTickCount>
 8009754:	4602      	mov	r2, r0
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	611a      	str	r2, [r3, #16]
				m_shortCircuitResetOngoing = true;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	755a      	strb	r2, [r3, #21]
			}
		}

		status = getStatus();
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ffa6 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]

		if(m_shortCircuitResetOngoing && xTaskGetTickCount() - m_lastChange >= 20) {	//  status != OUTPUT_STATE::STATUS_CHANGE_PENDING
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	7d5b      	ldrb	r3, [r3, #21]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d009      	beq.n	8009786 <_ZN16OutputChannelPwm6updateEv+0x68>
 8009772:	f00d ff2d 	bl	80175d0 <xTaskGetTickCount>
 8009776:	4602      	mov	r2, r0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b13      	cmp	r3, #19
 8009780:	d901      	bls.n	8009786 <_ZN16OutputChannelPwm6updateEv+0x68>
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <_ZN16OutputChannelPwm6updateEv+0x6a>
 8009786:	2300      	movs	r3, #0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <_ZN16OutputChannelPwm6updateEv+0x84>
			m_switchOn = true;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	731a      	strb	r2, [r3, #12]
			m_lastChange = xTaskGetTickCount();
 8009792:	f00d ff1d 	bl	80175d0 <xTaskGetTickCount>
 8009796:	4602      	mov	r2, r0
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	611a      	str	r2, [r3, #16]
			m_shortCircuitResetOngoing = false;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	755a      	strb	r2, [r3, #21]
		}
	}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <_ZN13OutputChannelC1Eb>:

};

class OutputChannel : public OutputChannelPwm {
public:
	OutputChannel(bool _on = false) : OutputChannelPwm{_on, 100.0f} {};
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80097d4 <_ZN13OutputChannelC1Eb+0x28>
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff fec8 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	42c80000 	.word	0x42c80000

080097d8 <_ZN14PduOutputStateC1Ev>:
};

// All output channels of the PDU with the initial states
typedef struct PduOutputState {
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff feb5 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3318      	adds	r3, #24
 80097f2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff fead 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3330      	adds	r3, #48	; 0x30
 8009802:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 8009806:	2100      	movs	r1, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fea5 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3348      	adds	r3, #72	; 0x48
 8009812:	2101      	movs	r1, #1
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff ffc9 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3360      	adds	r3, #96	; 0x60
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ffc3 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3378      	adds	r3, #120	; 0x78
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff ffbd 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	3390      	adds	r3, #144	; 0x90
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff ffb7 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	33a8      	adds	r3, #168	; 0xa8
 8009842:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff fe85 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	33c0      	adds	r3, #192	; 0xc0
 8009852:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 8009856:	2100      	movs	r1, #0
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fe7d 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	33d8      	adds	r3, #216	; 0xd8
 8009862:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 8009866:	2100      	movs	r1, #0
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff fe75 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	33f0      	adds	r3, #240	; 0xf0
 8009872:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fe6d 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009884:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fe64 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009896:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 800989a:	2100      	movs	r1, #0
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fe5b 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80098a8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fe52 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098ba:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80098be:	2100      	movs	r1, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fe49 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80098cc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80098d0:	2100      	movs	r1, #0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fe40 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80098de:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff fe37 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80098f0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009914 <_ZN14PduOutputStateC1Ev+0x13c>
 80098f4:	2100      	movs	r1, #0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fe2e 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff ff51 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	42c80000 	.word	0x42c80000

08009918 <_Z15anyErrorPresentv>:

/**
 * Checks if any error is present
 * @return true if any error is present
 */
bool anyErrorPresent() {
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
	return ERR_batterVoltageCritical_get() || ERR_batteryOvercurrent_get() || ERR_watchdogStateMachine_get();
 800991c:	f7fc fa0c 	bl	8005d38 <_Z29ERR_batterVoltageCritical_getv>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d109      	bne.n	800993a <_Z15anyErrorPresentv+0x22>
 8009926:	f7fc fa4b 	bl	8005dc0 <_Z26ERR_batteryOvercurrent_getv>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <_Z15anyErrorPresentv+0x22>
 8009930:	f7fc fa8a 	bl	8005e48 <_Z28ERR_watchdogStateMachine_getv>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <_Z15anyErrorPresentv+0x26>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <_Z15anyErrorPresentv+0x28>
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	bd80      	pop	{r7, pc}

08009944 <_Z14resetAllErrorsv>:

/**
 * Reset all errors
 */
void resetAllErrors() {
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
	ERR_batterVoltageCritical_clear();
 8009948:	f7fc f9d8 	bl	8005cfc <_Z31ERR_batterVoltageCritical_clearv>
	ERR_batteryOvercurrent_clear();
 800994c:	f7fc fa1a 	bl	8005d84 <_Z28ERR_batteryOvercurrent_clearv>
	ERR_watchdogStateMachine_clear();
 8009950:	f7fc fa5c 	bl	8005e0c <_Z30ERR_watchdogStateMachine_clearv>
}
 8009954:	bf00      	nop
 8009956:	bd80      	pop	{r7, pc}

08009958 <_Z14blinkStatusLedv>:

/**
 * Blink the status LED on the PDU
 */
void blinkStatusLed() {
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
	if(ledCounter == 0) {
 800995c:	4b14      	ldr	r3, [pc, #80]	; (80099b0 <_Z14blinkStatusLedv+0x58>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d111      	bne.n	8009988 <_Z14blinkStatusLedv+0x30>
		ledState = !ledState;
 8009964:	4b13      	ldr	r3, [pc, #76]	; (80099b4 <_Z14blinkStatusLedv+0x5c>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	f083 0301 	eor.w	r3, r3, #1
 800996c:	b2da      	uxtb	r2, r3
 800996e:	4b11      	ldr	r3, [pc, #68]	; (80099b4 <_Z14blinkStatusLedv+0x5c>)
 8009970:	701a      	strb	r2, [r3, #0]
		if(ledState) {
 8009972:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <_Z14blinkStatusLedv+0x5c>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <_Z14blinkStatusLedv+0x2a>
			LED_Green_Write(150);
 800997a:	2096      	movs	r0, #150	; 0x96
 800997c:	f7fd fec4 	bl	8007708 <LED_Green_Write>
 8009980:	e002      	b.n	8009988 <_Z14blinkStatusLedv+0x30>
		} else {
			LED_Green_Write(0);
 8009982:	2000      	movs	r0, #0
 8009984:	f7fd fec0 	bl	8007708 <LED_Green_Write>
		}
	}
	ledCounter = (ledCounter + 1) % (pduEnabled ? 20 : 100);
 8009988:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <_Z14blinkStatusLedv+0x58>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <_Z14blinkStatusLedv+0x60>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <_Z14blinkStatusLedv+0x42>
 8009996:	2314      	movs	r3, #20
 8009998:	e000      	b.n	800999c <_Z14blinkStatusLedv+0x44>
 800999a:	2364      	movs	r3, #100	; 0x64
 800999c:	fb92 f1f3 	sdiv	r1, r2, r3
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	4a02      	ldr	r2, [pc, #8]	; (80099b0 <_Z14blinkStatusLedv+0x58>)
 80099a8:	6013      	str	r3, [r2, #0]
}
 80099aa:	bf00      	nop
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	200004d0 	.word	0x200004d0
 80099b4:	200004f9 	.word	0x200004f9
 80099b8:	200004f8 	.word	0x200004f8

080099bc <_Z15estimateLiPoSocf>:
 * Estimate the SOC of a LiPo battery based on a single cell voltage.
 * It linearly interpolates the given array of cell voltage and SOC.
 * @param cellVoltage
 * @return
 */
float estimateLiPoSoc(float cellVoltage) {
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t i = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	81fb      	strh	r3, [r7, #14]
	for(i = 0; i < LIPO_CELL_DATA_NUM_POINTS; i++) {
 80099ca:	2300      	movs	r3, #0
 80099cc:	81fb      	strh	r3, [r7, #14]
 80099ce:	89fb      	ldrh	r3, [r7, #14]
 80099d0:	2b14      	cmp	r3, #20
 80099d2:	d811      	bhi.n	80099f8 <_Z15estimateLiPoSocf+0x3c>
		if(cellVoltage <= LIPO_CELL_DATA[i][0]) {
 80099d4:	89fb      	ldrh	r3, [r7, #14]
 80099d6:	4a34      	ldr	r2, [pc, #208]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	4413      	add	r3, r2
 80099dc:	edd3 7a00 	vldr	s15, [r3]
 80099e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80099e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ec:	d903      	bls.n	80099f6 <_Z15estimateLiPoSocf+0x3a>
	for(i = 0; i < LIPO_CELL_DATA_NUM_POINTS; i++) {
 80099ee:	89fb      	ldrh	r3, [r7, #14]
 80099f0:	3301      	adds	r3, #1
 80099f2:	81fb      	strh	r3, [r7, #14]
 80099f4:	e7eb      	b.n	80099ce <_Z15estimateLiPoSocf+0x12>
			break;
 80099f6:	bf00      	nop
		}
	}
	// Value is smaller than the smallest value
	if(i == 0) {
 80099f8:	89fb      	ldrh	r3, [r7, #14]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d107      	bne.n	8009a0e <_Z15estimateLiPoSocf+0x52>
		return LIPO_CELL_DATA[i][1];
 80099fe:	89fb      	ldrh	r3, [r7, #14]
 8009a00:	4a29      	ldr	r2, [pc, #164]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	4413      	add	r3, r2
 8009a06:	3304      	adds	r3, #4
 8009a08:	edd3 7a00 	vldr	s15, [r3]
 8009a0c:	e044      	b.n	8009a98 <_Z15estimateLiPoSocf+0xdc>
	}

	// Value is bigger than the biggest value
	if(i == LIPO_CELL_DATA_NUM_POINTS) {
 8009a0e:	89fb      	ldrh	r3, [r7, #14]
 8009a10:	2b15      	cmp	r3, #21
 8009a12:	d108      	bne.n	8009a26 <_Z15estimateLiPoSocf+0x6a>
		return LIPO_CELL_DATA[i-1][1];
 8009a14:	89fb      	ldrh	r3, [r7, #14]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	4a23      	ldr	r2, [pc, #140]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	4413      	add	r3, r2
 8009a1e:	3304      	adds	r3, #4
 8009a20:	edd3 7a00 	vldr	s15, [r3]
 8009a24:	e038      	b.n	8009a98 <_Z15estimateLiPoSocf+0xdc>
	}

	// Value is between two values
	return (cellVoltage - LIPO_CELL_DATA[i-1][0]) / (LIPO_CELL_DATA[i][0] - LIPO_CELL_DATA[i-1][0]) * (LIPO_CELL_DATA[i][1] - LIPO_CELL_DATA[i-1][1]) + LIPO_CELL_DATA[i-1][1];
 8009a26:	89fb      	ldrh	r3, [r7, #14]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4a1f      	ldr	r2, [pc, #124]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	4413      	add	r3, r2
 8009a30:	edd3 7a00 	vldr	s15, [r3]
 8009a34:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009a3c:	89fb      	ldrh	r3, [r7, #14]
 8009a3e:	4a1a      	ldr	r2, [pc, #104]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a40:	00db      	lsls	r3, r3, #3
 8009a42:	4413      	add	r3, r2
 8009a44:	ed93 7a00 	vldr	s14, [r3]
 8009a48:	89fb      	ldrh	r3, [r7, #14]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4a16      	ldr	r2, [pc, #88]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	4413      	add	r3, r2
 8009a52:	edd3 7a00 	vldr	s15, [r3]
 8009a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5e:	89fb      	ldrh	r3, [r7, #14]
 8009a60:	4a11      	ldr	r2, [pc, #68]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	4413      	add	r3, r2
 8009a66:	3304      	adds	r3, #4
 8009a68:	edd3 6a00 	vldr	s13, [r3]
 8009a6c:	89fb      	ldrh	r3, [r7, #14]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	4a0d      	ldr	r2, [pc, #52]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4413      	add	r3, r2
 8009a76:	3304      	adds	r3, #4
 8009a78:	edd3 7a00 	vldr	s15, [r3]
 8009a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a84:	89fb      	ldrh	r3, [r7, #14]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	4a07      	ldr	r2, [pc, #28]	; (8009aa8 <_Z15estimateLiPoSocf+0xec>)
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	3304      	adds	r3, #4
 8009a90:	edd3 7a00 	vldr	s15, [r3]
 8009a94:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009a98:	eeb0 0a67 	vmov.f32	s0, s15
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	0801c2b8 	.word	0x0801c2b8

08009aac <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009ac6:	f7f6 fd8e 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8009ace:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8009ad2:	d000      	beq.n	8009ad6 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 8009ad4:	e7fe      	b.n	8009ad4 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	331c      	adds	r3, #28
 8009af0:	461a      	mov	r2, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff ffda 	bl	8009aac <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af02      	add	r7, sp, #8
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	2203      	movs	r2, #3
 8009b18:	f240 315a 	movw	r1, #858	; 0x35a
 8009b1c:	f7f6 fd63 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8009b24:	f240 325a 	movw	r2, #858	; 0x35a
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d000      	beq.n	8009b2e <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8009b2c:	e7fe      	b.n	8009b2c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	331c      	adds	r3, #28
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff ffd9 	bl	8009b02 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af02      	add	r7, sp, #8
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2206      	movs	r2, #6
 8009b70:	f240 215a 	movw	r1, #602	; 0x25a
 8009b74:	f7f6 fd37 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8009b7c:	f240 225a 	movw	r2, #602	; 0x25a
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d000      	beq.n	8009b86 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8009b84:	e7fe      	b.n	8009b84 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	331c      	adds	r3, #28
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff ffd9 	bl	8009b5a <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b086      	sub	sp, #24
 8009bb6:	af02      	add	r7, sp, #8
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	f240 21da 	movw	r1, #730	; 0x2da
 8009bcc:	f7f6 fd0b 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8009bd4:	f240 22da 	movw	r2, #730	; 0x2da
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d000      	beq.n	8009bde <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8009bdc:	e7fe      	b.n	8009bdc <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	331c      	adds	r3, #28
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff ffd9 	bl	8009bb2 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af02      	add	r7, sp, #8
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	607a      	str	r2, [r7, #4]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f240 215b 	movw	r1, #603	; 0x25b
 8009c24:	f7f6 fcdf 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8009c2c:	f240 225b 	movw	r2, #603	; 0x25b
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d000      	beq.n	8009c36 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8009c34:	e7fe      	b.n	8009c34 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	331c      	adds	r3, #28
 8009c50:	461a      	mov	r2, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ffd9 	bl	8009c0a <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af02      	add	r7, sp, #8
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	2300      	movs	r3, #0
 8009c76:	2202      	movs	r2, #2
 8009c78:	f240 4141 	movw	r1, #1089	; 0x441
 8009c7c:	f7f6 fcb3 	bl	80005e6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8009c84:	f240 4241 	movw	r2, #1089	; 0x441
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d000      	beq.n	8009c8e <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8009c8c:	e7fe      	b.n	8009c8c <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	331c      	adds	r3, #28
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff ffd9 	bl	8009c62 <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <_Z18receiveCanMessagesv>:

/**
 * Function to receive all CAN messages
 */

void receiveCanMessages() {
 8009cbc:	b5b0      	push	{r4, r5, r7, lr}
 8009cbe:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8009cc2:	af00      	add	r7, sp, #0
	using namespace can;
	while(xMessageBufferReceive(handlePduRxMessageBuffer, &rxRawMsg, sizeof(rxRawMsg), 0) != 0) {
 8009cc4:	4bdb      	ldr	r3, [pc, #876]	; (800a034 <_Z18receiveCanMessagesv+0x378>)
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	2224      	movs	r2, #36	; 0x24
 8009ccc:	49da      	ldr	r1, [pc, #872]	; (800a038 <_Z18receiveCanMessagesv+0x37c>)
 8009cce:	f00c fec3 	bl	8016a58 <xStreamBufferReceive>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bf14      	ite	ne
 8009cd8:	2301      	movne	r3, #1
 8009cda:	2300      	moveq	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 8662 	beq.w	800a9a8 <_Z18receiveCanMessagesv+0xcec>
		// Control message from state machine
		if(checkRxMessage<messages::PDU_RX_Control>(rxRawMsg)) {
 8009ce4:	48d4      	ldr	r0, [pc, #848]	; (800a038 <_Z18receiveCanMessagesv+0x37c>)
 8009ce6:	f7fc fc19 	bl	800651c <_ZN3can14checkRxMessageINS_8messages14PDU_RX_ControlEEEbRK9RxMessage>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 83a7 	beq.w	800a440 <_Z18receiveCanMessagesv+0x784>
			// Reset watchdog for state machine
			stateMachineWatchdog.reset();
 8009cf2:	48d2      	ldr	r0, [pc, #840]	; (800a03c <_Z18receiveCanMessagesv+0x380>)
 8009cf4:	f7fc ff10 	bl	8006b18 <_ZN8Watchdog5resetEv>

			can::Message<messages::PDU_RX_Control> controlMsg{rxRawMsg};
 8009cf8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009cfc:	49ce      	ldr	r1, [pc, #824]	; (800a038 <_Z18receiveCanMessagesv+0x37c>)
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff feee 	bl	8009ae0 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1ERK9RxMessage>
			bool errorReset = controlMsg.get<signals::PDU_RX_ErrorReset>();
 8009d04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f003 f84b 	bl	800cda4 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3getINS_7signals17PDU_RX_ErrorResetEEENT_8dataTypeEv>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
			bool _enable	= controlMsg.get<signals::PDU_RX_Enable>();  //activates control mode
 8009d14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f003 f855 	bl	800cdc8 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3getINS_7signals13PDU_RX_EnableEEENT_8dataTypeEv>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
			bool peHwEnable = controlMsg.get<signals::PDU_RX_PEHWEnable>(); //allows the PDU to set the PE_enable channel (D2)
 8009d24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f003 f85f 	bl	800cdec <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3getINS_7signals17PDU_RX_PEHWEnableEEENT_8dataTypeEv>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425


			// Reset all errors if requested
			if(errorReset) {
 8009d34:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <_Z18receiveCanMessagesv+0x84>
				resetAllErrors();
 8009d3c:	f7ff fe02 	bl	8009944 <_Z14resetAllErrorsv>
			}

			// Edge detection: Mode change from Manual Control to State Machine Control
			if(!pduEnabled && _enable) { // Enable was just set
 8009d40:	4bbf      	ldr	r3, [pc, #764]	; (800a040 <_Z18receiveCanMessagesv+0x384>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f083 0301 	eor.w	r3, r3, #1
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 81bd 	beq.w	800a0ca <_Z18receiveCanMessagesv+0x40e>
 8009d50:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 81b8 	beq.w	800a0ca <_Z18receiveCanMessagesv+0x40e>
				if(!anyErrorPresent()) {	// Do not enable if there is still an error present
 8009d5a:	f7ff fddd 	bl	8009918 <_Z15anyErrorPresentv>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f083 0301 	eor.w	r3, r3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 81a8 	beq.w	800a0bc <_Z18receiveCanMessagesv+0x400>
					pduEnabled = _enable;
 8009d6c:	4ab4      	ldr	r2, [pc, #720]	; (800a040 <_Z18receiveCanMessagesv+0x384>)
 8009d6e:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8009d72:	7013      	strb	r3, [r2, #0]

					// Reset all output channels to their default values:
					outputState = {};
 8009d74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009d78:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff fbea 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009d84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009d88:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fbe2 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009d94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009d98:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fbda 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009da4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009da8:	2101      	movs	r1, #1
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fcfe 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009db0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fcf8 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009dbc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fcf2 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009dc8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fcec 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009dd4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009dd8:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff fbba 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009de4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009de8:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009dec:	2100      	movs	r1, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff fbb2 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009df4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009df8:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff fbaa 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e04:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009e08:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff fba2 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e14:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009e18:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff fb9a 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e24:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8009e28:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff fb92 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e34:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8009e38:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff fb8a 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e44:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8009e48:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fb82 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e54:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8009e58:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff fb7a 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e64:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8009e68:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fb72 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e74:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8009e78:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800a044 <_Z18receiveCanMessagesv+0x388>
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fb6a 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 8009e84:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff fc8e 	bl	80097ac <_ZN13OutputChannelC1Eb>
 8009e90:	4a6d      	ldr	r2, [pc, #436]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009e92:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009e96:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	461d      	mov	r5, r3
 8009e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ea2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ea6:	e884 0003 	stmia.w	r4, {r0, r1}
 8009eaa:	4a67      	ldr	r2, [pc, #412]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009eac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009eb0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8009eb4:	f102 0418 	add.w	r4, r2, #24
 8009eb8:	461d      	mov	r5, r3
 8009eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ebe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ec2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ec6:	4a60      	ldr	r2, [pc, #384]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009ec8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009ecc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8009ed0:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8009ed4:	461d      	mov	r5, r3
 8009ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ede:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ee2:	4a59      	ldr	r2, [pc, #356]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009ee4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009ee8:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8009eec:	f102 0448 	add.w	r4, r2, #72	; 0x48
 8009ef0:	461d      	mov	r5, r3
 8009ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009efa:	e884 0003 	stmia.w	r4, {r0, r1}
 8009efe:	4a52      	ldr	r2, [pc, #328]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009f00:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009f04:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8009f08:	f102 0460 	add.w	r4, r2, #96	; 0x60
 8009f0c:	461d      	mov	r5, r3
 8009f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f16:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f1a:	4a4b      	ldr	r2, [pc, #300]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009f1c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009f20:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8009f24:	f102 0478 	add.w	r4, r2, #120	; 0x78
 8009f28:	461d      	mov	r5, r3
 8009f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f32:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f36:	4a44      	ldr	r2, [pc, #272]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009f38:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009f3c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8009f40:	f102 0490 	add.w	r4, r2, #144	; 0x90
 8009f44:	461d      	mov	r5, r3
 8009f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f52:	4a3d      	ldr	r2, [pc, #244]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009f54:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009f58:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8009f5c:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 8009f60:	461d      	mov	r5, r3
 8009f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f6e:	4a36      	ldr	r2, [pc, #216]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009f70:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009f74:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8009f78:	f102 04c0 	add.w	r4, r2, #192	; 0xc0
 8009f7c:	461d      	mov	r5, r3
 8009f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f86:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f8a:	4a2f      	ldr	r2, [pc, #188]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009f8c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009f90:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8009f94:	f102 04d8 	add.w	r4, r2, #216	; 0xd8
 8009f98:	461d      	mov	r5, r3
 8009f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009fa6:	4a28      	ldr	r2, [pc, #160]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009fa8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009fac:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8009fb0:	f102 04f0 	add.w	r4, r2, #240	; 0xf0
 8009fb4:	461d      	mov	r5, r3
 8009fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fbe:	e884 0003 	stmia.w	r4, {r0, r1}
 8009fc2:	4a21      	ldr	r2, [pc, #132]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009fc4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009fc8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8009fcc:	f502 7484 	add.w	r4, r2, #264	; 0x108
 8009fd0:	461d      	mov	r5, r3
 8009fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fda:	e884 0003 	stmia.w	r4, {r0, r1}
 8009fde:	4a1a      	ldr	r2, [pc, #104]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009fe0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8009fe4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8009fe8:	f502 7490 	add.w	r4, r2, #288	; 0x120
 8009fec:	461d      	mov	r5, r3
 8009fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ff6:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ffa:	4a13      	ldr	r2, [pc, #76]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 8009ffc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a000:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800a004:	f502 749c 	add.w	r4, r2, #312	; 0x138
 800a008:	461d      	mov	r5, r3
 800a00a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a00c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a00e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a012:	e884 0003 	stmia.w	r4, {r0, r1}
 800a016:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <_Z18receiveCanMessagesv+0x38c>)
 800a018:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a01c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800a020:	f502 74a8 	add.w	r4, r2, #336	; 0x150
 800a024:	461d      	mov	r5, r3
 800a026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a02a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a02e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a032:	e00b      	b.n	800a04c <_Z18receiveCanMessagesv+0x390>
 800a034:	200003d8 	.word	0x200003d8
 800a038:	200004d4 	.word	0x200004d4
 800a03c:	20000504 	.word	0x20000504
 800a040:	200004f8 	.word	0x200004f8
 800a044:	42c80000 	.word	0x42c80000
 800a048:	20000514 	.word	0x20000514
 800a04c:	4adb      	ldr	r2, [pc, #876]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a04e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a056:	f502 74b4 	add.w	r4, r2, #360	; 0x168
 800a05a:	461d      	mov	r5, r3
 800a05c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a05e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a060:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a064:	e884 0003 	stmia.w	r4, {r0, r1}
 800a068:	4ad4      	ldr	r2, [pc, #848]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a06a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a06e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a072:	f502 74c0 	add.w	r4, r2, #384	; 0x180
 800a076:	461d      	mov	r5, r3
 800a078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a07c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a080:	e884 0003 	stmia.w	r4, {r0, r1}
 800a084:	4acd      	ldr	r2, [pc, #820]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a086:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a08a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800a08e:	f502 74cc 	add.w	r4, r2, #408	; 0x198
 800a092:	461d      	mov	r5, r3
 800a094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a098:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a09c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a0a0:	4ac6      	ldr	r2, [pc, #792]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a0a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a0a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a0aa:	f502 74d8 	add.w	r4, r2, #432	; 0x1b0
 800a0ae:	461d      	mov	r5, r3
 800a0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a0b8:	e884 0003 	stmia.w	r4, {r0, r1}
				}

				// Set CANzero status to operational -> changing of critical OD entries now locked
				cz_interface::getInstance()->setStatus(operational);
 800a0bc:	f7fc f972 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2105      	movs	r1, #5
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fc f837 	bl	8006138 <_ZN12cz_interface9setStatusE9cz_status>
			}

			// Edge detection: Mode change from State Machine Control to Manual Control
			if(pduEnabled && !_enable) { // Enable was reset
 800a0ca:	4bbd      	ldr	r3, [pc, #756]	; (800a3c0 <_Z18receiveCanMessagesv+0x704>)
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 819c 	beq.w	800a40c <_Z18receiveCanMessagesv+0x750>
 800a0d4:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 800a0d8:	f083 0301 	eor.w	r3, r3, #1
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 8194 	beq.w	800a40c <_Z18receiveCanMessagesv+0x750>
				pduEnabled = _enable;
 800a0e4:	4ab6      	ldr	r2, [pc, #728]	; (800a3c0 <_Z18receiveCanMessagesv+0x704>)
 800a0e6:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 800a0ea:	7013      	strb	r3, [r2, #0]

				// Reset all output channels to their default values:
				outputState = {};
 800a0ec:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800a0f0:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fa2e 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a0fc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800a100:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a104:	2100      	movs	r1, #0
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff fa26 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a10c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800a110:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a114:	2100      	movs	r1, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff fa1e 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a11c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800a120:	2101      	movs	r1, #1
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff fb42 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800a128:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800a12c:	2100      	movs	r1, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff fb3c 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800a134:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800a138:	2100      	movs	r1, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fb36 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800a140:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800a144:	2100      	movs	r1, #0
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff fb30 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800a14c:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800a150:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a154:	2100      	movs	r1, #0
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff f9fe 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a15c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800a160:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a164:	2100      	movs	r1, #0
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff f9f6 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a16c:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800a170:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a174:	2100      	movs	r1, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff f9ee 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a17c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800a180:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff f9e6 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a18c:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800a190:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff f9de 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a19c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800a1a0:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff f9d6 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a1ac:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800a1b0:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff f9ce 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a1bc:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800a1c0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff f9c6 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a1cc:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800a1d0:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff f9be 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a1dc:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800a1e0:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff f9b6 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a1ec:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800a1f0:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800a3c4 <_Z18receiveCanMessagesv+0x708>
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff f9ae 	bl	8009558 <_ZN16OutputChannelPwmC1Ebf>
 800a1fc:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fad2 	bl	80097ac <_ZN13OutputChannelC1Eb>
 800a208:	4a6c      	ldr	r2, [pc, #432]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a20a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a20e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800a212:	4614      	mov	r4, r2
 800a214:	461d      	mov	r5, r3
 800a216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a21a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a21e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a222:	4a66      	ldr	r2, [pc, #408]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a224:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a228:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a22c:	f102 0418 	add.w	r4, r2, #24
 800a230:	461d      	mov	r5, r3
 800a232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a236:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a23a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a23e:	4a5f      	ldr	r2, [pc, #380]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a240:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a244:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a248:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800a24c:	461d      	mov	r5, r3
 800a24e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a252:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a256:	e884 0003 	stmia.w	r4, {r0, r1}
 800a25a:	4a58      	ldr	r2, [pc, #352]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a25c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a260:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800a264:	f102 0448 	add.w	r4, r2, #72	; 0x48
 800a268:	461d      	mov	r5, r3
 800a26a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a26c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a26e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a272:	e884 0003 	stmia.w	r4, {r0, r1}
 800a276:	4a51      	ldr	r2, [pc, #324]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a278:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a27c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800a280:	f102 0460 	add.w	r4, r2, #96	; 0x60
 800a284:	461d      	mov	r5, r3
 800a286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a28a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a28e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a292:	4a4a      	ldr	r2, [pc, #296]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a294:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a298:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800a29c:	f102 0478 	add.w	r4, r2, #120	; 0x78
 800a2a0:	461d      	mov	r5, r3
 800a2a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2aa:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2ae:	4a43      	ldr	r2, [pc, #268]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a2b0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a2b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800a2b8:	f102 0490 	add.w	r4, r2, #144	; 0x90
 800a2bc:	461d      	mov	r5, r3
 800a2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2c6:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2ca:	4a3c      	ldr	r2, [pc, #240]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a2cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a2d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a2d4:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 800a2d8:	461d      	mov	r5, r3
 800a2da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2e2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2e6:	4a35      	ldr	r2, [pc, #212]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a2e8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a2ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2f0:	f102 04c0 	add.w	r4, r2, #192	; 0xc0
 800a2f4:	461d      	mov	r5, r3
 800a2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2fe:	e884 0003 	stmia.w	r4, {r0, r1}
 800a302:	4a2e      	ldr	r2, [pc, #184]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a304:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a308:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a30c:	f102 04d8 	add.w	r4, r2, #216	; 0xd8
 800a310:	461d      	mov	r5, r3
 800a312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a316:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a31a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a31e:	4b27      	ldr	r3, [pc, #156]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a320:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800a324:	f507 7553 	add.w	r5, r7, #844	; 0x34c
 800a328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a32a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a32c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a330:	e884 0003 	stmia.w	r4, {r0, r1}
 800a334:	4b21      	ldr	r3, [pc, #132]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a336:	f503 7484 	add.w	r4, r3, #264	; 0x108
 800a33a:	f507 7559 	add.w	r5, r7, #868	; 0x364
 800a33e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a342:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a346:	e884 0003 	stmia.w	r4, {r0, r1}
 800a34a:	4b1c      	ldr	r3, [pc, #112]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a34c:	f503 7490 	add.w	r4, r3, #288	; 0x120
 800a350:	f507 755f 	add.w	r5, r7, #892	; 0x37c
 800a354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a358:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a35c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a360:	4b16      	ldr	r3, [pc, #88]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a362:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a366:	f507 7565 	add.w	r5, r7, #916	; 0x394
 800a36a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a36c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a36e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a372:	e884 0003 	stmia.w	r4, {r0, r1}
 800a376:	4b11      	ldr	r3, [pc, #68]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a378:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800a37c:	f507 756b 	add.w	r5, r7, #940	; 0x3ac
 800a380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a384:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a388:	e884 0003 	stmia.w	r4, {r0, r1}
 800a38c:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a38e:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800a392:	f507 7571 	add.w	r5, r7, #964	; 0x3c4
 800a396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a39a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a39e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3a2:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <_Z18receiveCanMessagesv+0x700>)
 800a3a4:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800a3a8:	f507 7577 	add.w	r5, r7, #988	; 0x3dc
 800a3ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a3b4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3b8:	e006      	b.n	800a3c8 <_Z18receiveCanMessagesv+0x70c>
 800a3ba:	bf00      	nop
 800a3bc:	20000514 	.word	0x20000514
 800a3c0:	200004f8 	.word	0x200004f8
 800a3c4:	42c80000 	.word	0x42c80000
 800a3c8:	4b9b      	ldr	r3, [pc, #620]	; (800a638 <_Z18receiveCanMessagesv+0x97c>)
 800a3ca:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 800a3ce:	f507 757d 	add.w	r5, r7, #1012	; 0x3f4
 800a3d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a3da:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3de:	4b96      	ldr	r3, [pc, #600]	; (800a638 <_Z18receiveCanMessagesv+0x97c>)
 800a3e0:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 800a3e4:	f207 450c 	addw	r5, r7, #1036	; 0x40c
 800a3e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a3f0:	e884 0003 	stmia.w	r4, {r0, r1}

				// Set CANzero status to default state
				cz_interface::getInstance()->setStatus(pre_operational);
 800a3f4:	f7fb ffd6 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	217f      	movs	r1, #127	; 0x7f
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fb fe9b 	bl	8006138 <_ZN12cz_interface9setStatusE9cz_status>

				// Let cooling pump run until one minute after disabling
				disableTime = xTaskGetTickCount();
 800a402:	f00d f8e5 	bl	80175d0 <xTaskGetTickCount>
 800a406:	4603      	mov	r3, r0
 800a408:	4a8c      	ldr	r2, [pc, #560]	; (800a63c <_Z18receiveCanMessagesv+0x980>)
 800a40a:	6013      	str	r3, [r2, #0]
			}

			// PDU is pduEnabled and in State Machine control mode
			if(pduEnabled) {
 800a40c:	4b8c      	ldr	r3, [pc, #560]	; (800a640 <_Z18receiveCanMessagesv+0x984>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f43f ac57 	beq.w	8009cc4 <_Z18receiveCanMessagesv+0x8>
				outputState.SDC.set(true);
 800a416:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a41a:	2101      	movs	r1, #1
 800a41c:	488a      	ldr	r0, [pc, #552]	; (800a648 <_Z18receiveCanMessagesv+0x98c>)
 800a41e:	f7ff f8bf 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh5_powerElectronics.set(true);
 800a422:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a426:	2101      	movs	r1, #1
 800a428:	4888      	ldr	r0, [pc, #544]	; (800a64c <_Z18receiveCanMessagesv+0x990>)
 800a42a:	f7ff f8b9 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh6.set(peHwEnable);
 800a42e:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 800a432:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a436:	4619      	mov	r1, r3
 800a438:	4885      	ldr	r0, [pc, #532]	; (800a650 <_Z18receiveCanMessagesv+0x994>)
 800a43a:	f7ff f8b1 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
 800a43e:	e441      	b.n	8009cc4 <_Z18receiveCanMessagesv+0x8>
			}

		} else if(checkRxMessage<messages::PDU_RX_Manual_Control>(rxRawMsg)) {
 800a440:	4884      	ldr	r0, [pc, #528]	; (800a654 <_Z18receiveCanMessagesv+0x998>)
 800a442:	f7fc f883 	bl	800654c <_ZN3can14checkRxMessageINS_8messages21PDU_RX_Manual_ControlEEEbRK9RxMessage>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8123 	beq.w	800a694 <_Z18receiveCanMessagesv+0x9d8>
			can::Message<messages::PDU_RX_Manual_Control> manualControlMsg{rxRawMsg};
 800a44e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a452:	4980      	ldr	r1, [pc, #512]	; (800a654 <_Z18receiveCanMessagesv+0x998>)
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fb6f 	bl	8009b38 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEEC1ERK9RxMessage>

			// PDU is in manual control mode
			if(!pduEnabled) {
 800a45a:	4b79      	ldr	r3, [pc, #484]	; (800a640 <_Z18receiveCanMessagesv+0x984>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f083 0301 	eor.w	r3, r3, #1
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	f43f ac2d 	beq.w	8009cc4 <_Z18receiveCanMessagesv+0x8>
				outputState.LPCh1_opticalSensor.set(					manualControlMsg.get<signals::PDU_LPCh1_Enable>());
 800a46a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a46e:	4618      	mov	r0, r3
 800a470:	f002 fcce 	bl	800ce10 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh1_EnableEEENT_8dataTypeEv>
 800a474:	4603      	mov	r3, r0
 800a476:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a47a:	4619      	mov	r1, r3
 800a47c:	486e      	ldr	r0, [pc, #440]	; (800a638 <_Z18receiveCanMessagesv+0x97c>)
 800a47e:	f7ff f88f 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh2.set(					manualControlMsg.get<signals::PDU_LPCh2_Enable>());
 800a482:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a486:	4618      	mov	r0, r3
 800a488:	f002 fcd4 	bl	800ce34 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh2_EnableEEENT_8dataTypeEv>
 800a48c:	4603      	mov	r3, r0
 800a48e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a492:	4619      	mov	r1, r3
 800a494:	4870      	ldr	r0, [pc, #448]	; (800a658 <_Z18receiveCanMessagesv+0x99c>)
 800a496:	f7ff f883 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh3_HVCU.set(				manualControlMsg.get<signals::PDU_LPCh3_Enable>());
 800a49a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f002 fcda 	bl	800ce58 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh3_EnableEEENT_8dataTypeEv>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	486b      	ldr	r0, [pc, #428]	; (800a65c <_Z18receiveCanMessagesv+0x9a0>)
 800a4ae:	f7ff f877 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh4_eboxECUs.set(			manualControlMsg.get<signals::PDU_LPCh4_Enable>());
 800a4b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f002 fce0 	bl	800ce7c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh4_EnableEEENT_8dataTypeEv>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	ed9f 0a61 	vldr	s0, [pc, #388]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4866      	ldr	r0, [pc, #408]	; (800a660 <_Z18receiveCanMessagesv+0x9a4>)
 800a4c6:	f7ff f86b 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh5_powerElectronics.set(	manualControlMsg.get<signals::PDU_LPCh5_Enable>());
 800a4ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f002 fce6 	bl	800cea0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh5_EnableEEENT_8dataTypeEv>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a4da:	4619      	mov	r1, r3
 800a4dc:	485b      	ldr	r0, [pc, #364]	; (800a64c <_Z18receiveCanMessagesv+0x990>)
 800a4de:	f7ff f85f 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh6.set(					manualControlMsg.get<signals::PDU_LPCh6_Enable>());
 800a4e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 fcec 	bl	800cec4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh6_EnableEEENT_8dataTypeEv>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4856      	ldr	r0, [pc, #344]	; (800a650 <_Z18receiveCanMessagesv+0x994>)
 800a4f6:	f7ff f853 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh7_rearECU.set(			manualControlMsg.get<signals::PDU_LPCh7_Enable>());
 800a4fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a4fe:	4618      	mov	r0, r3
 800a500:	f002 fcf2 	bl	800cee8 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh7_EnableEEENT_8dataTypeEv>
 800a504:	4603      	mov	r3, r0
 800a506:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a50a:	4619      	mov	r1, r3
 800a50c:	4855      	ldr	r0, [pc, #340]	; (800a664 <_Z18receiveCanMessagesv+0x9a8>)
 800a50e:	f7ff f847 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh8_telemetry.set(  		manualControlMsg.get<signals::PDU_LPCh8_Enable>());
 800a512:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a516:	4618      	mov	r0, r3
 800a518:	f002 fcf8 	bl	800cf0c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh8_EnableEEENT_8dataTypeEv>
 800a51c:	4603      	mov	r3, r0
 800a51e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a522:	4619      	mov	r1, r3
 800a524:	4850      	ldr	r0, [pc, #320]	; (800a668 <_Z18receiveCanMessagesv+0x9ac>)
 800a526:	f7ff f83b 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh9_logger.set( 	manualControlMsg.get<signals::PDU_LPCh9_Enable>());
 800a52a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a52e:	4618      	mov	r0, r3
 800a530:	f002 fcfe 	bl	800cf30 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh9_EnableEEENT_8dataTypeEv>
 800a534:	4603      	mov	r3, r0
 800a536:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a53a:	4619      	mov	r1, r3
 800a53c:	484b      	ldr	r0, [pc, #300]	; (800a66c <_Z18receiveCanMessagesv+0x9b0>)
 800a53e:	f7ff f82f 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.LPCh10.set( 				manualControlMsg.get<signals::PDU_LPCh10_Enable>());
 800a542:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a546:	4618      	mov	r0, r3
 800a548:	f002 fd04 	bl	800cf54 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals17PDU_LPCh10_EnableEEENT_8dataTypeEv>
 800a54c:	4603      	mov	r3, r0
 800a54e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a552:	4619      	mov	r1, r3
 800a554:	4846      	ldr	r0, [pc, #280]	; (800a670 <_Z18receiveCanMessagesv+0x9b4>)
 800a556:	f7ff f823 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>

				outputState.HPCh1_projectXX.set(	    manualControlMsg.get<signals::PDU_HPCh1_Enable>());
 800a55a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a55e:	4618      	mov	r0, r3
 800a560:	f002 fd0a 	bl	800cf78 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh1_EnableEEENT_8dataTypeEv>
 800a564:	4603      	mov	r3, r0
 800a566:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a56a:	4619      	mov	r1, r3
 800a56c:	4841      	ldr	r0, [pc, #260]	; (800a674 <_Z18receiveCanMessagesv+0x9b8>)
 800a56e:	f7ff f817 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.HPCh2_coolingPump.set(		manualControlMsg.get<signals::PDU_HPCh2_Enable>());
 800a572:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a576:	4618      	mov	r0, r3
 800a578:	f002 fd10 	bl	800cf9c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh2_EnableEEENT_8dataTypeEv>
 800a57c:	4603      	mov	r3, r0
 800a57e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a582:	4619      	mov	r1, r3
 800a584:	483c      	ldr	r0, [pc, #240]	; (800a678 <_Z18receiveCanMessagesv+0x9bc>)
 800a586:	f7ff f80b 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.HPCh3.set(			 		manualControlMsg.get<signals::PDU_HPCh3_Enable>());
 800a58a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a58e:	4618      	mov	r0, r3
 800a590:	f002 fd16 	bl	800cfc0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh3_EnableEEENT_8dataTypeEv>
 800a594:	4603      	mov	r3, r0
 800a596:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a59a:	4619      	mov	r1, r3
 800a59c:	4837      	ldr	r0, [pc, #220]	; (800a67c <_Z18receiveCanMessagesv+0x9c0>)
 800a59e:	f7fe ffff 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.HPCh4.set(					manualControlMsg.get<signals::PDU_HPCh4_Enable>());
 800a5a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f002 fd1c 	bl	800cfe4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh4_EnableEEENT_8dataTypeEv>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4832      	ldr	r0, [pc, #200]	; (800a680 <_Z18receiveCanMessagesv+0x9c4>)
 800a5b6:	f7fe fff3 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>

				outputState.D1_projectXX.set(			manualControlMsg.get<signals::PDU_D1_Enable>());
 800a5ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f002 fd22 	bl	800d008 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D1_EnableEEENT_8dataTypeEv>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	482d      	ldr	r0, [pc, #180]	; (800a684 <_Z18receiveCanMessagesv+0x9c8>)
 800a5ce:	f7fe ffe7 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.D2_PE_enable.set(			manualControlMsg.get<signals::PDU_D2_Enable>());
 800a5d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f002 fd28 	bl	800d02c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D2_EnableEEENT_8dataTypeEv>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4828      	ldr	r0, [pc, #160]	; (800a688 <_Z18receiveCanMessagesv+0x9cc>)
 800a5e6:	f7fe ffdb 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.D3.set(						manualControlMsg.get<signals::PDU_D3_Enable>());
 800a5ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f002 fd2e 	bl	800d050 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D3_EnableEEENT_8dataTypeEv>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4823      	ldr	r0, [pc, #140]	; (800a68c <_Z18receiveCanMessagesv+0x9d0>)
 800a5fe:	f7fe ffcf 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
				outputState.D4.set(						manualControlMsg.get<signals::PDU_D4_Enable>());
 800a602:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a606:	4618      	mov	r0, r3
 800a608:	f002 fd34 	bl	800d074 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D4_EnableEEENT_8dataTypeEv>
 800a60c:	4603      	mov	r3, r0
 800a60e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a612:	4619      	mov	r1, r3
 800a614:	481e      	ldr	r0, [pc, #120]	; (800a690 <_Z18receiveCanMessagesv+0x9d4>)
 800a616:	f7fe ffc3 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>

				outputState.SDC.set(					manualControlMsg.get<signals::PDU_SDC_Enable>());
 800a61a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a61e:	4618      	mov	r0, r3
 800a620:	f002 fd3a 	bl	800d098 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals14PDU_SDC_EnableEEENT_8dataTypeEv>
 800a624:	4603      	mov	r3, r0
 800a626:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a644 <_Z18receiveCanMessagesv+0x988>
 800a62a:	4619      	mov	r1, r3
 800a62c:	4806      	ldr	r0, [pc, #24]	; (800a648 <_Z18receiveCanMessagesv+0x98c>)
 800a62e:	f7fe ffb7 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
 800a632:	f7ff bb47 	b.w	8009cc4 <_Z18receiveCanMessagesv+0x8>
 800a636:	bf00      	nop
 800a638:	20000514 	.word	0x20000514
 800a63c:	20000510 	.word	0x20000510
 800a640:	200004f8 	.word	0x200004f8
 800a644:	c2c80000 	.word	0xc2c80000
 800a648:	200006c4 	.word	0x200006c4
 800a64c:	20000574 	.word	0x20000574
 800a650:	2000058c 	.word	0x2000058c
 800a654:	200004d4 	.word	0x200004d4
 800a658:	2000052c 	.word	0x2000052c
 800a65c:	20000544 	.word	0x20000544
 800a660:	2000055c 	.word	0x2000055c
 800a664:	200005a4 	.word	0x200005a4
 800a668:	200005bc 	.word	0x200005bc
 800a66c:	200005d4 	.word	0x200005d4
 800a670:	200005ec 	.word	0x200005ec
 800a674:	20000604 	.word	0x20000604
 800a678:	2000061c 	.word	0x2000061c
 800a67c:	20000634 	.word	0x20000634
 800a680:	2000064c 	.word	0x2000064c
 800a684:	20000664 	.word	0x20000664
 800a688:	2000067c 	.word	0x2000067c
 800a68c:	20000694 	.word	0x20000694
 800a690:	200006ac 	.word	0x200006ac
			}
		}
		else if(checkRxMessage<messages::PDU_RX_LP_Dutycycle>(rxRawMsg)) {	// Duty cycle message for manual control
 800a694:	48c7      	ldr	r0, [pc, #796]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a696:	f7fb ff8b 	bl	80065b0 <_ZN3can14checkRxMessageINS_8messages19PDU_RX_LP_DutycycleEEEbRK9RxMessage>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 80b6 	beq.w	800a80e <_Z18receiveCanMessagesv+0xb52>
			can::Message<messages::PDU_RX_LP_Dutycycle> dutyMsg{rxRawMsg};
 800a6a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6a6:	49c3      	ldr	r1, [pc, #780]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff fa71 	bl	8009b90 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1ERK9RxMessage>

			float lpch1_duty = dutyMsg.get<signals::PDU_LPCh1_Dutycycle>();
 800a6ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f002 fd02 	bl	800d0bc <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh1_DutycycleEEENT_8dataTypeEv>
 800a6b8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800a6bc:	ed83 0a00 	vstr	s0, [r3]
			outputState.LPCh1_opticalSensor.set(lpch1_duty != 0, lpch1_duty);
 800a6c0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800a6c4:	edd3 7a00 	vldr	s15, [r3]
 800a6c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	bf14      	ite	ne
 800a6d2:	2301      	movne	r3, #1
 800a6d4:	2300      	moveq	r3, #0
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800a6dc:	ed92 0a00 	vldr	s0, [r2]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	48b5      	ldr	r0, [pc, #724]	; (800a9b8 <_Z18receiveCanMessagesv+0xcfc>)
 800a6e4:	f7fe ff5c 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			float lpch2_duty = dutyMsg.get<signals::PDU_LPCh2_Dutycycle>();
 800a6e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f002 fcf9 	bl	800d0e4 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh2_DutycycleEEENT_8dataTypeEv>
 800a6f2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a6f6:	ed83 0a00 	vstr	s0, [r3]
			outputState.LPCh2.set(lpch2_duty != 0,lpch2_duty);
 800a6fa:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a6fe:	edd3 7a00 	vldr	s15, [r3]
 800a702:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	bf14      	ite	ne
 800a70c:	2301      	movne	r3, #1
 800a70e:	2300      	moveq	r3, #0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800a716:	ed92 0a00 	vldr	s0, [r2]
 800a71a:	4619      	mov	r1, r3
 800a71c:	48a7      	ldr	r0, [pc, #668]	; (800a9bc <_Z18receiveCanMessagesv+0xd00>)
 800a71e:	f7fe ff3f 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			float lpch3_duty = dutyMsg.get<signals::PDU_LPCh3_Dutycycle>();
 800a722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a726:	4618      	mov	r0, r3
 800a728:	f002 fcf0 	bl	800d10c <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh3_DutycycleEEENT_8dataTypeEv>
 800a72c:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800a730:	ed83 0a00 	vstr	s0, [r3]
			outputState.LPCh3_HVCU.set(lpch3_duty != 0, lpch3_duty);
 800a734:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800a738:	edd3 7a00 	vldr	s15, [r3]
 800a73c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a744:	bf14      	ite	ne
 800a746:	2301      	movne	r3, #1
 800a748:	2300      	moveq	r3, #0
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800a750:	ed92 0a00 	vldr	s0, [r2]
 800a754:	4619      	mov	r1, r3
 800a756:	489a      	ldr	r0, [pc, #616]	; (800a9c0 <_Z18receiveCanMessagesv+0xd04>)
 800a758:	f7fe ff22 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			float lpch8_duty = dutyMsg.get<signals::PDU_LPCh8_Dutycycle>();
 800a75c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a760:	4618      	mov	r0, r3
 800a762:	f002 fce7 	bl	800d134 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh8_DutycycleEEENT_8dataTypeEv>
 800a766:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800a76a:	ed83 0a00 	vstr	s0, [r3]
			outputState.LPCh8_telemetry.set(lpch8_duty != 0, lpch8_duty);
 800a76e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800a772:	edd3 7a00 	vldr	s15, [r3]
 800a776:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a77e:	bf14      	ite	ne
 800a780:	2301      	movne	r3, #1
 800a782:	2300      	moveq	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800a78a:	ed92 0a00 	vldr	s0, [r2]
 800a78e:	4619      	mov	r1, r3
 800a790:	488c      	ldr	r0, [pc, #560]	; (800a9c4 <_Z18receiveCanMessagesv+0xd08>)
 800a792:	f7fe ff05 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			float lpch9_duty = dutyMsg.get<signals::PDU_LPCh9_Dutycycle>();
 800a796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a79a:	4618      	mov	r0, r3
 800a79c:	f002 fcde 	bl	800d15c <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh9_DutycycleEEENT_8dataTypeEv>
 800a7a0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800a7a4:	ed83 0a00 	vstr	s0, [r3]
			outputState.LPCh9_logger.set(lpch9_duty != 0, lpch9_duty);
 800a7a8:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800a7ac:	edd3 7a00 	vldr	s15, [r3]
 800a7b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b8:	bf14      	ite	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	2300      	moveq	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 800a7c4:	ed92 0a00 	vldr	s0, [r2]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	487f      	ldr	r0, [pc, #508]	; (800a9c8 <_Z18receiveCanMessagesv+0xd0c>)
 800a7cc:	f7fe fee8 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			float lpch10_duty = dutyMsg.get<signals::PDU_LPCh10_Dutycycle>();
 800a7d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f002 fcd5 	bl	800d184 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals20PDU_LPCh10_DutycycleEEENT_8dataTypeEv>
 800a7da:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800a7de:	ed83 0a00 	vstr	s0, [r3]
			outputState.LPCh10.set(lpch10_duty != 0, lpch10_duty);
 800a7e2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800a7e6:	edd3 7a00 	vldr	s15, [r3]
 800a7ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f2:	bf14      	ite	ne
 800a7f4:	2301      	movne	r3, #1
 800a7f6:	2300      	moveq	r3, #0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800a7fe:	ed92 0a00 	vldr	s0, [r2]
 800a802:	4619      	mov	r1, r3
 800a804:	4871      	ldr	r0, [pc, #452]	; (800a9cc <_Z18receiveCanMessagesv+0xd10>)
 800a806:	f7fe fecb 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
 800a80a:	f7ff ba5b 	b.w	8009cc4 <_Z18receiveCanMessagesv+0x8>

		} else if(checkRxMessage<messages::PDU_RX_HP_D_Dutycycle>(rxRawMsg)) {	// Duty cycle message for manual control
 800a80e:	4869      	ldr	r0, [pc, #420]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a810:	f7fb feb5 	bl	800657e <_ZN3can14checkRxMessageINS_8messages21PDU_RX_HP_D_DutycycleEEEbRK9RxMessage>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d071      	beq.n	800a8fe <_Z18receiveCanMessagesv+0xc42>
			can::Message<messages::PDU_RX_HP_D_Dutycycle> dutyMsg{rxRawMsg};
 800a81a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a81e:	4965      	ldr	r1, [pc, #404]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff f9e1 	bl	8009be8 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1ERK9RxMessage>

			float hpch1_duty = dutyMsg.get<signals::PDU_HPCh1_Dutycycle>();
 800a826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a82a:	4618      	mov	r0, r3
 800a82c:	f002 fcbe 	bl	800d1ac <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals19PDU_HPCh1_DutycycleEEENT_8dataTypeEv>
 800a830:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800a834:	ed83 0a00 	vstr	s0, [r3]
			outputState.HPCh1_projectXX.set(hpch1_duty != 0, hpch1_duty);
 800a838:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800a83c:	edd3 7a00 	vldr	s15, [r3]
 800a840:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a848:	bf14      	ite	ne
 800a84a:	2301      	movne	r3, #1
 800a84c:	2300      	moveq	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f207 4244 	addw	r2, r7, #1092	; 0x444
 800a854:	ed92 0a00 	vldr	s0, [r2]
 800a858:	4619      	mov	r1, r3
 800a85a:	485d      	ldr	r0, [pc, #372]	; (800a9d0 <_Z18receiveCanMessagesv+0xd14>)
 800a85c:	f7fe fea0 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			float hpch2_duty = dutyMsg.get<signals::PDU_HPCh2_Dutycycle>();
 800a860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a864:	4618      	mov	r0, r3
 800a866:	f002 fcb5 	bl	800d1d4 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals19PDU_HPCh2_DutycycleEEENT_8dataTypeEv>
 800a86a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800a86e:	ed83 0a00 	vstr	s0, [r3]
			outputState.HPCh2_coolingPump.set(hpch2_duty != 0, hpch2_duty);
 800a872:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800a876:	edd3 7a00 	vldr	s15, [r3]
 800a87a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800a88e:	ed92 0a00 	vldr	s0, [r2]
 800a892:	4619      	mov	r1, r3
 800a894:	484f      	ldr	r0, [pc, #316]	; (800a9d4 <_Z18receiveCanMessagesv+0xd18>)
 800a896:	f7fe fe83 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.setDuty(			dutyMsg.get<signals::PDU_D1_Dutycycle>());
 800a89a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f002 fcac 	bl	800d1fc <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D1_DutycycleEEENT_8dataTypeEv>
 800a8a4:	eef0 7a40 	vmov.f32	s15, s0
 800a8a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ac:	484a      	ldr	r0, [pc, #296]	; (800a9d8 <_Z18receiveCanMessagesv+0xd1c>)
 800a8ae:	f7fe febb 	bl	8009628 <_ZN16OutputChannelPwm7setDutyEf>
			outputState.D2_PE_enable.setDuty(			dutyMsg.get<signals::PDU_D2_Dutycycle>());
 800a8b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f002 fcb4 	bl	800d224 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D2_DutycycleEEENT_8dataTypeEv>
 800a8bc:	eef0 7a40 	vmov.f32	s15, s0
 800a8c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a8c4:	4845      	ldr	r0, [pc, #276]	; (800a9dc <_Z18receiveCanMessagesv+0xd20>)
 800a8c6:	f7fe feaf 	bl	8009628 <_ZN16OutputChannelPwm7setDutyEf>
			outputState.D3.setDuty(						dutyMsg.get<signals::PDU_D3_Dutycycle>());
 800a8ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f002 fcbc 	bl	800d24c <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D3_DutycycleEEENT_8dataTypeEv>
 800a8d4:	eef0 7a40 	vmov.f32	s15, s0
 800a8d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a8dc:	4840      	ldr	r0, [pc, #256]	; (800a9e0 <_Z18receiveCanMessagesv+0xd24>)
 800a8de:	f7fe fea3 	bl	8009628 <_ZN16OutputChannelPwm7setDutyEf>
			outputState.D4.setDuty(						dutyMsg.get<signals::PDU_D4_Dutycycle>());
 800a8e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f002 fcc4 	bl	800d274 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D4_DutycycleEEENT_8dataTypeEv>
 800a8ec:	eef0 7a40 	vmov.f32	s15, s0
 800a8f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f4:	483b      	ldr	r0, [pc, #236]	; (800a9e4 <_Z18receiveCanMessagesv+0xd28>)
 800a8f6:	f7fe fe97 	bl	8009628 <_ZN16OutputChannelPwm7setDutyEf>
 800a8fa:	f7ff b9e3 	b.w	8009cc4 <_Z18receiveCanMessagesv+0x8>
		} else if(checkRxMessage<messages::PDU_RX_LP_Enable>(rxRawMsg)){
 800a8fe:	482d      	ldr	r0, [pc, #180]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a900:	f7fb fe6f 	bl	80065e2 <_ZN3can14checkRxMessageINS_8messages16PDU_RX_LP_EnableEEEbRK9RxMessage>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d037      	beq.n	800a97a <_Z18receiveCanMessagesv+0xcbe>

			can::Message<messages::PDU_RX_LP_Enable> lpEnableMsg {rxRawMsg};
 800a90a:	f107 0318 	add.w	r3, r7, #24
 800a90e:	4929      	ldr	r1, [pc, #164]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff f995 	bl	8009c40 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEEC1ERK9RxMessage>
			outputState.LPCh4_eboxECUs.set(lpEnableMsg.get<signals::PDU_RX_LPCh4_Enable>());
 800a916:	f107 0318 	add.w	r3, r7, #24
 800a91a:	4618      	mov	r0, r3
 800a91c:	f002 fcbe 	bl	800d29c <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh4_EnableEEENT_8dataTypeEv>
 800a920:	4603      	mov	r3, r0
 800a922:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a9e8 <_Z18receiveCanMessagesv+0xd2c>
 800a926:	4619      	mov	r1, r3
 800a928:	4830      	ldr	r0, [pc, #192]	; (800a9ec <_Z18receiveCanMessagesv+0xd30>)
 800a92a:	f7fe fe39 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(lpEnableMsg.get<signals::PDU_RX_LPCh5_Enable>());
 800a92e:	f107 0318 	add.w	r3, r7, #24
 800a932:	4618      	mov	r0, r3
 800a934:	f002 fcc4 	bl	800d2c0 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh5_EnableEEENT_8dataTypeEv>
 800a938:	4603      	mov	r3, r0
 800a93a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800a9e8 <_Z18receiveCanMessagesv+0xd2c>
 800a93e:	4619      	mov	r1, r3
 800a940:	482b      	ldr	r0, [pc, #172]	; (800a9f0 <_Z18receiveCanMessagesv+0xd34>)
 800a942:	f7fe fe2d 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(lpEnableMsg.get<signals::PDU_RX_LPCh6_Enable>());
 800a946:	f107 0318 	add.w	r3, r7, #24
 800a94a:	4618      	mov	r0, r3
 800a94c:	f002 fcca 	bl	800d2e4 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh6_EnableEEENT_8dataTypeEv>
 800a950:	4603      	mov	r3, r0
 800a952:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800a9e8 <_Z18receiveCanMessagesv+0xd2c>
 800a956:	4619      	mov	r1, r3
 800a958:	4826      	ldr	r0, [pc, #152]	; (800a9f4 <_Z18receiveCanMessagesv+0xd38>)
 800a95a:	f7fe fe21 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(lpEnableMsg.get<signals::PDU_RX_LPCh7_Enable>());
 800a95e:	f107 0318 	add.w	r3, r7, #24
 800a962:	4618      	mov	r0, r3
 800a964:	f002 fcd0 	bl	800d308 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh7_EnableEEENT_8dataTypeEv>
 800a968:	4603      	mov	r3, r0
 800a96a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800a9e8 <_Z18receiveCanMessagesv+0xd2c>
 800a96e:	4619      	mov	r1, r3
 800a970:	4821      	ldr	r0, [pc, #132]	; (800a9f8 <_Z18receiveCanMessagesv+0xd3c>)
 800a972:	f7fe fe15 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
 800a976:	f7ff b9a5 	b.w	8009cc4 <_Z18receiveCanMessagesv+0x8>

		} else if(checkRxMessage<messages::SensorF_TX_BMS>(rxRawMsg)) {
 800a97a:	480e      	ldr	r0, [pc, #56]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a97c:	f002 fcd6 	bl	800d32c <_ZN3can14checkRxMessageINS_8messages14SensorF_TX_BMSEEEbRK9RxMessage>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	f43f a99e 	beq.w	8009cc4 <_Z18receiveCanMessagesv+0x8>
			can::Message<messages::SensorF_TX_BMS> batteryTempMsg{rxRawMsg};
 800a988:	463b      	mov	r3, r7
 800a98a:	490a      	ldr	r1, [pc, #40]	; (800a9b4 <_Z18receiveCanMessagesv+0xcf8>)
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff f983 	bl	8009c98 <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEEC1ERK9RxMessage>

			batteryTemperature = batteryTempMsg.get<signals::SensorF_TX_BatteryTemp>();
 800a992:	463b      	mov	r3, r7
 800a994:	4618      	mov	r0, r3
 800a996:	f002 fce2 	bl	800d35e <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEE3getINS_7signals22SensorF_TX_BatteryTempEEENT_8dataTypeEv>
 800a99a:	eef0 7a40 	vmov.f32	s15, s0
 800a99e:	4b17      	ldr	r3, [pc, #92]	; (800a9fc <_Z18receiveCanMessagesv+0xd40>)
 800a9a0:	edc3 7a00 	vstr	s15, [r3]
	while(xMessageBufferReceive(handlePduRxMessageBuffer, &rxRawMsg, sizeof(rxRawMsg), 0) != 0) {
 800a9a4:	f7ff b98e 	b.w	8009cc4 <_Z18receiveCanMessagesv+0x8>
		}
	}
}
 800a9a8:	bf00      	nop
 800a9aa:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	200004d4 	.word	0x200004d4
 800a9b8:	20000514 	.word	0x20000514
 800a9bc:	2000052c 	.word	0x2000052c
 800a9c0:	20000544 	.word	0x20000544
 800a9c4:	200005bc 	.word	0x200005bc
 800a9c8:	200005d4 	.word	0x200005d4
 800a9cc:	200005ec 	.word	0x200005ec
 800a9d0:	20000604 	.word	0x20000604
 800a9d4:	2000061c 	.word	0x2000061c
 800a9d8:	20000664 	.word	0x20000664
 800a9dc:	2000067c 	.word	0x2000067c
 800a9e0:	20000694 	.word	0x20000694
 800a9e4:	200006ac 	.word	0x200006ac
 800a9e8:	c2c80000 	.word	0xc2c80000
 800a9ec:	2000055c 	.word	0x2000055c
 800a9f0:	20000574 	.word	0x20000574
 800a9f4:	2000058c 	.word	0x2000058c
 800a9f8:	200005a4 	.word	0x200005a4
 800a9fc:	20000500 	.word	0x20000500

0800aa00 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	f240 511a 	movw	r1, #1306	; 0x51a
 800aa12:	f7f5 fdbf 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1Ev>:
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	f240 515a 	movw	r1, #1370	; 0x55a
 800aa32:	f7f5 fdaf 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1Ev>:
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2208      	movs	r2, #8
 800aa4e:	f240 211a 	movw	r1, #538	; 0x21a
 800aa52:	f7f5 fd9f 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEEC1Ev>:
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	f240 41da 	movw	r1, #1242	; 0x4da
 800aa72:	f7f5 fd8f 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEEC1Ev>:
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2208      	movs	r2, #8
 800aa8e:	f240 419a 	movw	r1, #1178	; 0x49a
 800aa92:	f7f5 fd7f 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEEC1Ev>:
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2203      	movs	r2, #3
 800aaae:	f240 219a 	movw	r1, #666	; 0x29a
 800aab2:	f7f5 fd6f 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <_Z15readAndSendDatav>:

// Read the current of all channels and send it
void readAndSendData() {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b0ac      	sub	sp, #176	; 0xb0
 800aac4:	af00      	add	r7, sp, #0
	// Start reading all channels of ADC2
	adc2.start();
 800aac6:	4880      	ldr	r0, [pc, #512]	; (800acc8 <_Z15readAndSendDatav+0x208>)
 800aac8:	f002 fc5e 	bl	800d388 <_ZN6AdcDmaILh14EE5startEv>
	ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(10000));
 800aacc:	f242 7110 	movw	r1, #10000	; 0x2710
 800aad0:	2001      	movs	r0, #1
 800aad2:	f00d faa9 	bl	8018028 <ulTaskNotifyTake>
	float *adcData = adc2.getData();
 800aad6:	487c      	ldr	r0, [pc, #496]	; (800acc8 <_Z15readAndSendDatav+0x208>)
 800aad8:	f002 fc88 	bl	800d3ec <_ZN6AdcDmaILh14EE7getDataEv>
 800aadc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	lvCurrent = 0;
 800aae0:	4b7a      	ldr	r3, [pc, #488]	; (800accc <_Z15readAndSendDatav+0x20c>)
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {		//maybe the values for i needs to be changed because the ADC channels have changed.
 800aae8:	2300      	movs	r3, #0
 800aaea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aaee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aaf2:	2b09      	cmp	r3, #9
 800aaf4:	dc6f      	bgt.n	800abd6 <_Z15readAndSendDatav+0x116>
		// Raw ADC value is converted into a voltage
		// The sense current is calculated through the 62Ohms current sense resistor
		// The sense current is multiplied by the current divider factor of BTF6070
		lpChannelCurrent[i] = (adcData[i] * 3.3f / 4095.0f) / 62.0f * 1750 - 0.010f;	// Subtract 10mA since this seems to be an offset
 800aaf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ab00:	4413      	add	r3, r2
 800ab02:	edd3 7a00 	vldr	s15, [r3]
 800ab06:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800acd0 <_Z15readAndSendDatav+0x210>
 800ab0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab0e:	eddf 6a71 	vldr	s13, [pc, #452]	; 800acd4 <_Z15readAndSendDatav+0x214>
 800ab12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ab16:	eddf 6a70 	vldr	s13, [pc, #448]	; 800acd8 <_Z15readAndSendDatav+0x218>
 800ab1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab1e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800acdc <_Z15readAndSendDatav+0x21c>
 800ab22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab26:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800ace0 <_Z15readAndSendDatav+0x220>
 800ab2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab2e:	4a6d      	ldr	r2, [pc, #436]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800ab30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	edc3 7a00 	vstr	s15, [r3]

		// Limit to plausible values
		if(lpChannelCurrent[i] < 0.0f) {
 800ab3c:	4a69      	ldr	r2, [pc, #420]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800ab3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	edd3 7a00 	vldr	s15, [r3]
 800ab4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab52:	d507      	bpl.n	800ab64 <_Z15readAndSendDatav+0xa4>
			lpChannelCurrent[i] = 0.0f;
 800ab54:	4a63      	ldr	r2, [pc, #396]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800ab56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
		}
		if (lpChannelCurrent[i] > 8.0f) {
 800ab64:	4a5f      	ldr	r2, [pc, #380]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800ab66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	edd3 7a00 	vldr	s15, [r3]
 800ab72:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ab76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	dd07      	ble.n	800ab90 <_Z15readAndSendDatav+0xd0>
			lpChannelCurrent[i] = 8.0f;
 800ab80:	4a58      	ldr	r2, [pc, #352]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800ab82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800ab8e:	601a      	str	r2, [r3, #0]
		}

		// Sum up current to total LV battery current
		if(lpChannelCurrent[i] < 8.0f) {
 800ab90:	4a54      	ldr	r2, [pc, #336]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800ab92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	edd3 7a00 	vldr	s15, [r3]
 800ab9e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800aba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abaa:	d50e      	bpl.n	800abca <_Z15readAndSendDatav+0x10a>
			// Do not sum up error current values
			lvCurrent += lpChannelCurrent[i];
 800abac:	4a4d      	ldr	r2, [pc, #308]	; (800ace4 <_Z15readAndSendDatav+0x224>)
 800abae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	ed93 7a00 	vldr	s14, [r3]
 800abba:	4b44      	ldr	r3, [pc, #272]	; (800accc <_Z15readAndSendDatav+0x20c>)
 800abbc:	edd3 7a00 	vldr	s15, [r3]
 800abc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abc4:	4b41      	ldr	r3, [pc, #260]	; (800accc <_Z15readAndSendDatav+0x20c>)
 800abc6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10; i++) {		//maybe the values for i needs to be changed because the ADC channels have changed.
 800abca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abce:	3301      	adds	r3, #1
 800abd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800abd4:	e78b      	b.n	800aaee <_Z15readAndSendDatav+0x2e>
		}
	}

	for (int i = 0; i < 4; i++) {
 800abd6:	2300      	movs	r3, #0
 800abd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	f300 8087 	bgt.w	800acf4 <_Z15readAndSendDatav+0x234>
		// Raw ADC value is converted into a voltage
		// The sense current is calculated through the 62Ohms current sense resistor
		// The sense current is multiplied by the current divider factor of BTT6010
		hpChannelCurrent[i] = (adcData[i + 10] * 3.3f / 4095.0f) / 62.0f * 4000 - 0.300f;	// Subtract 300mA since this seems to be an offset
 800abe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abea:	330a      	adds	r3, #10
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800abf2:	4413      	add	r3, r2
 800abf4:	edd3 7a00 	vldr	s15, [r3]
 800abf8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800acd0 <_Z15readAndSendDatav+0x210>
 800abfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac00:	eddf 6a34 	vldr	s13, [pc, #208]	; 800acd4 <_Z15readAndSendDatav+0x214>
 800ac04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac08:	eddf 6a33 	vldr	s13, [pc, #204]	; 800acd8 <_Z15readAndSendDatav+0x218>
 800ac0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac10:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ace8 <_Z15readAndSendDatav+0x228>
 800ac14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac18:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800acec <_Z15readAndSendDatav+0x22c>
 800ac1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac20:	4a33      	ldr	r2, [pc, #204]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800ac22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	edc3 7a00 	vstr	s15, [r3]

		// Limit to plausible values
		if(hpChannelCurrent[i] < 0.0f) {
 800ac2e:	4a30      	ldr	r2, [pc, #192]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800ac30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	edd3 7a00 	vldr	s15, [r3]
 800ac3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac44:	d507      	bpl.n	800ac56 <_Z15readAndSendDatav+0x196>
			hpChannelCurrent[i] = 0.0f;
 800ac46:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800ac48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
		}
		if (hpChannelCurrent[i] > 16.0f) {
 800ac56:	4a26      	ldr	r2, [pc, #152]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800ac58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	edd3 7a00 	vldr	s15, [r3]
 800ac64:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800ac68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac70:	dd07      	ble.n	800ac82 <_Z15readAndSendDatav+0x1c2>
			hpChannelCurrent[i] = 16.0f;
 800ac72:	4a1f      	ldr	r2, [pc, #124]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800ac74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800ac80:	601a      	str	r2, [r3, #0]
		}

		// Sum up current to total LV battery current
		if(hpChannelCurrent[i] < 16.0f) {
 800ac82:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800ac84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	edd3 7a00 	vldr	s15, [r3]
 800ac90:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800ac94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9c:	d50e      	bpl.n	800acbc <_Z15readAndSendDatav+0x1fc>
			// Do not sum up error current values
			lvCurrent += hpChannelCurrent[i];
 800ac9e:	4a14      	ldr	r2, [pc, #80]	; (800acf0 <_Z15readAndSendDatav+0x230>)
 800aca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	ed93 7a00 	vldr	s14, [r3]
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <_Z15readAndSendDatav+0x20c>)
 800acae:	edd3 7a00 	vldr	s15, [r3]
 800acb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <_Z15readAndSendDatav+0x20c>)
 800acb8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 4; i++) {
 800acbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800acc0:	3301      	adds	r3, #1
 800acc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800acc6:	e789      	b.n	800abdc <_Z15readAndSendDatav+0x11c>
 800acc8:	200003f4 	.word	0x200003f4
 800accc:	200004cc 	.word	0x200004cc
 800acd0:	40533333 	.word	0x40533333
 800acd4:	457ff000 	.word	0x457ff000
 800acd8:	42780000 	.word	0x42780000
 800acdc:	44dac000 	.word	0x44dac000
 800ace0:	3c23d70a 	.word	0x3c23d70a
 800ace4:	20000494 	.word	0x20000494
 800ace8:	457a0000 	.word	0x457a0000
 800acec:	3e99999a 	.word	0x3e99999a
 800acf0:	200004bc 	.word	0x200004bc
		}
	}

	outputState.LPCh1_opticalSensor.setCurrent(lpChannelCurrent[0]);
 800acf4:	4bdb      	ldr	r3, [pc, #876]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800acf6:	edd3 7a00 	vldr	s15, [r3]
 800acfa:	eeb0 0a67 	vmov.f32	s0, s15
 800acfe:	48da      	ldr	r0, [pc, #872]	; (800b068 <_Z15readAndSendDatav+0x5a8>)
 800ad00:	f7fe fcc8 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh2.setCurrent(lpChannelCurrent[1]);
 800ad04:	4bd7      	ldr	r3, [pc, #860]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad06:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad0a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad0e:	48d7      	ldr	r0, [pc, #860]	; (800b06c <_Z15readAndSendDatav+0x5ac>)
 800ad10:	f7fe fcc0 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh3_HVCU.setCurrent(lpChannelCurrent[2]);
 800ad14:	4bd3      	ldr	r3, [pc, #844]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad16:	edd3 7a02 	vldr	s15, [r3, #8]
 800ad1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad1e:	48d4      	ldr	r0, [pc, #848]	; (800b070 <_Z15readAndSendDatav+0x5b0>)
 800ad20:	f7fe fcb8 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh4_eboxECUs.setCurrent(lpChannelCurrent[3]);
 800ad24:	4bcf      	ldr	r3, [pc, #828]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad26:	edd3 7a03 	vldr	s15, [r3, #12]
 800ad2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2e:	48d1      	ldr	r0, [pc, #836]	; (800b074 <_Z15readAndSendDatav+0x5b4>)
 800ad30:	f7fe fcb0 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh5_powerElectronics.setCurrent(lpChannelCurrent[4]);
 800ad34:	4bcb      	ldr	r3, [pc, #812]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad36:	edd3 7a04 	vldr	s15, [r3, #16]
 800ad3a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad3e:	48ce      	ldr	r0, [pc, #824]	; (800b078 <_Z15readAndSendDatav+0x5b8>)
 800ad40:	f7fe fca8 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh6.setCurrent(lpChannelCurrent[5]);
 800ad44:	4bc7      	ldr	r3, [pc, #796]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad46:	edd3 7a05 	vldr	s15, [r3, #20]
 800ad4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad4e:	48cb      	ldr	r0, [pc, #812]	; (800b07c <_Z15readAndSendDatav+0x5bc>)
 800ad50:	f7fe fca0 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh7_rearECU.setCurrent(lpChannelCurrent[6]);
 800ad54:	4bc3      	ldr	r3, [pc, #780]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad56:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad5e:	48c8      	ldr	r0, [pc, #800]	; (800b080 <_Z15readAndSendDatav+0x5c0>)
 800ad60:	f7fe fc98 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh8_telemetry.setCurrent(lpChannelCurrent[7]);
 800ad64:	4bbf      	ldr	r3, [pc, #764]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad66:	edd3 7a07 	vldr	s15, [r3, #28]
 800ad6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad6e:	48c5      	ldr	r0, [pc, #788]	; (800b084 <_Z15readAndSendDatav+0x5c4>)
 800ad70:	f7fe fc90 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh9_logger.setCurrent(lpChannelCurrent[8]);
 800ad74:	4bbb      	ldr	r3, [pc, #748]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad76:	edd3 7a08 	vldr	s15, [r3, #32]
 800ad7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad7e:	48c2      	ldr	r0, [pc, #776]	; (800b088 <_Z15readAndSendDatav+0x5c8>)
 800ad80:	f7fe fc88 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.LPCh10.setCurrent(lpChannelCurrent[9]);
 800ad84:	4bb7      	ldr	r3, [pc, #732]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ad86:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ad8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad8e:	48bf      	ldr	r0, [pc, #764]	; (800b08c <_Z15readAndSendDatav+0x5cc>)
 800ad90:	f7fe fc80 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>

	outputState.HPCh1_projectXX.setCurrent(hpChannelCurrent[0]);
 800ad94:	4bbe      	ldr	r3, [pc, #760]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800ad96:	edd3 7a00 	vldr	s15, [r3]
 800ad9a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad9e:	48bd      	ldr	r0, [pc, #756]	; (800b094 <_Z15readAndSendDatav+0x5d4>)
 800ada0:	f7fe fc78 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.HPCh2_coolingPump.setCurrent(hpChannelCurrent[0]);
 800ada4:	4bba      	ldr	r3, [pc, #744]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800ada6:	edd3 7a00 	vldr	s15, [r3]
 800adaa:	eeb0 0a67 	vmov.f32	s0, s15
 800adae:	48ba      	ldr	r0, [pc, #744]	; (800b098 <_Z15readAndSendDatav+0x5d8>)
 800adb0:	f7fe fc70 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.HPCh3.setCurrent(hpChannelCurrent[0]);
 800adb4:	4bb6      	ldr	r3, [pc, #728]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800adb6:	edd3 7a00 	vldr	s15, [r3]
 800adba:	eeb0 0a67 	vmov.f32	s0, s15
 800adbe:	48b7      	ldr	r0, [pc, #732]	; (800b09c <_Z15readAndSendDatav+0x5dc>)
 800adc0:	f7fe fc68 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>
	outputState.HPCh4.setCurrent(hpChannelCurrent[0]);
 800adc4:	4bb2      	ldr	r3, [pc, #712]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800adc6:	edd3 7a00 	vldr	s15, [r3]
 800adca:	eeb0 0a67 	vmov.f32	s0, s15
 800adce:	48b4      	ldr	r0, [pc, #720]	; (800b0a0 <_Z15readAndSendDatav+0x5e0>)
 800add0:	f7fe fc60 	bl	8009694 <_ZN16OutputChannelPwm10setCurrentEf>

	// Range limit, otherwise sending the CAN message may fail
	if (lvCurrent > 40) {
 800add4:	4bb3      	ldr	r3, [pc, #716]	; (800b0a4 <_Z15readAndSendDatav+0x5e4>)
 800add6:	edd3 7a00 	vldr	s15, [r3]
 800adda:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800b0a8 <_Z15readAndSendDatav+0x5e8>
 800adde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade6:	dd02      	ble.n	800adee <_Z15readAndSendDatav+0x32e>
		lvCurrent = 40;
 800ade8:	4bae      	ldr	r3, [pc, #696]	; (800b0a4 <_Z15readAndSendDatav+0x5e4>)
 800adea:	4ab0      	ldr	r2, [pc, #704]	; (800b0ac <_Z15readAndSendDatav+0x5ec>)
 800adec:	601a      	str	r2, [r3, #0]
	}
	if (lvCurrent < 0) {
 800adee:	4bad      	ldr	r3, [pc, #692]	; (800b0a4 <_Z15readAndSendDatav+0x5e4>)
 800adf0:	edd3 7a00 	vldr	s15, [r3]
 800adf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfc:	d503      	bpl.n	800ae06 <_Z15readAndSendDatav+0x346>
		lvCurrent = 0;
 800adfe:	4ba9      	ldr	r3, [pc, #676]	; (800b0a4 <_Z15readAndSendDatav+0x5e4>)
 800ae00:	f04f 0200 	mov.w	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
	}

	// Estimate SOC
	float cellVoltage = OD_InputVoltage_get() / 6.0f;
 800ae06:	f7f9 f845 	bl	8003e94 <_Z19OD_InputVoltage_getv>
 800ae0a:	eeb0 7a40 	vmov.f32	s14, s0
 800ae0e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ae12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae16:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	int lvSoc = std::roundf(estimateLiPoSoc(cellVoltage));
 800ae1a:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 800ae1e:	f7fe fdcd 	bl	80099bc <_Z15estimateLiPoSocf>
 800ae22:	eef0 7a40 	vmov.f32	s15, s0
 800ae26:	eeb0 0a67 	vmov.f32	s0, s15
 800ae2a:	f00e fb5d 	bl	80194e8 <roundf>
 800ae2e:	eef0 7a40 	vmov.f32	s15, s0
 800ae32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae36:	ee17 3a90 	vmov	r3, s15
 800ae3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	lvSoc = std::min(std::max(lvSoc, 0), 100);
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae44:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800ae48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f002 fb08 	bl	800d464 <_ZSt3maxIiERKT_S2_S2_>
 800ae54:	4602      	mov	r2, r0
 800ae56:	2364      	movs	r3, #100	; 0x64
 800ae58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ae60:	4619      	mov	r1, r3
 800ae62:	4610      	mov	r0, r2
 800ae64:	f002 fb12 	bl	800d48c <_ZSt3minIiERKT_S2_S2_>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// Current of LPchannels 1 to 5
	Message<messages::PDU_TX_LP_Current1> msgCurrent1;
 800ae70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7ff fdc3 	bl	800aa00 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1Ev>
	msgCurrent1.set<signals::PDU_LPCh1_Current> (lpChannelCurrent[0]);
 800ae7a:	4b7a      	ldr	r3, [pc, #488]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ae7c:	edd3 7a00 	vldr	s15, [r3]
 800ae80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ae84:	eeb0 0a67 	vmov.f32	s0, s15
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f002 fb13 	bl	800d4b4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh1_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh2_Current> (lpChannelCurrent[1]);
 800ae8e:	4b75      	ldr	r3, [pc, #468]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800ae90:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae94:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ae98:	eeb0 0a67 	vmov.f32	s0, s15
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f002 fb20 	bl	800d4e2 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh2_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh3_Current> (lpChannelCurrent[2]);
 800aea2:	4b70      	ldr	r3, [pc, #448]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800aea4:	edd3 7a02 	vldr	s15, [r3, #8]
 800aea8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800aeac:	eeb0 0a67 	vmov.f32	s0, s15
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f002 fb2d 	bl	800d510 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh3_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh4_Current> (lpChannelCurrent[3]);
 800aeb6:	4b6b      	ldr	r3, [pc, #428]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800aeb8:	edd3 7a03 	vldr	s15, [r3, #12]
 800aebc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800aec0:	eeb0 0a67 	vmov.f32	s0, s15
 800aec4:	4618      	mov	r0, r3
 800aec6:	f002 fb3a 	bl	800d53e <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh4_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.set<signals::PDU_LPCh5_Current> (lpChannelCurrent[4]);
 800aeca:	4b66      	ldr	r3, [pc, #408]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800aecc:	edd3 7a04 	vldr	s15, [r3, #16]
 800aed0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800aed4:	eeb0 0a67 	vmov.f32	s0, s15
 800aed8:	4618      	mov	r0, r3
 800aeda:	f002 fb47 	bl	800d56c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh5_CurrentEEEvNT_8dataTypeE>
	msgCurrent1.send();
 800aede:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800aee2:	2100      	movs	r1, #0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fa fd03 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>

	osDelay(pdMS_TO_TICKS(1));	// TODO when cz_interface is fixed, this can be removed
 800aeea:	2001      	movs	r0, #1
 800aeec:	f00a f972 	bl	80151d4 <osDelay>

	// Current of LPchannels 6 to 10
	Message <messages::PDU_TX_LP_Current2> msgCurrent2;
 800aef0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff fd93 	bl	800aa20 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1Ev>
	msgCurrent2.set<signals::PDU_LPCh6_Current> (lpChannelCurrent[5]);
 800aefa:	4b5a      	ldr	r3, [pc, #360]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800aefc:	edd3 7a05 	vldr	s15, [r3, #20]
 800af00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af04:	eeb0 0a67 	vmov.f32	s0, s15
 800af08:	4618      	mov	r0, r3
 800af0a:	f002 fb46 	bl	800d59a <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh6_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh7_Current> (lpChannelCurrent[6]);
 800af0e:	4b55      	ldr	r3, [pc, #340]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800af10:	edd3 7a06 	vldr	s15, [r3, #24]
 800af14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af18:	eeb0 0a67 	vmov.f32	s0, s15
 800af1c:	4618      	mov	r0, r3
 800af1e:	f002 fb53 	bl	800d5c8 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh7_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh8_Current> (lpChannelCurrent[7]);
 800af22:	4b50      	ldr	r3, [pc, #320]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800af24:	edd3 7a07 	vldr	s15, [r3, #28]
 800af28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af2c:	eeb0 0a67 	vmov.f32	s0, s15
 800af30:	4618      	mov	r0, r3
 800af32:	f002 fb60 	bl	800d5f6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh8_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh9_Current> (lpChannelCurrent[8]);
 800af36:	4b4b      	ldr	r3, [pc, #300]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800af38:	edd3 7a08 	vldr	s15, [r3, #32]
 800af3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af40:	eeb0 0a67 	vmov.f32	s0, s15
 800af44:	4618      	mov	r0, r3
 800af46:	f002 fb6d 	bl	800d624 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh9_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.set<signals::PDU_LPCh10_Current> (lpChannelCurrent[9]);
 800af4a:	4b46      	ldr	r3, [pc, #280]	; (800b064 <_Z15readAndSendDatav+0x5a4>)
 800af4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800af50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af54:	eeb0 0a67 	vmov.f32	s0, s15
 800af58:	4618      	mov	r0, r3
 800af5a:	f002 fb7a 	bl	800d652 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals18PDU_LPCh10_CurrentEEEvNT_8dataTypeE>
	msgCurrent2.send();
 800af5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f7fa fcc3 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>

	// Current of HPchannels 1 to 4
	Message <messages::PDU_TX_HP_Current> msgCurrent3;
 800af6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fd66 	bl	800aa40 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1Ev>
	msgCurrent3.set<signals::PDU_HPCh1_Current> (hpChannelCurrent[0]);
 800af74:	4b46      	ldr	r3, [pc, #280]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800af76:	edd3 7a00 	vldr	s15, [r3]
 800af7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af7e:	eeb0 0a67 	vmov.f32	s0, s15
 800af82:	4618      	mov	r0, r3
 800af84:	f002 fb7c 	bl	800d680 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh1_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.set<signals::PDU_HPCh2_Current> (hpChannelCurrent[1]);
 800af88:	4b41      	ldr	r3, [pc, #260]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800af8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800af8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af92:	eeb0 0a67 	vmov.f32	s0, s15
 800af96:	4618      	mov	r0, r3
 800af98:	f002 fb89 	bl	800d6ae <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh2_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.set<signals::PDU_HPCh3_Current> (hpChannelCurrent[2]);
 800af9c:	4b3c      	ldr	r3, [pc, #240]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800af9e:	edd3 7a02 	vldr	s15, [r3, #8]
 800afa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800afa6:	eeb0 0a67 	vmov.f32	s0, s15
 800afaa:	4618      	mov	r0, r3
 800afac:	f002 fb96 	bl	800d6dc <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh3_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.set<signals::PDU_HPCh4_Current> (hpChannelCurrent[3]);
 800afb0:	4b37      	ldr	r3, [pc, #220]	; (800b090 <_Z15readAndSendDatav+0x5d0>)
 800afb2:	edd3 7a03 	vldr	s15, [r3, #12]
 800afb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800afba:	eeb0 0a67 	vmov.f32	s0, s15
 800afbe:	4618      	mov	r0, r3
 800afc0:	f002 fba3 	bl	800d70a <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh4_CurrentEEEvNT_8dataTypeE>
	msgCurrent3.send();
 800afc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800afc8:	2100      	movs	r1, #0
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fa fc90 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>

	// LV battery data
	Message<messages::PDU_TX_LV_BMS> msgBattery;
 800afd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff fd43 	bl	800aa60 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEEC1Ev>
	msgBattery.set<signals::PDU_LV_Voltage>(OD_InputVoltage_get());
 800afda:	f7f8 ff5b 	bl	8003e94 <_Z19OD_InputVoltage_getv>
 800afde:	eef0 7a40 	vmov.f32	s15, s0
 800afe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afe6:	eeb0 0a67 	vmov.f32	s0, s15
 800afea:	4618      	mov	r0, r3
 800afec:	f002 fba4 	bl	800d738 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_VoltageEEEvNT_8dataTypeE>
	msgBattery.set<signals::PDU_LV_Current>(lvCurrent);
 800aff0:	4b2c      	ldr	r3, [pc, #176]	; (800b0a4 <_Z15readAndSendDatav+0x5e4>)
 800aff2:	edd3 7a00 	vldr	s15, [r3]
 800aff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800affa:	eeb0 0a67 	vmov.f32	s0, s15
 800affe:	4618      	mov	r0, r3
 800b000:	f002 fbb1 	bl	800d766 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_CurrentEEEvNT_8dataTypeE>
	msgBattery.set<signals::PDU_LV_SOC>(lvSoc);
 800b004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b008:	b25a      	sxtb	r2, r3
 800b00a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b00e:	4611      	mov	r1, r2
 800b010:	4618      	mov	r0, r3
 800b012:	f002 fbbf 	bl	800d794 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals10PDU_LV_SOCEEEvNT_8dataTypeE>
	msgBattery.send();
 800b016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b01a:	2100      	movs	r1, #0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fa fc67 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>

	if(OD_CoolingPumpEnabled != can::signals::PDU_OD_CoolingPumpEnabled::ENABLE){
 800b022:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <_Z15readAndSendDatav+0x5f0>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b01      	cmp	r3, #1
 800b02a:	bf14      	ite	ne
 800b02c:	2301      	movne	r3, #1
 800b02e:	2300      	moveq	r3, #0
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	d005      	beq.n	800b042 <_Z15readAndSendDatav+0x582>
					outputState.HPCh2_coolingPump.set(false);
 800b036:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800b0b4 <_Z15readAndSendDatav+0x5f4>
 800b03a:	2100      	movs	r1, #0
 800b03c:	4816      	ldr	r0, [pc, #88]	; (800b098 <_Z15readAndSendDatav+0x5d8>)
 800b03e:	f7fe faaf 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
	}

	// Short Circuit Debug Message
	Message<messages::PDU_TX_LP_Short_Circuit_Debug> msgDebug1;
 800b042:	f107 0318 	add.w	r3, r7, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff fd1a 	bl	800aa80 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEEC1Ev>
	msgDebug1.set<signals::PDU_LPCh1_ShortCnt>(outputState.LPCh1_opticalSensor.numShorts());
 800b04c:	4806      	ldr	r0, [pc, #24]	; (800b068 <_Z15readAndSendDatav+0x5a8>)
 800b04e:	f7fe fb5a 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b052:	4603      	mov	r3, r0
 800b054:	461a      	mov	r2, r3
 800b056:	f107 0318 	add.w	r3, r7, #24
 800b05a:	4611      	mov	r1, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f002 fbaf 	bl	800d7c0 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh1_ShortCntEEEvNT_8dataTypeE>
 800b062:	e029      	b.n	800b0b8 <_Z15readAndSendDatav+0x5f8>
 800b064:	20000494 	.word	0x20000494
 800b068:	20000514 	.word	0x20000514
 800b06c:	2000052c 	.word	0x2000052c
 800b070:	20000544 	.word	0x20000544
 800b074:	2000055c 	.word	0x2000055c
 800b078:	20000574 	.word	0x20000574
 800b07c:	2000058c 	.word	0x2000058c
 800b080:	200005a4 	.word	0x200005a4
 800b084:	200005bc 	.word	0x200005bc
 800b088:	200005d4 	.word	0x200005d4
 800b08c:	200005ec 	.word	0x200005ec
 800b090:	200004bc 	.word	0x200004bc
 800b094:	20000604 	.word	0x20000604
 800b098:	2000061c 	.word	0x2000061c
 800b09c:	20000634 	.word	0x20000634
 800b0a0:	2000064c 	.word	0x2000064c
 800b0a4:	200004cc 	.word	0x200004cc
 800b0a8:	42200000 	.word	0x42200000
 800b0ac:	42200000 	.word	0x42200000
 800b0b0:	2000002a 	.word	0x2000002a
 800b0b4:	c2c80000 	.word	0xc2c80000
	msgDebug1.set<signals::PDU_LPCh1_State>(outputState.LPCh1_opticalSensor.getStatus());
 800b0b8:	4899      	ldr	r0, [pc, #612]	; (800b320 <_Z15readAndSendDatav+0x860>)
 800b0ba:	f7fe fafa 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f107 0318 	add.w	r3, r7, #24
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 fb8e 	bl	800d7ea <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh1_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh2_ShortCnt>(outputState.LPCh2.numShorts());
 800b0ce:	4895      	ldr	r0, [pc, #596]	; (800b324 <_Z15readAndSendDatav+0x864>)
 800b0d0:	f7fe fb19 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f107 0318 	add.w	r3, r7, #24
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f002 fb98 	bl	800d814 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh2_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh2_State>(outputState.LPCh2.getStatus());
 800b0e4:	488f      	ldr	r0, [pc, #572]	; (800b324 <_Z15readAndSendDatav+0x864>)
 800b0e6:	f7fe fae4 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f107 0318 	add.w	r3, r7, #24
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f002 fba2 	bl	800d83e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh2_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh3_ShortCnt>(outputState.LPCh3_HVCU.numShorts());
 800b0fa:	488b      	ldr	r0, [pc, #556]	; (800b328 <_Z15readAndSendDatav+0x868>)
 800b0fc:	f7fe fb03 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b100:	4603      	mov	r3, r0
 800b102:	461a      	mov	r2, r3
 800b104:	f107 0318 	add.w	r3, r7, #24
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f002 fbac 	bl	800d868 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh3_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh3_State>(outputState.LPCh3_HVCU.getStatus());
 800b110:	4885      	ldr	r0, [pc, #532]	; (800b328 <_Z15readAndSendDatav+0x868>)
 800b112:	f7fe face 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b116:	4603      	mov	r3, r0
 800b118:	461a      	mov	r2, r3
 800b11a:	f107 0318 	add.w	r3, r7, #24
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f002 fbb6 	bl	800d892 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh3_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh4_ShortCnt>(outputState.LPCh4_eboxECUs.numShorts());
 800b126:	4881      	ldr	r0, [pc, #516]	; (800b32c <_Z15readAndSendDatav+0x86c>)
 800b128:	f7fe faed 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461a      	mov	r2, r3
 800b130:	f107 0318 	add.w	r3, r7, #24
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f002 fbc0 	bl	800d8bc <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh4_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh4_State>(outputState.LPCh4_eboxECUs.getStatus());
 800b13c:	487b      	ldr	r0, [pc, #492]	; (800b32c <_Z15readAndSendDatav+0x86c>)
 800b13e:	f7fe fab8 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b142:	4603      	mov	r3, r0
 800b144:	461a      	mov	r2, r3
 800b146:	f107 0318 	add.w	r3, r7, #24
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f002 fbca 	bl	800d8e6 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh4_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh5_ShortCnt>(outputState.LPCh5_powerElectronics.numShorts());
 800b152:	4877      	ldr	r0, [pc, #476]	; (800b330 <_Z15readAndSendDatav+0x870>)
 800b154:	f7fe fad7 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b158:	4603      	mov	r3, r0
 800b15a:	461a      	mov	r2, r3
 800b15c:	f107 0318 	add.w	r3, r7, #24
 800b160:	4611      	mov	r1, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f002 fbd4 	bl	800d910 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh5_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh5_State>(outputState.LPCh5_powerElectronics.getStatus());
 800b168:	4871      	ldr	r0, [pc, #452]	; (800b330 <_Z15readAndSendDatav+0x870>)
 800b16a:	f7fe faa2 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b16e:	4603      	mov	r3, r0
 800b170:	461a      	mov	r2, r3
 800b172:	f107 0318 	add.w	r3, r7, #24
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fbde 	bl	800d93a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh5_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh6_ShortCnt>(outputState.LPCh6.numShorts());
 800b17e:	486d      	ldr	r0, [pc, #436]	; (800b334 <_Z15readAndSendDatav+0x874>)
 800b180:	f7fe fac1 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	f107 0318 	add.w	r3, r7, #24
 800b18c:	4611      	mov	r1, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f002 fbe8 	bl	800d964 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh6_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh6_State>(outputState.LPCh6.getStatus());
 800b194:	4867      	ldr	r0, [pc, #412]	; (800b334 <_Z15readAndSendDatav+0x874>)
 800b196:	f7fe fa8c 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	f107 0318 	add.w	r3, r7, #24
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f002 fbf2 	bl	800d98e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh6_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh7_ShortCnt>(outputState.LPCh7_rearECU.numShorts());
 800b1aa:	4863      	ldr	r0, [pc, #396]	; (800b338 <_Z15readAndSendDatav+0x878>)
 800b1ac:	f7fe faab 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	f107 0318 	add.w	r3, r7, #24
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 fbfc 	bl	800d9b8 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh7_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh7_State>(outputState.LPCh7_rearECU.getStatus());
 800b1c0:	485d      	ldr	r0, [pc, #372]	; (800b338 <_Z15readAndSendDatav+0x878>)
 800b1c2:	f7fe fa76 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f107 0318 	add.w	r3, r7, #24
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f002 fc06 	bl	800d9e2 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh7_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh8_ShortCnt>(outputState.LPCh8_telemetry.numShorts());
 800b1d6:	4859      	ldr	r0, [pc, #356]	; (800b33c <_Z15readAndSendDatav+0x87c>)
 800b1d8:	f7fe fa95 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f107 0318 	add.w	r3, r7, #24
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f002 fc10 	bl	800da0c <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh8_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh8_State>(outputState.LPCh8_telemetry.getStatus());
 800b1ec:	4853      	ldr	r0, [pc, #332]	; (800b33c <_Z15readAndSendDatav+0x87c>)
 800b1ee:	f7fe fa60 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f107 0318 	add.w	r3, r7, #24
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fc1a 	bl	800da36 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh8_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh9_ShortCnt>(outputState.LPCh9_logger.numShorts());
 800b202:	484f      	ldr	r0, [pc, #316]	; (800b340 <_Z15readAndSendDatav+0x880>)
 800b204:	f7fe fa7f 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b208:	4603      	mov	r3, r0
 800b20a:	461a      	mov	r2, r3
 800b20c:	f107 0318 	add.w	r3, r7, #24
 800b210:	4611      	mov	r1, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f002 fc24 	bl	800da60 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh9_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh9_State>(outputState.LPCh9_logger.getStatus());
 800b218:	4849      	ldr	r0, [pc, #292]	; (800b340 <_Z15readAndSendDatav+0x880>)
 800b21a:	f7fe fa4a 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b21e:	4603      	mov	r3, r0
 800b220:	461a      	mov	r2, r3
 800b222:	f107 0318 	add.w	r3, r7, #24
 800b226:	4611      	mov	r1, r2
 800b228:	4618      	mov	r0, r3
 800b22a:	f002 fc2e 	bl	800da8a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh9_StateEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh10_ShortCnt>(outputState.LPCh10.numShorts());
 800b22e:	4845      	ldr	r0, [pc, #276]	; (800b344 <_Z15readAndSendDatav+0x884>)
 800b230:	f7fe fa69 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b234:	4603      	mov	r3, r0
 800b236:	461a      	mov	r2, r3
 800b238:	f107 0318 	add.w	r3, r7, #24
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f002 fc38 	bl	800dab4 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals19PDU_LPCh10_ShortCntEEEvNT_8dataTypeE>
	msgDebug1.set<signals::PDU_LPCh10_State>(outputState.LPCh10.getStatus());
 800b244:	483f      	ldr	r0, [pc, #252]	; (800b344 <_Z15readAndSendDatav+0x884>)
 800b246:	f7fe fa34 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b24a:	4603      	mov	r3, r0
 800b24c:	461a      	mov	r2, r3
 800b24e:	f107 0318 	add.w	r3, r7, #24
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f002 fc42 	bl	800dade <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals16PDU_LPCh10_StateEEEvNT_8dataTypeE>
	msgDebug1.send();
 800b25a:	f107 0318 	add.w	r3, r7, #24
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f7fa fb45 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>

	Message<messages::PDU_TX_HP_Short_Circuit_Debug> msgDebug2;
 800b266:	463b      	mov	r3, r7
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fc19 	bl	800aaa0 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEEC1Ev>
	msgDebug2.set<signals::PDU_HPCh1_ShortCnt>(outputState.HPCh1_projectXX.numShorts());
 800b26e:	4836      	ldr	r0, [pc, #216]	; (800b348 <_Z15readAndSendDatav+0x888>)
 800b270:	f7fe fa49 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b274:	4603      	mov	r3, r0
 800b276:	461a      	mov	r2, r3
 800b278:	463b      	mov	r3, r7
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f002 fc43 	bl	800db08 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh1_ShortCntEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh1_State>(outputState.HPCh1_projectXX.getStatus());
 800b282:	4831      	ldr	r0, [pc, #196]	; (800b348 <_Z15readAndSendDatav+0x888>)
 800b284:	f7fe fa15 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b288:	4603      	mov	r3, r0
 800b28a:	461a      	mov	r2, r3
 800b28c:	463b      	mov	r3, r7
 800b28e:	4611      	mov	r1, r2
 800b290:	4618      	mov	r0, r3
 800b292:	f002 fc4e 	bl	800db32 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh1_StateEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh2_ShortCnt>(outputState.HPCh2_coolingPump.numShorts());
 800b296:	482d      	ldr	r0, [pc, #180]	; (800b34c <_Z15readAndSendDatav+0x88c>)
 800b298:	f7fe fa35 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f002 fc59 	bl	800db5c <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh2_ShortCntEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh2_State>(outputState.HPCh2_coolingPump.getStatus());
 800b2aa:	4828      	ldr	r0, [pc, #160]	; (800b34c <_Z15readAndSendDatav+0x88c>)
 800b2ac:	f7fe fa01 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f002 fc64 	bl	800db86 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh2_StateEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh3_ShortCnt>(outputState.HPCh3.numShorts());
 800b2be:	4824      	ldr	r0, [pc, #144]	; (800b350 <_Z15readAndSendDatav+0x890>)
 800b2c0:	f7fe fa21 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	463b      	mov	r3, r7
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f002 fc6f 	bl	800dbb0 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh3_ShortCntEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh3_State>(outputState.HPCh3.getStatus());
 800b2d2:	481f      	ldr	r0, [pc, #124]	; (800b350 <_Z15readAndSendDatav+0x890>)
 800b2d4:	f7fe f9ed 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	463b      	mov	r3, r7
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 fc7a 	bl	800dbda <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh3_StateEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh4_ShortCnt>(outputState.HPCh4.numShorts());
 800b2e6:	481b      	ldr	r0, [pc, #108]	; (800b354 <_Z15readAndSendDatav+0x894>)
 800b2e8:	f7fe fa0d 	bl	8009706 <_ZN16OutputChannelPwm9numShortsEv>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	463b      	mov	r3, r7
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f002 fc85 	bl	800dc04 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh4_ShortCntEEEvNT_8dataTypeE>
	msgDebug2.set<signals::PDU_HPCh4_State>(outputState.HPCh4.getStatus());
 800b2fa:	4816      	ldr	r0, [pc, #88]	; (800b354 <_Z15readAndSendDatav+0x894>)
 800b2fc:	f7fe f9d9 	bl	80096b2 <_ZN16OutputChannelPwm9getStatusEv>
 800b300:	4603      	mov	r3, r0
 800b302:	461a      	mov	r2, r3
 800b304:	463b      	mov	r3, r7
 800b306:	4611      	mov	r1, r2
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 fc90 	bl	800dc2e <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh4_StateEEEvNT_8dataTypeE>
	msgDebug2.send();
 800b30e:	463b      	mov	r3, r7
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f7fa faec 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>
}
 800b318:	bf00      	nop
 800b31a:	37b0      	adds	r7, #176	; 0xb0
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20000514 	.word	0x20000514
 800b324:	2000052c 	.word	0x2000052c
 800b328:	20000544 	.word	0x20000544
 800b32c:	2000055c 	.word	0x2000055c
 800b330:	20000574 	.word	0x20000574
 800b334:	2000058c 	.word	0x2000058c
 800b338:	200005a4 	.word	0x200005a4
 800b33c:	200005bc 	.word	0x200005bc
 800b340:	200005d4 	.word	0x200005d4
 800b344:	200005ec 	.word	0x200005ec
 800b348:	20000604 	.word	0x20000604
 800b34c:	2000061c 	.word	0x2000061c
 800b350:	20000634 	.word	0x20000634
 800b354:	2000064c 	.word	0x2000064c

0800b358 <_Z19batterySafetyChecksv>:


/**
 * Safety checks for the battery: Low voltage warning, critical voltage error, over current error.
 */
void batterySafetyChecks() {
 800b358:	b580      	push	{r7, lr}
 800b35a:	ed2d 8b02 	vpush	{d8}
 800b35e:	af00      	add	r7, sp, #0
	static uint16_t errorUndervoltageCounter = 0;
	static uint16_t errorOvercurrentCounter = 0;
	static uint16_t errorOvertemperatureCounter = 0;

	// Warning when battery gets low
	if(OD_InputVoltage_get() < OD_batterVoltageLow_get()) {
 800b360:	f7f8 fd98 	bl	8003e94 <_Z19OD_InputVoltage_getv>
 800b364:	eeb0 8a40 	vmov.f32	s16, s0
 800b368:	f7f8 ff56 	bl	8004218 <_Z23OD_batterVoltageLow_getv>
 800b36c:	eef0 7a40 	vmov.f32	s15, s0
 800b370:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b378:	bf4c      	ite	mi
 800b37a:	2301      	movmi	r3, #1
 800b37c:	2300      	movpl	r3, #0
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <_Z19batterySafetyChecksv+0x32>
		WARN_batterVoltageLow_set();
 800b384:	f7fa fc4e 	bl	8005c24 <_Z25WARN_batterVoltageLow_setv>
 800b388:	e001      	b.n	800b38e <_Z19batterySafetyChecksv+0x36>
	} else {
		WARN_batterVoltageLow_clear();
 800b38a:	f7fa fc65 	bl	8005c58 <_Z27WARN_batterVoltageLow_clearv>
	}

	//Warning when battery temperature rises too high
	if(batteryTemperature > OD_overTempWarn_get()) {
 800b38e:	f7f8 ffb7 	bl	8004300 <_Z19OD_overTempWarn_getv>
 800b392:	eeb0 7a40 	vmov.f32	s14, s0
 800b396:	4baf      	ldr	r3, [pc, #700]	; (800b654 <_Z19batterySafetyChecksv+0x2fc>)
 800b398:	edd3 7a00 	vldr	s15, [r3]
 800b39c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a4:	bf4c      	ite	mi
 800b3a6:	2301      	movmi	r3, #1
 800b3a8:	2300      	movpl	r3, #0
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <_Z19batterySafetyChecksv+0x5e>
		WARN_batterTempHigh_set();
 800b3b0:	f7fa fc6e 	bl	8005c90 <_Z23WARN_batterTempHigh_setv>
 800b3b4:	e001      	b.n	800b3ba <_Z19batterySafetyChecksv+0x62>
	} else {
		WARN_batterTempHigh_clear();
 800b3b6:	f7fa fc85 	bl	8005cc4 <_Z25WARN_batterTempHigh_clearv>
	}

	// Error and shutdown when LV battery voltage gets critical low
	if(OD_InputVoltage_get() < OD_batterVoltageCritical_get() || errorUndervoltageCounter >= 200) {
 800b3ba:	f7f8 fd6b 	bl	8003e94 <_Z19OD_InputVoltage_getv>
 800b3be:	eeb0 8a40 	vmov.f32	s16, s0
 800b3c2:	f7f8 ff63 	bl	800428c <_Z28OD_batterVoltageCritical_getv>
 800b3c6:	eef0 7a40 	vmov.f32	s15, s0
 800b3ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d2:	d403      	bmi.n	800b3dc <_Z19batterySafetyChecksv+0x84>
 800b3d4:	4ba0      	ldr	r3, [pc, #640]	; (800b658 <_Z19batterySafetyChecksv+0x300>)
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	2bc7      	cmp	r3, #199	; 0xc7
 800b3da:	d901      	bls.n	800b3e0 <_Z19batterySafetyChecksv+0x88>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e000      	b.n	800b3e2 <_Z19batterySafetyChecksv+0x8a>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 8081 	beq.w	800b4ea <_Z19batterySafetyChecksv+0x192>

		errorUndervoltageCounter++;
 800b3e8:	4b9b      	ldr	r3, [pc, #620]	; (800b658 <_Z19batterySafetyChecksv+0x300>)
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	4b99      	ldr	r3, [pc, #612]	; (800b658 <_Z19batterySafetyChecksv+0x300>)
 800b3f2:	801a      	strh	r2, [r3, #0]

		// If error is present for 100 or more cycles (500ms), set the error
		if(errorUndervoltageCounter == 100) {
 800b3f4:	4b98      	ldr	r3, [pc, #608]	; (800b658 <_Z19batterySafetyChecksv+0x300>)
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	2b64      	cmp	r3, #100	; 0x64
 800b3fa:	d079      	beq.n	800b4f0 <_Z19batterySafetyChecksv+0x198>
			//ERR_batterVoltageCritical_set();

			// If undervoltage is longer than 1s, shut everything down
		} else if(errorUndervoltageCounter >= 200) {
 800b3fc:	4b96      	ldr	r3, [pc, #600]	; (800b658 <_Z19batterySafetyChecksv+0x300>)
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	2bc7      	cmp	r3, #199	; 0xc7
 800b402:	d975      	bls.n	800b4f0 <_Z19batterySafetyChecksv+0x198>
			outputState.LPCh1_opticalSensor.set(false);
 800b404:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b408:	2100      	movs	r1, #0
 800b40a:	4895      	ldr	r0, [pc, #596]	; (800b660 <_Z19batterySafetyChecksv+0x308>)
 800b40c:	f7fe f8c8 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh2.set(false);
 800b410:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b414:	2100      	movs	r1, #0
 800b416:	4893      	ldr	r0, [pc, #588]	; (800b664 <_Z19batterySafetyChecksv+0x30c>)
 800b418:	f7fe f8c2 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh3_HVCU.set(false);
 800b41c:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b420:	2100      	movs	r1, #0
 800b422:	4891      	ldr	r0, [pc, #580]	; (800b668 <_Z19batterySafetyChecksv+0x310>)
 800b424:	f7fe f8bc 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh4_eboxECUs.set(false);
 800b428:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b42c:	2100      	movs	r1, #0
 800b42e:	488f      	ldr	r0, [pc, #572]	; (800b66c <_Z19batterySafetyChecksv+0x314>)
 800b430:	f7fe f8b6 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(false);
 800b434:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b438:	2100      	movs	r1, #0
 800b43a:	488d      	ldr	r0, [pc, #564]	; (800b670 <_Z19batterySafetyChecksv+0x318>)
 800b43c:	f7fe f8b0 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(false);
 800b440:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b444:	2100      	movs	r1, #0
 800b446:	488b      	ldr	r0, [pc, #556]	; (800b674 <_Z19batterySafetyChecksv+0x31c>)
 800b448:	f7fe f8aa 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(false);
 800b44c:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b450:	2100      	movs	r1, #0
 800b452:	4889      	ldr	r0, [pc, #548]	; (800b678 <_Z19batterySafetyChecksv+0x320>)
 800b454:	f7fe f8a4 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh8_telemetry.set(false);
 800b458:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b45c:	2100      	movs	r1, #0
 800b45e:	4887      	ldr	r0, [pc, #540]	; (800b67c <_Z19batterySafetyChecksv+0x324>)
 800b460:	f7fe f89e 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh9_logger.set(false);
 800b464:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b468:	2100      	movs	r1, #0
 800b46a:	4885      	ldr	r0, [pc, #532]	; (800b680 <_Z19batterySafetyChecksv+0x328>)
 800b46c:	f7fe f898 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh10.set(false);
 800b470:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b474:	2100      	movs	r1, #0
 800b476:	4883      	ldr	r0, [pc, #524]	; (800b684 <_Z19batterySafetyChecksv+0x32c>)
 800b478:	f7fe f892 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh1_projectXX.set(false);
 800b47c:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b480:	2100      	movs	r1, #0
 800b482:	4881      	ldr	r0, [pc, #516]	; (800b688 <_Z19batterySafetyChecksv+0x330>)
 800b484:	f7fe f88c 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh2_coolingPump.set(false);
 800b488:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b48c:	2100      	movs	r1, #0
 800b48e:	487f      	ldr	r0, [pc, #508]	; (800b68c <_Z19batterySafetyChecksv+0x334>)
 800b490:	f7fe f886 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh3.set(false);
 800b494:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b498:	2100      	movs	r1, #0
 800b49a:	487d      	ldr	r0, [pc, #500]	; (800b690 <_Z19batterySafetyChecksv+0x338>)
 800b49c:	f7fe f880 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh4.set(false);
 800b4a0:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	487b      	ldr	r0, [pc, #492]	; (800b694 <_Z19batterySafetyChecksv+0x33c>)
 800b4a8:	f7fe f87a 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.set(false);
 800b4ac:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	4879      	ldr	r0, [pc, #484]	; (800b698 <_Z19batterySafetyChecksv+0x340>)
 800b4b4:	f7fe f874 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D2_PE_enable.set(false);
 800b4b8:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4877      	ldr	r0, [pc, #476]	; (800b69c <_Z19batterySafetyChecksv+0x344>)
 800b4c0:	f7fe f86e 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D3.set(false);
 800b4c4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	4875      	ldr	r0, [pc, #468]	; (800b6a0 <_Z19batterySafetyChecksv+0x348>)
 800b4cc:	f7fe f868 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(false);
 800b4d0:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4873      	ldr	r0, [pc, #460]	; (800b6a4 <_Z19batterySafetyChecksv+0x34c>)
 800b4d8:	f7fe f862 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800b4dc:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4871      	ldr	r0, [pc, #452]	; (800b6a8 <_Z19batterySafetyChecksv+0x350>)
 800b4e4:	f7fe f85c 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
 800b4e8:	e002      	b.n	800b4f0 <_Z19batterySafetyChecksv+0x198>
		}
	} else {
		errorUndervoltageCounter = 0;
 800b4ea:	4b5b      	ldr	r3, [pc, #364]	; (800b658 <_Z19batterySafetyChecksv+0x300>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	801a      	strh	r2, [r3, #0]
	}


	if(batteryTemperature > OD_overTempCritical_get() || errorOvertemperatureCounter >= 400) {
 800b4f0:	f7f8 ff40 	bl	8004374 <_Z23OD_overTempCritical_getv>
 800b4f4:	eeb0 7a40 	vmov.f32	s14, s0
 800b4f8:	4b56      	ldr	r3, [pc, #344]	; (800b654 <_Z19batterySafetyChecksv+0x2fc>)
 800b4fa:	edd3 7a00 	vldr	s15, [r3]
 800b4fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b506:	d404      	bmi.n	800b512 <_Z19batterySafetyChecksv+0x1ba>
 800b508:	4b68      	ldr	r3, [pc, #416]	; (800b6ac <_Z19batterySafetyChecksv+0x354>)
 800b50a:	881b      	ldrh	r3, [r3, #0]
 800b50c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b510:	d301      	bcc.n	800b516 <_Z19batterySafetyChecksv+0x1be>
 800b512:	2301      	movs	r3, #1
 800b514:	e000      	b.n	800b518 <_Z19batterySafetyChecksv+0x1c0>
 800b516:	2300      	movs	r3, #0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 8085 	beq.w	800b628 <_Z19batterySafetyChecksv+0x2d0>
		errorOvertemperatureCounter++;
 800b51e:	4b63      	ldr	r3, [pc, #396]	; (800b6ac <_Z19batterySafetyChecksv+0x354>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	3301      	adds	r3, #1
 800b524:	b29a      	uxth	r2, r3
 800b526:	4b61      	ldr	r3, [pc, #388]	; (800b6ac <_Z19batterySafetyChecksv+0x354>)
 800b528:	801a      	strh	r2, [r3, #0]

		// If error is present for 200 or more cycles (1000ms), set the error
		if(errorOvertemperatureCounter == 200) {
 800b52a:	4b60      	ldr	r3, [pc, #384]	; (800b6ac <_Z19batterySafetyChecksv+0x354>)
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	2bc8      	cmp	r3, #200	; 0xc8
 800b530:	d102      	bne.n	800b538 <_Z19batterySafetyChecksv+0x1e0>
			ERR_batterTempCritical_set();
 800b532:	f7fa fc51 	bl	8005dd8 <_Z26ERR_batterTempCritical_setv>
 800b536:	e07a      	b.n	800b62e <_Z19batterySafetyChecksv+0x2d6>

			// If overtemperature is longer than 2s, shut everything down
		} else if(errorOvertemperatureCounter >= 400) {
 800b538:	4b5c      	ldr	r3, [pc, #368]	; (800b6ac <_Z19batterySafetyChecksv+0x354>)
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b540:	d375      	bcc.n	800b62e <_Z19batterySafetyChecksv+0x2d6>
			outputState.LPCh1_opticalSensor.set(false);
 800b542:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b546:	2100      	movs	r1, #0
 800b548:	4845      	ldr	r0, [pc, #276]	; (800b660 <_Z19batterySafetyChecksv+0x308>)
 800b54a:	f7fe f829 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh2.set(false);
 800b54e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b552:	2100      	movs	r1, #0
 800b554:	4843      	ldr	r0, [pc, #268]	; (800b664 <_Z19batterySafetyChecksv+0x30c>)
 800b556:	f7fe f823 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh3_HVCU.set(false);
 800b55a:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b55e:	2100      	movs	r1, #0
 800b560:	4841      	ldr	r0, [pc, #260]	; (800b668 <_Z19batterySafetyChecksv+0x310>)
 800b562:	f7fe f81d 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh4_eboxECUs.set(false);
 800b566:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b56a:	2100      	movs	r1, #0
 800b56c:	483f      	ldr	r0, [pc, #252]	; (800b66c <_Z19batterySafetyChecksv+0x314>)
 800b56e:	f7fe f817 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(false);
 800b572:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b576:	2100      	movs	r1, #0
 800b578:	483d      	ldr	r0, [pc, #244]	; (800b670 <_Z19batterySafetyChecksv+0x318>)
 800b57a:	f7fe f811 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(false);
 800b57e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b582:	2100      	movs	r1, #0
 800b584:	483b      	ldr	r0, [pc, #236]	; (800b674 <_Z19batterySafetyChecksv+0x31c>)
 800b586:	f7fe f80b 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(false);
 800b58a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b58e:	2100      	movs	r1, #0
 800b590:	4839      	ldr	r0, [pc, #228]	; (800b678 <_Z19batterySafetyChecksv+0x320>)
 800b592:	f7fe f805 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh8_telemetry.set(false);
 800b596:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b59a:	2100      	movs	r1, #0
 800b59c:	4837      	ldr	r0, [pc, #220]	; (800b67c <_Z19batterySafetyChecksv+0x324>)
 800b59e:	f7fd ffff 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh9_logger.set(false);
 800b5a2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	4835      	ldr	r0, [pc, #212]	; (800b680 <_Z19batterySafetyChecksv+0x328>)
 800b5aa:	f7fd fff9 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh10.set(false);
 800b5ae:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4833      	ldr	r0, [pc, #204]	; (800b684 <_Z19batterySafetyChecksv+0x32c>)
 800b5b6:	f7fd fff3 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh1_projectXX.set(false);
 800b5ba:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5be:	2100      	movs	r1, #0
 800b5c0:	4831      	ldr	r0, [pc, #196]	; (800b688 <_Z19batterySafetyChecksv+0x330>)
 800b5c2:	f7fd ffed 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh2_coolingPump.set(false);
 800b5c6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	482f      	ldr	r0, [pc, #188]	; (800b68c <_Z19batterySafetyChecksv+0x334>)
 800b5ce:	f7fd ffe7 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh3.set(false);
 800b5d2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	482d      	ldr	r0, [pc, #180]	; (800b690 <_Z19batterySafetyChecksv+0x338>)
 800b5da:	f7fd ffe1 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh4.set(false);
 800b5de:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	482b      	ldr	r0, [pc, #172]	; (800b694 <_Z19batterySafetyChecksv+0x33c>)
 800b5e6:	f7fd ffdb 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.set(false);
 800b5ea:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	4829      	ldr	r0, [pc, #164]	; (800b698 <_Z19batterySafetyChecksv+0x340>)
 800b5f2:	f7fd ffd5 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D2_PE_enable.set(false);
 800b5f6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4827      	ldr	r0, [pc, #156]	; (800b69c <_Z19batterySafetyChecksv+0x344>)
 800b5fe:	f7fd ffcf 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D3.set(false);
 800b602:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b606:	2100      	movs	r1, #0
 800b608:	4825      	ldr	r0, [pc, #148]	; (800b6a0 <_Z19batterySafetyChecksv+0x348>)
 800b60a:	f7fd ffc9 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(false);
 800b60e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b612:	2100      	movs	r1, #0
 800b614:	4823      	ldr	r0, [pc, #140]	; (800b6a4 <_Z19batterySafetyChecksv+0x34c>)
 800b616:	f7fd ffc3 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800b61a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b65c <_Z19batterySafetyChecksv+0x304>
 800b61e:	2100      	movs	r1, #0
 800b620:	4821      	ldr	r0, [pc, #132]	; (800b6a8 <_Z19batterySafetyChecksv+0x350>)
 800b622:	f7fd ffbd 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
 800b626:	e002      	b.n	800b62e <_Z19batterySafetyChecksv+0x2d6>
		}
	} else {
		errorOvertemperatureCounter = 0;
 800b628:	4b20      	ldr	r3, [pc, #128]	; (800b6ac <_Z19batterySafetyChecksv+0x354>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	801a      	strh	r2, [r3, #0]
	}

	// Error and shutdown when LV battery current exceeds critical value
	if(lvCurrent > OD_batteryOvercurrent_get() || errorOvercurrentCounter > 10) {
 800b62e:	f7f8 fedb 	bl	80043e8 <_Z25OD_batteryOvercurrent_getv>
 800b632:	eeb0 7a40 	vmov.f32	s14, s0
 800b636:	4b1e      	ldr	r3, [pc, #120]	; (800b6b0 <_Z19batterySafetyChecksv+0x358>)
 800b638:	edd3 7a00 	vldr	s15, [r3]
 800b63c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b644:	d403      	bmi.n	800b64e <_Z19batterySafetyChecksv+0x2f6>
 800b646:	4b1b      	ldr	r3, [pc, #108]	; (800b6b4 <_Z19batterySafetyChecksv+0x35c>)
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	2b0a      	cmp	r3, #10
 800b64c:	d934      	bls.n	800b6b8 <_Z19batterySafetyChecksv+0x360>
 800b64e:	2301      	movs	r3, #1
 800b650:	e033      	b.n	800b6ba <_Z19batterySafetyChecksv+0x362>
 800b652:	bf00      	nop
 800b654:	20000500 	.word	0x20000500
 800b658:	200006dc 	.word	0x200006dc
 800b65c:	c2c80000 	.word	0xc2c80000
 800b660:	20000514 	.word	0x20000514
 800b664:	2000052c 	.word	0x2000052c
 800b668:	20000544 	.word	0x20000544
 800b66c:	2000055c 	.word	0x2000055c
 800b670:	20000574 	.word	0x20000574
 800b674:	2000058c 	.word	0x2000058c
 800b678:	200005a4 	.word	0x200005a4
 800b67c:	200005bc 	.word	0x200005bc
 800b680:	200005d4 	.word	0x200005d4
 800b684:	200005ec 	.word	0x200005ec
 800b688:	20000604 	.word	0x20000604
 800b68c:	2000061c 	.word	0x2000061c
 800b690:	20000634 	.word	0x20000634
 800b694:	2000064c 	.word	0x2000064c
 800b698:	20000664 	.word	0x20000664
 800b69c:	2000067c 	.word	0x2000067c
 800b6a0:	20000694 	.word	0x20000694
 800b6a4:	200006ac 	.word	0x200006ac
 800b6a8:	200006c4 	.word	0x200006c4
 800b6ac:	200006e0 	.word	0x200006e0
 800b6b0:	200004cc 	.word	0x200004cc
 800b6b4:	200006de 	.word	0x200006de
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d07e      	beq.n	800b7bc <_Z19batterySafetyChecksv+0x464>

		errorOvercurrentCounter++;
 800b6be:	4b43      	ldr	r3, [pc, #268]	; (800b7cc <_Z19batterySafetyChecksv+0x474>)
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	4b41      	ldr	r3, [pc, #260]	; (800b7cc <_Z19batterySafetyChecksv+0x474>)
 800b6c8:	801a      	strh	r2, [r3, #0]

		// If error is present for 10 or more cycles, shut down pod and set the error
		if(errorOvercurrentCounter > 10) {
 800b6ca:	4b40      	ldr	r3, [pc, #256]	; (800b7cc <_Z19batterySafetyChecksv+0x474>)
 800b6cc:	881b      	ldrh	r3, [r3, #0]
 800b6ce:	2b0a      	cmp	r3, #10
 800b6d0:	d977      	bls.n	800b7c2 <_Z19batterySafetyChecksv+0x46a>
			ERR_batteryOvercurrent_set();
 800b6d2:	f7fa fb3d 	bl	8005d50 <_Z26ERR_batteryOvercurrent_setv>
			outputState.LPCh1_opticalSensor.set(false);
 800b6d6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b6da:	2100      	movs	r1, #0
 800b6dc:	483d      	ldr	r0, [pc, #244]	; (800b7d4 <_Z19batterySafetyChecksv+0x47c>)
 800b6de:	f7fd ff5f 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh2.set(false);
 800b6e2:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	483b      	ldr	r0, [pc, #236]	; (800b7d8 <_Z19batterySafetyChecksv+0x480>)
 800b6ea:	f7fd ff59 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh3_HVCU.set(false);
 800b6ee:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4839      	ldr	r0, [pc, #228]	; (800b7dc <_Z19batterySafetyChecksv+0x484>)
 800b6f6:	f7fd ff53 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh4_eboxECUs.set(false);
 800b6fa:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b6fe:	2100      	movs	r1, #0
 800b700:	4837      	ldr	r0, [pc, #220]	; (800b7e0 <_Z19batterySafetyChecksv+0x488>)
 800b702:	f7fd ff4d 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh5_powerElectronics.set(false);
 800b706:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b70a:	2100      	movs	r1, #0
 800b70c:	4835      	ldr	r0, [pc, #212]	; (800b7e4 <_Z19batterySafetyChecksv+0x48c>)
 800b70e:	f7fd ff47 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh6.set(false);
 800b712:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b716:	2100      	movs	r1, #0
 800b718:	4833      	ldr	r0, [pc, #204]	; (800b7e8 <_Z19batterySafetyChecksv+0x490>)
 800b71a:	f7fd ff41 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh7_rearECU.set(false);
 800b71e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b722:	2100      	movs	r1, #0
 800b724:	4831      	ldr	r0, [pc, #196]	; (800b7ec <_Z19batterySafetyChecksv+0x494>)
 800b726:	f7fd ff3b 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh8_telemetry.set(false);
 800b72a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b72e:	2100      	movs	r1, #0
 800b730:	482f      	ldr	r0, [pc, #188]	; (800b7f0 <_Z19batterySafetyChecksv+0x498>)
 800b732:	f7fd ff35 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh9_logger.set(false);
 800b736:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b73a:	2100      	movs	r1, #0
 800b73c:	482d      	ldr	r0, [pc, #180]	; (800b7f4 <_Z19batterySafetyChecksv+0x49c>)
 800b73e:	f7fd ff2f 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.LPCh10.set(false);
 800b742:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b746:	2100      	movs	r1, #0
 800b748:	482b      	ldr	r0, [pc, #172]	; (800b7f8 <_Z19batterySafetyChecksv+0x4a0>)
 800b74a:	f7fd ff29 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh1_projectXX.set(false);
 800b74e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b752:	2100      	movs	r1, #0
 800b754:	4829      	ldr	r0, [pc, #164]	; (800b7fc <_Z19batterySafetyChecksv+0x4a4>)
 800b756:	f7fd ff23 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh2_coolingPump.set(false);
 800b75a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b75e:	2100      	movs	r1, #0
 800b760:	4827      	ldr	r0, [pc, #156]	; (800b800 <_Z19batterySafetyChecksv+0x4a8>)
 800b762:	f7fd ff1d 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh3.set(false);
 800b766:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b76a:	2100      	movs	r1, #0
 800b76c:	4825      	ldr	r0, [pc, #148]	; (800b804 <_Z19batterySafetyChecksv+0x4ac>)
 800b76e:	f7fd ff17 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.HPCh4.set(false);
 800b772:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b776:	2100      	movs	r1, #0
 800b778:	4823      	ldr	r0, [pc, #140]	; (800b808 <_Z19batterySafetyChecksv+0x4b0>)
 800b77a:	f7fd ff11 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D1_projectXX.set(false);
 800b77e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b782:	2100      	movs	r1, #0
 800b784:	4821      	ldr	r0, [pc, #132]	; (800b80c <_Z19batterySafetyChecksv+0x4b4>)
 800b786:	f7fd ff0b 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D2_PE_enable.set(false);
 800b78a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b78e:	2100      	movs	r1, #0
 800b790:	481f      	ldr	r0, [pc, #124]	; (800b810 <_Z19batterySafetyChecksv+0x4b8>)
 800b792:	f7fd ff05 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D3.set(false);
 800b796:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b79a:	2100      	movs	r1, #0
 800b79c:	481d      	ldr	r0, [pc, #116]	; (800b814 <_Z19batterySafetyChecksv+0x4bc>)
 800b79e:	f7fd feff 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.D4.set(false);
 800b7a2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	481b      	ldr	r0, [pc, #108]	; (800b818 <_Z19batterySafetyChecksv+0x4c0>)
 800b7aa:	f7fd fef9 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800b7ae:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800b7d0 <_Z19batterySafetyChecksv+0x478>
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4819      	ldr	r0, [pc, #100]	; (800b81c <_Z19batterySafetyChecksv+0x4c4>)
 800b7b6:	f7fd fef3 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
		}
	} else {
		errorOvercurrentCounter = 0;
	}
}
 800b7ba:	e002      	b.n	800b7c2 <_Z19batterySafetyChecksv+0x46a>
		errorOvercurrentCounter = 0;
 800b7bc:	4b03      	ldr	r3, [pc, #12]	; (800b7cc <_Z19batterySafetyChecksv+0x474>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	801a      	strh	r2, [r3, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	ecbd 8b02 	vpop	{d8}
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	200006de 	.word	0x200006de
 800b7d0:	c2c80000 	.word	0xc2c80000
 800b7d4:	20000514 	.word	0x20000514
 800b7d8:	2000052c 	.word	0x2000052c
 800b7dc:	20000544 	.word	0x20000544
 800b7e0:	2000055c 	.word	0x2000055c
 800b7e4:	20000574 	.word	0x20000574
 800b7e8:	2000058c 	.word	0x2000058c
 800b7ec:	200005a4 	.word	0x200005a4
 800b7f0:	200005bc 	.word	0x200005bc
 800b7f4:	200005d4 	.word	0x200005d4
 800b7f8:	200005ec 	.word	0x200005ec
 800b7fc:	20000604 	.word	0x20000604
 800b800:	2000061c 	.word	0x2000061c
 800b804:	20000634 	.word	0x20000634
 800b808:	2000064c 	.word	0x2000064c
 800b80c:	20000664 	.word	0x20000664
 800b810:	2000067c 	.word	0x2000067c
 800b814:	20000694 	.word	0x20000694
 800b818:	200006ac 	.word	0x200006ac
 800b81c:	200006c4 	.word	0x200006c4

0800b820 <_Z14updateChannelsv>:


/**
 * Set the hardware channels
 */
void updateChannels() {
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
	outputState.LPCh1_opticalSensor.update();
 800b824:	48a9      	ldr	r0, [pc, #676]	; (800bacc <_Z14updateChannelsv+0x2ac>)
 800b826:	f7fd ff7a 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh2.update();
 800b82a:	48a9      	ldr	r0, [pc, #676]	; (800bad0 <_Z14updateChannelsv+0x2b0>)
 800b82c:	f7fd ff77 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh3_HVCU.update();
 800b830:	48a8      	ldr	r0, [pc, #672]	; (800bad4 <_Z14updateChannelsv+0x2b4>)
 800b832:	f7fd ff74 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh4_eboxECUs.update();
 800b836:	48a8      	ldr	r0, [pc, #672]	; (800bad8 <_Z14updateChannelsv+0x2b8>)
 800b838:	f7fd ff71 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh5_powerElectronics.update();
 800b83c:	48a7      	ldr	r0, [pc, #668]	; (800badc <_Z14updateChannelsv+0x2bc>)
 800b83e:	f7fd ff6e 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh6.update();
 800b842:	48a7      	ldr	r0, [pc, #668]	; (800bae0 <_Z14updateChannelsv+0x2c0>)
 800b844:	f7fd ff6b 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh7_rearECU.update();
 800b848:	48a6      	ldr	r0, [pc, #664]	; (800bae4 <_Z14updateChannelsv+0x2c4>)
 800b84a:	f7fd ff68 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh8_telemetry.update();
 800b84e:	48a6      	ldr	r0, [pc, #664]	; (800bae8 <_Z14updateChannelsv+0x2c8>)
 800b850:	f7fd ff65 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh9_logger.update();
 800b854:	48a5      	ldr	r0, [pc, #660]	; (800baec <_Z14updateChannelsv+0x2cc>)
 800b856:	f7fd ff62 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.LPCh10.update();
 800b85a:	48a5      	ldr	r0, [pc, #660]	; (800baf0 <_Z14updateChannelsv+0x2d0>)
 800b85c:	f7fd ff5f 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh1_projectXX.update();
 800b860:	48a4      	ldr	r0, [pc, #656]	; (800baf4 <_Z14updateChannelsv+0x2d4>)
 800b862:	f7fd ff5c 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh2_coolingPump.update();
 800b866:	48a4      	ldr	r0, [pc, #656]	; (800baf8 <_Z14updateChannelsv+0x2d8>)
 800b868:	f7fd ff59 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh3.update();
 800b86c:	48a3      	ldr	r0, [pc, #652]	; (800bafc <_Z14updateChannelsv+0x2dc>)
 800b86e:	f7fd ff56 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.HPCh4.update();
 800b872:	48a3      	ldr	r0, [pc, #652]	; (800bb00 <_Z14updateChannelsv+0x2e0>)
 800b874:	f7fd ff53 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.D1_projectXX.update();
 800b878:	48a2      	ldr	r0, [pc, #648]	; (800bb04 <_Z14updateChannelsv+0x2e4>)
 800b87a:	f7fd ff50 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.D2_PE_enable.update();
 800b87e:	48a2      	ldr	r0, [pc, #648]	; (800bb08 <_Z14updateChannelsv+0x2e8>)
 800b880:	f7fd ff4d 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.D3.update();
 800b884:	48a1      	ldr	r0, [pc, #644]	; (800bb0c <_Z14updateChannelsv+0x2ec>)
 800b886:	f7fd ff4a 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	outputState.D4.update();
 800b88a:	48a1      	ldr	r0, [pc, #644]	; (800bb10 <_Z14updateChannelsv+0x2f0>)
 800b88c:	f7fd ff47 	bl	800971e <_ZN16OutputChannelPwm6updateEv>
	// Standard output channels with PWM support

	//Somehow all timers except of TIM2 can't save dutycycles of 100% so that the +1 was deleted.

	// LPCh1 is TIM12_CH2
	if(outputState.LPCh1_opticalSensor.getSwitch()) {
 800b890:	488e      	ldr	r0, [pc, #568]	; (800bacc <_Z14updateChannelsv+0x2ac>)
 800b892:	f7fd fef3 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d019      	beq.n	800b8d0 <_Z14updateChannelsv+0xb0>
		htim12.Instance->CCR2 = outputState.LPCh1_opticalSensor.getDuty() * (htim12.Instance->ARR) / 100.0f;
 800b89c:	488b      	ldr	r0, [pc, #556]	; (800bacc <_Z14updateChannelsv+0x2ac>)
 800b89e:	f7fd fed2 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800b8a2:	eeb0 7a40 	vmov.f32	s14, s0
 800b8a6:	4b9b      	ldr	r3, [pc, #620]	; (800bb14 <_Z14updateChannelsv+0x2f4>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ac:	ee07 3a90 	vmov	s15, r3
 800b8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8b8:	eddf 6a97 	vldr	s13, [pc, #604]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800b8bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8c0:	4b94      	ldr	r3, [pc, #592]	; (800bb14 <_Z14updateChannelsv+0x2f4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c8:	ee17 2a90 	vmov	r2, s15
 800b8cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b8ce:	e003      	b.n	800b8d8 <_Z14updateChannelsv+0xb8>
	} else {
		htim12.Instance->CCR2 = 0;
 800b8d0:	4b90      	ldr	r3, [pc, #576]	; (800bb14 <_Z14updateChannelsv+0x2f4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// LPCh2 is TIM2_CH3
	if(outputState.LPCh2.getSwitch()) {
 800b8d8:	487d      	ldr	r0, [pc, #500]	; (800bad0 <_Z14updateChannelsv+0x2b0>)
 800b8da:	f7fd fecf 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d01a      	beq.n	800b91a <_Z14updateChannelsv+0xfa>
		htim2.Instance->CCR3 = outputState.LPCh2.getDuty() * (htim2.Instance->ARR + 1) / 100.0f;
 800b8e4:	487a      	ldr	r0, [pc, #488]	; (800bad0 <_Z14updateChannelsv+0x2b0>)
 800b8e6:	f7fd feae 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800b8ea:	eeb0 7a40 	vmov.f32	s14, s0
 800b8ee:	4b8b      	ldr	r3, [pc, #556]	; (800bb1c <_Z14updateChannelsv+0x2fc>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b902:	eddf 6a85 	vldr	s13, [pc, #532]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800b906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b90a:	4b84      	ldr	r3, [pc, #528]	; (800bb1c <_Z14updateChannelsv+0x2fc>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b912:	ee17 2a90 	vmov	r2, s15
 800b916:	63da      	str	r2, [r3, #60]	; 0x3c
 800b918:	e003      	b.n	800b922 <_Z14updateChannelsv+0x102>
	} else {
		htim2.Instance->CCR3 = 0;
 800b91a:	4b80      	ldr	r3, [pc, #512]	; (800bb1c <_Z14updateChannelsv+0x2fc>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2200      	movs	r2, #0
 800b920:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// LPCh3 is TIM2_CH1
	if(outputState.LPCh3_HVCU.getSwitch()) {
 800b922:	486c      	ldr	r0, [pc, #432]	; (800bad4 <_Z14updateChannelsv+0x2b4>)
 800b924:	f7fd feaa 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d01a      	beq.n	800b964 <_Z14updateChannelsv+0x144>
		htim2.Instance->CCR1 = outputState.LPCh3_HVCU.getDuty() * (htim2.Instance->ARR + 1) / 100.0f;
 800b92e:	4869      	ldr	r0, [pc, #420]	; (800bad4 <_Z14updateChannelsv+0x2b4>)
 800b930:	f7fd fe89 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800b934:	eeb0 7a40 	vmov.f32	s14, s0
 800b938:	4b78      	ldr	r3, [pc, #480]	; (800bb1c <_Z14updateChannelsv+0x2fc>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93e:	3301      	adds	r3, #1
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b94c:	eddf 6a72 	vldr	s13, [pc, #456]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800b950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b954:	4b71      	ldr	r3, [pc, #452]	; (800bb1c <_Z14updateChannelsv+0x2fc>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95c:	ee17 2a90 	vmov	r2, s15
 800b960:	635a      	str	r2, [r3, #52]	; 0x34
 800b962:	e003      	b.n	800b96c <_Z14updateChannelsv+0x14c>
	} else {
		htim2.Instance->CCR1 = 0;
 800b964:	4b6d      	ldr	r3, [pc, #436]	; (800bb1c <_Z14updateChannelsv+0x2fc>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2200      	movs	r2, #0
 800b96a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// LPCh8 is TIM8_CH1
	if(outputState.LPCh8_telemetry.getSwitch()) {
 800b96c:	485e      	ldr	r0, [pc, #376]	; (800bae8 <_Z14updateChannelsv+0x2c8>)
 800b96e:	f7fd fe85 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d019      	beq.n	800b9ac <_Z14updateChannelsv+0x18c>
		htim8.Instance->CCR1 = outputState.LPCh3_HVCU.getDuty() * (htim8.Instance->ARR ) / 100.0f;
 800b978:	4856      	ldr	r0, [pc, #344]	; (800bad4 <_Z14updateChannelsv+0x2b4>)
 800b97a:	f7fd fe64 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800b97e:	eeb0 7a40 	vmov.f32	s14, s0
 800b982:	4b67      	ldr	r3, [pc, #412]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b990:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b994:	eddf 6a60 	vldr	s13, [pc, #384]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800b998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b99c:	4b60      	ldr	r3, [pc, #384]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a4:	ee17 2a90 	vmov	r2, s15
 800b9a8:	635a      	str	r2, [r3, #52]	; 0x34
 800b9aa:	e003      	b.n	800b9b4 <_Z14updateChannelsv+0x194>
	} else {
		htim8.Instance->CCR1 = 0;
 800b9ac:	4b5c      	ldr	r3, [pc, #368]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// LPCh9 is TIM4_CH2
	if(outputState.LPCh9_logger.getSwitch()) {
 800b9b4:	484d      	ldr	r0, [pc, #308]	; (800baec <_Z14updateChannelsv+0x2cc>)
 800b9b6:	f7fd fe61 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d019      	beq.n	800b9f4 <_Z14updateChannelsv+0x1d4>
		htim4.Instance->CCR2 = outputState.LPCh9_logger.getDuty() * (htim4.Instance->ARR) / 100.0f;
 800b9c0:	484a      	ldr	r0, [pc, #296]	; (800baec <_Z14updateChannelsv+0x2cc>)
 800b9c2:	f7fd fe40 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800b9c6:	eeb0 7a40 	vmov.f32	s14, s0
 800b9ca:	4b56      	ldr	r3, [pc, #344]	; (800bb24 <_Z14updateChannelsv+0x304>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	ee07 3a90 	vmov	s15, r3
 800b9d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800b9e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9e4:	4b4f      	ldr	r3, [pc, #316]	; (800bb24 <_Z14updateChannelsv+0x304>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ec:	ee17 2a90 	vmov	r2, s15
 800b9f0:	639a      	str	r2, [r3, #56]	; 0x38
 800b9f2:	e003      	b.n	800b9fc <_Z14updateChannelsv+0x1dc>
	} else {
		htim4.Instance->CCR2 = 0;
 800b9f4:	4b4b      	ldr	r3, [pc, #300]	; (800bb24 <_Z14updateChannelsv+0x304>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// LPCh10 is TIM11_CH1
	if(outputState.LPCh10.getSwitch()) {
 800b9fc:	483c      	ldr	r0, [pc, #240]	; (800baf0 <_Z14updateChannelsv+0x2d0>)
 800b9fe:	f7fd fe3d 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d019      	beq.n	800ba3c <_Z14updateChannelsv+0x21c>
		htim11.Instance->CCR1 = outputState.LPCh10.getDuty() * (htim11.Instance->ARR) / 100.0f;
 800ba08:	4839      	ldr	r0, [pc, #228]	; (800baf0 <_Z14updateChannelsv+0x2d0>)
 800ba0a:	f7fd fe1c 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800ba0e:	eeb0 7a40 	vmov.f32	s14, s0
 800ba12:	4b45      	ldr	r3, [pc, #276]	; (800bb28 <_Z14updateChannelsv+0x308>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba24:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800ba28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba2c:	4b3e      	ldr	r3, [pc, #248]	; (800bb28 <_Z14updateChannelsv+0x308>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba34:	ee17 2a90 	vmov	r2, s15
 800ba38:	635a      	str	r2, [r3, #52]	; 0x34
 800ba3a:	e003      	b.n	800ba44 <_Z14updateChannelsv+0x224>
	} else {
		htim11.Instance->CCR1 = 0;
 800ba3c:	4b3a      	ldr	r3, [pc, #232]	; (800bb28 <_Z14updateChannelsv+0x308>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2200      	movs	r2, #0
 800ba42:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// HPCh1 is TIM8_CH4
	if(outputState.HPCh1_projectXX.getSwitch()) {
 800ba44:	482b      	ldr	r0, [pc, #172]	; (800baf4 <_Z14updateChannelsv+0x2d4>)
 800ba46:	f7fd fe19 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d019      	beq.n	800ba84 <_Z14updateChannelsv+0x264>
		htim8.Instance->CCR4 = outputState.HPCh1_projectXX.getDuty() * (htim8.Instance->ARR) / 100.0f;
 800ba50:	4828      	ldr	r0, [pc, #160]	; (800baf4 <_Z14updateChannelsv+0x2d4>)
 800ba52:	f7fd fdf8 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800ba56:	eeb0 7a40 	vmov.f32	s14, s0
 800ba5a:	4b31      	ldr	r3, [pc, #196]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	ee07 3a90 	vmov	s15, r3
 800ba64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba6c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800ba70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba74:	4b2a      	ldr	r3, [pc, #168]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7c:	ee17 2a90 	vmov	r2, s15
 800ba80:	641a      	str	r2, [r3, #64]	; 0x40
 800ba82:	e003      	b.n	800ba8c <_Z14updateChannelsv+0x26c>
	} else {
		htim8.Instance->CCR4 = 0;
 800ba84:	4b26      	ldr	r3, [pc, #152]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// HPCh2 is TIM8_CH2
	if(outputState.HPCh2_coolingPump.getSwitch()) {
 800ba8c:	481a      	ldr	r0, [pc, #104]	; (800baf8 <_Z14updateChannelsv+0x2d8>)
 800ba8e:	f7fd fdf5 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d049      	beq.n	800bb2c <_Z14updateChannelsv+0x30c>
		htim8.Instance->CCR2 = outputState.HPCh2_coolingPump.getDuty() * (htim8.Instance->ARR) / 100.0f;
 800ba98:	4817      	ldr	r0, [pc, #92]	; (800baf8 <_Z14updateChannelsv+0x2d8>)
 800ba9a:	f7fd fdd4 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800ba9e:	eeb0 7a40 	vmov.f32	s14, s0
 800baa2:	4b1f      	ldr	r3, [pc, #124]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	ee07 3a90 	vmov	s15, r3
 800baac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bab4:	eddf 6a18 	vldr	s13, [pc, #96]	; 800bb18 <_Z14updateChannelsv+0x2f8>
 800bab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800babc:	4b18      	ldr	r3, [pc, #96]	; (800bb20 <_Z14updateChannelsv+0x300>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac4:	ee17 2a90 	vmov	r2, s15
 800bac8:	639a      	str	r2, [r3, #56]	; 0x38
 800baca:	e033      	b.n	800bb34 <_Z14updateChannelsv+0x314>
 800bacc:	20000514 	.word	0x20000514
 800bad0:	2000052c 	.word	0x2000052c
 800bad4:	20000544 	.word	0x20000544
 800bad8:	2000055c 	.word	0x2000055c
 800badc:	20000574 	.word	0x20000574
 800bae0:	2000058c 	.word	0x2000058c
 800bae4:	200005a4 	.word	0x200005a4
 800bae8:	200005bc 	.word	0x200005bc
 800baec:	200005d4 	.word	0x200005d4
 800baf0:	200005ec 	.word	0x200005ec
 800baf4:	20000604 	.word	0x20000604
 800baf8:	2000061c 	.word	0x2000061c
 800bafc:	20000634 	.word	0x20000634
 800bb00:	2000064c 	.word	0x2000064c
 800bb04:	20000664 	.word	0x20000664
 800bb08:	2000067c 	.word	0x2000067c
 800bb0c:	20000694 	.word	0x20000694
 800bb10:	200006ac 	.word	0x200006ac
 800bb14:	20003098 	.word	0x20003098
 800bb18:	42c80000 	.word	0x42c80000
 800bb1c:	20002ee8 	.word	0x20002ee8
 800bb20:	20002fc0 	.word	0x20002fc0
 800bb24:	20002f78 	.word	0x20002f78
 800bb28:	20003050 	.word	0x20003050
	} else {
		htim8.Instance->CCR2 = 0;
 800bb2c:	4b6e      	ldr	r3, [pc, #440]	; (800bce8 <_Z14updateChannelsv+0x4c8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2200      	movs	r2, #0
 800bb32:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// D1 is TIM3_CH1 (is controlled by ProjectXX.hpp)
	if(outputState.D1_projectXX.getSwitch()) {
 800bb34:	486d      	ldr	r0, [pc, #436]	; (800bcec <_Z14updateChannelsv+0x4cc>)
 800bb36:	f7fd fda1 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
	} else {
		//htim3.Instance->CCR1= 0;
	}

	// D2 is TIM10_CH1
	if(outputState.D2_PE_enable.getSwitch()) {
 800bb3a:	486d      	ldr	r0, [pc, #436]	; (800bcf0 <_Z14updateChannelsv+0x4d0>)
 800bb3c:	f7fd fd9e 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d019      	beq.n	800bb7a <_Z14updateChannelsv+0x35a>
		htim10.Instance->CCR1 = outputState.D2_PE_enable.getDuty() * (htim10.Instance->ARR) / 100.0f;
 800bb46:	486a      	ldr	r0, [pc, #424]	; (800bcf0 <_Z14updateChannelsv+0x4d0>)
 800bb48:	f7fd fd7d 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800bb4c:	eeb0 7a40 	vmov.f32	s14, s0
 800bb50:	4b68      	ldr	r3, [pc, #416]	; (800bcf4 <_Z14updateChannelsv+0x4d4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	ee07 3a90 	vmov	s15, r3
 800bb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb62:	eddf 6a65 	vldr	s13, [pc, #404]	; 800bcf8 <_Z14updateChannelsv+0x4d8>
 800bb66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb6a:	4b62      	ldr	r3, [pc, #392]	; (800bcf4 <_Z14updateChannelsv+0x4d4>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb72:	ee17 2a90 	vmov	r2, s15
 800bb76:	635a      	str	r2, [r3, #52]	; 0x34
 800bb78:	e003      	b.n	800bb82 <_Z14updateChannelsv+0x362>
	} else {
		htim10.Instance->CCR1 = 0;
 800bb7a:	4b5e      	ldr	r3, [pc, #376]	; (800bcf4 <_Z14updateChannelsv+0x4d4>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// D3 is TIM2_CH4
	if(outputState.D3.getSwitch()) {
 800bb82:	485e      	ldr	r0, [pc, #376]	; (800bcfc <_Z14updateChannelsv+0x4dc>)
 800bb84:	f7fd fd7a 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d019      	beq.n	800bbc2 <_Z14updateChannelsv+0x3a2>
		htim2.Instance->CCR4 = outputState.D3.getDuty() * (htim2.Instance->ARR) / 100.0f;
 800bb8e:	485b      	ldr	r0, [pc, #364]	; (800bcfc <_Z14updateChannelsv+0x4dc>)
 800bb90:	f7fd fd59 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800bb94:	eeb0 7a40 	vmov.f32	s14, s0
 800bb98:	4b59      	ldr	r3, [pc, #356]	; (800bd00 <_Z14updateChannelsv+0x4e0>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbaa:	eddf 6a53 	vldr	s13, [pc, #332]	; 800bcf8 <_Z14updateChannelsv+0x4d8>
 800bbae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbb2:	4b53      	ldr	r3, [pc, #332]	; (800bd00 <_Z14updateChannelsv+0x4e0>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbba:	ee17 2a90 	vmov	r2, s15
 800bbbe:	641a      	str	r2, [r3, #64]	; 0x40
 800bbc0:	e003      	b.n	800bbca <_Z14updateChannelsv+0x3aa>
	} else {
		htim2.Instance->CCR4 = 0;
 800bbc2:	4b4f      	ldr	r3, [pc, #316]	; (800bd00 <_Z14updateChannelsv+0x4e0>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// D4 is TIM3_CH3
	if(outputState.D4.getSwitch()) {
 800bbca:	484e      	ldr	r0, [pc, #312]	; (800bd04 <_Z14updateChannelsv+0x4e4>)
 800bbcc:	f7fd fd56 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d019      	beq.n	800bc0a <_Z14updateChannelsv+0x3ea>
		htim3.Instance->CCR3 = outputState.D4.getDuty() * (htim3.Instance->ARR) / 100.0f;
 800bbd6:	484b      	ldr	r0, [pc, #300]	; (800bd04 <_Z14updateChannelsv+0x4e4>)
 800bbd8:	f7fd fd35 	bl	8009646 <_ZNK16OutputChannelPwm7getDutyEv>
 800bbdc:	eeb0 7a40 	vmov.f32	s14, s0
 800bbe0:	4b49      	ldr	r3, [pc, #292]	; (800bd08 <_Z14updateChannelsv+0x4e8>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	ee07 3a90 	vmov	s15, r3
 800bbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbf2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bcf8 <_Z14updateChannelsv+0x4d8>
 800bbf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbfa:	4b43      	ldr	r3, [pc, #268]	; (800bd08 <_Z14updateChannelsv+0x4e8>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc02:	ee17 2a90 	vmov	r2, s15
 800bc06:	63da      	str	r2, [r3, #60]	; 0x3c
 800bc08:	e003      	b.n	800bc12 <_Z14updateChannelsv+0x3f2>
	} else {
		htim3.Instance->CCR3 = 0;
 800bc0a:	4b3f      	ldr	r3, [pc, #252]	; (800bd08 <_Z14updateChannelsv+0x4e8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// Standard On/Off output
	HAL_GPIO_WritePin(LP4_control_GPIO_Port, LP4_control_Pin, outputState.LPCh4_eboxECUs.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bc12:	483e      	ldr	r0, [pc, #248]	; (800bd0c <_Z14updateChannelsv+0x4ec>)
 800bc14:	f7fd fd32 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <_Z14updateChannelsv+0x402>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <_Z14updateChannelsv+0x404>
 800bc22:	2300      	movs	r3, #0
 800bc24:	461a      	mov	r2, r3
 800bc26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc2a:	4839      	ldr	r0, [pc, #228]	; (800bd10 <_Z14updateChannelsv+0x4f0>)
 800bc2c:	f006 f910 	bl	8011e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LP5_control_GPIO_Port, LP5_control_Pin, outputState.LPCh5_powerElectronics.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bc30:	4838      	ldr	r0, [pc, #224]	; (800bd14 <_Z14updateChannelsv+0x4f4>)
 800bc32:	f7fd fd23 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <_Z14updateChannelsv+0x420>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e000      	b.n	800bc42 <_Z14updateChannelsv+0x422>
 800bc40:	2300      	movs	r3, #0
 800bc42:	461a      	mov	r2, r3
 800bc44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc48:	4833      	ldr	r0, [pc, #204]	; (800bd18 <_Z14updateChannelsv+0x4f8>)
 800bc4a:	f006 f901 	bl	8011e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LP6_control_GPIO_Port, LP6_control_Pin, outputState.LPCh6.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bc4e:	4833      	ldr	r0, [pc, #204]	; (800bd1c <_Z14updateChannelsv+0x4fc>)
 800bc50:	f7fd fd14 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <_Z14updateChannelsv+0x43e>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e000      	b.n	800bc60 <_Z14updateChannelsv+0x440>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	461a      	mov	r2, r3
 800bc62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc66:	482c      	ldr	r0, [pc, #176]	; (800bd18 <_Z14updateChannelsv+0x4f8>)
 800bc68:	f006 f8f2 	bl	8011e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LP7_control_GPIO_Port, LP7_control_Pin, outputState.LPCh7_rearECU.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bc6c:	482c      	ldr	r0, [pc, #176]	; (800bd20 <_Z14updateChannelsv+0x500>)
 800bc6e:	f7fd fd05 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <_Z14updateChannelsv+0x45c>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e000      	b.n	800bc7e <_Z14updateChannelsv+0x45e>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc84:	4827      	ldr	r0, [pc, #156]	; (800bd24 <_Z14updateChannelsv+0x504>)
 800bc86:	f006 f8e3 	bl	8011e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HP3_control_GPIO_Port, HP3_control_Pin, outputState.HPCh3.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bc8a:	4827      	ldr	r0, [pc, #156]	; (800bd28 <_Z14updateChannelsv+0x508>)
 800bc8c:	f7fd fcf6 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <_Z14updateChannelsv+0x47a>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <_Z14updateChannelsv+0x47c>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bca2:	481b      	ldr	r0, [pc, #108]	; (800bd10 <_Z14updateChannelsv+0x4f0>)
 800bca4:	f006 f8d4 	bl	8011e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HP4_control_GPIO_Port, HP4_control_Pin, outputState.HPCh4.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bca8:	4820      	ldr	r0, [pc, #128]	; (800bd2c <_Z14updateChannelsv+0x50c>)
 800bcaa:	f7fd fce7 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <_Z14updateChannelsv+0x498>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e000      	b.n	800bcba <_Z14updateChannelsv+0x49a>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bcc0:	4813      	ldr	r0, [pc, #76]	; (800bd10 <_Z14updateChannelsv+0x4f0>)
 800bcc2:	f006 f8c5 	bl	8011e50 <HAL_GPIO_WritePin>

	// SDC switch
	HAL_GPIO_WritePin(SDC_control_GPIO_Port, SDC_control_Pin, outputState.SDC.getSwitch() ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bcc6:	481a      	ldr	r0, [pc, #104]	; (800bd30 <_Z14updateChannelsv+0x510>)
 800bcc8:	f7fd fcd8 	bl	800967c <_ZNK16OutputChannelPwm9getSwitchEv>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <_Z14updateChannelsv+0x4b6>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e000      	b.n	800bcd8 <_Z14updateChannelsv+0x4b8>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	461a      	mov	r2, r3
 800bcda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bcde:	480c      	ldr	r0, [pc, #48]	; (800bd10 <_Z14updateChannelsv+0x4f0>)
 800bce0:	f006 f8b6 	bl	8011e50 <HAL_GPIO_WritePin>
}
 800bce4:	bf00      	nop
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20002fc0 	.word	0x20002fc0
 800bcec:	20000664 	.word	0x20000664
 800bcf0:	2000067c 	.word	0x2000067c
 800bcf4:	20003008 	.word	0x20003008
 800bcf8:	42c80000 	.word	0x42c80000
 800bcfc:	20000694 	.word	0x20000694
 800bd00:	20002ee8 	.word	0x20002ee8
 800bd04:	200006ac 	.word	0x200006ac
 800bd08:	20002f30 	.word	0x20002f30
 800bd0c:	2000055c 	.word	0x2000055c
 800bd10:	40020000 	.word	0x40020000
 800bd14:	20000574 	.word	0x20000574
 800bd18:	40020800 	.word	0x40020800
 800bd1c:	2000058c 	.word	0x2000058c
 800bd20:	200005a4 	.word	0x200005a4
 800bd24:	40020400 	.word	0x40020400
 800bd28:	20000634 	.word	0x20000634
 800bd2c:	2000064c 	.word	0x2000064c
 800bd30:	200006c4 	.word	0x200006c4

0800bd34 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1Ev>:
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2201      	movs	r2, #1
 800bd42:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800bd46:	f7f4 fc25 	bl	8000594 <_ZN3can11MessageBaseC1Emhb>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <_Z8sendDatav>:

/**
 * Send out CAN messages
 */
void sendData() {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
	// PDU status
	Message<messages::PDU_TX_Status> msgStatus;
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff ffe9 	bl	800bd34 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1Ev>
	msgStatus.set<signals::PDU_TX_Enabled>(pduEnabled);
 800bd62:	4b11      	ldr	r3, [pc, #68]	; (800bda8 <_Z8sendDatav+0x54>)
 800bd64:	781a      	ldrb	r2, [r3, #0]
 800bd66:	463b      	mov	r3, r7
 800bd68:	4611      	mov	r1, r2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f001 ff74 	bl	800dc58 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals14PDU_TX_EnabledEEEvNT_8dataTypeE>
	msgStatus.set<signals::PDU_TX_PEHWEnabled>(outputState.LPCh6.get());
 800bd70:	480e      	ldr	r0, [pc, #56]	; (800bdac <_Z8sendDatav+0x58>)
 800bd72:	f7fd fc77 	bl	8009664 <_ZNK16OutputChannelPwm3getEv>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	463b      	mov	r3, r7
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 ff7f 	bl	800dc82 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals18PDU_TX_PEHWEnabledEEEvNT_8dataTypeE>
	msgStatus.set<signals::PDU_TX_ErrorFlag>(anyErrorPresent());
 800bd84:	f7fd fdc8 	bl	8009918 <_Z15anyErrorPresentv>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	463b      	mov	r3, r7
 800bd8e:	4611      	mov	r1, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f001 ff8b 	bl	800dcac <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals16PDU_TX_ErrorFlagEEEvNT_8dataTypeE>
	msgStatus.send();
 800bd96:	463b      	mov	r3, r7
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f9 fda8 	bl	80058f0 <_ZNK3can11MessageBase4sendEm>
}
 800bda0:	bf00      	nop
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	200004f8 	.word	0x200004f8
 800bdac:	2000058c 	.word	0x2000058c

0800bdb0 <_ZL14pduAppFunctionPv>:

uint32_t lastDataRead = 0;
uint32_t lastStatusSent = 0;

// Main Task of the PDU
static void pduAppFunction(void *pvArguments) {
 800bdb0:	b590      	push	{r4, r7, lr}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
	LED_RGB_Write(0, 0, 0);
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2100      	movs	r1, #0
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7fb fc7f 	bl	80076c0 <LED_RGB_Write>

	// Wait 100ms to be sure that battery voltage was already read at least once by the TaskManager.cpp
	osDelay(pdMS_TO_TICKS(100));
 800bdc2:	2064      	movs	r0, #100	; 0x64
 800bdc4:	f009 fa06 	bl	80151d4 <osDelay>

	adc2.init(50);	// Read each channel 50 times and average
 800bdc8:	2132      	movs	r1, #50	; 0x32
 800bdca:	486b      	ldr	r0, [pc, #428]	; (800bf78 <_ZL14pduAppFunctionPv+0x1c8>)
 800bdcc:	f001 ff84 	bl	800dcd8 <_ZN6AdcDmaILh14EE4initEt>
	osDelay(pdMS_TO_TICKS(25));	// Wait 25ms to ensure that ADC is initialized
 800bdd0:	2019      	movs	r0, #25
 800bdd2:	f009 f9ff 	bl	80151d4 <osDelay>

	// Start timers for PWM generation
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);	// LPCh1
 800bdd6:	2104      	movs	r1, #4
 800bdd8:	4868      	ldr	r0, [pc, #416]	; (800bf7c <_ZL14pduAppFunctionPv+0x1cc>)
 800bdda:	f006 feab 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// LPCh2
 800bdde:	2108      	movs	r1, #8
 800bde0:	4867      	ldr	r0, [pc, #412]	; (800bf80 <_ZL14pduAppFunctionPv+0x1d0>)
 800bde2:	f006 fea7 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// LPCh3
 800bde6:	2100      	movs	r1, #0
 800bde8:	4865      	ldr	r0, [pc, #404]	; (800bf80 <_ZL14pduAppFunctionPv+0x1d0>)
 800bdea:	f006 fea3 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);	// LPCh8
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4864      	ldr	r0, [pc, #400]	; (800bf84 <_ZL14pduAppFunctionPv+0x1d4>)
 800bdf2:	f006 fe9f 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	// LPCh9
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	4863      	ldr	r0, [pc, #396]	; (800bf88 <_ZL14pduAppFunctionPv+0x1d8>)
 800bdfa:	f006 fe9b 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);	// LPCh10
 800bdfe:	2100      	movs	r1, #0
 800be00:	4862      	ldr	r0, [pc, #392]	; (800bf8c <_ZL14pduAppFunctionPv+0x1dc>)
 800be02:	f006 fe97 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);	// HPCh1
 800be06:	210c      	movs	r1, #12
 800be08:	485e      	ldr	r0, [pc, #376]	; (800bf84 <_ZL14pduAppFunctionPv+0x1d4>)
 800be0a:	f006 fe93 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);	// HPCh2
 800be0e:	2104      	movs	r1, #4
 800be10:	485c      	ldr	r0, [pc, #368]	; (800bf84 <_ZL14pduAppFunctionPv+0x1d4>)
 800be12:	f006 fe8f 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// D1
 800be16:	2100      	movs	r1, #0
 800be18:	485d      	ldr	r0, [pc, #372]	; (800bf90 <_ZL14pduAppFunctionPv+0x1e0>)
 800be1a:	f006 fe8b 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// D2
 800be1e:	2100      	movs	r1, #0
 800be20:	485c      	ldr	r0, [pc, #368]	; (800bf94 <_ZL14pduAppFunctionPv+0x1e4>)
 800be22:	f006 fe87 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// D3
 800be26:	210c      	movs	r1, #12
 800be28:	4855      	ldr	r0, [pc, #340]	; (800bf80 <_ZL14pduAppFunctionPv+0x1d0>)
 800be2a:	f006 fe83 	bl	8012b34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// D4
 800be2e:	2108      	movs	r1, #8
 800be30:	4857      	ldr	r0, [pc, #348]	; (800bf90 <_ZL14pduAppFunctionPv+0x1e0>)
 800be32:	f006 fe7f 	bl	8012b34 <HAL_TIM_PWM_Start>

	// Initial read of data
	readAndSendData();
 800be36:	f7fe fe43 	bl	800aac0 <_Z15readAndSendDatav>

	// Reset watchdog
	stateMachineWatchdog.reset();
 800be3a:	4857      	ldr	r0, [pc, #348]	; (800bf98 <_ZL14pduAppFunctionPv+0x1e8>)
 800be3c:	f7fa fe6c 	bl	8006b18 <_ZN8Watchdog5resetEv>

	// Let the state machine know that we finished the ECU setup and are ready for operation
	cz_interface::getInstance()->setStatus(pre_operational);
 800be40:	f7fa fab0 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 800be44:	4603      	mov	r3, r0
 800be46:	217f      	movs	r1, #127	; 0x7f
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fa f975 	bl	8006138 <_ZN12cz_interface9setStatusE9cz_status>

	while (1) {
		// Blink the status LEDs
		blinkStatusLed();
 800be4e:	f7fd fd83 	bl	8009958 <_Z14blinkStatusLedv>

		// Receive control messages
		receiveCanMessages();
 800be52:	f7fd ff33 	bl	8009cbc <_Z18receiveCanMessagesv>

		// Read channel currents, send the CAN messages and update the cooling PWM
		if(xTaskGetTickCount() - lastDataRead >= OD_currentReadInterval_get()) {
 800be56:	f00b fbbb 	bl	80175d0 <xTaskGetTickCount>
 800be5a:	4602      	mov	r2, r0
 800be5c:	4b4f      	ldr	r3, [pc, #316]	; (800bf9c <_ZL14pduAppFunctionPv+0x1ec>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	1ad4      	subs	r4, r2, r3
 800be62:	f7f8 fafb 	bl	800445c <_Z26OD_currentReadInterval_getv>
 800be66:	4603      	mov	r3, r0
 800be68:	429c      	cmp	r4, r3
 800be6a:	bf2c      	ite	cs
 800be6c:	2301      	movcs	r3, #1
 800be6e:	2300      	movcc	r3, #0
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	d006      	beq.n	800be84 <_ZL14pduAppFunctionPv+0xd4>
			lastDataRead = xTaskGetTickCount();
 800be76:	f00b fbab 	bl	80175d0 <xTaskGetTickCount>
 800be7a:	4603      	mov	r3, r0
 800be7c:	4a47      	ldr	r2, [pc, #284]	; (800bf9c <_ZL14pduAppFunctionPv+0x1ec>)
 800be7e:	6013      	str	r3, [r2, #0]

			// Read the current of all channels and send it
			readAndSendData();
 800be80:	f7fe fe1e 	bl	800aac0 <_Z15readAndSendDatav>
		}

		// Error monitoring
		if(pduEnabled == false) {
 800be84:	4b46      	ldr	r3, [pc, #280]	; (800bfa0 <_ZL14pduAppFunctionPv+0x1f0>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <_ZL14pduAppFunctionPv+0xe0>
			batterySafetyChecks();
 800be8c:	f7ff fa64 	bl	800b358 <_Z19batterySafetyChecksv>
		}
		if(pduEnabled == true) {
 800be90:	4b43      	ldr	r3, [pc, #268]	; (800bfa0 <_ZL14pduAppFunctionPv+0x1f0>)
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d104      	bne.n	800bea2 <_ZL14pduAppFunctionPv+0xf2>
			batterySafetyChecks();
 800be98:	f7ff fa5e 	bl	800b358 <_Z19batterySafetyChecksv>
			if(stateMachineWatchdog.isTimedOut()) {
 800be9c:	483e      	ldr	r0, [pc, #248]	; (800bf98 <_ZL14pduAppFunctionPv+0x1e8>)
 800be9e:	f7fa fe48 	bl	8006b32 <_ZN8Watchdog10isTimedOutEv>
				//ERR_watchdogStateMachine_set();
			}
		}

		// If any error is present, shutdown PeHwEnable and SDC and enable red led
		if(anyErrorPresent()) {
 800bea2:	f7fd fd39 	bl	8009918 <_Z15anyErrorPresentv>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00f      	beq.n	800becc <_ZL14pduAppFunctionPv+0x11c>
			outputState.LPCh6.set(false);
 800beac:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800bfa4 <_ZL14pduAppFunctionPv+0x1f4>
 800beb0:	2100      	movs	r1, #0
 800beb2:	483d      	ldr	r0, [pc, #244]	; (800bfa8 <_ZL14pduAppFunctionPv+0x1f8>)
 800beb4:	f7fd fb74 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			outputState.SDC.set(false);
 800beb8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800bfa4 <_ZL14pduAppFunctionPv+0x1f4>
 800bebc:	2100      	movs	r1, #0
 800bebe:	483b      	ldr	r0, [pc, #236]	; (800bfac <_ZL14pduAppFunctionPv+0x1fc>)
 800bec0:	f7fd fb6e 	bl	80095a0 <_ZN16OutputChannelPwm3setEbf>
			LED_Red_Write(255);
 800bec4:	20ff      	movs	r0, #255	; 0xff
 800bec6:	f7fb fc47 	bl	8007758 <LED_Red_Write>
 800beca:	e002      	b.n	800bed2 <_ZL14pduAppFunctionPv+0x122>
		} else {
			LED_Red_Write(0);
 800becc:	2000      	movs	r0, #0
 800bece:	f7fb fc43 	bl	8007758 <LED_Red_Write>
		}

		if(outputState.SDC.get()) {
 800bed2:	4836      	ldr	r0, [pc, #216]	; (800bfac <_ZL14pduAppFunctionPv+0x1fc>)
 800bed4:	f7fd fbc6 	bl	8009664 <_ZNK16OutputChannelPwm3getEv>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <_ZL14pduAppFunctionPv+0x136>
			LED_Orange_Write(255);
 800bede:	20ff      	movs	r0, #255	; 0xff
 800bee0:	f7fb fc26 	bl	8007730 <LED_Orange_Write>
 800bee4:	e002      	b.n	800beec <_ZL14pduAppFunctionPv+0x13c>
		} else {
			LED_Orange_Write(0);
 800bee6:	2000      	movs	r0, #0
 800bee8:	f7fb fc22 	bl	8007730 <LED_Orange_Write>
		}


		// Update channels: on/off and duty cycle
		updateChannels();
 800beec:	f7ff fc98 	bl	800b820 <_Z14updateChannelsv>

		// Send out status message with configured interval or when there is a change in PDU status
		if(xTaskGetTickCount() - lastStatusSent >= OD_statusSendInterval_get() ||
 800bef0:	f00b fb6e 	bl	80175d0 <xTaskGetTickCount>
 800bef4:	4602      	mov	r2, r0
 800bef6:	4b2e      	ldr	r3, [pc, #184]	; (800bfb0 <_ZL14pduAppFunctionPv+0x200>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	1ad4      	subs	r4, r2, r3
 800befc:	f7f8 fae6 	bl	80044cc <_Z25OD_statusSendInterval_getv>
 800bf00:	4603      	mov	r3, r0
				lastPduEnabled != pduEnabled || lastPeHwEnabled != outputState.LPCh6.get() || lastErrorFlag != anyErrorPresent()) {
 800bf02:	429c      	cmp	r4, r3
 800bf04:	d216      	bcs.n	800bf34 <_ZL14pduAppFunctionPv+0x184>
 800bf06:	4b2b      	ldr	r3, [pc, #172]	; (800bfb4 <_ZL14pduAppFunctionPv+0x204>)
 800bf08:	781a      	ldrb	r2, [r3, #0]
 800bf0a:	4b25      	ldr	r3, [pc, #148]	; (800bfa0 <_ZL14pduAppFunctionPv+0x1f0>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
		if(xTaskGetTickCount() - lastStatusSent >= OD_statusSendInterval_get() ||
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d110      	bne.n	800bf34 <_ZL14pduAppFunctionPv+0x184>
				lastPduEnabled != pduEnabled || lastPeHwEnabled != outputState.LPCh6.get() || lastErrorFlag != anyErrorPresent()) {
 800bf12:	4825      	ldr	r0, [pc, #148]	; (800bfa8 <_ZL14pduAppFunctionPv+0x1f8>)
 800bf14:	f7fd fba6 	bl	8009664 <_ZNK16OutputChannelPwm3getEv>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	4b26      	ldr	r3, [pc, #152]	; (800bfb8 <_ZL14pduAppFunctionPv+0x208>)
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d107      	bne.n	800bf34 <_ZL14pduAppFunctionPv+0x184>
 800bf24:	f7fd fcf8 	bl	8009918 <_Z15anyErrorPresentv>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	4b23      	ldr	r3, [pc, #140]	; (800bfbc <_ZL14pduAppFunctionPv+0x20c>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d001      	beq.n	800bf38 <_ZL14pduAppFunctionPv+0x188>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <_ZL14pduAppFunctionPv+0x18a>
 800bf38:	2300      	movs	r3, #0
		if(xTaskGetTickCount() - lastStatusSent >= OD_statusSendInterval_get() ||
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d017      	beq.n	800bf6e <_ZL14pduAppFunctionPv+0x1be>

			lastPduEnabled = pduEnabled;
 800bf3e:	4b18      	ldr	r3, [pc, #96]	; (800bfa0 <_ZL14pduAppFunctionPv+0x1f0>)
 800bf40:	781a      	ldrb	r2, [r3, #0]
 800bf42:	4b1c      	ldr	r3, [pc, #112]	; (800bfb4 <_ZL14pduAppFunctionPv+0x204>)
 800bf44:	701a      	strb	r2, [r3, #0]
			lastPeHwEnabled = outputState.LPCh6.get();
 800bf46:	4818      	ldr	r0, [pc, #96]	; (800bfa8 <_ZL14pduAppFunctionPv+0x1f8>)
 800bf48:	f7fd fb8c 	bl	8009664 <_ZNK16OutputChannelPwm3getEv>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
 800bf50:	4b19      	ldr	r3, [pc, #100]	; (800bfb8 <_ZL14pduAppFunctionPv+0x208>)
 800bf52:	701a      	strb	r2, [r3, #0]
			lastErrorFlag = anyErrorPresent();
 800bf54:	f7fd fce0 	bl	8009918 <_Z15anyErrorPresentv>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	4b17      	ldr	r3, [pc, #92]	; (800bfbc <_ZL14pduAppFunctionPv+0x20c>)
 800bf5e:	701a      	strb	r2, [r3, #0]

			lastStatusSent = xTaskGetTickCount();
 800bf60:	f00b fb36 	bl	80175d0 <xTaskGetTickCount>
 800bf64:	4603      	mov	r3, r0
 800bf66:	4a12      	ldr	r2, [pc, #72]	; (800bfb0 <_ZL14pduAppFunctionPv+0x200>)
 800bf68:	6013      	str	r3, [r2, #0]

			// Send out data to CAN bus
			sendData();
 800bf6a:	f7ff fef3 	bl	800bd54 <_Z8sendDatav>
		}

		// Delay until next check
		osDelay(pdMS_TO_TICKS(5));
 800bf6e:	2005      	movs	r0, #5
 800bf70:	f009 f930 	bl	80151d4 <osDelay>
		blinkStatusLed();
 800bf74:	e76b      	b.n	800be4e <_ZL14pduAppFunctionPv+0x9e>
 800bf76:	bf00      	nop
 800bf78:	200003f4 	.word	0x200003f4
 800bf7c:	20003098 	.word	0x20003098
 800bf80:	20002ee8 	.word	0x20002ee8
 800bf84:	20002fc0 	.word	0x20002fc0
 800bf88:	20002f78 	.word	0x20002f78
 800bf8c:	20003050 	.word	0x20003050
 800bf90:	20002f30 	.word	0x20002f30
 800bf94:	20003008 	.word	0x20003008
 800bf98:	20000504 	.word	0x20000504
 800bf9c:	200006e4 	.word	0x200006e4
 800bfa0:	200004f8 	.word	0x200004f8
 800bfa4:	c2c80000 	.word	0xc2c80000
 800bfa8:	2000058c 	.word	0x2000058c
 800bfac:	200006c4 	.word	0x200006c4
 800bfb0:	200006e8 	.word	0x200006e8
 800bfb4:	200004fa 	.word	0x200004fa
 800bfb8:	200004fb 	.word	0x200004fb
 800bfbc:	200004fc 	.word	0x200004fc

0800bfc0 <_ZL7hsv2rgb3hsv>:
}
*/


rgb hsv2rgb(hsv in)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b095      	sub	sp, #84	; 0x54
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	eef0 6a40 	vmov.f32	s13, s0
 800bfca:	eeb0 7a60 	vmov.f32	s14, s1
 800bfce:	eef0 7a41 	vmov.f32	s15, s2
 800bfd2:	edc7 6a05 	vstr	s13, [r7, #20]
 800bfd6:	ed87 7a06 	vstr	s14, [r7, #24]
 800bfda:	edc7 7a07 	vstr	s15, [r7, #28]
    float      hh, p, q, t, ff;
    long        i;
    rgb         out;

    if(in.s <= 0.0f) {       // < is bogus, just shuts up warnings
 800bfde:	edd7 7a06 	vldr	s15, [r7, #24]
 800bfe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfea:	d80d      	bhi.n	800c008 <_ZL7hsv2rgb3hsv+0x48>
        out.r = in.v;
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	623b      	str	r3, [r7, #32]
        out.g = in.v;
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = in.v;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	62bb      	str	r3, [r7, #40]	; 0x28
        return out;
 800bff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bffc:	f107 0220 	add.w	r2, r7, #32
 800c000:	ca07      	ldmia	r2, {r0, r1, r2}
 800c002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c006:	e098      	b.n	800c13a <_ZL7hsv2rgb3hsv+0x17a>
    }
    hh = in.h;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(hh >= 360.0f) hh = 0.0f;
 800c00c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800c010:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800c164 <_ZL7hsv2rgb3hsv+0x1a4>
 800c014:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01c:	db02      	blt.n	800c024 <_ZL7hsv2rgb3hsv+0x64>
 800c01e:	f04f 0300 	mov.w	r3, #0
 800c022:	64fb      	str	r3, [r7, #76]	; 0x4c
    hh /= 60.0f;
 800c024:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c028:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c168 <_ZL7hsv2rgb3hsv+0x1a8>
 800c02c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c030:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    i = (long)hh;
 800c034:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800c038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c03c:	ee17 3a90 	vmov	r3, s15
 800c040:	64bb      	str	r3, [r7, #72]	; 0x48
    ff = hh - i;
 800c042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c04c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c050:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c054:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    p = in.v * (1.0f - in.s);
 800c058:	ed97 7a07 	vldr	s14, [r7, #28]
 800c05c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c064:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    q = in.v * (1.0f - (in.s * ff));
 800c070:	ed97 7a07 	vldr	s14, [r7, #28]
 800c074:	edd7 6a06 	vldr	s13, [r7, #24]
 800c078:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c07c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c084:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c08c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    t = in.v * (1.0f - (in.s * (1.0f - ff)));
 800c090:	ed97 7a07 	vldr	s14, [r7, #28]
 800c094:	edd7 6a06 	vldr	s13, [r7, #24]
 800c098:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c09c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c0a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c0a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    switch(i) {
 800c0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ba:	2b04      	cmp	r3, #4
 800c0bc:	d82f      	bhi.n	800c11e <_ZL7hsv2rgb3hsv+0x15e>
 800c0be:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <_ZL7hsv2rgb3hsv+0x104>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c0d9 	.word	0x0800c0d9
 800c0c8:	0800c0e7 	.word	0x0800c0e7
 800c0cc:	0800c0f5 	.word	0x0800c0f5
 800c0d0:	0800c103 	.word	0x0800c103
 800c0d4:	0800c111 	.word	0x0800c111
    case 0:
        out.r = in.v;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	623b      	str	r3, [r7, #32]
        out.g = t;
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = p;
 800c0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0e2:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800c0e4:	e022      	b.n	800c12c <_ZL7hsv2rgb3hsv+0x16c>
    case 1:
        out.r = q;
 800c0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e8:	623b      	str	r3, [r7, #32]
        out.g = in.v;
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = p;
 800c0ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800c0f2:	e01b      	b.n	800c12c <_ZL7hsv2rgb3hsv+0x16c>
    case 2:
        out.r = p;
 800c0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0f6:	623b      	str	r3, [r7, #32]
        out.g = in.v;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = t;
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fe:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800c100:	e014      	b.n	800c12c <_ZL7hsv2rgb3hsv+0x16c>

    case 3:
        out.r = p;
 800c102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c104:	623b      	str	r3, [r7, #32]
        out.g = q;
 800c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c108:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = in.v;
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800c10e:	e00d      	b.n	800c12c <_ZL7hsv2rgb3hsv+0x16c>
    case 4:
        out.r = t;
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	623b      	str	r3, [r7, #32]
        out.g = p;
 800c114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = in.v;
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800c11c:	e006      	b.n	800c12c <_ZL7hsv2rgb3hsv+0x16c>
    case 5:
    default:
        out.r = in.v;
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	623b      	str	r3, [r7, #32]
        out.g = p;
 800c122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
        out.b = q;
 800c126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c128:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800c12a:	bf00      	nop
    }
    return out;
 800c12c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c130:	f107 0220 	add.w	r2, r7, #32
 800c134:	ca07      	ldmia	r2, {r0, r1, r2}
 800c136:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800c13a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c140:	ee06 1a90 	vmov	s13, r1
 800c144:	ee07 2a10 	vmov	s14, r2
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eeb0 0a66 	vmov.f32	s0, s13
 800c150:	eef0 0a47 	vmov.f32	s1, s14
 800c154:	eeb0 1a67 	vmov.f32	s2, s15
 800c158:	3754      	adds	r7, #84	; 0x54
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	43b40000 	.word	0x43b40000
 800c168:	42700000 	.word	0x42700000

0800c16c <_Z26stateDisplayUpdateAndDelaym>:
	return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
}

int8_t hvStatusPos = 0;

void stateDisplayUpdateAndDelay(TickType_t delay) {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08e      	sub	sp, #56	; 0x38
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]

	extern MessageBufferHandle_t handlePodStateMessageBuffer;
	RxMessage rxMsgRaw;
	TickType_t delayStart = xTaskGetTickCount();
 800c174:	f00b fa2c 	bl	80175d0 <xTaskGetTickCount>
 800c178:	6378      	str	r0, [r7, #52]	; 0x34
				}
			}
		}

	 */
	leds.update();
 800c17a:	480f      	ldr	r0, [pc, #60]	; (800c1b8 <_Z26stateDisplayUpdateAndDelaym+0x4c>)
 800c17c:	f001 fe06 	bl	800dd8c <_ZN13WS2812BDriverILs211EE6updateEv>

	if(xTaskGetTickCount() - delayStart < delay) {
 800c180:	f00b fa26 	bl	80175d0 <xTaskGetTickCount>
 800c184:	4602      	mov	r2, r0
 800c186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	bf8c      	ite	hi
 800c190:	2301      	movhi	r3, #1
 800c192:	2300      	movls	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <_Z26stateDisplayUpdateAndDelaym+0x44>

		TickType_t remainingTime = delay - (xTaskGetTickCount() - delayStart);
 800c19a:	f00b fa19 	bl	80175d0 <xTaskGetTickCount>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a2:	1a9b      	subs	r3, r3, r2
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	633b      	str	r3, [r7, #48]	; 0x30

		osDelay(remainingTime);
 800c1aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1ac:	f009 f812 	bl	80151d4 <osDelay>
	}

	//while(xTaskGetTickCount() - delayStart < delay);
	//leds.update();

}
 800c1b0:	bf00      	nop
 800c1b2:	3738      	adds	r7, #56	; 0x38
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	200006ec 	.word	0x200006ec

0800c1bc <_Z5snakemmf>:

		stateDisplayUpdateAndDelay(pdMS_TO_TICKS(delayMs));
	}
}

void snake(uint32_t delayMs, uint32_t color, float brightness) {
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int16_t i = 0; i <= leds.RIGHT_LED - 4; i++) {
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	82fb      	strh	r3, [r7, #22]
 800c1ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c1d2:	2b65      	cmp	r3, #101	; 0x65
 800c1d4:	f300 80b4 	bgt.w	800c340 <_Z5snakemmf+0x184>
		leds.set((i), color, brightness);
 800c1d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c1dc:	ed97 0a01 	vldr	s0, [r7, #4]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4858      	ldr	r0, [pc, #352]	; (800c348 <_Z5snakemmf+0x18c>)
 800c1e6:	f001 ff35 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((i + 1), color, brightness / 2.0f);
 800c1ea:	8afb      	ldrh	r3, [r7, #22]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	b21b      	sxth	r3, r3
 800c1f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c1f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c1fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c1fe:	eeb0 0a47 	vmov.f32	s0, s14
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	4619      	mov	r1, r3
 800c206:	4850      	ldr	r0, [pc, #320]	; (800c348 <_Z5snakemmf+0x18c>)
 800c208:	f001 ff24 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((i + 2), color, brightness / 3.0f);
 800c20c:	8afb      	ldrh	r3, [r7, #22]
 800c20e:	3302      	adds	r3, #2
 800c210:	b29b      	uxth	r3, r3
 800c212:	b21b      	sxth	r3, r3
 800c214:	edd7 7a01 	vldr	s15, [r7, #4]
 800c218:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c21c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c220:	eeb0 0a47 	vmov.f32	s0, s14
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	4619      	mov	r1, r3
 800c228:	4847      	ldr	r0, [pc, #284]	; (800c348 <_Z5snakemmf+0x18c>)
 800c22a:	f001 ff13 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((i + 3), color, brightness / 4.0f);
 800c22e:	8afb      	ldrh	r3, [r7, #22]
 800c230:	3303      	adds	r3, #3
 800c232:	b29b      	uxth	r3, r3
 800c234:	b21b      	sxth	r3, r3
 800c236:	edd7 7a01 	vldr	s15, [r7, #4]
 800c23a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c23e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c242:	eeb0 0a47 	vmov.f32	s0, s14
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	4619      	mov	r1, r3
 800c24a:	483f      	ldr	r0, [pc, #252]	; (800c348 <_Z5snakemmf+0x18c>)
 800c24c:	f001 ff02 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((i + 4), color, brightness / 5.0f);
 800c250:	8afb      	ldrh	r3, [r7, #22]
 800c252:	3304      	adds	r3, #4
 800c254:	b29b      	uxth	r3, r3
 800c256:	b21b      	sxth	r3, r3
 800c258:	edd7 7a01 	vldr	s15, [r7, #4]
 800c25c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800c260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c264:	eeb0 0a47 	vmov.f32	s0, s14
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	4619      	mov	r1, r3
 800c26c:	4836      	ldr	r0, [pc, #216]	; (800c348 <_Z5snakemmf+0x18c>)
 800c26e:	f001 fef1 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((-i), color, brightness);
 800c272:	8afb      	ldrh	r3, [r7, #22]
 800c274:	425b      	negs	r3, r3
 800c276:	b29b      	uxth	r3, r3
 800c278:	b21b      	sxth	r3, r3
 800c27a:	ed97 0a01 	vldr	s0, [r7, #4]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	4619      	mov	r1, r3
 800c282:	4831      	ldr	r0, [pc, #196]	; (800c348 <_Z5snakemmf+0x18c>)
 800c284:	f001 fee6 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((-i - 1), color, brightness / 2.0f);
 800c288:	8afb      	ldrh	r3, [r7, #22]
 800c28a:	43db      	mvns	r3, r3
 800c28c:	b21b      	sxth	r3, r3
 800c28e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c292:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c29a:	eeb0 0a47 	vmov.f32	s0, s14
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4829      	ldr	r0, [pc, #164]	; (800c348 <_Z5snakemmf+0x18c>)
 800c2a4:	f001 fed6 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((-i - 2), color, brightness / 3.0f);
 800c2a8:	8afa      	ldrh	r2, [r7, #22]
 800c2aa:	f06f 0301 	mvn.w	r3, #1
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	b21b      	sxth	r3, r3
 800c2b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c2bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c2c0:	eeb0 0a47 	vmov.f32	s0, s14
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	481f      	ldr	r0, [pc, #124]	; (800c348 <_Z5snakemmf+0x18c>)
 800c2ca:	f001 fec3 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((-i - 3), color, brightness / 4.0f);
 800c2ce:	8afa      	ldrh	r2, [r7, #22]
 800c2d0:	f06f 0302 	mvn.w	r3, #2
 800c2d4:	1a9b      	subs	r3, r3, r2
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	b21b      	sxth	r3, r3
 800c2da:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2de:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c2e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c2e6:	eeb0 0a47 	vmov.f32	s0, s14
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4816      	ldr	r0, [pc, #88]	; (800c348 <_Z5snakemmf+0x18c>)
 800c2f0:	f001 feb0 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		leds.set((-i - 4), color, brightness / 5.0f);
 800c2f4:	8afa      	ldrh	r2, [r7, #22]
 800c2f6:	f06f 0303 	mvn.w	r3, #3
 800c2fa:	1a9b      	subs	r3, r3, r2
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	b21b      	sxth	r3, r3
 800c300:	edd7 7a01 	vldr	s15, [r7, #4]
 800c304:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800c308:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c30c:	eeb0 0a47 	vmov.f32	s0, s14
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	4619      	mov	r1, r3
 800c314:	480c      	ldr	r0, [pc, #48]	; (800c348 <_Z5snakemmf+0x18c>)
 800c316:	f001 fe9d 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		stateDisplayUpdateAndDelay(pdMS_TO_TICKS(delayMs));
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c320:	fb02 f303 	mul.w	r3, r2, r3
 800c324:	4a09      	ldr	r2, [pc, #36]	; (800c34c <_Z5snakemmf+0x190>)
 800c326:	fba2 2303 	umull	r2, r3, r2, r3
 800c32a:	099b      	lsrs	r3, r3, #6
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff ff1d 	bl	800c16c <_Z26stateDisplayUpdateAndDelaym>
	for(int16_t i = 0; i <= leds.RIGHT_LED - 4; i++) {
 800c332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c336:	b29b      	uxth	r3, r3
 800c338:	3301      	adds	r3, #1
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	82fb      	strh	r3, [r7, #22]
 800c33e:	e746      	b.n	800c1ce <_Z5snakemmf+0x12>
	}
}
 800c340:	bf00      	nop
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	200006ec 	.word	0x200006ec
 800c34c:	10624dd3 	.word	0x10624dd3

0800c350 <_Z5whipemmmf>:
 * @param delayMs		Delay between updates
 * @param whipeColor	Color for the whipe effect
 * @param outColor		Color after the whipe
 * @param outBrightness	Brightness for the color after the whipe
 */
void whipe(uint32_t delayMs, uint32_t whipeColor, uint32_t outColor, float outBrightness) {
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	ed87 0a00 	vstr	s0, [r7]
	constexpr int16_t WHIPE_WIDTH = 5;
 800c360:	2305      	movs	r3, #5
 800c362:	827b      	strh	r3, [r7, #18]
	for(int16_t i = 0; i <= leds.RIGHT_LED + WHIPE_WIDTH; i++) {
 800c364:	2300      	movs	r3, #0
 800c366:	82fb      	strh	r3, [r7, #22]
 800c368:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c36c:	2b6e      	cmp	r3, #110	; 0x6e
 800c36e:	dc64      	bgt.n	800c43a <_Z5whipemmmf+0xea>
		for(int16_t j = 0; j < WHIPE_WIDTH; j++) {
 800c370:	2300      	movs	r3, #0
 800c372:	82bb      	strh	r3, [r7, #20]
 800c374:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c378:	2b04      	cmp	r3, #4
 800c37a:	dc2c      	bgt.n	800c3d6 <_Z5whipemmmf+0x86>
			if((i-j) >= 0 && (i-j) <= leds.RIGHT_LED) {
 800c37c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c380:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	db1e      	blt.n	800c3c8 <_Z5whipemmmf+0x78>
 800c38a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c38e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	2b69      	cmp	r3, #105	; 0x69
 800c396:	dc17      	bgt.n	800c3c8 <_Z5whipemmmf+0x78>
				leds.set((i-j), whipeColor);
 800c398:	8afa      	ldrh	r2, [r7, #22]
 800c39a:	8abb      	ldrh	r3, [r7, #20]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	b21b      	sxth	r3, r3
 800c3a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4826      	ldr	r0, [pc, #152]	; (800c444 <_Z5whipemmmf+0xf4>)
 800c3ac:	f001 fe52 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
				leds.set(-(i-j), whipeColor);
 800c3b0:	8aba      	ldrh	r2, [r7, #20]
 800c3b2:	8afb      	ldrh	r3, [r7, #22]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	b21b      	sxth	r3, r3
 800c3ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4820      	ldr	r0, [pc, #128]	; (800c444 <_Z5whipemmmf+0xf4>)
 800c3c4:	f001 fe46 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		for(int16_t j = 0; j < WHIPE_WIDTH; j++) {
 800c3c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	82bb      	strh	r3, [r7, #20]
 800c3d4:	e7ce      	b.n	800c374 <_Z5whipemmmf+0x24>
			}
		}
		if((i-WHIPE_WIDTH) >= 0 && (i-WHIPE_WIDTH) <= leds.RIGHT_LED) {
 800c3d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c3da:	2b04      	cmp	r3, #4
 800c3dc:	dd1a      	ble.n	800c414 <_Z5whipemmmf+0xc4>
 800c3de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c3e2:	2b6e      	cmp	r3, #110	; 0x6e
 800c3e4:	dc16      	bgt.n	800c414 <_Z5whipemmmf+0xc4>
			leds.set((i-WHIPE_WIDTH), outColor, outBrightness);
 800c3e6:	8afb      	ldrh	r3, [r7, #22]
 800c3e8:	3b05      	subs	r3, #5
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	b21b      	sxth	r3, r3
 800c3ee:	ed97 0a00 	vldr	s0, [r7]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4813      	ldr	r0, [pc, #76]	; (800c444 <_Z5whipemmmf+0xf4>)
 800c3f8:	f001 fe2c 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
			leds.set(-(i-WHIPE_WIDTH), outColor, outBrightness);
 800c3fc:	8afb      	ldrh	r3, [r7, #22]
 800c3fe:	f1c3 0305 	rsb	r3, r3, #5
 800c402:	b29b      	uxth	r3, r3
 800c404:	b21b      	sxth	r3, r3
 800c406:	ed97 0a00 	vldr	s0, [r7]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	4619      	mov	r1, r3
 800c40e:	480d      	ldr	r0, [pc, #52]	; (800c444 <_Z5whipemmmf+0xf4>)
 800c410:	f001 fe20 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		}

		stateDisplayUpdateAndDelay(pdMS_TO_TICKS(delayMs));
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
 800c41e:	4a0a      	ldr	r2, [pc, #40]	; (800c448 <_Z5whipemmmf+0xf8>)
 800c420:	fba2 2303 	umull	r2, r3, r2, r3
 800c424:	099b      	lsrs	r3, r3, #6
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff fea0 	bl	800c16c <_Z26stateDisplayUpdateAndDelaym>
	for(int16_t i = 0; i <= leds.RIGHT_LED + WHIPE_WIDTH; i++) {
 800c42c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c430:	b29b      	uxth	r3, r3
 800c432:	3301      	adds	r3, #1
 800c434:	b29b      	uxth	r3, r3
 800c436:	82fb      	strh	r3, [r7, #22]
 800c438:	e796      	b.n	800c368 <_Z5whipemmmf+0x18>
	}
}
 800c43a:	bf00      	nop
 800c43c:	3718      	adds	r7, #24
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	200006ec 	.word	0x200006ec
 800c448:	10624dd3 	.word	0x10624dd3

0800c44c <_Z25muZeroGreenPulseAnimationii>:

/**
 * Animation that pulses in mu-zero green
 * @param numberOfCycles Duration
 */
void muZeroGreenPulseAnimation(int numberOfCycles = 800, int speed = 30) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
	int32_t off = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	61fb      	str	r3, [r7, #28]
	int16_t ledCounter = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	837b      	strh	r3, [r7, #26]
	leds.setAll(COLORS::MU_GREEN, 0.4);
 800c45e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800c568 <_Z25muZeroGreenPulseAnimationii+0x11c>
 800c462:	f64f 71dd 	movw	r1, #65501	; 0xffdd
 800c466:	4841      	ldr	r0, [pc, #260]	; (800c56c <_Z25muZeroGreenPulseAnimationii+0x120>)
 800c468:	f001 fcc9 	bl	800ddfe <_ZN13WS2812BDriverILs211EE6setAllEmf>
	for(int cnter = 0; cnter < numberOfCycles; cnter++) {
 800c46c:	2300      	movs	r3, #0
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	429a      	cmp	r2, r3
 800c476:	da73      	bge.n	800c560 <_Z25muZeroGreenPulseAnimationii+0x114>
		off++;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	3301      	adds	r3, #1
 800c47c:	61fb      	str	r3, [r7, #28]
		ledCounter++;
 800c47e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c482:	b29b      	uxth	r3, r3
 800c484:	3301      	adds	r3, #1
 800c486:	b29b      	uxth	r3, r3
 800c488:	837b      	strh	r3, [r7, #26]

		for(int16_t i = 0; i <= leds.RIGHT_LED; i++) {
 800c48a:	2300      	movs	r3, #0
 800c48c:	827b      	strh	r3, [r7, #18]
 800c48e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c492:	2b69      	cmp	r3, #105	; 0x69
 800c494:	dc54      	bgt.n	800c540 <_Z25muZeroGreenPulseAnimationii+0xf4>
			int32_t pos = i - off;
 800c496:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	60fb      	str	r3, [r7, #12]

			if(i + 10 <= off) {
 800c4a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4a4:	3309      	adds	r3, #9
 800c4a6:	69fa      	ldr	r2, [r7, #28]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	dd42      	ble.n	800c532 <_Z25muZeroGreenPulseAnimationii+0xe6>
				float brightness = 0.4f + 0.6f * powf((1.0f + sinf(TWO_PI*pos/70.0f)) / 2.0f, 7.0f);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	ee07 3a90 	vmov	s15, r3
 800c4b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4b6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c570 <_Z25muZeroGreenPulseAnimationii+0x124>
 800c4ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4be:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800c574 <_Z25muZeroGreenPulseAnimationii+0x128>
 800c4c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c4c6:	eeb0 0a47 	vmov.f32	s0, s14
 800c4ca:	f00d f831 	bl	8019530 <sinf>
 800c4ce:	eef0 7a40 	vmov.f32	s15, s0
 800c4d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c4de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c4e2:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800c4e6:	eeb0 0a47 	vmov.f32	s0, s14
 800c4ea:	f00d f8b5 	bl	8019658 <powf>
 800c4ee:	eef0 7a40 	vmov.f32	s15, s0
 800c4f2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c578 <_Z25muZeroGreenPulseAnimationii+0x12c>
 800c4f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800c568 <_Z25muZeroGreenPulseAnimationii+0x11c>
 800c4fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c502:	edc7 7a02 	vstr	s15, [r7, #8]
				leds.set(i, COLORS::MU_GREEN, brightness);
 800c506:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c50a:	ed97 0a02 	vldr	s0, [r7, #8]
 800c50e:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c512:	4619      	mov	r1, r3
 800c514:	4815      	ldr	r0, [pc, #84]	; (800c56c <_Z25muZeroGreenPulseAnimationii+0x120>)
 800c516:	f001 fd9d 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
				leds.set(-i, COLORS::MU_GREEN, brightness);
 800c51a:	8a7b      	ldrh	r3, [r7, #18]
 800c51c:	425b      	negs	r3, r3
 800c51e:	b29b      	uxth	r3, r3
 800c520:	b21b      	sxth	r3, r3
 800c522:	ed97 0a02 	vldr	s0, [r7, #8]
 800c526:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c52a:	4619      	mov	r1, r3
 800c52c:	480f      	ldr	r0, [pc, #60]	; (800c56c <_Z25muZeroGreenPulseAnimationii+0x120>)
 800c52e:	f001 fd91 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
		for(int16_t i = 0; i <= leds.RIGHT_LED; i++) {
 800c532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c536:	b29b      	uxth	r3, r3
 800c538:	3301      	adds	r3, #1
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	827b      	strh	r3, [r7, #18]
 800c53e:	e7a6      	b.n	800c48e <_Z25muZeroGreenPulseAnimationii+0x42>
			}
		}

		stateDisplayUpdateAndDelay(pdMS_TO_TICKS(speed));
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c546:	fb02 f303 	mul.w	r3, r2, r3
 800c54a:	4a0c      	ldr	r2, [pc, #48]	; (800c57c <_Z25muZeroGreenPulseAnimationii+0x130>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	099b      	lsrs	r3, r3, #6
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff fe0a 	bl	800c16c <_Z26stateDisplayUpdateAndDelaym>
	for(int cnter = 0; cnter < numberOfCycles; cnter++) {
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	3301      	adds	r3, #1
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	e787      	b.n	800c470 <_Z25muZeroGreenPulseAnimationii+0x24>
	}
}
 800c560:	bf00      	nop
 800c562:	3720      	adds	r7, #32
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	3ecccccd 	.word	0x3ecccccd
 800c56c:	200006ec 	.word	0x200006ec
 800c570:	40c90fdb 	.word	0x40c90fdb
 800c574:	428c0000 	.word	0x428c0000
 800c578:	3f19999a 	.word	0x3f19999a
 800c57c:	10624dd3 	.word	0x10624dd3

0800c580 <_Z16rainbowAnimationi>:

/**
 * Rainbow animation travelling backwards
 * @param numberOfCycles Duration
 */
void rainbowAnimation(int numberOfCycles = 400) {
 800c580:	b580      	push	{r7, lr}
 800c582:	b08e      	sub	sp, #56	; 0x38
 800c584:	af02      	add	r7, sp, #8
 800c586:	6078      	str	r0, [r7, #4]
	float h = 0.0f;
 800c588:	f04f 0300 	mov.w	r3, #0
 800c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
	hsv myHsv;
	myHsv.s = 1.0f;
 800c58e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c592:	61bb      	str	r3, [r7, #24]
	myHsv.v = 1.0f;
 800c594:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c598:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int cnter = 0; cnter < numberOfCycles; cnter++) {
 800c59e:	2300      	movs	r3, #0
 800c5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	f280 80b1 	bge.w	800c70e <_Z16rainbowAnimationi+0x18e>
		h -= 5.0f;
 800c5ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c5b0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800c5b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		if(h < 0.0f) {
 800c5bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c5c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c8:	d507      	bpl.n	800c5da <_Z16rainbowAnimationi+0x5a>
			h += 360;
 800c5ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c5ce:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800c718 <_Z16rainbowAnimationi+0x198>
 800c5d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		}
		for(int16_t i = 0; i <= leds.RIGHT_LED; i++) {
 800c5da:	2300      	movs	r3, #0
 800c5dc:	847b      	strh	r3, [r7, #34]	; 0x22
 800c5de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5e2:	2b69      	cmp	r3, #105	; 0x69
 800c5e4:	f300 8089 	bgt.w	800c6fa <_Z16rainbowAnimationi+0x17a>
			myHsv.h = fmodf(h + 2 * i, 360.0f);
 800c5e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5fe:	eddf 0a46 	vldr	s1, [pc, #280]	; 800c718 <_Z16rainbowAnimationi+0x198>
 800c602:	eeb0 0a67 	vmov.f32	s0, s15
 800c606:	f00c ffd9 	bl	80195bc <fmodf>
 800c60a:	eef0 7a40 	vmov.f32	s15, s0
 800c60e:	edc7 7a05 	vstr	s15, [r7, #20]
			rgb myRgb = hsv2rgb(myHsv);
 800c612:	edd7 6a05 	vldr	s13, [r7, #20]
 800c616:	ed97 7a06 	vldr	s14, [r7, #24]
 800c61a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c61e:	eeb0 0a66 	vmov.f32	s0, s13
 800c622:	eef0 0a47 	vmov.f32	s1, s14
 800c626:	eeb0 1a67 	vmov.f32	s2, s15
 800c62a:	f7ff fcc9 	bl	800bfc0 <_ZL7hsv2rgb3hsv>
 800c62e:	eef0 6a40 	vmov.f32	s13, s0
 800c632:	eeb0 7a60 	vmov.f32	s14, s1
 800c636:	eef0 7a41 	vmov.f32	s15, s2
 800c63a:	edc7 6a02 	vstr	s13, [r7, #8]
 800c63e:	ed87 7a03 	vstr	s14, [r7, #12]
 800c642:	edc7 7a04 	vstr	s15, [r7, #16]
			if(i <= counter) {
 800c646:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c64c:	429a      	cmp	r2, r3
 800c64e:	db4d      	blt.n	800c6ec <_Z16rainbowAnimationi+0x16c>
				leds.set(i, myRgb.r * 255, myRgb.g * 255, myRgb.b * 255);
 800c650:	edd7 7a02 	vldr	s15, [r7, #8]
 800c654:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c71c <_Z16rainbowAnimationi+0x19c>
 800c658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c65c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800c660:	edd7 7a03 	vldr	s15, [r7, #12]
 800c664:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800c71c <_Z16rainbowAnimationi+0x19c>
 800c668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c66c:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800c670:	edd7 7a04 	vldr	s15, [r7, #16]
 800c674:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c71c <_Z16rainbowAnimationi+0x19c>
 800c678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c67c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c680:	ee17 3a90 	vmov	r3, s15
 800c684:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c68e:	ee16 3a10 	vmov	r3, s12
 800c692:	ee16 2a90 	vmov	r2, s13
 800c696:	4822      	ldr	r0, [pc, #136]	; (800c720 <_Z16rainbowAnimationi+0x1a0>)
 800c698:	f001 fbd4 	bl	800de44 <_ZN13WS2812BDriverILs211EE3setEsmmmf>
				leds.set(-i, myRgb.r * 255, myRgb.g * 255, myRgb.b * 255);
 800c69c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c69e:	425b      	negs	r3, r3
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	b219      	sxth	r1, r3
 800c6a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6a8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c71c <_Z16rainbowAnimationi+0x19c>
 800c6ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6b0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800c6b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c6b8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c71c <_Z16rainbowAnimationi+0x19c>
 800c6bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6c0:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800c6c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800c6c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800c71c <_Z16rainbowAnimationi+0x19c>
 800c6cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d4:	ee17 3a90 	vmov	r3, s15
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c6de:	ee16 3a10 	vmov	r3, s12
 800c6e2:	ee16 2a90 	vmov	r2, s13
 800c6e6:	480e      	ldr	r0, [pc, #56]	; (800c720 <_Z16rainbowAnimationi+0x1a0>)
 800c6e8:	f001 fbac 	bl	800de44 <_ZN13WS2812BDriverILs211EE3setEsmmmf>
		for(int16_t i = 0; i <= leds.RIGHT_LED; i++) {
 800c6ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c6f8:	e771      	b.n	800c5de <_Z16rainbowAnimationi+0x5e>
			}
		}
		counter++;
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	62bb      	str	r3, [r7, #40]	; 0x28
		stateDisplayUpdateAndDelay(pdMS_TO_TICKS(20));
 800c700:	2014      	movs	r0, #20
 800c702:	f7ff fd33 	bl	800c16c <_Z26stateDisplayUpdateAndDelaym>
	for(int cnter = 0; cnter < numberOfCycles; cnter++) {
 800c706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c708:	3301      	adds	r3, #1
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
 800c70c:	e749      	b.n	800c5a2 <_Z16rainbowAnimationi+0x22>
	}
}
 800c70e:	bf00      	nop
 800c710:	3730      	adds	r7, #48	; 0x30
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	43b40000 	.word	0x43b40000
 800c71c:	437f0000 	.word	0x437f0000
 800c720:	200006ec 	.word	0x200006ec

0800c724 <_ZL17projectXXFunctionPv>:

/**
 * Main task for Project XX
 * @param pvParams unused
 */
static void projectXXFunction(void* pvParams) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
	osDelay(100);
 800c72c:	2064      	movs	r0, #100	; 0x64
 800c72e:	f008 fd51 	bl	80151d4 <osDelay>

	// Make sure that while DCDC powers up, all LEDs are black
	for(int i = 0; i < 20; i++) {
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2b13      	cmp	r3, #19
 800c73a:	dc0f      	bgt.n	800c75c <_ZL17projectXXFunctionPv+0x38>
		leds.setAll(COLORS::BLACK);
 800c73c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c740:	2100      	movs	r1, #0
 800c742:	4837      	ldr	r0, [pc, #220]	; (800c820 <_ZL17projectXXFunctionPv+0xfc>)
 800c744:	f001 fb5b 	bl	800ddfe <_ZN13WS2812BDriverILs211EE6setAllEmf>
		leds.update();
 800c748:	4835      	ldr	r0, [pc, #212]	; (800c820 <_ZL17projectXXFunctionPv+0xfc>)
 800c74a:	f001 fb1f 	bl	800dd8c <_ZN13WS2812BDriverILs211EE6updateEv>
		osDelay(pdMS_TO_TICKS(50));
 800c74e:	2032      	movs	r0, #50	; 0x32
 800c750:	f008 fd40 	bl	80151d4 <osDelay>
	for(int i = 0; i < 20; i++) {
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3301      	adds	r3, #1
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	e7ec      	b.n	800c736 <_ZL17projectXXFunctionPv+0x12>
	}

	// Start up animation
	leds.setAll(COLORS::BLACK);
 800c75c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c760:	2100      	movs	r1, #0
 800c762:	482f      	ldr	r0, [pc, #188]	; (800c820 <_ZL17projectXXFunctionPv+0xfc>)
 800c764:	f001 fb4b 	bl	800ddfe <_ZN13WS2812BDriverILs211EE6setAllEmf>
	snake(35, COLORS::MU_GREEN, 0.3f);
 800c768:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800c824 <_ZL17projectXXFunctionPv+0x100>
 800c76c:	f64f 71dd 	movw	r1, #65501	; 0xffdd
 800c770:	2023      	movs	r0, #35	; 0x23
 800c772:	f7ff fd23 	bl	800c1bc <_Z5snakemmf>
		//muZeroGreenPulseAnimation(300, 20);

	while(1) {
		//leds.setAll(COLORS::WHITE, 1.0f);

		whipe(10, COLORS::MU_RED, COLORS::MU_GREEN, 0.2f);
 800c776:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800c828 <_ZL17projectXXFunctionPv+0x104>
 800c77a:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c77e:	492b      	ldr	r1, [pc, #172]	; (800c82c <_ZL17projectXXFunctionPv+0x108>)
 800c780:	200a      	movs	r0, #10
 800c782:	f7ff fde5 	bl	800c350 <_Z5whipemmmf>
		whipe(10, COLORS::MU_RED, COLORS::MU_PINK, 0.9f);
 800c786:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800c830 <_ZL17projectXXFunctionPv+0x10c>
 800c78a:	4a2a      	ldr	r2, [pc, #168]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c78c:	4927      	ldr	r1, [pc, #156]	; (800c82c <_ZL17projectXXFunctionPv+0x108>)
 800c78e:	200a      	movs	r0, #10
 800c790:	f7ff fdde 	bl	800c350 <_Z5whipemmmf>
		whipe(10, COLORS::MU_RED, COLORS::MU_GREEN, 0.2f);
 800c794:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800c828 <_ZL17projectXXFunctionPv+0x104>
 800c798:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c79c:	4923      	ldr	r1, [pc, #140]	; (800c82c <_ZL17projectXXFunctionPv+0x108>)
 800c79e:	200a      	movs	r0, #10
 800c7a0:	f7ff fdd6 	bl	800c350 <_Z5whipemmmf>
		muZeroGreenPulseAnimation(800, 20);
 800c7a4:	2114      	movs	r1, #20
 800c7a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c7aa:	f7ff fe4f 	bl	800c44c <_Z25muZeroGreenPulseAnimationii>

		whipe(10, COLORS::MU_PINK, COLORS::MU_GREEN, 0.2f);
 800c7ae:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800c828 <_ZL17projectXXFunctionPv+0x104>
 800c7b2:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c7b6:	491f      	ldr	r1, [pc, #124]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7b8:	200a      	movs	r0, #10
 800c7ba:	f7ff fdc9 	bl	800c350 <_Z5whipemmmf>
		whipe(10, COLORS::MU_PINK, COLORS::MU_PINK, 0.9f);
 800c7be:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800c830 <_ZL17projectXXFunctionPv+0x10c>
 800c7c2:	4a1c      	ldr	r2, [pc, #112]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7c4:	491b      	ldr	r1, [pc, #108]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7c6:	200a      	movs	r0, #10
 800c7c8:	f7ff fdc2 	bl	800c350 <_Z5whipemmmf>
		whipe(10, COLORS::MU_PINK, COLORS::MU_GREEN, 0.2f);
 800c7cc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800c828 <_ZL17projectXXFunctionPv+0x104>
 800c7d0:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c7d4:	4917      	ldr	r1, [pc, #92]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7d6:	200a      	movs	r0, #10
 800c7d8:	f7ff fdba 	bl	800c350 <_Z5whipemmmf>
		muZeroGreenPulseAnimation(800, 20);
 800c7dc:	2114      	movs	r1, #20
 800c7de:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c7e2:	f7ff fe33 	bl	800c44c <_Z25muZeroGreenPulseAnimationii>

		whipe(10, COLORS::MU_PINK, COLORS::MU_GREEN, 0.2f);
 800c7e6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c828 <_ZL17projectXXFunctionPv+0x104>
 800c7ea:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c7ee:	4911      	ldr	r1, [pc, #68]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7f0:	200a      	movs	r0, #10
 800c7f2:	f7ff fdad 	bl	800c350 <_Z5whipemmmf>
		whipe(10, COLORS::MU_PINK, COLORS::MU_PINK, 0.9f);
 800c7f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c830 <_ZL17projectXXFunctionPv+0x10c>
 800c7fa:	4a0e      	ldr	r2, [pc, #56]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7fc:	490d      	ldr	r1, [pc, #52]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c7fe:	200a      	movs	r0, #10
 800c800:	f7ff fda6 	bl	800c350 <_Z5whipemmmf>
		whipe(10, COLORS::MU_PINK, COLORS::MU_GREEN, 0.2f);
 800c804:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c828 <_ZL17projectXXFunctionPv+0x104>
 800c808:	f64f 72dd 	movw	r2, #65501	; 0xffdd
 800c80c:	4909      	ldr	r1, [pc, #36]	; (800c834 <_ZL17projectXXFunctionPv+0x110>)
 800c80e:	200a      	movs	r0, #10
 800c810:	f7ff fd9e 	bl	800c350 <_Z5whipemmmf>
		rainbowAnimation();
 800c814:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c818:	f7ff feb2 	bl	800c580 <_Z16rainbowAnimationi>
		whipe(10, COLORS::MU_RED, COLORS::MU_GREEN, 0.2f);
 800c81c:	e7ab      	b.n	800c776 <_ZL17projectXXFunctionPv+0x52>
 800c81e:	bf00      	nop
 800c820:	200006ec 	.word	0x200006ec
 800c824:	3e99999a 	.word	0x3e99999a
 800c828:	3e4ccccd 	.word	0x3e4ccccd
 800c82c:	00ff0022 	.word	0x00ff0022
 800c830:	3f666666 	.word	0x3f666666
 800c834:	00fc46aa 	.word	0x00fc46aa

0800c838 <HAL_CAN_TxMailbox0CompleteCallback>:
#include "ProjectXX.hpp"


void SystemClock_Config(void);
//TODO: callbacks in a separate file?
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
	LED_RGB_Write(100, 0, 0);
 800c840:	2200      	movs	r2, #0
 800c842:	2100      	movs	r1, #0
 800c844:	2064      	movs	r0, #100	; 0x64
 800c846:	f7fa ff3b 	bl	80076c0 <LED_RGB_Write>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <_ZL17VectorBase_Configv>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan);

//Necessary to map the vector table correctly
static void VectorBase_Config(void)
{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
	 * c-startup code.
	 */
	extern const unsigned long g_pfnVectors[];

	/* Remap the vector table to where the vector table is located for this program. */
	SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 800c858:	4b03      	ldr	r3, [pc, #12]	; (800c868 <_ZL17VectorBase_Configv+0x14>)
 800c85a:	4a04      	ldr	r2, [pc, #16]	; (800c86c <_ZL17VectorBase_Configv+0x18>)
 800c85c:	609a      	str	r2, [r3, #8]
}
 800c85e:	bf00      	nop
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	e000ed00 	.word	0xe000ed00
 800c86c:	08000000 	.word	0x08000000

0800c870 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main() {
 800c870:	b580      	push	{r7, lr}
 800c872:	b0da      	sub	sp, #360	; 0x168
 800c874:	af00      	add	r7, sp, #0
	//disable interrupts during init
	taskENTER_CRITICAL();
 800c876:	f00c fafd 	bl	8018e74 <vPortEnterCritical>

	VectorBase_Config();
 800c87a:	f7ff ffeb 	bl	800c854 <_ZL17VectorBase_Configv>
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c87e:	f002 fef7 	bl	800f670 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 800c882:	f000 f919 	bl	800cab8 <_Z18SystemClock_Configv>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c886:	f7fa fe53 	bl	8007530 <MX_GPIO_Init>
	MX_DMA_Init();
 800c88a:	f7fa fde9 	bl	8007460 <MX_DMA_Init>
	MX_ADC1_Init();
 800c88e:	f7fa f9e7 	bl	8006c60 <MX_ADC1_Init>
	MX_ADC2_Init();
 800c892:	f7fa fa67 	bl	8006d64 <MX_ADC2_Init>
	MX_CAN1_Init();
 800c896:	f7fa fc81 	bl	800719c <MX_CAN1_Init>
	MX_CAN2_Init();
 800c89a:	f7fa fcb5 	bl	8007208 <MX_CAN2_Init>
	MX_CRC_Init();
 800c89e:	f7fa fda9 	bl	80073f4 <MX_CRC_Init>
	MX_RNG_Init();
 800c8a2:	f001 fdd1 	bl	800e448 <MX_RNG_Init>
	MX_USART2_UART_Init();
 800c8a6:	f002 fdd9 	bl	800f45c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800c8aa:	f002 f82d 	bl	800e908 <MX_TIM2_Init>
	MX_TIM3_Init();
 800c8ae:	f002 f8b7 	bl	800ea20 <MX_TIM3_Init>
	MX_TIM4_Init();
 800c8b2:	f002 f935 	bl	800eb20 <MX_TIM4_Init>
	MX_TIM8_Init();
 800c8b6:	f002 f9bf 	bl	800ec38 <MX_TIM8_Init>
	MX_TIM10_Init();
 800c8ba:	f002 fa75 	bl	800eda8 <MX_TIM10_Init>
	MX_TIM11_Init();
 800c8be:	f002 fac1 	bl	800ee44 <MX_TIM11_Init>
	MX_TIM12_Init();
 800c8c2:	f002 fb0d 	bl	800eee0 <MX_TIM12_Init>
#ifdef RELEASE
	MX_IWDG_Init();
#endif
	LED_RGB_Init();
 800c8c6:	f7fa fee9 	bl	800769c <LED_RGB_Init>



	//create the Applications that will run
	Application canreceiveApp;
 800c8ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fa f94a 	bl	8006b68 <_ZN11ApplicationC1Ev>
	Application cansendApp;
 800c8d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fa f945 	bl	8006b68 <_ZN11ApplicationC1Ev>
	Application emergencyApp;
 800c8de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fa f940 	bl	8006b68 <_ZN11ApplicationC1Ev>
	Application hbsendApp;
 800c8e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fa f93b 	bl	8006b68 <_ZN11ApplicationC1Ev>
	Application hbconsumeApp;
 800c8f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fa f936 	bl	8006b68 <_ZN11ApplicationC1Ev>
	Application runtimeStats;
 800c8fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c900:	4618      	mov	r0, r3
 800c902:	f7fa f931 	bl	8006b68 <_ZN11ApplicationC1Ev>
	Application sendOdEntriesApp;
 800c906:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fa f92c 	bl	8006b68 <_ZN11ApplicationC1Ev>
#ifdef RELEASE
	Application watchdog;
#endif

	/* Init scheduler */
	osKernelInitialize();
 800c910:	f008 fb5a 	bl	8014fc8 <osKernelInitialize>
#ifdef DEBUG
	LED_RGB_Write(100, 0, 100);
 800c914:	2264      	movs	r2, #100	; 0x64
 800c916:	2100      	movs	r1, #0
 800c918:	2064      	movs	r0, #100	; 0x64
 800c91a:	f7fa fed1 	bl	80076c0 <LED_RGB_Write>
#endif


	//creating the Taks
	canreceiveApp.setPriority(osPriorityNormal1);
 800c91e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c922:	2119      	movs	r1, #25
 800c924:	4618      	mov	r0, r3
 800c926:	f7fa f983 	bl	8006c30 <_ZN11Application11setPriorityE12osPriority_t>
	canReceiveTaskHandle = canreceiveApp.create("receiveTask",
			cz_interface::getInstance()->cz_receive, NULL);
 800c92a:	f7f9 fd3b 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
	canReceiveTaskHandle = canreceiveApp.create("receiveTask",
 800c92e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c932:	2300      	movs	r3, #0
 800c934:	4a47      	ldr	r2, [pc, #284]	; (800ca54 <main+0x1e4>)
 800c936:	4948      	ldr	r1, [pc, #288]	; (800ca58 <main+0x1e8>)
 800c938:	f7fa f93a 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c93c:	4603      	mov	r3, r0
 800c93e:	4a47      	ldr	r2, [pc, #284]	; (800ca5c <main+0x1ec>)
 800c940:	6013      	str	r3, [r2, #0]
	canSendTaskHandle = cansendApp.create("canSend", cz_interface::getInstance()->cz_send, NULL );
 800c942:	f7f9 fd2f 	bl	80063a4 <_ZN12cz_interface11getInstanceEv>
 800c946:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800c94a:	2300      	movs	r3, #0
 800c94c:	4a44      	ldr	r2, [pc, #272]	; (800ca60 <main+0x1f0>)
 800c94e:	4945      	ldr	r1, [pc, #276]	; (800ca64 <main+0x1f4>)
 800c950:	f7fa f92e 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c954:	4603      	mov	r3, r0
 800c956:	4a44      	ldr	r2, [pc, #272]	; (800ca68 <main+0x1f8>)
 800c958:	6013      	str	r3, [r2, #0]

	emergencyTaskHandle = emergencyApp.create("emergency",
			Emergency::getEmergencyInstance()->waitForEmergency, NULL);
 800c95a:	f7f9 f879 	bl	8005a50 <_ZN9Emergency20getEmergencyInstanceEv>
	emergencyTaskHandle = emergencyApp.create("emergency",
 800c95e:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800c962:	2300      	movs	r3, #0
 800c964:	4a41      	ldr	r2, [pc, #260]	; (800ca6c <main+0x1fc>)
 800c966:	4942      	ldr	r1, [pc, #264]	; (800ca70 <main+0x200>)
 800c968:	f7fa f922 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c96c:	4603      	mov	r3, r0
 800c96e:	4a41      	ldr	r2, [pc, #260]	; (800ca74 <main+0x204>)
 800c970:	6013      	str	r3, [r2, #0]

	emergencyApp.setPriority(osPriorityAboveNormal);
 800c972:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c976:	2120      	movs	r1, #32
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fa f959 	bl	8006c30 <_ZN11Application11setPriorityE12osPriority_t>

	hbsendApp.setPriority(osPriorityNormal);
 800c97e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800c982:	2118      	movs	r1, #24
 800c984:	4618      	mov	r0, r3
 800c986:	f7fa f953 	bl	8006c30 <_ZN11Application11setPriorityE12osPriority_t>
	heartbeatProduceHandle = hbsendApp.create("heartbeat",
			Heartbeat::getHeartbeatInstance()->sendHeartbeat, NULL);
 800c98a:	f7f9 f935 	bl	8005bf8 <_ZN9Heartbeat20getHeartbeatInstanceEv>
	heartbeatProduceHandle = hbsendApp.create("heartbeat",
 800c98e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800c992:	2300      	movs	r3, #0
 800c994:	4a38      	ldr	r2, [pc, #224]	; (800ca78 <main+0x208>)
 800c996:	4939      	ldr	r1, [pc, #228]	; (800ca7c <main+0x20c>)
 800c998:	f7fa f90a 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c99c:	4603      	mov	r3, r0
 800c99e:	4a38      	ldr	r2, [pc, #224]	; (800ca80 <main+0x210>)
 800c9a0:	6013      	str	r3, [r2, #0]
	heartbeatConsumeTaskHandle = hbconsumeApp.create("hearbeatConsume",
			Heartbeat::getHeartbeatInstance()->consumeHeartbeat, NULL);
 800c9a2:	f7f9 f929 	bl	8005bf8 <_ZN9Heartbeat20getHeartbeatInstanceEv>
	heartbeatConsumeTaskHandle = hbconsumeApp.create("hearbeatConsume",
 800c9a6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4a35      	ldr	r2, [pc, #212]	; (800ca84 <main+0x214>)
 800c9ae:	4936      	ldr	r1, [pc, #216]	; (800ca88 <main+0x218>)
 800c9b0:	f7fa f8fe 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	4a35      	ldr	r2, [pc, #212]	; (800ca8c <main+0x21c>)
 800c9b8:	6013      	str	r3, [r2, #0]
	runtimeStats.setPriority(osPriorityBelowNormal7);
 800c9ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c9be:	2117      	movs	r1, #23
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fa f935 	bl	8006c30 <_ZN11Application11setPriorityE12osPriority_t>
	runtimeStatsHandle = (TaskHandle_t) runtimeStats.create("statsUpdate", stats::updateSensorStats, NULL);
 800c9c6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	4a30      	ldr	r2, [pc, #192]	; (800ca90 <main+0x220>)
 800c9ce:	4931      	ldr	r1, [pc, #196]	; (800ca94 <main+0x224>)
 800c9d0:	f7fa f8ee 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	4a30      	ldr	r2, [pc, #192]	; (800ca98 <main+0x228>)
 800c9d8:	6013      	str	r3, [r2, #0]
	sendOdEntriesApp.setPriority(osPriorityBelowNormal7);
 800c9da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c9de:	2117      	movs	r1, #23
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fa f925 	bl	8006c30 <_ZN11Application11setPriorityE12osPriority_t>
	sendOdEntriesTaskHandle = sendOdEntriesApp.create("sendOdEntries", sendOdEntriesTask, NULL);
 800c9e6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4a2b      	ldr	r2, [pc, #172]	; (800ca9c <main+0x22c>)
 800c9ee:	492c      	ldr	r1, [pc, #176]	; (800caa0 <main+0x230>)
 800c9f0:	f7fa f8de 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	4a2b      	ldr	r2, [pc, #172]	; (800caa4 <main+0x234>)
 800c9f8:	6013      	str	r3, [r2, #0]
#ifdef RELEASE
	watchdog.setPriority(osPriorityHigh1);
	watchdog.create("watchdog", wdTask, NULL);
#endif

	Application pduApp;
 800c9fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fa f8b2 	bl	8006b68 <_ZN11ApplicationC1Ev>
	pduApp.setStackSize(2 * 256 * 4);	// Needed, otherwise hardfault occurs sometimes!!
 800ca04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fa f901 	bl	8006c14 <_ZN11Application12setStackSizeEi>
	pduApp.create("pduApp", pduAppFunction, NULL);
 800ca12:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ca16:	2300      	movs	r3, #0
 800ca18:	4a23      	ldr	r2, [pc, #140]	; (800caa8 <main+0x238>)
 800ca1a:	4924      	ldr	r1, [pc, #144]	; (800caac <main+0x23c>)
 800ca1c:	f7fa f8c8 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>

	Application projectXXApp;
 800ca20:	463b      	mov	r3, r7
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fa f8a0 	bl	8006b68 <_ZN11ApplicationC1Ev>
	projectXXApp.setStackSize(2 * 256 * 4);
 800ca28:	463b      	mov	r3, r7
 800ca2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fa f8f0 	bl	8006c14 <_ZN11Application12setStackSizeEi>
	projectXXApp.create("projectXXApp", projectXXFunction, NULL);
 800ca34:	4638      	mov	r0, r7
 800ca36:	2300      	movs	r3, #0
 800ca38:	4a1d      	ldr	r2, [pc, #116]	; (800cab0 <main+0x240>)
 800ca3a:	491e      	ldr	r1, [pc, #120]	; (800cab4 <main+0x244>)
 800ca3c:	f7fa f8b8 	bl	8006bb0 <_ZN11Application6createEPKcPFvPvES2_>

	//create stats the first time
	stats::estimateCPUusage();
 800ca40:	f7f9 fe26 	bl	8006690 <_ZN5stats16estimateCPUusageEv>
	stats::estimateFreeMemory();
 800ca44:	f7f9 fe1a 	bl	800667c <_ZN5stats18estimateFreeMemoryEv>
	//enable the interrupts again
	taskEXIT_CRITICAL();
 800ca48:	f00c fa44 	bl	8018ed4 <vPortExitCritical>
	/* Start scheduler */
	osKernelStart();
 800ca4c:	f008 fae0 	bl	8015010 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
 800ca50:	e7fe      	b.n	800ca50 <main+0x1e0>
 800ca52:	bf00      	nop
 800ca54:	080062ed 	.word	0x080062ed
 800ca58:	0801bf14 	.word	0x0801bf14
 800ca5c:	200003c0 	.word	0x200003c0
 800ca60:	08006171 	.word	0x08006171
 800ca64:	0801bf20 	.word	0x0801bf20
 800ca68:	200003c4 	.word	0x200003c4
 800ca6c:	080059a1 	.word	0x080059a1
 800ca70:	0801bf28 	.word	0x0801bf28
 800ca74:	200003bc 	.word	0x200003bc
 800ca78:	08005ae9 	.word	0x08005ae9
 800ca7c:	0801bf34 	.word	0x0801bf34
 800ca80:	200003b4 	.word	0x200003b4
 800ca84:	08005b59 	.word	0x08005b59
 800ca88:	0801bf40 	.word	0x0801bf40
 800ca8c:	200003b8 	.word	0x200003b8
 800ca90:	08006741 	.word	0x08006741
 800ca94:	0801bf50 	.word	0x0801bf50
 800ca98:	200003c8 	.word	0x200003c8
 800ca9c:	080046fd 	.word	0x080046fd
 800caa0:	0801bf5c 	.word	0x0801bf5c
 800caa4:	200003cc 	.word	0x200003cc
 800caa8:	0800bdb1 	.word	0x0800bdb1
 800caac:	0801bf6c 	.word	0x0801bf6c
 800cab0:	0800c725 	.word	0x0800c725
 800cab4:	0801bf74 	.word	0x0801bf74

0800cab8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b094      	sub	sp, #80	; 0x50
 800cabc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cabe:	f107 0320 	add.w	r3, r7, #32
 800cac2:	2230      	movs	r2, #48	; 0x30
 800cac4:	2100      	movs	r1, #0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f00e f8f6 	bl	801acb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cacc:	f107 030c 	add.w	r3, r7, #12
 800cad0:	2200      	movs	r2, #0
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	605a      	str	r2, [r3, #4]
 800cad6:	609a      	str	r2, [r3, #8]
 800cad8:	60da      	str	r2, [r3, #12]
 800cada:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800cadc:	2300      	movs	r3, #0
 800cade:	60bb      	str	r3, [r7, #8]
 800cae0:	4b2e      	ldr	r3, [pc, #184]	; (800cb9c <_Z18SystemClock_Configv+0xe4>)
 800cae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae4:	4a2d      	ldr	r2, [pc, #180]	; (800cb9c <_Z18SystemClock_Configv+0xe4>)
 800cae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caea:	6413      	str	r3, [r2, #64]	; 0x40
 800caec:	4b2b      	ldr	r3, [pc, #172]	; (800cb9c <_Z18SystemClock_Configv+0xe4>)
 800caee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caf4:	60bb      	str	r3, [r7, #8]
 800caf6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800caf8:	2300      	movs	r3, #0
 800cafa:	607b      	str	r3, [r7, #4]
 800cafc:	4b28      	ldr	r3, [pc, #160]	; (800cba0 <_Z18SystemClock_Configv+0xe8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a27      	ldr	r2, [pc, #156]	; (800cba0 <_Z18SystemClock_Configv+0xe8>)
 800cb02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	4b25      	ldr	r3, [pc, #148]	; (800cba0 <_Z18SystemClock_Configv+0xe8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb10:	607b      	str	r3, [r7, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800cb14:	2309      	movs	r3, #9
 800cb16:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cb18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cb22:	2302      	movs	r3, #2
 800cb24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cb26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800cb2c:	2308      	movs	r3, #8
 800cb2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800cb30:	23a8      	movs	r3, #168	; 0xa8
 800cb32:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cb34:	2302      	movs	r3, #2
 800cb36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800cb38:	2307      	movs	r3, #7
 800cb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cb3c:	f107 0320 	add.w	r3, r7, #32
 800cb40:	4618      	mov	r0, r3
 800cb42:	f005 f99f 	bl	8011e84 <HAL_RCC_OscConfig>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	bf14      	ite	ne
 800cb4c:	2301      	movne	r3, #1
 800cb4e:	2300      	moveq	r3, #0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <_Z18SystemClock_Configv+0xa2>
	{
		Error_Handler();
 800cb56:	f000 f8f7 	bl	800cd48 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cb5a:	230f      	movs	r3, #15
 800cb5c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cb5e:	2302      	movs	r3, #2
 800cb60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cb62:	2300      	movs	r3, #0
 800cb64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cb66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cb6a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cb6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb70:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	2105      	movs	r1, #5
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f005 fbfb 	bl	8012374 <HAL_RCC_ClockConfig>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	bf14      	ite	ne
 800cb84:	2301      	movne	r3, #1
 800cb86:	2300      	moveq	r3, #0
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <_Z18SystemClock_Configv+0xda>
	{
		Error_Handler();
 800cb8e:	f000 f8db 	bl	800cd48 <Error_Handler>
	}
}
 800cb92:	bf00      	nop
 800cb94:	3750      	adds	r7, #80	; 0x50
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	40023800 	.word	0x40023800
 800cba0:	40007000 	.word	0x40007000

0800cba4 <HAL_ADC_ConvCpltCallback>:
// ADC Conversion complete callback
// If your shield uses the ADC, define adc2 and uncomment the line below.
// See TaskManager.cpp on how to use the AdcDma class
extern AdcDma<4> adc1;
extern AdcDma<14> adc2;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	adc1.ADC_ConvCpltCallback(hadc);
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	4805      	ldr	r0, [pc, #20]	; (800cbc4 <HAL_ADC_ConvCpltCallback+0x20>)
 800cbb0:	f001 fa6e 	bl	800e090 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef>
	adc2.ADC_ConvCpltCallback(hadc);
 800cbb4:	6879      	ldr	r1, [r7, #4]
 800cbb6:	4804      	ldr	r0, [pc, #16]	; (800cbc8 <HAL_ADC_ConvCpltCallback+0x24>)
 800cbb8:	f001 fadc 	bl	800e174 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef>
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	200001c4 	.word	0x200001c4
 800cbc8:	200003f4 	.word	0x200003f4

0800cbcc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800cbcc:	b5b0      	push	{r4, r5, r7, lr}
 800cbce:	b096      	sub	sp, #88	; 0x58
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	// Initialize StdId and ExtId with zero, because HAL_CAN_GetRxMessage() only sets one of them
	RxHeader.StdId = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	633b      	str	r3, [r7, #48]	; 0x30
	RxHeader.ExtId = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800cbdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cbe0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f003 fce0 	bl	80105ac <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 800cbec:	f107 040c 	add.w	r4, r7, #12
 800cbf0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800cbf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cbfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 800cc00:	2300      	movs	r3, #0
 800cc02:	657b      	str	r3, [r7, #84]	; 0x54
 800cc04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc06:	2b07      	cmp	r3, #7
 800cc08:	dc0e      	bgt.n	800cc28 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
		m.rxBuf[i] = RxData[i];
 800cc0a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800cc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc10:	4413      	add	r3, r2
 800cc12:	7819      	ldrb	r1, [r3, #0]
 800cc14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1a:	4413      	add	r3, r2
 800cc1c:	460a      	mov	r2, r1
 800cc1e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 800cc20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc22:	3301      	adds	r3, #1
 800cc24:	657b      	str	r3, [r7, #84]	; 0x54
 800cc26:	e7ed      	b.n	800cc04 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 800cc28:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800cc2a:	6818      	ldr	r0, [r3, #0]
 800cc2c:	f107 010c 	add.w	r1, r7, #12
 800cc30:	2300      	movs	r3, #0
 800cc32:	2200      	movs	r2, #0
 800cc34:	f008 fc6a 	bl	801550c <osMessageQueuePut>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0

	}
}
 800cc3c:	bf00      	nop
 800cc3e:	3758      	adds	r7, #88	; 0x58
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bdb0      	pop	{r4, r5, r7, pc}
 800cc44:	200003f0 	.word	0x200003f0

0800cc48 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800cc48:	b5b0      	push	{r4, r5, r7, lr}
 800cc4a:	b096      	sub	sp, #88	; 0x58
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	// Initialize StdId and ExtId with zero, because HAL_CAN_GetRxMessage() only sets one of them
	RxHeader.StdId = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	633b      	str	r3, [r7, #48]	; 0x30
	RxHeader.ExtId = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800cc58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cc60:	2101      	movs	r1, #1
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f003 fca2 	bl	80105ac <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 800cc68:	f107 040c 	add.w	r4, r7, #12
 800cc6c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800cc70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cc78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	657b      	str	r3, [r7, #84]	; 0x54
 800cc80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc82:	2b07      	cmp	r3, #7
 800cc84:	dc0e      	bgt.n	800cca4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>
		m.rxBuf[i] = RxData[i];
 800cc86:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800cc8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc8c:	4413      	add	r3, r2
 800cc8e:	7819      	ldrb	r1, [r3, #0]
 800cc90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc96:	4413      	add	r3, r2
 800cc98:	460a      	mov	r2, r1
 800cc9a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 800cc9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc9e:	3301      	adds	r3, #1
 800cca0:	657b      	str	r3, [r7, #84]	; 0x54
 800cca2:	e7ed      	b.n	800cc80 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 800cca4:	4b06      	ldr	r3, [pc, #24]	; (800ccc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	f107 010c 	add.w	r1, r7, #12
 800ccac:	2300      	movs	r3, #0
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f008 fc2c 	bl	801550c <osMessageQueuePut>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0

	}
}
 800ccb8:	bf00      	nop
 800ccba:	3758      	adds	r7, #88	; 0x58
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bdb0      	pop	{r4, r5, r7, pc}
 800ccc0:	200003f0 	.word	0x200003f0

0800ccc4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f003 ffea 	bl	8010ca6 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ccd2:	f3ef 8211 	mrs	r2, BASEPRI
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	60fa      	str	r2, [r7, #12]
 800cce8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ccea:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 800ccec:	617b      	str	r3, [r7, #20]
 800ccee:	4806      	ldr	r0, [pc, #24]	; (800cd08 <HAL_CAN_ErrorCallback+0x44>)
 800ccf0:	f00e f950 	bl	801af94 <puts>
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccfe:	bf00      	nop
}
 800cd00:	bf00      	nop
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	0801bf84 	.word	0x0801bf84

0800cd0c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a04      	ldr	r2, [pc, #16]	; (800cd2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d101      	bne.n	800cd22 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800cd1e:	f002 fcc9 	bl	800f6b4 <HAL_IncTick>
	}
}
 800cd22:	bf00      	nop
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	40010000 	.word	0x40010000

0800cd30 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(){
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
	return uwTick;
 800cd34:	4b03      	ldr	r3, [pc, #12]	; (800cd44 <getRunTimeCounterValue+0x14>)
 800cd36:	681b      	ldr	r3, [r3, #0]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	20003244 	.word	0x20003244

0800cd48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printDebug("Error Handler called! (HAL error)\n");
 800cd4c:	f00c f892 	bl	8018e74 <vPortEnterCritical>
 800cd50:	4802      	ldr	r0, [pc, #8]	; (800cd5c <Error_Handler+0x14>)
 800cd52:	f00e f91f 	bl	801af94 <puts>
 800cd56:	f00c f8bd 	bl	8018ed4 <vPortExitCritical>
	while (1) {
 800cd5a:	e7fe      	b.n	800cd5a <Error_Handler+0x12>
 800cd5c:	0801bf9c 	.word	0x0801bf9c

0800cd60 <_ZN6AdcDmaILh14EEC1EP17ADC_HandleTypeDef>:
	AdcDma(ADC_HandleTypeDef *hadc) : m_hadc{ hadc } {
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
 800cd6a:	4a0d      	ldr	r2, [pc, #52]	; (800cda0 <_ZN6AdcDmaILh14EEC1EP17ADC_HandleTypeDef+0x40>)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	605a      	str	r2, [r3, #4]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	721a      	strb	r2, [r3, #8]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	60da      	str	r2, [r3, #12]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	}
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	0801c378 	.word	0x0801c378

0800cda4 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3getINS_7signals17PDU_RX_ErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f103 0208 	add.w	r2, r3, #8
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3310      	adds	r3, #16
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7fa fdf3 	bl	80079a4 <_ZN3can7signals17PDU_RX_ErrorReset3getERKyS3_>
 800cdbe:	4603      	mov	r3, r0
        }
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3getINS_7signals13PDU_RX_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f103 0208 	add.w	r2, r3, #8
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	3310      	adds	r3, #16
 800cdda:	4619      	mov	r1, r3
 800cddc:	4610      	mov	r0, r2
 800cdde:	f7fa fdc9 	bl	8007974 <_ZN3can7signals13PDU_RX_Enable3getERKyS3_>
 800cde2:	4603      	mov	r3, r0
        }
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3getINS_7signals17PDU_RX_PEHWEnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f103 0208 	add.w	r2, r3, #8
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	3310      	adds	r3, #16
 800cdfe:	4619      	mov	r1, r3
 800ce00:	4610      	mov	r0, r2
 800ce02:	f7fa fde7 	bl	80079d4 <_ZN3can7signals17PDU_RX_PEHWEnable3getERKyS3_>
 800ce06:	4603      	mov	r3, r0
        }
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh1_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f103 0208 	add.w	r2, r3, #8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3310      	adds	r3, #16
 800ce22:	4619      	mov	r1, r3
 800ce24:	4610      	mov	r0, r2
 800ce26:	f7fb fa28 	bl	800827a <_ZN3can7signals16PDU_LPCh1_Enable3getERKyS3_>
 800ce2a:	4603      	mov	r3, r0
        }
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh2_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f103 0208 	add.w	r2, r3, #8
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3310      	adds	r3, #16
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f7fb fa2e 	bl	80082aa <_ZN3can7signals16PDU_LPCh2_Enable3getERKyS3_>
 800ce4e:	4603      	mov	r3, r0
        }
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh3_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f103 0208 	add.w	r2, r3, #8
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3310      	adds	r3, #16
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	f7fb fa34 	bl	80082da <_ZN3can7signals16PDU_LPCh3_Enable3getERKyS3_>
 800ce72:	4603      	mov	r3, r0
        }
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f103 0208 	add.w	r2, r3, #8
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3310      	adds	r3, #16
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4610      	mov	r0, r2
 800ce92:	f7fb fa3a 	bl	800830a <_ZN3can7signals16PDU_LPCh4_Enable3getERKyS3_>
 800ce96:	4603      	mov	r3, r0
        }
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh5_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f103 0208 	add.w	r2, r3, #8
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3310      	adds	r3, #16
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7fb fa40 	bl	800833a <_ZN3can7signals16PDU_LPCh5_Enable3getERKyS3_>
 800ceba:	4603      	mov	r3, r0
        }
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh6_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f103 0208 	add.w	r2, r3, #8
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3310      	adds	r3, #16
 800ced6:	4619      	mov	r1, r3
 800ced8:	4610      	mov	r0, r2
 800ceda:	f7fb fa46 	bl	800836a <_ZN3can7signals16PDU_LPCh6_Enable3getERKyS3_>
 800cede:	4603      	mov	r3, r0
        }
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh7_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f103 0208 	add.w	r2, r3, #8
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3310      	adds	r3, #16
 800cefa:	4619      	mov	r1, r3
 800cefc:	4610      	mov	r0, r2
 800cefe:	f7fb fa4c 	bl	800839a <_ZN3can7signals16PDU_LPCh7_Enable3getERKyS3_>
 800cf02:	4603      	mov	r3, r0
        }
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh8_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f103 0208 	add.w	r2, r3, #8
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3310      	adds	r3, #16
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f7fb fa52 	bl	80083ca <_ZN3can7signals16PDU_LPCh8_Enable3getERKyS3_>
 800cf26:	4603      	mov	r3, r0
        }
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_LPCh9_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f103 0208 	add.w	r2, r3, #8
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	3310      	adds	r3, #16
 800cf42:	4619      	mov	r1, r3
 800cf44:	4610      	mov	r0, r2
 800cf46:	f7fb fa58 	bl	80083fa <_ZN3can7signals16PDU_LPCh9_Enable3getERKyS3_>
 800cf4a:	4603      	mov	r3, r0
        }
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals17PDU_LPCh10_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f103 0208 	add.w	r2, r3, #8
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3310      	adds	r3, #16
 800cf66:	4619      	mov	r1, r3
 800cf68:	4610      	mov	r0, r2
 800cf6a:	f7fb fa5e 	bl	800842a <_ZN3can7signals17PDU_LPCh10_Enable3getERKyS3_>
 800cf6e:	4603      	mov	r3, r0
        }
 800cf70:	4618      	mov	r0, r3
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh1_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f103 0208 	add.w	r2, r3, #8
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	3310      	adds	r3, #16
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	f7fb fa64 	bl	800845a <_ZN3can7signals16PDU_HPCh1_Enable3getERKyS3_>
 800cf92:	4603      	mov	r3, r0
        }
 800cf94:	4618      	mov	r0, r3
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh2_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f103 0208 	add.w	r2, r3, #8
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3310      	adds	r3, #16
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f7fb fa6a 	bl	800848a <_ZN3can7signals16PDU_HPCh2_Enable3getERKyS3_>
 800cfb6:	4603      	mov	r3, r0
        }
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh3_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f103 0208 	add.w	r2, r3, #8
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3310      	adds	r3, #16
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f7fb fa70 	bl	80084ba <_ZN3can7signals16PDU_HPCh3_Enable3getERKyS3_>
 800cfda:	4603      	mov	r3, r0
        }
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals16PDU_HPCh4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f103 0208 	add.w	r2, r3, #8
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	3310      	adds	r3, #16
 800cff6:	4619      	mov	r1, r3
 800cff8:	4610      	mov	r0, r2
 800cffa:	f7fb fa76 	bl	80084ea <_ZN3can7signals16PDU_HPCh4_Enable3getERKyS3_>
 800cffe:	4603      	mov	r3, r0
        }
 800d000:	4618      	mov	r0, r3
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D1_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f103 0208 	add.w	r2, r3, #8
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	3310      	adds	r3, #16
 800d01a:	4619      	mov	r1, r3
 800d01c:	4610      	mov	r0, r2
 800d01e:	f7fb fa7c 	bl	800851a <_ZN3can7signals13PDU_D1_Enable3getERKyS3_>
 800d022:	4603      	mov	r3, r0
        }
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D2_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f103 0208 	add.w	r2, r3, #8
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3310      	adds	r3, #16
 800d03e:	4619      	mov	r1, r3
 800d040:	4610      	mov	r0, r2
 800d042:	f7fb fa82 	bl	800854a <_ZN3can7signals13PDU_D2_Enable3getERKyS3_>
 800d046:	4603      	mov	r3, r0
        }
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D3_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0208 	add.w	r2, r3, #8
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3310      	adds	r3, #16
 800d062:	4619      	mov	r1, r3
 800d064:	4610      	mov	r0, r2
 800d066:	f7fb fa88 	bl	800857a <_ZN3can7signals13PDU_D3_Enable3getERKyS3_>
 800d06a:	4603      	mov	r3, r0
        }
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals13PDU_D4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f103 0208 	add.w	r2, r3, #8
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	3310      	adds	r3, #16
 800d086:	4619      	mov	r1, r3
 800d088:	4610      	mov	r0, r2
 800d08a:	f7fb fa8e 	bl	80085aa <_ZN3can7signals13PDU_D4_Enable3getERKyS3_>
 800d08e:	4603      	mov	r3, r0
        }
 800d090:	4618      	mov	r0, r3
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <_ZN3can7MessageINS_8messages21PDU_RX_Manual_ControlEE3getINS_7signals14PDU_SDC_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f103 0208 	add.w	r2, r3, #8
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3310      	adds	r3, #16
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7fb fa94 	bl	80085da <_ZN3can7signals14PDU_SDC_Enable3getERKyS3_>
 800d0b2:	4603      	mov	r3, r0
        }
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh1_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f103 0208 	add.w	r2, r3, #8
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3310      	adds	r3, #16
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7fa fddd 	bl	8007c90 <_ZN3can7signals19PDU_LPCh1_Dutycycle3getERKyS3_>
 800d0d6:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d0da:	eeb0 0a67 	vmov.f32	s0, s15
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh2_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f103 0208 	add.w	r2, r3, #8
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	3310      	adds	r3, #16
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	f7fa fe05 	bl	8007d08 <_ZN3can7signals19PDU_LPCh2_Dutycycle3getERKyS3_>
 800d0fe:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d102:	eeb0 0a67 	vmov.f32	s0, s15
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh3_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f103 0208 	add.w	r2, r3, #8
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3310      	adds	r3, #16
 800d11e:	4619      	mov	r1, r3
 800d120:	4610      	mov	r0, r2
 800d122:	f7fa fe13 	bl	8007d4c <_ZN3can7signals19PDU_LPCh3_Dutycycle3getERKyS3_>
 800d126:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d12a:	eeb0 0a67 	vmov.f32	s0, s15
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh8_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f103 0208 	add.w	r2, r3, #8
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3310      	adds	r3, #16
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f7fa fe21 	bl	8007d90 <_ZN3can7signals19PDU_LPCh8_Dutycycle3getERKyS3_>
 800d14e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d152:	eeb0 0a67 	vmov.f32	s0, s15
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals19PDU_LPCh9_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f103 0208 	add.w	r2, r3, #8
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3310      	adds	r3, #16
 800d16e:	4619      	mov	r1, r3
 800d170:	4610      	mov	r0, r2
 800d172:	f7fa fe2d 	bl	8007dd0 <_ZN3can7signals19PDU_LPCh9_Dutycycle3getERKyS3_>
 800d176:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d17a:	eeb0 0a67 	vmov.f32	s0, s15
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3getINS_7signals20PDU_LPCh10_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f103 0208 	add.w	r2, r3, #8
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	3310      	adds	r3, #16
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f7fa fd93 	bl	8007cc4 <_ZN3can7signals20PDU_LPCh10_Dutycycle3getERKyS3_>
 800d19e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d1a2:	eeb0 0a67 	vmov.f32	s0, s15
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals19PDU_HPCh1_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f103 0208 	add.w	r2, r3, #8
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	3310      	adds	r3, #16
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	f7fa ff9a 	bl	80080fa <_ZN3can7signals19PDU_HPCh1_Dutycycle3getERKyS3_>
 800d1c6:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d1ca:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals19PDU_HPCh2_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f103 0208 	add.w	r2, r3, #8
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3310      	adds	r3, #16
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	f7fa ffa0 	bl	800812e <_ZN3can7signals19PDU_HPCh2_Dutycycle3getERKyS3_>
 800d1ee:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d1f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D1_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f103 0208 	add.w	r2, r3, #8
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	3310      	adds	r3, #16
 800d20e:	4619      	mov	r1, r3
 800d210:	4610      	mov	r0, r2
 800d212:	f7fa ffae 	bl	8008172 <_ZN3can7signals16PDU_D1_Dutycycle3getERKyS3_>
 800d216:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d21a:	eeb0 0a67 	vmov.f32	s0, s15
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D2_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f103 0208 	add.w	r2, r3, #8
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3310      	adds	r3, #16
 800d236:	4619      	mov	r1, r3
 800d238:	4610      	mov	r0, r2
 800d23a:	f7fa ffbc 	bl	80081b6 <_ZN3can7signals16PDU_D2_Dutycycle3getERKyS3_>
 800d23e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d242:	eeb0 0a67 	vmov.f32	s0, s15
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D3_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f103 0208 	add.w	r2, r3, #8
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3310      	adds	r3, #16
 800d25e:	4619      	mov	r1, r3
 800d260:	4610      	mov	r0, r2
 800d262:	f7fa ffca 	bl	80081fa <_ZN3can7signals16PDU_D3_Dutycycle3getERKyS3_>
 800d266:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d26a:	eeb0 0a67 	vmov.f32	s0, s15
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3getINS_7signals16PDU_D4_DutycycleEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f103 0208 	add.w	r2, r3, #8
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3310      	adds	r3, #16
 800d286:	4619      	mov	r1, r3
 800d288:	4610      	mov	r0, r2
 800d28a:	f7fa ffd6 	bl	800823a <_ZN3can7signals16PDU_D4_Dutycycle3getERKyS3_>
 800d28e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d292:	eeb0 0a67 	vmov.f32	s0, s15
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh4_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f103 0208 	add.w	r2, r3, #8
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3310      	adds	r3, #16
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7fa fa65 	bl	8007780 <_ZN3can7signals19PDU_RX_LPCh4_Enable3getERKyS3_>
 800d2b6:	4603      	mov	r3, r0
        }
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh5_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f103 0208 	add.w	r2, r3, #8
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3310      	adds	r3, #16
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7fa fa6b 	bl	80077b0 <_ZN3can7signals19PDU_RX_LPCh5_Enable3getERKyS3_>
 800d2da:	4603      	mov	r3, r0
        }
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh6_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f103 0208 	add.w	r2, r3, #8
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	f7fa fa71 	bl	80077e0 <_ZN3can7signals19PDU_RX_LPCh6_Enable3getERKyS3_>
 800d2fe:	4603      	mov	r3, r0
        }
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <_ZN3can7MessageINS_8messages16PDU_RX_LP_EnableEE3getINS_7signals19PDU_RX_LPCh7_EnableEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f103 0208 	add.w	r2, r3, #8
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	3310      	adds	r3, #16
 800d31a:	4619      	mov	r1, r3
 800d31c:	4610      	mov	r0, r2
 800d31e:	f7fa fa77 	bl	8007810 <_ZN3can7signals19PDU_RX_LPCh7_Enable3getERKyS3_>
 800d322:	4603      	mov	r3, r0
        }
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <_ZN3can14checkRxMessageINS_8messages14SensorF_TX_BMSEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d109      	bne.n	800d350 <_ZN3can14checkRxMessageINS_8messages14SensorF_TX_BMSEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f240 4241 	movw	r2, #1089	; 0x441
 800d344:	4293      	cmp	r3, r2
 800d346:	bf0c      	ite	eq
 800d348:	2301      	moveq	r3, #1
 800d34a:	2300      	movne	r3, #0
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	e000      	b.n	800d352 <_ZN3can14checkRxMessageINS_8messages14SensorF_TX_BMSEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 800d350:	2300      	movs	r3, #0
    }
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <_ZN3can7MessageINS_8messages14SensorF_TX_BMSEE3getINS_7signals22SensorF_TX_BatteryTempEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f103 0208 	add.w	r2, r3, #8
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	3310      	adds	r3, #16
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7fa fa64 	bl	8007840 <_ZN3can7signals22SensorF_TX_BatteryTemp3getERKyS3_>
 800d378:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d37c:	eeb0 0a67 	vmov.f32	s0, s15
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <_ZN6AdcDmaILh14EE5startEv>:
	void start() {
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
		if(!m_initDone) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	7a1b      	ldrb	r3, [r3, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d107      	bne.n	800d3a8 <_ZN6AdcDmaILh14EE5startEv+0x20>
			printDebug("Error in AdcDma::start(): init() was not called!\n");
 800d398:	f00b fd6c 	bl	8018e74 <vPortEnterCritical>
 800d39c:	4812      	ldr	r0, [pc, #72]	; (800d3e8 <_ZN6AdcDmaILh14EE5startEv+0x60>)
 800d39e:	f00d fdf9 	bl	801af94 <puts>
 800d3a2:	f00b fd97 	bl	8018ed4 <vPortExitCritical>
			while(1);
 800d3a6:	e7fe      	b.n	800d3a6 <_ZN6AdcDmaILh14EE5startEv+0x1e>
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b0d      	cmp	r3, #13
 800d3b0:	dc0a      	bgt.n	800d3c8 <_ZN6AdcDmaILh14EE5startEv+0x40>
			m_averagingBuffer[i] = 0;
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	330a      	adds	r3, #10
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	2200      	movs	r2, #0
 800d3be:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	e7f1      	b.n	800d3ac <_ZN6AdcDmaILh14EE5startEv+0x24>
		m_averagingCounter = 0;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)m_dmaBuffer, NUMBER_OF_CONVERSIONS);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6858      	ldr	r0, [r3, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3310      	adds	r3, #16
 800d3d8:	220e      	movs	r2, #14
 800d3da:	4619      	mov	r1, r3
 800d3dc:	f002 f9f2 	bl	800f7c4 <HAL_ADC_Start_DMA>
	}
 800d3e0:	bf00      	nop
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	0801bfc0 	.word	0x0801bfc0

0800d3ec <_ZN6AdcDmaILh14EE7getDataEv>:
	float* getData() {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
		if(!m_initDone) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7a1b      	ldrb	r3, [r3, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d107      	bne.n	800d40c <_ZN6AdcDmaILh14EE7getDataEv+0x20>
			printDebug("Error in AdcDma::getData(): init() was not called!\n");
 800d3fc:	f00b fd3a 	bl	8018e74 <vPortEnterCritical>
 800d400:	4817      	ldr	r0, [pc, #92]	; (800d460 <_ZN6AdcDmaILh14EE7getDataEv+0x74>)
 800d402:	f00d fdc7 	bl	801af94 <puts>
 800d406:	f00b fd65 	bl	8018ed4 <vPortExitCritical>
			while(1);
 800d40a:	e7fe      	b.n	800d40a <_ZN6AdcDmaILh14EE7getDataEv+0x1e>
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800d40c:	2300      	movs	r3, #0
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b0d      	cmp	r3, #13
 800d414:	dc1e      	bgt.n	800d454 <_ZN6AdcDmaILh14EE7getDataEv+0x68>
			m_dataBuffer[i] = m_averagingBuffer[i] / static_cast<float>(m_numberOfAverages);
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	330a      	adds	r3, #10
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	ee07 3a90 	vmov	s15, r3
 800d426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d430:	ee07 3a90 	vmov	s15, r3
 800d434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	3318      	adds	r3, #24
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	3304      	adds	r3, #4
 800d448:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	3301      	adds	r3, #1
 800d450:	60fb      	str	r3, [r7, #12]
 800d452:	e7dd      	b.n	800d410 <_ZN6AdcDmaILh14EE7getDataEv+0x24>
		return m_dataBuffer;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3364      	adds	r3, #100	; 0x64
	}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0801bff4 	.word	0x0801bff4

0800d464 <_ZSt3maxIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	da01      	bge.n	800d47e <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	e000      	b.n	800d480 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800d47e:	687b      	ldr	r3, [r7, #4]
    }
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	da01      	bge.n	800d4a6 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	e000      	b.n	800d4a8 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800d4a6:	687b      	ldr	r3, [r7, #4]
    }
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh1_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f103 0008 	add.w	r0, r3, #8
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f103 0110 	add.w	r1, r3, #16
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	ed97 0a00 	vldr	s0, [r7]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	f7fb fcfb 	bl	8008ed0 <_ZN3can7signals17PDU_LPCh1_Current3setERyS2_Rhf>
        }
 800d4da:	bf00      	nop
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh2_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b082      	sub	sp, #8
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f103 0008 	add.w	r0, r3, #8
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f103 0110 	add.w	r1, r3, #16
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	ed97 0a00 	vldr	s0, [r7]
 800d502:	461a      	mov	r2, r3
 800d504:	f7fb fd30 	bl	8008f68 <_ZN3can7signals17PDU_LPCh2_Current3setERyS2_Rhf>
        }
 800d508:	bf00      	nop
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh3_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f103 0008 	add.w	r0, r3, #8
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f103 0110 	add.w	r1, r3, #16
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3304      	adds	r3, #4
 800d52c:	ed97 0a00 	vldr	s0, [r7]
 800d530:	461a      	mov	r2, r3
 800d532:	f7fb fd73 	bl	800901c <_ZN3can7signals17PDU_LPCh3_Current3setERyS2_Rhf>
        }
 800d536:	bf00      	nop
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh4_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f103 0008 	add.w	r0, r3, #8
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f103 0110 	add.w	r1, r3, #16
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	3304      	adds	r3, #4
 800d55a:	ed97 0a00 	vldr	s0, [r7]
 800d55e:	461a      	mov	r2, r3
 800d560:	f7fb fdb0 	bl	80090c4 <_ZN3can7signals17PDU_LPCh4_Current3setERyS2_Rhf>
        }
 800d564:	bf00      	nop
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3setINS_7signals17PDU_LPCh5_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f103 0008 	add.w	r0, r3, #8
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f103 0110 	add.w	r1, r3, #16
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3304      	adds	r3, #4
 800d588:	ed97 0a00 	vldr	s0, [r7]
 800d58c:	461a      	mov	r2, r3
 800d58e:	f7fb fded 	bl	800916c <_ZN3can7signals17PDU_LPCh5_Current3setERyS2_Rhf>
        }
 800d592:	bf00      	nop
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh6_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f103 0008 	add.w	r0, r3, #8
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f103 0110 	add.w	r1, r3, #16
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	ed97 0a00 	vldr	s0, [r7]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	f7fb fe76 	bl	80092ac <_ZN3can7signals17PDU_LPCh6_Current3setERyS2_Rhf>
        }
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh7_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f103 0008 	add.w	r0, r3, #8
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f103 0110 	add.w	r1, r3, #16
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	ed97 0a00 	vldr	s0, [r7]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	f7fb feb9 	bl	8009360 <_ZN3can7signals17PDU_LPCh7_Current3setERyS2_Rhf>
        }
 800d5ee:	bf00      	nop
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh8_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f103 0008 	add.w	r0, r3, #8
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f103 0110 	add.w	r1, r3, #16
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3304      	adds	r3, #4
 800d612:	ed97 0a00 	vldr	s0, [r7]
 800d616:	461a      	mov	r2, r3
 800d618:	f7fb fef6 	bl	8009408 <_ZN3can7signals17PDU_LPCh8_Current3setERyS2_Rhf>
        }
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals17PDU_LPCh9_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f103 0008 	add.w	r0, r3, #8
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f103 0110 	add.w	r1, r3, #16
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	3304      	adds	r3, #4
 800d640:	ed97 0a00 	vldr	s0, [r7]
 800d644:	461a      	mov	r2, r3
 800d646:	f7fb ff33 	bl	80094b0 <_ZN3can7signals17PDU_LPCh9_Current3setERyS2_Rhf>
        }
 800d64a:	bf00      	nop
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3setINS_7signals18PDU_LPCh10_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f103 0008 	add.w	r0, r3, #8
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f103 0110 	add.w	r1, r3, #16
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	3304      	adds	r3, #4
 800d66e:	ed97 0a00 	vldr	s0, [r7]
 800d672:	461a      	mov	r2, r3
 800d674:	f7fb fdce 	bl	8009214 <_ZN3can7signals18PDU_LPCh10_Current3setERyS2_Rhf>
        }
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh1_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f103 0008 	add.w	r0, r3, #8
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f103 0110 	add.w	r1, r3, #16
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	3304      	adds	r3, #4
 800d69c:	ed97 0a00 	vldr	s0, [r7]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	f7fa f9af 	bl	8007a04 <_ZN3can7signals17PDU_HPCh1_Current3setERyS2_Rhf>
        }
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh2_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f103 0008 	add.w	r0, r3, #8
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f103 0110 	add.w	r1, r3, #16
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	ed97 0a00 	vldr	s0, [r7]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f7fa f9e4 	bl	8007a9c <_ZN3can7signals17PDU_HPCh2_Current3setERyS2_Rhf>
        }
 800d6d4:	bf00      	nop
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh3_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f103 0008 	add.w	r0, r3, #8
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f103 0110 	add.w	r1, r3, #16
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	ed97 0a00 	vldr	s0, [r7]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	f7fa fa21 	bl	8007b44 <_ZN3can7signals17PDU_HPCh3_Current3setERyS2_Rhf>
        }
 800d702:	bf00      	nop
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3setINS_7signals17PDU_HPCh4_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f103 0008 	add.w	r0, r3, #8
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f103 0110 	add.w	r1, r3, #16
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3304      	adds	r3, #4
 800d726:	ed97 0a00 	vldr	s0, [r7]
 800d72a:	461a      	mov	r2, r3
 800d72c:	f7fa fa5c 	bl	8007be8 <_ZN3can7signals17PDU_HPCh4_Current3setERyS2_Rhf>
        }
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_VoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f103 0008 	add.w	r0, r3, #8
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f103 0110 	add.w	r1, r3, #16
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	3304      	adds	r3, #4
 800d754:	ed97 0a00 	vldr	s0, [r7]
 800d758:	461a      	mov	r2, r3
 800d75a:	f7fb fb2b 	bl	8008db4 <_ZN3can7signals14PDU_LV_Voltage3setERyS2_Rhf>
        }
 800d75e:	bf00      	nop
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals14PDU_LV_CurrentEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f103 0008 	add.w	r0, r3, #8
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f103 0110 	add.w	r1, r3, #16
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3304      	adds	r3, #4
 800d782:	ed97 0a00 	vldr	s0, [r7]
 800d786:	461a      	mov	r2, r3
 800d788:	f7fb fac8 	bl	8008d1c <_ZN3can7signals14PDU_LV_Current3setERyS2_Rhf>
        }
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <_ZN3can7MessageINS_8messages13PDU_TX_LV_BMSEE3setINS_7signals10PDU_LV_SOCEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f103 0008 	add.w	r0, r3, #8
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f103 0110 	add.w	r1, r3, #16
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	1d1a      	adds	r2, r3, #4
 800d7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7b4:	f7fb fb58 	bl	8008e68 <_ZN3can7signals10PDU_LV_SOC3setERyS2_Rha>
        }
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh1_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f103 0008 	add.w	r0, r3, #8
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f103 0110 	add.w	r1, r3, #16
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	1d1a      	adds	r2, r3, #4
 800d7dc:	78fb      	ldrb	r3, [r7, #3]
 800d7de:	f7fa ff3a 	bl	8008656 <_ZN3can7signals18PDU_LPCh1_ShortCnt3setERyS2_Rhh>
        }
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh1_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f103 0008 	add.w	r0, r3, #8
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f103 0110 	add.w	r1, r3, #16
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	1d1a      	adds	r2, r3, #4
 800d806:	78fb      	ldrb	r3, [r7, #3]
 800d808:	f7fb f8f2 	bl	80089f0 <_ZN3can7signals15PDU_LPCh1_State3setERyS2_Rhh>
        }
 800d80c:	bf00      	nop
 800d80e:	3708      	adds	r7, #8
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh2_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f103 0008 	add.w	r0, r3, #8
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f103 0110 	add.w	r1, r3, #16
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	1d1a      	adds	r2, r3, #4
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	f7fa ff40 	bl	80086b6 <_ZN3can7signals18PDU_LPCh2_ShortCnt3setERyS2_Rhh>
        }
 800d836:	bf00      	nop
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh2_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f103 0008 	add.w	r0, r3, #8
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f103 0110 	add.w	r1, r3, #16
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	1d1a      	adds	r2, r3, #4
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	f7fb f8f5 	bl	8008a4a <_ZN3can7signals15PDU_LPCh2_State3setERyS2_Rhh>
        }
 800d860:	bf00      	nop
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh3_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	460b      	mov	r3, r1
 800d872:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f103 0008 	add.w	r0, r3, #8
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f103 0110 	add.w	r1, r3, #16
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	1d1a      	adds	r2, r3, #4
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	f7fa ff46 	bl	8008716 <_ZN3can7signals18PDU_LPCh3_ShortCnt3setERyS2_Rhh>
        }
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh3_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d892:	b580      	push	{r7, lr}
 800d894:	b082      	sub	sp, #8
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f103 0008 	add.w	r0, r3, #8
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f103 0110 	add.w	r1, r3, #16
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	1d1a      	adds	r2, r3, #4
 800d8ae:	78fb      	ldrb	r3, [r7, #3]
 800d8b0:	f7fb f8f8 	bl	8008aa4 <_ZN3can7signals15PDU_LPCh3_State3setERyS2_Rhh>
        }
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh4_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f103 0008 	add.w	r0, r3, #8
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f103 0110 	add.w	r1, r3, #16
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	f7fa ff4b 	bl	8008774 <_ZN3can7signals18PDU_LPCh4_ShortCnt3setERyS2_Rhh>
        }
 800d8de:	bf00      	nop
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh4_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f103 0008 	add.w	r0, r3, #8
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f103 0110 	add.w	r1, r3, #16
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	1d1a      	adds	r2, r3, #4
 800d902:	78fb      	ldrb	r3, [r7, #3]
 800d904:	f7fb f8fb 	bl	8008afe <_ZN3can7signals15PDU_LPCh4_State3setERyS2_Rhh>
        }
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh5_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f103 0008 	add.w	r0, r3, #8
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f103 0110 	add.w	r1, r3, #16
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	1d1a      	adds	r2, r3, #4
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	f7fa ff51 	bl	80087d4 <_ZN3can7signals18PDU_LPCh5_ShortCnt3setERyS2_Rhh>
        }
 800d932:	bf00      	nop
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh5_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b082      	sub	sp, #8
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	460b      	mov	r3, r1
 800d944:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f103 0008 	add.w	r0, r3, #8
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f103 0110 	add.w	r1, r3, #16
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	1d1a      	adds	r2, r3, #4
 800d956:	78fb      	ldrb	r3, [r7, #3]
 800d958:	f7fb f8fe 	bl	8008b58 <_ZN3can7signals15PDU_LPCh5_State3setERyS2_Rhh>
        }
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh6_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f103 0008 	add.w	r0, r3, #8
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f103 0110 	add.w	r1, r3, #16
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	1d1a      	adds	r2, r3, #4
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	f7fa ff57 	bl	8008834 <_ZN3can7signals18PDU_LPCh6_ShortCnt3setERyS2_Rhh>
        }
 800d986:	bf00      	nop
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh6_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d98e:	b580      	push	{r7, lr}
 800d990:	b082      	sub	sp, #8
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
 800d996:	460b      	mov	r3, r1
 800d998:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f103 0008 	add.w	r0, r3, #8
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f103 0110 	add.w	r1, r3, #16
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	1d1a      	adds	r2, r3, #4
 800d9aa:	78fb      	ldrb	r3, [r7, #3]
 800d9ac:	f7fb f901 	bl	8008bb2 <_ZN3can7signals15PDU_LPCh6_State3setERyS2_Rhh>
        }
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh7_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f103 0008 	add.w	r0, r3, #8
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f103 0110 	add.w	r1, r3, #16
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	1d1a      	adds	r2, r3, #4
 800d9d4:	78fb      	ldrb	r3, [r7, #3]
 800d9d6:	f7fa ff5a 	bl	800888e <_ZN3can7signals18PDU_LPCh7_ShortCnt3setERyS2_Rhh>
        }
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh7_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f103 0008 	add.w	r0, r3, #8
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f103 0110 	add.w	r1, r3, #16
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	1d1a      	adds	r2, r3, #4
 800d9fe:	78fb      	ldrb	r3, [r7, #3]
 800da00:	f7fb f904 	bl	8008c0c <_ZN3can7signals15PDU_LPCh7_State3setERyS2_Rhh>
        }
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh8_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	460b      	mov	r3, r1
 800da16:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f103 0008 	add.w	r0, r3, #8
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f103 0110 	add.w	r1, r3, #16
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	1d1a      	adds	r2, r3, #4
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	f7fa ff5b 	bl	80088e4 <_ZN3can7signals18PDU_LPCh8_ShortCnt3setERyS2_Rhh>
        }
 800da2e:	bf00      	nop
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh8_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800da36:	b580      	push	{r7, lr}
 800da38:	b082      	sub	sp, #8
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	460b      	mov	r3, r1
 800da40:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f103 0008 	add.w	r0, r3, #8
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f103 0110 	add.w	r1, r3, #16
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	1d1a      	adds	r2, r3, #4
 800da52:	78fb      	ldrb	r3, [r7, #3]
 800da54:	f7fb f907 	bl	8008c66 <_ZN3can7signals15PDU_LPCh8_State3setERyS2_Rhh>
        }
 800da58:	bf00      	nop
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals18PDU_LPCh9_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	460b      	mov	r3, r1
 800da6a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f103 0008 	add.w	r0, r3, #8
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f103 0110 	add.w	r1, r3, #16
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	1d1a      	adds	r2, r3, #4
 800da7c:	78fb      	ldrb	r3, [r7, #3]
 800da7e:	f7fa ff5d 	bl	800893c <_ZN3can7signals18PDU_LPCh9_ShortCnt3setERyS2_Rhh>
        }
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals15PDU_LPCh9_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f103 0008 	add.w	r0, r3, #8
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f103 0110 	add.w	r1, r3, #16
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	1d1a      	adds	r2, r3, #4
 800daa6:	78fb      	ldrb	r3, [r7, #3]
 800daa8:	f7fb f90a 	bl	8008cc0 <_ZN3can7signals15PDU_LPCh9_State3setERyS2_Rhh>
        }
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals19PDU_LPCh10_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f103 0008 	add.w	r0, r3, #8
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f103 0110 	add.w	r1, r3, #16
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	1d1a      	adds	r2, r3, #4
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	f7fa fd9a 	bl	800860a <_ZN3can7signals19PDU_LPCh10_ShortCnt3setERyS2_Rhh>
        }
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <_ZN3can7MessageINS_8messages29PDU_TX_LP_Short_Circuit_DebugEE3setINS_7signals16PDU_LPCh10_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f103 0008 	add.w	r0, r3, #8
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f103 0110 	add.w	r1, r3, #16
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	1d1a      	adds	r2, r3, #4
 800dafa:	78fb      	ldrb	r3, [r7, #3]
 800dafc:	f7fa ff4b 	bl	8008996 <_ZN3can7signals16PDU_LPCh10_State3setERyS2_Rhh>
        }
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh1_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f103 0008 	add.w	r0, r3, #8
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f103 0110 	add.w	r1, r3, #16
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	1d1a      	adds	r2, r3, #4
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	f7fa f973 	bl	8007e10 <_ZN3can7signals18PDU_HPCh1_ShortCnt3setERyS2_Rhh>
        }
 800db2a:	bf00      	nop
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh1_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800db32:	b580      	push	{r7, lr}
 800db34:	b082      	sub	sp, #8
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	460b      	mov	r3, r1
 800db3c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f103 0008 	add.w	r0, r3, #8
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f103 0110 	add.w	r1, r3, #16
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	1d1a      	adds	r2, r3, #4
 800db4e:	78fb      	ldrb	r3, [r7, #3]
 800db50:	f7fa f984 	bl	8007e5c <_ZN3can7signals15PDU_HPCh1_State3setERyS2_Rhh>
        }
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh2_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f103 0008 	add.w	r0, r3, #8
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f103 0110 	add.w	r1, r3, #16
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	1d1a      	adds	r2, r3, #4
 800db78:	78fb      	ldrb	r3, [r7, #3]
 800db7a:	f7fa f9cf 	bl	8007f1c <_ZN3can7signals18PDU_HPCh2_ShortCnt3setERyS2_Rhh>
        }
 800db7e:	bf00      	nop
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh2_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	460b      	mov	r3, r1
 800db90:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f103 0008 	add.w	r0, r3, #8
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0110 	add.w	r1, r3, #16
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	1d1a      	adds	r2, r3, #4
 800dba2:	78fb      	ldrb	r3, [r7, #3]
 800dba4:	f7fa f98a 	bl	8007ebc <_ZN3can7signals15PDU_HPCh2_State3setERyS2_Rhh>
        }
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh3_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f103 0008 	add.w	r0, r3, #8
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f103 0110 	add.w	r1, r3, #16
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	1d1a      	adds	r2, r3, #4
 800dbcc:	78fb      	ldrb	r3, [r7, #3]
 800dbce:	f7fa f9d5 	bl	8007f7c <_ZN3can7signals18PDU_HPCh3_ShortCnt3setERyS2_Rhh>
        }
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh3_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b082      	sub	sp, #8
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f103 0008 	add.w	r0, r3, #8
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f103 0110 	add.w	r1, r3, #16
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	1d1a      	adds	r2, r3, #4
 800dbf6:	78fb      	ldrb	r3, [r7, #3]
 800dbf8:	f7fa f9ef 	bl	8007fda <_ZN3can7signals15PDU_HPCh3_State3setERyS2_Rhh>
        }
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals18PDU_HPCh4_ShortCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f103 0008 	add.w	r0, r3, #8
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f103 0110 	add.w	r1, r3, #16
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	1d1a      	adds	r2, r3, #4
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	f7fa fa0a 	bl	800803a <_ZN3can7signals18PDU_HPCh4_ShortCnt3setERyS2_Rhh>
        }
 800dc26:	bf00      	nop
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <_ZN3can7MessageINS_8messages29PDU_TX_HP_Short_Circuit_DebugEE3setINS_7signals15PDU_HPCh4_StateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	460b      	mov	r3, r1
 800dc38:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f103 0008 	add.w	r0, r3, #8
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f103 0110 	add.w	r1, r3, #16
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	1d1a      	adds	r2, r3, #4
 800dc4a:	78fb      	ldrb	r3, [r7, #3]
 800dc4c:	f7fa fa25 	bl	800809a <_ZN3can7signals15PDU_HPCh4_State3setERyS2_Rhh>
        }
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals14PDU_TX_EnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f103 0008 	add.w	r0, r3, #8
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f103 0110 	add.w	r1, r3, #16
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	1d1a      	adds	r2, r3, #4
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	f7f9 fe05 	bl	8007884 <_ZN3can7signals14PDU_TX_Enabled3setERyS2_Rhb>
        }
 800dc7a:	bf00      	nop
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals18PDU_TX_PEHWEnabledEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f103 0008 	add.w	r0, r3, #8
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f103 0110 	add.w	r1, r3, #16
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	1d1a      	adds	r2, r3, #4
 800dc9e:	78fb      	ldrb	r3, [r7, #3]
 800dca0:	f7f9 fe3d 	bl	800791e <_ZN3can7signals18PDU_TX_PEHWEnabled3setERyS2_Rhb>
        }
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3setINS_7signals16PDU_TX_ErrorFlagEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f103 0008 	add.w	r0, r3, #8
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f103 0110 	add.w	r1, r3, #16
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	1d1a      	adds	r2, r3, #4
 800dcc8:	78fb      	ldrb	r3, [r7, #3]
 800dcca:	f7f9 fdff 	bl	80078cc <_ZN3can7signals16PDU_TX_ErrorFlag3setERyS2_Rhb>
        }
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <_ZN6AdcDmaILh14EE4initEt>:
	void init(uint16_t numberOfAverages = 1) {
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	807b      	strh	r3, [r7, #2]
		m_numberOfAverages = numberOfAverages;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	887a      	ldrh	r2, [r7, #2]
 800dce8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		if(m_numberOfAverages == 0 || m_numberOfAverages >= 1048576) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d107      	bne.n	800dd06 <_ZN6AdcDmaILh14EE4initEt+0x2e>
			printDebug("Error in AdcDMA::init(): Number of averages invalid!\n");
 800dcf6:	f00b f8bd 	bl	8018e74 <vPortEnterCritical>
 800dcfa:	480f      	ldr	r0, [pc, #60]	; (800dd38 <_ZN6AdcDmaILh14EE4initEt+0x60>)
 800dcfc:	f00d f94a 	bl	801af94 <puts>
 800dd00:	f00b f8e8 	bl	8018ed4 <vPortExitCritical>
			while(1);
 800dd04:	e7fe      	b.n	800dd04 <_ZN6AdcDmaILh14EE4initEt+0x2c>
		if(NUMBER_OF_CONVERSIONS != m_hadc->Init.NbrOfConversion) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	2b0e      	cmp	r3, #14
 800dd0e:	d007      	beq.n	800dd20 <_ZN6AdcDmaILh14EE4initEt+0x48>
			printDebug("Error in AdcDMA::init(): Number of conversions does not match the configuration in CubeMX!\n");
 800dd10:	f00b f8b0 	bl	8018e74 <vPortEnterCritical>
 800dd14:	4809      	ldr	r0, [pc, #36]	; (800dd3c <_ZN6AdcDmaILh14EE4initEt+0x64>)
 800dd16:	f00d f93d 	bl	801af94 <puts>
 800dd1a:	f00b f8db 	bl	8018ed4 <vPortExitCritical>
			while(1);
 800dd1e:	e7fe      	b.n	800dd1e <_ZN6AdcDmaILh14EE4initEt+0x46>
		m_xTaskToNotify = xTaskGetCurrentTaskHandle();
 800dd20:	f009 ffe8 	bl	8017cf4 <xTaskGetCurrentTaskHandle>
 800dd24:	4602      	mov	r2, r0
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	60da      	str	r2, [r3, #12]
		m_initDone = 1;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	721a      	strb	r2, [r3, #8]
	}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	0801c028 	.word	0x0801c028
 800dd3c:	0801c060 	.word	0x0801c060

0800dd40 <_ZN13WS2812BDriverILs211EEC1EP17TIM_HandleTypeDefm>:
	/**
	 * Constructor for WS2812B driver
	 * @param timerHandle	Handle to the timer that does the PWM data output
	 * @param timerChannel	Channel of the timmer, e.g. TIM_CHANNEL_3
	 */
	WS2812BDriver(TIM_HandleTypeDef *timerHandle, uint32_t timerChannel) :
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
		m_timerHandlePointer { timerHandle }, m_timerChannel { timerChannel } {
 800dd4c:	4a0e      	ldr	r2, [pc, #56]	; (800dd88 <_ZN13WS2812BDriverILs211EEC1EP17TIM_HandleTypeDefm+0x48>)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd64:	461a      	mov	r2, r3
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	f8c2 3798 	str.w	r3, [r2, #1944]	; 0x798
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd72:	461a      	mov	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8c2 379c 	str.w	r3, [r2, #1948]	; 0x79c
				// Number of LEDs needs to be uneven for index shift!
				while(1);
			}
#endif

		}
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	0801c368 	.word	0x0801c368

0800dd8c <_ZN13WS2812BDriverILs211EE6updateEv>:
#endif

		/**
		 * Update LEDs
		 */
		void update() {
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
			// Without calling the stop function before, we sometimes get glitches in the data
			if(m_isRunning) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd9a:	f893 3796 	ldrb.w	r3, [r3, #1942]	; 0x796
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00d      	beq.n	800ddbe <_ZN13WS2812BDriverILs211EE6updateEv+0x32>
				HAL_TIM_PWM_Stop_DMA(m_timerHandlePointer, m_timerChannel);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dda8:	f8d3 2798 	ldr.w	r2, [r3, #1944]	; 0x798
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ddb2:	f8d3 379c 	ldr.w	r3, [r3, #1948]	; 0x79c
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4610      	mov	r0, r2
 800ddba:	f005 f94b 	bl	8013054 <HAL_TIM_PWM_Stop_DMA>
			}
			m_isRunning = true;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796

			// Last entry needs to be zero, otherwise timer continues sending data. This is also our stop flag
			ledBuffer[BUFFER_SIZE - 1] = 0;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f8a3 2794 	strh.w	r2, [r3, #1940]	; 0x794

			// Send out LED data with PWM and DMA
			HAL_TIM_PWM_Start_DMA(m_timerHandlePointer, m_timerChannel, (uint32_t*)ledBuffer, BUFFER_SIZE);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dddc:	f8d3 0798 	ldr.w	r0, [r3, #1944]	; 0x798
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dde6:	f8d3 179c 	ldr.w	r1, [r3, #1948]	; 0x79c
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	1d1a      	adds	r2, r3, #4
 800ddee:	f241 33c9 	movw	r3, #5065	; 0x13c9
 800ddf2:	f004 ff67 	bl	8012cc4 <HAL_TIM_PWM_Start_DMA>
		}
 800ddf6:	bf00      	nop
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <_ZN13WS2812BDriverILs211EE6setAllEmf>:
		void setAll(uint32_t rgb, float brightness = 1.0f) {
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b086      	sub	sp, #24
 800de02:	af00      	add	r7, sp, #0
 800de04:	60f8      	str	r0, [r7, #12]
 800de06:	60b9      	str	r1, [r7, #8]
 800de08:	ed87 0a01 	vstr	s0, [r7, #4]
			for(int16_t i = LEFT_LED; i <= RIGHT_LED; i++) {
 800de0c:	f64f 7397 	movw	r3, #65431	; 0xff97
 800de10:	82fb      	strh	r3, [r7, #22]
 800de12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de16:	2b69      	cmp	r3, #105	; 0x69
 800de18:	dc0f      	bgt.n	800de3a <_ZN13WS2812BDriverILs211EE6setAllEmf+0x3c>
				set(i, rgb, brightness);
 800de1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de1e:	ed97 0a01 	vldr	s0, [r7, #4]
 800de22:	68ba      	ldr	r2, [r7, #8]
 800de24:	4619      	mov	r1, r3
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f000 f914 	bl	800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>
			for(int16_t i = LEFT_LED; i <= RIGHT_LED; i++) {
 800de2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de30:	b29b      	uxth	r3, r3
 800de32:	3301      	adds	r3, #1
 800de34:	b29b      	uxth	r3, r3
 800de36:	82fb      	strh	r3, [r7, #22]
 800de38:	e7eb      	b.n	800de12 <_ZN13WS2812BDriverILs211EE6setAllEmf+0x14>
		}
 800de3a:	bf00      	nop
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <_ZN13WS2812BDriverILs211EE3setEsmmmf>:
		void set(int16_t index, uint32_t r, uint32_t g, uint32_t b, float brightness = 1.0f) {
 800de44:	b480      	push	{r7}
 800de46:	b089      	sub	sp, #36	; 0x24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6178      	str	r0, [r7, #20]
 800de4c:	60fa      	str	r2, [r7, #12]
 800de4e:	60bb      	str	r3, [r7, #8]
 800de50:	ed87 0a01 	vstr	s0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	827b      	strh	r3, [r7, #18]
			if(index < 0) {
 800de58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	da07      	bge.n	800de70 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x2c>
				index += INDEX_SHIFT;
 800de60:	8a7b      	ldrh	r3, [r7, #18]
 800de62:	3369      	adds	r3, #105	; 0x69
 800de64:	b29b      	uxth	r3, r3
 800de66:	827b      	strh	r3, [r7, #18]
				index = index * (-1);
 800de68:	8a7b      	ldrh	r3, [r7, #18]
 800de6a:	425b      	negs	r3, r3
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	827b      	strh	r3, [r7, #18]
			if(index > 0) {
 800de70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de74:	2b00      	cmp	r3, #0
 800de76:	dd07      	ble.n	800de88 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x44>
				index -= INDEX_SHIFT;
 800de78:	8a7b      	ldrh	r3, [r7, #18]
 800de7a:	3b69      	subs	r3, #105	; 0x69
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	827b      	strh	r3, [r7, #18]
				index = index * (-1);
 800de80:	8a7b      	ldrh	r3, [r7, #18]
 800de82:	425b      	negs	r3, r3
 800de84:	b29b      	uxth	r3, r3
 800de86:	827b      	strh	r3, [r7, #18]
			index += INDEX_SHIFT;
 800de88:	8a7b      	ldrh	r3, [r7, #18]
 800de8a:	3369      	adds	r3, #105	; 0x69
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	827b      	strh	r3, [r7, #18]
			if(index < 0) {
 800de90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f2c0 80d0 	blt.w	800e03a <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x1f6>
			if(index >= NUM_LEDS) {
 800de9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de9e:	2bd2      	cmp	r3, #210	; 0xd2
 800dea0:	f300 80cd 	bgt.w	800e03e <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x1fa>
			r *= brightness;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	ee07 3a90 	vmov	s15, r3
 800deaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800deae:	edd7 7a01 	vldr	s15, [r7, #4]
 800deb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800deba:	ee17 3a90 	vmov	r3, s15
 800debe:	60fb      	str	r3, [r7, #12]
			g *= brightness;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	ee07 3a90 	vmov	s15, r3
 800dec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800deca:	edd7 7a01 	vldr	s15, [r7, #4]
 800dece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ded2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ded6:	ee17 3a90 	vmov	r3, s15
 800deda:	60bb      	str	r3, [r7, #8]
			b *= brightness;
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	ee07 3a90 	vmov	s15, r3
 800dee2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dee6:	edd7 7a01 	vldr	s15, [r7, #4]
 800deea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800def2:	ee17 3a90 	vmov	r3, s15
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28
			r = r * r / 255;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	fb03 f303 	mul.w	r3, r3, r3
 800defe:	4a53      	ldr	r2, [pc, #332]	; (800e04c <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x208>)
 800df00:	fba2 2303 	umull	r2, r3, r2, r3
 800df04:	09db      	lsrs	r3, r3, #7
 800df06:	60fb      	str	r3, [r7, #12]
			g = g * g / 255;
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	fb03 f303 	mul.w	r3, r3, r3
 800df0e:	4a4f      	ldr	r2, [pc, #316]	; (800e04c <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x208>)
 800df10:	fba2 2303 	umull	r2, r3, r2, r3
 800df14:	09db      	lsrs	r3, r3, #7
 800df16:	60bb      	str	r3, [r7, #8]
			b = b * b / 255;
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	fb03 f303 	mul.w	r3, r3, r3
 800df1e:	4a4b      	ldr	r2, [pc, #300]	; (800e04c <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x208>)
 800df20:	fba2 2303 	umull	r2, r3, r2, r3
 800df24:	09db      	lsrs	r3, r3, #7
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
			int16_t offset = index * 24;
 800df28:	8a7b      	ldrh	r3, [r7, #18]
 800df2a:	461a      	mov	r2, r3
 800df2c:	0052      	lsls	r2, r2, #1
 800df2e:	4413      	add	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	b29b      	uxth	r3, r3
 800df34:	83bb      	strh	r3, [r7, #28]
			uint32_t arr = m_timerHandlePointer->Instance->ARR;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800df3c:	f8d3 3798 	ldr.w	r3, [r3, #1944]	; 0x798
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df44:	61bb      	str	r3, [r7, #24]
			for(int16_t i = 0; i < 8; i++) {
 800df46:	2300      	movs	r3, #0
 800df48:	83fb      	strh	r3, [r7, #30]
 800df4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df4e:	2b07      	cmp	r3, #7
 800df50:	dc76      	bgt.n	800e040 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x1fc>
				ledBuffer[offset +  0 + i] = (g & (1 << (7 - i))) ? (2 * arr / 3) : (arr / 3);
 800df52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df56:	f1c3 0307 	rsb	r3, r3, #7
 800df5a:	2201      	movs	r2, #1
 800df5c:	fa02 f303 	lsl.w	r3, r2, r3
 800df60:	461a      	mov	r2, r3
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	4013      	ands	r3, r2
 800df66:	2b00      	cmp	r3, #0
 800df68:	d007      	beq.n	800df7a <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x136>
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	4a38      	ldr	r2, [pc, #224]	; (800e050 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x20c>)
 800df70:	fba2 2303 	umull	r2, r3, r2, r3
 800df74:	085b      	lsrs	r3, r3, #1
 800df76:	b29a      	uxth	r2, r3
 800df78:	e005      	b.n	800df86 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x142>
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	4a34      	ldr	r2, [pc, #208]	; (800e050 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x20c>)
 800df7e:	fba2 2303 	umull	r2, r3, r2, r3
 800df82:	085b      	lsrs	r3, r3, #1
 800df84:	b29a      	uxth	r2, r3
 800df86:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800df8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df8e:	440b      	add	r3, r1
 800df90:	6979      	ldr	r1, [r7, #20]
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	440b      	add	r3, r1
 800df96:	809a      	strh	r2, [r3, #4]
				ledBuffer[offset +  8 + i] = (r & (1 << (7 - i))) ? (2 * arr / 3) : (arr / 3);
 800df98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df9c:	f1c3 0307 	rsb	r3, r3, #7
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	fa02 f303 	lsl.w	r3, r2, r3
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	4013      	ands	r3, r2
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d007      	beq.n	800dfc0 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x17c>
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4a26      	ldr	r2, [pc, #152]	; (800e050 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x20c>)
 800dfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfba:	085b      	lsrs	r3, r3, #1
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	e005      	b.n	800dfcc <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x188>
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	4a23      	ldr	r2, [pc, #140]	; (800e050 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x20c>)
 800dfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc8:	085b      	lsrs	r3, r3, #1
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dfd0:	f103 0108 	add.w	r1, r3, #8
 800dfd4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dfd8:	440b      	add	r3, r1
 800dfda:	6979      	ldr	r1, [r7, #20]
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	440b      	add	r3, r1
 800dfe0:	809a      	strh	r2, [r3, #4]
				ledBuffer[offset + 16 + i] = (b & (1 << (7 - i))) ? (2 * arr / 3) : (arr / 3);
 800dfe2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dfe6:	f1c3 0307 	rsb	r3, r3, #7
 800dfea:	2201      	movs	r2, #1
 800dfec:	fa02 f303 	lsl.w	r3, r2, r3
 800dff0:	461a      	mov	r2, r3
 800dff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff4:	4013      	ands	r3, r2
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x1c6>
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	4a14      	ldr	r2, [pc, #80]	; (800e050 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x20c>)
 800e000:	fba2 2303 	umull	r2, r3, r2, r3
 800e004:	085b      	lsrs	r3, r3, #1
 800e006:	b29a      	uxth	r2, r3
 800e008:	e005      	b.n	800e016 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x1d2>
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	4a10      	ldr	r2, [pc, #64]	; (800e050 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x20c>)
 800e00e:	fba2 2303 	umull	r2, r3, r2, r3
 800e012:	085b      	lsrs	r3, r3, #1
 800e014:	b29a      	uxth	r2, r3
 800e016:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e01a:	f103 0110 	add.w	r1, r3, #16
 800e01e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e022:	440b      	add	r3, r1
 800e024:	6979      	ldr	r1, [r7, #20]
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	440b      	add	r3, r1
 800e02a:	809a      	strh	r2, [r3, #4]
			for(int16_t i = 0; i < 8; i++) {
 800e02c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e030:	b29b      	uxth	r3, r3
 800e032:	3301      	adds	r3, #1
 800e034:	b29b      	uxth	r3, r3
 800e036:	83fb      	strh	r3, [r7, #30]
 800e038:	e787      	b.n	800df4a <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x106>
				return;
 800e03a:	bf00      	nop
 800e03c:	e000      	b.n	800e040 <_ZN13WS2812BDriverILs211EE3setEsmmmf+0x1fc>
				return;
 800e03e:	bf00      	nop
		}
 800e040:	3724      	adds	r7, #36	; 0x24
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	80808081 	.word	0x80808081
 800e050:	aaaaaaab 	.word	0xaaaaaaab

0800e054 <_ZN13WS2812BDriverILs211EE3setEsmf>:
		void set(int16_t index, uint32_t rgb, float brightness = 1.0f) {
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af02      	add	r7, sp, #8
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	460b      	mov	r3, r1
 800e05e:	607a      	str	r2, [r7, #4]
 800e060:	ed87 0a00 	vstr	s0, [r7]
 800e064:	817b      	strh	r3, [r7, #10]
			set(index, (rgb >> 16) & 0xFF, (rgb >> 8) & 0xFF, rgb & 0xFF, brightness);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	0c1b      	lsrs	r3, r3, #16
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	0a1b      	lsrs	r3, r3, #8
 800e070:	b2d8      	uxtb	r0, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	ed97 0a00 	vldr	s0, [r7]
 800e080:	4603      	mov	r3, r0
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff fede 	bl	800de44 <_ZN13WS2812BDriverILs211EE3setEsmmmf>
		}
 800e088:	bf00      	nop
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef>:

	void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800e090:	b580      	push	{r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e09a:	2300      	movs	r3, #0
 800e09c:	60bb      	str	r3, [r7, #8]

		if(hadc == m_hadc) {
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d151      	bne.n	800e14c <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xbc>
			if(!m_initDone) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7a1b      	ldrb	r3, [r3, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d117      	bne.n	800e0e0 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x50>
	__asm volatile
 800e0b0:	f3ef 8211 	mrs	r2, BASEPRI
 800e0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	613a      	str	r2, [r7, #16]
 800e0c6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800e0c8:	693b      	ldr	r3, [r7, #16]
				printDebugISR("Error in AdcDma::ADC_ConvCpltCallback(): init() was not called!\n");
 800e0ca:	61bb      	str	r3, [r7, #24]
 800e0cc:	4827      	ldr	r0, [pc, #156]	; (800e16c <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xdc>)
 800e0ce:	f00c ff61 	bl	801af94 <puts>
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	f383 8811 	msr	BASEPRI, r3
}
 800e0dc:	bf00      	nop
				while(1);
 800e0de:	e7fe      	b.n	800e0de <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x4e>
			}

			// Sum up data from DMA buffer into averaging buffer
			for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	61fb      	str	r3, [r7, #28]
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	dc13      	bgt.n	800e112 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x82>
				m_averagingBuffer[i] += m_dmaBuffer[i];
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	3206      	adds	r2, #6
 800e0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	69f9      	ldr	r1, [r7, #28]
 800e0f8:	3108      	adds	r1, #8
 800e0fa:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e0fe:	1899      	adds	r1, r3, r2
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	69fa      	ldr	r2, [r7, #28]
 800e104:	3206      	adds	r2, #6
 800e106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	3301      	adds	r3, #1
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	e7e8      	b.n	800e0e4 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x54>
			}

			m_averagingCounter++;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e116:	3301      	adds	r3, #1
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	875a      	strh	r2, [r3, #58]	; 0x3a

			if(m_averagingCounter >= m_numberOfAverages) {
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e126:	429a      	cmp	r2, r3
 800e128:	d308      	bcc.n	800e13c <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xac>
				// Gathered all samples, notify caller task
				vTaskNotifyGiveFromISR(m_xTaskToNotify, &xHigherPriorityTaskWoken);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	f107 0208 	add.w	r2, r7, #8
 800e132:	4611      	mov	r1, r2
 800e134:	4618      	mov	r0, r3
 800e136:	f00a f8e1 	bl	80182fc <vTaskNotifyGiveFromISR>
 800e13a:	e007      	b.n	800e14c <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xbc>
			} else {
				// Need more averages, start ADC again
				HAL_ADC_Start_DMA(m_hadc, (uint32_t*)m_dmaBuffer, NUMBER_OF_CONVERSIONS);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6858      	ldr	r0, [r3, #4]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3310      	adds	r3, #16
 800e144:	2204      	movs	r2, #4
 800e146:	4619      	mov	r1, r3
 800e148:	f001 fb3c 	bl	800f7c4 <HAL_ADC_Start_DMA>
			}
		}
		// If required yield
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d007      	beq.n	800e162 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xd2>
 800e152:	4b07      	ldr	r3, [pc, #28]	; (800e170 <_ZN6AdcDmaILh4EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xe0>)
 800e154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	f3bf 8f6f 	isb	sy
	}
 800e162:	bf00      	nop
 800e164:	3720      	adds	r7, #32
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	0801c0bc 	.word	0x0801c0bc
 800e170:	e000ed04 	.word	0xe000ed04

0800e174 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef>:
	void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800e174:	b580      	push	{r7, lr}
 800e176:	b088      	sub	sp, #32
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	60bb      	str	r3, [r7, #8]
		if(hadc == m_hadc) {
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d157      	bne.n	800e23c <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xc8>
			if(!m_initDone) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	7a1b      	ldrb	r3, [r3, #8]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d117      	bne.n	800e1c4 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x50>
	__asm volatile
 800e194:	f3ef 8211 	mrs	r2, BASEPRI
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	f383 8811 	msr	BASEPRI, r3
 800e1a0:	f3bf 8f6f 	isb	sy
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	613a      	str	r2, [r7, #16]
 800e1aa:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800e1ac:	693b      	ldr	r3, [r7, #16]
				printDebugISR("Error in AdcDma::ADC_ConvCpltCallback(): init() was not called!\n");
 800e1ae:	61bb      	str	r3, [r7, #24]
 800e1b0:	482a      	ldr	r0, [pc, #168]	; (800e25c <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xe8>)
 800e1b2:	f00c feef 	bl	801af94 <puts>
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f383 8811 	msr	BASEPRI, r3
}
 800e1c0:	bf00      	nop
				while(1);
 800e1c2:	e7fe      	b.n	800e1c2 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x4e>
			for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	61fb      	str	r3, [r7, #28]
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	2b0d      	cmp	r3, #13
 800e1cc:	dc15      	bgt.n	800e1fa <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x86>
				m_averagingBuffer[i] += m_dmaBuffer[i];
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	330a      	adds	r3, #10
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4413      	add	r3, r2
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	69f9      	ldr	r1, [r7, #28]
 800e1de:	3108      	adds	r1, #8
 800e1e0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e1e4:	441a      	add	r2, r3
 800e1e6:	6879      	ldr	r1, [r7, #4]
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	330a      	adds	r3, #10
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	440b      	add	r3, r1
 800e1f0:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < NUMBER_OF_CONVERSIONS; i++) {
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	e7e6      	b.n	800e1c8 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0x54>
			m_averagingCounter++;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800e200:	3301      	adds	r3, #1
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
			if(m_averagingCounter >= m_numberOfAverages) {
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e216:	429a      	cmp	r2, r3
 800e218:	d308      	bcc.n	800e22c <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xb8>
				vTaskNotifyGiveFromISR(m_xTaskToNotify, &xHigherPriorityTaskWoken);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	f107 0208 	add.w	r2, r7, #8
 800e222:	4611      	mov	r1, r2
 800e224:	4618      	mov	r0, r3
 800e226:	f00a f869 	bl	80182fc <vTaskNotifyGiveFromISR>
 800e22a:	e007      	b.n	800e23c <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xc8>
				HAL_ADC_Start_DMA(m_hadc, (uint32_t*)m_dmaBuffer, NUMBER_OF_CONVERSIONS);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6858      	ldr	r0, [r3, #4]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3310      	adds	r3, #16
 800e234:	220e      	movs	r2, #14
 800e236:	4619      	mov	r1, r3
 800e238:	f001 fac4 	bl	800f7c4 <HAL_ADC_Start_DMA>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xde>
 800e242:	4b07      	ldr	r3, [pc, #28]	; (800e260 <_ZN6AdcDmaILh14EE20ADC_ConvCpltCallbackEP17ADC_HandleTypeDef+0xec>)
 800e244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e248:	601a      	str	r2, [r3, #0]
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	f3bf 8f6f 	isb	sy
	}
 800e252:	bf00      	nop
 800e254:	3720      	adds	r7, #32
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	0801c0bc 	.word	0x0801c0bc
 800e260:	e000ed04 	.word	0xe000ed04

0800e264 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d15b      	bne.n	800e32c <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d156      	bne.n	800e32c <_Z41__static_initialization_and_destruction_0ii+0xc8>

constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

//Messagebuffer handles
MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800e27e:	2201      	movs	r2, #1
 800e280:	2100      	movs	r1, #0
 800e282:	20c8      	movs	r0, #200	; 0xc8
 800e284:	f008 fa68 	bl	8016758 <xStreamBufferGenericCreate>
 800e288:	4603      	mov	r3, r0
 800e28a:	4a33      	ldr	r2, [pc, #204]	; (800e358 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800e28c:	6013      	str	r3, [r2, #0]
MessageBufferHandle_t emergencyMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800e28e:	2201      	movs	r2, #1
 800e290:	2100      	movs	r1, #0
 800e292:	20c8      	movs	r0, #200	; 0xc8
 800e294:	f008 fa60 	bl	8016758 <xStreamBufferGenericCreate>
 800e298:	4603      	mov	r3, r0
 800e29a:	4a30      	ldr	r2, [pc, #192]	; (800e35c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800e29c:	6013      	str	r3, [r2, #0]
MessageBufferHandle_t handlePduRxMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800e29e:	2201      	movs	r2, #1
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	20c8      	movs	r0, #200	; 0xc8
 800e2a4:	f008 fa58 	bl	8016758 <xStreamBufferGenericCreate>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	4a2d      	ldr	r2, [pc, #180]	; (800e360 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800e2ac:	6013      	str	r3, [r2, #0]
MessageBufferHandle_t handlePodStateMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	20c8      	movs	r0, #200	; 0xc8
 800e2b4:	f008 fa50 	bl	8016758 <xStreamBufferGenericCreate>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	4a2a      	ldr	r2, [pc, #168]	; (800e364 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800e2bc:	6013      	str	r3, [r2, #0]
MessageBufferHandle_t handleSensorRMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800e2be:	2201      	movs	r2, #1
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	20c8      	movs	r0, #200	; 0xc8
 800e2c4:	f008 fa48 	bl	8016758 <xStreamBufferGenericCreate>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	4a27      	ldr	r2, [pc, #156]	; (800e368 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800e2cc:	6013      	str	r3, [r2, #0]

//mutex handles
const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 800e2ce:	4827      	ldr	r0, [pc, #156]	; (800e36c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800e2d0:	f006 ff9b 	bl	801520a <osMutexNew>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	4a26      	ldr	r2, [pc, #152]	; (800e370 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800e2d8:	6013      	str	r3, [r2, #0]
const osMutexAttr_t hbIntervalMutexAttr = {"hbIntervalMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
osMutexId_t hbIntervalMutex = osMutexNew(&hbIntervalMutexAttr);
 800e2da:	4826      	ldr	r0, [pc, #152]	; (800e374 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800e2dc:	f006 ff95 	bl	801520a <osMutexNew>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	4a25      	ldr	r2, [pc, #148]	; (800e378 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 800e2e4:	6013      	str	r3, [r2, #0]

//Queue handles
const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 800e2e6:	4a25      	ldr	r2, [pc, #148]	; (800e37c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800e2e8:	2120      	movs	r1, #32
 800e2ea:	2010      	movs	r0, #16
 800e2ec:	f007 f89b 	bl	8015426 <osMessageQueueNew>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	4a23      	ldr	r2, [pc, #140]	; (800e380 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800e2f4:	6013      	str	r3, [r2, #0]
const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 800e2f6:	4a23      	ldr	r2, [pc, #140]	; (800e384 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800e2f8:	2124      	movs	r1, #36	; 0x24
 800e2fa:	2010      	movs	r0, #16
 800e2fc:	f007 f893 	bl	8015426 <osMessageQueueNew>
 800e300:	4603      	mov	r3, r0
 800e302:	4a21      	ldr	r2, [pc, #132]	; (800e388 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800e304:	6013      	str	r3, [r2, #0]
AdcDma<14> adc2 { &hadc2 };	// ADC class to read the current of the channels
 800e306:	4921      	ldr	r1, [pc, #132]	; (800e38c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800e308:	4821      	ldr	r0, [pc, #132]	; (800e390 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800e30a:	f7fe fd29 	bl	800cd60 <_ZN6AdcDmaILh14EEC1EP17ADC_HandleTypeDef>
Watchdog stateMachineWatchdog(OD_watchdogTimeout_get());
 800e30e:	f7f6 f915 	bl	800453c <_Z22OD_watchdogTimeout_getv>
 800e312:	4603      	mov	r3, r0
 800e314:	4619      	mov	r1, r3
 800e316:	481f      	ldr	r0, [pc, #124]	; (800e394 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800e318:	f7f8 fbc6 	bl	8006aa8 <_ZN8WatchdogC1Em>
PduOutputState outputState;
 800e31c:	481e      	ldr	r0, [pc, #120]	; (800e398 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800e31e:	f7fb fa5b 	bl	80097d8 <_ZN14PduOutputStateC1Ev>
WS2812BDriver<NUM_LEDS> leds{&htim3, TIM_CHANNEL_1}; //LEDs are controlled by D1 (PB4)
 800e322:	2200      	movs	r2, #0
 800e324:	491d      	ldr	r1, [pc, #116]	; (800e39c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800e326:	481e      	ldr	r0, [pc, #120]	; (800e3a0 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800e328:	f7ff fd0a 	bl	800dd40 <_ZN13WS2812BDriverILs211EEC1EP17TIM_HandleTypeDefm>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10d      	bne.n	800e34e <_Z41__static_initialization_and_destruction_0ii+0xea>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e338:	4293      	cmp	r3, r2
 800e33a:	d108      	bne.n	800e34e <_Z41__static_initialization_and_destruction_0ii+0xea>
 800e33c:	4818      	ldr	r0, [pc, #96]	; (800e3a0 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800e33e:	f000 f831 	bl	800e3a4 <_ZN13WS2812BDriverILs211EED1Ev>
Watchdog stateMachineWatchdog(OD_watchdogTimeout_get());
 800e342:	4814      	ldr	r0, [pc, #80]	; (800e394 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800e344:	f7f8 fbc8 	bl	8006ad8 <_ZN8WatchdogD1Ev>
extern AdcDma<14> adc2;
 800e348:	4811      	ldr	r0, [pc, #68]	; (800e390 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800e34a:	f000 f84d 	bl	800e3e8 <_ZN6AdcDmaILh14EED1Ev>
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	200003d0 	.word	0x200003d0
 800e35c:	200003d4 	.word	0x200003d4
 800e360:	200003d8 	.word	0x200003d8
 800e364:	200003dc 	.word	0x200003dc
 800e368:	200003e0 	.word	0x200003e0
 800e36c:	0801c268 	.word	0x0801c268
 800e370:	200003e4 	.word	0x200003e4
 800e374:	0801c278 	.word	0x0801c278
 800e378:	200003e8 	.word	0x200003e8
 800e37c:	0801c288 	.word	0x0801c288
 800e380:	200003ec 	.word	0x200003ec
 800e384:	0801c2a0 	.word	0x0801c2a0
 800e388:	200003f0 	.word	0x200003f0
 800e38c:	20000250 	.word	0x20000250
 800e390:	200003f4 	.word	0x200003f4
 800e394:	20000504 	.word	0x20000504
 800e398:	20000514 	.word	0x20000514
 800e39c:	20002f30 	.word	0x20002f30
 800e3a0:	200006ec 	.word	0x200006ec

0800e3a4 <_ZN13WS2812BDriverILs211EED1Ev>:
		virtual ~WS2812BDriver(){}
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	4a04      	ldr	r2, [pc, #16]	; (800e3c0 <_ZN13WS2812BDriverILs211EED1Ev+0x1c>)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	0801c368 	.word	0x0801c368

0800e3c4 <_ZN13WS2812BDriverILs211EED0Ev>:
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff ffe9 	bl	800e3a4 <_ZN13WS2812BDriverILs211EED1Ev>
 800e3d2:	f242 71a0 	movw	r1, #10144	; 0x27a0
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f00b f868 	bl	80194ac <_ZdlPvj>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <_ZN6AdcDmaILh14EED1Ev>:
	virtual ~AdcDma() {}
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	4a04      	ldr	r2, [pc, #16]	; (800e404 <_ZN6AdcDmaILh14EED1Ev+0x1c>)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	0801c378 	.word	0x0801c378

0800e408 <_ZN6AdcDmaILh14EED0Ev>:
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff ffe9 	bl	800e3e8 <_ZN6AdcDmaILh14EED1Ev>
 800e416:	21a0      	movs	r1, #160	; 0xa0
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f00b f847 	bl	80194ac <_ZdlPvj>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4618      	mov	r0, r3
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <_GLOBAL__sub_I_heartbeatProduceHandle>:
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e430:	2001      	movs	r0, #1
 800e432:	f7ff ff17 	bl	800e264 <_Z41__static_initialization_and_destruction_0ii>
 800e436:	bd80      	pop	{r7, pc}

0800e438 <_GLOBAL__sub_D_heartbeatProduceHandle>:
 800e438:	b580      	push	{r7, lr}
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e440:	2000      	movs	r0, #0
 800e442:	f7ff ff0f 	bl	800e264 <_Z41__static_initialization_and_destruction_0ii>
 800e446:	bd80      	pop	{r7, pc}

0800e448 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <MX_RNG_Init+0x20>)
 800e44e:	4a07      	ldr	r2, [pc, #28]	; (800e46c <MX_RNG_Init+0x24>)
 800e450:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800e452:	4805      	ldr	r0, [pc, #20]	; (800e468 <MX_RNG_Init+0x20>)
 800e454:	f004 f9de 	bl	8012814 <HAL_RNG_Init>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800e45e:	f7fe fc73 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800e462:	bf00      	nop
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	20002e8c 	.word	0x20002e8c
 800e46c:	50060800 	.word	0x50060800

0800e470 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4a0b      	ldr	r2, [pc, #44]	; (800e4ac <HAL_RNG_MspInit+0x3c>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d10d      	bne.n	800e49e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800e482:	2300      	movs	r3, #0
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	4b0a      	ldr	r3, [pc, #40]	; (800e4b0 <HAL_RNG_MspInit+0x40>)
 800e488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48a:	4a09      	ldr	r2, [pc, #36]	; (800e4b0 <HAL_RNG_MspInit+0x40>)
 800e48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e490:	6353      	str	r3, [r2, #52]	; 0x34
 800e492:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <HAL_RNG_MspInit+0x40>)
 800e494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800e49e:	bf00      	nop
 800e4a0:	3714      	adds	r7, #20
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	50060800 	.word	0x50060800
 800e4b0:	40023800 	.word	0x40023800

0800e4b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	607b      	str	r3, [r7, #4]
 800e4be:	4b12      	ldr	r3, [pc, #72]	; (800e508 <HAL_MspInit+0x54>)
 800e4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c2:	4a11      	ldr	r2, [pc, #68]	; (800e508 <HAL_MspInit+0x54>)
 800e4c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4c8:	6453      	str	r3, [r2, #68]	; 0x44
 800e4ca:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <HAL_MspInit+0x54>)
 800e4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4d2:	607b      	str	r3, [r7, #4]
 800e4d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	603b      	str	r3, [r7, #0]
 800e4da:	4b0b      	ldr	r3, [pc, #44]	; (800e508 <HAL_MspInit+0x54>)
 800e4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4de:	4a0a      	ldr	r2, [pc, #40]	; (800e508 <HAL_MspInit+0x54>)
 800e4e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4e4:	6413      	str	r3, [r2, #64]	; 0x40
 800e4e6:	4b08      	ldr	r3, [pc, #32]	; (800e508 <HAL_MspInit+0x54>)
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	210f      	movs	r1, #15
 800e4f6:	f06f 0001 	mvn.w	r0, #1
 800e4fa:	f002 fcaf 	bl	8010e5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e4fe:	bf00      	nop
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	40023800 	.word	0x40023800

0800e50c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08c      	sub	sp, #48	; 0x30
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800e514:	2300      	movs	r3, #0
 800e516:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800e518:	2300      	movs	r3, #0
 800e51a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e51c:	2300      	movs	r3, #0
 800e51e:	60bb      	str	r3, [r7, #8]
 800e520:	4b2f      	ldr	r3, [pc, #188]	; (800e5e0 <HAL_InitTick+0xd4>)
 800e522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e524:	4a2e      	ldr	r2, [pc, #184]	; (800e5e0 <HAL_InitTick+0xd4>)
 800e526:	f043 0301 	orr.w	r3, r3, #1
 800e52a:	6453      	str	r3, [r2, #68]	; 0x44
 800e52c:	4b2c      	ldr	r3, [pc, #176]	; (800e5e0 <HAL_InitTick+0xd4>)
 800e52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e530:	f003 0301 	and.w	r3, r3, #1
 800e534:	60bb      	str	r3, [r7, #8]
 800e536:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e538:	f107 020c 	add.w	r2, r7, #12
 800e53c:	f107 0310 	add.w	r3, r7, #16
 800e540:	4611      	mov	r1, r2
 800e542:	4618      	mov	r0, r3
 800e544:	f004 f934 	bl	80127b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800e548:	f004 f91e 	bl	8012788 <HAL_RCC_GetPCLK2Freq>
 800e54c:	4603      	mov	r3, r0
 800e54e:	005b      	lsls	r3, r3, #1
 800e550:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	4a23      	ldr	r2, [pc, #140]	; (800e5e4 <HAL_InitTick+0xd8>)
 800e556:	fba2 2303 	umull	r2, r3, r2, r3
 800e55a:	0c9b      	lsrs	r3, r3, #18
 800e55c:	3b01      	subs	r3, #1
 800e55e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e560:	4b21      	ldr	r3, [pc, #132]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e562:	4a22      	ldr	r2, [pc, #136]	; (800e5ec <HAL_InitTick+0xe0>)
 800e564:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e566:	4b20      	ldr	r3, [pc, #128]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e56c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e56e:	4a1e      	ldr	r2, [pc, #120]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e574:	4b1c      	ldr	r3, [pc, #112]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e576:	2200      	movs	r2, #0
 800e578:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e57a:	4b1b      	ldr	r3, [pc, #108]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e580:	4b19      	ldr	r3, [pc, #100]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e582:	2200      	movs	r2, #0
 800e584:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800e586:	4818      	ldr	r0, [pc, #96]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e588:	f004 f9c4 	bl	8012914 <HAL_TIM_Base_Init>
 800e58c:	4603      	mov	r3, r0
 800e58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800e592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e596:	2b00      	cmp	r3, #0
 800e598:	d11b      	bne.n	800e5d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800e59a:	4813      	ldr	r0, [pc, #76]	; (800e5e8 <HAL_InitTick+0xdc>)
 800e59c:	f004 fa0a 	bl	80129b4 <HAL_TIM_Base_Start_IT>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800e5a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d111      	bne.n	800e5d2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e5ae:	2019      	movs	r0, #25
 800e5b0:	f002 fc70 	bl	8010e94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b0f      	cmp	r3, #15
 800e5b8:	d808      	bhi.n	800e5cc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	6879      	ldr	r1, [r7, #4]
 800e5be:	2019      	movs	r0, #25
 800e5c0:	f002 fc4c 	bl	8010e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e5c4:	4a0a      	ldr	r2, [pc, #40]	; (800e5f0 <HAL_InitTick+0xe4>)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6013      	str	r3, [r2, #0]
 800e5ca:	e002      	b.n	800e5d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800e5d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3730      	adds	r7, #48	; 0x30
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	40023800 	.word	0x40023800
 800e5e4:	431bde83 	.word	0x431bde83
 800e5e8:	20002e9c 	.word	0x20002e9c
 800e5ec:	40010000 	.word	0x40010000
 800e5f0:	20000038 	.word	0x20000038

0800e5f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e5f8:	bf00      	nop
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e602:	b480      	push	{r7}
 800e604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  //printf("Hard fault!!");
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e606:	e7fe      	b.n	800e606 <HardFault_Handler+0x4>

0800e608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e608:	b480      	push	{r7}
 800e60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e60c:	e7fe      	b.n	800e60c <MemManage_Handler+0x4>

0800e60e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e60e:	b480      	push	{r7}
 800e610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e612:	e7fe      	b.n	800e612 <BusFault_Handler+0x4>

0800e614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e614:	b480      	push	{r7}
 800e616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e618:	e7fe      	b.n	800e618 <UsageFault_Handler+0x4>

0800e61a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e61a:	b480      	push	{r7}
 800e61c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e61e:	bf00      	nop
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800e62c:	4802      	ldr	r0, [pc, #8]	; (800e638 <DMA1_Stream4_IRQHandler+0x10>)
 800e62e:	f002 fdf3 	bl	8011218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800e632:	bf00      	nop
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	200030e0 	.word	0x200030e0

0800e63c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800e640:	4802      	ldr	r0, [pc, #8]	; (800e64c <DMA1_Stream5_IRQHandler+0x10>)
 800e642:	f002 fde9 	bl	8011218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800e646:	bf00      	nop
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	200031e4 	.word	0x200031e4

0800e650 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800e654:	4802      	ldr	r0, [pc, #8]	; (800e660 <DMA1_Stream6_IRQHandler+0x10>)
 800e656:	f002 fddf 	bl	8011218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800e65a:	bf00      	nop
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20003184 	.word	0x20003184

0800e664 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800e668:	4802      	ldr	r0, [pc, #8]	; (800e674 <CAN1_RX0_IRQHandler+0x10>)
 800e66a:	f002 f8d7 	bl	801081c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800e66e:	bf00      	nop
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20000358 	.word	0x20000358

0800e678 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800e67c:	4802      	ldr	r0, [pc, #8]	; (800e688 <CAN1_RX1_IRQHandler+0x10>)
 800e67e:	f002 f8cd 	bl	801081c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800e682:	bf00      	nop
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20000358 	.word	0x20000358

0800e68c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e690:	4803      	ldr	r0, [pc, #12]	; (800e6a0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800e692:	f004 fdb1 	bl	80131f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800e696:	4803      	ldr	r0, [pc, #12]	; (800e6a4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800e698:	f004 fdae 	bl	80131f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e69c:	bf00      	nop
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	20002e9c 	.word	0x20002e9c
 800e6a4:	20003008 	.word	0x20003008

0800e6a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e6ac:	4802      	ldr	r0, [pc, #8]	; (800e6b8 <USART2_IRQHandler+0x10>)
 800e6ae:	f005 fd81 	bl	80141b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e6b2:	bf00      	nop
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20003140 	.word	0x20003140

0800e6bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e6c0:	4802      	ldr	r0, [pc, #8]	; (800e6cc <DMA2_Stream0_IRQHandler+0x10>)
 800e6c2:	f002 fda9 	bl	8011218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e6c6:	bf00      	nop
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000298 	.word	0x20000298

0800e6d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800e6d4:	4802      	ldr	r0, [pc, #8]	; (800e6e0 <DMA2_Stream2_IRQHandler+0x10>)
 800e6d6:	f002 fd9f 	bl	8011218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800e6da:	bf00      	nop
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	200002f8 	.word	0x200002f8

0800e6e4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800e6e8:	4802      	ldr	r0, [pc, #8]	; (800e6f4 <CAN2_RX0_IRQHandler+0x10>)
 800e6ea:	f002 f897 	bl	801081c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800e6ee:	bf00      	nop
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20000380 	.word	0x20000380

0800e6f8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800e6fc:	4802      	ldr	r0, [pc, #8]	; (800e708 <CAN2_RX1_IRQHandler+0x10>)
 800e6fe:	f002 f88d 	bl	801081c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800e702:	bf00      	nop
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20000380 	.word	0x20000380

0800e70c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800e714:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e718:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800e71c:	f003 0301 	and.w	r3, r3, #1
 800e720:	2b00      	cmp	r3, #0
 800e722:	d013      	beq.n	800e74c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800e724:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e728:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800e72c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00b      	beq.n	800e74c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800e734:	e000      	b.n	800e738 <ITM_SendChar+0x2c>
    {
      __NOP();
 800e736:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800e738:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0f9      	beq.n	800e736 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800e742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	b2d2      	uxtb	r2, r2
 800e74a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800e74c:	687b      	ldr	r3, [r7, #4]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e75a:	b480      	push	{r7}
 800e75c:	af00      	add	r7, sp, #0
	return 1;
 800e75e:	2301      	movs	r3, #1
}
 800e760:	4618      	mov	r0, r3
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <_kill>:

int _kill(int pid, int sig)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800e774:	f00c f95e 	bl	801aa34 <__errno>
 800e778:	4603      	mov	r3, r0
 800e77a:	2216      	movs	r2, #22
 800e77c:	601a      	str	r2, [r3, #0]
	return -1;
 800e77e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <_exit>:

void _exit (int status)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b082      	sub	sp, #8
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800e792:	f04f 31ff 	mov.w	r1, #4294967295
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f7ff ffe7 	bl	800e76a <_kill>
	while (1) {}		/* Make sure we hang here */
 800e79c:	e7fe      	b.n	800e79c <_exit+0x12>

0800e79e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b086      	sub	sp, #24
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	60b9      	str	r1, [r7, #8]
 800e7a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	e00a      	b.n	800e7c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e7b0:	f3af 8000 	nop.w
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	1c5a      	adds	r2, r3, #1
 800e7ba:	60ba      	str	r2, [r7, #8]
 800e7bc:	b2ca      	uxtb	r2, r1
 800e7be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	617b      	str	r3, [r7, #20]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	dbf0      	blt.n	800e7b0 <_read+0x12>
	}

return len;
 800e7ce:	687b      	ldr	r3, [r7, #4]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3718      	adds	r7, #24
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	e009      	b.n	800e7fe <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	60ba      	str	r2, [r7, #8]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff ff8a 	bl	800e70c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	429a      	cmp	r2, r3
 800e804:	dbf1      	blt.n	800e7ea <_write+0x12>
	}
	return len;
 800e806:	687b      	ldr	r3, [r7, #4]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <_close>:

int _close(int file)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
	return -1;
 800e818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e838:	605a      	str	r2, [r3, #4]
	return 0;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <_isatty>:

int _isatty(int file)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
	return 1;
 800e850:	2301      	movs	r3, #1
}
 800e852:	4618      	mov	r0, r3
 800e854:	370c      	adds	r7, #12
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e85e:	b480      	push	{r7}
 800e860:	b085      	sub	sp, #20
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	60b9      	str	r1, [r7, #8]
 800e868:	607a      	str	r2, [r7, #4]
	return 0;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e880:	4a14      	ldr	r2, [pc, #80]	; (800e8d4 <_sbrk+0x5c>)
 800e882:	4b15      	ldr	r3, [pc, #84]	; (800e8d8 <_sbrk+0x60>)
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e88c:	4b13      	ldr	r3, [pc, #76]	; (800e8dc <_sbrk+0x64>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e894:	4b11      	ldr	r3, [pc, #68]	; (800e8dc <_sbrk+0x64>)
 800e896:	4a12      	ldr	r2, [pc, #72]	; (800e8e0 <_sbrk+0x68>)
 800e898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e89a:	4b10      	ldr	r3, [pc, #64]	; (800e8dc <_sbrk+0x64>)
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d207      	bcs.n	800e8b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e8a8:	f00c f8c4 	bl	801aa34 <__errno>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	220c      	movs	r2, #12
 800e8b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b6:	e009      	b.n	800e8cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e8b8:	4b08      	ldr	r3, [pc, #32]	; (800e8dc <_sbrk+0x64>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e8be:	4b07      	ldr	r3, [pc, #28]	; (800e8dc <_sbrk+0x64>)
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	4a05      	ldr	r2, [pc, #20]	; (800e8dc <_sbrk+0x64>)
 800e8c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	20020000 	.word	0x20020000
 800e8d8:	00000800 	.word	0x00000800
 800e8dc:	20002ee4 	.word	0x20002ee4
 800e8e0:	200090a8 	.word	0x200090a8

0800e8e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e8e8:	4b06      	ldr	r3, [pc, #24]	; (800e904 <SystemInit+0x20>)
 800e8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8ee:	4a05      	ldr	r2, [pc, #20]	; (800e904 <SystemInit+0x20>)
 800e8f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
//#ifdef VECT_TAB_SRAM
//  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
//#else
//  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//#endif
}
 800e8f8:	bf00      	nop
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	e000ed00 	.word	0xe000ed00

0800e908 <MX_TIM2_Init>:
TIM_HandleTypeDef htim12;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08e      	sub	sp, #56	; 0x38
 800e90c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e90e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e912:	2200      	movs	r2, #0
 800e914:	601a      	str	r2, [r3, #0]
 800e916:	605a      	str	r2, [r3, #4]
 800e918:	609a      	str	r2, [r3, #8]
 800e91a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e91c:	f107 0320 	add.w	r3, r7, #32
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e926:	1d3b      	adds	r3, r7, #4
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	605a      	str	r2, [r3, #4]
 800e92e:	609a      	str	r2, [r3, #8]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	611a      	str	r2, [r3, #16]
 800e934:	615a      	str	r2, [r3, #20]
 800e936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e938:	4b38      	ldr	r3, [pc, #224]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e93a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e93e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e940:	4b36      	ldr	r3, [pc, #216]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e942:	2200      	movs	r2, #0
 800e944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e946:	4b35      	ldr	r3, [pc, #212]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e948:	2200      	movs	r2, #0
 800e94a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800e94c:	4b33      	ldr	r3, [pc, #204]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e94e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e954:	4b31      	ldr	r3, [pc, #196]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e956:	2200      	movs	r2, #0
 800e958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e95a:	4b30      	ldr	r3, [pc, #192]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e960:	482e      	ldr	r0, [pc, #184]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e962:	f003 ffd7 	bl	8012914 <HAL_TIM_Base_Init>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d001      	beq.n	800e970 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e96c:	f7fe f9ec 	bl	800cd48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e974:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e97a:	4619      	mov	r1, r3
 800e97c:	4827      	ldr	r0, [pc, #156]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e97e:	f004 fe05 	bl	801358c <HAL_TIM_ConfigClockSource>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e988:	f7fe f9de 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e98c:	4823      	ldr	r0, [pc, #140]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e98e:	f004 f881 	bl	8012a94 <HAL_TIM_PWM_Init>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d001      	beq.n	800e99c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e998:	f7fe f9d6 	bl	800cd48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e99c:	2300      	movs	r3, #0
 800e99e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e9a4:	f107 0320 	add.w	r3, r7, #32
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	481c      	ldr	r0, [pc, #112]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e9ac:	f005 fad2 	bl	8013f54 <HAL_TIMEx_MasterConfigSynchronization>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d001      	beq.n	800e9ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e9b6:	f7fe f9c7 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e9ba:	2360      	movs	r3, #96	; 0x60
 800e9bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e9ca:	1d3b      	adds	r3, r7, #4
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4812      	ldr	r0, [pc, #72]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e9d2:	f004 fd19 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d001      	beq.n	800e9e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e9dc:	f7fe f9b4 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e9e0:	1d3b      	adds	r3, r7, #4
 800e9e2:	2208      	movs	r2, #8
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	480d      	ldr	r0, [pc, #52]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e9e8:	f004 fd0e 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800e9f2:	f7fe f9a9 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e9f6:	1d3b      	adds	r3, r7, #4
 800e9f8:	220c      	movs	r2, #12
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4807      	ldr	r0, [pc, #28]	; (800ea1c <MX_TIM2_Init+0x114>)
 800e9fe:	f004 fd03 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d001      	beq.n	800ea0c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800ea08:	f7fe f99e 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ea0c:	4803      	ldr	r0, [pc, #12]	; (800ea1c <MX_TIM2_Init+0x114>)
 800ea0e:	f000 fb9d 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800ea12:	bf00      	nop
 800ea14:	3738      	adds	r7, #56	; 0x38
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20002ee8 	.word	0x20002ee8

0800ea20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08e      	sub	sp, #56	; 0x38
 800ea24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ea26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	601a      	str	r2, [r3, #0]
 800ea2e:	605a      	str	r2, [r3, #4]
 800ea30:	609a      	str	r2, [r3, #8]
 800ea32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ea34:	f107 0320 	add.w	r3, r7, #32
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]
 800ea3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ea3e:	1d3b      	adds	r3, r7, #4
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	605a      	str	r2, [r3, #4]
 800ea46:	609a      	str	r2, [r3, #8]
 800ea48:	60da      	str	r2, [r3, #12]
 800ea4a:	611a      	str	r2, [r3, #16]
 800ea4c:	615a      	str	r2, [r3, #20]
 800ea4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ea50:	4b31      	ldr	r3, [pc, #196]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea52:	4a32      	ldr	r2, [pc, #200]	; (800eb1c <MX_TIM3_Init+0xfc>)
 800ea54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ea56:	4b30      	ldr	r3, [pc, #192]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ea5c:	4b2e      	ldr	r3, [pc, #184]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105-1;
 800ea62:	4b2d      	ldr	r3, [pc, #180]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea64:	2268      	movs	r2, #104	; 0x68
 800ea66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ea68:	4b2b      	ldr	r3, [pc, #172]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ea6e:	4b2a      	ldr	r3, [pc, #168]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea70:	2280      	movs	r2, #128	; 0x80
 800ea72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ea74:	4828      	ldr	r0, [pc, #160]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea76:	f003 ff4d 	bl	8012914 <HAL_TIM_Base_Init>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d001      	beq.n	800ea84 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800ea80:	f7fe f962 	bl	800cd48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ea84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ea8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4821      	ldr	r0, [pc, #132]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800ea92:	f004 fd7b 	bl	801358c <HAL_TIM_ConfigClockSource>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800ea9c:	f7fe f954 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800eaa0:	481d      	ldr	r0, [pc, #116]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800eaa2:	f003 fff7 	bl	8012a94 <HAL_TIM_PWM_Init>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800eaac:	f7fe f94c 	bl	800cd48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eab0:	2300      	movs	r3, #0
 800eab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800eab8:	f107 0320 	add.w	r3, r7, #32
 800eabc:	4619      	mov	r1, r3
 800eabe:	4816      	ldr	r0, [pc, #88]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800eac0:	f005 fa48 	bl	8013f54 <HAL_TIMEx_MasterConfigSynchronization>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d001      	beq.n	800eace <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800eaca:	f7fe f93d 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800eace:	2360      	movs	r3, #96	; 0x60
 800ead0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ead6:	2300      	movs	r3, #0
 800ead8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800eada:	2300      	movs	r3, #0
 800eadc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800eade:	1d3b      	adds	r3, r7, #4
 800eae0:	2200      	movs	r2, #0
 800eae2:	4619      	mov	r1, r3
 800eae4:	480c      	ldr	r0, [pc, #48]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800eae6:	f004 fc8f 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d001      	beq.n	800eaf4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800eaf0:	f7fe f92a 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800eaf4:	1d3b      	adds	r3, r7, #4
 800eaf6:	2208      	movs	r2, #8
 800eaf8:	4619      	mov	r1, r3
 800eafa:	4807      	ldr	r0, [pc, #28]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800eafc:	f004 fc84 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800eb06:	f7fe f91f 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800eb0a:	4803      	ldr	r0, [pc, #12]	; (800eb18 <MX_TIM3_Init+0xf8>)
 800eb0c:	f000 fb1e 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800eb10:	bf00      	nop
 800eb12:	3738      	adds	r7, #56	; 0x38
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20002f30 	.word	0x20002f30
 800eb1c:	40000400 	.word	0x40000400

0800eb20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08e      	sub	sp, #56	; 0x38
 800eb24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eb26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	605a      	str	r2, [r3, #4]
 800eb30:	609a      	str	r2, [r3, #8]
 800eb32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eb34:	f107 0320 	add.w	r3, r7, #32
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800eb3e:	1d3b      	adds	r3, r7, #4
 800eb40:	2200      	movs	r2, #0
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	605a      	str	r2, [r3, #4]
 800eb46:	609a      	str	r2, [r3, #8]
 800eb48:	60da      	str	r2, [r3, #12]
 800eb4a:	611a      	str	r2, [r3, #16]
 800eb4c:	615a      	str	r2, [r3, #20]
 800eb4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800eb50:	4b37      	ldr	r3, [pc, #220]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb52:	4a38      	ldr	r2, [pc, #224]	; (800ec34 <MX_TIM4_Init+0x114>)
 800eb54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800eb56:	4b36      	ldr	r3, [pc, #216]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb5c:	4b34      	ldr	r3, [pc, #208]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800eb62:	4b33      	ldr	r3, [pc, #204]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb6a:	4b31      	ldr	r3, [pc, #196]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb70:	4b2f      	ldr	r3, [pc, #188]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800eb76:	482e      	ldr	r0, [pc, #184]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb78:	f003 fecc 	bl	8012914 <HAL_TIM_Base_Init>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800eb82:	f7fe f8e1 	bl	800cd48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eb86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800eb8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb90:	4619      	mov	r1, r3
 800eb92:	4827      	ldr	r0, [pc, #156]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eb94:	f004 fcfa 	bl	801358c <HAL_TIM_ConfigClockSource>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d001      	beq.n	800eba2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800eb9e:	f7fe f8d3 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800eba2:	4823      	ldr	r0, [pc, #140]	; (800ec30 <MX_TIM4_Init+0x110>)
 800eba4:	f003 ff76 	bl	8012a94 <HAL_TIM_PWM_Init>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d001      	beq.n	800ebb2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800ebae:	f7fe f8cb 	bl	800cd48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ebba:	f107 0320 	add.w	r3, r7, #32
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	481b      	ldr	r0, [pc, #108]	; (800ec30 <MX_TIM4_Init+0x110>)
 800ebc2:	f005 f9c7 	bl	8013f54 <HAL_TIMEx_MasterConfigSynchronization>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d001      	beq.n	800ebd0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800ebcc:	f7fe f8bc 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ebd0:	2360      	movs	r3, #96	; 0x60
 800ebd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ebe0:	1d3b      	adds	r3, r7, #4
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	4812      	ldr	r0, [pc, #72]	; (800ec30 <MX_TIM4_Init+0x110>)
 800ebe8:	f004 fc0e 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800ebf2:	f7fe f8a9 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ebf6:	1d3b      	adds	r3, r7, #4
 800ebf8:	2204      	movs	r2, #4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	480c      	ldr	r0, [pc, #48]	; (800ec30 <MX_TIM4_Init+0x110>)
 800ebfe:	f004 fc03 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d001      	beq.n	800ec0c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800ec08:	f7fe f89e 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ec0c:	1d3b      	adds	r3, r7, #4
 800ec0e:	2208      	movs	r2, #8
 800ec10:	4619      	mov	r1, r3
 800ec12:	4807      	ldr	r0, [pc, #28]	; (800ec30 <MX_TIM4_Init+0x110>)
 800ec14:	f004 fbf8 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d001      	beq.n	800ec22 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800ec1e:	f7fe f893 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800ec22:	4803      	ldr	r0, [pc, #12]	; (800ec30 <MX_TIM4_Init+0x110>)
 800ec24:	f000 fa92 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800ec28:	bf00      	nop
 800ec2a:	3738      	adds	r7, #56	; 0x38
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	20002f78 	.word	0x20002f78
 800ec34:	40000800 	.word	0x40000800

0800ec38 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b096      	sub	sp, #88	; 0x58
 800ec3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	605a      	str	r2, [r3, #4]
 800ec48:	609a      	str	r2, [r3, #8]
 800ec4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec50:	2200      	movs	r2, #0
 800ec52:	601a      	str	r2, [r3, #0]
 800ec54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ec56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	605a      	str	r2, [r3, #4]
 800ec60:	609a      	str	r2, [r3, #8]
 800ec62:	60da      	str	r2, [r3, #12]
 800ec64:	611a      	str	r2, [r3, #16]
 800ec66:	615a      	str	r2, [r3, #20]
 800ec68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ec6a:	1d3b      	adds	r3, r7, #4
 800ec6c:	2220      	movs	r2, #32
 800ec6e:	2100      	movs	r1, #0
 800ec70:	4618      	mov	r0, r3
 800ec72:	f00c f821 	bl	801acb8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800ec76:	4b4a      	ldr	r3, [pc, #296]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec78:	4a4a      	ldr	r2, [pc, #296]	; (800eda4 <MX_TIM8_Init+0x16c>)
 800ec7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800ec7c:	4b48      	ldr	r3, [pc, #288]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec7e:	2201      	movs	r2, #1
 800ec80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec82:	4b47      	ldr	r3, [pc, #284]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800ec88:	4b45      	ldr	r3, [pc, #276]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec90:	4b43      	ldr	r3, [pc, #268]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ec96:	4b42      	ldr	r3, [pc, #264]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ec9c:	4b40      	ldr	r3, [pc, #256]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800eca2:	483f      	ldr	r0, [pc, #252]	; (800eda0 <MX_TIM8_Init+0x168>)
 800eca4:	f003 fe36 	bl	8012914 <HAL_TIM_Base_Init>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800ecae:	f7fe f84b 	bl	800cd48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ecb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ecb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4838      	ldr	r0, [pc, #224]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ecc0:	f004 fc64 	bl	801358c <HAL_TIM_ConfigClockSource>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800ecca:	f7fe f83d 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800ecce:	4834      	ldr	r0, [pc, #208]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ecd0:	f003 fee0 	bl	8012a94 <HAL_TIM_PWM_Init>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800ecda:	f7fe f835 	bl	800cd48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ecde:	2300      	movs	r3, #0
 800ece0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ece2:	2300      	movs	r3, #0
 800ece4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ece6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecea:	4619      	mov	r1, r3
 800ecec:	482c      	ldr	r0, [pc, #176]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ecee:	f005 f931 	bl	8013f54 <HAL_TIMEx_MasterConfigSynchronization>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d001      	beq.n	800ecfc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800ecf8:	f7fe f826 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ecfc:	2360      	movs	r3, #96	; 0x60
 800ecfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ed04:	2300      	movs	r3, #0
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ed10:	2300      	movs	r3, #0
 800ed12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ed14:	2300      	movs	r3, #0
 800ed16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ed18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	4619      	mov	r1, r3
 800ed20:	481f      	ldr	r0, [pc, #124]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ed22:	f004 fb71 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800ed2c:	f7fe f80c 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ed30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed34:	2204      	movs	r2, #4
 800ed36:	4619      	mov	r1, r3
 800ed38:	4819      	ldr	r0, [pc, #100]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ed3a:	f004 fb65 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d001      	beq.n	800ed48 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800ed44:	f7fe f800 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ed48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed4c:	220c      	movs	r2, #12
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4813      	ldr	r0, [pc, #76]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ed52:	f004 fb59 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d001      	beq.n	800ed60 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800ed5c:	f7fd fff4 	bl	800cd48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ed64:	2300      	movs	r3, #0
 800ed66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ed70:	2300      	movs	r3, #0
 800ed72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ed74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ed7e:	1d3b      	adds	r3, r7, #4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4807      	ldr	r0, [pc, #28]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ed84:	f005 f962 	bl	801404c <HAL_TIMEx_ConfigBreakDeadTime>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800ed8e:	f7fd ffdb 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800ed92:	4803      	ldr	r0, [pc, #12]	; (800eda0 <MX_TIM8_Init+0x168>)
 800ed94:	f000 f9da 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800ed98:	bf00      	nop
 800ed9a:	3758      	adds	r7, #88	; 0x58
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20002fc0 	.word	0x20002fc0
 800eda4:	40010400 	.word	0x40010400

0800eda8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800edae:	1d3b      	adds	r3, r7, #4
 800edb0:	2200      	movs	r2, #0
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	605a      	str	r2, [r3, #4]
 800edb6:	609a      	str	r2, [r3, #8]
 800edb8:	60da      	str	r2, [r3, #12]
 800edba:	611a      	str	r2, [r3, #16]
 800edbc:	615a      	str	r2, [r3, #20]
 800edbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800edc0:	4b1e      	ldr	r3, [pc, #120]	; (800ee3c <MX_TIM10_Init+0x94>)
 800edc2:	4a1f      	ldr	r2, [pc, #124]	; (800ee40 <MX_TIM10_Init+0x98>)
 800edc4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 800edc6:	4b1d      	ldr	r3, [pc, #116]	; (800ee3c <MX_TIM10_Init+0x94>)
 800edc8:	2201      	movs	r2, #1
 800edca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800edcc:	4b1b      	ldr	r3, [pc, #108]	; (800ee3c <MX_TIM10_Init+0x94>)
 800edce:	2200      	movs	r2, #0
 800edd0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800edd2:	4b1a      	ldr	r3, [pc, #104]	; (800ee3c <MX_TIM10_Init+0x94>)
 800edd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edd8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800edda:	4b18      	ldr	r3, [pc, #96]	; (800ee3c <MX_TIM10_Init+0x94>)
 800eddc:	2200      	movs	r2, #0
 800edde:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ede0:	4b16      	ldr	r3, [pc, #88]	; (800ee3c <MX_TIM10_Init+0x94>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800ede6:	4815      	ldr	r0, [pc, #84]	; (800ee3c <MX_TIM10_Init+0x94>)
 800ede8:	f003 fd94 	bl	8012914 <HAL_TIM_Base_Init>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800edf2:	f7fd ffa9 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800edf6:	4811      	ldr	r0, [pc, #68]	; (800ee3c <MX_TIM10_Init+0x94>)
 800edf8:	f003 fe4c 	bl	8012a94 <HAL_TIM_PWM_Init>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800ee02:	f7fd ffa1 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ee06:	2360      	movs	r3, #96	; 0x60
 800ee08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ee16:	1d3b      	adds	r3, r7, #4
 800ee18:	2200      	movs	r2, #0
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4807      	ldr	r0, [pc, #28]	; (800ee3c <MX_TIM10_Init+0x94>)
 800ee1e:	f004 faf3 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800ee28:	f7fd ff8e 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800ee2c:	4803      	ldr	r0, [pc, #12]	; (800ee3c <MX_TIM10_Init+0x94>)
 800ee2e:	f000 f98d 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800ee32:	bf00      	nop
 800ee34:	3720      	adds	r7, #32
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20003008 	.word	0x20003008
 800ee40:	40014400 	.word	0x40014400

0800ee44 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800ee4a:	1d3b      	adds	r3, r7, #4
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	605a      	str	r2, [r3, #4]
 800ee52:	609a      	str	r2, [r3, #8]
 800ee54:	60da      	str	r2, [r3, #12]
 800ee56:	611a      	str	r2, [r3, #16]
 800ee58:	615a      	str	r2, [r3, #20]
 800ee5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800ee5c:	4b1e      	ldr	r3, [pc, #120]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee5e:	4a1f      	ldr	r2, [pc, #124]	; (800eedc <MX_TIM11_Init+0x98>)
 800ee60:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800ee62:	4b1d      	ldr	r3, [pc, #116]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ee68:	4b1b      	ldr	r3, [pc, #108]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800ee6e:	4b1a      	ldr	r3, [pc, #104]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee74:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ee76:	4b18      	ldr	r3, [pc, #96]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ee7c:	4b16      	ldr	r3, [pc, #88]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800ee82:	4815      	ldr	r0, [pc, #84]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee84:	f003 fd46 	bl	8012914 <HAL_TIM_Base_Init>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800ee8e:	f7fd ff5b 	bl	800cd48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800ee92:	4811      	ldr	r0, [pc, #68]	; (800eed8 <MX_TIM11_Init+0x94>)
 800ee94:	f003 fdfe 	bl	8012a94 <HAL_TIM_PWM_Init>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800ee9e:	f7fd ff53 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800eea2:	2360      	movs	r3, #96	; 0x60
 800eea4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800eeb2:	1d3b      	adds	r3, r7, #4
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4807      	ldr	r0, [pc, #28]	; (800eed8 <MX_TIM11_Init+0x94>)
 800eeba:	f004 faa5 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800eec4:	f7fd ff40 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800eec8:	4803      	ldr	r0, [pc, #12]	; (800eed8 <MX_TIM11_Init+0x94>)
 800eeca:	f000 f93f 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800eece:	bf00      	nop
 800eed0:	3720      	adds	r7, #32
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20003050 	.word	0x20003050
 800eedc:	40014800 	.word	0x40014800

0800eee0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800eee6:	1d3b      	adds	r3, r7, #4
 800eee8:	2200      	movs	r2, #0
 800eeea:	601a      	str	r2, [r3, #0]
 800eeec:	605a      	str	r2, [r3, #4]
 800eeee:	609a      	str	r2, [r3, #8]
 800eef0:	60da      	str	r2, [r3, #12]
 800eef2:	611a      	str	r2, [r3, #16]
 800eef4:	615a      	str	r2, [r3, #20]
 800eef6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800eef8:	4b1a      	ldr	r3, [pc, #104]	; (800ef64 <MX_TIM12_Init+0x84>)
 800eefa:	4a1b      	ldr	r2, [pc, #108]	; (800ef68 <MX_TIM12_Init+0x88>)
 800eefc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800eefe:	4b19      	ldr	r3, [pc, #100]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ef04:	4b17      	ldr	r3, [pc, #92]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800ef0a:	4b16      	ldr	r3, [pc, #88]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef10:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ef12:	4b14      	ldr	r3, [pc, #80]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ef18:	4b12      	ldr	r3, [pc, #72]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800ef1e:	4811      	ldr	r0, [pc, #68]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef20:	f003 fdb8 	bl	8012a94 <HAL_TIM_PWM_Init>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800ef2a:	f7fd ff0d 	bl	800cd48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ef2e:	2360      	movs	r3, #96	; 0x60
 800ef30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ef36:	2300      	movs	r3, #0
 800ef38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ef3e:	1d3b      	adds	r3, r7, #4
 800ef40:	2204      	movs	r2, #4
 800ef42:	4619      	mov	r1, r3
 800ef44:	4807      	ldr	r0, [pc, #28]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef46:	f004 fa5f 	bl	8013408 <HAL_TIM_PWM_ConfigChannel>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800ef50:	f7fd fefa 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800ef54:	4803      	ldr	r0, [pc, #12]	; (800ef64 <MX_TIM12_Init+0x84>)
 800ef56:	f000 f8f9 	bl	800f14c <HAL_TIM_MspPostInit>

}
 800ef5a:	bf00      	nop
 800ef5c:	3720      	adds	r7, #32
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	20003098 	.word	0x20003098
 800ef68:	40001800 	.word	0x40001800

0800ef6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b088      	sub	sp, #32
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef7c:	d10e      	bne.n	800ef9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ef7e:	2300      	movs	r3, #0
 800ef80:	61fb      	str	r3, [r7, #28]
 800ef82:	4b59      	ldr	r3, [pc, #356]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef86:	4a58      	ldr	r2, [pc, #352]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800ef88:	f043 0301 	orr.w	r3, r3, #1
 800ef8c:	6413      	str	r3, [r2, #64]	; 0x40
 800ef8e:	4b56      	ldr	r3, [pc, #344]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800ef90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	61fb      	str	r3, [r7, #28]
 800ef98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800ef9a:	e0a0      	b.n	800f0de <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM3)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a52      	ldr	r2, [pc, #328]	; (800f0ec <HAL_TIM_Base_MspInit+0x180>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d144      	bne.n	800f030 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800efa6:	2300      	movs	r3, #0
 800efa8:	61bb      	str	r3, [r7, #24]
 800efaa:	4b4f      	ldr	r3, [pc, #316]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800efac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efae:	4a4e      	ldr	r2, [pc, #312]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800efb0:	f043 0302 	orr.w	r3, r3, #2
 800efb4:	6413      	str	r3, [r2, #64]	; 0x40
 800efb6:	4b4c      	ldr	r3, [pc, #304]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800efb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efba:	f003 0302 	and.w	r3, r3, #2
 800efbe:	61bb      	str	r3, [r7, #24]
 800efc0:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800efc2:	4b4b      	ldr	r3, [pc, #300]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efc4:	4a4b      	ldr	r2, [pc, #300]	; (800f0f4 <HAL_TIM_Base_MspInit+0x188>)
 800efc6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800efc8:	4b49      	ldr	r3, [pc, #292]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800efce:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800efd0:	4b47      	ldr	r3, [pc, #284]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efd2:	2240      	movs	r2, #64	; 0x40
 800efd4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800efd6:	4b46      	ldr	r3, [pc, #280]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efd8:	2200      	movs	r2, #0
 800efda:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800efdc:	4b44      	ldr	r3, [pc, #272]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800efe2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800efe4:	4b42      	ldr	r3, [pc, #264]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800efec:	4b40      	ldr	r3, [pc, #256]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800efee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eff2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800eff4:	4b3e      	ldr	r3, [pc, #248]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800effa:	4b3d      	ldr	r3, [pc, #244]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800effc:	2200      	movs	r2, #0
 800effe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f000:	4b3b      	ldr	r3, [pc, #236]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800f002:	2200      	movs	r2, #0
 800f004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800f006:	483a      	ldr	r0, [pc, #232]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800f008:	f001 ff6e 	bl	8010ee8 <HAL_DMA_Init>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d001      	beq.n	800f016 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 800f012:	f7fd fe99 	bl	800cd48 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a35      	ldr	r2, [pc, #212]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800f01a:	625a      	str	r2, [r3, #36]	; 0x24
 800f01c:	4a34      	ldr	r2, [pc, #208]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4a32      	ldr	r2, [pc, #200]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800f026:	639a      	str	r2, [r3, #56]	; 0x38
 800f028:	4a31      	ldr	r2, [pc, #196]	; (800f0f0 <HAL_TIM_Base_MspInit+0x184>)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f02e:	e056      	b.n	800f0de <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM4)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a30      	ldr	r2, [pc, #192]	; (800f0f8 <HAL_TIM_Base_MspInit+0x18c>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d10e      	bne.n	800f058 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f03a:	2300      	movs	r3, #0
 800f03c:	617b      	str	r3, [r7, #20]
 800f03e:	4b2a      	ldr	r3, [pc, #168]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f042:	4a29      	ldr	r2, [pc, #164]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f044:	f043 0304 	orr.w	r3, r3, #4
 800f048:	6413      	str	r3, [r2, #64]	; 0x40
 800f04a:	4b27      	ldr	r3, [pc, #156]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04e:	f003 0304 	and.w	r3, r3, #4
 800f052:	617b      	str	r3, [r7, #20]
 800f054:	697b      	ldr	r3, [r7, #20]
}
 800f056:	e042      	b.n	800f0de <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM8)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a27      	ldr	r2, [pc, #156]	; (800f0fc <HAL_TIM_Base_MspInit+0x190>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d10e      	bne.n	800f080 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f062:	2300      	movs	r3, #0
 800f064:	613b      	str	r3, [r7, #16]
 800f066:	4b20      	ldr	r3, [pc, #128]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f06a:	4a1f      	ldr	r2, [pc, #124]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f06c:	f043 0302 	orr.w	r3, r3, #2
 800f070:	6453      	str	r3, [r2, #68]	; 0x44
 800f072:	4b1d      	ldr	r3, [pc, #116]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f076:	f003 0302 	and.w	r3, r3, #2
 800f07a:	613b      	str	r3, [r7, #16]
 800f07c:	693b      	ldr	r3, [r7, #16]
}
 800f07e:	e02e      	b.n	800f0de <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM10)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a1e      	ldr	r2, [pc, #120]	; (800f100 <HAL_TIM_Base_MspInit+0x194>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d116      	bne.n	800f0b8 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
 800f08e:	4b16      	ldr	r3, [pc, #88]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f092:	4a15      	ldr	r2, [pc, #84]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f098:	6453      	str	r3, [r2, #68]	; 0x44
 800f09a:	4b13      	ldr	r3, [pc, #76]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f09e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	210f      	movs	r1, #15
 800f0aa:	2019      	movs	r0, #25
 800f0ac:	f001 fed6 	bl	8010e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800f0b0:	2019      	movs	r0, #25
 800f0b2:	f001 feef 	bl	8010e94 <HAL_NVIC_EnableIRQ>
}
 800f0b6:	e012      	b.n	800f0de <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM11)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a11      	ldr	r2, [pc, #68]	; (800f104 <HAL_TIM_Base_MspInit+0x198>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d10d      	bne.n	800f0de <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60bb      	str	r3, [r7, #8]
 800f0c6:	4b08      	ldr	r3, [pc, #32]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ca:	4a07      	ldr	r2, [pc, #28]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f0cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f0d0:	6453      	str	r3, [r2, #68]	; 0x44
 800f0d2:	4b05      	ldr	r3, [pc, #20]	; (800f0e8 <HAL_TIM_Base_MspInit+0x17c>)
 800f0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0da:	60bb      	str	r3, [r7, #8]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
}
 800f0de:	bf00      	nop
 800f0e0:	3720      	adds	r7, #32
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	40023800 	.word	0x40023800
 800f0ec:	40000400 	.word	0x40000400
 800f0f0:	200030e0 	.word	0x200030e0
 800f0f4:	40026070 	.word	0x40026070
 800f0f8:	40000800 	.word	0x40000800
 800f0fc:	40010400 	.word	0x40010400
 800f100:	40014400 	.word	0x40014400
 800f104:	40014800 	.word	0x40014800

0800f108 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a0b      	ldr	r2, [pc, #44]	; (800f144 <HAL_TIM_PWM_MspInit+0x3c>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d10d      	bne.n	800f136 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800f11a:	2300      	movs	r3, #0
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	4b0a      	ldr	r3, [pc, #40]	; (800f148 <HAL_TIM_PWM_MspInit+0x40>)
 800f120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f122:	4a09      	ldr	r2, [pc, #36]	; (800f148 <HAL_TIM_PWM_MspInit+0x40>)
 800f124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f128:	6413      	str	r3, [r2, #64]	; 0x40
 800f12a:	4b07      	ldr	r3, [pc, #28]	; (800f148 <HAL_TIM_PWM_MspInit+0x40>)
 800f12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800f136:	bf00      	nop
 800f138:	3714      	adds	r7, #20
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	40001800 	.word	0x40001800
 800f148:	40023800 	.word	0x40023800

0800f14c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b092      	sub	sp, #72	; 0x48
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f154:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	605a      	str	r2, [r3, #4]
 800f15e:	609a      	str	r2, [r3, #8]
 800f160:	60da      	str	r2, [r3, #12]
 800f162:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f16c:	d13e      	bne.n	800f1ec <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f16e:	2300      	movs	r3, #0
 800f170:	633b      	str	r3, [r7, #48]	; 0x30
 800f172:	4b99      	ldr	r3, [pc, #612]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f176:	4a98      	ldr	r2, [pc, #608]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f178:	f043 0302 	orr.w	r3, r3, #2
 800f17c:	6313      	str	r3, [r2, #48]	; 0x30
 800f17e:	4b96      	ldr	r3, [pc, #600]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	633b      	str	r3, [r7, #48]	; 0x30
 800f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f18a:	2300      	movs	r3, #0
 800f18c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f18e:	4b92      	ldr	r3, [pc, #584]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f192:	4a91      	ldr	r2, [pc, #580]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f194:	f043 0301 	orr.w	r3, r3, #1
 800f198:	6313      	str	r3, [r2, #48]	; 0x30
 800f19a:	4b8f      	ldr	r3, [pc, #572]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f19e:	f003 0301 	and.w	r3, r3, #1
 800f1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LP2_control_Pin|D3_control_Pin;
 800f1a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f1aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f1bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4886      	ldr	r0, [pc, #536]	; (800f3dc <HAL_TIM_MspPostInit+0x290>)
 800f1c4:	f002 fc90 	bl	8011ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LP3_control_Pin;
 800f1c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP3_control_GPIO_Port, &GPIO_InitStruct);
 800f1de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	487e      	ldr	r0, [pc, #504]	; (800f3e0 <HAL_TIM_MspPostInit+0x294>)
 800f1e6:	f002 fc7f 	bl	8011ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800f1ea:	e12d      	b.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM3)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a7c      	ldr	r2, [pc, #496]	; (800f3e4 <HAL_TIM_MspPostInit+0x298>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d13d      	bne.n	800f272 <HAL_TIM_MspPostInit+0x126>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1fa:	4b77      	ldr	r3, [pc, #476]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fe:	4a76      	ldr	r2, [pc, #472]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f200:	f043 0304 	orr.w	r3, r3, #4
 800f204:	6313      	str	r3, [r2, #48]	; 0x30
 800f206:	4b74      	ldr	r3, [pc, #464]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20a:	f003 0304 	and.w	r3, r3, #4
 800f20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f212:	2300      	movs	r3, #0
 800f214:	627b      	str	r3, [r7, #36]	; 0x24
 800f216:	4b70      	ldr	r3, [pc, #448]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f21a:	4a6f      	ldr	r2, [pc, #444]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f21c:	f043 0302 	orr.w	r3, r3, #2
 800f220:	6313      	str	r3, [r2, #48]	; 0x30
 800f222:	4b6d      	ldr	r3, [pc, #436]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f226:	f003 0302 	and.w	r3, r3, #2
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = D4_control_Pin;
 800f22e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f232:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f234:	2302      	movs	r3, #2
 800f236:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f238:	2300      	movs	r3, #0
 800f23a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f23c:	2300      	movs	r3, #0
 800f23e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f240:	2302      	movs	r3, #2
 800f242:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D4_control_GPIO_Port, &GPIO_InitStruct);
 800f244:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f248:	4619      	mov	r1, r3
 800f24a:	4867      	ldr	r0, [pc, #412]	; (800f3e8 <HAL_TIM_MspPostInit+0x29c>)
 800f24c:	f002 fc4c 	bl	8011ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = D1_control_Pin;
 800f250:	2310      	movs	r3, #16
 800f252:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f254:	2302      	movs	r3, #2
 800f256:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f258:	2300      	movs	r3, #0
 800f25a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f25c:	2300      	movs	r3, #0
 800f25e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f260:	2302      	movs	r3, #2
 800f262:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D1_control_GPIO_Port, &GPIO_InitStruct);
 800f264:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f268:	4619      	mov	r1, r3
 800f26a:	485c      	ldr	r0, [pc, #368]	; (800f3dc <HAL_TIM_MspPostInit+0x290>)
 800f26c:	f002 fc3c 	bl	8011ae8 <HAL_GPIO_Init>
}
 800f270:	e0ea      	b.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM4)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a5d      	ldr	r2, [pc, #372]	; (800f3ec <HAL_TIM_MspPostInit+0x2a0>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d13d      	bne.n	800f2f8 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f27c:	2300      	movs	r3, #0
 800f27e:	623b      	str	r3, [r7, #32]
 800f280:	4b55      	ldr	r3, [pc, #340]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f284:	4a54      	ldr	r2, [pc, #336]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f286:	f043 0308 	orr.w	r3, r3, #8
 800f28a:	6313      	str	r3, [r2, #48]	; 0x30
 800f28c:	4b52      	ldr	r3, [pc, #328]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f290:	f003 0308 	and.w	r3, r3, #8
 800f294:	623b      	str	r3, [r7, #32]
 800f296:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f298:	2300      	movs	r3, #0
 800f29a:	61fb      	str	r3, [r7, #28]
 800f29c:	4b4e      	ldr	r3, [pc, #312]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a0:	4a4d      	ldr	r2, [pc, #308]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f2a2:	f043 0302 	orr.w	r3, r3, #2
 800f2a6:	6313      	str	r3, [r2, #48]	; 0x30
 800f2a8:	4b4b      	ldr	r3, [pc, #300]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ac:	f003 0302 	and.w	r3, r3, #2
 800f2b0:	61fb      	str	r3, [r7, #28]
 800f2b2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800f2b4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800f2b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2ba:	2302      	movs	r3, #2
 800f2bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f2ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	4847      	ldr	r0, [pc, #284]	; (800f3f0 <HAL_TIM_MspPostInit+0x2a4>)
 800f2d2:	f002 fc09 	bl	8011ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LP9_control_Pin;
 800f2d6:	2380      	movs	r3, #128	; 0x80
 800f2d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2da:	2302      	movs	r3, #2
 800f2dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f2e6:	2302      	movs	r3, #2
 800f2e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP9_control_GPIO_Port, &GPIO_InitStruct);
 800f2ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	483a      	ldr	r0, [pc, #232]	; (800f3dc <HAL_TIM_MspPostInit+0x290>)
 800f2f2:	f002 fbf9 	bl	8011ae8 <HAL_GPIO_Init>
}
 800f2f6:	e0a7      	b.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM8)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a3d      	ldr	r2, [pc, #244]	; (800f3f4 <HAL_TIM_MspPostInit+0x2a8>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d11f      	bne.n	800f342 <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f302:	2300      	movs	r3, #0
 800f304:	61bb      	str	r3, [r7, #24]
 800f306:	4b34      	ldr	r3, [pc, #208]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f30a:	4a33      	ldr	r2, [pc, #204]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f30c:	f043 0304 	orr.w	r3, r3, #4
 800f310:	6313      	str	r3, [r2, #48]	; 0x30
 800f312:	4b31      	ldr	r3, [pc, #196]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f316:	f003 0304 	and.w	r3, r3, #4
 800f31a:	61bb      	str	r3, [r7, #24]
 800f31c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LP8_control_Pin|HP2_control_Pin|HP1_control_Pin;
 800f31e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800f322:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f324:	2302      	movs	r3, #2
 800f326:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f328:	2300      	movs	r3, #0
 800f32a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f32c:	2300      	movs	r3, #0
 800f32e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f330:	2303      	movs	r3, #3
 800f332:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f338:	4619      	mov	r1, r3
 800f33a:	482b      	ldr	r0, [pc, #172]	; (800f3e8 <HAL_TIM_MspPostInit+0x29c>)
 800f33c:	f002 fbd4 	bl	8011ae8 <HAL_GPIO_Init>
}
 800f340:	e082      	b.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM10)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	4a2c      	ldr	r2, [pc, #176]	; (800f3f8 <HAL_TIM_MspPostInit+0x2ac>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d11f      	bne.n	800f38c <HAL_TIM_MspPostInit+0x240>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f34c:	2300      	movs	r3, #0
 800f34e:	617b      	str	r3, [r7, #20]
 800f350:	4b21      	ldr	r3, [pc, #132]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f354:	4a20      	ldr	r2, [pc, #128]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f356:	f043 0302 	orr.w	r3, r3, #2
 800f35a:	6313      	str	r3, [r2, #48]	; 0x30
 800f35c:	4b1e      	ldr	r3, [pc, #120]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f360:	f003 0302 	and.w	r3, r3, #2
 800f364:	617b      	str	r3, [r7, #20]
 800f366:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = D2_control_Pin;
 800f368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f36c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f36e:	2302      	movs	r3, #2
 800f370:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f372:	2300      	movs	r3, #0
 800f374:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f376:	2300      	movs	r3, #0
 800f378:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800f37a:	2303      	movs	r3, #3
 800f37c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(D2_control_GPIO_Port, &GPIO_InitStruct);
 800f37e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f382:	4619      	mov	r1, r3
 800f384:	4815      	ldr	r0, [pc, #84]	; (800f3dc <HAL_TIM_MspPostInit+0x290>)
 800f386:	f002 fbaf 	bl	8011ae8 <HAL_GPIO_Init>
}
 800f38a:	e05d      	b.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
  else if(timHandle->Instance==TIM11)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a1a      	ldr	r2, [pc, #104]	; (800f3fc <HAL_TIM_MspPostInit+0x2b0>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d134      	bne.n	800f400 <HAL_TIM_MspPostInit+0x2b4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f396:	2300      	movs	r3, #0
 800f398:	613b      	str	r3, [r7, #16]
 800f39a:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39e:	4a0e      	ldr	r2, [pc, #56]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f3a0:	f043 0302 	orr.w	r3, r3, #2
 800f3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800f3a6:	4b0c      	ldr	r3, [pc, #48]	; (800f3d8 <HAL_TIM_MspPostInit+0x28c>)
 800f3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3aa:	f003 0302 	and.w	r3, r3, #2
 800f3ae:	613b      	str	r3, [r7, #16]
 800f3b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LP10_control_Pin;
 800f3b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP10_control_GPIO_Port, &GPIO_InitStruct);
 800f3c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	4803      	ldr	r0, [pc, #12]	; (800f3dc <HAL_TIM_MspPostInit+0x290>)
 800f3d0:	f002 fb8a 	bl	8011ae8 <HAL_GPIO_Init>
}
 800f3d4:	e038      	b.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
 800f3d6:	bf00      	nop
 800f3d8:	40023800 	.word	0x40023800
 800f3dc:	40020400 	.word	0x40020400
 800f3e0:	40020000 	.word	0x40020000
 800f3e4:	40000400 	.word	0x40000400
 800f3e8:	40020800 	.word	0x40020800
 800f3ec:	40000800 	.word	0x40000800
 800f3f0:	40020c00 	.word	0x40020c00
 800f3f4:	40010400 	.word	0x40010400
 800f3f8:	40014400 	.word	0x40014400
 800f3fc:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM12)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a12      	ldr	r2, [pc, #72]	; (800f450 <HAL_TIM_MspPostInit+0x304>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d11e      	bne.n	800f448 <HAL_TIM_MspPostInit+0x2fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f40a:	2300      	movs	r3, #0
 800f40c:	60fb      	str	r3, [r7, #12]
 800f40e:	4b11      	ldr	r3, [pc, #68]	; (800f454 <HAL_TIM_MspPostInit+0x308>)
 800f410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f412:	4a10      	ldr	r2, [pc, #64]	; (800f454 <HAL_TIM_MspPostInit+0x308>)
 800f414:	f043 0302 	orr.w	r3, r3, #2
 800f418:	6313      	str	r3, [r2, #48]	; 0x30
 800f41a:	4b0e      	ldr	r3, [pc, #56]	; (800f454 <HAL_TIM_MspPostInit+0x308>)
 800f41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41e:	f003 0302 	and.w	r3, r3, #2
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LP1_control_Pin;
 800f426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f42a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f42c:	2302      	movs	r3, #2
 800f42e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f430:	2300      	movs	r3, #0
 800f432:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f434:	2300      	movs	r3, #0
 800f436:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800f438:	2309      	movs	r3, #9
 800f43a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(LP1_control_GPIO_Port, &GPIO_InitStruct);
 800f43c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f440:	4619      	mov	r1, r3
 800f442:	4805      	ldr	r0, [pc, #20]	; (800f458 <HAL_TIM_MspPostInit+0x30c>)
 800f444:	f002 fb50 	bl	8011ae8 <HAL_GPIO_Init>
}
 800f448:	bf00      	nop
 800f44a:	3748      	adds	r7, #72	; 0x48
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	40001800 	.word	0x40001800
 800f454:	40023800 	.word	0x40023800
 800f458:	40020400 	.word	0x40020400

0800f45c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800f460:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f462:	4a11      	ldr	r2, [pc, #68]	; (800f4a8 <MX_USART2_UART_Init+0x4c>)
 800f464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800f466:	4b0f      	ldr	r3, [pc, #60]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f468:	4a10      	ldr	r2, [pc, #64]	; (800f4ac <MX_USART2_UART_Init+0x50>)
 800f46a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f46c:	4b0d      	ldr	r3, [pc, #52]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f46e:	2200      	movs	r2, #0
 800f470:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f472:	4b0c      	ldr	r3, [pc, #48]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f474:	2200      	movs	r2, #0
 800f476:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f478:	4b0a      	ldr	r3, [pc, #40]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f47e:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f480:	220c      	movs	r2, #12
 800f482:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f484:	4b07      	ldr	r3, [pc, #28]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f486:	2200      	movs	r2, #0
 800f488:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f48a:	4b06      	ldr	r3, [pc, #24]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800f490:	4804      	ldr	r0, [pc, #16]	; (800f4a4 <MX_USART2_UART_Init+0x48>)
 800f492:	f004 fe41 	bl	8014118 <HAL_UART_Init>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800f49c:	f7fd fc54 	bl	800cd48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800f4a0:	bf00      	nop
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	20003140 	.word	0x20003140
 800f4a8:	40004400 	.word	0x40004400
 800f4ac:	001e8480 	.word	0x001e8480

0800f4b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b08a      	sub	sp, #40	; 0x28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4b8:	f107 0314 	add.w	r3, r7, #20
 800f4bc:	2200      	movs	r2, #0
 800f4be:	601a      	str	r2, [r3, #0]
 800f4c0:	605a      	str	r2, [r3, #4]
 800f4c2:	609a      	str	r2, [r3, #8]
 800f4c4:	60da      	str	r2, [r3, #12]
 800f4c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a4c      	ldr	r2, [pc, #304]	; (800f600 <HAL_UART_MspInit+0x150>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	f040 8091 	bne.w	800f5f6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	613b      	str	r3, [r7, #16]
 800f4d8:	4b4a      	ldr	r3, [pc, #296]	; (800f604 <HAL_UART_MspInit+0x154>)
 800f4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4dc:	4a49      	ldr	r2, [pc, #292]	; (800f604 <HAL_UART_MspInit+0x154>)
 800f4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4e2:	6413      	str	r3, [r2, #64]	; 0x40
 800f4e4:	4b47      	ldr	r3, [pc, #284]	; (800f604 <HAL_UART_MspInit+0x154>)
 800f4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4ec:	613b      	str	r3, [r7, #16]
 800f4ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	60fb      	str	r3, [r7, #12]
 800f4f4:	4b43      	ldr	r3, [pc, #268]	; (800f604 <HAL_UART_MspInit+0x154>)
 800f4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4f8:	4a42      	ldr	r2, [pc, #264]	; (800f604 <HAL_UART_MspInit+0x154>)
 800f4fa:	f043 0308 	orr.w	r3, r3, #8
 800f4fe:	6313      	str	r3, [r2, #48]	; 0x30
 800f500:	4b40      	ldr	r3, [pc, #256]	; (800f604 <HAL_UART_MspInit+0x154>)
 800f502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f504:	f003 0308 	and.w	r3, r3, #8
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800f50c:	2360      	movs	r3, #96	; 0x60
 800f50e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f510:	2302      	movs	r3, #2
 800f512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f514:	2300      	movs	r3, #0
 800f516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f518:	2303      	movs	r3, #3
 800f51a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f51c:	2307      	movs	r3, #7
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f520:	f107 0314 	add.w	r3, r7, #20
 800f524:	4619      	mov	r1, r3
 800f526:	4838      	ldr	r0, [pc, #224]	; (800f608 <HAL_UART_MspInit+0x158>)
 800f528:	f002 fade 	bl	8011ae8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800f52c:	4b37      	ldr	r3, [pc, #220]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f52e:	4a38      	ldr	r2, [pc, #224]	; (800f610 <HAL_UART_MspInit+0x160>)
 800f530:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800f532:	4b36      	ldr	r3, [pc, #216]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f538:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f53a:	4b34      	ldr	r3, [pc, #208]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f53c:	2240      	movs	r2, #64	; 0x40
 800f53e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f540:	4b32      	ldr	r3, [pc, #200]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f542:	2200      	movs	r2, #0
 800f544:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f546:	4b31      	ldr	r3, [pc, #196]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f54c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f54e:	4b2f      	ldr	r3, [pc, #188]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f550:	2200      	movs	r2, #0
 800f552:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f554:	4b2d      	ldr	r3, [pc, #180]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f556:	2200      	movs	r2, #0
 800f558:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800f55a:	4b2c      	ldr	r3, [pc, #176]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f560:	4b2a      	ldr	r3, [pc, #168]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f562:	2200      	movs	r2, #0
 800f564:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f566:	4b29      	ldr	r3, [pc, #164]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f568:	2200      	movs	r2, #0
 800f56a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800f56c:	4827      	ldr	r0, [pc, #156]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f56e:	f001 fcbb 	bl	8010ee8 <HAL_DMA_Init>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800f578:	f7fd fbe6 	bl	800cd48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a23      	ldr	r2, [pc, #140]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f580:	635a      	str	r2, [r3, #52]	; 0x34
 800f582:	4a22      	ldr	r2, [pc, #136]	; (800f60c <HAL_UART_MspInit+0x15c>)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800f588:	4b22      	ldr	r3, [pc, #136]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f58a:	4a23      	ldr	r2, [pc, #140]	; (800f618 <HAL_UART_MspInit+0x168>)
 800f58c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800f58e:	4b21      	ldr	r3, [pc, #132]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f590:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f594:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f596:	4b1f      	ldr	r3, [pc, #124]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f598:	2200      	movs	r2, #0
 800f59a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f59c:	4b1d      	ldr	r3, [pc, #116]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f59e:	2200      	movs	r2, #0
 800f5a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f5a2:	4b1c      	ldr	r3, [pc, #112]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f5aa:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f5b0:	4b18      	ldr	r3, [pc, #96]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800f5b6:	4b17      	ldr	r3, [pc, #92]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f5be:	4b15      	ldr	r3, [pc, #84]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f5c4:	4b13      	ldr	r3, [pc, #76]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800f5ca:	4812      	ldr	r0, [pc, #72]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5cc:	f001 fc8c 	bl	8010ee8 <HAL_DMA_Init>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800f5d6:	f7fd fbb7 	bl	800cd48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a0d      	ldr	r2, [pc, #52]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5de:	639a      	str	r2, [r3, #56]	; 0x38
 800f5e0:	4a0c      	ldr	r2, [pc, #48]	; (800f614 <HAL_UART_MspInit+0x164>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	2105      	movs	r1, #5
 800f5ea:	2026      	movs	r0, #38	; 0x26
 800f5ec:	f001 fc36 	bl	8010e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f5f0:	2026      	movs	r0, #38	; 0x26
 800f5f2:	f001 fc4f 	bl	8010e94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800f5f6:	bf00      	nop
 800f5f8:	3728      	adds	r7, #40	; 0x28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	40004400 	.word	0x40004400
 800f604:	40023800 	.word	0x40023800
 800f608:	40020c00 	.word	0x40020c00
 800f60c:	20003184 	.word	0x20003184
 800f610:	400260a0 	.word	0x400260a0
 800f614:	200031e4 	.word	0x200031e4
 800f618:	40026088 	.word	0x40026088

0800f61c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f61c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f654 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f622:	e003      	b.n	800f62c <LoopCopyDataInit>

0800f624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f624:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f62a:	3104      	adds	r1, #4

0800f62c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f62c:	480b      	ldr	r0, [pc, #44]	; (800f65c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f62e:	4b0c      	ldr	r3, [pc, #48]	; (800f660 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f634:	d3f6      	bcc.n	800f624 <CopyDataInit>
  ldr  r2, =_sbss
 800f636:	4a0b      	ldr	r2, [pc, #44]	; (800f664 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f638:	e002      	b.n	800f640 <LoopFillZerobss>

0800f63a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f63a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f63c:	f842 3b04 	str.w	r3, [r2], #4

0800f640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f640:	4b09      	ldr	r3, [pc, #36]	; (800f668 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f644:	d3f9      	bcc.n	800f63a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f646:	f7ff f94d 	bl	800e8e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f64a:	f00b faef 	bl	801ac2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f64e:	f7fd f90f 	bl	800c870 <main>
  bx  lr    
 800f652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f654:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f658:	0801c84c 	.word	0x0801c84c
  ldr  r0, =_sdata
 800f65c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f660:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800f664:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800f668:	200090a4 	.word	0x200090a4

0800f66c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f66c:	e7fe      	b.n	800f66c <ADC_IRQHandler>
	...

0800f670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f674:	4b0e      	ldr	r3, [pc, #56]	; (800f6b0 <HAL_Init+0x40>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a0d      	ldr	r2, [pc, #52]	; (800f6b0 <HAL_Init+0x40>)
 800f67a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f67e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f680:	4b0b      	ldr	r3, [pc, #44]	; (800f6b0 <HAL_Init+0x40>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a0a      	ldr	r2, [pc, #40]	; (800f6b0 <HAL_Init+0x40>)
 800f686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f68a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f68c:	4b08      	ldr	r3, [pc, #32]	; (800f6b0 <HAL_Init+0x40>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a07      	ldr	r2, [pc, #28]	; (800f6b0 <HAL_Init+0x40>)
 800f692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f698:	2003      	movs	r0, #3
 800f69a:	f001 fbd4 	bl	8010e46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f69e:	200f      	movs	r0, #15
 800f6a0:	f7fe ff34 	bl	800e50c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f6a4:	f7fe ff06 	bl	800e4b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	40023c00 	.word	0x40023c00

0800f6b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f6b8:	4b06      	ldr	r3, [pc, #24]	; (800f6d4 <HAL_IncTick+0x20>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	4b06      	ldr	r3, [pc, #24]	; (800f6d8 <HAL_IncTick+0x24>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	4a04      	ldr	r2, [pc, #16]	; (800f6d8 <HAL_IncTick+0x24>)
 800f6c6:	6013      	str	r3, [r2, #0]
}
 800f6c8:	bf00      	nop
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	2000003c 	.word	0x2000003c
 800f6d8:	20003244 	.word	0x20003244

0800f6dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	af00      	add	r7, sp, #0
  return uwTick;
 800f6e0:	4b03      	ldr	r3, [pc, #12]	; (800f6f0 <HAL_GetTick+0x14>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	20003244 	.word	0x20003244

0800f6f4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800f6f8:	4b03      	ldr	r3, [pc, #12]	; (800f708 <HAL_GetUIDw0+0x14>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	1fff7a10 	.word	0x1fff7a10

0800f70c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800f70c:	b480      	push	{r7}
 800f70e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800f710:	4b03      	ldr	r3, [pc, #12]	; (800f720 <HAL_GetUIDw1+0x14>)
 800f712:	681b      	ldr	r3, [r3, #0]
}
 800f714:	4618      	mov	r0, r3
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	1fff7a14 	.word	0x1fff7a14

0800f724 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800f724:	b480      	push	{r7}
 800f726:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800f728:	4b03      	ldr	r3, [pc, #12]	; (800f738 <HAL_GetUIDw2+0x14>)
 800f72a:	681b      	ldr	r3, [r3, #0]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	1fff7a18 	.word	0x1fff7a18

0800f73c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f744:	2300      	movs	r3, #0
 800f746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d101      	bne.n	800f752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	e033      	b.n	800f7ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f756:	2b00      	cmp	r3, #0
 800f758:	d109      	bne.n	800f76e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7f7 fc0a 	bl	8006f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2200      	movs	r2, #0
 800f76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f772:	f003 0310 	and.w	r3, r3, #16
 800f776:	2b00      	cmp	r3, #0
 800f778:	d118      	bne.n	800f7ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f782:	f023 0302 	bic.w	r3, r3, #2
 800f786:	f043 0202 	orr.w	r2, r3, #2
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fa5e 	bl	800fc50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	f043 0201 	orr.w	r2, r3, #1
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	641a      	str	r2, [r3, #64]	; 0x40
 800f7aa:	e001      	b.n	800f7b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3710      	adds	r7, #16
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
	...

0800f7c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d101      	bne.n	800f7e2 <HAL_ADC_Start_DMA+0x1e>
 800f7de:	2302      	movs	r3, #2
 800f7e0:	e0e9      	b.n	800f9b6 <HAL_ADC_Start_DMA+0x1f2>
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	f003 0301 	and.w	r3, r3, #1
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d018      	beq.n	800f82a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	689a      	ldr	r2, [r3, #8]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f042 0201 	orr.w	r2, r2, #1
 800f806:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f808:	4b6d      	ldr	r3, [pc, #436]	; (800f9c0 <HAL_ADC_Start_DMA+0x1fc>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a6d      	ldr	r2, [pc, #436]	; (800f9c4 <HAL_ADC_Start_DMA+0x200>)
 800f80e:	fba2 2303 	umull	r2, r3, r2, r3
 800f812:	0c9a      	lsrs	r2, r3, #18
 800f814:	4613      	mov	r3, r2
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	4413      	add	r3, r2
 800f81a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f81c:	e002      	b.n	800f824 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	3b01      	subs	r3, #1
 800f822:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1f9      	bne.n	800f81e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f838:	d107      	bne.n	800f84a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	689a      	ldr	r2, [r3, #8]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f848:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b01      	cmp	r3, #1
 800f856:	f040 80a1 	bne.w	800f99c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f862:	f023 0301 	bic.w	r3, r3, #1
 800f866:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d007      	beq.n	800f88c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f880:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f884:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f898:	d106      	bne.n	800f8a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f89e:	f023 0206 	bic.w	r2, r3, #6
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	645a      	str	r2, [r3, #68]	; 0x44
 800f8a6:	e002      	b.n	800f8ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f8b6:	4b44      	ldr	r3, [pc, #272]	; (800f9c8 <HAL_ADC_Start_DMA+0x204>)
 800f8b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8be:	4a43      	ldr	r2, [pc, #268]	; (800f9cc <HAL_ADC_Start_DMA+0x208>)
 800f8c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c6:	4a42      	ldr	r2, [pc, #264]	; (800f9d0 <HAL_ADC_Start_DMA+0x20c>)
 800f8c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ce:	4a41      	ldr	r2, [pc, #260]	; (800f9d4 <HAL_ADC_Start_DMA+0x210>)
 800f8d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f8da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f8ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	689a      	ldr	r2, [r3, #8]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	334c      	adds	r3, #76	; 0x4c
 800f906:	4619      	mov	r1, r3
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f001 fb9a 	bl	8011044 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	f003 031f 	and.w	r3, r3, #31
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d12a      	bne.n	800f972 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a2d      	ldr	r2, [pc, #180]	; (800f9d8 <HAL_ADC_Start_DMA+0x214>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d015      	beq.n	800f952 <HAL_ADC_Start_DMA+0x18e>
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a2c      	ldr	r2, [pc, #176]	; (800f9dc <HAL_ADC_Start_DMA+0x218>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d105      	bne.n	800f93c <HAL_ADC_Start_DMA+0x178>
 800f930:	4b25      	ldr	r3, [pc, #148]	; (800f9c8 <HAL_ADC_Start_DMA+0x204>)
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	f003 031f 	and.w	r3, r3, #31
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00a      	beq.n	800f952 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a27      	ldr	r2, [pc, #156]	; (800f9e0 <HAL_ADC_Start_DMA+0x21c>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d136      	bne.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
 800f946:	4b20      	ldr	r3, [pc, #128]	; (800f9c8 <HAL_ADC_Start_DMA+0x204>)
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	f003 0310 	and.w	r3, r3, #16
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d130      	bne.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d129      	bne.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	689a      	ldr	r2, [r3, #8]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f96e:	609a      	str	r2, [r3, #8]
 800f970:	e020      	b.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a18      	ldr	r2, [pc, #96]	; (800f9d8 <HAL_ADC_Start_DMA+0x214>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d11b      	bne.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f986:	2b00      	cmp	r3, #0
 800f988:	d114      	bne.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f998:	609a      	str	r2, [r3, #8]
 800f99a:	e00b      	b.n	800f9b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a0:	f043 0210 	orr.w	r2, r3, #16
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ac:	f043 0201 	orr.w	r2, r3, #1
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3718      	adds	r7, #24
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	20000034 	.word	0x20000034
 800f9c4:	431bde83 	.word	0x431bde83
 800f9c8:	40012300 	.word	0x40012300
 800f9cc:	0800fe49 	.word	0x0800fe49
 800f9d0:	0800ff03 	.word	0x0800ff03
 800f9d4:	0800ff1f 	.word	0x0800ff1f
 800f9d8:	40012000 	.word	0x40012000
 800f9dc:	40012100 	.word	0x40012100
 800f9e0:	40012200 	.word	0x40012200

0800f9e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d101      	bne.n	800fa28 <HAL_ADC_ConfigChannel+0x1c>
 800fa24:	2302      	movs	r3, #2
 800fa26:	e105      	b.n	800fc34 <HAL_ADC_ConfigChannel+0x228>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b09      	cmp	r3, #9
 800fa36:	d925      	bls.n	800fa84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68d9      	ldr	r1, [r3, #12]
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	461a      	mov	r2, r3
 800fa46:	4613      	mov	r3, r2
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	4413      	add	r3, r2
 800fa4c:	3b1e      	subs	r3, #30
 800fa4e:	2207      	movs	r2, #7
 800fa50:	fa02 f303 	lsl.w	r3, r2, r3
 800fa54:	43da      	mvns	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	400a      	ands	r2, r1
 800fa5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68d9      	ldr	r1, [r3, #12]
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	689a      	ldr	r2, [r3, #8]
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	4618      	mov	r0, r3
 800fa70:	4603      	mov	r3, r0
 800fa72:	005b      	lsls	r3, r3, #1
 800fa74:	4403      	add	r3, r0
 800fa76:	3b1e      	subs	r3, #30
 800fa78:	409a      	lsls	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	430a      	orrs	r2, r1
 800fa80:	60da      	str	r2, [r3, #12]
 800fa82:	e022      	b.n	800faca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6919      	ldr	r1, [r3, #16]
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	461a      	mov	r2, r3
 800fa92:	4613      	mov	r3, r2
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	4413      	add	r3, r2
 800fa98:	2207      	movs	r2, #7
 800fa9a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa9e:	43da      	mvns	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	400a      	ands	r2, r1
 800faa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6919      	ldr	r1, [r3, #16]
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	689a      	ldr	r2, [r3, #8]
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	4618      	mov	r0, r3
 800faba:	4603      	mov	r3, r0
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	4403      	add	r3, r0
 800fac0:	409a      	lsls	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	430a      	orrs	r2, r1
 800fac8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	2b06      	cmp	r3, #6
 800fad0:	d824      	bhi.n	800fb1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	4613      	mov	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	4413      	add	r3, r2
 800fae2:	3b05      	subs	r3, #5
 800fae4:	221f      	movs	r2, #31
 800fae6:	fa02 f303 	lsl.w	r3, r2, r3
 800faea:	43da      	mvns	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	400a      	ands	r2, r1
 800faf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	4618      	mov	r0, r3
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	4613      	mov	r3, r2
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	4413      	add	r3, r2
 800fb0c:	3b05      	subs	r3, #5
 800fb0e:	fa00 f203 	lsl.w	r2, r0, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	430a      	orrs	r2, r1
 800fb18:	635a      	str	r2, [r3, #52]	; 0x34
 800fb1a:	e04c      	b.n	800fbb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	2b0c      	cmp	r3, #12
 800fb22:	d824      	bhi.n	800fb6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	4413      	add	r3, r2
 800fb34:	3b23      	subs	r3, #35	; 0x23
 800fb36:	221f      	movs	r2, #31
 800fb38:	fa02 f303 	lsl.w	r3, r2, r3
 800fb3c:	43da      	mvns	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	400a      	ands	r2, r1
 800fb44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	4618      	mov	r0, r3
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	4613      	mov	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	3b23      	subs	r3, #35	; 0x23
 800fb60:	fa00 f203 	lsl.w	r2, r0, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	430a      	orrs	r2, r1
 800fb6a:	631a      	str	r2, [r3, #48]	; 0x30
 800fb6c:	e023      	b.n	800fbb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	685a      	ldr	r2, [r3, #4]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	3b41      	subs	r3, #65	; 0x41
 800fb80:	221f      	movs	r2, #31
 800fb82:	fa02 f303 	lsl.w	r3, r2, r3
 800fb86:	43da      	mvns	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	400a      	ands	r2, r1
 800fb8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	4613      	mov	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	4413      	add	r3, r2
 800fba8:	3b41      	subs	r3, #65	; 0x41
 800fbaa:	fa00 f203 	lsl.w	r2, r0, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	430a      	orrs	r2, r1
 800fbb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fbb6:	4b22      	ldr	r3, [pc, #136]	; (800fc40 <HAL_ADC_ConfigChannel+0x234>)
 800fbb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a21      	ldr	r2, [pc, #132]	; (800fc44 <HAL_ADC_ConfigChannel+0x238>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d109      	bne.n	800fbd8 <HAL_ADC_ConfigChannel+0x1cc>
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b12      	cmp	r3, #18
 800fbca:	d105      	bne.n	800fbd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a19      	ldr	r2, [pc, #100]	; (800fc44 <HAL_ADC_ConfigChannel+0x238>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d123      	bne.n	800fc2a <HAL_ADC_ConfigChannel+0x21e>
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	2b10      	cmp	r3, #16
 800fbe8:	d003      	beq.n	800fbf2 <HAL_ADC_ConfigChannel+0x1e6>
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b11      	cmp	r3, #17
 800fbf0:	d11b      	bne.n	800fc2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b10      	cmp	r3, #16
 800fc04:	d111      	bne.n	800fc2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800fc06:	4b10      	ldr	r3, [pc, #64]	; (800fc48 <HAL_ADC_ConfigChannel+0x23c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a10      	ldr	r2, [pc, #64]	; (800fc4c <HAL_ADC_ConfigChannel+0x240>)
 800fc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc10:	0c9a      	lsrs	r2, r3, #18
 800fc12:	4613      	mov	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	005b      	lsls	r3, r3, #1
 800fc1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fc1c:	e002      	b.n	800fc24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	3b01      	subs	r3, #1
 800fc22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1f9      	bne.n	800fc1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3714      	adds	r7, #20
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr
 800fc40:	40012300 	.word	0x40012300
 800fc44:	40012000 	.word	0x40012000
 800fc48:	20000034 	.word	0x20000034
 800fc4c:	431bde83 	.word	0x431bde83

0800fc50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fc58:	4b79      	ldr	r3, [pc, #484]	; (800fe40 <ADC_Init+0x1f0>)
 800fc5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	685a      	ldr	r2, [r3, #4]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	431a      	orrs	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	6859      	ldr	r1, [r3, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	691b      	ldr	r3, [r3, #16]
 800fc90:	021a      	lsls	r2, r3, #8
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	430a      	orrs	r2, r1
 800fc98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	685a      	ldr	r2, [r3, #4]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800fca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6859      	ldr	r1, [r3, #4]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	689a      	ldr	r2, [r3, #8]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	689a      	ldr	r2, [r3, #8]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fcca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6899      	ldr	r1, [r3, #8]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68da      	ldr	r2, [r3, #12]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce2:	4a58      	ldr	r2, [pc, #352]	; (800fe44 <ADC_Init+0x1f4>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d022      	beq.n	800fd2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	689a      	ldr	r2, [r3, #8]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fcf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	6899      	ldr	r1, [r3, #8]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	430a      	orrs	r2, r1
 800fd08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	689a      	ldr	r2, [r3, #8]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fd18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	6899      	ldr	r1, [r3, #8]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	430a      	orrs	r2, r1
 800fd2a:	609a      	str	r2, [r3, #8]
 800fd2c:	e00f      	b.n	800fd4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	689a      	ldr	r2, [r3, #8]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fd3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	689a      	ldr	r2, [r3, #8]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fd4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	689a      	ldr	r2, [r3, #8]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f022 0202 	bic.w	r2, r2, #2
 800fd5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	6899      	ldr	r1, [r3, #8]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	7e1b      	ldrb	r3, [r3, #24]
 800fd68:	005a      	lsls	r2, r3, #1
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d01b      	beq.n	800fdb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	685a      	ldr	r2, [r3, #4]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fd9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	6859      	ldr	r1, [r3, #4]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda6:	3b01      	subs	r3, #1
 800fda8:	035a      	lsls	r2, r3, #13
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	430a      	orrs	r2, r1
 800fdb0:	605a      	str	r2, [r3, #4]
 800fdb2:	e007      	b.n	800fdc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	685a      	ldr	r2, [r3, #4]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fdc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800fdd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	69db      	ldr	r3, [r3, #28]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	051a      	lsls	r2, r3, #20
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	430a      	orrs	r2, r1
 800fde8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	689a      	ldr	r2, [r3, #8]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fdf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	6899      	ldr	r1, [r3, #8]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe06:	025a      	lsls	r2, r3, #9
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	430a      	orrs	r2, r1
 800fe0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	689a      	ldr	r2, [r3, #8]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	6899      	ldr	r1, [r3, #8]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	695b      	ldr	r3, [r3, #20]
 800fe2a:	029a      	lsls	r2, r3, #10
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	430a      	orrs	r2, r1
 800fe32:	609a      	str	r2, [r3, #8]
}
 800fe34:	bf00      	nop
 800fe36:	3714      	adds	r7, #20
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr
 800fe40:	40012300 	.word	0x40012300
 800fe44:	0f000001 	.word	0x0f000001

0800fe48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d13c      	bne.n	800fedc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d12b      	bne.n	800fed4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d127      	bne.n	800fed4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d006      	beq.n	800fea0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d119      	bne.n	800fed4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f022 0220 	bic.w	r2, r2, #32
 800feae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d105      	bne.n	800fed4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fecc:	f043 0201 	orr.w	r2, r3, #1
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7fc fe65 	bl	800cba4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800feda:	e00e      	b.n	800fefa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fee0:	f003 0310 	and.w	r3, r3, #16
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d003      	beq.n	800fef0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f7ff fd85 	bl	800f9f8 <HAL_ADC_ErrorCallback>
}
 800feee:	e004      	b.n	800fefa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	4798      	blx	r3
}
 800fefa:	bf00      	nop
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff fd67 	bl	800f9e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ff16:	bf00      	nop
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b084      	sub	sp, #16
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2240      	movs	r2, #64	; 0x40
 800ff30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff36:	f043 0204 	orr.w	r2, r3, #4
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f7ff fd5a 	bl	800f9f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ff44:	bf00      	nop
 800ff46:	3710      	adds	r7, #16
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d101      	bne.n	800ff5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e0ed      	b.n	801013a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d102      	bne.n	800ff70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f7f7 f982 	bl	8007274 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f042 0201 	orr.w	r2, r2, #1
 800ff7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ff80:	f7ff fbac 	bl	800f6dc <HAL_GetTick>
 800ff84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ff86:	e012      	b.n	800ffae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ff88:	f7ff fba8 	bl	800f6dc <HAL_GetTick>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	2b0a      	cmp	r3, #10
 800ff94:	d90b      	bls.n	800ffae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2205      	movs	r2, #5
 800ffa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e0c5      	b.n	801013a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d0e5      	beq.n	800ff88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f022 0202 	bic.w	r2, r2, #2
 800ffca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ffcc:	f7ff fb86 	bl	800f6dc <HAL_GetTick>
 800ffd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ffd2:	e012      	b.n	800fffa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ffd4:	f7ff fb82 	bl	800f6dc <HAL_GetTick>
 800ffd8:	4602      	mov	r2, r0
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	2b0a      	cmp	r3, #10
 800ffe0:	d90b      	bls.n	800fffa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2205      	movs	r2, #5
 800fff2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800fff6:	2301      	movs	r3, #1
 800fff8:	e09f      	b.n	801013a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	f003 0302 	and.w	r3, r3, #2
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1e5      	bne.n	800ffd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	7e1b      	ldrb	r3, [r3, #24]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d108      	bne.n	8010022 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801001e:	601a      	str	r2, [r3, #0]
 8010020:	e007      	b.n	8010032 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010030:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	7e5b      	ldrb	r3, [r3, #25]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d108      	bne.n	801004c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	e007      	b.n	801005c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801005a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	7e9b      	ldrb	r3, [r3, #26]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d108      	bne.n	8010076 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f042 0220 	orr.w	r2, r2, #32
 8010072:	601a      	str	r2, [r3, #0]
 8010074:	e007      	b.n	8010086 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f022 0220 	bic.w	r2, r2, #32
 8010084:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	7edb      	ldrb	r3, [r3, #27]
 801008a:	2b01      	cmp	r3, #1
 801008c:	d108      	bne.n	80100a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f022 0210 	bic.w	r2, r2, #16
 801009c:	601a      	str	r2, [r3, #0]
 801009e:	e007      	b.n	80100b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f042 0210 	orr.w	r2, r2, #16
 80100ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	7f1b      	ldrb	r3, [r3, #28]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d108      	bne.n	80100ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f042 0208 	orr.w	r2, r2, #8
 80100c6:	601a      	str	r2, [r3, #0]
 80100c8:	e007      	b.n	80100da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f022 0208 	bic.w	r2, r2, #8
 80100d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	7f5b      	ldrb	r3, [r3, #29]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d108      	bne.n	80100f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f042 0204 	orr.w	r2, r2, #4
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	e007      	b.n	8010104 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f022 0204 	bic.w	r2, r2, #4
 8010102:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	689a      	ldr	r2, [r3, #8]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	431a      	orrs	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	691b      	ldr	r3, [r3, #16]
 8010112:	431a      	orrs	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	695b      	ldr	r3, [r3, #20]
 8010118:	ea42 0103 	orr.w	r1, r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	1e5a      	subs	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	430a      	orrs	r2, r1
 8010128:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3710      	adds	r7, #16
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
	...

08010144 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 3020 	ldrb.w	r3, [r3, #32]
 801015a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 801015c:	7cfb      	ldrb	r3, [r7, #19]
 801015e:	2b01      	cmp	r3, #1
 8010160:	d003      	beq.n	801016a <HAL_CAN_ConfigFilter+0x26>
 8010162:	7cfb      	ldrb	r3, [r7, #19]
 8010164:	2b02      	cmp	r3, #2
 8010166:	f040 80be 	bne.w	80102e6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 801016a:	4b65      	ldr	r3, [pc, #404]	; (8010300 <HAL_CAN_ConfigFilter+0x1bc>)
 801016c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010174:	f043 0201 	orr.w	r2, r3, #1
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010184:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010198:	021b      	lsls	r3, r3, #8
 801019a:	431a      	orrs	r2, r3
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	695b      	ldr	r3, [r3, #20]
 80101a6:	f003 031f 	and.w	r3, r3, #31
 80101aa:	2201      	movs	r2, #1
 80101ac:	fa02 f303 	lsl.w	r3, r2, r3
 80101b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	43db      	mvns	r3, r3
 80101bc:	401a      	ands	r2, r3
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	69db      	ldr	r3, [r3, #28]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d123      	bne.n	8010214 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	43db      	mvns	r3, r3
 80101d6:	401a      	ands	r2, r3
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80101ea:	683a      	ldr	r2, [r7, #0]
 80101ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80101ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	3248      	adds	r2, #72	; 0x48
 80101f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010208:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801020a:	6979      	ldr	r1, [r7, #20]
 801020c:	3348      	adds	r3, #72	; 0x48
 801020e:	00db      	lsls	r3, r3, #3
 8010210:	440b      	add	r3, r1
 8010212:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	69db      	ldr	r3, [r3, #28]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d122      	bne.n	8010262 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	431a      	orrs	r2, r3
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801023c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	3248      	adds	r2, #72	; 0x48
 8010242:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010256:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010258:	6979      	ldr	r1, [r7, #20]
 801025a:	3348      	adds	r3, #72	; 0x48
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	440b      	add	r3, r1
 8010260:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	699b      	ldr	r3, [r3, #24]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d109      	bne.n	801027e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	43db      	mvns	r3, r3
 8010274:	401a      	ands	r2, r3
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801027c:	e007      	b.n	801028e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	431a      	orrs	r2, r3
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d109      	bne.n	80102aa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	43db      	mvns	r3, r3
 80102a0:	401a      	ands	r2, r3
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80102a8:	e007      	b.n	80102ba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	431a      	orrs	r2, r3
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	6a1b      	ldr	r3, [r3, #32]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d107      	bne.n	80102d2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	431a      	orrs	r2, r3
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80102d8:	f023 0201 	bic.w	r2, r3, #1
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80102e2:	2300      	movs	r3, #0
 80102e4:	e006      	b.n	80102f4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80102f2:	2301      	movs	r3, #1
  }
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	371c      	adds	r7, #28
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	40006400 	.word	0x40006400

08010304 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b01      	cmp	r3, #1
 8010316:	d12e      	bne.n	8010376 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2202      	movs	r2, #2
 801031c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f022 0201 	bic.w	r2, r2, #1
 801032e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010330:	f7ff f9d4 	bl	800f6dc <HAL_GetTick>
 8010334:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8010336:	e012      	b.n	801035e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010338:	f7ff f9d0 	bl	800f6dc <HAL_GetTick>
 801033c:	4602      	mov	r2, r0
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	2b0a      	cmp	r3, #10
 8010344:	d90b      	bls.n	801035e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801034a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2205      	movs	r2, #5
 8010356:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801035a:	2301      	movs	r3, #1
 801035c:	e012      	b.n	8010384 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	f003 0301 	and.w	r3, r3, #1
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1e5      	bne.n	8010338 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8010372:	2300      	movs	r3, #0
 8010374:	e006      	b.n	8010384 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010382:	2301      	movs	r3, #1
  }
}
 8010384:	4618      	mov	r0, r3
 8010386:	3710      	adds	r7, #16
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 801038c:	b480      	push	{r7}
 801038e:	b089      	sub	sp, #36	; 0x24
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	60b9      	str	r1, [r7, #8]
 8010396:	607a      	str	r2, [r7, #4]
 8010398:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80103a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	689b      	ldr	r3, [r3, #8]
 80103a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80103aa:	7ffb      	ldrb	r3, [r7, #31]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d003      	beq.n	80103b8 <HAL_CAN_AddTxMessage+0x2c>
 80103b0:	7ffb      	ldrb	r3, [r7, #31]
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	f040 80b8 	bne.w	8010528 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10a      	bne.n	80103d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d105      	bne.n	80103d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f000 80a0 	beq.w	8010518 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	0e1b      	lsrs	r3, r3, #24
 80103dc:	f003 0303 	and.w	r3, r3, #3
 80103e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d907      	bls.n	80103f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80103f4:	2301      	movs	r3, #1
 80103f6:	e09e      	b.n	8010536 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80103f8:	2201      	movs	r2, #1
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	409a      	lsls	r2, r3
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10d      	bne.n	8010426 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8010414:	68f9      	ldr	r1, [r7, #12]
 8010416:	6809      	ldr	r1, [r1, #0]
 8010418:	431a      	orrs	r2, r3
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	3318      	adds	r3, #24
 801041e:	011b      	lsls	r3, r3, #4
 8010420:	440b      	add	r3, r1
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	e00f      	b.n	8010446 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010430:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010436:	68f9      	ldr	r1, [r7, #12]
 8010438:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 801043a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	3318      	adds	r3, #24
 8010440:	011b      	lsls	r3, r3, #4
 8010442:	440b      	add	r3, r1
 8010444:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	6819      	ldr	r1, [r3, #0]
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	691a      	ldr	r2, [r3, #16]
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	3318      	adds	r3, #24
 8010452:	011b      	lsls	r3, r3, #4
 8010454:	440b      	add	r3, r1
 8010456:	3304      	adds	r3, #4
 8010458:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	7d1b      	ldrb	r3, [r3, #20]
 801045e:	2b01      	cmp	r3, #1
 8010460:	d111      	bne.n	8010486 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	3318      	adds	r3, #24
 801046a:	011b      	lsls	r3, r3, #4
 801046c:	4413      	add	r3, r2
 801046e:	3304      	adds	r3, #4
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	68fa      	ldr	r2, [r7, #12]
 8010474:	6811      	ldr	r1, [r2, #0]
 8010476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	3318      	adds	r3, #24
 801047e:	011b      	lsls	r3, r3, #4
 8010480:	440b      	add	r3, r1
 8010482:	3304      	adds	r3, #4
 8010484:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	3307      	adds	r3, #7
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	061a      	lsls	r2, r3, #24
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	3306      	adds	r3, #6
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	041b      	lsls	r3, r3, #16
 8010496:	431a      	orrs	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	3305      	adds	r3, #5
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	021b      	lsls	r3, r3, #8
 80104a0:	4313      	orrs	r3, r2
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	3204      	adds	r2, #4
 80104a6:	7812      	ldrb	r2, [r2, #0]
 80104a8:	4610      	mov	r0, r2
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	6811      	ldr	r1, [r2, #0]
 80104ae:	ea43 0200 	orr.w	r2, r3, r0
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	011b      	lsls	r3, r3, #4
 80104b6:	440b      	add	r3, r1
 80104b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80104bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	3303      	adds	r3, #3
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	061a      	lsls	r2, r3, #24
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	3302      	adds	r3, #2
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	041b      	lsls	r3, r3, #16
 80104ce:	431a      	orrs	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	3301      	adds	r3, #1
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	021b      	lsls	r3, r3, #8
 80104d8:	4313      	orrs	r3, r2
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	7812      	ldrb	r2, [r2, #0]
 80104de:	4610      	mov	r0, r2
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	6811      	ldr	r1, [r2, #0]
 80104e4:	ea43 0200 	orr.w	r2, r3, r0
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	011b      	lsls	r3, r3, #4
 80104ec:	440b      	add	r3, r1
 80104ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80104f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	3318      	adds	r3, #24
 80104fc:	011b      	lsls	r3, r3, #4
 80104fe:	4413      	add	r3, r2
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	68fa      	ldr	r2, [r7, #12]
 8010504:	6811      	ldr	r1, [r2, #0]
 8010506:	f043 0201 	orr.w	r2, r3, #1
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	3318      	adds	r3, #24
 801050e:	011b      	lsls	r3, r3, #4
 8010510:	440b      	add	r3, r1
 8010512:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	e00e      	b.n	8010536 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801051c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e006      	b.n	8010536 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010534:	2301      	movs	r3, #1
  }
}
 8010536:	4618      	mov	r0, r3
 8010538:	3724      	adds	r7, #36	; 0x24
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr

08010542 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8010542:	b480      	push	{r7}
 8010544:	b085      	sub	sp, #20
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 801054a:	2300      	movs	r3, #0
 801054c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010554:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8010556:	7afb      	ldrb	r3, [r7, #11]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d002      	beq.n	8010562 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 801055c:	7afb      	ldrb	r3, [r7, #11]
 801055e:	2b02      	cmp	r3, #2
 8010560:	d11d      	bne.n	801059e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	3301      	adds	r3, #1
 8010574:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3301      	adds	r3, #1
 8010588:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	3301      	adds	r3, #1
 801059c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 801059e:	68fb      	ldr	r3, [r7, #12]
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3714      	adds	r7, #20
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr

080105ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80105ac:	b480      	push	{r7}
 80105ae:	b087      	sub	sp, #28
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
 80105b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80105c2:	7dfb      	ldrb	r3, [r7, #23]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d003      	beq.n	80105d0 <HAL_CAN_GetRxMessage+0x24>
 80105c8:	7dfb      	ldrb	r3, [r7, #23]
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	f040 80f3 	bne.w	80107b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d10e      	bne.n	80105f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	f003 0303 	and.w	r3, r3, #3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d116      	bne.n	8010612 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80105f0:	2301      	movs	r3, #1
 80105f2:	e0e7      	b.n	80107c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	f003 0303 	and.w	r3, r3, #3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d107      	bne.n	8010612 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801060e:	2301      	movs	r3, #1
 8010610:	e0d8      	b.n	80107c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	331b      	adds	r3, #27
 801061a:	011b      	lsls	r3, r3, #4
 801061c:	4413      	add	r3, r2
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f003 0204 	and.w	r2, r3, #4
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10c      	bne.n	801064a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	331b      	adds	r3, #27
 8010638:	011b      	lsls	r3, r3, #4
 801063a:	4413      	add	r3, r2
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	0d5b      	lsrs	r3, r3, #21
 8010640:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	e00b      	b.n	8010662 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	331b      	adds	r3, #27
 8010652:	011b      	lsls	r3, r3, #4
 8010654:	4413      	add	r3, r2
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	08db      	lsrs	r3, r3, #3
 801065a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	331b      	adds	r3, #27
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	4413      	add	r3, r2
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f003 0202 	and.w	r2, r3, #2
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	331b      	adds	r3, #27
 8010680:	011b      	lsls	r3, r3, #4
 8010682:	4413      	add	r3, r2
 8010684:	3304      	adds	r3, #4
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f003 020f 	and.w	r2, r3, #15
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	331b      	adds	r3, #27
 8010698:	011b      	lsls	r3, r3, #4
 801069a:	4413      	add	r3, r2
 801069c:	3304      	adds	r3, #4
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	0a1b      	lsrs	r3, r3, #8
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	331b      	adds	r3, #27
 80106b0:	011b      	lsls	r3, r3, #4
 80106b2:	4413      	add	r3, r2
 80106b4:	3304      	adds	r3, #4
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	0c1b      	lsrs	r3, r3, #16
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	011b      	lsls	r3, r3, #4
 80106c8:	4413      	add	r3, r2
 80106ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	011b      	lsls	r3, r3, #4
 80106de:	4413      	add	r3, r2
 80106e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	0a1a      	lsrs	r2, r3, #8
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	3301      	adds	r3, #1
 80106ec:	b2d2      	uxtb	r2, r2
 80106ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	011b      	lsls	r3, r3, #4
 80106f8:	4413      	add	r3, r2
 80106fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	0c1a      	lsrs	r2, r3, #16
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	3302      	adds	r3, #2
 8010706:	b2d2      	uxtb	r2, r2
 8010708:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	011b      	lsls	r3, r3, #4
 8010712:	4413      	add	r3, r2
 8010714:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	0e1a      	lsrs	r2, r3, #24
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	3303      	adds	r3, #3
 8010720:	b2d2      	uxtb	r2, r2
 8010722:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	011b      	lsls	r3, r3, #4
 801072c:	4413      	add	r3, r2
 801072e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	3304      	adds	r3, #4
 8010738:	b2d2      	uxtb	r2, r2
 801073a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	011b      	lsls	r3, r3, #4
 8010744:	4413      	add	r3, r2
 8010746:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	0a1a      	lsrs	r2, r3, #8
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	3305      	adds	r3, #5
 8010752:	b2d2      	uxtb	r2, r2
 8010754:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	011b      	lsls	r3, r3, #4
 801075e:	4413      	add	r3, r2
 8010760:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	0c1a      	lsrs	r2, r3, #16
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	3306      	adds	r3, #6
 801076c:	b2d2      	uxtb	r2, r2
 801076e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	011b      	lsls	r3, r3, #4
 8010778:	4413      	add	r3, r2
 801077a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	0e1a      	lsrs	r2, r3, #24
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	3307      	adds	r3, #7
 8010786:	b2d2      	uxtb	r2, r2
 8010788:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d108      	bne.n	80107a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68da      	ldr	r2, [r3, #12]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f042 0220 	orr.w	r2, r2, #32
 801079e:	60da      	str	r2, [r3, #12]
 80107a0:	e007      	b.n	80107b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	691a      	ldr	r2, [r3, #16]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f042 0220 	orr.w	r2, r2, #32
 80107b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	e006      	b.n	80107c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
  }
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	371c      	adds	r7, #28
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107e0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d002      	beq.n	80107ee <HAL_CAN_ActivateNotification+0x1e>
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	d109      	bne.n	8010802 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6959      	ldr	r1, [r3, #20]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	683a      	ldr	r2, [r7, #0]
 80107fa:	430a      	orrs	r2, r1
 80107fc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80107fe:	2300      	movs	r3, #0
 8010800:	e006      	b.n	8010810 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010806:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801080e:	2301      	movs	r3, #1
  }
}
 8010810:	4618      	mov	r0, r3
 8010812:	3714      	adds	r7, #20
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b08a      	sub	sp, #40	; 0x28
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8010824:	2300      	movs	r3, #0
 8010826:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	695b      	ldr	r3, [r3, #20]
 801082e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	691b      	ldr	r3, [r3, #16]
 801084e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d07c      	beq.n	801095c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	f003 0301 	and.w	r3, r3, #1
 8010868:	2b00      	cmp	r3, #0
 801086a:	d023      	beq.n	80108b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2201      	movs	r2, #1
 8010872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	f003 0302 	and.w	r3, r3, #2
 801087a:	2b00      	cmp	r3, #0
 801087c:	d003      	beq.n	8010886 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f7fb ffda 	bl	800c838 <HAL_CAN_TxMailbox0CompleteCallback>
 8010884:	e016      	b.n	80108b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	f003 0304 	and.w	r3, r3, #4
 801088c:	2b00      	cmp	r3, #0
 801088e:	d004      	beq.n	801089a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010896:	627b      	str	r3, [r7, #36]	; 0x24
 8010898:	e00c      	b.n	80108b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	f003 0308 	and.w	r3, r3, #8
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d004      	beq.n	80108ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80108aa:	627b      	str	r3, [r7, #36]	; 0x24
 80108ac:	e002      	b.n	80108b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f97f 	bl	8010bb2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d024      	beq.n	8010908 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d003      	beq.n	80108da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 f959 	bl	8010b8a <HAL_CAN_TxMailbox1CompleteCallback>
 80108d8:	e016      	b.n	8010908 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d004      	beq.n	80108ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80108ea:	627b      	str	r3, [r7, #36]	; 0x24
 80108ec:	e00c      	b.n	8010908 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d004      	beq.n	8010902 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80108fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010900:	e002      	b.n	8010908 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f95f 	bl	8010bc6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801090e:	2b00      	cmp	r3, #0
 8010910:	d024      	beq.n	801095c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801091a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 f939 	bl	8010b9e <HAL_CAN_TxMailbox2CompleteCallback>
 801092c:	e016      	b.n	801095c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d004      	beq.n	8010942 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801093e:	627b      	str	r3, [r7, #36]	; 0x24
 8010940:	e00c      	b.n	801095c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d004      	beq.n	8010956 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010952:	627b      	str	r3, [r7, #36]	; 0x24
 8010954:	e002      	b.n	801095c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 f93f 	bl	8010bda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801095c:	6a3b      	ldr	r3, [r7, #32]
 801095e:	f003 0308 	and.w	r3, r3, #8
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00c      	beq.n	8010980 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f003 0310 	and.w	r3, r3, #16
 801096c:	2b00      	cmp	r3, #0
 801096e:	d007      	beq.n	8010980 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8010970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010976:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2210      	movs	r2, #16
 801097e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	f003 0304 	and.w	r3, r3, #4
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00b      	beq.n	80109a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	f003 0308 	and.w	r3, r3, #8
 8010990:	2b00      	cmp	r3, #0
 8010992:	d006      	beq.n	80109a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	2208      	movs	r2, #8
 801099a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 f926 	bl	8010bee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	f003 0302 	and.w	r3, r3, #2
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d009      	beq.n	80109c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	f003 0303 	and.w	r3, r3, #3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d002      	beq.n	80109c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7fc f906 	bl	800cbcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80109c0:	6a3b      	ldr	r3, [r7, #32]
 80109c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00c      	beq.n	80109e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	f003 0310 	and.w	r3, r3, #16
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d007      	beq.n	80109e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80109da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2210      	movs	r2, #16
 80109e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80109e4:	6a3b      	ldr	r3, [r7, #32]
 80109e6:	f003 0320 	and.w	r3, r3, #32
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00b      	beq.n	8010a06 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	f003 0308 	and.w	r3, r3, #8
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d006      	beq.n	8010a06 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2208      	movs	r2, #8
 80109fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 f8fe 	bl	8010c02 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8010a06:	6a3b      	ldr	r3, [r7, #32]
 8010a08:	f003 0310 	and.w	r3, r3, #16
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d009      	beq.n	8010a24 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	f003 0303 	and.w	r3, r3, #3
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d002      	beq.n	8010a24 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7fc f912 	bl	800cc48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8010a24:	6a3b      	ldr	r3, [r7, #32]
 8010a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00b      	beq.n	8010a46 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	f003 0310 	and.w	r3, r3, #16
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d006      	beq.n	8010a46 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2210      	movs	r2, #16
 8010a3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f8e8 	bl	8010c16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d00b      	beq.n	8010a68 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	f003 0308 	and.w	r3, r3, #8
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d006      	beq.n	8010a68 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2208      	movs	r2, #8
 8010a60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 f8e1 	bl	8010c2a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8010a68:	6a3b      	ldr	r3, [r7, #32]
 8010a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d07b      	beq.n	8010b6a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	f003 0304 	and.w	r3, r3, #4
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d072      	beq.n	8010b62 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8010a7c:	6a3b      	ldr	r3, [r7, #32]
 8010a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d008      	beq.n	8010a98 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d003      	beq.n	8010a98 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8010a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a92:	f043 0301 	orr.w	r3, r3, #1
 8010a96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8010a98:	6a3b      	ldr	r3, [r7, #32]
 8010a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d008      	beq.n	8010ab4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d003      	beq.n	8010ab4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8010aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aae:	f043 0302 	orr.w	r3, r3, #2
 8010ab2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8010ab4:	6a3b      	ldr	r3, [r7, #32]
 8010ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d008      	beq.n	8010ad0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d003      	beq.n	8010ad0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aca:	f043 0304 	orr.w	r3, r3, #4
 8010ace:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8010ad0:	6a3b      	ldr	r3, [r7, #32]
 8010ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d043      	beq.n	8010b62 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d03e      	beq.n	8010b62 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010aea:	2b60      	cmp	r3, #96	; 0x60
 8010aec:	d02b      	beq.n	8010b46 <HAL_CAN_IRQHandler+0x32a>
 8010aee:	2b60      	cmp	r3, #96	; 0x60
 8010af0:	d82e      	bhi.n	8010b50 <HAL_CAN_IRQHandler+0x334>
 8010af2:	2b50      	cmp	r3, #80	; 0x50
 8010af4:	d022      	beq.n	8010b3c <HAL_CAN_IRQHandler+0x320>
 8010af6:	2b50      	cmp	r3, #80	; 0x50
 8010af8:	d82a      	bhi.n	8010b50 <HAL_CAN_IRQHandler+0x334>
 8010afa:	2b40      	cmp	r3, #64	; 0x40
 8010afc:	d019      	beq.n	8010b32 <HAL_CAN_IRQHandler+0x316>
 8010afe:	2b40      	cmp	r3, #64	; 0x40
 8010b00:	d826      	bhi.n	8010b50 <HAL_CAN_IRQHandler+0x334>
 8010b02:	2b30      	cmp	r3, #48	; 0x30
 8010b04:	d010      	beq.n	8010b28 <HAL_CAN_IRQHandler+0x30c>
 8010b06:	2b30      	cmp	r3, #48	; 0x30
 8010b08:	d822      	bhi.n	8010b50 <HAL_CAN_IRQHandler+0x334>
 8010b0a:	2b10      	cmp	r3, #16
 8010b0c:	d002      	beq.n	8010b14 <HAL_CAN_IRQHandler+0x2f8>
 8010b0e:	2b20      	cmp	r3, #32
 8010b10:	d005      	beq.n	8010b1e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8010b12:	e01d      	b.n	8010b50 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b16:	f043 0308 	orr.w	r3, r3, #8
 8010b1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010b1c:	e019      	b.n	8010b52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	f043 0310 	orr.w	r3, r3, #16
 8010b24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010b26:	e014      	b.n	8010b52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8010b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2a:	f043 0320 	orr.w	r3, r3, #32
 8010b2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010b30:	e00f      	b.n	8010b52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8010b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010b3a:	e00a      	b.n	8010b52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010b44:	e005      	b.n	8010b52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8010b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010b4e:	e000      	b.n	8010b52 <HAL_CAN_IRQHandler+0x336>
            break;
 8010b50:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	699a      	ldr	r2, [r3, #24]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010b60:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2204      	movs	r2, #4
 8010b68:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d008      	beq.n	8010b82 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b76:	431a      	orrs	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7fc f8a1 	bl	800ccc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8010b82:	bf00      	nop
 8010b84:	3728      	adds	r7, #40	; 0x28
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8010b92:	bf00      	nop
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8010b9e:	b480      	push	{r7}
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8010ba6:	bf00      	nop
 8010ba8:	370c      	adds	r7, #12
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010bb2:	b480      	push	{r7}
 8010bb4:	b083      	sub	sp, #12
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8010bba:	bf00      	nop
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr

08010bc6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010bc6:	b480      	push	{r7}
 8010bc8:	b083      	sub	sp, #12
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8010bce:	bf00      	nop
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010bda:	b480      	push	{r7}
 8010bdc:	b083      	sub	sp, #12
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8010be2:	bf00      	nop
 8010be4:	370c      	adds	r7, #12
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr

08010bee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8010bee:	b480      	push	{r7}
 8010bf0:	b083      	sub	sp, #12
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8010bf6:	bf00      	nop
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8010c02:	b480      	push	{r7}
 8010c04:	b083      	sub	sp, #12
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8010c0a:	bf00      	nop
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b083      	sub	sp, #12
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8010c1e:	bf00      	nop
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b083      	sub	sp, #12
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8010c32:	bf00      	nop
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr

08010c3e <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 8010c3e:	b480      	push	{r7}
 8010c40:	b085      	sub	sp, #20
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c4c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8010c4e:	7bfb      	ldrb	r3, [r7, #15]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d002      	beq.n	8010c5a <HAL_CAN_GetState+0x1c>
 8010c54:	7bfb      	ldrb	r3, [r7, #15]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d112      	bne.n	8010c80 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	f003 0302 	and.w	r3, r3, #2
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8010c68:	2304      	movs	r3, #4
 8010c6a:	73fb      	strb	r3, [r7, #15]
 8010c6c:	e008      	b.n	8010c80 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f003 0302 	and.w	r3, r3, #2
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d001      	beq.n	8010c80 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8010c7c:	2303      	movs	r3, #3
 8010c7e:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3714      	adds	r7, #20
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr

08010c8e <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8010c8e:	b480      	push	{r7}
 8010c90:	b083      	sub	sp, #12
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8010ca6:	b480      	push	{r7}
 8010ca8:	b085      	sub	sp, #20
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cb8:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8010cba:	7bbb      	ldrb	r3, [r7, #14]
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d002      	beq.n	8010cc6 <HAL_CAN_ResetError+0x20>
 8010cc0:	7bbb      	ldrb	r3, [r7, #14]
 8010cc2:	2b02      	cmp	r3, #2
 8010cc4:	d103      	bne.n	8010cce <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	625a      	str	r2, [r3, #36]	; 0x24
 8010ccc:	e007      	b.n	8010cde <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8010cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <__NVIC_SetPriorityGrouping>:
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f003 0307 	and.w	r3, r3, #7
 8010cfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010cfc:	4b0c      	ldr	r3, [pc, #48]	; (8010d30 <__NVIC_SetPriorityGrouping+0x44>)
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010d08:	4013      	ands	r3, r2
 8010d0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010d1e:	4a04      	ldr	r2, [pc, #16]	; (8010d30 <__NVIC_SetPriorityGrouping+0x44>)
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	60d3      	str	r3, [r2, #12]
}
 8010d24:	bf00      	nop
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	e000ed00 	.word	0xe000ed00

08010d34 <__NVIC_GetPriorityGrouping>:
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010d38:	4b04      	ldr	r3, [pc, #16]	; (8010d4c <__NVIC_GetPriorityGrouping+0x18>)
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	0a1b      	lsrs	r3, r3, #8
 8010d3e:	f003 0307 	and.w	r3, r3, #7
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	e000ed00 	.word	0xe000ed00

08010d50 <__NVIC_EnableIRQ>:
{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	4603      	mov	r3, r0
 8010d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	db0b      	blt.n	8010d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	f003 021f 	and.w	r2, r3, #31
 8010d68:	4907      	ldr	r1, [pc, #28]	; (8010d88 <__NVIC_EnableIRQ+0x38>)
 8010d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d6e:	095b      	lsrs	r3, r3, #5
 8010d70:	2001      	movs	r0, #1
 8010d72:	fa00 f202 	lsl.w	r2, r0, r2
 8010d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010d7a:	bf00      	nop
 8010d7c:	370c      	adds	r7, #12
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	e000e100 	.word	0xe000e100

08010d8c <__NVIC_SetPriority>:
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	4603      	mov	r3, r0
 8010d94:	6039      	str	r1, [r7, #0]
 8010d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	db0a      	blt.n	8010db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	b2da      	uxtb	r2, r3
 8010da4:	490c      	ldr	r1, [pc, #48]	; (8010dd8 <__NVIC_SetPriority+0x4c>)
 8010da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010daa:	0112      	lsls	r2, r2, #4
 8010dac:	b2d2      	uxtb	r2, r2
 8010dae:	440b      	add	r3, r1
 8010db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010db4:	e00a      	b.n	8010dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	4908      	ldr	r1, [pc, #32]	; (8010ddc <__NVIC_SetPriority+0x50>)
 8010dbc:	79fb      	ldrb	r3, [r7, #7]
 8010dbe:	f003 030f 	and.w	r3, r3, #15
 8010dc2:	3b04      	subs	r3, #4
 8010dc4:	0112      	lsls	r2, r2, #4
 8010dc6:	b2d2      	uxtb	r2, r2
 8010dc8:	440b      	add	r3, r1
 8010dca:	761a      	strb	r2, [r3, #24]
}
 8010dcc:	bf00      	nop
 8010dce:	370c      	adds	r7, #12
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr
 8010dd8:	e000e100 	.word	0xe000e100
 8010ddc:	e000ed00 	.word	0xe000ed00

08010de0 <NVIC_EncodePriority>:
{
 8010de0:	b480      	push	{r7}
 8010de2:	b089      	sub	sp, #36	; 0x24
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f003 0307 	and.w	r3, r3, #7
 8010df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	f1c3 0307 	rsb	r3, r3, #7
 8010dfa:	2b04      	cmp	r3, #4
 8010dfc:	bf28      	it	cs
 8010dfe:	2304      	movcs	r3, #4
 8010e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	3304      	adds	r3, #4
 8010e06:	2b06      	cmp	r3, #6
 8010e08:	d902      	bls.n	8010e10 <NVIC_EncodePriority+0x30>
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	3b03      	subs	r3, #3
 8010e0e:	e000      	b.n	8010e12 <NVIC_EncodePriority+0x32>
 8010e10:	2300      	movs	r3, #0
 8010e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010e14:	f04f 32ff 	mov.w	r2, #4294967295
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1e:	43da      	mvns	r2, r3
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	401a      	ands	r2, r3
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010e28:	f04f 31ff 	mov.w	r1, #4294967295
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e32:	43d9      	mvns	r1, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010e38:	4313      	orrs	r3, r2
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3724      	adds	r7, #36	; 0x24
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b082      	sub	sp, #8
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7ff ff4c 	bl	8010cec <__NVIC_SetPriorityGrouping>
}
 8010e54:	bf00      	nop
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b086      	sub	sp, #24
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	4603      	mov	r3, r0
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010e6e:	f7ff ff61 	bl	8010d34 <__NVIC_GetPriorityGrouping>
 8010e72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	68b9      	ldr	r1, [r7, #8]
 8010e78:	6978      	ldr	r0, [r7, #20]
 8010e7a:	f7ff ffb1 	bl	8010de0 <NVIC_EncodePriority>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e84:	4611      	mov	r1, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff ff80 	bl	8010d8c <__NVIC_SetPriority>
}
 8010e8c:	bf00      	nop
 8010e8e:	3718      	adds	r7, #24
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff ff54 	bl	8010d50 <__NVIC_EnableIRQ>
}
 8010ea8:	bf00      	nop
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d101      	bne.n	8010ec2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e00e      	b.n	8010ee0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	795b      	ldrb	r3, [r3, #5]
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d105      	bne.n	8010ed8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7f6 faa2 	bl	800741c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2201      	movs	r2, #1
 8010edc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010ef4:	f7fe fbf2 	bl	800f6dc <HAL_GetTick>
 8010ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d101      	bne.n	8010f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	e099      	b.n	8011038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2202      	movs	r2, #2
 8010f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f022 0201 	bic.w	r2, r2, #1
 8010f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010f24:	e00f      	b.n	8010f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010f26:	f7fe fbd9 	bl	800f6dc <HAL_GetTick>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	2b05      	cmp	r3, #5
 8010f32:	d908      	bls.n	8010f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2220      	movs	r2, #32
 8010f38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2203      	movs	r2, #3
 8010f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010f42:	2303      	movs	r3, #3
 8010f44:	e078      	b.n	8011038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1e8      	bne.n	8010f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010f5c:	697a      	ldr	r2, [r7, #20]
 8010f5e:	4b38      	ldr	r3, [pc, #224]	; (8011040 <HAL_DMA_Init+0x158>)
 8010f60:	4013      	ands	r3, r2
 8010f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	685a      	ldr	r2, [r3, #4]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	689b      	ldr	r3, [r3, #8]
 8010f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	699b      	ldr	r3, [r3, #24]
 8010f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a1b      	ldr	r3, [r3, #32]
 8010f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010f92:	697a      	ldr	r2, [r7, #20]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f9c:	2b04      	cmp	r3, #4
 8010f9e:	d107      	bne.n	8010fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	697a      	ldr	r2, [r7, #20]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	697a      	ldr	r2, [r7, #20]
 8010fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	f023 0307 	bic.w	r3, r3, #7
 8010fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd6:	2b04      	cmp	r3, #4
 8010fd8:	d117      	bne.n	801100a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	4313      	orrs	r3, r2
 8010fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d00e      	beq.n	801100a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 fb01 	bl	80115f4 <DMA_CheckFifoParam>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d008      	beq.n	801100a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2240      	movs	r2, #64	; 0x40
 8010ffc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2201      	movs	r2, #1
 8011002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011006:	2301      	movs	r3, #1
 8011008:	e016      	b.n	8011038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	697a      	ldr	r2, [r7, #20]
 8011010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 fab8 	bl	8011588 <DMA_CalcBaseAndBitshift>
 8011018:	4603      	mov	r3, r0
 801101a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011020:	223f      	movs	r2, #63	; 0x3f
 8011022:	409a      	lsls	r2, r3
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2200      	movs	r2, #0
 801102c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2201      	movs	r2, #1
 8011032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011036:	2300      	movs	r3, #0
}
 8011038:	4618      	mov	r0, r3
 801103a:	3718      	adds	r7, #24
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	f010803f 	.word	0xf010803f

08011044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011052:	2300      	movs	r3, #0
 8011054:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801105a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011062:	2b01      	cmp	r3, #1
 8011064:	d101      	bne.n	801106a <HAL_DMA_Start_IT+0x26>
 8011066:	2302      	movs	r3, #2
 8011068:	e040      	b.n	80110ec <HAL_DMA_Start_IT+0xa8>
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	2201      	movs	r2, #1
 801106e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b01      	cmp	r3, #1
 801107c:	d12f      	bne.n	80110de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	2202      	movs	r2, #2
 8011082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2200      	movs	r2, #0
 801108a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	68b9      	ldr	r1, [r7, #8]
 8011092:	68f8      	ldr	r0, [r7, #12]
 8011094:	f000 fa4a 	bl	801152c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801109c:	223f      	movs	r2, #63	; 0x3f
 801109e:	409a      	lsls	r2, r3
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f042 0216 	orr.w	r2, r2, #22
 80110b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d007      	beq.n	80110cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f042 0208 	orr.w	r2, r2, #8
 80110ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f042 0201 	orr.w	r2, r2, #1
 80110da:	601a      	str	r2, [r3, #0]
 80110dc:	e005      	b.n	80110ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80110e6:	2302      	movs	r3, #2
 80110e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80110ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3718      	adds	r7, #24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011100:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8011102:	f7fe faeb 	bl	800f6dc <HAL_GetTick>
 8011106:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801110e:	b2db      	uxtb	r3, r3
 8011110:	2b02      	cmp	r3, #2
 8011112:	d008      	beq.n	8011126 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2280      	movs	r2, #128	; 0x80
 8011118:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2200      	movs	r2, #0
 801111e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8011122:	2301      	movs	r3, #1
 8011124:	e052      	b.n	80111cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f022 0216 	bic.w	r2, r2, #22
 8011134:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	695a      	ldr	r2, [r3, #20]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011144:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114a:	2b00      	cmp	r3, #0
 801114c:	d103      	bne.n	8011156 <HAL_DMA_Abort+0x62>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011152:	2b00      	cmp	r3, #0
 8011154:	d007      	beq.n	8011166 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f022 0208 	bic.w	r2, r2, #8
 8011164:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f022 0201 	bic.w	r2, r2, #1
 8011174:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011176:	e013      	b.n	80111a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011178:	f7fe fab0 	bl	800f6dc <HAL_GetTick>
 801117c:	4602      	mov	r2, r0
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	2b05      	cmp	r3, #5
 8011184:	d90c      	bls.n	80111a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2220      	movs	r2, #32
 801118a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2203      	movs	r2, #3
 8011190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801119c:	2303      	movs	r3, #3
 801119e:	e015      	b.n	80111cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f003 0301 	and.w	r3, r3, #1
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d1e4      	bne.n	8011178 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111b2:	223f      	movs	r2, #63	; 0x3f
 80111b4:	409a      	lsls	r2, r3
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2201      	movs	r2, #1
 80111be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3710      	adds	r7, #16
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	d004      	beq.n	80111f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2280      	movs	r2, #128	; 0x80
 80111ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80111ee:	2301      	movs	r3, #1
 80111f0:	e00c      	b.n	801120c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2205      	movs	r2, #5
 80111f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f022 0201 	bic.w	r2, r2, #1
 8011208:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801120a:	2300      	movs	r3, #0
}
 801120c:	4618      	mov	r0, r3
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011220:	2300      	movs	r3, #0
 8011222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011224:	4b8e      	ldr	r3, [pc, #568]	; (8011460 <HAL_DMA_IRQHandler+0x248>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4a8e      	ldr	r2, [pc, #568]	; (8011464 <HAL_DMA_IRQHandler+0x24c>)
 801122a:	fba2 2303 	umull	r2, r3, r2, r3
 801122e:	0a9b      	lsrs	r3, r3, #10
 8011230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011242:	2208      	movs	r2, #8
 8011244:	409a      	lsls	r2, r3
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	4013      	ands	r3, r2
 801124a:	2b00      	cmp	r3, #0
 801124c:	d01a      	beq.n	8011284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f003 0304 	and.w	r3, r3, #4
 8011258:	2b00      	cmp	r3, #0
 801125a:	d013      	beq.n	8011284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f022 0204 	bic.w	r2, r2, #4
 801126a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011270:	2208      	movs	r2, #8
 8011272:	409a      	lsls	r2, r3
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801127c:	f043 0201 	orr.w	r2, r3, #1
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011288:	2201      	movs	r2, #1
 801128a:	409a      	lsls	r2, r3
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	4013      	ands	r3, r2
 8011290:	2b00      	cmp	r3, #0
 8011292:	d012      	beq.n	80112ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d00b      	beq.n	80112ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112a6:	2201      	movs	r2, #1
 80112a8:	409a      	lsls	r2, r3
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112b2:	f043 0202 	orr.w	r2, r3, #2
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112be:	2204      	movs	r2, #4
 80112c0:	409a      	lsls	r2, r3
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	4013      	ands	r3, r2
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d012      	beq.n	80112f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f003 0302 	and.w	r3, r3, #2
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d00b      	beq.n	80112f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112dc:	2204      	movs	r2, #4
 80112de:	409a      	lsls	r2, r3
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112e8:	f043 0204 	orr.w	r2, r3, #4
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112f4:	2210      	movs	r2, #16
 80112f6:	409a      	lsls	r2, r3
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	4013      	ands	r3, r2
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d043      	beq.n	8011388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f003 0308 	and.w	r3, r3, #8
 801130a:	2b00      	cmp	r3, #0
 801130c:	d03c      	beq.n	8011388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011312:	2210      	movs	r2, #16
 8011314:	409a      	lsls	r2, r3
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011324:	2b00      	cmp	r3, #0
 8011326:	d018      	beq.n	801135a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011332:	2b00      	cmp	r3, #0
 8011334:	d108      	bne.n	8011348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801133a:	2b00      	cmp	r3, #0
 801133c:	d024      	beq.n	8011388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	4798      	blx	r3
 8011346:	e01f      	b.n	8011388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801134c:	2b00      	cmp	r3, #0
 801134e:	d01b      	beq.n	8011388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	4798      	blx	r3
 8011358:	e016      	b.n	8011388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011364:	2b00      	cmp	r3, #0
 8011366:	d107      	bne.n	8011378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f022 0208 	bic.w	r2, r2, #8
 8011376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801137c:	2b00      	cmp	r3, #0
 801137e:	d003      	beq.n	8011388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801138c:	2220      	movs	r2, #32
 801138e:	409a      	lsls	r2, r3
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	4013      	ands	r3, r2
 8011394:	2b00      	cmp	r3, #0
 8011396:	f000 808f 	beq.w	80114b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f003 0310 	and.w	r3, r3, #16
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f000 8087 	beq.w	80114b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113ae:	2220      	movs	r2, #32
 80113b0:	409a      	lsls	r2, r3
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	2b05      	cmp	r3, #5
 80113c0:	d136      	bne.n	8011430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f022 0216 	bic.w	r2, r2, #22
 80113d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	695a      	ldr	r2, [r3, #20]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80113e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d103      	bne.n	80113f2 <HAL_DMA_IRQHandler+0x1da>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d007      	beq.n	8011402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f022 0208 	bic.w	r2, r2, #8
 8011400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011406:	223f      	movs	r2, #63	; 0x3f
 8011408:	409a      	lsls	r2, r3
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2201      	movs	r2, #1
 8011412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011422:	2b00      	cmp	r3, #0
 8011424:	d07e      	beq.n	8011524 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	4798      	blx	r3
        }
        return;
 801142e:	e079      	b.n	8011524 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801143a:	2b00      	cmp	r3, #0
 801143c:	d01d      	beq.n	801147a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011448:	2b00      	cmp	r3, #0
 801144a:	d10d      	bne.n	8011468 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011450:	2b00      	cmp	r3, #0
 8011452:	d031      	beq.n	80114b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	4798      	blx	r3
 801145c:	e02c      	b.n	80114b8 <HAL_DMA_IRQHandler+0x2a0>
 801145e:	bf00      	nop
 8011460:	20000034 	.word	0x20000034
 8011464:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801146c:	2b00      	cmp	r3, #0
 801146e:	d023      	beq.n	80114b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	4798      	blx	r3
 8011478:	e01e      	b.n	80114b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011484:	2b00      	cmp	r3, #0
 8011486:	d10f      	bne.n	80114a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f022 0210 	bic.w	r2, r2, #16
 8011496:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2201      	movs	r2, #1
 801149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d003      	beq.n	80114b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d032      	beq.n	8011526 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114c4:	f003 0301 	and.w	r3, r3, #1
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d022      	beq.n	8011512 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2205      	movs	r2, #5
 80114d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	f022 0201 	bic.w	r2, r2, #1
 80114e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	3301      	adds	r3, #1
 80114e8:	60bb      	str	r3, [r7, #8]
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d307      	bcc.n	8011500 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f003 0301 	and.w	r3, r3, #1
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d1f2      	bne.n	80114e4 <HAL_DMA_IRQHandler+0x2cc>
 80114fe:	e000      	b.n	8011502 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8011500:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2201      	movs	r2, #1
 8011506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2200      	movs	r2, #0
 801150e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011516:	2b00      	cmp	r3, #0
 8011518:	d005      	beq.n	8011526 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	4798      	blx	r3
 8011522:	e000      	b.n	8011526 <HAL_DMA_IRQHandler+0x30e>
        return;
 8011524:	bf00      	nop
    }
  }
}
 8011526:	3718      	adds	r7, #24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
 8011538:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011548:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	683a      	ldr	r2, [r7, #0]
 8011550:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	2b40      	cmp	r3, #64	; 0x40
 8011558:	d108      	bne.n	801156c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801156a:	e007      	b.n	801157c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	60da      	str	r2, [r3, #12]
}
 801157c:	bf00      	nop
 801157e:	3714      	adds	r7, #20
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr

08011588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	b2db      	uxtb	r3, r3
 8011596:	3b10      	subs	r3, #16
 8011598:	4a14      	ldr	r2, [pc, #80]	; (80115ec <DMA_CalcBaseAndBitshift+0x64>)
 801159a:	fba2 2303 	umull	r2, r3, r2, r3
 801159e:	091b      	lsrs	r3, r3, #4
 80115a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80115a2:	4a13      	ldr	r2, [pc, #76]	; (80115f0 <DMA_CalcBaseAndBitshift+0x68>)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	4413      	add	r3, r2
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d909      	bls.n	80115ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80115be:	f023 0303 	bic.w	r3, r3, #3
 80115c2:	1d1a      	adds	r2, r3, #4
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	659a      	str	r2, [r3, #88]	; 0x58
 80115c8:	e007      	b.n	80115da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80115d2:	f023 0303 	bic.w	r3, r3, #3
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3714      	adds	r7, #20
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	aaaaaaab 	.word	0xaaaaaaab
 80115f0:	0801c398 	.word	0x0801c398

080115f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80115fc:	2300      	movs	r3, #0
 80115fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	699b      	ldr	r3, [r3, #24]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d11f      	bne.n	801164e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b03      	cmp	r3, #3
 8011612:	d856      	bhi.n	80116c2 <DMA_CheckFifoParam+0xce>
 8011614:	a201      	add	r2, pc, #4	; (adr r2, 801161c <DMA_CheckFifoParam+0x28>)
 8011616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801161a:	bf00      	nop
 801161c:	0801162d 	.word	0x0801162d
 8011620:	0801163f 	.word	0x0801163f
 8011624:	0801162d 	.word	0x0801162d
 8011628:	080116c3 	.word	0x080116c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011634:	2b00      	cmp	r3, #0
 8011636:	d046      	beq.n	80116c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011638:	2301      	movs	r3, #1
 801163a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801163c:	e043      	b.n	80116c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011646:	d140      	bne.n	80116ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011648:	2301      	movs	r3, #1
 801164a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801164c:	e03d      	b.n	80116ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	699b      	ldr	r3, [r3, #24]
 8011652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011656:	d121      	bne.n	801169c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	2b03      	cmp	r3, #3
 801165c:	d837      	bhi.n	80116ce <DMA_CheckFifoParam+0xda>
 801165e:	a201      	add	r2, pc, #4	; (adr r2, 8011664 <DMA_CheckFifoParam+0x70>)
 8011660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011664:	08011675 	.word	0x08011675
 8011668:	0801167b 	.word	0x0801167b
 801166c:	08011675 	.word	0x08011675
 8011670:	0801168d 	.word	0x0801168d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011674:	2301      	movs	r3, #1
 8011676:	73fb      	strb	r3, [r7, #15]
      break;
 8011678:	e030      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801167e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011682:	2b00      	cmp	r3, #0
 8011684:	d025      	beq.n	80116d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011686:	2301      	movs	r3, #1
 8011688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801168a:	e022      	b.n	80116d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011694:	d11f      	bne.n	80116d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011696:	2301      	movs	r3, #1
 8011698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801169a:	e01c      	b.n	80116d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	2b02      	cmp	r3, #2
 80116a0:	d903      	bls.n	80116aa <DMA_CheckFifoParam+0xb6>
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	2b03      	cmp	r3, #3
 80116a6:	d003      	beq.n	80116b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80116a8:	e018      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80116aa:	2301      	movs	r3, #1
 80116ac:	73fb      	strb	r3, [r7, #15]
      break;
 80116ae:	e015      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00e      	beq.n	80116da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80116bc:	2301      	movs	r3, #1
 80116be:	73fb      	strb	r3, [r7, #15]
      break;
 80116c0:	e00b      	b.n	80116da <DMA_CheckFifoParam+0xe6>
      break;
 80116c2:	bf00      	nop
 80116c4:	e00a      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      break;
 80116c6:	bf00      	nop
 80116c8:	e008      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      break;
 80116ca:	bf00      	nop
 80116cc:	e006      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      break;
 80116ce:	bf00      	nop
 80116d0:	e004      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      break;
 80116d2:	bf00      	nop
 80116d4:	e002      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      break;   
 80116d6:	bf00      	nop
 80116d8:	e000      	b.n	80116dc <DMA_CheckFifoParam+0xe8>
      break;
 80116da:	bf00      	nop
    }
  } 
  
  return status; 
 80116dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3714      	adds	r7, #20
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop

080116ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b086      	sub	sp, #24
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	60b9      	str	r1, [r7, #8]
 80116f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80116fa:	2301      	movs	r3, #1
 80116fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80116fe:	4b23      	ldr	r3, [pc, #140]	; (801178c <HAL_FLASH_Program+0xa0>)
 8011700:	7e1b      	ldrb	r3, [r3, #24]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d101      	bne.n	801170a <HAL_FLASH_Program+0x1e>
 8011706:	2302      	movs	r3, #2
 8011708:	e03b      	b.n	8011782 <HAL_FLASH_Program+0x96>
 801170a:	4b20      	ldr	r3, [pc, #128]	; (801178c <HAL_FLASH_Program+0xa0>)
 801170c:	2201      	movs	r2, #1
 801170e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011710:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011714:	f000 f870 	bl	80117f8 <FLASH_WaitForLastOperation>
 8011718:	4603      	mov	r3, r0
 801171a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801171c:	7dfb      	ldrb	r3, [r7, #23]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d12b      	bne.n	801177a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d105      	bne.n	8011734 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011728:	783b      	ldrb	r3, [r7, #0]
 801172a:	4619      	mov	r1, r3
 801172c:	68b8      	ldr	r0, [r7, #8]
 801172e:	f000 f91b 	bl	8011968 <FLASH_Program_Byte>
 8011732:	e016      	b.n	8011762 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	2b01      	cmp	r3, #1
 8011738:	d105      	bne.n	8011746 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801173a:	883b      	ldrh	r3, [r7, #0]
 801173c:	4619      	mov	r1, r3
 801173e:	68b8      	ldr	r0, [r7, #8]
 8011740:	f000 f8ee 	bl	8011920 <FLASH_Program_HalfWord>
 8011744:	e00d      	b.n	8011762 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b02      	cmp	r3, #2
 801174a:	d105      	bne.n	8011758 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	4619      	mov	r1, r3
 8011750:	68b8      	ldr	r0, [r7, #8]
 8011752:	f000 f8c3 	bl	80118dc <FLASH_Program_Word>
 8011756:	e004      	b.n	8011762 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801175c:	68b8      	ldr	r0, [r7, #8]
 801175e:	f000 f88b 	bl	8011878 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011762:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011766:	f000 f847 	bl	80117f8 <FLASH_WaitForLastOperation>
 801176a:	4603      	mov	r3, r0
 801176c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801176e:	4b08      	ldr	r3, [pc, #32]	; (8011790 <HAL_FLASH_Program+0xa4>)
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	4a07      	ldr	r2, [pc, #28]	; (8011790 <HAL_FLASH_Program+0xa4>)
 8011774:	f023 0301 	bic.w	r3, r3, #1
 8011778:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801177a:	4b04      	ldr	r3, [pc, #16]	; (801178c <HAL_FLASH_Program+0xa0>)
 801177c:	2200      	movs	r2, #0
 801177e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011780:	7dfb      	ldrb	r3, [r7, #23]
}
 8011782:	4618      	mov	r0, r3
 8011784:	3718      	adds	r7, #24
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	20003248 	.word	0x20003248
 8011790:	40023c00 	.word	0x40023c00

08011794 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801179e:	4b0b      	ldr	r3, [pc, #44]	; (80117cc <HAL_FLASH_Unlock+0x38>)
 80117a0:	691b      	ldr	r3, [r3, #16]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	da0b      	bge.n	80117be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80117a6:	4b09      	ldr	r3, [pc, #36]	; (80117cc <HAL_FLASH_Unlock+0x38>)
 80117a8:	4a09      	ldr	r2, [pc, #36]	; (80117d0 <HAL_FLASH_Unlock+0x3c>)
 80117aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80117ac:	4b07      	ldr	r3, [pc, #28]	; (80117cc <HAL_FLASH_Unlock+0x38>)
 80117ae:	4a09      	ldr	r2, [pc, #36]	; (80117d4 <HAL_FLASH_Unlock+0x40>)
 80117b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80117b2:	4b06      	ldr	r3, [pc, #24]	; (80117cc <HAL_FLASH_Unlock+0x38>)
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	da01      	bge.n	80117be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80117ba:	2301      	movs	r3, #1
 80117bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80117be:	79fb      	ldrb	r3, [r7, #7]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	40023c00 	.word	0x40023c00
 80117d0:	45670123 	.word	0x45670123
 80117d4:	cdef89ab 	.word	0xcdef89ab

080117d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80117d8:	b480      	push	{r7}
 80117da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80117dc:	4b05      	ldr	r3, [pc, #20]	; (80117f4 <HAL_FLASH_Lock+0x1c>)
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	4a04      	ldr	r2, [pc, #16]	; (80117f4 <HAL_FLASH_Lock+0x1c>)
 80117e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80117e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	40023c00 	.word	0x40023c00

080117f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011800:	2300      	movs	r3, #0
 8011802:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011804:	4b1a      	ldr	r3, [pc, #104]	; (8011870 <FLASH_WaitForLastOperation+0x78>)
 8011806:	2200      	movs	r2, #0
 8011808:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801180a:	f7fd ff67 	bl	800f6dc <HAL_GetTick>
 801180e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011810:	e010      	b.n	8011834 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011818:	d00c      	beq.n	8011834 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d007      	beq.n	8011830 <FLASH_WaitForLastOperation+0x38>
 8011820:	f7fd ff5c 	bl	800f6dc <HAL_GetTick>
 8011824:	4602      	mov	r2, r0
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	429a      	cmp	r2, r3
 801182e:	d201      	bcs.n	8011834 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011830:	2303      	movs	r3, #3
 8011832:	e019      	b.n	8011868 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011834:	4b0f      	ldr	r3, [pc, #60]	; (8011874 <FLASH_WaitForLastOperation+0x7c>)
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801183c:	2b00      	cmp	r3, #0
 801183e:	d1e8      	bne.n	8011812 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011840:	4b0c      	ldr	r3, [pc, #48]	; (8011874 <FLASH_WaitForLastOperation+0x7c>)
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	f003 0301 	and.w	r3, r3, #1
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801184c:	4b09      	ldr	r3, [pc, #36]	; (8011874 <FLASH_WaitForLastOperation+0x7c>)
 801184e:	2201      	movs	r2, #1
 8011850:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011852:	4b08      	ldr	r3, [pc, #32]	; (8011874 <FLASH_WaitForLastOperation+0x7c>)
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801185a:	2b00      	cmp	r3, #0
 801185c:	d003      	beq.n	8011866 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801185e:	f000 f8a5 	bl	80119ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011862:	2301      	movs	r3, #1
 8011864:	e000      	b.n	8011868 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011866:	2300      	movs	r3, #0
  
}  
 8011868:	4618      	mov	r0, r3
 801186a:	3710      	adds	r7, #16
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}
 8011870:	20003248 	.word	0x20003248
 8011874:	40023c00 	.word	0x40023c00

08011878 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011884:	4b14      	ldr	r3, [pc, #80]	; (80118d8 <FLASH_Program_DoubleWord+0x60>)
 8011886:	691b      	ldr	r3, [r3, #16]
 8011888:	4a13      	ldr	r2, [pc, #76]	; (80118d8 <FLASH_Program_DoubleWord+0x60>)
 801188a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801188e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011890:	4b11      	ldr	r3, [pc, #68]	; (80118d8 <FLASH_Program_DoubleWord+0x60>)
 8011892:	691b      	ldr	r3, [r3, #16]
 8011894:	4a10      	ldr	r2, [pc, #64]	; (80118d8 <FLASH_Program_DoubleWord+0x60>)
 8011896:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801189a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801189c:	4b0e      	ldr	r3, [pc, #56]	; (80118d8 <FLASH_Program_DoubleWord+0x60>)
 801189e:	691b      	ldr	r3, [r3, #16]
 80118a0:	4a0d      	ldr	r2, [pc, #52]	; (80118d8 <FLASH_Program_DoubleWord+0x60>)
 80118a2:	f043 0301 	orr.w	r3, r3, #1
 80118a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	683a      	ldr	r2, [r7, #0]
 80118ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80118ae:	f3bf 8f6f 	isb	sy
}
 80118b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80118b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118b8:	f04f 0200 	mov.w	r2, #0
 80118bc:	f04f 0300 	mov.w	r3, #0
 80118c0:	000a      	movs	r2, r1
 80118c2:	2300      	movs	r3, #0
 80118c4:	68f9      	ldr	r1, [r7, #12]
 80118c6:	3104      	adds	r1, #4
 80118c8:	4613      	mov	r3, r2
 80118ca:	600b      	str	r3, [r1, #0]
}
 80118cc:	bf00      	nop
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr
 80118d8:	40023c00 	.word	0x40023c00

080118dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80118e6:	4b0d      	ldr	r3, [pc, #52]	; (801191c <FLASH_Program_Word+0x40>)
 80118e8:	691b      	ldr	r3, [r3, #16]
 80118ea:	4a0c      	ldr	r2, [pc, #48]	; (801191c <FLASH_Program_Word+0x40>)
 80118ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80118f2:	4b0a      	ldr	r3, [pc, #40]	; (801191c <FLASH_Program_Word+0x40>)
 80118f4:	691b      	ldr	r3, [r3, #16]
 80118f6:	4a09      	ldr	r2, [pc, #36]	; (801191c <FLASH_Program_Word+0x40>)
 80118f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80118fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80118fe:	4b07      	ldr	r3, [pc, #28]	; (801191c <FLASH_Program_Word+0x40>)
 8011900:	691b      	ldr	r3, [r3, #16]
 8011902:	4a06      	ldr	r2, [pc, #24]	; (801191c <FLASH_Program_Word+0x40>)
 8011904:	f043 0301 	orr.w	r3, r3, #1
 8011908:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	683a      	ldr	r2, [r7, #0]
 801190e:	601a      	str	r2, [r3, #0]
}
 8011910:	bf00      	nop
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr
 801191c:	40023c00 	.word	0x40023c00

08011920 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	460b      	mov	r3, r1
 801192a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801192c:	4b0d      	ldr	r3, [pc, #52]	; (8011964 <FLASH_Program_HalfWord+0x44>)
 801192e:	691b      	ldr	r3, [r3, #16]
 8011930:	4a0c      	ldr	r2, [pc, #48]	; (8011964 <FLASH_Program_HalfWord+0x44>)
 8011932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011938:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <FLASH_Program_HalfWord+0x44>)
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	4a09      	ldr	r2, [pc, #36]	; (8011964 <FLASH_Program_HalfWord+0x44>)
 801193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011942:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011944:	4b07      	ldr	r3, [pc, #28]	; (8011964 <FLASH_Program_HalfWord+0x44>)
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	4a06      	ldr	r2, [pc, #24]	; (8011964 <FLASH_Program_HalfWord+0x44>)
 801194a:	f043 0301 	orr.w	r3, r3, #1
 801194e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	887a      	ldrh	r2, [r7, #2]
 8011954:	801a      	strh	r2, [r3, #0]
}
 8011956:	bf00      	nop
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	40023c00 	.word	0x40023c00

08011968 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	460b      	mov	r3, r1
 8011972:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011974:	4b0c      	ldr	r3, [pc, #48]	; (80119a8 <FLASH_Program_Byte+0x40>)
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	4a0b      	ldr	r2, [pc, #44]	; (80119a8 <FLASH_Program_Byte+0x40>)
 801197a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801197e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011980:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <FLASH_Program_Byte+0x40>)
 8011982:	4a09      	ldr	r2, [pc, #36]	; (80119a8 <FLASH_Program_Byte+0x40>)
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011988:	4b07      	ldr	r3, [pc, #28]	; (80119a8 <FLASH_Program_Byte+0x40>)
 801198a:	691b      	ldr	r3, [r3, #16]
 801198c:	4a06      	ldr	r2, [pc, #24]	; (80119a8 <FLASH_Program_Byte+0x40>)
 801198e:	f043 0301 	orr.w	r3, r3, #1
 8011992:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	78fa      	ldrb	r2, [r7, #3]
 8011998:	701a      	strb	r2, [r3, #0]
}
 801199a:	bf00      	nop
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	40023c00 	.word	0x40023c00

080119ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80119ac:	b480      	push	{r7}
 80119ae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80119b0:	4b27      	ldr	r3, [pc, #156]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	f003 0310 	and.w	r3, r3, #16
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d008      	beq.n	80119ce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80119bc:	4b25      	ldr	r3, [pc, #148]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 80119be:	69db      	ldr	r3, [r3, #28]
 80119c0:	f043 0310 	orr.w	r3, r3, #16
 80119c4:	4a23      	ldr	r2, [pc, #140]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 80119c6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80119c8:	4b21      	ldr	r3, [pc, #132]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 80119ca:	2210      	movs	r2, #16
 80119cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80119ce:	4b20      	ldr	r3, [pc, #128]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	f003 0320 	and.w	r3, r3, #32
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d008      	beq.n	80119ec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80119da:	4b1e      	ldr	r3, [pc, #120]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 80119dc:	69db      	ldr	r3, [r3, #28]
 80119de:	f043 0308 	orr.w	r3, r3, #8
 80119e2:	4a1c      	ldr	r2, [pc, #112]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 80119e4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80119e6:	4b1a      	ldr	r3, [pc, #104]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 80119e8:	2220      	movs	r2, #32
 80119ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80119ec:	4b18      	ldr	r3, [pc, #96]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d008      	beq.n	8011a0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80119f8:	4b16      	ldr	r3, [pc, #88]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 80119fa:	69db      	ldr	r3, [r3, #28]
 80119fc:	f043 0304 	orr.w	r3, r3, #4
 8011a00:	4a14      	ldr	r2, [pc, #80]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 8011a02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011a04:	4b12      	ldr	r3, [pc, #72]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 8011a06:	2240      	movs	r2, #64	; 0x40
 8011a08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8011a0a:	4b11      	ldr	r3, [pc, #68]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d008      	beq.n	8011a28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8011a16:	4b0f      	ldr	r3, [pc, #60]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 8011a18:	69db      	ldr	r3, [r3, #28]
 8011a1a:	f043 0302 	orr.w	r3, r3, #2
 8011a1e:	4a0d      	ldr	r2, [pc, #52]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 8011a20:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8011a22:	4b0b      	ldr	r3, [pc, #44]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 8011a24:	2280      	movs	r2, #128	; 0x80
 8011a26:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8011a28:	4b09      	ldr	r3, [pc, #36]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	f003 0302 	and.w	r3, r3, #2
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d008      	beq.n	8011a46 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8011a34:	4b07      	ldr	r3, [pc, #28]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 8011a36:	69db      	ldr	r3, [r3, #28]
 8011a38:	f043 0320 	orr.w	r3, r3, #32
 8011a3c:	4a05      	ldr	r2, [pc, #20]	; (8011a54 <FLASH_SetErrorCode+0xa8>)
 8011a3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8011a40:	4b03      	ldr	r3, [pc, #12]	; (8011a50 <FLASH_SetErrorCode+0xa4>)
 8011a42:	2202      	movs	r2, #2
 8011a44:	60da      	str	r2, [r3, #12]
  }
}
 8011a46:	bf00      	nop
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr
 8011a50:	40023c00 	.word	0x40023c00
 8011a54:	20003248 	.word	0x20003248

08011a58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011a68:	78fb      	ldrb	r3, [r7, #3]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d102      	bne.n	8011a74 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	60fb      	str	r3, [r7, #12]
 8011a72:	e010      	b.n	8011a96 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011a74:	78fb      	ldrb	r3, [r7, #3]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d103      	bne.n	8011a82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a7e:	60fb      	str	r3, [r7, #12]
 8011a80:	e009      	b.n	8011a96 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011a82:	78fb      	ldrb	r3, [r7, #3]
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	d103      	bne.n	8011a90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	e002      	b.n	8011a96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011a94:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011a96:	4b13      	ldr	r3, [pc, #76]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011a98:	691b      	ldr	r3, [r3, #16]
 8011a9a:	4a12      	ldr	r2, [pc, #72]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011aa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8011aa2:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011aa4:	691a      	ldr	r2, [r3, #16]
 8011aa6:	490f      	ldr	r1, [pc, #60]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	4313      	orrs	r3, r2
 8011aac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011aae:	4b0d      	ldr	r3, [pc, #52]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	4a0c      	ldr	r2, [pc, #48]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011ab4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011ab8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011aba:	4b0a      	ldr	r3, [pc, #40]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011abc:	691a      	ldr	r2, [r3, #16]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	4a07      	ldr	r2, [pc, #28]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011ac6:	f043 0302 	orr.w	r3, r3, #2
 8011aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011acc:	4b05      	ldr	r3, [pc, #20]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011ace:	691b      	ldr	r3, [r3, #16]
 8011ad0:	4a04      	ldr	r2, [pc, #16]	; (8011ae4 <FLASH_Erase_Sector+0x8c>)
 8011ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ad6:	6113      	str	r3, [r2, #16]
}
 8011ad8:	bf00      	nop
 8011ada:	3714      	adds	r7, #20
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr
 8011ae4:	40023c00 	.word	0x40023c00

08011ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b089      	sub	sp, #36	; 0x24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011af2:	2300      	movs	r3, #0
 8011af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011af6:	2300      	movs	r3, #0
 8011af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011afa:	2300      	movs	r3, #0
 8011afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011afe:	2300      	movs	r3, #0
 8011b00:	61fb      	str	r3, [r7, #28]
 8011b02:	e16b      	b.n	8011ddc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011b04:	2201      	movs	r2, #1
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	fa02 f303 	lsl.w	r3, r2, r3
 8011b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	697a      	ldr	r2, [r7, #20]
 8011b14:	4013      	ands	r3, r2
 8011b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011b18:	693a      	ldr	r2, [r7, #16]
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	f040 815a 	bne.w	8011dd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	f003 0303 	and.w	r3, r3, #3
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d005      	beq.n	8011b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	d130      	bne.n	8011b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	689b      	ldr	r3, [r3, #8]
 8011b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	2203      	movs	r2, #3
 8011b46:	fa02 f303 	lsl.w	r3, r2, r3
 8011b4a:	43db      	mvns	r3, r3
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	4013      	ands	r3, r2
 8011b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	68da      	ldr	r2, [r3, #12]
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	005b      	lsls	r3, r3, #1
 8011b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b5e:	69ba      	ldr	r2, [r7, #24]
 8011b60:	4313      	orrs	r3, r2
 8011b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	69ba      	ldr	r2, [r7, #24]
 8011b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011b70:	2201      	movs	r2, #1
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	fa02 f303 	lsl.w	r3, r2, r3
 8011b78:	43db      	mvns	r3, r3
 8011b7a:	69ba      	ldr	r2, [r7, #24]
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	091b      	lsrs	r3, r3, #4
 8011b86:	f003 0201 	and.w	r2, r3, #1
 8011b8a:	69fb      	ldr	r3, [r7, #28]
 8011b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b90:	69ba      	ldr	r2, [r7, #24]
 8011b92:	4313      	orrs	r3, r2
 8011b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	69ba      	ldr	r2, [r7, #24]
 8011b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	f003 0303 	and.w	r3, r3, #3
 8011ba4:	2b03      	cmp	r3, #3
 8011ba6:	d017      	beq.n	8011bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	005b      	lsls	r3, r3, #1
 8011bb2:	2203      	movs	r2, #3
 8011bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011bb8:	43db      	mvns	r3, r3
 8011bba:	69ba      	ldr	r2, [r7, #24]
 8011bbc:	4013      	ands	r3, r2
 8011bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	689a      	ldr	r2, [r3, #8]
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	005b      	lsls	r3, r3, #1
 8011bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8011bcc:	69ba      	ldr	r2, [r7, #24]
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	f003 0303 	and.w	r3, r3, #3
 8011be0:	2b02      	cmp	r3, #2
 8011be2:	d123      	bne.n	8011c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	08da      	lsrs	r2, r3, #3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	3208      	adds	r2, #8
 8011bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	f003 0307 	and.w	r3, r3, #7
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	220f      	movs	r2, #15
 8011bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8011c00:	43db      	mvns	r3, r3
 8011c02:	69ba      	ldr	r2, [r7, #24]
 8011c04:	4013      	ands	r3, r2
 8011c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	691a      	ldr	r2, [r3, #16]
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	f003 0307 	and.w	r3, r3, #7
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	fa02 f303 	lsl.w	r3, r2, r3
 8011c18:	69ba      	ldr	r2, [r7, #24]
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	08da      	lsrs	r2, r3, #3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	3208      	adds	r2, #8
 8011c26:	69b9      	ldr	r1, [r7, #24]
 8011c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	2203      	movs	r2, #3
 8011c38:	fa02 f303 	lsl.w	r3, r2, r3
 8011c3c:	43db      	mvns	r3, r3
 8011c3e:	69ba      	ldr	r2, [r7, #24]
 8011c40:	4013      	ands	r3, r2
 8011c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	f003 0203 	and.w	r2, r3, #3
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	005b      	lsls	r3, r3, #1
 8011c50:	fa02 f303 	lsl.w	r3, r2, r3
 8011c54:	69ba      	ldr	r2, [r7, #24]
 8011c56:	4313      	orrs	r3, r2
 8011c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	69ba      	ldr	r2, [r7, #24]
 8011c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	f000 80b4 	beq.w	8011dd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c6e:	2300      	movs	r3, #0
 8011c70:	60fb      	str	r3, [r7, #12]
 8011c72:	4b60      	ldr	r3, [pc, #384]	; (8011df4 <HAL_GPIO_Init+0x30c>)
 8011c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c76:	4a5f      	ldr	r2, [pc, #380]	; (8011df4 <HAL_GPIO_Init+0x30c>)
 8011c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8011c7e:	4b5d      	ldr	r3, [pc, #372]	; (8011df4 <HAL_GPIO_Init+0x30c>)
 8011c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c86:	60fb      	str	r3, [r7, #12]
 8011c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011c8a:	4a5b      	ldr	r2, [pc, #364]	; (8011df8 <HAL_GPIO_Init+0x310>)
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	089b      	lsrs	r3, r3, #2
 8011c90:	3302      	adds	r3, #2
 8011c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	f003 0303 	and.w	r3, r3, #3
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	220f      	movs	r2, #15
 8011ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ca6:	43db      	mvns	r3, r3
 8011ca8:	69ba      	ldr	r2, [r7, #24]
 8011caa:	4013      	ands	r3, r2
 8011cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4a52      	ldr	r2, [pc, #328]	; (8011dfc <HAL_GPIO_Init+0x314>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d02b      	beq.n	8011d0e <HAL_GPIO_Init+0x226>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4a51      	ldr	r2, [pc, #324]	; (8011e00 <HAL_GPIO_Init+0x318>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d025      	beq.n	8011d0a <HAL_GPIO_Init+0x222>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	4a50      	ldr	r2, [pc, #320]	; (8011e04 <HAL_GPIO_Init+0x31c>)
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d01f      	beq.n	8011d06 <HAL_GPIO_Init+0x21e>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	4a4f      	ldr	r2, [pc, #316]	; (8011e08 <HAL_GPIO_Init+0x320>)
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	d019      	beq.n	8011d02 <HAL_GPIO_Init+0x21a>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	4a4e      	ldr	r2, [pc, #312]	; (8011e0c <HAL_GPIO_Init+0x324>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d013      	beq.n	8011cfe <HAL_GPIO_Init+0x216>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4a4d      	ldr	r2, [pc, #308]	; (8011e10 <HAL_GPIO_Init+0x328>)
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d00d      	beq.n	8011cfa <HAL_GPIO_Init+0x212>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4a4c      	ldr	r2, [pc, #304]	; (8011e14 <HAL_GPIO_Init+0x32c>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d007      	beq.n	8011cf6 <HAL_GPIO_Init+0x20e>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	4a4b      	ldr	r2, [pc, #300]	; (8011e18 <HAL_GPIO_Init+0x330>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d101      	bne.n	8011cf2 <HAL_GPIO_Init+0x20a>
 8011cee:	2307      	movs	r3, #7
 8011cf0:	e00e      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011cf2:	2308      	movs	r3, #8
 8011cf4:	e00c      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011cf6:	2306      	movs	r3, #6
 8011cf8:	e00a      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011cfa:	2305      	movs	r3, #5
 8011cfc:	e008      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011cfe:	2304      	movs	r3, #4
 8011d00:	e006      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011d02:	2303      	movs	r3, #3
 8011d04:	e004      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011d06:	2302      	movs	r3, #2
 8011d08:	e002      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	e000      	b.n	8011d10 <HAL_GPIO_Init+0x228>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	69fa      	ldr	r2, [r7, #28]
 8011d12:	f002 0203 	and.w	r2, r2, #3
 8011d16:	0092      	lsls	r2, r2, #2
 8011d18:	4093      	lsls	r3, r2
 8011d1a:	69ba      	ldr	r2, [r7, #24]
 8011d1c:	4313      	orrs	r3, r2
 8011d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011d20:	4935      	ldr	r1, [pc, #212]	; (8011df8 <HAL_GPIO_Init+0x310>)
 8011d22:	69fb      	ldr	r3, [r7, #28]
 8011d24:	089b      	lsrs	r3, r3, #2
 8011d26:	3302      	adds	r3, #2
 8011d28:	69ba      	ldr	r2, [r7, #24]
 8011d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011d2e:	4b3b      	ldr	r3, [pc, #236]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011d30:	689b      	ldr	r3, [r3, #8]
 8011d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	43db      	mvns	r3, r3
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	4013      	ands	r3, r2
 8011d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d003      	beq.n	8011d52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011d52:	4a32      	ldr	r2, [pc, #200]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011d58:	4b30      	ldr	r3, [pc, #192]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	43db      	mvns	r3, r3
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	4013      	ands	r3, r2
 8011d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d003      	beq.n	8011d7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011d74:	69ba      	ldr	r2, [r7, #24]
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011d7c:	4a27      	ldr	r2, [pc, #156]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8011d82:	4b26      	ldr	r3, [pc, #152]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	43db      	mvns	r3, r3
 8011d8c:	69ba      	ldr	r2, [r7, #24]
 8011d8e:	4013      	ands	r3, r2
 8011d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d003      	beq.n	8011da6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8011d9e:	69ba      	ldr	r2, [r7, #24]
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011da6:	4a1d      	ldr	r2, [pc, #116]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011dac:	4b1b      	ldr	r3, [pc, #108]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	43db      	mvns	r3, r3
 8011db6:	69ba      	ldr	r2, [r7, #24]
 8011db8:	4013      	ands	r3, r2
 8011dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011dc8:	69ba      	ldr	r2, [r7, #24]
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011dd0:	4a12      	ldr	r2, [pc, #72]	; (8011e1c <HAL_GPIO_Init+0x334>)
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011dd6:	69fb      	ldr	r3, [r7, #28]
 8011dd8:	3301      	adds	r3, #1
 8011dda:	61fb      	str	r3, [r7, #28]
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	2b0f      	cmp	r3, #15
 8011de0:	f67f ae90 	bls.w	8011b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011de4:	bf00      	nop
 8011de6:	bf00      	nop
 8011de8:	3724      	adds	r7, #36	; 0x24
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	40023800 	.word	0x40023800
 8011df8:	40013800 	.word	0x40013800
 8011dfc:	40020000 	.word	0x40020000
 8011e00:	40020400 	.word	0x40020400
 8011e04:	40020800 	.word	0x40020800
 8011e08:	40020c00 	.word	0x40020c00
 8011e0c:	40021000 	.word	0x40021000
 8011e10:	40021400 	.word	0x40021400
 8011e14:	40021800 	.word	0x40021800
 8011e18:	40021c00 	.word	0x40021c00
 8011e1c:	40013c00 	.word	0x40013c00

08011e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	460b      	mov	r3, r1
 8011e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	691a      	ldr	r2, [r3, #16]
 8011e30:	887b      	ldrh	r3, [r7, #2]
 8011e32:	4013      	ands	r3, r2
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d002      	beq.n	8011e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011e38:	2301      	movs	r3, #1
 8011e3a:	73fb      	strb	r3, [r7, #15]
 8011e3c:	e001      	b.n	8011e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3714      	adds	r7, #20
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	460b      	mov	r3, r1
 8011e5a:	807b      	strh	r3, [r7, #2]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011e60:	787b      	ldrb	r3, [r7, #1]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d003      	beq.n	8011e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011e66:	887a      	ldrh	r2, [r7, #2]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011e6c:	e003      	b.n	8011e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011e6e:	887b      	ldrh	r3, [r7, #2]
 8011e70:	041a      	lsls	r2, r3, #16
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	619a      	str	r2, [r3, #24]
}
 8011e76:	bf00      	nop
 8011e78:	370c      	adds	r7, #12
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr
	...

08011e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b086      	sub	sp, #24
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d101      	bne.n	8011e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011e92:	2301      	movs	r3, #1
 8011e94:	e267      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f003 0301 	and.w	r3, r3, #1
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d075      	beq.n	8011f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011ea2:	4b88      	ldr	r3, [pc, #544]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	f003 030c 	and.w	r3, r3, #12
 8011eaa:	2b04      	cmp	r3, #4
 8011eac:	d00c      	beq.n	8011ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011eae:	4b85      	ldr	r3, [pc, #532]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011eb6:	2b08      	cmp	r3, #8
 8011eb8:	d112      	bne.n	8011ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011eba:	4b82      	ldr	r3, [pc, #520]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011ec6:	d10b      	bne.n	8011ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011ec8:	4b7e      	ldr	r3, [pc, #504]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d05b      	beq.n	8011f8c <HAL_RCC_OscConfig+0x108>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d157      	bne.n	8011f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011edc:	2301      	movs	r3, #1
 8011ede:	e242      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ee8:	d106      	bne.n	8011ef8 <HAL_RCC_OscConfig+0x74>
 8011eea:	4b76      	ldr	r3, [pc, #472]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a75      	ldr	r2, [pc, #468]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ef4:	6013      	str	r3, [r2, #0]
 8011ef6:	e01d      	b.n	8011f34 <HAL_RCC_OscConfig+0xb0>
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011f00:	d10c      	bne.n	8011f1c <HAL_RCC_OscConfig+0x98>
 8011f02:	4b70      	ldr	r3, [pc, #448]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	4a6f      	ldr	r2, [pc, #444]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011f0c:	6013      	str	r3, [r2, #0]
 8011f0e:	4b6d      	ldr	r3, [pc, #436]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4a6c      	ldr	r2, [pc, #432]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f18:	6013      	str	r3, [r2, #0]
 8011f1a:	e00b      	b.n	8011f34 <HAL_RCC_OscConfig+0xb0>
 8011f1c:	4b69      	ldr	r3, [pc, #420]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a68      	ldr	r2, [pc, #416]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f26:	6013      	str	r3, [r2, #0]
 8011f28:	4b66      	ldr	r3, [pc, #408]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4a65      	ldr	r2, [pc, #404]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d013      	beq.n	8011f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f3c:	f7fd fbce 	bl	800f6dc <HAL_GetTick>
 8011f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f42:	e008      	b.n	8011f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f44:	f7fd fbca 	bl	800f6dc <HAL_GetTick>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	2b64      	cmp	r3, #100	; 0x64
 8011f50:	d901      	bls.n	8011f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011f52:	2303      	movs	r3, #3
 8011f54:	e207      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f56:	4b5b      	ldr	r3, [pc, #364]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d0f0      	beq.n	8011f44 <HAL_RCC_OscConfig+0xc0>
 8011f62:	e014      	b.n	8011f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f64:	f7fd fbba 	bl	800f6dc <HAL_GetTick>
 8011f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011f6a:	e008      	b.n	8011f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f6c:	f7fd fbb6 	bl	800f6dc <HAL_GetTick>
 8011f70:	4602      	mov	r2, r0
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	1ad3      	subs	r3, r2, r3
 8011f76:	2b64      	cmp	r3, #100	; 0x64
 8011f78:	d901      	bls.n	8011f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	e1f3      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011f7e:	4b51      	ldr	r3, [pc, #324]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d1f0      	bne.n	8011f6c <HAL_RCC_OscConfig+0xe8>
 8011f8a:	e000      	b.n	8011f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f003 0302 	and.w	r3, r3, #2
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d063      	beq.n	8012062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011f9a:	4b4a      	ldr	r3, [pc, #296]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	f003 030c 	and.w	r3, r3, #12
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00b      	beq.n	8011fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011fa6:	4b47      	ldr	r3, [pc, #284]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011fae:	2b08      	cmp	r3, #8
 8011fb0:	d11c      	bne.n	8011fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011fb2:	4b44      	ldr	r3, [pc, #272]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d116      	bne.n	8011fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011fbe:	4b41      	ldr	r3, [pc, #260]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f003 0302 	and.w	r3, r3, #2
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d005      	beq.n	8011fd6 <HAL_RCC_OscConfig+0x152>
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	68db      	ldr	r3, [r3, #12]
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d001      	beq.n	8011fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e1c7      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011fd6:	4b3b      	ldr	r3, [pc, #236]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	00db      	lsls	r3, r3, #3
 8011fe4:	4937      	ldr	r1, [pc, #220]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011fea:	e03a      	b.n	8012062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d020      	beq.n	8012036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011ff4:	4b34      	ldr	r3, [pc, #208]	; (80120c8 <HAL_RCC_OscConfig+0x244>)
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ffa:	f7fd fb6f 	bl	800f6dc <HAL_GetTick>
 8011ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012000:	e008      	b.n	8012014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012002:	f7fd fb6b 	bl	800f6dc <HAL_GetTick>
 8012006:	4602      	mov	r2, r0
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	2b02      	cmp	r3, #2
 801200e:	d901      	bls.n	8012014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012010:	2303      	movs	r3, #3
 8012012:	e1a8      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012014:	4b2b      	ldr	r3, [pc, #172]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f003 0302 	and.w	r3, r3, #2
 801201c:	2b00      	cmp	r3, #0
 801201e:	d0f0      	beq.n	8012002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012020:	4b28      	ldr	r3, [pc, #160]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	691b      	ldr	r3, [r3, #16]
 801202c:	00db      	lsls	r3, r3, #3
 801202e:	4925      	ldr	r1, [pc, #148]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8012030:	4313      	orrs	r3, r2
 8012032:	600b      	str	r3, [r1, #0]
 8012034:	e015      	b.n	8012062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012036:	4b24      	ldr	r3, [pc, #144]	; (80120c8 <HAL_RCC_OscConfig+0x244>)
 8012038:	2200      	movs	r2, #0
 801203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801203c:	f7fd fb4e 	bl	800f6dc <HAL_GetTick>
 8012040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012042:	e008      	b.n	8012056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012044:	f7fd fb4a 	bl	800f6dc <HAL_GetTick>
 8012048:	4602      	mov	r2, r0
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	2b02      	cmp	r3, #2
 8012050:	d901      	bls.n	8012056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012052:	2303      	movs	r3, #3
 8012054:	e187      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012056:	4b1b      	ldr	r3, [pc, #108]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f003 0302 	and.w	r3, r3, #2
 801205e:	2b00      	cmp	r3, #0
 8012060:	d1f0      	bne.n	8012044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f003 0308 	and.w	r3, r3, #8
 801206a:	2b00      	cmp	r3, #0
 801206c:	d036      	beq.n	80120dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	695b      	ldr	r3, [r3, #20]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d016      	beq.n	80120a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012076:	4b15      	ldr	r3, [pc, #84]	; (80120cc <HAL_RCC_OscConfig+0x248>)
 8012078:	2201      	movs	r2, #1
 801207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801207c:	f7fd fb2e 	bl	800f6dc <HAL_GetTick>
 8012080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012082:	e008      	b.n	8012096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012084:	f7fd fb2a 	bl	800f6dc <HAL_GetTick>
 8012088:	4602      	mov	r2, r0
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	1ad3      	subs	r3, r2, r3
 801208e:	2b02      	cmp	r3, #2
 8012090:	d901      	bls.n	8012096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012092:	2303      	movs	r3, #3
 8012094:	e167      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012096:	4b0b      	ldr	r3, [pc, #44]	; (80120c4 <HAL_RCC_OscConfig+0x240>)
 8012098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801209a:	f003 0302 	and.w	r3, r3, #2
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d0f0      	beq.n	8012084 <HAL_RCC_OscConfig+0x200>
 80120a2:	e01b      	b.n	80120dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80120a4:	4b09      	ldr	r3, [pc, #36]	; (80120cc <HAL_RCC_OscConfig+0x248>)
 80120a6:	2200      	movs	r2, #0
 80120a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80120aa:	f7fd fb17 	bl	800f6dc <HAL_GetTick>
 80120ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80120b0:	e00e      	b.n	80120d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80120b2:	f7fd fb13 	bl	800f6dc <HAL_GetTick>
 80120b6:	4602      	mov	r2, r0
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	2b02      	cmp	r3, #2
 80120be:	d907      	bls.n	80120d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80120c0:	2303      	movs	r3, #3
 80120c2:	e150      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
 80120c4:	40023800 	.word	0x40023800
 80120c8:	42470000 	.word	0x42470000
 80120cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80120d0:	4b88      	ldr	r3, [pc, #544]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80120d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120d4:	f003 0302 	and.w	r3, r3, #2
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1ea      	bne.n	80120b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f003 0304 	and.w	r3, r3, #4
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f000 8097 	beq.w	8012218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80120ea:	2300      	movs	r3, #0
 80120ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80120ee:	4b81      	ldr	r3, [pc, #516]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80120f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d10f      	bne.n	801211a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80120fa:	2300      	movs	r3, #0
 80120fc:	60bb      	str	r3, [r7, #8]
 80120fe:	4b7d      	ldr	r3, [pc, #500]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012102:	4a7c      	ldr	r2, [pc, #496]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012108:	6413      	str	r3, [r2, #64]	; 0x40
 801210a:	4b7a      	ldr	r3, [pc, #488]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 801210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012112:	60bb      	str	r3, [r7, #8]
 8012114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012116:	2301      	movs	r3, #1
 8012118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801211a:	4b77      	ldr	r3, [pc, #476]	; (80122f8 <HAL_RCC_OscConfig+0x474>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012122:	2b00      	cmp	r3, #0
 8012124:	d118      	bne.n	8012158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012126:	4b74      	ldr	r3, [pc, #464]	; (80122f8 <HAL_RCC_OscConfig+0x474>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4a73      	ldr	r2, [pc, #460]	; (80122f8 <HAL_RCC_OscConfig+0x474>)
 801212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012132:	f7fd fad3 	bl	800f6dc <HAL_GetTick>
 8012136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012138:	e008      	b.n	801214c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801213a:	f7fd facf 	bl	800f6dc <HAL_GetTick>
 801213e:	4602      	mov	r2, r0
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	2b02      	cmp	r3, #2
 8012146:	d901      	bls.n	801214c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8012148:	2303      	movs	r3, #3
 801214a:	e10c      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801214c:	4b6a      	ldr	r3, [pc, #424]	; (80122f8 <HAL_RCC_OscConfig+0x474>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012154:	2b00      	cmp	r3, #0
 8012156:	d0f0      	beq.n	801213a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d106      	bne.n	801216e <HAL_RCC_OscConfig+0x2ea>
 8012160:	4b64      	ldr	r3, [pc, #400]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012164:	4a63      	ldr	r2, [pc, #396]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012166:	f043 0301 	orr.w	r3, r3, #1
 801216a:	6713      	str	r3, [r2, #112]	; 0x70
 801216c:	e01c      	b.n	80121a8 <HAL_RCC_OscConfig+0x324>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	2b05      	cmp	r3, #5
 8012174:	d10c      	bne.n	8012190 <HAL_RCC_OscConfig+0x30c>
 8012176:	4b5f      	ldr	r3, [pc, #380]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801217a:	4a5e      	ldr	r2, [pc, #376]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 801217c:	f043 0304 	orr.w	r3, r3, #4
 8012180:	6713      	str	r3, [r2, #112]	; 0x70
 8012182:	4b5c      	ldr	r3, [pc, #368]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012186:	4a5b      	ldr	r2, [pc, #364]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012188:	f043 0301 	orr.w	r3, r3, #1
 801218c:	6713      	str	r3, [r2, #112]	; 0x70
 801218e:	e00b      	b.n	80121a8 <HAL_RCC_OscConfig+0x324>
 8012190:	4b58      	ldr	r3, [pc, #352]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012194:	4a57      	ldr	r2, [pc, #348]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012196:	f023 0301 	bic.w	r3, r3, #1
 801219a:	6713      	str	r3, [r2, #112]	; 0x70
 801219c:	4b55      	ldr	r3, [pc, #340]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 801219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a0:	4a54      	ldr	r2, [pc, #336]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80121a2:	f023 0304 	bic.w	r3, r3, #4
 80121a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d015      	beq.n	80121dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80121b0:	f7fd fa94 	bl	800f6dc <HAL_GetTick>
 80121b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80121b6:	e00a      	b.n	80121ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80121b8:	f7fd fa90 	bl	800f6dc <HAL_GetTick>
 80121bc:	4602      	mov	r2, r0
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d901      	bls.n	80121ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80121ca:	2303      	movs	r3, #3
 80121cc:	e0cb      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80121ce:	4b49      	ldr	r3, [pc, #292]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80121d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121d2:	f003 0302 	and.w	r3, r3, #2
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d0ee      	beq.n	80121b8 <HAL_RCC_OscConfig+0x334>
 80121da:	e014      	b.n	8012206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80121dc:	f7fd fa7e 	bl	800f6dc <HAL_GetTick>
 80121e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80121e2:	e00a      	b.n	80121fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80121e4:	f7fd fa7a 	bl	800f6dc <HAL_GetTick>
 80121e8:	4602      	mov	r2, r0
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	1ad3      	subs	r3, r2, r3
 80121ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d901      	bls.n	80121fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80121f6:	2303      	movs	r3, #3
 80121f8:	e0b5      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80121fa:	4b3e      	ldr	r3, [pc, #248]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80121fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121fe:	f003 0302 	and.w	r3, r3, #2
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1ee      	bne.n	80121e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012206:	7dfb      	ldrb	r3, [r7, #23]
 8012208:	2b01      	cmp	r3, #1
 801220a:	d105      	bne.n	8012218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801220c:	4b39      	ldr	r3, [pc, #228]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 801220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012210:	4a38      	ldr	r2, [pc, #224]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	699b      	ldr	r3, [r3, #24]
 801221c:	2b00      	cmp	r3, #0
 801221e:	f000 80a1 	beq.w	8012364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012222:	4b34      	ldr	r3, [pc, #208]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012224:	689b      	ldr	r3, [r3, #8]
 8012226:	f003 030c 	and.w	r3, r3, #12
 801222a:	2b08      	cmp	r3, #8
 801222c:	d05c      	beq.n	80122e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	699b      	ldr	r3, [r3, #24]
 8012232:	2b02      	cmp	r3, #2
 8012234:	d141      	bne.n	80122ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012236:	4b31      	ldr	r3, [pc, #196]	; (80122fc <HAL_RCC_OscConfig+0x478>)
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801223c:	f7fd fa4e 	bl	800f6dc <HAL_GetTick>
 8012240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012242:	e008      	b.n	8012256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012244:	f7fd fa4a 	bl	800f6dc <HAL_GetTick>
 8012248:	4602      	mov	r2, r0
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	1ad3      	subs	r3, r2, r3
 801224e:	2b02      	cmp	r3, #2
 8012250:	d901      	bls.n	8012256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8012252:	2303      	movs	r3, #3
 8012254:	e087      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012256:	4b27      	ldr	r3, [pc, #156]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801225e:	2b00      	cmp	r3, #0
 8012260:	d1f0      	bne.n	8012244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	69da      	ldr	r2, [r3, #28]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	431a      	orrs	r2, r3
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012270:	019b      	lsls	r3, r3, #6
 8012272:	431a      	orrs	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012278:	085b      	lsrs	r3, r3, #1
 801227a:	3b01      	subs	r3, #1
 801227c:	041b      	lsls	r3, r3, #16
 801227e:	431a      	orrs	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012284:	061b      	lsls	r3, r3, #24
 8012286:	491b      	ldr	r1, [pc, #108]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 8012288:	4313      	orrs	r3, r2
 801228a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801228c:	4b1b      	ldr	r3, [pc, #108]	; (80122fc <HAL_RCC_OscConfig+0x478>)
 801228e:	2201      	movs	r2, #1
 8012290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012292:	f7fd fa23 	bl	800f6dc <HAL_GetTick>
 8012296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012298:	e008      	b.n	80122ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801229a:	f7fd fa1f 	bl	800f6dc <HAL_GetTick>
 801229e:	4602      	mov	r2, r0
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	2b02      	cmp	r3, #2
 80122a6:	d901      	bls.n	80122ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80122a8:	2303      	movs	r3, #3
 80122aa:	e05c      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80122ac:	4b11      	ldr	r3, [pc, #68]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d0f0      	beq.n	801229a <HAL_RCC_OscConfig+0x416>
 80122b8:	e054      	b.n	8012364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80122ba:	4b10      	ldr	r3, [pc, #64]	; (80122fc <HAL_RCC_OscConfig+0x478>)
 80122bc:	2200      	movs	r2, #0
 80122be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80122c0:	f7fd fa0c 	bl	800f6dc <HAL_GetTick>
 80122c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80122c6:	e008      	b.n	80122da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80122c8:	f7fd fa08 	bl	800f6dc <HAL_GetTick>
 80122cc:	4602      	mov	r2, r0
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	d901      	bls.n	80122da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80122d6:	2303      	movs	r3, #3
 80122d8:	e045      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80122da:	4b06      	ldr	r3, [pc, #24]	; (80122f4 <HAL_RCC_OscConfig+0x470>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1f0      	bne.n	80122c8 <HAL_RCC_OscConfig+0x444>
 80122e6:	e03d      	b.n	8012364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	699b      	ldr	r3, [r3, #24]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d107      	bne.n	8012300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80122f0:	2301      	movs	r3, #1
 80122f2:	e038      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
 80122f4:	40023800 	.word	0x40023800
 80122f8:	40007000 	.word	0x40007000
 80122fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012300:	4b1b      	ldr	r3, [pc, #108]	; (8012370 <HAL_RCC_OscConfig+0x4ec>)
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	699b      	ldr	r3, [r3, #24]
 801230a:	2b01      	cmp	r3, #1
 801230c:	d028      	beq.n	8012360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012318:	429a      	cmp	r2, r3
 801231a:	d121      	bne.n	8012360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012326:	429a      	cmp	r2, r3
 8012328:	d11a      	bne.n	8012360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012330:	4013      	ands	r3, r2
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012338:	4293      	cmp	r3, r2
 801233a:	d111      	bne.n	8012360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012346:	085b      	lsrs	r3, r3, #1
 8012348:	3b01      	subs	r3, #1
 801234a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801234c:	429a      	cmp	r2, r3
 801234e:	d107      	bne.n	8012360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801235a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801235c:	429a      	cmp	r2, r3
 801235e:	d001      	beq.n	8012364 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8012360:	2301      	movs	r3, #1
 8012362:	e000      	b.n	8012366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8012364:	2300      	movs	r3, #0
}
 8012366:	4618      	mov	r0, r3
 8012368:	3718      	adds	r7, #24
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	40023800 	.word	0x40023800

08012374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d101      	bne.n	8012388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012384:	2301      	movs	r3, #1
 8012386:	e0cc      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012388:	4b68      	ldr	r3, [pc, #416]	; (801252c <HAL_RCC_ClockConfig+0x1b8>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f003 0307 	and.w	r3, r3, #7
 8012390:	683a      	ldr	r2, [r7, #0]
 8012392:	429a      	cmp	r2, r3
 8012394:	d90c      	bls.n	80123b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012396:	4b65      	ldr	r3, [pc, #404]	; (801252c <HAL_RCC_ClockConfig+0x1b8>)
 8012398:	683a      	ldr	r2, [r7, #0]
 801239a:	b2d2      	uxtb	r2, r2
 801239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801239e:	4b63      	ldr	r3, [pc, #396]	; (801252c <HAL_RCC_ClockConfig+0x1b8>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f003 0307 	and.w	r3, r3, #7
 80123a6:	683a      	ldr	r2, [r7, #0]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d001      	beq.n	80123b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80123ac:	2301      	movs	r3, #1
 80123ae:	e0b8      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f003 0302 	and.w	r3, r3, #2
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d020      	beq.n	80123fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f003 0304 	and.w	r3, r3, #4
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d005      	beq.n	80123d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80123c8:	4b59      	ldr	r3, [pc, #356]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80123ca:	689b      	ldr	r3, [r3, #8]
 80123cc:	4a58      	ldr	r2, [pc, #352]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80123ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80123d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	f003 0308 	and.w	r3, r3, #8
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d005      	beq.n	80123ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80123e0:	4b53      	ldr	r3, [pc, #332]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	4a52      	ldr	r2, [pc, #328]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80123e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80123ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80123ec:	4b50      	ldr	r3, [pc, #320]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	689b      	ldr	r3, [r3, #8]
 80123f8:	494d      	ldr	r1, [pc, #308]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80123fa:	4313      	orrs	r3, r2
 80123fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f003 0301 	and.w	r3, r3, #1
 8012406:	2b00      	cmp	r3, #0
 8012408:	d044      	beq.n	8012494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d107      	bne.n	8012422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012412:	4b47      	ldr	r3, [pc, #284]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801241a:	2b00      	cmp	r3, #0
 801241c:	d119      	bne.n	8012452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801241e:	2301      	movs	r3, #1
 8012420:	e07f      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	2b02      	cmp	r3, #2
 8012428:	d003      	beq.n	8012432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801242e:	2b03      	cmp	r3, #3
 8012430:	d107      	bne.n	8012442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012432:	4b3f      	ldr	r3, [pc, #252]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801243a:	2b00      	cmp	r3, #0
 801243c:	d109      	bne.n	8012452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801243e:	2301      	movs	r3, #1
 8012440:	e06f      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012442:	4b3b      	ldr	r3, [pc, #236]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f003 0302 	and.w	r3, r3, #2
 801244a:	2b00      	cmp	r3, #0
 801244c:	d101      	bne.n	8012452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801244e:	2301      	movs	r3, #1
 8012450:	e067      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012452:	4b37      	ldr	r3, [pc, #220]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012454:	689b      	ldr	r3, [r3, #8]
 8012456:	f023 0203 	bic.w	r2, r3, #3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4934      	ldr	r1, [pc, #208]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012460:	4313      	orrs	r3, r2
 8012462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012464:	f7fd f93a 	bl	800f6dc <HAL_GetTick>
 8012468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801246a:	e00a      	b.n	8012482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801246c:	f7fd f936 	bl	800f6dc <HAL_GetTick>
 8012470:	4602      	mov	r2, r0
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	1ad3      	subs	r3, r2, r3
 8012476:	f241 3288 	movw	r2, #5000	; 0x1388
 801247a:	4293      	cmp	r3, r2
 801247c:	d901      	bls.n	8012482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801247e:	2303      	movs	r3, #3
 8012480:	e04f      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012482:	4b2b      	ldr	r3, [pc, #172]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012484:	689b      	ldr	r3, [r3, #8]
 8012486:	f003 020c 	and.w	r2, r3, #12
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	429a      	cmp	r2, r3
 8012492:	d1eb      	bne.n	801246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012494:	4b25      	ldr	r3, [pc, #148]	; (801252c <HAL_RCC_ClockConfig+0x1b8>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f003 0307 	and.w	r3, r3, #7
 801249c:	683a      	ldr	r2, [r7, #0]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d20c      	bcs.n	80124bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80124a2:	4b22      	ldr	r3, [pc, #136]	; (801252c <HAL_RCC_ClockConfig+0x1b8>)
 80124a4:	683a      	ldr	r2, [r7, #0]
 80124a6:	b2d2      	uxtb	r2, r2
 80124a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80124aa:	4b20      	ldr	r3, [pc, #128]	; (801252c <HAL_RCC_ClockConfig+0x1b8>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f003 0307 	and.w	r3, r3, #7
 80124b2:	683a      	ldr	r2, [r7, #0]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d001      	beq.n	80124bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80124b8:	2301      	movs	r3, #1
 80124ba:	e032      	b.n	8012522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f003 0304 	and.w	r3, r3, #4
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d008      	beq.n	80124da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80124c8:	4b19      	ldr	r3, [pc, #100]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	4916      	ldr	r1, [pc, #88]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80124d6:	4313      	orrs	r3, r2
 80124d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f003 0308 	and.w	r3, r3, #8
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d009      	beq.n	80124fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80124e6:	4b12      	ldr	r3, [pc, #72]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	691b      	ldr	r3, [r3, #16]
 80124f2:	00db      	lsls	r3, r3, #3
 80124f4:	490e      	ldr	r1, [pc, #56]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 80124f6:	4313      	orrs	r3, r2
 80124f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80124fa:	f000 f821 	bl	8012540 <HAL_RCC_GetSysClockFreq>
 80124fe:	4602      	mov	r2, r0
 8012500:	4b0b      	ldr	r3, [pc, #44]	; (8012530 <HAL_RCC_ClockConfig+0x1bc>)
 8012502:	689b      	ldr	r3, [r3, #8]
 8012504:	091b      	lsrs	r3, r3, #4
 8012506:	f003 030f 	and.w	r3, r3, #15
 801250a:	490a      	ldr	r1, [pc, #40]	; (8012534 <HAL_RCC_ClockConfig+0x1c0>)
 801250c:	5ccb      	ldrb	r3, [r1, r3]
 801250e:	fa22 f303 	lsr.w	r3, r2, r3
 8012512:	4a09      	ldr	r2, [pc, #36]	; (8012538 <HAL_RCC_ClockConfig+0x1c4>)
 8012514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012516:	4b09      	ldr	r3, [pc, #36]	; (801253c <HAL_RCC_ClockConfig+0x1c8>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4618      	mov	r0, r3
 801251c:	f7fb fff6 	bl	800e50c <HAL_InitTick>

  return HAL_OK;
 8012520:	2300      	movs	r3, #0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	40023c00 	.word	0x40023c00
 8012530:	40023800 	.word	0x40023800
 8012534:	0801c380 	.word	0x0801c380
 8012538:	20000034 	.word	0x20000034
 801253c:	20000038 	.word	0x20000038

08012540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012544:	b094      	sub	sp, #80	; 0x50
 8012546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012548:	2300      	movs	r3, #0
 801254a:	647b      	str	r3, [r7, #68]	; 0x44
 801254c:	2300      	movs	r3, #0
 801254e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012550:	2300      	movs	r3, #0
 8012552:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8012554:	2300      	movs	r3, #0
 8012556:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012558:	4b79      	ldr	r3, [pc, #484]	; (8012740 <HAL_RCC_GetSysClockFreq+0x200>)
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	f003 030c 	and.w	r3, r3, #12
 8012560:	2b08      	cmp	r3, #8
 8012562:	d00d      	beq.n	8012580 <HAL_RCC_GetSysClockFreq+0x40>
 8012564:	2b08      	cmp	r3, #8
 8012566:	f200 80e1 	bhi.w	801272c <HAL_RCC_GetSysClockFreq+0x1ec>
 801256a:	2b00      	cmp	r3, #0
 801256c:	d002      	beq.n	8012574 <HAL_RCC_GetSysClockFreq+0x34>
 801256e:	2b04      	cmp	r3, #4
 8012570:	d003      	beq.n	801257a <HAL_RCC_GetSysClockFreq+0x3a>
 8012572:	e0db      	b.n	801272c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012574:	4b73      	ldr	r3, [pc, #460]	; (8012744 <HAL_RCC_GetSysClockFreq+0x204>)
 8012576:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8012578:	e0db      	b.n	8012732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801257a:	4b72      	ldr	r3, [pc, #456]	; (8012744 <HAL_RCC_GetSysClockFreq+0x204>)
 801257c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801257e:	e0d8      	b.n	8012732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012580:	4b6f      	ldr	r3, [pc, #444]	; (8012740 <HAL_RCC_GetSysClockFreq+0x200>)
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012588:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801258a:	4b6d      	ldr	r3, [pc, #436]	; (8012740 <HAL_RCC_GetSysClockFreq+0x200>)
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012592:	2b00      	cmp	r3, #0
 8012594:	d063      	beq.n	801265e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012596:	4b6a      	ldr	r3, [pc, #424]	; (8012740 <HAL_RCC_GetSysClockFreq+0x200>)
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	099b      	lsrs	r3, r3, #6
 801259c:	2200      	movs	r2, #0
 801259e:	63bb      	str	r3, [r7, #56]	; 0x38
 80125a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80125a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125a8:	633b      	str	r3, [r7, #48]	; 0x30
 80125aa:	2300      	movs	r3, #0
 80125ac:	637b      	str	r3, [r7, #52]	; 0x34
 80125ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80125b2:	4622      	mov	r2, r4
 80125b4:	462b      	mov	r3, r5
 80125b6:	f04f 0000 	mov.w	r0, #0
 80125ba:	f04f 0100 	mov.w	r1, #0
 80125be:	0159      	lsls	r1, r3, #5
 80125c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80125c4:	0150      	lsls	r0, r2, #5
 80125c6:	4602      	mov	r2, r0
 80125c8:	460b      	mov	r3, r1
 80125ca:	4621      	mov	r1, r4
 80125cc:	1a51      	subs	r1, r2, r1
 80125ce:	6139      	str	r1, [r7, #16]
 80125d0:	4629      	mov	r1, r5
 80125d2:	eb63 0301 	sbc.w	r3, r3, r1
 80125d6:	617b      	str	r3, [r7, #20]
 80125d8:	f04f 0200 	mov.w	r2, #0
 80125dc:	f04f 0300 	mov.w	r3, #0
 80125e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80125e4:	4659      	mov	r1, fp
 80125e6:	018b      	lsls	r3, r1, #6
 80125e8:	4651      	mov	r1, sl
 80125ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80125ee:	4651      	mov	r1, sl
 80125f0:	018a      	lsls	r2, r1, #6
 80125f2:	4651      	mov	r1, sl
 80125f4:	ebb2 0801 	subs.w	r8, r2, r1
 80125f8:	4659      	mov	r1, fp
 80125fa:	eb63 0901 	sbc.w	r9, r3, r1
 80125fe:	f04f 0200 	mov.w	r2, #0
 8012602:	f04f 0300 	mov.w	r3, #0
 8012606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801260a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801260e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012612:	4690      	mov	r8, r2
 8012614:	4699      	mov	r9, r3
 8012616:	4623      	mov	r3, r4
 8012618:	eb18 0303 	adds.w	r3, r8, r3
 801261c:	60bb      	str	r3, [r7, #8]
 801261e:	462b      	mov	r3, r5
 8012620:	eb49 0303 	adc.w	r3, r9, r3
 8012624:	60fb      	str	r3, [r7, #12]
 8012626:	f04f 0200 	mov.w	r2, #0
 801262a:	f04f 0300 	mov.w	r3, #0
 801262e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012632:	4629      	mov	r1, r5
 8012634:	028b      	lsls	r3, r1, #10
 8012636:	4621      	mov	r1, r4
 8012638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801263c:	4621      	mov	r1, r4
 801263e:	028a      	lsls	r2, r1, #10
 8012640:	4610      	mov	r0, r2
 8012642:	4619      	mov	r1, r3
 8012644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012646:	2200      	movs	r2, #0
 8012648:	62bb      	str	r3, [r7, #40]	; 0x28
 801264a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801264c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012650:	f7ed fe0e 	bl	8000270 <__aeabi_uldivmod>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4613      	mov	r3, r2
 801265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801265c:	e058      	b.n	8012710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801265e:	4b38      	ldr	r3, [pc, #224]	; (8012740 <HAL_RCC_GetSysClockFreq+0x200>)
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	099b      	lsrs	r3, r3, #6
 8012664:	2200      	movs	r2, #0
 8012666:	4618      	mov	r0, r3
 8012668:	4611      	mov	r1, r2
 801266a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801266e:	623b      	str	r3, [r7, #32]
 8012670:	2300      	movs	r3, #0
 8012672:	627b      	str	r3, [r7, #36]	; 0x24
 8012674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012678:	4642      	mov	r2, r8
 801267a:	464b      	mov	r3, r9
 801267c:	f04f 0000 	mov.w	r0, #0
 8012680:	f04f 0100 	mov.w	r1, #0
 8012684:	0159      	lsls	r1, r3, #5
 8012686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801268a:	0150      	lsls	r0, r2, #5
 801268c:	4602      	mov	r2, r0
 801268e:	460b      	mov	r3, r1
 8012690:	4641      	mov	r1, r8
 8012692:	ebb2 0a01 	subs.w	sl, r2, r1
 8012696:	4649      	mov	r1, r9
 8012698:	eb63 0b01 	sbc.w	fp, r3, r1
 801269c:	f04f 0200 	mov.w	r2, #0
 80126a0:	f04f 0300 	mov.w	r3, #0
 80126a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80126a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80126ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80126b0:	ebb2 040a 	subs.w	r4, r2, sl
 80126b4:	eb63 050b 	sbc.w	r5, r3, fp
 80126b8:	f04f 0200 	mov.w	r2, #0
 80126bc:	f04f 0300 	mov.w	r3, #0
 80126c0:	00eb      	lsls	r3, r5, #3
 80126c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80126c6:	00e2      	lsls	r2, r4, #3
 80126c8:	4614      	mov	r4, r2
 80126ca:	461d      	mov	r5, r3
 80126cc:	4643      	mov	r3, r8
 80126ce:	18e3      	adds	r3, r4, r3
 80126d0:	603b      	str	r3, [r7, #0]
 80126d2:	464b      	mov	r3, r9
 80126d4:	eb45 0303 	adc.w	r3, r5, r3
 80126d8:	607b      	str	r3, [r7, #4]
 80126da:	f04f 0200 	mov.w	r2, #0
 80126de:	f04f 0300 	mov.w	r3, #0
 80126e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80126e6:	4629      	mov	r1, r5
 80126e8:	028b      	lsls	r3, r1, #10
 80126ea:	4621      	mov	r1, r4
 80126ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80126f0:	4621      	mov	r1, r4
 80126f2:	028a      	lsls	r2, r1, #10
 80126f4:	4610      	mov	r0, r2
 80126f6:	4619      	mov	r1, r3
 80126f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126fa:	2200      	movs	r2, #0
 80126fc:	61bb      	str	r3, [r7, #24]
 80126fe:	61fa      	str	r2, [r7, #28]
 8012700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012704:	f7ed fdb4 	bl	8000270 <__aeabi_uldivmod>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	4613      	mov	r3, r2
 801270e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012710:	4b0b      	ldr	r3, [pc, #44]	; (8012740 <HAL_RCC_GetSysClockFreq+0x200>)
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	0c1b      	lsrs	r3, r3, #16
 8012716:	f003 0303 	and.w	r3, r3, #3
 801271a:	3301      	adds	r3, #1
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8012720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012724:	fbb2 f3f3 	udiv	r3, r2, r3
 8012728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801272a:	e002      	b.n	8012732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801272c:	4b05      	ldr	r3, [pc, #20]	; (8012744 <HAL_RCC_GetSysClockFreq+0x204>)
 801272e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8012734:	4618      	mov	r0, r3
 8012736:	3750      	adds	r7, #80	; 0x50
 8012738:	46bd      	mov	sp, r7
 801273a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801273e:	bf00      	nop
 8012740:	40023800 	.word	0x40023800
 8012744:	00f42400 	.word	0x00f42400

08012748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012748:	b480      	push	{r7}
 801274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801274c:	4b03      	ldr	r3, [pc, #12]	; (801275c <HAL_RCC_GetHCLKFreq+0x14>)
 801274e:	681b      	ldr	r3, [r3, #0]
}
 8012750:	4618      	mov	r0, r3
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	20000034 	.word	0x20000034

08012760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012764:	f7ff fff0 	bl	8012748 <HAL_RCC_GetHCLKFreq>
 8012768:	4602      	mov	r2, r0
 801276a:	4b05      	ldr	r3, [pc, #20]	; (8012780 <HAL_RCC_GetPCLK1Freq+0x20>)
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	0a9b      	lsrs	r3, r3, #10
 8012770:	f003 0307 	and.w	r3, r3, #7
 8012774:	4903      	ldr	r1, [pc, #12]	; (8012784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012776:	5ccb      	ldrb	r3, [r1, r3]
 8012778:	fa22 f303 	lsr.w	r3, r2, r3
}
 801277c:	4618      	mov	r0, r3
 801277e:	bd80      	pop	{r7, pc}
 8012780:	40023800 	.word	0x40023800
 8012784:	0801c390 	.word	0x0801c390

08012788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801278c:	f7ff ffdc 	bl	8012748 <HAL_RCC_GetHCLKFreq>
 8012790:	4602      	mov	r2, r0
 8012792:	4b05      	ldr	r3, [pc, #20]	; (80127a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	0b5b      	lsrs	r3, r3, #13
 8012798:	f003 0307 	and.w	r3, r3, #7
 801279c:	4903      	ldr	r1, [pc, #12]	; (80127ac <HAL_RCC_GetPCLK2Freq+0x24>)
 801279e:	5ccb      	ldrb	r3, [r1, r3]
 80127a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	40023800 	.word	0x40023800
 80127ac:	0801c390 	.word	0x0801c390

080127b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	220f      	movs	r2, #15
 80127be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80127c0:	4b12      	ldr	r3, [pc, #72]	; (801280c <HAL_RCC_GetClockConfig+0x5c>)
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	f003 0203 	and.w	r2, r3, #3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80127cc:	4b0f      	ldr	r3, [pc, #60]	; (801280c <HAL_RCC_GetClockConfig+0x5c>)
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80127d8:	4b0c      	ldr	r3, [pc, #48]	; (801280c <HAL_RCC_GetClockConfig+0x5c>)
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80127e4:	4b09      	ldr	r3, [pc, #36]	; (801280c <HAL_RCC_GetClockConfig+0x5c>)
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	08db      	lsrs	r3, r3, #3
 80127ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80127f2:	4b07      	ldr	r3, [pc, #28]	; (8012810 <HAL_RCC_GetClockConfig+0x60>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f003 0207 	and.w	r2, r3, #7
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	601a      	str	r2, [r3, #0]
}
 80127fe:	bf00      	nop
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	40023800 	.word	0x40023800
 8012810:	40023c00 	.word	0x40023c00

08012814 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8012822:	2301      	movs	r3, #1
 8012824:	e01c      	b.n	8012860 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	795b      	ldrb	r3, [r3, #5]
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b00      	cmp	r3, #0
 801282e:	d105      	bne.n	801283c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2200      	movs	r2, #0
 8012834:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7fb fe1a 	bl	800e470 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2202      	movs	r2, #2
 8012840:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f042 0204 	orr.w	r2, r2, #4
 8012850:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2201      	movs	r2, #1
 8012856:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012872:	2300      	movs	r3, #0
 8012874:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	791b      	ldrb	r3, [r3, #4]
 801287a:	2b01      	cmp	r3, #1
 801287c:	d101      	bne.n	8012882 <HAL_RNG_GenerateRandomNumber+0x1a>
 801287e:	2302      	movs	r3, #2
 8012880:	e044      	b.n	801290c <HAL_RNG_GenerateRandomNumber+0xa4>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2201      	movs	r2, #1
 8012886:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	795b      	ldrb	r3, [r3, #5]
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b01      	cmp	r3, #1
 8012890:	d133      	bne.n	80128fa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2202      	movs	r2, #2
 8012896:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012898:	f7fc ff20 	bl	800f6dc <HAL_GetTick>
 801289c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801289e:	e018      	b.n	80128d2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80128a0:	f7fc ff1c 	bl	800f6dc <HAL_GetTick>
 80128a4:	4602      	mov	r2, r0
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	1ad3      	subs	r3, r2, r3
 80128aa:	2b02      	cmp	r3, #2
 80128ac:	d911      	bls.n	80128d2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d00a      	beq.n	80128d2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2201      	movs	r2, #1
 80128c0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2202      	movs	r2, #2
 80128c6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2200      	movs	r2, #0
 80128cc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80128ce:	2301      	movs	r3, #1
 80128d0:	e01c      	b.n	801290c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d1df      	bne.n	80128a0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	689a      	ldr	r2, [r3, #8]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	68da      	ldr	r2, [r3, #12]
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2201      	movs	r2, #1
 80128f6:	715a      	strb	r2, [r3, #5]
 80128f8:	e004      	b.n	8012904 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2204      	movs	r2, #4
 80128fe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8012900:	2301      	movs	r3, #1
 8012902:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	711a      	strb	r2, [r3, #4]

  return status;
 801290a:	7bfb      	ldrb	r3, [r7, #15]
}
 801290c:	4618      	mov	r0, r3
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d101      	bne.n	8012926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012922:	2301      	movs	r3, #1
 8012924:	e041      	b.n	80129aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d106      	bne.n	8012940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7fc fb16 	bl	800ef6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2202      	movs	r2, #2
 8012944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	3304      	adds	r3, #4
 8012950:	4619      	mov	r1, r3
 8012952:	4610      	mov	r0, r2
 8012954:	f000 ffee 	bl	8013934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2201      	movs	r2, #1
 801295c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2201      	movs	r2, #1
 8012964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2201      	movs	r2, #1
 801296c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2201      	movs	r2, #1
 8012974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2201      	movs	r2, #1
 801297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2201      	movs	r2, #1
 8012984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2201      	movs	r2, #1
 801298c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
	...

080129b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b085      	sub	sp, #20
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d001      	beq.n	80129cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e04e      	b.n	8012a6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2202      	movs	r2, #2
 80129d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	68da      	ldr	r2, [r3, #12]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f042 0201 	orr.w	r2, r2, #1
 80129e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4a23      	ldr	r2, [pc, #140]	; (8012a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d022      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129f6:	d01d      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	4a1f      	ldr	r2, [pc, #124]	; (8012a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80129fe:	4293      	cmp	r3, r2
 8012a00:	d018      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4a1e      	ldr	r2, [pc, #120]	; (8012a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d013      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a1c      	ldr	r2, [pc, #112]	; (8012a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d00e      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	4a1b      	ldr	r2, [pc, #108]	; (8012a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	d009      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a19      	ldr	r2, [pc, #100]	; (8012a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d004      	beq.n	8012a34 <HAL_TIM_Base_Start_IT+0x80>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4a18      	ldr	r2, [pc, #96]	; (8012a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8012a30:	4293      	cmp	r3, r2
 8012a32:	d111      	bne.n	8012a58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	689b      	ldr	r3, [r3, #8]
 8012a3a:	f003 0307 	and.w	r3, r3, #7
 8012a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b06      	cmp	r3, #6
 8012a44:	d010      	beq.n	8012a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f042 0201 	orr.w	r2, r2, #1
 8012a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a56:	e007      	b.n	8012a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f042 0201 	orr.w	r2, r2, #1
 8012a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3714      	adds	r7, #20
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop
 8012a78:	40010000 	.word	0x40010000
 8012a7c:	40000400 	.word	0x40000400
 8012a80:	40000800 	.word	0x40000800
 8012a84:	40000c00 	.word	0x40000c00
 8012a88:	40010400 	.word	0x40010400
 8012a8c:	40014000 	.word	0x40014000
 8012a90:	40001800 	.word	0x40001800

08012a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d101      	bne.n	8012aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e041      	b.n	8012b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d106      	bne.n	8012ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7fc fb24 	bl	800f108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2202      	movs	r2, #2
 8012ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	3304      	adds	r3, #4
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	4610      	mov	r0, r2
 8012ad4:	f000 ff2e 	bl	8013934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2201      	movs	r2, #1
 8012adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2201      	movs	r2, #1
 8012aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2201      	movs	r2, #1
 8012af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2201      	movs	r2, #1
 8012afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2201      	movs	r2, #1
 8012b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2201      	movs	r2, #1
 8012b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2201      	movs	r2, #1
 8012b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3708      	adds	r7, #8
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
	...

08012b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d109      	bne.n	8012b58 <HAL_TIM_PWM_Start+0x24>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	bf14      	ite	ne
 8012b50:	2301      	movne	r3, #1
 8012b52:	2300      	moveq	r3, #0
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	e022      	b.n	8012b9e <HAL_TIM_PWM_Start+0x6a>
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	2b04      	cmp	r3, #4
 8012b5c:	d109      	bne.n	8012b72 <HAL_TIM_PWM_Start+0x3e>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	bf14      	ite	ne
 8012b6a:	2301      	movne	r3, #1
 8012b6c:	2300      	moveq	r3, #0
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	e015      	b.n	8012b9e <HAL_TIM_PWM_Start+0x6a>
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	2b08      	cmp	r3, #8
 8012b76:	d109      	bne.n	8012b8c <HAL_TIM_PWM_Start+0x58>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	bf14      	ite	ne
 8012b84:	2301      	movne	r3, #1
 8012b86:	2300      	moveq	r3, #0
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	e008      	b.n	8012b9e <HAL_TIM_PWM_Start+0x6a>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	bf14      	ite	ne
 8012b98:	2301      	movne	r3, #1
 8012b9a:	2300      	moveq	r3, #0
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d001      	beq.n	8012ba6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	e07c      	b.n	8012ca0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d104      	bne.n	8012bb6 <HAL_TIM_PWM_Start+0x82>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2202      	movs	r2, #2
 8012bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012bb4:	e013      	b.n	8012bde <HAL_TIM_PWM_Start+0xaa>
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	2b04      	cmp	r3, #4
 8012bba:	d104      	bne.n	8012bc6 <HAL_TIM_PWM_Start+0x92>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2202      	movs	r2, #2
 8012bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012bc4:	e00b      	b.n	8012bde <HAL_TIM_PWM_Start+0xaa>
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	2b08      	cmp	r3, #8
 8012bca:	d104      	bne.n	8012bd6 <HAL_TIM_PWM_Start+0xa2>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2202      	movs	r2, #2
 8012bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012bd4:	e003      	b.n	8012bde <HAL_TIM_PWM_Start+0xaa>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2202      	movs	r2, #2
 8012bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	2201      	movs	r2, #1
 8012be4:	6839      	ldr	r1, [r7, #0]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f001 f98e 	bl	8013f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a2d      	ldr	r2, [pc, #180]	; (8012ca8 <HAL_TIM_PWM_Start+0x174>)
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d004      	beq.n	8012c00 <HAL_TIM_PWM_Start+0xcc>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	4a2c      	ldr	r2, [pc, #176]	; (8012cac <HAL_TIM_PWM_Start+0x178>)
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d101      	bne.n	8012c04 <HAL_TIM_PWM_Start+0xd0>
 8012c00:	2301      	movs	r3, #1
 8012c02:	e000      	b.n	8012c06 <HAL_TIM_PWM_Start+0xd2>
 8012c04:	2300      	movs	r3, #0
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d007      	beq.n	8012c1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4a22      	ldr	r2, [pc, #136]	; (8012ca8 <HAL_TIM_PWM_Start+0x174>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d022      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c2c:	d01d      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	4a1f      	ldr	r2, [pc, #124]	; (8012cb0 <HAL_TIM_PWM_Start+0x17c>)
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d018      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4a1d      	ldr	r2, [pc, #116]	; (8012cb4 <HAL_TIM_PWM_Start+0x180>)
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d013      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4a1c      	ldr	r2, [pc, #112]	; (8012cb8 <HAL_TIM_PWM_Start+0x184>)
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d00e      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4a16      	ldr	r2, [pc, #88]	; (8012cac <HAL_TIM_PWM_Start+0x178>)
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d009      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4a18      	ldr	r2, [pc, #96]	; (8012cbc <HAL_TIM_PWM_Start+0x188>)
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	d004      	beq.n	8012c6a <HAL_TIM_PWM_Start+0x136>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	4a16      	ldr	r2, [pc, #88]	; (8012cc0 <HAL_TIM_PWM_Start+0x18c>)
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d111      	bne.n	8012c8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	f003 0307 	and.w	r3, r3, #7
 8012c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b06      	cmp	r3, #6
 8012c7a:	d010      	beq.n	8012c9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f042 0201 	orr.w	r2, r2, #1
 8012c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c8c:	e007      	b.n	8012c9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f042 0201 	orr.w	r2, r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012c9e:	2300      	movs	r3, #0
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3710      	adds	r7, #16
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	40010000 	.word	0x40010000
 8012cac:	40010400 	.word	0x40010400
 8012cb0:	40000400 	.word	0x40000400
 8012cb4:	40000800 	.word	0x40000800
 8012cb8:	40000c00 	.word	0x40000c00
 8012cbc:	40014000 	.word	0x40014000
 8012cc0:	40001800 	.word	0x40001800

08012cc4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b086      	sub	sp, #24
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
 8012cd0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d109      	bne.n	8012cf0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	2b02      	cmp	r3, #2
 8012ce6:	bf0c      	ite	eq
 8012ce8:	2301      	moveq	r3, #1
 8012cea:	2300      	movne	r3, #0
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	e022      	b.n	8012d36 <HAL_TIM_PWM_Start_DMA+0x72>
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	2b04      	cmp	r3, #4
 8012cf4:	d109      	bne.n	8012d0a <HAL_TIM_PWM_Start_DMA+0x46>
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	bf0c      	ite	eq
 8012d02:	2301      	moveq	r3, #1
 8012d04:	2300      	movne	r3, #0
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	e015      	b.n	8012d36 <HAL_TIM_PWM_Start_DMA+0x72>
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	2b08      	cmp	r3, #8
 8012d0e:	d109      	bne.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x60>
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	2b02      	cmp	r3, #2
 8012d1a:	bf0c      	ite	eq
 8012d1c:	2301      	moveq	r3, #1
 8012d1e:	2300      	movne	r3, #0
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	e008      	b.n	8012d36 <HAL_TIM_PWM_Start_DMA+0x72>
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	bf0c      	ite	eq
 8012d30:	2301      	moveq	r3, #1
 8012d32:	2300      	movne	r3, #0
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	e171      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d109      	bne.n	8012d58 <HAL_TIM_PWM_Start_DMA+0x94>
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	bf0c      	ite	eq
 8012d50:	2301      	moveq	r3, #1
 8012d52:	2300      	movne	r3, #0
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	e022      	b.n	8012d9e <HAL_TIM_PWM_Start_DMA+0xda>
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	2b04      	cmp	r3, #4
 8012d5c:	d109      	bne.n	8012d72 <HAL_TIM_PWM_Start_DMA+0xae>
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	bf0c      	ite	eq
 8012d6a:	2301      	moveq	r3, #1
 8012d6c:	2300      	movne	r3, #0
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	e015      	b.n	8012d9e <HAL_TIM_PWM_Start_DMA+0xda>
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	2b08      	cmp	r3, #8
 8012d76:	d109      	bne.n	8012d8c <HAL_TIM_PWM_Start_DMA+0xc8>
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	bf0c      	ite	eq
 8012d84:	2301      	moveq	r3, #1
 8012d86:	2300      	movne	r3, #0
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	e008      	b.n	8012d9e <HAL_TIM_PWM_Start_DMA+0xda>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	bf0c      	ite	eq
 8012d98:	2301      	moveq	r3, #1
 8012d9a:	2300      	movne	r3, #0
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d024      	beq.n	8012dec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d104      	bne.n	8012db2 <HAL_TIM_PWM_Start_DMA+0xee>
 8012da8:	887b      	ldrh	r3, [r7, #2]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d001      	beq.n	8012db2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8012dae:	2301      	movs	r3, #1
 8012db0:	e137      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d104      	bne.n	8012dc2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2202      	movs	r2, #2
 8012dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012dc0:	e016      	b.n	8012df0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	d104      	bne.n	8012dd2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2202      	movs	r2, #2
 8012dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012dd0:	e00e      	b.n	8012df0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	2b08      	cmp	r3, #8
 8012dd6:	d104      	bne.n	8012de2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2202      	movs	r2, #2
 8012ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012de0:	e006      	b.n	8012df0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2202      	movs	r2, #2
 8012de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012dea:	e001      	b.n	8012df0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8012dec:	2301      	movs	r3, #1
 8012dee:	e118      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	2b0c      	cmp	r3, #12
 8012df4:	f200 80ae 	bhi.w	8012f54 <HAL_TIM_PWM_Start_DMA+0x290>
 8012df8:	a201      	add	r2, pc, #4	; (adr r2, 8012e00 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8012dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dfe:	bf00      	nop
 8012e00:	08012e35 	.word	0x08012e35
 8012e04:	08012f55 	.word	0x08012f55
 8012e08:	08012f55 	.word	0x08012f55
 8012e0c:	08012f55 	.word	0x08012f55
 8012e10:	08012e7d 	.word	0x08012e7d
 8012e14:	08012f55 	.word	0x08012f55
 8012e18:	08012f55 	.word	0x08012f55
 8012e1c:	08012f55 	.word	0x08012f55
 8012e20:	08012ec5 	.word	0x08012ec5
 8012e24:	08012f55 	.word	0x08012f55
 8012e28:	08012f55 	.word	0x08012f55
 8012e2c:	08012f55 	.word	0x08012f55
 8012e30:	08012f0d 	.word	0x08012f0d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e38:	4a7c      	ldr	r2, [pc, #496]	; (801302c <HAL_TIM_PWM_Start_DMA+0x368>)
 8012e3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e40:	4a7b      	ldr	r2, [pc, #492]	; (8013030 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8012e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e48:	4a7a      	ldr	r2, [pc, #488]	; (8013034 <HAL_TIM_PWM_Start_DMA+0x370>)
 8012e4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012e50:	6879      	ldr	r1, [r7, #4]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	3334      	adds	r3, #52	; 0x34
 8012e58:	461a      	mov	r2, r3
 8012e5a:	887b      	ldrh	r3, [r7, #2]
 8012e5c:	f7fe f8f2 	bl	8011044 <HAL_DMA_Start_IT>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d001      	beq.n	8012e6a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012e66:	2301      	movs	r3, #1
 8012e68:	e0db      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	68da      	ldr	r2, [r3, #12]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e78:	60da      	str	r2, [r3, #12]
      break;
 8012e7a:	e06e      	b.n	8012f5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e80:	4a6a      	ldr	r2, [pc, #424]	; (801302c <HAL_TIM_PWM_Start_DMA+0x368>)
 8012e82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e88:	4a69      	ldr	r2, [pc, #420]	; (8013030 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8012e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e90:	4a68      	ldr	r2, [pc, #416]	; (8013034 <HAL_TIM_PWM_Start_DMA+0x370>)
 8012e92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012e98:	6879      	ldr	r1, [r7, #4]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3338      	adds	r3, #56	; 0x38
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	887b      	ldrh	r3, [r7, #2]
 8012ea4:	f7fe f8ce 	bl	8011044 <HAL_DMA_Start_IT>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e0b7      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	68da      	ldr	r2, [r3, #12]
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012ec0:	60da      	str	r2, [r3, #12]
      break;
 8012ec2:	e04a      	b.n	8012f5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec8:	4a58      	ldr	r2, [pc, #352]	; (801302c <HAL_TIM_PWM_Start_DMA+0x368>)
 8012eca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed0:	4a57      	ldr	r2, [pc, #348]	; (8013030 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8012ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed8:	4a56      	ldr	r2, [pc, #344]	; (8013034 <HAL_TIM_PWM_Start_DMA+0x370>)
 8012eda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012ee0:	6879      	ldr	r1, [r7, #4]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	333c      	adds	r3, #60	; 0x3c
 8012ee8:	461a      	mov	r2, r3
 8012eea:	887b      	ldrh	r3, [r7, #2]
 8012eec:	f7fe f8aa 	bl	8011044 <HAL_DMA_Start_IT>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d001      	beq.n	8012efa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	e093      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	68da      	ldr	r2, [r3, #12]
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f08:	60da      	str	r2, [r3, #12]
      break;
 8012f0a:	e026      	b.n	8012f5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f10:	4a46      	ldr	r2, [pc, #280]	; (801302c <HAL_TIM_PWM_Start_DMA+0x368>)
 8012f12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f18:	4a45      	ldr	r2, [pc, #276]	; (8013030 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8012f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f20:	4a44      	ldr	r2, [pc, #272]	; (8013034 <HAL_TIM_PWM_Start_DMA+0x370>)
 8012f22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012f28:	6879      	ldr	r1, [r7, #4]
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	3340      	adds	r3, #64	; 0x40
 8012f30:	461a      	mov	r2, r3
 8012f32:	887b      	ldrh	r3, [r7, #2]
 8012f34:	f7fe f886 	bl	8011044 <HAL_DMA_Start_IT>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d001      	beq.n	8012f42 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e06f      	b.n	8013022 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	68da      	ldr	r2, [r3, #12]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012f50:	60da      	str	r2, [r3, #12]
      break;
 8012f52:	e002      	b.n	8012f5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8012f54:	2301      	movs	r3, #1
 8012f56:	75fb      	strb	r3, [r7, #23]
      break;
 8012f58:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f5a:	7dfb      	ldrb	r3, [r7, #23]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d15f      	bne.n	8013020 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2201      	movs	r2, #1
 8012f66:	68b9      	ldr	r1, [r7, #8]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 ffcd 	bl	8013f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	4a31      	ldr	r2, [pc, #196]	; (8013038 <HAL_TIM_PWM_Start_DMA+0x374>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d004      	beq.n	8012f82 <HAL_TIM_PWM_Start_DMA+0x2be>
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4a2f      	ldr	r2, [pc, #188]	; (801303c <HAL_TIM_PWM_Start_DMA+0x378>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d101      	bne.n	8012f86 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8012f82:	2301      	movs	r3, #1
 8012f84:	e000      	b.n	8012f88 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8012f86:	2300      	movs	r3, #0
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d007      	beq.n	8012f9c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012f9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a25      	ldr	r2, [pc, #148]	; (8013038 <HAL_TIM_PWM_Start_DMA+0x374>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d022      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012fae:	d01d      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a22      	ldr	r2, [pc, #136]	; (8013040 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d018      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4a21      	ldr	r2, [pc, #132]	; (8013044 <HAL_TIM_PWM_Start_DMA+0x380>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d013      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	4a1f      	ldr	r2, [pc, #124]	; (8013048 <HAL_TIM_PWM_Start_DMA+0x384>)
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	d00e      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	4a1a      	ldr	r2, [pc, #104]	; (801303c <HAL_TIM_PWM_Start_DMA+0x378>)
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	d009      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	4a1b      	ldr	r2, [pc, #108]	; (801304c <HAL_TIM_PWM_Start_DMA+0x388>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d004      	beq.n	8012fec <HAL_TIM_PWM_Start_DMA+0x328>
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4a1a      	ldr	r2, [pc, #104]	; (8013050 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d111      	bne.n	8013010 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	f003 0307 	and.w	r3, r3, #7
 8012ff6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	2b06      	cmp	r3, #6
 8012ffc:	d010      	beq.n	8013020 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	f042 0201 	orr.w	r2, r2, #1
 801300c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801300e:	e007      	b.n	8013020 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f042 0201 	orr.w	r2, r2, #1
 801301e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8013020:	7dfb      	ldrb	r3, [r7, #23]
}
 8013022:	4618      	mov	r0, r3
 8013024:	3718      	adds	r7, #24
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	08013825 	.word	0x08013825
 8013030:	080138cd 	.word	0x080138cd
 8013034:	08013793 	.word	0x08013793
 8013038:	40010000 	.word	0x40010000
 801303c:	40010400 	.word	0x40010400
 8013040:	40000400 	.word	0x40000400
 8013044:	40000800 	.word	0x40000800
 8013048:	40000c00 	.word	0x40000c00
 801304c:	40014000 	.word	0x40014000
 8013050:	40001800 	.word	0x40001800

08013054 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	2b0c      	cmp	r3, #12
 8013066:	d855      	bhi.n	8013114 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8013068:	a201      	add	r2, pc, #4	; (adr r2, 8013070 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 801306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801306e:	bf00      	nop
 8013070:	080130a5 	.word	0x080130a5
 8013074:	08013115 	.word	0x08013115
 8013078:	08013115 	.word	0x08013115
 801307c:	08013115 	.word	0x08013115
 8013080:	080130c1 	.word	0x080130c1
 8013084:	08013115 	.word	0x08013115
 8013088:	08013115 	.word	0x08013115
 801308c:	08013115 	.word	0x08013115
 8013090:	080130dd 	.word	0x080130dd
 8013094:	08013115 	.word	0x08013115
 8013098:	08013115 	.word	0x08013115
 801309c:	08013115 	.word	0x08013115
 80130a0:	080130f9 	.word	0x080130f9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	68da      	ldr	r2, [r3, #12]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80130b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fe f88b 	bl	80111d4 <HAL_DMA_Abort_IT>
      break;
 80130be:	e02c      	b.n	801311a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	68da      	ldr	r2, [r3, #12]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7fe f87d 	bl	80111d4 <HAL_DMA_Abort_IT>
      break;
 80130da:	e01e      	b.n	801311a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	68da      	ldr	r2, [r3, #12]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80130ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7fe f86f 	bl	80111d4 <HAL_DMA_Abort_IT>
      break;
 80130f6:	e010      	b.n	801311a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	68da      	ldr	r2, [r3, #12]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013106:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe f861 	bl	80111d4 <HAL_DMA_Abort_IT>
      break;
 8013112:	e002      	b.n	801311a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	73fb      	strb	r3, [r7, #15]
      break;
 8013118:	bf00      	nop
  }

  if (status == HAL_OK)
 801311a:	7bfb      	ldrb	r3, [r7, #15]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d161      	bne.n	80131e4 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2200      	movs	r2, #0
 8013126:	6839      	ldr	r1, [r7, #0]
 8013128:	4618      	mov	r0, r3
 801312a:	f000 feed 	bl	8013f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	4a2f      	ldr	r2, [pc, #188]	; (80131f0 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d004      	beq.n	8013142 <HAL_TIM_PWM_Stop_DMA+0xee>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4a2d      	ldr	r2, [pc, #180]	; (80131f4 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 801313e:	4293      	cmp	r3, r2
 8013140:	d101      	bne.n	8013146 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8013142:	2301      	movs	r3, #1
 8013144:	e000      	b.n	8013148 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8013146:	2300      	movs	r3, #0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d017      	beq.n	801317c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	6a1a      	ldr	r2, [r3, #32]
 8013152:	f241 1311 	movw	r3, #4369	; 0x1111
 8013156:	4013      	ands	r3, r2
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10f      	bne.n	801317c <HAL_TIM_PWM_Stop_DMA+0x128>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	6a1a      	ldr	r2, [r3, #32]
 8013162:	f240 4344 	movw	r3, #1092	; 0x444
 8013166:	4013      	ands	r3, r2
 8013168:	2b00      	cmp	r3, #0
 801316a:	d107      	bne.n	801317c <HAL_TIM_PWM_Stop_DMA+0x128>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801317a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	6a1a      	ldr	r2, [r3, #32]
 8013182:	f241 1311 	movw	r3, #4369	; 0x1111
 8013186:	4013      	ands	r3, r2
 8013188:	2b00      	cmp	r3, #0
 801318a:	d10f      	bne.n	80131ac <HAL_TIM_PWM_Stop_DMA+0x158>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6a1a      	ldr	r2, [r3, #32]
 8013192:	f240 4344 	movw	r3, #1092	; 0x444
 8013196:	4013      	ands	r3, r2
 8013198:	2b00      	cmp	r3, #0
 801319a:	d107      	bne.n	80131ac <HAL_TIM_PWM_Stop_DMA+0x158>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	f022 0201 	bic.w	r2, r2, #1
 80131aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d104      	bne.n	80131bc <HAL_TIM_PWM_Stop_DMA+0x168>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2201      	movs	r2, #1
 80131b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80131ba:	e013      	b.n	80131e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	2b04      	cmp	r3, #4
 80131c0:	d104      	bne.n	80131cc <HAL_TIM_PWM_Stop_DMA+0x178>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2201      	movs	r2, #1
 80131c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131ca:	e00b      	b.n	80131e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	2b08      	cmp	r3, #8
 80131d0:	d104      	bne.n	80131dc <HAL_TIM_PWM_Stop_DMA+0x188>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2201      	movs	r2, #1
 80131d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131da:	e003      	b.n	80131e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2201      	movs	r2, #1
 80131e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80131e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3710      	adds	r7, #16
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	40010000 	.word	0x40010000
 80131f4:	40010400 	.word	0x40010400

080131f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	691b      	ldr	r3, [r3, #16]
 8013206:	f003 0302 	and.w	r3, r3, #2
 801320a:	2b02      	cmp	r3, #2
 801320c:	d122      	bne.n	8013254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	f003 0302 	and.w	r3, r3, #2
 8013218:	2b02      	cmp	r3, #2
 801321a:	d11b      	bne.n	8013254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f06f 0202 	mvn.w	r2, #2
 8013224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2201      	movs	r2, #1
 801322a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	699b      	ldr	r3, [r3, #24]
 8013232:	f003 0303 	and.w	r3, r3, #3
 8013236:	2b00      	cmp	r3, #0
 8013238:	d003      	beq.n	8013242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f000 fa77 	bl	801372e <HAL_TIM_IC_CaptureCallback>
 8013240:	e005      	b.n	801324e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f000 fa69 	bl	801371a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 fa7a 	bl	8013742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	691b      	ldr	r3, [r3, #16]
 801325a:	f003 0304 	and.w	r3, r3, #4
 801325e:	2b04      	cmp	r3, #4
 8013260:	d122      	bne.n	80132a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	68db      	ldr	r3, [r3, #12]
 8013268:	f003 0304 	and.w	r3, r3, #4
 801326c:	2b04      	cmp	r3, #4
 801326e:	d11b      	bne.n	80132a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f06f 0204 	mvn.w	r2, #4
 8013278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2202      	movs	r2, #2
 801327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	699b      	ldr	r3, [r3, #24]
 8013286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801328a:	2b00      	cmp	r3, #0
 801328c:	d003      	beq.n	8013296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 fa4d 	bl	801372e <HAL_TIM_IC_CaptureCallback>
 8013294:	e005      	b.n	80132a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f000 fa3f 	bl	801371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f000 fa50 	bl	8013742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2200      	movs	r2, #0
 80132a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	691b      	ldr	r3, [r3, #16]
 80132ae:	f003 0308 	and.w	r3, r3, #8
 80132b2:	2b08      	cmp	r3, #8
 80132b4:	d122      	bne.n	80132fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	f003 0308 	and.w	r3, r3, #8
 80132c0:	2b08      	cmp	r3, #8
 80132c2:	d11b      	bne.n	80132fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f06f 0208 	mvn.w	r2, #8
 80132cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2204      	movs	r2, #4
 80132d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	69db      	ldr	r3, [r3, #28]
 80132da:	f003 0303 	and.w	r3, r3, #3
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d003      	beq.n	80132ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f000 fa23 	bl	801372e <HAL_TIM_IC_CaptureCallback>
 80132e8:	e005      	b.n	80132f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f000 fa15 	bl	801371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 fa26 	bl	8013742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	691b      	ldr	r3, [r3, #16]
 8013302:	f003 0310 	and.w	r3, r3, #16
 8013306:	2b10      	cmp	r3, #16
 8013308:	d122      	bne.n	8013350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	f003 0310 	and.w	r3, r3, #16
 8013314:	2b10      	cmp	r3, #16
 8013316:	d11b      	bne.n	8013350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f06f 0210 	mvn.w	r2, #16
 8013320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2208      	movs	r2, #8
 8013326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	69db      	ldr	r3, [r3, #28]
 801332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013332:	2b00      	cmp	r3, #0
 8013334:	d003      	beq.n	801333e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f000 f9f9 	bl	801372e <HAL_TIM_IC_CaptureCallback>
 801333c:	e005      	b.n	801334a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 f9eb 	bl	801371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f000 f9fc 	bl	8013742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2200      	movs	r2, #0
 801334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	691b      	ldr	r3, [r3, #16]
 8013356:	f003 0301 	and.w	r3, r3, #1
 801335a:	2b01      	cmp	r3, #1
 801335c:	d10e      	bne.n	801337c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	f003 0301 	and.w	r3, r3, #1
 8013368:	2b01      	cmp	r3, #1
 801336a:	d107      	bne.n	801337c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f06f 0201 	mvn.w	r2, #1
 8013374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7f9 fcc8 	bl	800cd0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013386:	2b80      	cmp	r3, #128	; 0x80
 8013388:	d10e      	bne.n	80133a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	68db      	ldr	r3, [r3, #12]
 8013390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013394:	2b80      	cmp	r3, #128	; 0x80
 8013396:	d107      	bne.n	80133a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80133a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 feae 	bl	8014104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133b2:	2b40      	cmp	r3, #64	; 0x40
 80133b4:	d10e      	bne.n	80133d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133c0:	2b40      	cmp	r3, #64	; 0x40
 80133c2:	d107      	bne.n	80133d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80133cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f000 f9cb 	bl	801376a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	691b      	ldr	r3, [r3, #16]
 80133da:	f003 0320 	and.w	r3, r3, #32
 80133de:	2b20      	cmp	r3, #32
 80133e0:	d10e      	bne.n	8013400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	f003 0320 	and.w	r3, r3, #32
 80133ec:	2b20      	cmp	r3, #32
 80133ee:	d107      	bne.n	8013400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f06f 0220 	mvn.w	r2, #32
 80133f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 fe78 	bl	80140f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013400:	bf00      	nop
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013414:	2300      	movs	r3, #0
 8013416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801341e:	2b01      	cmp	r3, #1
 8013420:	d101      	bne.n	8013426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013422:	2302      	movs	r3, #2
 8013424:	e0ae      	b.n	8013584 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2201      	movs	r2, #1
 801342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	2b0c      	cmp	r3, #12
 8013432:	f200 809f 	bhi.w	8013574 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8013436:	a201      	add	r2, pc, #4	; (adr r2, 801343c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801343c:	08013471 	.word	0x08013471
 8013440:	08013575 	.word	0x08013575
 8013444:	08013575 	.word	0x08013575
 8013448:	08013575 	.word	0x08013575
 801344c:	080134b1 	.word	0x080134b1
 8013450:	08013575 	.word	0x08013575
 8013454:	08013575 	.word	0x08013575
 8013458:	08013575 	.word	0x08013575
 801345c:	080134f3 	.word	0x080134f3
 8013460:	08013575 	.word	0x08013575
 8013464:	08013575 	.word	0x08013575
 8013468:	08013575 	.word	0x08013575
 801346c:	08013533 	.word	0x08013533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	68b9      	ldr	r1, [r7, #8]
 8013476:	4618      	mov	r0, r3
 8013478:	f000 fafc 	bl	8013a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	699a      	ldr	r2, [r3, #24]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f042 0208 	orr.w	r2, r2, #8
 801348a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	699a      	ldr	r2, [r3, #24]
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	f022 0204 	bic.w	r2, r2, #4
 801349a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	6999      	ldr	r1, [r3, #24]
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	691a      	ldr	r2, [r3, #16]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	430a      	orrs	r2, r1
 80134ac:	619a      	str	r2, [r3, #24]
      break;
 80134ae:	e064      	b.n	801357a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	4618      	mov	r0, r3
 80134b8:	f000 fb4c 	bl	8013b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	699a      	ldr	r2, [r3, #24]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80134ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	699a      	ldr	r2, [r3, #24]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80134da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	6999      	ldr	r1, [r3, #24]
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	691b      	ldr	r3, [r3, #16]
 80134e6:	021a      	lsls	r2, r3, #8
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	430a      	orrs	r2, r1
 80134ee:	619a      	str	r2, [r3, #24]
      break;
 80134f0:	e043      	b.n	801357a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	68b9      	ldr	r1, [r7, #8]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f000 fba1 	bl	8013c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	69da      	ldr	r2, [r3, #28]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	f042 0208 	orr.w	r2, r2, #8
 801350c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	69da      	ldr	r2, [r3, #28]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f022 0204 	bic.w	r2, r2, #4
 801351c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	69d9      	ldr	r1, [r3, #28]
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	691a      	ldr	r2, [r3, #16]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	430a      	orrs	r2, r1
 801352e:	61da      	str	r2, [r3, #28]
      break;
 8013530:	e023      	b.n	801357a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	68b9      	ldr	r1, [r7, #8]
 8013538:	4618      	mov	r0, r3
 801353a:	f000 fbf5 	bl	8013d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	69da      	ldr	r2, [r3, #28]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801354c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	69da      	ldr	r2, [r3, #28]
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801355c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	69d9      	ldr	r1, [r3, #28]
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	691b      	ldr	r3, [r3, #16]
 8013568:	021a      	lsls	r2, r3, #8
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	430a      	orrs	r2, r1
 8013570:	61da      	str	r2, [r3, #28]
      break;
 8013572:	e002      	b.n	801357a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8013574:	2301      	movs	r3, #1
 8013576:	75fb      	strb	r3, [r7, #23]
      break;
 8013578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2200      	movs	r2, #0
 801357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013582:	7dfb      	ldrb	r3, [r7, #23]
}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013596:	2300      	movs	r3, #0
 8013598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d101      	bne.n	80135a8 <HAL_TIM_ConfigClockSource+0x1c>
 80135a4:	2302      	movs	r3, #2
 80135a6:	e0b4      	b.n	8013712 <HAL_TIM_ConfigClockSource+0x186>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2201      	movs	r2, #1
 80135ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2202      	movs	r2, #2
 80135b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80135c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80135ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135e0:	d03e      	beq.n	8013660 <HAL_TIM_ConfigClockSource+0xd4>
 80135e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135e6:	f200 8087 	bhi.w	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 80135ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135ee:	f000 8086 	beq.w	80136fe <HAL_TIM_ConfigClockSource+0x172>
 80135f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135f6:	d87f      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 80135f8:	2b70      	cmp	r3, #112	; 0x70
 80135fa:	d01a      	beq.n	8013632 <HAL_TIM_ConfigClockSource+0xa6>
 80135fc:	2b70      	cmp	r3, #112	; 0x70
 80135fe:	d87b      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 8013600:	2b60      	cmp	r3, #96	; 0x60
 8013602:	d050      	beq.n	80136a6 <HAL_TIM_ConfigClockSource+0x11a>
 8013604:	2b60      	cmp	r3, #96	; 0x60
 8013606:	d877      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 8013608:	2b50      	cmp	r3, #80	; 0x50
 801360a:	d03c      	beq.n	8013686 <HAL_TIM_ConfigClockSource+0xfa>
 801360c:	2b50      	cmp	r3, #80	; 0x50
 801360e:	d873      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 8013610:	2b40      	cmp	r3, #64	; 0x40
 8013612:	d058      	beq.n	80136c6 <HAL_TIM_ConfigClockSource+0x13a>
 8013614:	2b40      	cmp	r3, #64	; 0x40
 8013616:	d86f      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 8013618:	2b30      	cmp	r3, #48	; 0x30
 801361a:	d064      	beq.n	80136e6 <HAL_TIM_ConfigClockSource+0x15a>
 801361c:	2b30      	cmp	r3, #48	; 0x30
 801361e:	d86b      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 8013620:	2b20      	cmp	r3, #32
 8013622:	d060      	beq.n	80136e6 <HAL_TIM_ConfigClockSource+0x15a>
 8013624:	2b20      	cmp	r3, #32
 8013626:	d867      	bhi.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
 8013628:	2b00      	cmp	r3, #0
 801362a:	d05c      	beq.n	80136e6 <HAL_TIM_ConfigClockSource+0x15a>
 801362c:	2b10      	cmp	r3, #16
 801362e:	d05a      	beq.n	80136e6 <HAL_TIM_ConfigClockSource+0x15a>
 8013630:	e062      	b.n	80136f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6818      	ldr	r0, [r3, #0]
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	6899      	ldr	r1, [r3, #8]
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	685a      	ldr	r2, [r3, #4]
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	f000 fc41 	bl	8013ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	689b      	ldr	r3, [r3, #8]
 801364c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	68ba      	ldr	r2, [r7, #8]
 801365c:	609a      	str	r2, [r3, #8]
      break;
 801365e:	e04f      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6818      	ldr	r0, [r3, #0]
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	6899      	ldr	r1, [r3, #8]
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	685a      	ldr	r2, [r3, #4]
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	f000 fc2a 	bl	8013ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	689a      	ldr	r2, [r3, #8]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013682:	609a      	str	r2, [r3, #8]
      break;
 8013684:	e03c      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6818      	ldr	r0, [r3, #0]
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	6859      	ldr	r1, [r3, #4]
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	461a      	mov	r2, r3
 8013694:	f000 fb9e 	bl	8013dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2150      	movs	r1, #80	; 0x50
 801369e:	4618      	mov	r0, r3
 80136a0:	f000 fbf7 	bl	8013e92 <TIM_ITRx_SetConfig>
      break;
 80136a4:	e02c      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6818      	ldr	r0, [r3, #0]
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	6859      	ldr	r1, [r3, #4]
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	461a      	mov	r2, r3
 80136b4:	f000 fbbd 	bl	8013e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	2160      	movs	r1, #96	; 0x60
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 fbe7 	bl	8013e92 <TIM_ITRx_SetConfig>
      break;
 80136c4:	e01c      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6818      	ldr	r0, [r3, #0]
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	6859      	ldr	r1, [r3, #4]
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	461a      	mov	r2, r3
 80136d4:	f000 fb7e 	bl	8013dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2140      	movs	r1, #64	; 0x40
 80136de:	4618      	mov	r0, r3
 80136e0:	f000 fbd7 	bl	8013e92 <TIM_ITRx_SetConfig>
      break;
 80136e4:	e00c      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	4619      	mov	r1, r3
 80136f0:	4610      	mov	r0, r2
 80136f2:	f000 fbce 	bl	8013e92 <TIM_ITRx_SetConfig>
      break;
 80136f6:	e003      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80136f8:	2301      	movs	r3, #1
 80136fa:	73fb      	strb	r3, [r7, #15]
      break;
 80136fc:	e000      	b.n	8013700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80136fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2201      	movs	r2, #1
 8013704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013710:	7bfb      	ldrb	r3, [r7, #15]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801371a:	b480      	push	{r7}
 801371c:	b083      	sub	sp, #12
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013722:	bf00      	nop
 8013724:	370c      	adds	r7, #12
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr

0801372e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801372e:	b480      	push	{r7}
 8013730:	b083      	sub	sp, #12
 8013732:	af00      	add	r7, sp, #0
 8013734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013736:	bf00      	nop
 8013738:	370c      	adds	r7, #12
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr

08013742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013742:	b480      	push	{r7}
 8013744:	b083      	sub	sp, #12
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801374a:	bf00      	nop
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013754:	4770      	bx	lr

08013756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013756:	b480      	push	{r7}
 8013758:	b083      	sub	sp, #12
 801375a:	af00      	add	r7, sp, #0
 801375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801375e:	bf00      	nop
 8013760:	370c      	adds	r7, #12
 8013762:	46bd      	mov	sp, r7
 8013764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013768:	4770      	bx	lr

0801376a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801376a:	b480      	push	{r7}
 801376c:	b083      	sub	sp, #12
 801376e:	af00      	add	r7, sp, #0
 8013770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013772:	bf00      	nop
 8013774:	370c      	adds	r7, #12
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801377e:	b480      	push	{r7}
 8013780:	b083      	sub	sp, #12
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8013786:	bf00      	nop
 8013788:	370c      	adds	r7, #12
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b084      	sub	sp, #16
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801379e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d107      	bne.n	80137ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	2201      	movs	r2, #1
 80137ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2201      	movs	r2, #1
 80137b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80137b8:	e02a      	b.n	8013810 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d107      	bne.n	80137d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2202      	movs	r2, #2
 80137c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2201      	movs	r2, #1
 80137ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80137d2:	e01d      	b.n	8013810 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d107      	bne.n	80137ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	2204      	movs	r2, #4
 80137e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2201      	movs	r2, #1
 80137e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80137ec:	e010      	b.n	8013810 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137f2:	687a      	ldr	r2, [r7, #4]
 80137f4:	429a      	cmp	r2, r3
 80137f6:	d107      	bne.n	8013808 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2208      	movs	r2, #8
 80137fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2201      	movs	r2, #1
 8013802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013806:	e003      	b.n	8013810 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f7ff ffb4 	bl	801377e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2200      	movs	r2, #0
 801381a:	771a      	strb	r2, [r3, #28]
}
 801381c:	bf00      	nop
 801381e:	3710      	adds	r7, #16
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013830:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	429a      	cmp	r2, r3
 801383a:	d10b      	bne.n	8013854 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2201      	movs	r2, #1
 8013840:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	69db      	ldr	r3, [r3, #28]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d136      	bne.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2201      	movs	r2, #1
 801384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013852:	e031      	b.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	429a      	cmp	r2, r3
 801385c:	d10b      	bne.n	8013876 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2202      	movs	r2, #2
 8013862:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	69db      	ldr	r3, [r3, #28]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d125      	bne.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2201      	movs	r2, #1
 8013870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013874:	e020      	b.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	429a      	cmp	r2, r3
 801387e:	d10b      	bne.n	8013898 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2204      	movs	r2, #4
 8013884:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	69db      	ldr	r3, [r3, #28]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d114      	bne.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2201      	movs	r2, #1
 8013892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013896:	e00f      	b.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	429a      	cmp	r2, r3
 80138a0:	d10a      	bne.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2208      	movs	r2, #8
 80138a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	69db      	ldr	r3, [r3, #28]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d103      	bne.n	80138b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2201      	movs	r2, #1
 80138b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f7ff ff42 	bl	8013742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	771a      	strb	r2, [r3, #28]
}
 80138c4:	bf00      	nop
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b084      	sub	sp, #16
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138de:	687a      	ldr	r2, [r7, #4]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d103      	bne.n	80138ec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2201      	movs	r2, #1
 80138e8:	771a      	strb	r2, [r3, #28]
 80138ea:	e019      	b.n	8013920 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d103      	bne.n	80138fe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2202      	movs	r2, #2
 80138fa:	771a      	strb	r2, [r3, #28]
 80138fc:	e010      	b.n	8013920 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	429a      	cmp	r2, r3
 8013906:	d103      	bne.n	8013910 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2204      	movs	r2, #4
 801390c:	771a      	strb	r2, [r3, #28]
 801390e:	e007      	b.n	8013920 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	429a      	cmp	r2, r3
 8013918:	d102      	bne.n	8013920 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2208      	movs	r2, #8
 801391e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013920:	68f8      	ldr	r0, [r7, #12]
 8013922:	f7ff ff18 	bl	8013756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2200      	movs	r2, #0
 801392a:	771a      	strb	r2, [r3, #28]
}
 801392c:	bf00      	nop
 801392e:	3710      	adds	r7, #16
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013934:	b480      	push	{r7}
 8013936:	b085      	sub	sp, #20
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	4a40      	ldr	r2, [pc, #256]	; (8013a48 <TIM_Base_SetConfig+0x114>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d013      	beq.n	8013974 <TIM_Base_SetConfig+0x40>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013952:	d00f      	beq.n	8013974 <TIM_Base_SetConfig+0x40>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	4a3d      	ldr	r2, [pc, #244]	; (8013a4c <TIM_Base_SetConfig+0x118>)
 8013958:	4293      	cmp	r3, r2
 801395a:	d00b      	beq.n	8013974 <TIM_Base_SetConfig+0x40>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	4a3c      	ldr	r2, [pc, #240]	; (8013a50 <TIM_Base_SetConfig+0x11c>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d007      	beq.n	8013974 <TIM_Base_SetConfig+0x40>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	4a3b      	ldr	r2, [pc, #236]	; (8013a54 <TIM_Base_SetConfig+0x120>)
 8013968:	4293      	cmp	r3, r2
 801396a:	d003      	beq.n	8013974 <TIM_Base_SetConfig+0x40>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4a3a      	ldr	r2, [pc, #232]	; (8013a58 <TIM_Base_SetConfig+0x124>)
 8013970:	4293      	cmp	r3, r2
 8013972:	d108      	bne.n	8013986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	4313      	orrs	r3, r2
 8013984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4a2f      	ldr	r2, [pc, #188]	; (8013a48 <TIM_Base_SetConfig+0x114>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d02b      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013994:	d027      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4a2c      	ldr	r2, [pc, #176]	; (8013a4c <TIM_Base_SetConfig+0x118>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d023      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4a2b      	ldr	r2, [pc, #172]	; (8013a50 <TIM_Base_SetConfig+0x11c>)
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d01f      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4a2a      	ldr	r2, [pc, #168]	; (8013a54 <TIM_Base_SetConfig+0x120>)
 80139aa:	4293      	cmp	r3, r2
 80139ac:	d01b      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4a29      	ldr	r2, [pc, #164]	; (8013a58 <TIM_Base_SetConfig+0x124>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d017      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4a28      	ldr	r2, [pc, #160]	; (8013a5c <TIM_Base_SetConfig+0x128>)
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d013      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a27      	ldr	r2, [pc, #156]	; (8013a60 <TIM_Base_SetConfig+0x12c>)
 80139c2:	4293      	cmp	r3, r2
 80139c4:	d00f      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4a26      	ldr	r2, [pc, #152]	; (8013a64 <TIM_Base_SetConfig+0x130>)
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d00b      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4a25      	ldr	r2, [pc, #148]	; (8013a68 <TIM_Base_SetConfig+0x134>)
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d007      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4a24      	ldr	r2, [pc, #144]	; (8013a6c <TIM_Base_SetConfig+0x138>)
 80139da:	4293      	cmp	r3, r2
 80139dc:	d003      	beq.n	80139e6 <TIM_Base_SetConfig+0xb2>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	4a23      	ldr	r2, [pc, #140]	; (8013a70 <TIM_Base_SetConfig+0x13c>)
 80139e2:	4293      	cmp	r3, r2
 80139e4:	d108      	bne.n	80139f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	68db      	ldr	r3, [r3, #12]
 80139f2:	68fa      	ldr	r2, [r7, #12]
 80139f4:	4313      	orrs	r3, r2
 80139f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	695b      	ldr	r3, [r3, #20]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	689a      	ldr	r2, [r3, #8]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	4a0a      	ldr	r2, [pc, #40]	; (8013a48 <TIM_Base_SetConfig+0x114>)
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d003      	beq.n	8013a2c <TIM_Base_SetConfig+0xf8>
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	4a0c      	ldr	r2, [pc, #48]	; (8013a58 <TIM_Base_SetConfig+0x124>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d103      	bne.n	8013a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	691a      	ldr	r2, [r3, #16]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2201      	movs	r2, #1
 8013a38:	615a      	str	r2, [r3, #20]
}
 8013a3a:	bf00      	nop
 8013a3c:	3714      	adds	r7, #20
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	40010000 	.word	0x40010000
 8013a4c:	40000400 	.word	0x40000400
 8013a50:	40000800 	.word	0x40000800
 8013a54:	40000c00 	.word	0x40000c00
 8013a58:	40010400 	.word	0x40010400
 8013a5c:	40014000 	.word	0x40014000
 8013a60:	40014400 	.word	0x40014400
 8013a64:	40014800 	.word	0x40014800
 8013a68:	40001800 	.word	0x40001800
 8013a6c:	40001c00 	.word	0x40001c00
 8013a70:	40002000 	.word	0x40002000

08013a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b087      	sub	sp, #28
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6a1b      	ldr	r3, [r3, #32]
 8013a82:	f023 0201 	bic.w	r2, r3, #1
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6a1b      	ldr	r3, [r3, #32]
 8013a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	699b      	ldr	r3, [r3, #24]
 8013a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f023 0303 	bic.w	r3, r3, #3
 8013aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	68fa      	ldr	r2, [r7, #12]
 8013ab2:	4313      	orrs	r3, r2
 8013ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	f023 0302 	bic.w	r3, r3, #2
 8013abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	689b      	ldr	r3, [r3, #8]
 8013ac2:	697a      	ldr	r2, [r7, #20]
 8013ac4:	4313      	orrs	r3, r2
 8013ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	4a20      	ldr	r2, [pc, #128]	; (8013b4c <TIM_OC1_SetConfig+0xd8>)
 8013acc:	4293      	cmp	r3, r2
 8013ace:	d003      	beq.n	8013ad8 <TIM_OC1_SetConfig+0x64>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	4a1f      	ldr	r2, [pc, #124]	; (8013b50 <TIM_OC1_SetConfig+0xdc>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d10c      	bne.n	8013af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	f023 0308 	bic.w	r3, r3, #8
 8013ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	697a      	ldr	r2, [r7, #20]
 8013ae6:	4313      	orrs	r3, r2
 8013ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	f023 0304 	bic.w	r3, r3, #4
 8013af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	4a15      	ldr	r2, [pc, #84]	; (8013b4c <TIM_OC1_SetConfig+0xd8>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d003      	beq.n	8013b02 <TIM_OC1_SetConfig+0x8e>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	4a14      	ldr	r2, [pc, #80]	; (8013b50 <TIM_OC1_SetConfig+0xdc>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d111      	bne.n	8013b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	695b      	ldr	r3, [r3, #20]
 8013b16:	693a      	ldr	r2, [r7, #16]
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	699b      	ldr	r3, [r3, #24]
 8013b20:	693a      	ldr	r2, [r7, #16]
 8013b22:	4313      	orrs	r3, r2
 8013b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	693a      	ldr	r2, [r7, #16]
 8013b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	68fa      	ldr	r2, [r7, #12]
 8013b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	685a      	ldr	r2, [r3, #4]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	697a      	ldr	r2, [r7, #20]
 8013b3e:	621a      	str	r2, [r3, #32]
}
 8013b40:	bf00      	nop
 8013b42:	371c      	adds	r7, #28
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	40010000 	.word	0x40010000
 8013b50:	40010400 	.word	0x40010400

08013b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b087      	sub	sp, #28
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6a1b      	ldr	r3, [r3, #32]
 8013b62:	f023 0210 	bic.w	r2, r3, #16
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6a1b      	ldr	r3, [r3, #32]
 8013b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	699b      	ldr	r3, [r3, #24]
 8013b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	021b      	lsls	r3, r3, #8
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	4313      	orrs	r3, r2
 8013b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	f023 0320 	bic.w	r3, r3, #32
 8013b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	011b      	lsls	r3, r3, #4
 8013ba6:	697a      	ldr	r2, [r7, #20]
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	4a22      	ldr	r2, [pc, #136]	; (8013c38 <TIM_OC2_SetConfig+0xe4>)
 8013bb0:	4293      	cmp	r3, r2
 8013bb2:	d003      	beq.n	8013bbc <TIM_OC2_SetConfig+0x68>
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	4a21      	ldr	r2, [pc, #132]	; (8013c3c <TIM_OC2_SetConfig+0xe8>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d10d      	bne.n	8013bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	011b      	lsls	r3, r3, #4
 8013bca:	697a      	ldr	r2, [r7, #20]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	4a17      	ldr	r2, [pc, #92]	; (8013c38 <TIM_OC2_SetConfig+0xe4>)
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	d003      	beq.n	8013be8 <TIM_OC2_SetConfig+0x94>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	4a16      	ldr	r2, [pc, #88]	; (8013c3c <TIM_OC2_SetConfig+0xe8>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d113      	bne.n	8013c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	695b      	ldr	r3, [r3, #20]
 8013bfc:	009b      	lsls	r3, r3, #2
 8013bfe:	693a      	ldr	r2, [r7, #16]
 8013c00:	4313      	orrs	r3, r2
 8013c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	699b      	ldr	r3, [r3, #24]
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	693a      	ldr	r2, [r7, #16]
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	693a      	ldr	r2, [r7, #16]
 8013c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	685a      	ldr	r2, [r3, #4]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	697a      	ldr	r2, [r7, #20]
 8013c28:	621a      	str	r2, [r3, #32]
}
 8013c2a:	bf00      	nop
 8013c2c:	371c      	adds	r7, #28
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr
 8013c36:	bf00      	nop
 8013c38:	40010000 	.word	0x40010000
 8013c3c:	40010400 	.word	0x40010400

08013c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b087      	sub	sp, #28
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6a1b      	ldr	r3, [r3, #32]
 8013c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6a1b      	ldr	r3, [r3, #32]
 8013c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	685b      	ldr	r3, [r3, #4]
 8013c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	69db      	ldr	r3, [r3, #28]
 8013c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	f023 0303 	bic.w	r3, r3, #3
 8013c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	68fa      	ldr	r2, [r7, #12]
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	689b      	ldr	r3, [r3, #8]
 8013c8e:	021b      	lsls	r3, r3, #8
 8013c90:	697a      	ldr	r2, [r7, #20]
 8013c92:	4313      	orrs	r3, r2
 8013c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	4a21      	ldr	r2, [pc, #132]	; (8013d20 <TIM_OC3_SetConfig+0xe0>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d003      	beq.n	8013ca6 <TIM_OC3_SetConfig+0x66>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	4a20      	ldr	r2, [pc, #128]	; (8013d24 <TIM_OC3_SetConfig+0xe4>)
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d10d      	bne.n	8013cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	021b      	lsls	r3, r3, #8
 8013cb4:	697a      	ldr	r2, [r7, #20]
 8013cb6:	4313      	orrs	r3, r2
 8013cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	4a16      	ldr	r2, [pc, #88]	; (8013d20 <TIM_OC3_SetConfig+0xe0>)
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	d003      	beq.n	8013cd2 <TIM_OC3_SetConfig+0x92>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4a15      	ldr	r2, [pc, #84]	; (8013d24 <TIM_OC3_SetConfig+0xe4>)
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d113      	bne.n	8013cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	695b      	ldr	r3, [r3, #20]
 8013ce6:	011b      	lsls	r3, r3, #4
 8013ce8:	693a      	ldr	r2, [r7, #16]
 8013cea:	4313      	orrs	r3, r2
 8013cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	699b      	ldr	r3, [r3, #24]
 8013cf2:	011b      	lsls	r3, r3, #4
 8013cf4:	693a      	ldr	r2, [r7, #16]
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	693a      	ldr	r2, [r7, #16]
 8013cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	68fa      	ldr	r2, [r7, #12]
 8013d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	685a      	ldr	r2, [r3, #4]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	697a      	ldr	r2, [r7, #20]
 8013d12:	621a      	str	r2, [r3, #32]
}
 8013d14:	bf00      	nop
 8013d16:	371c      	adds	r7, #28
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	40010000 	.word	0x40010000
 8013d24:	40010400 	.word	0x40010400

08013d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b087      	sub	sp, #28
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a1b      	ldr	r3, [r3, #32]
 8013d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6a1b      	ldr	r3, [r3, #32]
 8013d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	69db      	ldr	r3, [r3, #28]
 8013d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	021b      	lsls	r3, r3, #8
 8013d66:	68fa      	ldr	r2, [r7, #12]
 8013d68:	4313      	orrs	r3, r2
 8013d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	031b      	lsls	r3, r3, #12
 8013d7a:	693a      	ldr	r2, [r7, #16]
 8013d7c:	4313      	orrs	r3, r2
 8013d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	4a12      	ldr	r2, [pc, #72]	; (8013dcc <TIM_OC4_SetConfig+0xa4>)
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d003      	beq.n	8013d90 <TIM_OC4_SetConfig+0x68>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	4a11      	ldr	r2, [pc, #68]	; (8013dd0 <TIM_OC4_SetConfig+0xa8>)
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d109      	bne.n	8013da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	695b      	ldr	r3, [r3, #20]
 8013d9c:	019b      	lsls	r3, r3, #6
 8013d9e:	697a      	ldr	r2, [r7, #20]
 8013da0:	4313      	orrs	r3, r2
 8013da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	697a      	ldr	r2, [r7, #20]
 8013da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	68fa      	ldr	r2, [r7, #12]
 8013dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	693a      	ldr	r2, [r7, #16]
 8013dbc:	621a      	str	r2, [r3, #32]
}
 8013dbe:	bf00      	nop
 8013dc0:	371c      	adds	r7, #28
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc8:	4770      	bx	lr
 8013dca:	bf00      	nop
 8013dcc:	40010000 	.word	0x40010000
 8013dd0:	40010400 	.word	0x40010400

08013dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b087      	sub	sp, #28
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	6a1b      	ldr	r3, [r3, #32]
 8013de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	6a1b      	ldr	r3, [r3, #32]
 8013dea:	f023 0201 	bic.w	r2, r3, #1
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	699b      	ldr	r3, [r3, #24]
 8013df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	011b      	lsls	r3, r3, #4
 8013e04:	693a      	ldr	r2, [r7, #16]
 8013e06:	4313      	orrs	r3, r2
 8013e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	f023 030a 	bic.w	r3, r3, #10
 8013e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013e12:	697a      	ldr	r2, [r7, #20]
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	4313      	orrs	r3, r2
 8013e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	693a      	ldr	r2, [r7, #16]
 8013e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	697a      	ldr	r2, [r7, #20]
 8013e24:	621a      	str	r2, [r3, #32]
}
 8013e26:	bf00      	nop
 8013e28:	371c      	adds	r7, #28
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e30:	4770      	bx	lr

08013e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013e32:	b480      	push	{r7}
 8013e34:	b087      	sub	sp, #28
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	60f8      	str	r0, [r7, #12]
 8013e3a:	60b9      	str	r1, [r7, #8]
 8013e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	6a1b      	ldr	r3, [r3, #32]
 8013e42:	f023 0210 	bic.w	r2, r3, #16
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	699b      	ldr	r3, [r3, #24]
 8013e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	6a1b      	ldr	r3, [r3, #32]
 8013e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	031b      	lsls	r3, r3, #12
 8013e62:	697a      	ldr	r2, [r7, #20]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	011b      	lsls	r3, r3, #4
 8013e74:	693a      	ldr	r2, [r7, #16]
 8013e76:	4313      	orrs	r3, r2
 8013e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	697a      	ldr	r2, [r7, #20]
 8013e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	693a      	ldr	r2, [r7, #16]
 8013e84:	621a      	str	r2, [r3, #32]
}
 8013e86:	bf00      	nop
 8013e88:	371c      	adds	r7, #28
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e90:	4770      	bx	lr

08013e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013e92:	b480      	push	{r7}
 8013e94:	b085      	sub	sp, #20
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013eaa:	683a      	ldr	r2, [r7, #0]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	f043 0307 	orr.w	r3, r3, #7
 8013eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	609a      	str	r2, [r3, #8]
}
 8013ebc:	bf00      	nop
 8013ebe:	3714      	adds	r7, #20
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr

08013ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b087      	sub	sp, #28
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	607a      	str	r2, [r7, #4]
 8013ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	689b      	ldr	r3, [r3, #8]
 8013eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	021a      	lsls	r2, r3, #8
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	431a      	orrs	r2, r3
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	697a      	ldr	r2, [r7, #20]
 8013ef2:	4313      	orrs	r3, r2
 8013ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	697a      	ldr	r2, [r7, #20]
 8013efa:	609a      	str	r2, [r3, #8]
}
 8013efc:	bf00      	nop
 8013efe:	371c      	adds	r7, #28
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b087      	sub	sp, #28
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	f003 031f 	and.w	r3, r3, #31
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	6a1a      	ldr	r2, [r3, #32]
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	43db      	mvns	r3, r3
 8013f2a:	401a      	ands	r2, r3
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6a1a      	ldr	r2, [r3, #32]
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	f003 031f 	and.w	r3, r3, #31
 8013f3a:	6879      	ldr	r1, [r7, #4]
 8013f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8013f40:	431a      	orrs	r2, r3
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	621a      	str	r2, [r3, #32]
}
 8013f46:	bf00      	nop
 8013f48:	371c      	adds	r7, #28
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr
	...

08013f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b085      	sub	sp, #20
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d101      	bne.n	8013f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013f68:	2302      	movs	r3, #2
 8013f6a:	e05a      	b.n	8014022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2201      	movs	r2, #1
 8013f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2202      	movs	r2, #2
 8013f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	68fa      	ldr	r2, [r7, #12]
 8013f9a:	4313      	orrs	r3, r2
 8013f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	68fa      	ldr	r2, [r7, #12]
 8013fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4a21      	ldr	r2, [pc, #132]	; (8014030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d022      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fb8:	d01d      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	4a1d      	ldr	r2, [pc, #116]	; (8014034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d018      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4a1b      	ldr	r2, [pc, #108]	; (8014038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	d013      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4a1a      	ldr	r2, [pc, #104]	; (801403c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d00e      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4a18      	ldr	r2, [pc, #96]	; (8014040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	d009      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	4a17      	ldr	r2, [pc, #92]	; (8014044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013fe8:	4293      	cmp	r3, r2
 8013fea:	d004      	beq.n	8013ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4a15      	ldr	r2, [pc, #84]	; (8014048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d10c      	bne.n	8014010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	4313      	orrs	r3, r2
 8014006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	68ba      	ldr	r2, [r7, #8]
 801400e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2201      	movs	r2, #1
 8014014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014020:	2300      	movs	r3, #0
}
 8014022:	4618      	mov	r0, r3
 8014024:	3714      	adds	r7, #20
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	40010000 	.word	0x40010000
 8014034:	40000400 	.word	0x40000400
 8014038:	40000800 	.word	0x40000800
 801403c:	40000c00 	.word	0x40000c00
 8014040:	40010400 	.word	0x40010400
 8014044:	40014000 	.word	0x40014000
 8014048:	40001800 	.word	0x40001800

0801404c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801404c:	b480      	push	{r7}
 801404e:	b085      	sub	sp, #20
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014056:	2300      	movs	r3, #0
 8014058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014060:	2b01      	cmp	r3, #1
 8014062:	d101      	bne.n	8014068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014064:	2302      	movs	r3, #2
 8014066:	e03d      	b.n	80140e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2201      	movs	r2, #1
 801406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	4313      	orrs	r3, r2
 801407c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	4313      	orrs	r3, r2
 801408a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	4313      	orrs	r3, r2
 8014098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4313      	orrs	r3, r2
 80140a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	4313      	orrs	r3, r2
 80140b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	695b      	ldr	r3, [r3, #20]
 80140c0:	4313      	orrs	r3, r2
 80140c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	69db      	ldr	r3, [r3, #28]
 80140ce:	4313      	orrs	r3, r2
 80140d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	68fa      	ldr	r2, [r7, #12]
 80140d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2200      	movs	r2, #0
 80140de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80140e2:	2300      	movs	r3, #0
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3714      	adds	r7, #20
 80140e8:	46bd      	mov	sp, r7
 80140ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ee:	4770      	bx	lr

080140f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80140f8:	bf00      	nop
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr

08014104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801410c:	bf00      	nop
 801410e:	370c      	adds	r7, #12
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr

08014118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d101      	bne.n	801412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014126:	2301      	movs	r3, #1
 8014128:	e03f      	b.n	80141aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014130:	b2db      	uxtb	r3, r3
 8014132:	2b00      	cmp	r3, #0
 8014134:	d106      	bne.n	8014144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7fb f9b6 	bl	800f4b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2224      	movs	r2, #36	; 0x24
 8014148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	68da      	ldr	r2, [r3, #12]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 fc7b 	bl	8014a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	691a      	ldr	r2, [r3, #16]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	695a      	ldr	r2, [r3, #20]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	68da      	ldr	r2, [r3, #12]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2200      	movs	r2, #0
 8014196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2220      	movs	r2, #32
 801419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2220      	movs	r2, #32
 80141a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80141a8:	2300      	movs	r3, #0
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
	...

080141b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b0ba      	sub	sp, #232	; 0xe8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	695b      	ldr	r3, [r3, #20]
 80141d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80141da:	2300      	movs	r3, #0
 80141dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80141e0:	2300      	movs	r3, #0
 80141e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80141e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141ea:	f003 030f 	and.w	r3, r3, #15
 80141ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80141f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10f      	bne.n	801421a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80141fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141fe:	f003 0320 	and.w	r3, r3, #32
 8014202:	2b00      	cmp	r3, #0
 8014204:	d009      	beq.n	801421a <HAL_UART_IRQHandler+0x66>
 8014206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801420a:	f003 0320 	and.w	r3, r3, #32
 801420e:	2b00      	cmp	r3, #0
 8014210:	d003      	beq.n	801421a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 fb65 	bl	80148e2 <UART_Receive_IT>
      return;
 8014218:	e256      	b.n	80146c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801421a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801421e:	2b00      	cmp	r3, #0
 8014220:	f000 80de 	beq.w	80143e0 <HAL_UART_IRQHandler+0x22c>
 8014224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014228:	f003 0301 	and.w	r3, r3, #1
 801422c:	2b00      	cmp	r3, #0
 801422e:	d106      	bne.n	801423e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8014230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014238:	2b00      	cmp	r3, #0
 801423a:	f000 80d1 	beq.w	80143e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801423e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014242:	f003 0301 	and.w	r3, r3, #1
 8014246:	2b00      	cmp	r3, #0
 8014248:	d00b      	beq.n	8014262 <HAL_UART_IRQHandler+0xae>
 801424a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014252:	2b00      	cmp	r3, #0
 8014254:	d005      	beq.n	8014262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801425a:	f043 0201 	orr.w	r2, r3, #1
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014266:	f003 0304 	and.w	r3, r3, #4
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00b      	beq.n	8014286 <HAL_UART_IRQHandler+0xd2>
 801426e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014272:	f003 0301 	and.w	r3, r3, #1
 8014276:	2b00      	cmp	r3, #0
 8014278:	d005      	beq.n	8014286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801427e:	f043 0202 	orr.w	r2, r3, #2
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801428a:	f003 0302 	and.w	r3, r3, #2
 801428e:	2b00      	cmp	r3, #0
 8014290:	d00b      	beq.n	80142aa <HAL_UART_IRQHandler+0xf6>
 8014292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014296:	f003 0301 	and.w	r3, r3, #1
 801429a:	2b00      	cmp	r3, #0
 801429c:	d005      	beq.n	80142aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142a2:	f043 0204 	orr.w	r2, r3, #4
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80142aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142ae:	f003 0308 	and.w	r3, r3, #8
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d011      	beq.n	80142da <HAL_UART_IRQHandler+0x126>
 80142b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142ba:	f003 0320 	and.w	r3, r3, #32
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d105      	bne.n	80142ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80142c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80142c6:	f003 0301 	and.w	r3, r3, #1
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d005      	beq.n	80142da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142d2:	f043 0208 	orr.w	r2, r3, #8
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f000 81ed 	beq.w	80146be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80142e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142e8:	f003 0320 	and.w	r3, r3, #32
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d008      	beq.n	8014302 <HAL_UART_IRQHandler+0x14e>
 80142f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142f4:	f003 0320 	and.w	r3, r3, #32
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d002      	beq.n	8014302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f000 faf0 	bl	80148e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	695b      	ldr	r3, [r3, #20]
 8014308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801430c:	2b40      	cmp	r3, #64	; 0x40
 801430e:	bf0c      	ite	eq
 8014310:	2301      	moveq	r3, #1
 8014312:	2300      	movne	r3, #0
 8014314:	b2db      	uxtb	r3, r3
 8014316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801431e:	f003 0308 	and.w	r3, r3, #8
 8014322:	2b00      	cmp	r3, #0
 8014324:	d103      	bne.n	801432e <HAL_UART_IRQHandler+0x17a>
 8014326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801432a:	2b00      	cmp	r3, #0
 801432c:	d04f      	beq.n	80143ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 f9f8 	bl	8014724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	695b      	ldr	r3, [r3, #20]
 801433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801433e:	2b40      	cmp	r3, #64	; 0x40
 8014340:	d141      	bne.n	80143c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	3314      	adds	r3, #20
 8014348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801434c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014350:	e853 3f00 	ldrex	r3, [r3]
 8014354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801435c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	3314      	adds	r3, #20
 801436a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801436e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801437a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801437e:	e841 2300 	strex	r3, r2, [r1]
 8014382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801438a:	2b00      	cmp	r3, #0
 801438c:	d1d9      	bne.n	8014342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014392:	2b00      	cmp	r3, #0
 8014394:	d013      	beq.n	80143be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801439a:	4a7d      	ldr	r2, [pc, #500]	; (8014590 <HAL_UART_IRQHandler+0x3dc>)
 801439c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7fc ff16 	bl	80111d4 <HAL_DMA_Abort_IT>
 80143a8:	4603      	mov	r3, r0
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d016      	beq.n	80143dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80143b8:	4610      	mov	r0, r2
 80143ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143bc:	e00e      	b.n	80143dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f000 f99a 	bl	80146f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143c4:	e00a      	b.n	80143dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 f996 	bl	80146f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143cc:	e006      	b.n	80143dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f000 f992 	bl	80146f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2200      	movs	r2, #0
 80143d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80143da:	e170      	b.n	80146be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143dc:	bf00      	nop
    return;
 80143de:	e16e      	b.n	80146be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	f040 814a 	bne.w	801467e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80143ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143ee:	f003 0310 	and.w	r3, r3, #16
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	f000 8143 	beq.w	801467e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80143f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80143fc:	f003 0310 	and.w	r3, r3, #16
 8014400:	2b00      	cmp	r3, #0
 8014402:	f000 813c 	beq.w	801467e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014406:	2300      	movs	r3, #0
 8014408:	60bb      	str	r3, [r7, #8]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	60bb      	str	r3, [r7, #8]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	60bb      	str	r3, [r7, #8]
 801441a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	695b      	ldr	r3, [r3, #20]
 8014422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014426:	2b40      	cmp	r3, #64	; 0x40
 8014428:	f040 80b4 	bne.w	8014594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801443c:	2b00      	cmp	r3, #0
 801443e:	f000 8140 	beq.w	80146c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801444a:	429a      	cmp	r2, r3
 801444c:	f080 8139 	bcs.w	80146c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801445c:	69db      	ldr	r3, [r3, #28]
 801445e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014462:	f000 8088 	beq.w	8014576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	330c      	adds	r3, #12
 801446c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014474:	e853 3f00 	ldrex	r3, [r3]
 8014478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801447c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	330c      	adds	r3, #12
 801448e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801449a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801449e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80144a2:	e841 2300 	strex	r3, r2, [r1]
 80144a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80144aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d1d9      	bne.n	8014466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	3314      	adds	r3, #20
 80144b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144bc:	e853 3f00 	ldrex	r3, [r3]
 80144c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80144c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144c4:	f023 0301 	bic.w	r3, r3, #1
 80144c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	3314      	adds	r3, #20
 80144d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80144d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80144da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80144de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80144e2:	e841 2300 	strex	r3, r2, [r1]
 80144e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80144e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d1e1      	bne.n	80144b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	3314      	adds	r3, #20
 80144f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80144f8:	e853 3f00 	ldrex	r3, [r3]
 80144fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80144fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	3314      	adds	r3, #20
 801450e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801451a:	e841 2300 	strex	r3, r2, [r1]
 801451e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1e3      	bne.n	80144ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2220      	movs	r2, #32
 801452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	330c      	adds	r3, #12
 801453a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801453e:	e853 3f00 	ldrex	r3, [r3]
 8014542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014546:	f023 0310 	bic.w	r3, r3, #16
 801454a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	330c      	adds	r3, #12
 8014554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014558:	65ba      	str	r2, [r7, #88]	; 0x58
 801455a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801455c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801455e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014560:	e841 2300 	strex	r3, r2, [r1]
 8014564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014568:	2b00      	cmp	r3, #0
 801456a:	d1e3      	bne.n	8014534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014570:	4618      	mov	r0, r3
 8014572:	f7fc fdbf 	bl	80110f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801457e:	b29b      	uxth	r3, r3
 8014580:	1ad3      	subs	r3, r2, r3
 8014582:	b29b      	uxth	r3, r3
 8014584:	4619      	mov	r1, r3
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 f8c0 	bl	801470c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801458c:	e099      	b.n	80146c2 <HAL_UART_IRQHandler+0x50e>
 801458e:	bf00      	nop
 8014590:	080147eb 	.word	0x080147eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801459c:	b29b      	uxth	r3, r3
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	f000 808b 	beq.w	80146c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80145b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	f000 8086 	beq.w	80146c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	330c      	adds	r3, #12
 80145c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c4:	e853 3f00 	ldrex	r3, [r3]
 80145c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80145ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80145d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	330c      	adds	r3, #12
 80145da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80145de:	647a      	str	r2, [r7, #68]	; 0x44
 80145e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80145e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145e6:	e841 2300 	strex	r3, r2, [r1]
 80145ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80145ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d1e3      	bne.n	80145ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	3314      	adds	r3, #20
 80145f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fc:	e853 3f00 	ldrex	r3, [r3]
 8014600:	623b      	str	r3, [r7, #32]
   return(result);
 8014602:	6a3b      	ldr	r3, [r7, #32]
 8014604:	f023 0301 	bic.w	r3, r3, #1
 8014608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	3314      	adds	r3, #20
 8014612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014616:	633a      	str	r2, [r7, #48]	; 0x30
 8014618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801461a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801461e:	e841 2300 	strex	r3, r2, [r1]
 8014622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014626:	2b00      	cmp	r3, #0
 8014628:	d1e3      	bne.n	80145f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2220      	movs	r2, #32
 801462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2200      	movs	r2, #0
 8014636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	330c      	adds	r3, #12
 801463e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	e853 3f00 	ldrex	r3, [r3]
 8014646:	60fb      	str	r3, [r7, #12]
   return(result);
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f023 0310 	bic.w	r3, r3, #16
 801464e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	330c      	adds	r3, #12
 8014658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801465c:	61fa      	str	r2, [r7, #28]
 801465e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014660:	69b9      	ldr	r1, [r7, #24]
 8014662:	69fa      	ldr	r2, [r7, #28]
 8014664:	e841 2300 	strex	r3, r2, [r1]
 8014668:	617b      	str	r3, [r7, #20]
   return(result);
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d1e3      	bne.n	8014638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014674:	4619      	mov	r1, r3
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 f848 	bl	801470c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801467c:	e023      	b.n	80146c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014686:	2b00      	cmp	r3, #0
 8014688:	d009      	beq.n	801469e <HAL_UART_IRQHandler+0x4ea>
 801468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014692:	2b00      	cmp	r3, #0
 8014694:	d003      	beq.n	801469e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 f8bb 	bl	8014812 <UART_Transmit_IT>
    return;
 801469c:	e014      	b.n	80146c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d00e      	beq.n	80146c8 <HAL_UART_IRQHandler+0x514>
 80146aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80146ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d008      	beq.n	80146c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 f8fb 	bl	80148b2 <UART_EndTransmit_IT>
    return;
 80146bc:	e004      	b.n	80146c8 <HAL_UART_IRQHandler+0x514>
    return;
 80146be:	bf00      	nop
 80146c0:	e002      	b.n	80146c8 <HAL_UART_IRQHandler+0x514>
      return;
 80146c2:	bf00      	nop
 80146c4:	e000      	b.n	80146c8 <HAL_UART_IRQHandler+0x514>
      return;
 80146c6:	bf00      	nop
  }
}
 80146c8:	37e8      	adds	r7, #232	; 0xe8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop

080146d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b083      	sub	sp, #12
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80146d8:	bf00      	nop
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80146ec:	bf00      	nop
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr

080146f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014700:	bf00      	nop
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr

0801470c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801470c:	b480      	push	{r7}
 801470e:	b083      	sub	sp, #12
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014718:	bf00      	nop
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014724:	b480      	push	{r7}
 8014726:	b095      	sub	sp, #84	; 0x54
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	330c      	adds	r3, #12
 8014732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014736:	e853 3f00 	ldrex	r3, [r3]
 801473a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	330c      	adds	r3, #12
 801474a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801474c:	643a      	str	r2, [r7, #64]	; 0x40
 801474e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014754:	e841 2300 	strex	r3, r2, [r1]
 8014758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475c:	2b00      	cmp	r3, #0
 801475e:	d1e5      	bne.n	801472c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	3314      	adds	r3, #20
 8014766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014768:	6a3b      	ldr	r3, [r7, #32]
 801476a:	e853 3f00 	ldrex	r3, [r3]
 801476e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	f023 0301 	bic.w	r3, r3, #1
 8014776:	64bb      	str	r3, [r7, #72]	; 0x48
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	3314      	adds	r3, #20
 801477e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014788:	e841 2300 	strex	r3, r2, [r1]
 801478c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014790:	2b00      	cmp	r3, #0
 8014792:	d1e5      	bne.n	8014760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014798:	2b01      	cmp	r3, #1
 801479a:	d119      	bne.n	80147d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	330c      	adds	r3, #12
 80147a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	e853 3f00 	ldrex	r3, [r3]
 80147aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	f023 0310 	bic.w	r3, r3, #16
 80147b2:	647b      	str	r3, [r7, #68]	; 0x44
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	330c      	adds	r3, #12
 80147ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80147bc:	61ba      	str	r2, [r7, #24]
 80147be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147c0:	6979      	ldr	r1, [r7, #20]
 80147c2:	69ba      	ldr	r2, [r7, #24]
 80147c4:	e841 2300 	strex	r3, r2, [r1]
 80147c8:	613b      	str	r3, [r7, #16]
   return(result);
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d1e5      	bne.n	801479c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2220      	movs	r2, #32
 80147d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80147de:	bf00      	nop
 80147e0:	3754      	adds	r7, #84	; 0x54
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr

080147ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80147ea:	b580      	push	{r7, lr}
 80147ec:	b084      	sub	sp, #16
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2200      	movs	r2, #0
 80147fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2200      	movs	r2, #0
 8014802:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f7ff ff77 	bl	80146f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801480a:	bf00      	nop
 801480c:	3710      	adds	r7, #16
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}

08014812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8014812:	b480      	push	{r7}
 8014814:	b085      	sub	sp, #20
 8014816:	af00      	add	r7, sp, #0
 8014818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014820:	b2db      	uxtb	r3, r3
 8014822:	2b21      	cmp	r3, #33	; 0x21
 8014824:	d13e      	bne.n	80148a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	689b      	ldr	r3, [r3, #8]
 801482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801482e:	d114      	bne.n	801485a <UART_Transmit_IT+0x48>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	691b      	ldr	r3, [r3, #16]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d110      	bne.n	801485a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6a1b      	ldr	r3, [r3, #32]
 801483c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	881b      	ldrh	r3, [r3, #0]
 8014842:	461a      	mov	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801484c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6a1b      	ldr	r3, [r3, #32]
 8014852:	1c9a      	adds	r2, r3, #2
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	621a      	str	r2, [r3, #32]
 8014858:	e008      	b.n	801486c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6a1b      	ldr	r3, [r3, #32]
 801485e:	1c59      	adds	r1, r3, #1
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	6211      	str	r1, [r2, #32]
 8014864:	781a      	ldrb	r2, [r3, #0]
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014870:	b29b      	uxth	r3, r3
 8014872:	3b01      	subs	r3, #1
 8014874:	b29b      	uxth	r3, r3
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	4619      	mov	r1, r3
 801487a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801487c:	2b00      	cmp	r3, #0
 801487e:	d10f      	bne.n	80148a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	68da      	ldr	r2, [r3, #12]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801488e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	68da      	ldr	r2, [r3, #12]
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801489e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80148a0:	2300      	movs	r3, #0
 80148a2:	e000      	b.n	80148a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80148a4:	2302      	movs	r3, #2
  }
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3714      	adds	r7, #20
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr

080148b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80148b2:	b580      	push	{r7, lr}
 80148b4:	b082      	sub	sp, #8
 80148b6:	af00      	add	r7, sp, #0
 80148b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	68da      	ldr	r2, [r3, #12]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2220      	movs	r2, #32
 80148ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f7ff fefc 	bl	80146d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b08c      	sub	sp, #48	; 0x30
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	2b22      	cmp	r3, #34	; 0x22
 80148f4:	f040 80ab 	bne.w	8014a4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	689b      	ldr	r3, [r3, #8]
 80148fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014900:	d117      	bne.n	8014932 <UART_Receive_IT+0x50>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d113      	bne.n	8014932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801490a:	2300      	movs	r3, #0
 801490c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014912:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	b29b      	uxth	r3, r3
 801491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014920:	b29a      	uxth	r2, r3
 8014922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801492a:	1c9a      	adds	r2, r3, #2
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	629a      	str	r2, [r3, #40]	; 0x28
 8014930:	e026      	b.n	8014980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014936:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8014938:	2300      	movs	r3, #0
 801493a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	689b      	ldr	r3, [r3, #8]
 8014940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014944:	d007      	beq.n	8014956 <UART_Receive_IT+0x74>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	689b      	ldr	r3, [r3, #8]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d10a      	bne.n	8014964 <UART_Receive_IT+0x82>
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	691b      	ldr	r3, [r3, #16]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d106      	bne.n	8014964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	685b      	ldr	r3, [r3, #4]
 801495c:	b2da      	uxtb	r2, r3
 801495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014960:	701a      	strb	r2, [r3, #0]
 8014962:	e008      	b.n	8014976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	b2db      	uxtb	r3, r3
 801496c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014970:	b2da      	uxtb	r2, r3
 8014972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801497a:	1c5a      	adds	r2, r3, #1
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014984:	b29b      	uxth	r3, r3
 8014986:	3b01      	subs	r3, #1
 8014988:	b29b      	uxth	r3, r3
 801498a:	687a      	ldr	r2, [r7, #4]
 801498c:	4619      	mov	r1, r3
 801498e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8014990:	2b00      	cmp	r3, #0
 8014992:	d15a      	bne.n	8014a4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	68da      	ldr	r2, [r3, #12]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f022 0220 	bic.w	r2, r2, #32
 80149a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	68da      	ldr	r2, [r3, #12]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80149b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	695a      	ldr	r2, [r3, #20]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f022 0201 	bic.w	r2, r2, #1
 80149c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2220      	movs	r2, #32
 80149c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d0:	2b01      	cmp	r3, #1
 80149d2:	d135      	bne.n	8014a40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2200      	movs	r2, #0
 80149d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	330c      	adds	r3, #12
 80149e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	e853 3f00 	ldrex	r3, [r3]
 80149e8:	613b      	str	r3, [r7, #16]
   return(result);
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	f023 0310 	bic.w	r3, r3, #16
 80149f0:	627b      	str	r3, [r7, #36]	; 0x24
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	330c      	adds	r3, #12
 80149f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149fa:	623a      	str	r2, [r7, #32]
 80149fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149fe:	69f9      	ldr	r1, [r7, #28]
 8014a00:	6a3a      	ldr	r2, [r7, #32]
 8014a02:	e841 2300 	strex	r3, r2, [r1]
 8014a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8014a08:	69bb      	ldr	r3, [r7, #24]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d1e5      	bne.n	80149da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f003 0310 	and.w	r3, r3, #16
 8014a18:	2b10      	cmp	r3, #16
 8014a1a:	d10a      	bne.n	8014a32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	60fb      	str	r3, [r7, #12]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	685b      	ldr	r3, [r3, #4]
 8014a2e:	60fb      	str	r3, [r7, #12]
 8014a30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014a36:	4619      	mov	r1, r3
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7ff fe67 	bl	801470c <HAL_UARTEx_RxEventCallback>
 8014a3e:	e002      	b.n	8014a46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f7ff fe4f 	bl	80146e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e002      	b.n	8014a50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	e000      	b.n	8014a50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8014a4e:	2302      	movs	r3, #2
  }
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3730      	adds	r7, #48	; 0x30
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014a5c:	b0c0      	sub	sp, #256	; 0x100
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	691b      	ldr	r3, [r3, #16]
 8014a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a74:	68d9      	ldr	r1, [r3, #12]
 8014a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	ea40 0301 	orr.w	r3, r0, r1
 8014a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a86:	689a      	ldr	r2, [r3, #8]
 8014a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	431a      	orrs	r2, r3
 8014a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a94:	695b      	ldr	r3, [r3, #20]
 8014a96:	431a      	orrs	r2, r3
 8014a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014a9c:	69db      	ldr	r3, [r3, #28]
 8014a9e:	4313      	orrs	r3, r2
 8014aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8014aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014ab0:	f021 010c 	bic.w	r1, r1, #12
 8014ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014abe:	430b      	orrs	r3, r1
 8014ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	695b      	ldr	r3, [r3, #20]
 8014aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ad2:	6999      	ldr	r1, [r3, #24]
 8014ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	ea40 0301 	orr.w	r3, r0, r1
 8014ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	4b8f      	ldr	r3, [pc, #572]	; (8014d24 <UART_SetConfig+0x2cc>)
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d005      	beq.n	8014af8 <UART_SetConfig+0xa0>
 8014aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014af0:	681a      	ldr	r2, [r3, #0]
 8014af2:	4b8d      	ldr	r3, [pc, #564]	; (8014d28 <UART_SetConfig+0x2d0>)
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d104      	bne.n	8014b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014af8:	f7fd fe46 	bl	8012788 <HAL_RCC_GetPCLK2Freq>
 8014afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8014b00:	e003      	b.n	8014b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014b02:	f7fd fe2d 	bl	8012760 <HAL_RCC_GetPCLK1Freq>
 8014b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b0e:	69db      	ldr	r3, [r3, #28]
 8014b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b14:	f040 810c 	bne.w	8014d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8014b2a:	4622      	mov	r2, r4
 8014b2c:	462b      	mov	r3, r5
 8014b2e:	1891      	adds	r1, r2, r2
 8014b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8014b32:	415b      	adcs	r3, r3
 8014b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8014b3a:	4621      	mov	r1, r4
 8014b3c:	eb12 0801 	adds.w	r8, r2, r1
 8014b40:	4629      	mov	r1, r5
 8014b42:	eb43 0901 	adc.w	r9, r3, r1
 8014b46:	f04f 0200 	mov.w	r2, #0
 8014b4a:	f04f 0300 	mov.w	r3, #0
 8014b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8014b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014b5a:	4690      	mov	r8, r2
 8014b5c:	4699      	mov	r9, r3
 8014b5e:	4623      	mov	r3, r4
 8014b60:	eb18 0303 	adds.w	r3, r8, r3
 8014b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014b68:	462b      	mov	r3, r5
 8014b6a:	eb49 0303 	adc.w	r3, r9, r3
 8014b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8014b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8014b86:	460b      	mov	r3, r1
 8014b88:	18db      	adds	r3, r3, r3
 8014b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	eb42 0303 	adc.w	r3, r2, r3
 8014b92:	657b      	str	r3, [r7, #84]	; 0x54
 8014b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8014b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8014b9c:	f7eb fb68 	bl	8000270 <__aeabi_uldivmod>
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	460b      	mov	r3, r1
 8014ba4:	4b61      	ldr	r3, [pc, #388]	; (8014d2c <UART_SetConfig+0x2d4>)
 8014ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8014baa:	095b      	lsrs	r3, r3, #5
 8014bac:	011c      	lsls	r4, r3, #4
 8014bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8014bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8014bc0:	4642      	mov	r2, r8
 8014bc2:	464b      	mov	r3, r9
 8014bc4:	1891      	adds	r1, r2, r2
 8014bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8014bc8:	415b      	adcs	r3, r3
 8014bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8014bd0:	4641      	mov	r1, r8
 8014bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8014bd6:	4649      	mov	r1, r9
 8014bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8014bdc:	f04f 0200 	mov.w	r2, #0
 8014be0:	f04f 0300 	mov.w	r3, #0
 8014be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8014bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014bf0:	4692      	mov	sl, r2
 8014bf2:	469b      	mov	fp, r3
 8014bf4:	4643      	mov	r3, r8
 8014bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8014bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014bfe:	464b      	mov	r3, r9
 8014c00:	eb4b 0303 	adc.w	r3, fp, r3
 8014c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8014c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	18db      	adds	r3, r3, r3
 8014c20:	643b      	str	r3, [r7, #64]	; 0x40
 8014c22:	4613      	mov	r3, r2
 8014c24:	eb42 0303 	adc.w	r3, r2, r3
 8014c28:	647b      	str	r3, [r7, #68]	; 0x44
 8014c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8014c32:	f7eb fb1d 	bl	8000270 <__aeabi_uldivmod>
 8014c36:	4602      	mov	r2, r0
 8014c38:	460b      	mov	r3, r1
 8014c3a:	4611      	mov	r1, r2
 8014c3c:	4b3b      	ldr	r3, [pc, #236]	; (8014d2c <UART_SetConfig+0x2d4>)
 8014c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8014c42:	095b      	lsrs	r3, r3, #5
 8014c44:	2264      	movs	r2, #100	; 0x64
 8014c46:	fb02 f303 	mul.w	r3, r2, r3
 8014c4a:	1acb      	subs	r3, r1, r3
 8014c4c:	00db      	lsls	r3, r3, #3
 8014c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8014c52:	4b36      	ldr	r3, [pc, #216]	; (8014d2c <UART_SetConfig+0x2d4>)
 8014c54:	fba3 2302 	umull	r2, r3, r3, r2
 8014c58:	095b      	lsrs	r3, r3, #5
 8014c5a:	005b      	lsls	r3, r3, #1
 8014c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014c60:	441c      	add	r4, r3
 8014c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014c66:	2200      	movs	r2, #0
 8014c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8014c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8014c74:	4642      	mov	r2, r8
 8014c76:	464b      	mov	r3, r9
 8014c78:	1891      	adds	r1, r2, r2
 8014c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8014c7c:	415b      	adcs	r3, r3
 8014c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014c84:	4641      	mov	r1, r8
 8014c86:	1851      	adds	r1, r2, r1
 8014c88:	6339      	str	r1, [r7, #48]	; 0x30
 8014c8a:	4649      	mov	r1, r9
 8014c8c:	414b      	adcs	r3, r1
 8014c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8014c90:	f04f 0200 	mov.w	r2, #0
 8014c94:	f04f 0300 	mov.w	r3, #0
 8014c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8014c9c:	4659      	mov	r1, fp
 8014c9e:	00cb      	lsls	r3, r1, #3
 8014ca0:	4651      	mov	r1, sl
 8014ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014ca6:	4651      	mov	r1, sl
 8014ca8:	00ca      	lsls	r2, r1, #3
 8014caa:	4610      	mov	r0, r2
 8014cac:	4619      	mov	r1, r3
 8014cae:	4603      	mov	r3, r0
 8014cb0:	4642      	mov	r2, r8
 8014cb2:	189b      	adds	r3, r3, r2
 8014cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014cb8:	464b      	mov	r3, r9
 8014cba:	460a      	mov	r2, r1
 8014cbc:	eb42 0303 	adc.w	r3, r2, r3
 8014cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8014cd8:	460b      	mov	r3, r1
 8014cda:	18db      	adds	r3, r3, r3
 8014cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8014cde:	4613      	mov	r3, r2
 8014ce0:	eb42 0303 	adc.w	r3, r2, r3
 8014ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8014cee:	f7eb fabf 	bl	8000270 <__aeabi_uldivmod>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	4b0d      	ldr	r3, [pc, #52]	; (8014d2c <UART_SetConfig+0x2d4>)
 8014cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8014cfc:	095b      	lsrs	r3, r3, #5
 8014cfe:	2164      	movs	r1, #100	; 0x64
 8014d00:	fb01 f303 	mul.w	r3, r1, r3
 8014d04:	1ad3      	subs	r3, r2, r3
 8014d06:	00db      	lsls	r3, r3, #3
 8014d08:	3332      	adds	r3, #50	; 0x32
 8014d0a:	4a08      	ldr	r2, [pc, #32]	; (8014d2c <UART_SetConfig+0x2d4>)
 8014d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8014d10:	095b      	lsrs	r3, r3, #5
 8014d12:	f003 0207 	and.w	r2, r3, #7
 8014d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4422      	add	r2, r4
 8014d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014d20:	e105      	b.n	8014f2e <UART_SetConfig+0x4d6>
 8014d22:	bf00      	nop
 8014d24:	40011000 	.word	0x40011000
 8014d28:	40011400 	.word	0x40011400
 8014d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d34:	2200      	movs	r2, #0
 8014d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8014d42:	4642      	mov	r2, r8
 8014d44:	464b      	mov	r3, r9
 8014d46:	1891      	adds	r1, r2, r2
 8014d48:	6239      	str	r1, [r7, #32]
 8014d4a:	415b      	adcs	r3, r3
 8014d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8014d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014d52:	4641      	mov	r1, r8
 8014d54:	1854      	adds	r4, r2, r1
 8014d56:	4649      	mov	r1, r9
 8014d58:	eb43 0501 	adc.w	r5, r3, r1
 8014d5c:	f04f 0200 	mov.w	r2, #0
 8014d60:	f04f 0300 	mov.w	r3, #0
 8014d64:	00eb      	lsls	r3, r5, #3
 8014d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014d6a:	00e2      	lsls	r2, r4, #3
 8014d6c:	4614      	mov	r4, r2
 8014d6e:	461d      	mov	r5, r3
 8014d70:	4643      	mov	r3, r8
 8014d72:	18e3      	adds	r3, r4, r3
 8014d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014d78:	464b      	mov	r3, r9
 8014d7a:	eb45 0303 	adc.w	r3, r5, r3
 8014d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014d92:	f04f 0200 	mov.w	r2, #0
 8014d96:	f04f 0300 	mov.w	r3, #0
 8014d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8014d9e:	4629      	mov	r1, r5
 8014da0:	008b      	lsls	r3, r1, #2
 8014da2:	4621      	mov	r1, r4
 8014da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014da8:	4621      	mov	r1, r4
 8014daa:	008a      	lsls	r2, r1, #2
 8014dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8014db0:	f7eb fa5e 	bl	8000270 <__aeabi_uldivmod>
 8014db4:	4602      	mov	r2, r0
 8014db6:	460b      	mov	r3, r1
 8014db8:	4b60      	ldr	r3, [pc, #384]	; (8014f3c <UART_SetConfig+0x4e4>)
 8014dba:	fba3 2302 	umull	r2, r3, r3, r2
 8014dbe:	095b      	lsrs	r3, r3, #5
 8014dc0:	011c      	lsls	r4, r3, #4
 8014dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8014dd4:	4642      	mov	r2, r8
 8014dd6:	464b      	mov	r3, r9
 8014dd8:	1891      	adds	r1, r2, r2
 8014dda:	61b9      	str	r1, [r7, #24]
 8014ddc:	415b      	adcs	r3, r3
 8014dde:	61fb      	str	r3, [r7, #28]
 8014de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014de4:	4641      	mov	r1, r8
 8014de6:	1851      	adds	r1, r2, r1
 8014de8:	6139      	str	r1, [r7, #16]
 8014dea:	4649      	mov	r1, r9
 8014dec:	414b      	adcs	r3, r1
 8014dee:	617b      	str	r3, [r7, #20]
 8014df0:	f04f 0200 	mov.w	r2, #0
 8014df4:	f04f 0300 	mov.w	r3, #0
 8014df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014dfc:	4659      	mov	r1, fp
 8014dfe:	00cb      	lsls	r3, r1, #3
 8014e00:	4651      	mov	r1, sl
 8014e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014e06:	4651      	mov	r1, sl
 8014e08:	00ca      	lsls	r2, r1, #3
 8014e0a:	4610      	mov	r0, r2
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	4603      	mov	r3, r0
 8014e10:	4642      	mov	r2, r8
 8014e12:	189b      	adds	r3, r3, r2
 8014e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014e18:	464b      	mov	r3, r9
 8014e1a:	460a      	mov	r2, r1
 8014e1c:	eb42 0303 	adc.w	r3, r2, r3
 8014e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8014e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014e30:	f04f 0200 	mov.w	r2, #0
 8014e34:	f04f 0300 	mov.w	r3, #0
 8014e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8014e3c:	4649      	mov	r1, r9
 8014e3e:	008b      	lsls	r3, r1, #2
 8014e40:	4641      	mov	r1, r8
 8014e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014e46:	4641      	mov	r1, r8
 8014e48:	008a      	lsls	r2, r1, #2
 8014e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014e4e:	f7eb fa0f 	bl	8000270 <__aeabi_uldivmod>
 8014e52:	4602      	mov	r2, r0
 8014e54:	460b      	mov	r3, r1
 8014e56:	4b39      	ldr	r3, [pc, #228]	; (8014f3c <UART_SetConfig+0x4e4>)
 8014e58:	fba3 1302 	umull	r1, r3, r3, r2
 8014e5c:	095b      	lsrs	r3, r3, #5
 8014e5e:	2164      	movs	r1, #100	; 0x64
 8014e60:	fb01 f303 	mul.w	r3, r1, r3
 8014e64:	1ad3      	subs	r3, r2, r3
 8014e66:	011b      	lsls	r3, r3, #4
 8014e68:	3332      	adds	r3, #50	; 0x32
 8014e6a:	4a34      	ldr	r2, [pc, #208]	; (8014f3c <UART_SetConfig+0x4e4>)
 8014e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e70:	095b      	lsrs	r3, r3, #5
 8014e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e76:	441c      	add	r4, r3
 8014e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8014e80:	677a      	str	r2, [r7, #116]	; 0x74
 8014e82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8014e86:	4642      	mov	r2, r8
 8014e88:	464b      	mov	r3, r9
 8014e8a:	1891      	adds	r1, r2, r2
 8014e8c:	60b9      	str	r1, [r7, #8]
 8014e8e:	415b      	adcs	r3, r3
 8014e90:	60fb      	str	r3, [r7, #12]
 8014e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014e96:	4641      	mov	r1, r8
 8014e98:	1851      	adds	r1, r2, r1
 8014e9a:	6039      	str	r1, [r7, #0]
 8014e9c:	4649      	mov	r1, r9
 8014e9e:	414b      	adcs	r3, r1
 8014ea0:	607b      	str	r3, [r7, #4]
 8014ea2:	f04f 0200 	mov.w	r2, #0
 8014ea6:	f04f 0300 	mov.w	r3, #0
 8014eaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014eae:	4659      	mov	r1, fp
 8014eb0:	00cb      	lsls	r3, r1, #3
 8014eb2:	4651      	mov	r1, sl
 8014eb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014eb8:	4651      	mov	r1, sl
 8014eba:	00ca      	lsls	r2, r1, #3
 8014ebc:	4610      	mov	r0, r2
 8014ebe:	4619      	mov	r1, r3
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	4642      	mov	r2, r8
 8014ec4:	189b      	adds	r3, r3, r2
 8014ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8014ec8:	464b      	mov	r3, r9
 8014eca:	460a      	mov	r2, r1
 8014ecc:	eb42 0303 	adc.w	r3, r2, r3
 8014ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	663b      	str	r3, [r7, #96]	; 0x60
 8014edc:	667a      	str	r2, [r7, #100]	; 0x64
 8014ede:	f04f 0200 	mov.w	r2, #0
 8014ee2:	f04f 0300 	mov.w	r3, #0
 8014ee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8014eea:	4649      	mov	r1, r9
 8014eec:	008b      	lsls	r3, r1, #2
 8014eee:	4641      	mov	r1, r8
 8014ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014ef4:	4641      	mov	r1, r8
 8014ef6:	008a      	lsls	r2, r1, #2
 8014ef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8014efc:	f7eb f9b8 	bl	8000270 <__aeabi_uldivmod>
 8014f00:	4602      	mov	r2, r0
 8014f02:	460b      	mov	r3, r1
 8014f04:	4b0d      	ldr	r3, [pc, #52]	; (8014f3c <UART_SetConfig+0x4e4>)
 8014f06:	fba3 1302 	umull	r1, r3, r3, r2
 8014f0a:	095b      	lsrs	r3, r3, #5
 8014f0c:	2164      	movs	r1, #100	; 0x64
 8014f0e:	fb01 f303 	mul.w	r3, r1, r3
 8014f12:	1ad3      	subs	r3, r2, r3
 8014f14:	011b      	lsls	r3, r3, #4
 8014f16:	3332      	adds	r3, #50	; 0x32
 8014f18:	4a08      	ldr	r2, [pc, #32]	; (8014f3c <UART_SetConfig+0x4e4>)
 8014f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8014f1e:	095b      	lsrs	r3, r3, #5
 8014f20:	f003 020f 	and.w	r2, r3, #15
 8014f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	4422      	add	r2, r4
 8014f2c:	609a      	str	r2, [r3, #8]
}
 8014f2e:	bf00      	nop
 8014f30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014f34:	46bd      	mov	sp, r7
 8014f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014f3a:	bf00      	nop
 8014f3c:	51eb851f 	.word	0x51eb851f

08014f40 <__NVIC_SetPriority>:
{
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	4603      	mov	r3, r0
 8014f48:	6039      	str	r1, [r7, #0]
 8014f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	db0a      	blt.n	8014f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	b2da      	uxtb	r2, r3
 8014f58:	490c      	ldr	r1, [pc, #48]	; (8014f8c <__NVIC_SetPriority+0x4c>)
 8014f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f5e:	0112      	lsls	r2, r2, #4
 8014f60:	b2d2      	uxtb	r2, r2
 8014f62:	440b      	add	r3, r1
 8014f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014f68:	e00a      	b.n	8014f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	b2da      	uxtb	r2, r3
 8014f6e:	4908      	ldr	r1, [pc, #32]	; (8014f90 <__NVIC_SetPriority+0x50>)
 8014f70:	79fb      	ldrb	r3, [r7, #7]
 8014f72:	f003 030f 	and.w	r3, r3, #15
 8014f76:	3b04      	subs	r3, #4
 8014f78:	0112      	lsls	r2, r2, #4
 8014f7a:	b2d2      	uxtb	r2, r2
 8014f7c:	440b      	add	r3, r1
 8014f7e:	761a      	strb	r2, [r3, #24]
}
 8014f80:	bf00      	nop
 8014f82:	370c      	adds	r7, #12
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr
 8014f8c:	e000e100 	.word	0xe000e100
 8014f90:	e000ed00 	.word	0xe000ed00

08014f94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014f94:	b580      	push	{r7, lr}
 8014f96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014f98:	4b05      	ldr	r3, [pc, #20]	; (8014fb0 <SysTick_Handler+0x1c>)
 8014f9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014f9c:	f002 feba 	bl	8017d14 <xTaskGetSchedulerState>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	2b01      	cmp	r3, #1
 8014fa4:	d001      	beq.n	8014faa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014fa6:	f003 fff7 	bl	8018f98 <xPortSysTickHandler>
  }
}
 8014faa:	bf00      	nop
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	e000e010 	.word	0xe000e010

08014fb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014fb8:	2100      	movs	r1, #0
 8014fba:	f06f 0004 	mvn.w	r0, #4
 8014fbe:	f7ff ffbf 	bl	8014f40 <__NVIC_SetPriority>
#endif
}
 8014fc2:	bf00      	nop
 8014fc4:	bd80      	pop	{r7, pc}
	...

08014fc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014fc8:	b480      	push	{r7}
 8014fca:	b083      	sub	sp, #12
 8014fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014fce:	f3ef 8305 	mrs	r3, IPSR
 8014fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8014fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d003      	beq.n	8014fe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014fda:	f06f 0305 	mvn.w	r3, #5
 8014fde:	607b      	str	r3, [r7, #4]
 8014fe0:	e00c      	b.n	8014ffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014fe2:	4b0a      	ldr	r3, [pc, #40]	; (801500c <osKernelInitialize+0x44>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d105      	bne.n	8014ff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014fea:	4b08      	ldr	r3, [pc, #32]	; (801500c <osKernelInitialize+0x44>)
 8014fec:	2201      	movs	r2, #1
 8014fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	607b      	str	r3, [r7, #4]
 8014ff4:	e002      	b.n	8014ffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8014ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014ffc:	687b      	ldr	r3, [r7, #4]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	370c      	adds	r7, #12
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	20003268 	.word	0x20003268

08015010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015016:	f3ef 8305 	mrs	r3, IPSR
 801501a:	603b      	str	r3, [r7, #0]
  return(result);
 801501c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801501e:	2b00      	cmp	r3, #0
 8015020:	d003      	beq.n	801502a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015022:	f06f 0305 	mvn.w	r3, #5
 8015026:	607b      	str	r3, [r7, #4]
 8015028:	e010      	b.n	801504c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801502a:	4b0b      	ldr	r3, [pc, #44]	; (8015058 <osKernelStart+0x48>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2b01      	cmp	r3, #1
 8015030:	d109      	bne.n	8015046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015032:	f7ff ffbf 	bl	8014fb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015036:	4b08      	ldr	r3, [pc, #32]	; (8015058 <osKernelStart+0x48>)
 8015038:	2202      	movs	r2, #2
 801503a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801503c:	f002 f9aa 	bl	8017394 <vTaskStartScheduler>
      stat = osOK;
 8015040:	2300      	movs	r3, #0
 8015042:	607b      	str	r3, [r7, #4]
 8015044:	e002      	b.n	801504c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015046:	f04f 33ff 	mov.w	r3, #4294967295
 801504a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801504c:	687b      	ldr	r3, [r7, #4]
}
 801504e:	4618      	mov	r0, r3
 8015050:	3708      	adds	r7, #8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	20003268 	.word	0x20003268

0801505c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801505c:	b580      	push	{r7, lr}
 801505e:	b08e      	sub	sp, #56	; 0x38
 8015060:	af04      	add	r7, sp, #16
 8015062:	60f8      	str	r0, [r7, #12]
 8015064:	60b9      	str	r1, [r7, #8]
 8015066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015068:	2300      	movs	r3, #0
 801506a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801506c:	f3ef 8305 	mrs	r3, IPSR
 8015070:	617b      	str	r3, [r7, #20]
  return(result);
 8015072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015074:	2b00      	cmp	r3, #0
 8015076:	d17e      	bne.n	8015176 <osThreadNew+0x11a>
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d07b      	beq.n	8015176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801507e:	2380      	movs	r3, #128	; 0x80
 8015080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015082:	2318      	movs	r3, #24
 8015084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015086:	2300      	movs	r3, #0
 8015088:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801508a:	f04f 33ff 	mov.w	r3, #4294967295
 801508e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d045      	beq.n	8015122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d002      	beq.n	80150a4 <osThreadNew+0x48>
        name = attr->name;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	699b      	ldr	r3, [r3, #24]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d002      	beq.n	80150b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	699b      	ldr	r3, [r3, #24]
 80150b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80150b2:	69fb      	ldr	r3, [r7, #28]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d008      	beq.n	80150ca <osThreadNew+0x6e>
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	2b38      	cmp	r3, #56	; 0x38
 80150bc:	d805      	bhi.n	80150ca <osThreadNew+0x6e>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	f003 0301 	and.w	r3, r3, #1
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d001      	beq.n	80150ce <osThreadNew+0x72>
        return (NULL);
 80150ca:	2300      	movs	r3, #0
 80150cc:	e054      	b.n	8015178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d003      	beq.n	80150de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	695b      	ldr	r3, [r3, #20]
 80150da:	089b      	lsrs	r3, r3, #2
 80150dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	689b      	ldr	r3, [r3, #8]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d00e      	beq.n	8015104 <osThreadNew+0xa8>
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	2bc3      	cmp	r3, #195	; 0xc3
 80150ec:	d90a      	bls.n	8015104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d006      	beq.n	8015104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	695b      	ldr	r3, [r3, #20]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d002      	beq.n	8015104 <osThreadNew+0xa8>
        mem = 1;
 80150fe:	2301      	movs	r3, #1
 8015100:	61bb      	str	r3, [r7, #24]
 8015102:	e010      	b.n	8015126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d10c      	bne.n	8015126 <osThreadNew+0xca>
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	68db      	ldr	r3, [r3, #12]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d108      	bne.n	8015126 <osThreadNew+0xca>
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d104      	bne.n	8015126 <osThreadNew+0xca>
          mem = 0;
 801511c:	2300      	movs	r3, #0
 801511e:	61bb      	str	r3, [r7, #24]
 8015120:	e001      	b.n	8015126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015122:	2300      	movs	r3, #0
 8015124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	2b01      	cmp	r3, #1
 801512a:	d110      	bne.n	801514e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015134:	9202      	str	r2, [sp, #8]
 8015136:	9301      	str	r3, [sp, #4]
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	9300      	str	r3, [sp, #0]
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	6a3a      	ldr	r2, [r7, #32]
 8015140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015142:	68f8      	ldr	r0, [r7, #12]
 8015144:	f001 fe8e 	bl	8016e64 <xTaskCreateStatic>
 8015148:	4603      	mov	r3, r0
 801514a:	613b      	str	r3, [r7, #16]
 801514c:	e013      	b.n	8015176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d110      	bne.n	8015176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	b29a      	uxth	r2, r3
 8015158:	f107 0310 	add.w	r3, r7, #16
 801515c:	9301      	str	r3, [sp, #4]
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f001 fed9 	bl	8016f1e <xTaskCreate>
 801516c:	4603      	mov	r3, r0
 801516e:	2b01      	cmp	r3, #1
 8015170:	d001      	beq.n	8015176 <osThreadNew+0x11a>
            hTask = NULL;
 8015172:	2300      	movs	r3, #0
 8015174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015176:	693b      	ldr	r3, [r7, #16]
}
 8015178:	4618      	mov	r0, r3
 801517a:	3728      	adds	r7, #40	; 0x28
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8015180:	b580      	push	{r7, lr}
 8015182:	b086      	sub	sp, #24
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801518e:	f3ef 8305 	mrs	r3, IPSR
 8015192:	60fb      	str	r3, [r7, #12]
  return(result);
 8015194:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015196:	2b00      	cmp	r3, #0
 8015198:	d003      	beq.n	80151a2 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 801519a:	f06f 0305 	mvn.w	r3, #5
 801519e:	617b      	str	r3, [r7, #20]
 80151a0:	e013      	b.n	80151ca <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d005      	beq.n	80151b4 <osThreadSetPriority+0x34>
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	dd02      	ble.n	80151b4 <osThreadSetPriority+0x34>
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	2b38      	cmp	r3, #56	; 0x38
 80151b2:	dd03      	ble.n	80151bc <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 80151b4:	f06f 0303 	mvn.w	r3, #3
 80151b8:	617b      	str	r3, [r7, #20]
 80151ba:	e006      	b.n	80151ca <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 80151bc:	2300      	movs	r3, #0
 80151be:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	4619      	mov	r1, r3
 80151c4:	6938      	ldr	r0, [r7, #16]
 80151c6:	f002 f847 	bl	8017258 <vTaskPrioritySet>
  }

  return (stat);
 80151ca:	697b      	ldr	r3, [r7, #20]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80151dc:	f3ef 8305 	mrs	r3, IPSR
 80151e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80151e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d003      	beq.n	80151f0 <osDelay+0x1c>
    stat = osErrorISR;
 80151e8:	f06f 0305 	mvn.w	r3, #5
 80151ec:	60fb      	str	r3, [r7, #12]
 80151ee:	e007      	b.n	8015200 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d002      	beq.n	8015200 <osDelay+0x2c>
      vTaskDelay(ticks);
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f001 fff8 	bl	80171f0 <vTaskDelay>
    }
  }

  return (stat);
 8015200:	68fb      	ldr	r3, [r7, #12]
}
 8015202:	4618      	mov	r0, r3
 8015204:	3710      	adds	r7, #16
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}

0801520a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801520a:	b580      	push	{r7, lr}
 801520c:	b088      	sub	sp, #32
 801520e:	af00      	add	r7, sp, #0
 8015210:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015212:	2300      	movs	r3, #0
 8015214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015216:	f3ef 8305 	mrs	r3, IPSR
 801521a:	60bb      	str	r3, [r7, #8]
  return(result);
 801521c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801521e:	2b00      	cmp	r3, #0
 8015220:	d174      	bne.n	801530c <osMutexNew+0x102>
    if (attr != NULL) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d003      	beq.n	8015230 <osMutexNew+0x26>
      type = attr->attr_bits;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	61bb      	str	r3, [r7, #24]
 801522e:	e001      	b.n	8015234 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8015230:	2300      	movs	r3, #0
 8015232:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	f003 0301 	and.w	r3, r3, #1
 801523a:	2b00      	cmp	r3, #0
 801523c:	d002      	beq.n	8015244 <osMutexNew+0x3a>
      rmtx = 1U;
 801523e:	2301      	movs	r3, #1
 8015240:	617b      	str	r3, [r7, #20]
 8015242:	e001      	b.n	8015248 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015244:	2300      	movs	r3, #0
 8015246:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	f003 0308 	and.w	r3, r3, #8
 801524e:	2b00      	cmp	r3, #0
 8015250:	d15c      	bne.n	801530c <osMutexNew+0x102>
      mem = -1;
 8015252:	f04f 33ff 	mov.w	r3, #4294967295
 8015256:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d015      	beq.n	801528a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	689b      	ldr	r3, [r3, #8]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d006      	beq.n	8015274 <osMutexNew+0x6a>
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	68db      	ldr	r3, [r3, #12]
 801526a:	2b4f      	cmp	r3, #79	; 0x4f
 801526c:	d902      	bls.n	8015274 <osMutexNew+0x6a>
          mem = 1;
 801526e:	2301      	movs	r3, #1
 8015270:	613b      	str	r3, [r7, #16]
 8015272:	e00c      	b.n	801528e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	689b      	ldr	r3, [r3, #8]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d108      	bne.n	801528e <osMutexNew+0x84>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d104      	bne.n	801528e <osMutexNew+0x84>
            mem = 0;
 8015284:	2300      	movs	r3, #0
 8015286:	613b      	str	r3, [r7, #16]
 8015288:	e001      	b.n	801528e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801528a:	2300      	movs	r3, #0
 801528c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	2b01      	cmp	r3, #1
 8015292:	d112      	bne.n	80152ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d007      	beq.n	80152aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	689b      	ldr	r3, [r3, #8]
 801529e:	4619      	mov	r1, r3
 80152a0:	2004      	movs	r0, #4
 80152a2:	f000 fc48 	bl	8015b36 <xQueueCreateMutexStatic>
 80152a6:	61f8      	str	r0, [r7, #28]
 80152a8:	e016      	b.n	80152d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	689b      	ldr	r3, [r3, #8]
 80152ae:	4619      	mov	r1, r3
 80152b0:	2001      	movs	r0, #1
 80152b2:	f000 fc40 	bl	8015b36 <xQueueCreateMutexStatic>
 80152b6:	61f8      	str	r0, [r7, #28]
 80152b8:	e00e      	b.n	80152d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d10b      	bne.n	80152d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d004      	beq.n	80152d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80152c6:	2004      	movs	r0, #4
 80152c8:	f000 fc1d 	bl	8015b06 <xQueueCreateMutex>
 80152cc:	61f8      	str	r0, [r7, #28]
 80152ce:	e003      	b.n	80152d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80152d0:	2001      	movs	r0, #1
 80152d2:	f000 fc18 	bl	8015b06 <xQueueCreateMutex>
 80152d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d00c      	beq.n	80152f8 <osMutexNew+0xee>
        if (attr != NULL) {
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d003      	beq.n	80152ec <osMutexNew+0xe2>
          name = attr->name;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	60fb      	str	r3, [r7, #12]
 80152ea:	e001      	b.n	80152f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80152ec:	2300      	movs	r3, #0
 80152ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80152f0:	68f9      	ldr	r1, [r7, #12]
 80152f2:	69f8      	ldr	r0, [r7, #28]
 80152f4:	f001 f9d2 	bl	801669c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80152f8:	69fb      	ldr	r3, [r7, #28]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d006      	beq.n	801530c <osMutexNew+0x102>
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d003      	beq.n	801530c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	f043 0301 	orr.w	r3, r3, #1
 801530a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801530c:	69fb      	ldr	r3, [r7, #28]
}
 801530e:	4618      	mov	r0, r3
 8015310:	3720      	adds	r7, #32
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015316:	b580      	push	{r7, lr}
 8015318:	b086      	sub	sp, #24
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
 801531e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f023 0301 	bic.w	r3, r3, #1
 8015326:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f003 0301 	and.w	r3, r3, #1
 801532e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015330:	2300      	movs	r3, #0
 8015332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015334:	f3ef 8305 	mrs	r3, IPSR
 8015338:	60bb      	str	r3, [r7, #8]
  return(result);
 801533a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801533c:	2b00      	cmp	r3, #0
 801533e:	d003      	beq.n	8015348 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015340:	f06f 0305 	mvn.w	r3, #5
 8015344:	617b      	str	r3, [r7, #20]
 8015346:	e02c      	b.n	80153a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d103      	bne.n	8015356 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801534e:	f06f 0303 	mvn.w	r3, #3
 8015352:	617b      	str	r3, [r7, #20]
 8015354:	e025      	b.n	80153a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d011      	beq.n	8015380 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801535c:	6839      	ldr	r1, [r7, #0]
 801535e:	6938      	ldr	r0, [r7, #16]
 8015360:	f000 fc38 	bl	8015bd4 <xQueueTakeMutexRecursive>
 8015364:	4603      	mov	r3, r0
 8015366:	2b01      	cmp	r3, #1
 8015368:	d01b      	beq.n	80153a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d003      	beq.n	8015378 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015370:	f06f 0301 	mvn.w	r3, #1
 8015374:	617b      	str	r3, [r7, #20]
 8015376:	e014      	b.n	80153a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015378:	f06f 0302 	mvn.w	r3, #2
 801537c:	617b      	str	r3, [r7, #20]
 801537e:	e010      	b.n	80153a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015380:	6839      	ldr	r1, [r7, #0]
 8015382:	6938      	ldr	r0, [r7, #16]
 8015384:	f000 fed6 	bl	8016134 <xQueueSemaphoreTake>
 8015388:	4603      	mov	r3, r0
 801538a:	2b01      	cmp	r3, #1
 801538c:	d009      	beq.n	80153a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d003      	beq.n	801539c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015394:	f06f 0301 	mvn.w	r3, #1
 8015398:	617b      	str	r3, [r7, #20]
 801539a:	e002      	b.n	80153a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801539c:	f06f 0302 	mvn.w	r3, #2
 80153a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80153a2:	697b      	ldr	r3, [r7, #20]
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3718      	adds	r7, #24
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b086      	sub	sp, #24
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f023 0301 	bic.w	r3, r3, #1
 80153ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f003 0301 	and.w	r3, r3, #1
 80153c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80153c4:	2300      	movs	r3, #0
 80153c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80153c8:	f3ef 8305 	mrs	r3, IPSR
 80153cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80153ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d003      	beq.n	80153dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80153d4:	f06f 0305 	mvn.w	r3, #5
 80153d8:	617b      	str	r3, [r7, #20]
 80153da:	e01f      	b.n	801541c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d103      	bne.n	80153ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80153e2:	f06f 0303 	mvn.w	r3, #3
 80153e6:	617b      	str	r3, [r7, #20]
 80153e8:	e018      	b.n	801541c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d009      	beq.n	8015404 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80153f0:	6938      	ldr	r0, [r7, #16]
 80153f2:	f000 fbbb 	bl	8015b6c <xQueueGiveMutexRecursive>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b01      	cmp	r3, #1
 80153fa:	d00f      	beq.n	801541c <osMutexRelease+0x70>
        stat = osErrorResource;
 80153fc:	f06f 0302 	mvn.w	r3, #2
 8015400:	617b      	str	r3, [r7, #20]
 8015402:	e00b      	b.n	801541c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015404:	2300      	movs	r3, #0
 8015406:	2200      	movs	r2, #0
 8015408:	2100      	movs	r1, #0
 801540a:	6938      	ldr	r0, [r7, #16]
 801540c:	f000 fc18 	bl	8015c40 <xQueueGenericSend>
 8015410:	4603      	mov	r3, r0
 8015412:	2b01      	cmp	r3, #1
 8015414:	d002      	beq.n	801541c <osMutexRelease+0x70>
        stat = osErrorResource;
 8015416:	f06f 0302 	mvn.w	r3, #2
 801541a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801541c:	697b      	ldr	r3, [r7, #20]
}
 801541e:	4618      	mov	r0, r3
 8015420:	3718      	adds	r7, #24
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}

08015426 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015426:	b580      	push	{r7, lr}
 8015428:	b08a      	sub	sp, #40	; 0x28
 801542a:	af02      	add	r7, sp, #8
 801542c:	60f8      	str	r0, [r7, #12]
 801542e:	60b9      	str	r1, [r7, #8]
 8015430:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015432:	2300      	movs	r3, #0
 8015434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015436:	f3ef 8305 	mrs	r3, IPSR
 801543a:	613b      	str	r3, [r7, #16]
  return(result);
 801543c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801543e:	2b00      	cmp	r3, #0
 8015440:	d15f      	bne.n	8015502 <osMessageQueueNew+0xdc>
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d05c      	beq.n	8015502 <osMessageQueueNew+0xdc>
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d059      	beq.n	8015502 <osMessageQueueNew+0xdc>
    mem = -1;
 801544e:	f04f 33ff 	mov.w	r3, #4294967295
 8015452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d029      	beq.n	80154ae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	689b      	ldr	r3, [r3, #8]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d012      	beq.n	8015488 <osMessageQueueNew+0x62>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	2b4f      	cmp	r3, #79	; 0x4f
 8015468:	d90e      	bls.n	8015488 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801546e:	2b00      	cmp	r3, #0
 8015470:	d00a      	beq.n	8015488 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	695a      	ldr	r2, [r3, #20]
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	68b9      	ldr	r1, [r7, #8]
 801547a:	fb01 f303 	mul.w	r3, r1, r3
 801547e:	429a      	cmp	r2, r3
 8015480:	d302      	bcc.n	8015488 <osMessageQueueNew+0x62>
        mem = 1;
 8015482:	2301      	movs	r3, #1
 8015484:	61bb      	str	r3, [r7, #24]
 8015486:	e014      	b.n	80154b2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	689b      	ldr	r3, [r3, #8]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d110      	bne.n	80154b2 <osMessageQueueNew+0x8c>
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d10c      	bne.n	80154b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801549c:	2b00      	cmp	r3, #0
 801549e:	d108      	bne.n	80154b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	695b      	ldr	r3, [r3, #20]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d104      	bne.n	80154b2 <osMessageQueueNew+0x8c>
          mem = 0;
 80154a8:	2300      	movs	r3, #0
 80154aa:	61bb      	str	r3, [r7, #24]
 80154ac:	e001      	b.n	80154b2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80154ae:	2300      	movs	r3, #0
 80154b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80154b2:	69bb      	ldr	r3, [r7, #24]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d10b      	bne.n	80154d0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	691a      	ldr	r2, [r3, #16]
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	689b      	ldr	r3, [r3, #8]
 80154c0:	2100      	movs	r1, #0
 80154c2:	9100      	str	r1, [sp, #0]
 80154c4:	68b9      	ldr	r1, [r7, #8]
 80154c6:	68f8      	ldr	r0, [r7, #12]
 80154c8:	f000 fa2e 	bl	8015928 <xQueueGenericCreateStatic>
 80154cc:	61f8      	str	r0, [r7, #28]
 80154ce:	e008      	b.n	80154e2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d105      	bne.n	80154e2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80154d6:	2200      	movs	r2, #0
 80154d8:	68b9      	ldr	r1, [r7, #8]
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f000 fa9c 	bl	8015a18 <xQueueGenericCreate>
 80154e0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80154e2:	69fb      	ldr	r3, [r7, #28]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d00c      	beq.n	8015502 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d003      	beq.n	80154f6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	617b      	str	r3, [r7, #20]
 80154f4:	e001      	b.n	80154fa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80154f6:	2300      	movs	r3, #0
 80154f8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80154fa:	6979      	ldr	r1, [r7, #20]
 80154fc:	69f8      	ldr	r0, [r7, #28]
 80154fe:	f001 f8cd 	bl	801669c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015502:	69fb      	ldr	r3, [r7, #28]
}
 8015504:	4618      	mov	r0, r3
 8015506:	3720      	adds	r7, #32
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801550c:	b580      	push	{r7, lr}
 801550e:	b088      	sub	sp, #32
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	603b      	str	r3, [r7, #0]
 8015518:	4613      	mov	r3, r2
 801551a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015520:	2300      	movs	r3, #0
 8015522:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015524:	f3ef 8305 	mrs	r3, IPSR
 8015528:	617b      	str	r3, [r7, #20]
  return(result);
 801552a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801552c:	2b00      	cmp	r3, #0
 801552e:	d028      	beq.n	8015582 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d005      	beq.n	8015542 <osMessageQueuePut+0x36>
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d002      	beq.n	8015542 <osMessageQueuePut+0x36>
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d003      	beq.n	801554a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015542:	f06f 0303 	mvn.w	r3, #3
 8015546:	61fb      	str	r3, [r7, #28]
 8015548:	e038      	b.n	80155bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801554a:	2300      	movs	r3, #0
 801554c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801554e:	f107 0210 	add.w	r2, r7, #16
 8015552:	2300      	movs	r3, #0
 8015554:	68b9      	ldr	r1, [r7, #8]
 8015556:	69b8      	ldr	r0, [r7, #24]
 8015558:	f000 fc70 	bl	8015e3c <xQueueGenericSendFromISR>
 801555c:	4603      	mov	r3, r0
 801555e:	2b01      	cmp	r3, #1
 8015560:	d003      	beq.n	801556a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015562:	f06f 0302 	mvn.w	r3, #2
 8015566:	61fb      	str	r3, [r7, #28]
 8015568:	e028      	b.n	80155bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d025      	beq.n	80155bc <osMessageQueuePut+0xb0>
 8015570:	4b15      	ldr	r3, [pc, #84]	; (80155c8 <osMessageQueuePut+0xbc>)
 8015572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015576:	601a      	str	r2, [r3, #0]
 8015578:	f3bf 8f4f 	dsb	sy
 801557c:	f3bf 8f6f 	isb	sy
 8015580:	e01c      	b.n	80155bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d002      	beq.n	801558e <osMessageQueuePut+0x82>
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d103      	bne.n	8015596 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801558e:	f06f 0303 	mvn.w	r3, #3
 8015592:	61fb      	str	r3, [r7, #28]
 8015594:	e012      	b.n	80155bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015596:	2300      	movs	r3, #0
 8015598:	683a      	ldr	r2, [r7, #0]
 801559a:	68b9      	ldr	r1, [r7, #8]
 801559c:	69b8      	ldr	r0, [r7, #24]
 801559e:	f000 fb4f 	bl	8015c40 <xQueueGenericSend>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d009      	beq.n	80155bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d003      	beq.n	80155b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80155ae:	f06f 0301 	mvn.w	r3, #1
 80155b2:	61fb      	str	r3, [r7, #28]
 80155b4:	e002      	b.n	80155bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80155b6:	f06f 0302 	mvn.w	r3, #2
 80155ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80155bc:	69fb      	ldr	r3, [r7, #28]
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3720      	adds	r7, #32
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	e000ed04 	.word	0xe000ed04

080155cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80155de:	2300      	movs	r3, #0
 80155e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155e2:	f3ef 8305 	mrs	r3, IPSR
 80155e6:	617b      	str	r3, [r7, #20]
  return(result);
 80155e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d028      	beq.n	8015640 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d005      	beq.n	8015600 <osMessageQueueGet+0x34>
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d002      	beq.n	8015600 <osMessageQueueGet+0x34>
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d003      	beq.n	8015608 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015600:	f06f 0303 	mvn.w	r3, #3
 8015604:	61fb      	str	r3, [r7, #28]
 8015606:	e037      	b.n	8015678 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015608:	2300      	movs	r3, #0
 801560a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801560c:	f107 0310 	add.w	r3, r7, #16
 8015610:	461a      	mov	r2, r3
 8015612:	68b9      	ldr	r1, [r7, #8]
 8015614:	69b8      	ldr	r0, [r7, #24]
 8015616:	f000 fe99 	bl	801634c <xQueueReceiveFromISR>
 801561a:	4603      	mov	r3, r0
 801561c:	2b01      	cmp	r3, #1
 801561e:	d003      	beq.n	8015628 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015620:	f06f 0302 	mvn.w	r3, #2
 8015624:	61fb      	str	r3, [r7, #28]
 8015626:	e027      	b.n	8015678 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d024      	beq.n	8015678 <osMessageQueueGet+0xac>
 801562e:	4b15      	ldr	r3, [pc, #84]	; (8015684 <osMessageQueueGet+0xb8>)
 8015630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015634:	601a      	str	r2, [r3, #0]
 8015636:	f3bf 8f4f 	dsb	sy
 801563a:	f3bf 8f6f 	isb	sy
 801563e:	e01b      	b.n	8015678 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d002      	beq.n	801564c <osMessageQueueGet+0x80>
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d103      	bne.n	8015654 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801564c:	f06f 0303 	mvn.w	r3, #3
 8015650:	61fb      	str	r3, [r7, #28]
 8015652:	e011      	b.n	8015678 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015654:	683a      	ldr	r2, [r7, #0]
 8015656:	68b9      	ldr	r1, [r7, #8]
 8015658:	69b8      	ldr	r0, [r7, #24]
 801565a:	f000 fc8b 	bl	8015f74 <xQueueReceive>
 801565e:	4603      	mov	r3, r0
 8015660:	2b01      	cmp	r3, #1
 8015662:	d009      	beq.n	8015678 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d003      	beq.n	8015672 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801566a:	f06f 0301 	mvn.w	r3, #1
 801566e:	61fb      	str	r3, [r7, #28]
 8015670:	e002      	b.n	8015678 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015672:	f06f 0302 	mvn.w	r3, #2
 8015676:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015678:	69fb      	ldr	r3, [r7, #28]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3720      	adds	r7, #32
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
 8015682:	bf00      	nop
 8015684:	e000ed04 	.word	0xe000ed04

08015688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015688:	b480      	push	{r7}
 801568a:	b085      	sub	sp, #20
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	4a07      	ldr	r2, [pc, #28]	; (80156b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8015698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	4a06      	ldr	r2, [pc, #24]	; (80156b8 <vApplicationGetIdleTaskMemory+0x30>)
 801569e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2280      	movs	r2, #128	; 0x80
 80156a4:	601a      	str	r2, [r3, #0]
}
 80156a6:	bf00      	nop
 80156a8:	3714      	adds	r7, #20
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr
 80156b2:	bf00      	nop
 80156b4:	2000326c 	.word	0x2000326c
 80156b8:	20003330 	.word	0x20003330

080156bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80156bc:	b480      	push	{r7}
 80156be:	b085      	sub	sp, #20
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	4a07      	ldr	r2, [pc, #28]	; (80156e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80156cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	4a06      	ldr	r2, [pc, #24]	; (80156ec <vApplicationGetTimerTaskMemory+0x30>)
 80156d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80156da:	601a      	str	r2, [r3, #0]
}
 80156dc:	bf00      	nop
 80156de:	3714      	adds	r7, #20
 80156e0:	46bd      	mov	sp, r7
 80156e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e6:	4770      	bx	lr
 80156e8:	20003530 	.word	0x20003530
 80156ec:	200035f4 	.word	0x200035f4

080156f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80156f0:	b480      	push	{r7}
 80156f2:	b083      	sub	sp, #12
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f103 0208 	add.w	r2, r3, #8
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f04f 32ff 	mov.w	r2, #4294967295
 8015708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f103 0208 	add.w	r2, r3, #8
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f103 0208 	add.w	r2, r3, #8
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2200      	movs	r2, #0
 8015722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015724:	bf00      	nop
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr

08015730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015730:	b480      	push	{r7}
 8015732:	b083      	sub	sp, #12
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801573e:	bf00      	nop
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr

0801574a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801574a:	b480      	push	{r7}
 801574c:	b085      	sub	sp, #20
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
 8015752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	689a      	ldr	r2, [r3, #8]
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	689b      	ldr	r3, [r3, #8]
 801576c:	683a      	ldr	r2, [r7, #0]
 801576e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	683a      	ldr	r2, [r7, #0]
 8015774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	687a      	ldr	r2, [r7, #4]
 801577a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	1c5a      	adds	r2, r3, #1
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	601a      	str	r2, [r3, #0]
}
 8015786:	bf00      	nop
 8015788:	3714      	adds	r7, #20
 801578a:	46bd      	mov	sp, r7
 801578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015790:	4770      	bx	lr

08015792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015792:	b480      	push	{r7}
 8015794:	b085      	sub	sp, #20
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
 801579a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157a8:	d103      	bne.n	80157b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	691b      	ldr	r3, [r3, #16]
 80157ae:	60fb      	str	r3, [r7, #12]
 80157b0:	e00c      	b.n	80157cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	3308      	adds	r3, #8
 80157b6:	60fb      	str	r3, [r7, #12]
 80157b8:	e002      	b.n	80157c0 <vListInsert+0x2e>
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	685b      	ldr	r3, [r3, #4]
 80157be:	60fb      	str	r3, [r7, #12]
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	685b      	ldr	r3, [r3, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	68ba      	ldr	r2, [r7, #8]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d2f6      	bcs.n	80157ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	685a      	ldr	r2, [r3, #4]
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	68fa      	ldr	r2, [r7, #12]
 80157e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	683a      	ldr	r2, [r7, #0]
 80157e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	687a      	ldr	r2, [r7, #4]
 80157ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	1c5a      	adds	r2, r3, #1
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	601a      	str	r2, [r3, #0]
}
 80157f8:	bf00      	nop
 80157fa:	3714      	adds	r7, #20
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015804:	b480      	push	{r7}
 8015806:	b085      	sub	sp, #20
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	691b      	ldr	r3, [r3, #16]
 8015810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	685b      	ldr	r3, [r3, #4]
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	6892      	ldr	r2, [r2, #8]
 801581a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	689b      	ldr	r3, [r3, #8]
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	6852      	ldr	r2, [r2, #4]
 8015824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	687a      	ldr	r2, [r7, #4]
 801582c:	429a      	cmp	r2, r3
 801582e:	d103      	bne.n	8015838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	689a      	ldr	r2, [r3, #8]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2200      	movs	r2, #0
 801583c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	1e5a      	subs	r2, r3, #1
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	681b      	ldr	r3, [r3, #0]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3714      	adds	r7, #20
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr

08015858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d10a      	bne.n	8015882 <xQueueGenericReset+0x2a>
	__asm volatile
 801586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015870:	f383 8811 	msr	BASEPRI, r3
 8015874:	f3bf 8f6f 	isb	sy
 8015878:	f3bf 8f4f 	dsb	sy
 801587c:	60bb      	str	r3, [r7, #8]
}
 801587e:	bf00      	nop
 8015880:	e7fe      	b.n	8015880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015882:	f003 faf7 	bl	8018e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801588e:	68f9      	ldr	r1, [r7, #12]
 8015890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015892:	fb01 f303 	mul.w	r3, r1, r3
 8015896:	441a      	add	r2, r3
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2200      	movs	r2, #0
 80158a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158b2:	3b01      	subs	r3, #1
 80158b4:	68f9      	ldr	r1, [r7, #12]
 80158b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80158b8:	fb01 f303 	mul.w	r3, r1, r3
 80158bc:	441a      	add	r2, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	22ff      	movs	r2, #255	; 0xff
 80158c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	22ff      	movs	r2, #255	; 0xff
 80158ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d114      	bne.n	8015902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	691b      	ldr	r3, [r3, #16]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d01a      	beq.n	8015916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	3310      	adds	r3, #16
 80158e4:	4618      	mov	r0, r3
 80158e6:	f002 f81d 	bl	8017924 <xTaskRemoveFromEventList>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d012      	beq.n	8015916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80158f0:	4b0c      	ldr	r3, [pc, #48]	; (8015924 <xQueueGenericReset+0xcc>)
 80158f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158f6:	601a      	str	r2, [r3, #0]
 80158f8:	f3bf 8f4f 	dsb	sy
 80158fc:	f3bf 8f6f 	isb	sy
 8015900:	e009      	b.n	8015916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	3310      	adds	r3, #16
 8015906:	4618      	mov	r0, r3
 8015908:	f7ff fef2 	bl	80156f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	3324      	adds	r3, #36	; 0x24
 8015910:	4618      	mov	r0, r3
 8015912:	f7ff feed 	bl	80156f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015916:	f003 fadd 	bl	8018ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801591a:	2301      	movs	r3, #1
}
 801591c:	4618      	mov	r0, r3
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}
 8015924:	e000ed04 	.word	0xe000ed04

08015928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015928:	b580      	push	{r7, lr}
 801592a:	b08e      	sub	sp, #56	; 0x38
 801592c:	af02      	add	r7, sp, #8
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
 8015934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d10a      	bne.n	8015952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015940:	f383 8811 	msr	BASEPRI, r3
 8015944:	f3bf 8f6f 	isb	sy
 8015948:	f3bf 8f4f 	dsb	sy
 801594c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801594e:	bf00      	nop
 8015950:	e7fe      	b.n	8015950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d10a      	bne.n	801596e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801595c:	f383 8811 	msr	BASEPRI, r3
 8015960:	f3bf 8f6f 	isb	sy
 8015964:	f3bf 8f4f 	dsb	sy
 8015968:	627b      	str	r3, [r7, #36]	; 0x24
}
 801596a:	bf00      	nop
 801596c:	e7fe      	b.n	801596c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d002      	beq.n	801597a <xQueueGenericCreateStatic+0x52>
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d001      	beq.n	801597e <xQueueGenericCreateStatic+0x56>
 801597a:	2301      	movs	r3, #1
 801597c:	e000      	b.n	8015980 <xQueueGenericCreateStatic+0x58>
 801597e:	2300      	movs	r3, #0
 8015980:	2b00      	cmp	r3, #0
 8015982:	d10a      	bne.n	801599a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015988:	f383 8811 	msr	BASEPRI, r3
 801598c:	f3bf 8f6f 	isb	sy
 8015990:	f3bf 8f4f 	dsb	sy
 8015994:	623b      	str	r3, [r7, #32]
}
 8015996:	bf00      	nop
 8015998:	e7fe      	b.n	8015998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d102      	bne.n	80159a6 <xQueueGenericCreateStatic+0x7e>
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d101      	bne.n	80159aa <xQueueGenericCreateStatic+0x82>
 80159a6:	2301      	movs	r3, #1
 80159a8:	e000      	b.n	80159ac <xQueueGenericCreateStatic+0x84>
 80159aa:	2300      	movs	r3, #0
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d10a      	bne.n	80159c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80159b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159b4:	f383 8811 	msr	BASEPRI, r3
 80159b8:	f3bf 8f6f 	isb	sy
 80159bc:	f3bf 8f4f 	dsb	sy
 80159c0:	61fb      	str	r3, [r7, #28]
}
 80159c2:	bf00      	nop
 80159c4:	e7fe      	b.n	80159c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80159c6:	2350      	movs	r3, #80	; 0x50
 80159c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	2b50      	cmp	r3, #80	; 0x50
 80159ce:	d00a      	beq.n	80159e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80159d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d4:	f383 8811 	msr	BASEPRI, r3
 80159d8:	f3bf 8f6f 	isb	sy
 80159dc:	f3bf 8f4f 	dsb	sy
 80159e0:	61bb      	str	r3, [r7, #24]
}
 80159e2:	bf00      	nop
 80159e4:	e7fe      	b.n	80159e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80159e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80159ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00d      	beq.n	8015a0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80159f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f4:	2201      	movs	r2, #1
 80159f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80159fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	9300      	str	r3, [sp, #0]
 8015a02:	4613      	mov	r3, r2
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	68b9      	ldr	r1, [r7, #8]
 8015a08:	68f8      	ldr	r0, [r7, #12]
 8015a0a:	f000 f83f 	bl	8015a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3730      	adds	r7, #48	; 0x30
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b08a      	sub	sp, #40	; 0x28
 8015a1c:	af02      	add	r7, sp, #8
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	4613      	mov	r3, r2
 8015a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d10a      	bne.n	8015a42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a30:	f383 8811 	msr	BASEPRI, r3
 8015a34:	f3bf 8f6f 	isb	sy
 8015a38:	f3bf 8f4f 	dsb	sy
 8015a3c:	613b      	str	r3, [r7, #16]
}
 8015a3e:	bf00      	nop
 8015a40:	e7fe      	b.n	8015a40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	68ba      	ldr	r2, [r7, #8]
 8015a46:	fb02 f303 	mul.w	r3, r2, r3
 8015a4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	3350      	adds	r3, #80	; 0x50
 8015a50:	4618      	mov	r0, r3
 8015a52:	f003 fb31 	bl	80190b8 <pvPortMalloc>
 8015a56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d011      	beq.n	8015a82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	3350      	adds	r3, #80	; 0x50
 8015a66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a68:	69bb      	ldr	r3, [r7, #24]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a70:	79fa      	ldrb	r2, [r7, #7]
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	9300      	str	r3, [sp, #0]
 8015a76:	4613      	mov	r3, r2
 8015a78:	697a      	ldr	r2, [r7, #20]
 8015a7a:	68b9      	ldr	r1, [r7, #8]
 8015a7c:	68f8      	ldr	r0, [r7, #12]
 8015a7e:	f000 f805 	bl	8015a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a82:	69bb      	ldr	r3, [r7, #24]
	}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3720      	adds	r7, #32
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}

08015a8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b084      	sub	sp, #16
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
 8015a98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d103      	bne.n	8015aa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	69ba      	ldr	r2, [r7, #24]
 8015aa4:	601a      	str	r2, [r3, #0]
 8015aa6:	e002      	b.n	8015aae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015aa8:	69bb      	ldr	r3, [r7, #24]
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	68fa      	ldr	r2, [r7, #12]
 8015ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015ab4:	69bb      	ldr	r3, [r7, #24]
 8015ab6:	68ba      	ldr	r2, [r7, #8]
 8015ab8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015aba:	2101      	movs	r1, #1
 8015abc:	69b8      	ldr	r0, [r7, #24]
 8015abe:	f7ff fecb 	bl	8015858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015ac2:	69bb      	ldr	r3, [r7, #24]
 8015ac4:	78fa      	ldrb	r2, [r7, #3]
 8015ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015aca:	bf00      	nop
 8015acc:	3710      	adds	r7, #16
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}

08015ad2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b082      	sub	sp, #8
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d00e      	beq.n	8015afe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2200      	movs	r2, #0
 8015af0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015af2:	2300      	movs	r3, #0
 8015af4:	2200      	movs	r2, #0
 8015af6:	2100      	movs	r1, #0
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f000 f8a1 	bl	8015c40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015afe:	bf00      	nop
 8015b00:	3708      	adds	r7, #8
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b086      	sub	sp, #24
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015b10:	2301      	movs	r3, #1
 8015b12:	617b      	str	r3, [r7, #20]
 8015b14:	2300      	movs	r3, #0
 8015b16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	6939      	ldr	r1, [r7, #16]
 8015b1e:	6978      	ldr	r0, [r7, #20]
 8015b20:	f7ff ff7a 	bl	8015a18 <xQueueGenericCreate>
 8015b24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015b26:	68f8      	ldr	r0, [r7, #12]
 8015b28:	f7ff ffd3 	bl	8015ad2 <prvInitialiseMutex>

		return xNewQueue;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3718      	adds	r7, #24
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b088      	sub	sp, #32
 8015b3a:	af02      	add	r7, sp, #8
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	6039      	str	r1, [r7, #0]
 8015b40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015b42:	2301      	movs	r3, #1
 8015b44:	617b      	str	r3, [r7, #20]
 8015b46:	2300      	movs	r3, #0
 8015b48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015b4a:	79fb      	ldrb	r3, [r7, #7]
 8015b4c:	9300      	str	r3, [sp, #0]
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	2200      	movs	r2, #0
 8015b52:	6939      	ldr	r1, [r7, #16]
 8015b54:	6978      	ldr	r0, [r7, #20]
 8015b56:	f7ff fee7 	bl	8015928 <xQueueGenericCreateStatic>
 8015b5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015b5c:	68f8      	ldr	r0, [r7, #12]
 8015b5e:	f7ff ffb8 	bl	8015ad2 <prvInitialiseMutex>

		return xNewQueue;
 8015b62:	68fb      	ldr	r3, [r7, #12]
	}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3718      	adds	r7, #24
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015b6c:	b590      	push	{r4, r7, lr}
 8015b6e:	b087      	sub	sp, #28
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d10a      	bne.n	8015b94 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8015b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b82:	f383 8811 	msr	BASEPRI, r3
 8015b86:	f3bf 8f6f 	isb	sy
 8015b8a:	f3bf 8f4f 	dsb	sy
 8015b8e:	60fb      	str	r3, [r7, #12]
}
 8015b90:	bf00      	nop
 8015b92:	e7fe      	b.n	8015b92 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	689c      	ldr	r4, [r3, #8]
 8015b98:	f002 f8ac 	bl	8017cf4 <xTaskGetCurrentTaskHandle>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	429c      	cmp	r4, r3
 8015ba0:	d111      	bne.n	8015bc6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	1e5a      	subs	r2, r3, #1
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d105      	bne.n	8015bc0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	2100      	movs	r1, #0
 8015bba:	6938      	ldr	r0, [r7, #16]
 8015bbc:	f000 f840 	bl	8015c40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	617b      	str	r3, [r7, #20]
 8015bc4:	e001      	b.n	8015bca <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8015bca:	697b      	ldr	r3, [r7, #20]
	}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	371c      	adds	r7, #28
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd90      	pop	{r4, r7, pc}

08015bd4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8015bd4:	b590      	push	{r4, r7, lr}
 8015bd6:	b087      	sub	sp, #28
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d10a      	bne.n	8015bfe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8015be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	60fb      	str	r3, [r7, #12]
}
 8015bfa:	bf00      	nop
 8015bfc:	e7fe      	b.n	8015bfc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	689c      	ldr	r4, [r3, #8]
 8015c02:	f002 f877 	bl	8017cf4 <xTaskGetCurrentTaskHandle>
 8015c06:	4603      	mov	r3, r0
 8015c08:	429c      	cmp	r4, r3
 8015c0a:	d107      	bne.n	8015c1c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015c16:	2301      	movs	r3, #1
 8015c18:	617b      	str	r3, [r7, #20]
 8015c1a:	e00c      	b.n	8015c36 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015c1c:	6839      	ldr	r1, [r7, #0]
 8015c1e:	6938      	ldr	r0, [r7, #16]
 8015c20:	f000 fa88 	bl	8016134 <xQueueSemaphoreTake>
 8015c24:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d004      	beq.n	8015c36 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	1c5a      	adds	r2, r3, #1
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8015c36:	697b      	ldr	r3, [r7, #20]
	}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	371c      	adds	r7, #28
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd90      	pop	{r4, r7, pc}

08015c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b08e      	sub	sp, #56	; 0x38
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
 8015c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d10a      	bne.n	8015c72 <xQueueGenericSend+0x32>
	__asm volatile
 8015c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c60:	f383 8811 	msr	BASEPRI, r3
 8015c64:	f3bf 8f6f 	isb	sy
 8015c68:	f3bf 8f4f 	dsb	sy
 8015c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015c6e:	bf00      	nop
 8015c70:	e7fe      	b.n	8015c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d103      	bne.n	8015c80 <xQueueGenericSend+0x40>
 8015c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d101      	bne.n	8015c84 <xQueueGenericSend+0x44>
 8015c80:	2301      	movs	r3, #1
 8015c82:	e000      	b.n	8015c86 <xQueueGenericSend+0x46>
 8015c84:	2300      	movs	r3, #0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d10a      	bne.n	8015ca0 <xQueueGenericSend+0x60>
	__asm volatile
 8015c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c8e:	f383 8811 	msr	BASEPRI, r3
 8015c92:	f3bf 8f6f 	isb	sy
 8015c96:	f3bf 8f4f 	dsb	sy
 8015c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015c9c:	bf00      	nop
 8015c9e:	e7fe      	b.n	8015c9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	2b02      	cmp	r3, #2
 8015ca4:	d103      	bne.n	8015cae <xQueueGenericSend+0x6e>
 8015ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d101      	bne.n	8015cb2 <xQueueGenericSend+0x72>
 8015cae:	2301      	movs	r3, #1
 8015cb0:	e000      	b.n	8015cb4 <xQueueGenericSend+0x74>
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d10a      	bne.n	8015cce <xQueueGenericSend+0x8e>
	__asm volatile
 8015cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cbc:	f383 8811 	msr	BASEPRI, r3
 8015cc0:	f3bf 8f6f 	isb	sy
 8015cc4:	f3bf 8f4f 	dsb	sy
 8015cc8:	623b      	str	r3, [r7, #32]
}
 8015cca:	bf00      	nop
 8015ccc:	e7fe      	b.n	8015ccc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015cce:	f002 f821 	bl	8017d14 <xTaskGetSchedulerState>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d102      	bne.n	8015cde <xQueueGenericSend+0x9e>
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d101      	bne.n	8015ce2 <xQueueGenericSend+0xa2>
 8015cde:	2301      	movs	r3, #1
 8015ce0:	e000      	b.n	8015ce4 <xQueueGenericSend+0xa4>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10a      	bne.n	8015cfe <xQueueGenericSend+0xbe>
	__asm volatile
 8015ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cec:	f383 8811 	msr	BASEPRI, r3
 8015cf0:	f3bf 8f6f 	isb	sy
 8015cf4:	f3bf 8f4f 	dsb	sy
 8015cf8:	61fb      	str	r3, [r7, #28]
}
 8015cfa:	bf00      	nop
 8015cfc:	e7fe      	b.n	8015cfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015cfe:	f003 f8b9 	bl	8018e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d302      	bcc.n	8015d14 <xQueueGenericSend+0xd4>
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	2b02      	cmp	r3, #2
 8015d12:	d129      	bne.n	8015d68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d14:	683a      	ldr	r2, [r7, #0]
 8015d16:	68b9      	ldr	r1, [r7, #8]
 8015d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d1a:	f000 fbaf 	bl	801647c <prvCopyDataToQueue>
 8015d1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d010      	beq.n	8015d4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2a:	3324      	adds	r3, #36	; 0x24
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f001 fdf9 	bl	8017924 <xTaskRemoveFromEventList>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d013      	beq.n	8015d60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015d38:	4b3f      	ldr	r3, [pc, #252]	; (8015e38 <xQueueGenericSend+0x1f8>)
 8015d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d3e:	601a      	str	r2, [r3, #0]
 8015d40:	f3bf 8f4f 	dsb	sy
 8015d44:	f3bf 8f6f 	isb	sy
 8015d48:	e00a      	b.n	8015d60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d007      	beq.n	8015d60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015d50:	4b39      	ldr	r3, [pc, #228]	; (8015e38 <xQueueGenericSend+0x1f8>)
 8015d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d56:	601a      	str	r2, [r3, #0]
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015d60:	f003 f8b8 	bl	8018ed4 <vPortExitCritical>
				return pdPASS;
 8015d64:	2301      	movs	r3, #1
 8015d66:	e063      	b.n	8015e30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d103      	bne.n	8015d76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d6e:	f003 f8b1 	bl	8018ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015d72:	2300      	movs	r3, #0
 8015d74:	e05c      	b.n	8015e30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d106      	bne.n	8015d8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d7c:	f107 0314 	add.w	r3, r7, #20
 8015d80:	4618      	mov	r0, r3
 8015d82:	f001 fe59 	bl	8017a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d86:	2301      	movs	r3, #1
 8015d88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d8a:	f003 f8a3 	bl	8018ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d8e:	f001 fb73 	bl	8017478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d92:	f003 f86f 	bl	8018e74 <vPortEnterCritical>
 8015d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d9c:	b25b      	sxtb	r3, r3
 8015d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015da2:	d103      	bne.n	8015dac <xQueueGenericSend+0x16c>
 8015da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da6:	2200      	movs	r2, #0
 8015da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015db2:	b25b      	sxtb	r3, r3
 8015db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015db8:	d103      	bne.n	8015dc2 <xQueueGenericSend+0x182>
 8015dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015dc2:	f003 f887 	bl	8018ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015dc6:	1d3a      	adds	r2, r7, #4
 8015dc8:	f107 0314 	add.w	r3, r7, #20
 8015dcc:	4611      	mov	r1, r2
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f001 fe48 	bl	8017a64 <xTaskCheckForTimeOut>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d124      	bne.n	8015e24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ddc:	f000 fc46 	bl	801666c <prvIsQueueFull>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d018      	beq.n	8015e18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	3310      	adds	r3, #16
 8015dea:	687a      	ldr	r2, [r7, #4]
 8015dec:	4611      	mov	r1, r2
 8015dee:	4618      	mov	r0, r3
 8015df0:	f001 fd48 	bl	8017884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015df6:	f000 fbd1 	bl	801659c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015dfa:	f001 fb4b 	bl	8017494 <xTaskResumeAll>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	f47f af7c 	bne.w	8015cfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015e06:	4b0c      	ldr	r3, [pc, #48]	; (8015e38 <xQueueGenericSend+0x1f8>)
 8015e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e0c:	601a      	str	r2, [r3, #0]
 8015e0e:	f3bf 8f4f 	dsb	sy
 8015e12:	f3bf 8f6f 	isb	sy
 8015e16:	e772      	b.n	8015cfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e1a:	f000 fbbf 	bl	801659c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e1e:	f001 fb39 	bl	8017494 <xTaskResumeAll>
 8015e22:	e76c      	b.n	8015cfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e26:	f000 fbb9 	bl	801659c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e2a:	f001 fb33 	bl	8017494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015e2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3738      	adds	r7, #56	; 0x38
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}
 8015e38:	e000ed04 	.word	0xe000ed04

08015e3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b090      	sub	sp, #64	; 0x40
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
 8015e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d10a      	bne.n	8015e6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e58:	f383 8811 	msr	BASEPRI, r3
 8015e5c:	f3bf 8f6f 	isb	sy
 8015e60:	f3bf 8f4f 	dsb	sy
 8015e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015e66:	bf00      	nop
 8015e68:	e7fe      	b.n	8015e68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d103      	bne.n	8015e78 <xQueueGenericSendFromISR+0x3c>
 8015e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d101      	bne.n	8015e7c <xQueueGenericSendFromISR+0x40>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e000      	b.n	8015e7e <xQueueGenericSendFromISR+0x42>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d10a      	bne.n	8015e98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e86:	f383 8811 	msr	BASEPRI, r3
 8015e8a:	f3bf 8f6f 	isb	sy
 8015e8e:	f3bf 8f4f 	dsb	sy
 8015e92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e94:	bf00      	nop
 8015e96:	e7fe      	b.n	8015e96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	2b02      	cmp	r3, #2
 8015e9c:	d103      	bne.n	8015ea6 <xQueueGenericSendFromISR+0x6a>
 8015e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d101      	bne.n	8015eaa <xQueueGenericSendFromISR+0x6e>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	e000      	b.n	8015eac <xQueueGenericSendFromISR+0x70>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d10a      	bne.n	8015ec6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb4:	f383 8811 	msr	BASEPRI, r3
 8015eb8:	f3bf 8f6f 	isb	sy
 8015ebc:	f3bf 8f4f 	dsb	sy
 8015ec0:	623b      	str	r3, [r7, #32]
}
 8015ec2:	bf00      	nop
 8015ec4:	e7fe      	b.n	8015ec4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ec6:	f003 f8b7 	bl	8019038 <vPortValidateInterruptPriority>
	__asm volatile
 8015eca:	f3ef 8211 	mrs	r2, BASEPRI
 8015ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed2:	f383 8811 	msr	BASEPRI, r3
 8015ed6:	f3bf 8f6f 	isb	sy
 8015eda:	f3bf 8f4f 	dsb	sy
 8015ede:	61fa      	str	r2, [r7, #28]
 8015ee0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8015ee2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ee4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d302      	bcc.n	8015ef8 <xQueueGenericSendFromISR+0xbc>
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	2b02      	cmp	r3, #2
 8015ef6:	d12f      	bne.n	8015f58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015f08:	683a      	ldr	r2, [r7, #0]
 8015f0a:	68b9      	ldr	r1, [r7, #8]
 8015f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f0e:	f000 fab5 	bl	801647c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015f12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f1a:	d112      	bne.n	8015f42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d016      	beq.n	8015f52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f26:	3324      	adds	r3, #36	; 0x24
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f001 fcfb 	bl	8017924 <xTaskRemoveFromEventList>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d00e      	beq.n	8015f52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d00b      	beq.n	8015f52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2201      	movs	r2, #1
 8015f3e:	601a      	str	r2, [r3, #0]
 8015f40:	e007      	b.n	8015f52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f46:	3301      	adds	r3, #1
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	b25a      	sxtb	r2, r3
 8015f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015f52:	2301      	movs	r3, #1
 8015f54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015f56:	e001      	b.n	8015f5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f5e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	f383 8811 	msr	BASEPRI, r3
}
 8015f66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3740      	adds	r7, #64	; 0x40
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
	...

08015f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b08c      	sub	sp, #48	; 0x30
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f80:	2300      	movs	r3, #0
 8015f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d10a      	bne.n	8015fa4 <xQueueReceive+0x30>
	__asm volatile
 8015f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f92:	f383 8811 	msr	BASEPRI, r3
 8015f96:	f3bf 8f6f 	isb	sy
 8015f9a:	f3bf 8f4f 	dsb	sy
 8015f9e:	623b      	str	r3, [r7, #32]
}
 8015fa0:	bf00      	nop
 8015fa2:	e7fe      	b.n	8015fa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d103      	bne.n	8015fb2 <xQueueReceive+0x3e>
 8015faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d101      	bne.n	8015fb6 <xQueueReceive+0x42>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e000      	b.n	8015fb8 <xQueueReceive+0x44>
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10a      	bne.n	8015fd2 <xQueueReceive+0x5e>
	__asm volatile
 8015fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc0:	f383 8811 	msr	BASEPRI, r3
 8015fc4:	f3bf 8f6f 	isb	sy
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	61fb      	str	r3, [r7, #28]
}
 8015fce:	bf00      	nop
 8015fd0:	e7fe      	b.n	8015fd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015fd2:	f001 fe9f 	bl	8017d14 <xTaskGetSchedulerState>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d102      	bne.n	8015fe2 <xQueueReceive+0x6e>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d101      	bne.n	8015fe6 <xQueueReceive+0x72>
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	e000      	b.n	8015fe8 <xQueueReceive+0x74>
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d10a      	bne.n	8016002 <xQueueReceive+0x8e>
	__asm volatile
 8015fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff0:	f383 8811 	msr	BASEPRI, r3
 8015ff4:	f3bf 8f6f 	isb	sy
 8015ff8:	f3bf 8f4f 	dsb	sy
 8015ffc:	61bb      	str	r3, [r7, #24]
}
 8015ffe:	bf00      	nop
 8016000:	e7fe      	b.n	8016000 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016002:	f002 ff37 	bl	8018e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801600a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801600e:	2b00      	cmp	r3, #0
 8016010:	d01f      	beq.n	8016052 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016012:	68b9      	ldr	r1, [r7, #8]
 8016014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016016:	f000 fa9b 	bl	8016550 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601c:	1e5a      	subs	r2, r3, #1
 801601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016020:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016024:	691b      	ldr	r3, [r3, #16]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d00f      	beq.n	801604a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	3310      	adds	r3, #16
 801602e:	4618      	mov	r0, r3
 8016030:	f001 fc78 	bl	8017924 <xTaskRemoveFromEventList>
 8016034:	4603      	mov	r3, r0
 8016036:	2b00      	cmp	r3, #0
 8016038:	d007      	beq.n	801604a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801603a:	4b3d      	ldr	r3, [pc, #244]	; (8016130 <xQueueReceive+0x1bc>)
 801603c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016040:	601a      	str	r2, [r3, #0]
 8016042:	f3bf 8f4f 	dsb	sy
 8016046:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801604a:	f002 ff43 	bl	8018ed4 <vPortExitCritical>
				return pdPASS;
 801604e:	2301      	movs	r3, #1
 8016050:	e069      	b.n	8016126 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d103      	bne.n	8016060 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016058:	f002 ff3c 	bl	8018ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801605c:	2300      	movs	r3, #0
 801605e:	e062      	b.n	8016126 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016062:	2b00      	cmp	r3, #0
 8016064:	d106      	bne.n	8016074 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016066:	f107 0310 	add.w	r3, r7, #16
 801606a:	4618      	mov	r0, r3
 801606c:	f001 fce4 	bl	8017a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016070:	2301      	movs	r3, #1
 8016072:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016074:	f002 ff2e 	bl	8018ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016078:	f001 f9fe 	bl	8017478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801607c:	f002 fefa 	bl	8018e74 <vPortEnterCritical>
 8016080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016086:	b25b      	sxtb	r3, r3
 8016088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801608c:	d103      	bne.n	8016096 <xQueueReceive+0x122>
 801608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016090:	2200      	movs	r2, #0
 8016092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801609c:	b25b      	sxtb	r3, r3
 801609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160a2:	d103      	bne.n	80160ac <xQueueReceive+0x138>
 80160a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a6:	2200      	movs	r2, #0
 80160a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80160ac:	f002 ff12 	bl	8018ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80160b0:	1d3a      	adds	r2, r7, #4
 80160b2:	f107 0310 	add.w	r3, r7, #16
 80160b6:	4611      	mov	r1, r2
 80160b8:	4618      	mov	r0, r3
 80160ba:	f001 fcd3 	bl	8017a64 <xTaskCheckForTimeOut>
 80160be:	4603      	mov	r3, r0
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d123      	bne.n	801610c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160c6:	f000 fabb 	bl	8016640 <prvIsQueueEmpty>
 80160ca:	4603      	mov	r3, r0
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d017      	beq.n	8016100 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80160d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d2:	3324      	adds	r3, #36	; 0x24
 80160d4:	687a      	ldr	r2, [r7, #4]
 80160d6:	4611      	mov	r1, r2
 80160d8:	4618      	mov	r0, r3
 80160da:	f001 fbd3 	bl	8017884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80160de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160e0:	f000 fa5c 	bl	801659c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80160e4:	f001 f9d6 	bl	8017494 <xTaskResumeAll>
 80160e8:	4603      	mov	r3, r0
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d189      	bne.n	8016002 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80160ee:	4b10      	ldr	r3, [pc, #64]	; (8016130 <xQueueReceive+0x1bc>)
 80160f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160f4:	601a      	str	r2, [r3, #0]
 80160f6:	f3bf 8f4f 	dsb	sy
 80160fa:	f3bf 8f6f 	isb	sy
 80160fe:	e780      	b.n	8016002 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016102:	f000 fa4b 	bl	801659c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016106:	f001 f9c5 	bl	8017494 <xTaskResumeAll>
 801610a:	e77a      	b.n	8016002 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801610c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801610e:	f000 fa45 	bl	801659c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016112:	f001 f9bf 	bl	8017494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016118:	f000 fa92 	bl	8016640 <prvIsQueueEmpty>
 801611c:	4603      	mov	r3, r0
 801611e:	2b00      	cmp	r3, #0
 8016120:	f43f af6f 	beq.w	8016002 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016126:	4618      	mov	r0, r3
 8016128:	3730      	adds	r7, #48	; 0x30
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	e000ed04 	.word	0xe000ed04

08016134 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b08e      	sub	sp, #56	; 0x38
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801613e:	2300      	movs	r3, #0
 8016140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016146:	2300      	movs	r3, #0
 8016148:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614c:	2b00      	cmp	r3, #0
 801614e:	d10a      	bne.n	8016166 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016154:	f383 8811 	msr	BASEPRI, r3
 8016158:	f3bf 8f6f 	isb	sy
 801615c:	f3bf 8f4f 	dsb	sy
 8016160:	623b      	str	r3, [r7, #32]
}
 8016162:	bf00      	nop
 8016164:	e7fe      	b.n	8016164 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801616a:	2b00      	cmp	r3, #0
 801616c:	d00a      	beq.n	8016184 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016172:	f383 8811 	msr	BASEPRI, r3
 8016176:	f3bf 8f6f 	isb	sy
 801617a:	f3bf 8f4f 	dsb	sy
 801617e:	61fb      	str	r3, [r7, #28]
}
 8016180:	bf00      	nop
 8016182:	e7fe      	b.n	8016182 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016184:	f001 fdc6 	bl	8017d14 <xTaskGetSchedulerState>
 8016188:	4603      	mov	r3, r0
 801618a:	2b00      	cmp	r3, #0
 801618c:	d102      	bne.n	8016194 <xQueueSemaphoreTake+0x60>
 801618e:	683b      	ldr	r3, [r7, #0]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d101      	bne.n	8016198 <xQueueSemaphoreTake+0x64>
 8016194:	2301      	movs	r3, #1
 8016196:	e000      	b.n	801619a <xQueueSemaphoreTake+0x66>
 8016198:	2300      	movs	r3, #0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d10a      	bne.n	80161b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a2:	f383 8811 	msr	BASEPRI, r3
 80161a6:	f3bf 8f6f 	isb	sy
 80161aa:	f3bf 8f4f 	dsb	sy
 80161ae:	61bb      	str	r3, [r7, #24]
}
 80161b0:	bf00      	nop
 80161b2:	e7fe      	b.n	80161b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80161b4:	f002 fe5e 	bl	8018e74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80161b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80161be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d024      	beq.n	801620e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80161c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c6:	1e5a      	subs	r2, r3, #1
 80161c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80161cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d104      	bne.n	80161de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80161d4:	f001 ff14 	bl	8018000 <pvTaskIncrementMutexHeldCount>
 80161d8:	4602      	mov	r2, r0
 80161da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e0:	691b      	ldr	r3, [r3, #16]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00f      	beq.n	8016206 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e8:	3310      	adds	r3, #16
 80161ea:	4618      	mov	r0, r3
 80161ec:	f001 fb9a 	bl	8017924 <xTaskRemoveFromEventList>
 80161f0:	4603      	mov	r3, r0
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d007      	beq.n	8016206 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80161f6:	4b54      	ldr	r3, [pc, #336]	; (8016348 <xQueueSemaphoreTake+0x214>)
 80161f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161fc:	601a      	str	r2, [r3, #0]
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016206:	f002 fe65 	bl	8018ed4 <vPortExitCritical>
				return pdPASS;
 801620a:	2301      	movs	r3, #1
 801620c:	e097      	b.n	801633e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d111      	bne.n	8016238 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016216:	2b00      	cmp	r3, #0
 8016218:	d00a      	beq.n	8016230 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801621e:	f383 8811 	msr	BASEPRI, r3
 8016222:	f3bf 8f6f 	isb	sy
 8016226:	f3bf 8f4f 	dsb	sy
 801622a:	617b      	str	r3, [r7, #20]
}
 801622c:	bf00      	nop
 801622e:	e7fe      	b.n	801622e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016230:	f002 fe50 	bl	8018ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016234:	2300      	movs	r3, #0
 8016236:	e082      	b.n	801633e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623a:	2b00      	cmp	r3, #0
 801623c:	d106      	bne.n	801624c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801623e:	f107 030c 	add.w	r3, r7, #12
 8016242:	4618      	mov	r0, r3
 8016244:	f001 fbf8 	bl	8017a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016248:	2301      	movs	r3, #1
 801624a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801624c:	f002 fe42 	bl	8018ed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016250:	f001 f912 	bl	8017478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016254:	f002 fe0e 	bl	8018e74 <vPortEnterCritical>
 8016258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801625e:	b25b      	sxtb	r3, r3
 8016260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016264:	d103      	bne.n	801626e <xQueueSemaphoreTake+0x13a>
 8016266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016268:	2200      	movs	r2, #0
 801626a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016274:	b25b      	sxtb	r3, r3
 8016276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801627a:	d103      	bne.n	8016284 <xQueueSemaphoreTake+0x150>
 801627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627e:	2200      	movs	r2, #0
 8016280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016284:	f002 fe26 	bl	8018ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016288:	463a      	mov	r2, r7
 801628a:	f107 030c 	add.w	r3, r7, #12
 801628e:	4611      	mov	r1, r2
 8016290:	4618      	mov	r0, r3
 8016292:	f001 fbe7 	bl	8017a64 <xTaskCheckForTimeOut>
 8016296:	4603      	mov	r3, r0
 8016298:	2b00      	cmp	r3, #0
 801629a:	d132      	bne.n	8016302 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801629c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801629e:	f000 f9cf 	bl	8016640 <prvIsQueueEmpty>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d026      	beq.n	80162f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80162a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d109      	bne.n	80162c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80162b0:	f002 fde0 	bl	8018e74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	689b      	ldr	r3, [r3, #8]
 80162b8:	4618      	mov	r0, r3
 80162ba:	f001 fd49 	bl	8017d50 <xTaskPriorityInherit>
 80162be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80162c0:	f002 fe08 	bl	8018ed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80162c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c6:	3324      	adds	r3, #36	; 0x24
 80162c8:	683a      	ldr	r2, [r7, #0]
 80162ca:	4611      	mov	r1, r2
 80162cc:	4618      	mov	r0, r3
 80162ce:	f001 fad9 	bl	8017884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80162d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162d4:	f000 f962 	bl	801659c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80162d8:	f001 f8dc 	bl	8017494 <xTaskResumeAll>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	f47f af68 	bne.w	80161b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80162e4:	4b18      	ldr	r3, [pc, #96]	; (8016348 <xQueueSemaphoreTake+0x214>)
 80162e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162ea:	601a      	str	r2, [r3, #0]
 80162ec:	f3bf 8f4f 	dsb	sy
 80162f0:	f3bf 8f6f 	isb	sy
 80162f4:	e75e      	b.n	80161b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80162f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162f8:	f000 f950 	bl	801659c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80162fc:	f001 f8ca 	bl	8017494 <xTaskResumeAll>
 8016300:	e758      	b.n	80161b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016304:	f000 f94a 	bl	801659c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016308:	f001 f8c4 	bl	8017494 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801630c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801630e:	f000 f997 	bl	8016640 <prvIsQueueEmpty>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	f43f af4d 	beq.w	80161b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00d      	beq.n	801633c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016320:	f002 fda8 	bl	8018e74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016326:	f000 f891 	bl	801644c <prvGetDisinheritPriorityAfterTimeout>
 801632a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632e:	689b      	ldr	r3, [r3, #8]
 8016330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016332:	4618      	mov	r0, r3
 8016334:	f001 fde2 	bl	8017efc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016338:	f002 fdcc 	bl	8018ed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801633c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801633e:	4618      	mov	r0, r3
 8016340:	3738      	adds	r7, #56	; 0x38
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	e000ed04 	.word	0xe000ed04

0801634c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b08e      	sub	sp, #56	; 0x38
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635e:	2b00      	cmp	r3, #0
 8016360:	d10a      	bne.n	8016378 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016366:	f383 8811 	msr	BASEPRI, r3
 801636a:	f3bf 8f6f 	isb	sy
 801636e:	f3bf 8f4f 	dsb	sy
 8016372:	623b      	str	r3, [r7, #32]
}
 8016374:	bf00      	nop
 8016376:	e7fe      	b.n	8016376 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016378:	68bb      	ldr	r3, [r7, #8]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d103      	bne.n	8016386 <xQueueReceiveFromISR+0x3a>
 801637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016382:	2b00      	cmp	r3, #0
 8016384:	d101      	bne.n	801638a <xQueueReceiveFromISR+0x3e>
 8016386:	2301      	movs	r3, #1
 8016388:	e000      	b.n	801638c <xQueueReceiveFromISR+0x40>
 801638a:	2300      	movs	r3, #0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10a      	bne.n	80163a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016394:	f383 8811 	msr	BASEPRI, r3
 8016398:	f3bf 8f6f 	isb	sy
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	61fb      	str	r3, [r7, #28]
}
 80163a2:	bf00      	nop
 80163a4:	e7fe      	b.n	80163a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80163a6:	f002 fe47 	bl	8019038 <vPortValidateInterruptPriority>
	__asm volatile
 80163aa:	f3ef 8211 	mrs	r2, BASEPRI
 80163ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b2:	f383 8811 	msr	BASEPRI, r3
 80163b6:	f3bf 8f6f 	isb	sy
 80163ba:	f3bf 8f4f 	dsb	sy
 80163be:	61ba      	str	r2, [r7, #24]
 80163c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80163c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80163c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80163c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80163cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d02f      	beq.n	8016432 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80163d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80163dc:	68b9      	ldr	r1, [r7, #8]
 80163de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163e0:	f000 f8b6 	bl	8016550 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80163e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163e6:	1e5a      	subs	r2, r3, #1
 80163e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80163ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80163f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163f4:	d112      	bne.n	801641c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f8:	691b      	ldr	r3, [r3, #16]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d016      	beq.n	801642c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016400:	3310      	adds	r3, #16
 8016402:	4618      	mov	r0, r3
 8016404:	f001 fa8e 	bl	8017924 <xTaskRemoveFromEventList>
 8016408:	4603      	mov	r3, r0
 801640a:	2b00      	cmp	r3, #0
 801640c:	d00e      	beq.n	801642c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d00b      	beq.n	801642c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2201      	movs	r2, #1
 8016418:	601a      	str	r2, [r3, #0]
 801641a:	e007      	b.n	801642c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801641c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016420:	3301      	adds	r3, #1
 8016422:	b2db      	uxtb	r3, r3
 8016424:	b25a      	sxtb	r2, r3
 8016426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801642c:	2301      	movs	r3, #1
 801642e:	637b      	str	r3, [r7, #52]	; 0x34
 8016430:	e001      	b.n	8016436 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016432:	2300      	movs	r3, #0
 8016434:	637b      	str	r3, [r7, #52]	; 0x34
 8016436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016438:	613b      	str	r3, [r7, #16]
	__asm volatile
 801643a:	693b      	ldr	r3, [r7, #16]
 801643c:	f383 8811 	msr	BASEPRI, r3
}
 8016440:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016444:	4618      	mov	r0, r3
 8016446:	3738      	adds	r7, #56	; 0x38
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801644c:	b480      	push	{r7}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016458:	2b00      	cmp	r3, #0
 801645a:	d006      	beq.n	801646a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016466:	60fb      	str	r3, [r7, #12]
 8016468:	e001      	b.n	801646e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801646a:	2300      	movs	r3, #0
 801646c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801646e:	68fb      	ldr	r3, [r7, #12]
	}
 8016470:	4618      	mov	r0, r3
 8016472:	3714      	adds	r7, #20
 8016474:	46bd      	mov	sp, r7
 8016476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647a:	4770      	bx	lr

0801647c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b086      	sub	sp, #24
 8016480:	af00      	add	r7, sp, #0
 8016482:	60f8      	str	r0, [r7, #12]
 8016484:	60b9      	str	r1, [r7, #8]
 8016486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016488:	2300      	movs	r3, #0
 801648a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016490:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016496:	2b00      	cmp	r3, #0
 8016498:	d10d      	bne.n	80164b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d14d      	bne.n	801653e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	689b      	ldr	r3, [r3, #8]
 80164a6:	4618      	mov	r0, r3
 80164a8:	f001 fcba 	bl	8017e20 <xTaskPriorityDisinherit>
 80164ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2200      	movs	r2, #0
 80164b2:	609a      	str	r2, [r3, #8]
 80164b4:	e043      	b.n	801653e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d119      	bne.n	80164f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	6858      	ldr	r0, [r3, #4]
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164c4:	461a      	mov	r2, r3
 80164c6:	68b9      	ldr	r1, [r7, #8]
 80164c8:	f004 fbe8 	bl	801ac9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	685a      	ldr	r2, [r3, #4]
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164d4:	441a      	add	r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	685a      	ldr	r2, [r3, #4]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	689b      	ldr	r3, [r3, #8]
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d32b      	bcc.n	801653e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	681a      	ldr	r2, [r3, #0]
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	605a      	str	r2, [r3, #4]
 80164ee:	e026      	b.n	801653e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	68d8      	ldr	r0, [r3, #12]
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164f8:	461a      	mov	r2, r3
 80164fa:	68b9      	ldr	r1, [r7, #8]
 80164fc:	f004 fbce 	bl	801ac9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	68da      	ldr	r2, [r3, #12]
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016508:	425b      	negs	r3, r3
 801650a:	441a      	add	r2, r3
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	68da      	ldr	r2, [r3, #12]
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	429a      	cmp	r2, r3
 801651a:	d207      	bcs.n	801652c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	689a      	ldr	r2, [r3, #8]
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016524:	425b      	negs	r3, r3
 8016526:	441a      	add	r2, r3
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2b02      	cmp	r3, #2
 8016530:	d105      	bne.n	801653e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d002      	beq.n	801653e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	3b01      	subs	r3, #1
 801653c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	1c5a      	adds	r2, r3, #1
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016546:	697b      	ldr	r3, [r7, #20]
}
 8016548:	4618      	mov	r0, r3
 801654a:	3718      	adds	r7, #24
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}

08016550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
 8016558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801655e:	2b00      	cmp	r3, #0
 8016560:	d018      	beq.n	8016594 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	68da      	ldr	r2, [r3, #12]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801656a:	441a      	add	r2, r3
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	68da      	ldr	r2, [r3, #12]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	689b      	ldr	r3, [r3, #8]
 8016578:	429a      	cmp	r2, r3
 801657a:	d303      	bcc.n	8016584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	68d9      	ldr	r1, [r3, #12]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801658c:	461a      	mov	r2, r3
 801658e:	6838      	ldr	r0, [r7, #0]
 8016590:	f004 fb84 	bl	801ac9c <memcpy>
	}
}
 8016594:	bf00      	nop
 8016596:	3708      	adds	r7, #8
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}

0801659c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b084      	sub	sp, #16
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80165a4:	f002 fc66 	bl	8018e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80165ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80165b0:	e011      	b.n	80165d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d012      	beq.n	80165e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	3324      	adds	r3, #36	; 0x24
 80165be:	4618      	mov	r0, r3
 80165c0:	f001 f9b0 	bl	8017924 <xTaskRemoveFromEventList>
 80165c4:	4603      	mov	r3, r0
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d001      	beq.n	80165ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80165ca:	f001 faad 	bl	8017b28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80165ce:	7bfb      	ldrb	r3, [r7, #15]
 80165d0:	3b01      	subs	r3, #1
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80165d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	dce9      	bgt.n	80165b2 <prvUnlockQueue+0x16>
 80165de:	e000      	b.n	80165e2 <prvUnlockQueue+0x46>
					break;
 80165e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	22ff      	movs	r2, #255	; 0xff
 80165e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80165ea:	f002 fc73 	bl	8018ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80165ee:	f002 fc41 	bl	8018e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80165f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80165fa:	e011      	b.n	8016620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	691b      	ldr	r3, [r3, #16]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d012      	beq.n	801662a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	3310      	adds	r3, #16
 8016608:	4618      	mov	r0, r3
 801660a:	f001 f98b 	bl	8017924 <xTaskRemoveFromEventList>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d001      	beq.n	8016618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016614:	f001 fa88 	bl	8017b28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016618:	7bbb      	ldrb	r3, [r7, #14]
 801661a:	3b01      	subs	r3, #1
 801661c:	b2db      	uxtb	r3, r3
 801661e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016624:	2b00      	cmp	r3, #0
 8016626:	dce9      	bgt.n	80165fc <prvUnlockQueue+0x60>
 8016628:	e000      	b.n	801662c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801662a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	22ff      	movs	r2, #255	; 0xff
 8016630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016634:	f002 fc4e 	bl	8018ed4 <vPortExitCritical>
}
 8016638:	bf00      	nop
 801663a:	3710      	adds	r7, #16
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}

08016640 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016648:	f002 fc14 	bl	8018e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016650:	2b00      	cmp	r3, #0
 8016652:	d102      	bne.n	801665a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016654:	2301      	movs	r3, #1
 8016656:	60fb      	str	r3, [r7, #12]
 8016658:	e001      	b.n	801665e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801665a:	2300      	movs	r3, #0
 801665c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801665e:	f002 fc39 	bl	8018ed4 <vPortExitCritical>

	return xReturn;
 8016662:	68fb      	ldr	r3, [r7, #12]
}
 8016664:	4618      	mov	r0, r3
 8016666:	3710      	adds	r7, #16
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b084      	sub	sp, #16
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016674:	f002 fbfe 	bl	8018e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016680:	429a      	cmp	r2, r3
 8016682:	d102      	bne.n	801668a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016684:	2301      	movs	r3, #1
 8016686:	60fb      	str	r3, [r7, #12]
 8016688:	e001      	b.n	801668e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801668a:	2300      	movs	r3, #0
 801668c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801668e:	f002 fc21 	bl	8018ed4 <vPortExitCritical>

	return xReturn;
 8016692:	68fb      	ldr	r3, [r7, #12]
}
 8016694:	4618      	mov	r0, r3
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801669c:	b480      	push	{r7}
 801669e:	b085      	sub	sp, #20
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166a6:	2300      	movs	r3, #0
 80166a8:	60fb      	str	r3, [r7, #12]
 80166aa:	e014      	b.n	80166d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80166ac:	4a0f      	ldr	r2, [pc, #60]	; (80166ec <vQueueAddToRegistry+0x50>)
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d10b      	bne.n	80166d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80166b8:	490c      	ldr	r1, [pc, #48]	; (80166ec <vQueueAddToRegistry+0x50>)
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	683a      	ldr	r2, [r7, #0]
 80166be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80166c2:	4a0a      	ldr	r2, [pc, #40]	; (80166ec <vQueueAddToRegistry+0x50>)
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	00db      	lsls	r3, r3, #3
 80166c8:	4413      	add	r3, r2
 80166ca:	687a      	ldr	r2, [r7, #4]
 80166cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80166ce:	e006      	b.n	80166de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	3301      	adds	r3, #1
 80166d4:	60fb      	str	r3, [r7, #12]
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2b07      	cmp	r3, #7
 80166da:	d9e7      	bls.n	80166ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80166dc:	bf00      	nop
 80166de:	bf00      	nop
 80166e0:	3714      	adds	r7, #20
 80166e2:	46bd      	mov	sp, r7
 80166e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e8:	4770      	bx	lr
 80166ea:	bf00      	nop
 80166ec:	200039f4 	.word	0x200039f4

080166f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b086      	sub	sp, #24
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	60f8      	str	r0, [r7, #12]
 80166f8:	60b9      	str	r1, [r7, #8]
 80166fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016700:	f002 fbb8 	bl	8018e74 <vPortEnterCritical>
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801670a:	b25b      	sxtb	r3, r3
 801670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016710:	d103      	bne.n	801671a <vQueueWaitForMessageRestricted+0x2a>
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	2200      	movs	r2, #0
 8016716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016720:	b25b      	sxtb	r3, r3
 8016722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016726:	d103      	bne.n	8016730 <vQueueWaitForMessageRestricted+0x40>
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	2200      	movs	r2, #0
 801672c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016730:	f002 fbd0 	bl	8018ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016738:	2b00      	cmp	r3, #0
 801673a:	d106      	bne.n	801674a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	3324      	adds	r3, #36	; 0x24
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	68b9      	ldr	r1, [r7, #8]
 8016744:	4618      	mov	r0, r3
 8016746:	f001 f8c1 	bl	80178cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801674a:	6978      	ldr	r0, [r7, #20]
 801674c:	f7ff ff26 	bl	801659c <prvUnlockQueue>
	}
 8016750:	bf00      	nop
 8016752:	3718      	adds	r7, #24
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}

08016758 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8016758:	b580      	push	{r7, lr}
 801675a:	b08c      	sub	sp, #48	; 0x30
 801675c:	af02      	add	r7, sp, #8
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b01      	cmp	r3, #1
 8016768:	d110      	bne.n	801678c <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 801676a:	2301      	movs	r3, #1
 801676c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	2b04      	cmp	r3, #4
 8016774:	d81b      	bhi.n	80167ae <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8016776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801677a:	f383 8811 	msr	BASEPRI, r3
 801677e:	f3bf 8f6f 	isb	sy
 8016782:	f3bf 8f4f 	dsb	sy
 8016786:	61fb      	str	r3, [r7, #28]
}
 8016788:	bf00      	nop
 801678a:	e7fe      	b.n	801678a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 801678c:	2300      	movs	r3, #0
 801678e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d10a      	bne.n	80167ae <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8016798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801679c:	f383 8811 	msr	BASEPRI, r3
 80167a0:	f3bf 8f6f 	isb	sy
 80167a4:	f3bf 8f4f 	dsb	sy
 80167a8:	61bb      	str	r3, [r7, #24]
}
 80167aa:	bf00      	nop
 80167ac:	e7fe      	b.n	80167ac <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80167ae:	68ba      	ldr	r2, [r7, #8]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d90a      	bls.n	80167cc <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80167b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ba:	f383 8811 	msr	BASEPRI, r3
 80167be:	f3bf 8f6f 	isb	sy
 80167c2:	f3bf 8f4f 	dsb	sy
 80167c6:	617b      	str	r3, [r7, #20]
}
 80167c8:	bf00      	nop
 80167ca:	e7fe      	b.n	80167ca <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d101      	bne.n	80167d6 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80167d2:	2301      	movs	r3, #1
 80167d4:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	3301      	adds	r3, #1
 80167da:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	3324      	adds	r3, #36	; 0x24
 80167e0:	4618      	mov	r0, r3
 80167e2:	f002 fc69 	bl	80190b8 <pvPortMalloc>
 80167e6:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80167e8:	6a3b      	ldr	r3, [r7, #32]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d00a      	beq.n	8016804 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80167ee:	6a3b      	ldr	r3, [r7, #32]
 80167f0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80167f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	68fa      	ldr	r2, [r7, #12]
 80167fe:	6a38      	ldr	r0, [r7, #32]
 8016800:	f000 fafd 	bl	8016dfe <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8016804:	6a3b      	ldr	r3, [r7, #32]
	}
 8016806:	4618      	mov	r0, r3
 8016808:	3728      	adds	r7, #40	; 0x28
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 801680e:	b480      	push	{r7}
 8016810:	b087      	sub	sp, #28
 8016812:	af00      	add	r7, sp, #0
 8016814:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d10a      	bne.n	8016836 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8016820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016824:	f383 8811 	msr	BASEPRI, r3
 8016828:	f3bf 8f6f 	isb	sy
 801682c:	f3bf 8f4f 	dsb	sy
 8016830:	60fb      	str	r3, [r7, #12]
}
 8016832:	bf00      	nop
 8016834:	e7fe      	b.n	8016834 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	689a      	ldr	r2, [r3, #8]
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	4413      	add	r3, r2
 8016840:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	697a      	ldr	r2, [r7, #20]
 8016848:	1ad3      	subs	r3, r2, r3
 801684a:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	3b01      	subs	r3, #1
 8016850:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8016852:	693b      	ldr	r3, [r7, #16]
 8016854:	689b      	ldr	r3, [r3, #8]
 8016856:	697a      	ldr	r2, [r7, #20]
 8016858:	429a      	cmp	r2, r3
 801685a:	d304      	bcc.n	8016866 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	689b      	ldr	r3, [r3, #8]
 8016860:	697a      	ldr	r2, [r7, #20]
 8016862:	1ad3      	subs	r3, r2, r3
 8016864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8016866:	697b      	ldr	r3, [r7, #20]
}
 8016868:	4618      	mov	r0, r3
 801686a:	371c      	adds	r7, #28
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b090      	sub	sp, #64	; 0x40
 8016878:	af02      	add	r7, sp, #8
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]
 8016880:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8016886:	2300      	movs	r3, #0
 8016888:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d10a      	bne.n	80168aa <xStreamBufferSend+0x36>
	__asm volatile
 8016894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016898:	f383 8811 	msr	BASEPRI, r3
 801689c:	f3bf 8f6f 	isb	sy
 80168a0:	f3bf 8f4f 	dsb	sy
 80168a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80168a6:	bf00      	nop
 80168a8:	e7fe      	b.n	80168a8 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80168aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d10a      	bne.n	80168c6 <xStreamBufferSend+0x52>
	__asm volatile
 80168b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b4:	f383 8811 	msr	BASEPRI, r3
 80168b8:	f3bf 8f6f 	isb	sy
 80168bc:	f3bf 8f4f 	dsb	sy
 80168c0:	623b      	str	r3, [r7, #32]
}
 80168c2:	bf00      	nop
 80168c4:	e7fe      	b.n	80168c4 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80168c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c8:	7f1b      	ldrb	r3, [r3, #28]
 80168ca:	f003 0301 	and.w	r3, r3, #1
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d011      	beq.n	80168f6 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80168d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d4:	3304      	adds	r3, #4
 80168d6:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80168d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	429a      	cmp	r2, r3
 80168de:	d80a      	bhi.n	80168f6 <xStreamBufferSend+0x82>
	__asm volatile
 80168e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e4:	f383 8811 	msr	BASEPRI, r3
 80168e8:	f3bf 8f6f 	isb	sy
 80168ec:	f3bf 8f4f 	dsb	sy
 80168f0:	61fb      	str	r3, [r7, #28]
}
 80168f2:	bf00      	nop
 80168f4:	e7fe      	b.n	80168f4 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d03e      	beq.n	801697a <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80168fc:	f107 0310 	add.w	r3, r7, #16
 8016900:	4618      	mov	r0, r3
 8016902:	f001 f873 	bl	80179ec <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8016906:	f002 fab5 	bl	8018e74 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 801690a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801690c:	f7ff ff7f 	bl	801680e <xStreamBufferSpacesAvailable>
 8016910:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8016912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016916:	429a      	cmp	r2, r3
 8016918:	d217      	bcs.n	801694a <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 801691a:	2000      	movs	r0, #0
 801691c:	f001 fd82 	bl	8018424 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8016920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016922:	695b      	ldr	r3, [r3, #20]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d00a      	beq.n	801693e <xStreamBufferSend+0xca>
	__asm volatile
 8016928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801692c:	f383 8811 	msr	BASEPRI, r3
 8016930:	f3bf 8f6f 	isb	sy
 8016934:	f3bf 8f4f 	dsb	sy
 8016938:	61bb      	str	r3, [r7, #24]
}
 801693a:	bf00      	nop
 801693c:	e7fe      	b.n	801693c <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 801693e:	f001 f9d9 	bl	8017cf4 <xTaskGetCurrentTaskHandle>
 8016942:	4602      	mov	r2, r0
 8016944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016946:	615a      	str	r2, [r3, #20]
 8016948:	e002      	b.n	8016950 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 801694a:	f002 fac3 	bl	8018ed4 <vPortExitCritical>
					break;
 801694e:	e014      	b.n	801697a <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8016950:	f002 fac0 	bl	8018ed4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	2200      	movs	r2, #0
 8016958:	2100      	movs	r1, #0
 801695a:	2000      	movs	r0, #0
 801695c:	f001 fbb0 	bl	80180c0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8016960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016962:	2200      	movs	r2, #0
 8016964:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8016966:	463a      	mov	r2, r7
 8016968:	f107 0310 	add.w	r3, r7, #16
 801696c:	4611      	mov	r1, r2
 801696e:	4618      	mov	r0, r3
 8016970:	f001 f878 	bl	8017a64 <xTaskCheckForTimeOut>
 8016974:	4603      	mov	r3, r0
 8016976:	2b00      	cmp	r3, #0
 8016978:	d0c5      	beq.n	8016906 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 801697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801697c:	2b00      	cmp	r3, #0
 801697e:	d103      	bne.n	8016988 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8016980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016982:	f7ff ff44 	bl	801680e <xStreamBufferSpacesAvailable>
 8016986:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8016988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	68b9      	ldr	r1, [r7, #8]
 8016992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016994:	f000 f823 	bl	80169de <prvWriteMessageToBuffer>
 8016998:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 801699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801699c:	2b00      	cmp	r3, #0
 801699e:	d019      	beq.n	80169d4 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80169a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169a2:	f000 fa0c 	bl	8016dbe <prvBytesInBuffer>
 80169a6:	4602      	mov	r2, r0
 80169a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169aa:	68db      	ldr	r3, [r3, #12]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d311      	bcc.n	80169d4 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80169b0:	f000 fd62 	bl	8017478 <vTaskSuspendAll>
 80169b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b6:	691b      	ldr	r3, [r3, #16]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d009      	beq.n	80169d0 <xStreamBufferSend+0x15c>
 80169bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169be:	6918      	ldr	r0, [r3, #16]
 80169c0:	2300      	movs	r3, #0
 80169c2:	2200      	movs	r2, #0
 80169c4:	2100      	movs	r1, #0
 80169c6:	f001 fbdb 	bl	8018180 <xTaskGenericNotify>
 80169ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169cc:	2200      	movs	r2, #0
 80169ce:	611a      	str	r2, [r3, #16]
 80169d0:	f000 fd60 	bl	8017494 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80169d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3738      	adds	r7, #56	; 0x38
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80169de:	b580      	push	{r7, lr}
 80169e0:	b086      	sub	sp, #24
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	60f8      	str	r0, [r7, #12]
 80169e6:	60b9      	str	r1, [r7, #8]
 80169e8:	607a      	str	r2, [r7, #4]
 80169ea:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d102      	bne.n	80169f8 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80169f2:	2300      	movs	r3, #0
 80169f4:	617b      	str	r3, [r7, #20]
 80169f6:	e01d      	b.n	8016a34 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	7f1b      	ldrb	r3, [r3, #28]
 80169fc:	f003 0301 	and.w	r3, r3, #1
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d108      	bne.n	8016a16 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8016a04:	2301      	movs	r3, #1
 8016a06:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8016a08:	687a      	ldr	r2, [r7, #4]
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	4293      	cmp	r3, r2
 8016a0e:	bf28      	it	cs
 8016a10:	4613      	movcs	r3, r2
 8016a12:	607b      	str	r3, [r7, #4]
 8016a14:	e00e      	b.n	8016a34 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8016a16:	683a      	ldr	r2, [r7, #0]
 8016a18:	6a3b      	ldr	r3, [r7, #32]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d308      	bcc.n	8016a30 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8016a1e:	2301      	movs	r3, #1
 8016a20:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8016a22:	1d3b      	adds	r3, r7, #4
 8016a24:	2204      	movs	r2, #4
 8016a26:	4619      	mov	r1, r3
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f000 f8dc 	bl	8016be6 <prvWriteBytesToBuffer>
 8016a2e:	e001      	b.n	8016a34 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8016a30:	2300      	movs	r3, #0
 8016a32:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d007      	beq.n	8016a4a <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	68b9      	ldr	r1, [r7, #8]
 8016a40:	68f8      	ldr	r0, [r7, #12]
 8016a42:	f000 f8d0 	bl	8016be6 <prvWriteBytesToBuffer>
 8016a46:	6138      	str	r0, [r7, #16]
 8016a48:	e001      	b.n	8016a4e <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8016a4e:	693b      	ldr	r3, [r7, #16]
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3718      	adds	r7, #24
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b08e      	sub	sp, #56	; 0x38
 8016a5c:	af02      	add	r7, sp, #8
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
 8016a64:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d10a      	bne.n	8016a8a <xStreamBufferReceive+0x32>
	__asm volatile
 8016a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a78:	f383 8811 	msr	BASEPRI, r3
 8016a7c:	f3bf 8f6f 	isb	sy
 8016a80:	f3bf 8f4f 	dsb	sy
 8016a84:	61fb      	str	r3, [r7, #28]
}
 8016a86:	bf00      	nop
 8016a88:	e7fe      	b.n	8016a88 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8016a8a:	6a3b      	ldr	r3, [r7, #32]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d10a      	bne.n	8016aa6 <xStreamBufferReceive+0x4e>
	__asm volatile
 8016a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a94:	f383 8811 	msr	BASEPRI, r3
 8016a98:	f3bf 8f6f 	isb	sy
 8016a9c:	f3bf 8f4f 	dsb	sy
 8016aa0:	61bb      	str	r3, [r7, #24]
}
 8016aa2:	bf00      	nop
 8016aa4:	e7fe      	b.n	8016aa4 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8016aa6:	6a3b      	ldr	r3, [r7, #32]
 8016aa8:	7f1b      	ldrb	r3, [r3, #28]
 8016aaa:	f003 0301 	and.w	r3, r3, #1
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d002      	beq.n	8016ab8 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8016ab2:	2304      	movs	r3, #4
 8016ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ab6:	e001      	b.n	8016abc <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d034      	beq.n	8016b2c <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8016ac2:	f002 f9d7 	bl	8018e74 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016ac6:	6a38      	ldr	r0, [r7, #32]
 8016ac8:	f000 f979 	bl	8016dbe <prvBytesInBuffer>
 8016acc:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8016ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d816      	bhi.n	8016b04 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8016ad6:	2000      	movs	r0, #0
 8016ad8:	f001 fca4 	bl	8018424 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8016adc:	6a3b      	ldr	r3, [r7, #32]
 8016ade:	691b      	ldr	r3, [r3, #16]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d00a      	beq.n	8016afa <xStreamBufferReceive+0xa2>
	__asm volatile
 8016ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ae8:	f383 8811 	msr	BASEPRI, r3
 8016aec:	f3bf 8f6f 	isb	sy
 8016af0:	f3bf 8f4f 	dsb	sy
 8016af4:	617b      	str	r3, [r7, #20]
}
 8016af6:	bf00      	nop
 8016af8:	e7fe      	b.n	8016af8 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8016afa:	f001 f8fb 	bl	8017cf4 <xTaskGetCurrentTaskHandle>
 8016afe:	4602      	mov	r2, r0
 8016b00:	6a3b      	ldr	r3, [r7, #32]
 8016b02:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016b04:	f002 f9e6 	bl	8018ed4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8016b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d811      	bhi.n	8016b34 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	2200      	movs	r2, #0
 8016b14:	2100      	movs	r1, #0
 8016b16:	2000      	movs	r0, #0
 8016b18:	f001 fad2 	bl	80180c0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8016b1c:	6a3b      	ldr	r3, [r7, #32]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016b22:	6a38      	ldr	r0, [r7, #32]
 8016b24:	f000 f94b 	bl	8016dbe <prvBytesInBuffer>
 8016b28:	62b8      	str	r0, [r7, #40]	; 0x28
 8016b2a:	e003      	b.n	8016b34 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016b2c:	6a38      	ldr	r0, [r7, #32]
 8016b2e:	f000 f946 	bl	8016dbe <prvBytesInBuffer>
 8016b32:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8016b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	d91d      	bls.n	8016b78 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8016b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b3e:	9300      	str	r3, [sp, #0]
 8016b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b42:	687a      	ldr	r2, [r7, #4]
 8016b44:	68b9      	ldr	r1, [r7, #8]
 8016b46:	6a38      	ldr	r0, [r7, #32]
 8016b48:	f000 f81b 	bl	8016b82 <prvReadMessageFromBuffer>
 8016b4c:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d011      	beq.n	8016b78 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8016b54:	f000 fc90 	bl	8017478 <vTaskSuspendAll>
 8016b58:	6a3b      	ldr	r3, [r7, #32]
 8016b5a:	695b      	ldr	r3, [r3, #20]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d009      	beq.n	8016b74 <xStreamBufferReceive+0x11c>
 8016b60:	6a3b      	ldr	r3, [r7, #32]
 8016b62:	6958      	ldr	r0, [r3, #20]
 8016b64:	2300      	movs	r3, #0
 8016b66:	2200      	movs	r2, #0
 8016b68:	2100      	movs	r1, #0
 8016b6a:	f001 fb09 	bl	8018180 <xTaskGenericNotify>
 8016b6e:	6a3b      	ldr	r3, [r7, #32]
 8016b70:	2200      	movs	r2, #0
 8016b72:	615a      	str	r2, [r3, #20]
 8016b74:	f000 fc8e 	bl	8017494 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3730      	adds	r7, #48	; 0x30
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b088      	sub	sp, #32
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	60f8      	str	r0, [r7, #12]
 8016b8a:	60b9      	str	r1, [r7, #8]
 8016b8c:	607a      	str	r2, [r7, #4]
 8016b8e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8016b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d019      	beq.n	8016bca <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8016b9c:	f107 0110 	add.w	r1, r7, #16
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ba4:	68f8      	ldr	r0, [r7, #12]
 8016ba6:	f000 f890 	bl	8016cca <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8016bae:	683a      	ldr	r2, [r7, #0]
 8016bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bb2:	1ad3      	subs	r3, r2, r3
 8016bb4:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8016bb6:	69fa      	ldr	r2, [r7, #28]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d907      	bls.n	8016bce <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	69ba      	ldr	r2, [r7, #24]
 8016bc2:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	61fb      	str	r3, [r7, #28]
 8016bc8:	e001      	b.n	8016bce <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	69fa      	ldr	r2, [r7, #28]
 8016bd2:	68b9      	ldr	r1, [r7, #8]
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	f000 f878 	bl	8016cca <prvReadBytesFromBuffer>
 8016bda:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8016bdc:	697b      	ldr	r3, [r7, #20]
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3720      	adds	r7, #32
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}

08016be6 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8016be6:	b580      	push	{r7, lr}
 8016be8:	b08a      	sub	sp, #40	; 0x28
 8016bea:	af00      	add	r7, sp, #0
 8016bec:	60f8      	str	r0, [r7, #12]
 8016bee:	60b9      	str	r1, [r7, #8]
 8016bf0:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d10a      	bne.n	8016c0e <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8016bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bfc:	f383 8811 	msr	BASEPRI, r3
 8016c00:	f3bf 8f6f 	isb	sy
 8016c04:	f3bf 8f4f 	dsb	sy
 8016c08:	61fb      	str	r3, [r7, #28]
}
 8016c0a:	bf00      	nop
 8016c0c:	e7fe      	b.n	8016c0c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	685b      	ldr	r3, [r3, #4]
 8016c12:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	689a      	ldr	r2, [r3, #8]
 8016c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1a:	1ad3      	subs	r3, r2, r3
 8016c1c:	687a      	ldr	r2, [r7, #4]
 8016c1e:	4293      	cmp	r3, r2
 8016c20:	bf28      	it	cs
 8016c22:	4613      	movcs	r3, r2
 8016c24:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8016c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c28:	6a3b      	ldr	r3, [r7, #32]
 8016c2a:	441a      	add	r2, r3
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	689b      	ldr	r3, [r3, #8]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d90a      	bls.n	8016c4a <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8016c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c38:	f383 8811 	msr	BASEPRI, r3
 8016c3c:	f3bf 8f6f 	isb	sy
 8016c40:	f3bf 8f4f 	dsb	sy
 8016c44:	61bb      	str	r3, [r7, #24]
}
 8016c46:	bf00      	nop
 8016c48:	e7fe      	b.n	8016c48 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	699a      	ldr	r2, [r3, #24]
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c50:	4413      	add	r3, r2
 8016c52:	6a3a      	ldr	r2, [r7, #32]
 8016c54:	68b9      	ldr	r1, [r7, #8]
 8016c56:	4618      	mov	r0, r3
 8016c58:	f004 f820 	bl	801ac9c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8016c5c:	687a      	ldr	r2, [r7, #4]
 8016c5e:	6a3b      	ldr	r3, [r7, #32]
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d91c      	bls.n	8016c9e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	6a3b      	ldr	r3, [r7, #32]
 8016c68:	1ad2      	subs	r2, r2, r3
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	689b      	ldr	r3, [r3, #8]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d90a      	bls.n	8016c88 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8016c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c76:	f383 8811 	msr	BASEPRI, r3
 8016c7a:	f3bf 8f6f 	isb	sy
 8016c7e:	f3bf 8f4f 	dsb	sy
 8016c82:	617b      	str	r3, [r7, #20]
}
 8016c84:	bf00      	nop
 8016c86:	e7fe      	b.n	8016c86 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	6998      	ldr	r0, [r3, #24]
 8016c8c:	68ba      	ldr	r2, [r7, #8]
 8016c8e:	6a3b      	ldr	r3, [r7, #32]
 8016c90:	18d1      	adds	r1, r2, r3
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	6a3b      	ldr	r3, [r7, #32]
 8016c96:	1ad3      	subs	r3, r2, r3
 8016c98:	461a      	mov	r2, r3
 8016c9a:	f003 ffff 	bl	801ac9c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8016c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	689b      	ldr	r3, [r3, #8]
 8016caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d304      	bcc.n	8016cba <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	689b      	ldr	r3, [r3, #8]
 8016cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cb6:	1ad3      	subs	r3, r2, r3
 8016cb8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cbe:	605a      	str	r2, [r3, #4]

	return xCount;
 8016cc0:	687b      	ldr	r3, [r7, #4]
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3728      	adds	r7, #40	; 0x28
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}

08016cca <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8016cca:	b580      	push	{r7, lr}
 8016ccc:	b08a      	sub	sp, #40	; 0x28
 8016cce:	af00      	add	r7, sp, #0
 8016cd0:	60f8      	str	r0, [r7, #12]
 8016cd2:	60b9      	str	r1, [r7, #8]
 8016cd4:	607a      	str	r2, [r7, #4]
 8016cd6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8016cd8:	687a      	ldr	r2, [r7, #4]
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	bf28      	it	cs
 8016ce0:	4613      	movcs	r3, r2
 8016ce2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8016ce4:	6a3b      	ldr	r3, [r7, #32]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d064      	beq.n	8016db4 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	689a      	ldr	r2, [r3, #8]
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	6a3a      	ldr	r2, [r7, #32]
 8016cfa:	4293      	cmp	r3, r2
 8016cfc:	bf28      	it	cs
 8016cfe:	4613      	movcs	r3, r2
 8016d00:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8016d02:	69fa      	ldr	r2, [r7, #28]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d90a      	bls.n	8016d20 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8016d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d0e:	f383 8811 	msr	BASEPRI, r3
 8016d12:	f3bf 8f6f 	isb	sy
 8016d16:	f3bf 8f4f 	dsb	sy
 8016d1a:	61bb      	str	r3, [r7, #24]
}
 8016d1c:	bf00      	nop
 8016d1e:	e7fe      	b.n	8016d1e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8016d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	441a      	add	r2, r3
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	689b      	ldr	r3, [r3, #8]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d90a      	bls.n	8016d44 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8016d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d32:	f383 8811 	msr	BASEPRI, r3
 8016d36:	f3bf 8f6f 	isb	sy
 8016d3a:	f3bf 8f4f 	dsb	sy
 8016d3e:	617b      	str	r3, [r7, #20]
}
 8016d40:	bf00      	nop
 8016d42:	e7fe      	b.n	8016d42 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	699a      	ldr	r2, [r3, #24]
 8016d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4a:	4413      	add	r3, r2
 8016d4c:	69fa      	ldr	r2, [r7, #28]
 8016d4e:	4619      	mov	r1, r3
 8016d50:	68b8      	ldr	r0, [r7, #8]
 8016d52:	f003 ffa3 	bl	801ac9c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8016d56:	6a3a      	ldr	r2, [r7, #32]
 8016d58:	69fb      	ldr	r3, [r7, #28]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d919      	bls.n	8016d92 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8016d5e:	6a3a      	ldr	r2, [r7, #32]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d90a      	bls.n	8016d7c <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8016d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d6a:	f383 8811 	msr	BASEPRI, r3
 8016d6e:	f3bf 8f6f 	isb	sy
 8016d72:	f3bf 8f4f 	dsb	sy
 8016d76:	613b      	str	r3, [r7, #16]
}
 8016d78:	bf00      	nop
 8016d7a:	e7fe      	b.n	8016d7a <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8016d7c:	68ba      	ldr	r2, [r7, #8]
 8016d7e:	69fb      	ldr	r3, [r7, #28]
 8016d80:	18d0      	adds	r0, r2, r3
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	6999      	ldr	r1, [r3, #24]
 8016d86:	6a3a      	ldr	r2, [r7, #32]
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	1ad3      	subs	r3, r2, r3
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	f003 ff85 	bl	801ac9c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8016d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d94:	6a3b      	ldr	r3, [r7, #32]
 8016d96:	4413      	add	r3, r2
 8016d98:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	689b      	ldr	r3, [r3, #8]
 8016d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d304      	bcc.n	8016dae <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	689b      	ldr	r3, [r3, #8]
 8016da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016daa:	1ad3      	subs	r3, r2, r3
 8016dac:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016db2:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8016db4:	6a3b      	ldr	r3, [r7, #32]
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3728      	adds	r7, #40	; 0x28
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}

08016dbe <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8016dbe:	b480      	push	{r7}
 8016dc0:	b085      	sub	sp, #20
 8016dc2:	af00      	add	r7, sp, #0
 8016dc4:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	689a      	ldr	r2, [r3, #8]
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	4413      	add	r3, r2
 8016dd0:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	68fa      	ldr	r2, [r7, #12]
 8016dd8:	1ad3      	subs	r3, r2, r3
 8016dda:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	689b      	ldr	r3, [r3, #8]
 8016de0:	68fa      	ldr	r2, [r7, #12]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d304      	bcc.n	8016df0 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	689b      	ldr	r3, [r3, #8]
 8016dea:	68fa      	ldr	r2, [r7, #12]
 8016dec:	1ad3      	subs	r3, r2, r3
 8016dee:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8016df0:	68fb      	ldr	r3, [r7, #12]
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3714      	adds	r7, #20
 8016df6:	46bd      	mov	sp, r7
 8016df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfc:	4770      	bx	lr

08016dfe <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8016dfe:	b580      	push	{r7, lr}
 8016e00:	b086      	sub	sp, #24
 8016e02:	af00      	add	r7, sp, #0
 8016e04:	60f8      	str	r0, [r7, #12]
 8016e06:	60b9      	str	r1, [r7, #8]
 8016e08:	607a      	str	r2, [r7, #4]
 8016e0a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8016e0c:	2355      	movs	r3, #85	; 0x55
 8016e0e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8016e10:	687a      	ldr	r2, [r7, #4]
 8016e12:	6979      	ldr	r1, [r7, #20]
 8016e14:	68b8      	ldr	r0, [r7, #8]
 8016e16:	f003 ff4f 	bl	801acb8 <memset>
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	d00a      	beq.n	8016e38 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8016e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e26:	f383 8811 	msr	BASEPRI, r3
 8016e2a:	f3bf 8f6f 	isb	sy
 8016e2e:	f3bf 8f4f 	dsb	sy
 8016e32:	613b      	str	r3, [r7, #16]
}
 8016e34:	bf00      	nop
 8016e36:	e7fe      	b.n	8016e36 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8016e38:	2224      	movs	r2, #36	; 0x24
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	68f8      	ldr	r0, [r7, #12]
 8016e3e:	f003 ff3b 	bl	801acb8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	68ba      	ldr	r2, [r7, #8]
 8016e46:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	683a      	ldr	r2, [r7, #0]
 8016e52:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016e5a:	771a      	strb	r2, [r3, #28]
}
 8016e5c:	bf00      	nop
 8016e5e:	3718      	adds	r7, #24
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b08e      	sub	sp, #56	; 0x38
 8016e68:	af04      	add	r7, sp, #16
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d10a      	bne.n	8016e8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e7c:	f383 8811 	msr	BASEPRI, r3
 8016e80:	f3bf 8f6f 	isb	sy
 8016e84:	f3bf 8f4f 	dsb	sy
 8016e88:	623b      	str	r3, [r7, #32]
}
 8016e8a:	bf00      	nop
 8016e8c:	e7fe      	b.n	8016e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d10a      	bne.n	8016eaa <xTaskCreateStatic+0x46>
	__asm volatile
 8016e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e98:	f383 8811 	msr	BASEPRI, r3
 8016e9c:	f3bf 8f6f 	isb	sy
 8016ea0:	f3bf 8f4f 	dsb	sy
 8016ea4:	61fb      	str	r3, [r7, #28]
}
 8016ea6:	bf00      	nop
 8016ea8:	e7fe      	b.n	8016ea8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016eaa:	23c4      	movs	r3, #196	; 0xc4
 8016eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	2bc4      	cmp	r3, #196	; 0xc4
 8016eb2:	d00a      	beq.n	8016eca <xTaskCreateStatic+0x66>
	__asm volatile
 8016eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb8:	f383 8811 	msr	BASEPRI, r3
 8016ebc:	f3bf 8f6f 	isb	sy
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	61bb      	str	r3, [r7, #24]
}
 8016ec6:	bf00      	nop
 8016ec8:	e7fe      	b.n	8016ec8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016eca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d01e      	beq.n	8016f10 <xTaskCreateStatic+0xac>
 8016ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d01b      	beq.n	8016f10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ee0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee4:	2202      	movs	r2, #2
 8016ee6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016eea:	2300      	movs	r3, #0
 8016eec:	9303      	str	r3, [sp, #12]
 8016eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef0:	9302      	str	r3, [sp, #8]
 8016ef2:	f107 0314 	add.w	r3, r7, #20
 8016ef6:	9301      	str	r3, [sp, #4]
 8016ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efa:	9300      	str	r3, [sp, #0]
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	687a      	ldr	r2, [r7, #4]
 8016f00:	68b9      	ldr	r1, [r7, #8]
 8016f02:	68f8      	ldr	r0, [r7, #12]
 8016f04:	f000 f850 	bl	8016fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f0a:	f000 f8f9 	bl	8017100 <prvAddNewTaskToReadyList>
 8016f0e:	e001      	b.n	8016f14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016f10:	2300      	movs	r3, #0
 8016f12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016f14:	697b      	ldr	r3, [r7, #20]
	}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3728      	adds	r7, #40	; 0x28
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}

08016f1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016f1e:	b580      	push	{r7, lr}
 8016f20:	b08c      	sub	sp, #48	; 0x30
 8016f22:	af04      	add	r7, sp, #16
 8016f24:	60f8      	str	r0, [r7, #12]
 8016f26:	60b9      	str	r1, [r7, #8]
 8016f28:	603b      	str	r3, [r7, #0]
 8016f2a:	4613      	mov	r3, r2
 8016f2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016f2e:	88fb      	ldrh	r3, [r7, #6]
 8016f30:	009b      	lsls	r3, r3, #2
 8016f32:	4618      	mov	r0, r3
 8016f34:	f002 f8c0 	bl	80190b8 <pvPortMalloc>
 8016f38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00e      	beq.n	8016f5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016f40:	20c4      	movs	r0, #196	; 0xc4
 8016f42:	f002 f8b9 	bl	80190b8 <pvPortMalloc>
 8016f46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016f48:	69fb      	ldr	r3, [r7, #28]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d003      	beq.n	8016f56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016f4e:	69fb      	ldr	r3, [r7, #28]
 8016f50:	697a      	ldr	r2, [r7, #20]
 8016f52:	631a      	str	r2, [r3, #48]	; 0x30
 8016f54:	e005      	b.n	8016f62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016f56:	6978      	ldr	r0, [r7, #20]
 8016f58:	f002 f97e 	bl	8019258 <vPortFree>
 8016f5c:	e001      	b.n	8016f62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d017      	beq.n	8016f98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016f70:	88fa      	ldrh	r2, [r7, #6]
 8016f72:	2300      	movs	r3, #0
 8016f74:	9303      	str	r3, [sp, #12]
 8016f76:	69fb      	ldr	r3, [r7, #28]
 8016f78:	9302      	str	r3, [sp, #8]
 8016f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7c:	9301      	str	r3, [sp, #4]
 8016f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f80:	9300      	str	r3, [sp, #0]
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	68b9      	ldr	r1, [r7, #8]
 8016f86:	68f8      	ldr	r0, [r7, #12]
 8016f88:	f000 f80e 	bl	8016fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f8c:	69f8      	ldr	r0, [r7, #28]
 8016f8e:	f000 f8b7 	bl	8017100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016f92:	2301      	movs	r3, #1
 8016f94:	61bb      	str	r3, [r7, #24]
 8016f96:	e002      	b.n	8016f9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016f98:	f04f 33ff 	mov.w	r3, #4294967295
 8016f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3720      	adds	r7, #32
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b088      	sub	sp, #32
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	60b9      	str	r1, [r7, #8]
 8016fb2:	607a      	str	r2, [r7, #4]
 8016fb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	009b      	lsls	r3, r3, #2
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	21a5      	movs	r1, #165	; 0xa5
 8016fc2:	f003 fe79 	bl	801acb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016fd0:	3b01      	subs	r3, #1
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	4413      	add	r3, r2
 8016fd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016fd8:	69bb      	ldr	r3, [r7, #24]
 8016fda:	f023 0307 	bic.w	r3, r3, #7
 8016fde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016fe0:	69bb      	ldr	r3, [r7, #24]
 8016fe2:	f003 0307 	and.w	r3, r3, #7
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d00a      	beq.n	8017000 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fee:	f383 8811 	msr	BASEPRI, r3
 8016ff2:	f3bf 8f6f 	isb	sy
 8016ff6:	f3bf 8f4f 	dsb	sy
 8016ffa:	617b      	str	r3, [r7, #20]
}
 8016ffc:	bf00      	nop
 8016ffe:	e7fe      	b.n	8016ffe <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8017000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017002:	69ba      	ldr	r2, [r7, #24]
 8017004:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d01f      	beq.n	801704c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801700c:	2300      	movs	r3, #0
 801700e:	61fb      	str	r3, [r7, #28]
 8017010:	e012      	b.n	8017038 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017012:	68ba      	ldr	r2, [r7, #8]
 8017014:	69fb      	ldr	r3, [r7, #28]
 8017016:	4413      	add	r3, r2
 8017018:	7819      	ldrb	r1, [r3, #0]
 801701a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	4413      	add	r3, r2
 8017020:	3334      	adds	r3, #52	; 0x34
 8017022:	460a      	mov	r2, r1
 8017024:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017026:	68ba      	ldr	r2, [r7, #8]
 8017028:	69fb      	ldr	r3, [r7, #28]
 801702a:	4413      	add	r3, r2
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d006      	beq.n	8017040 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	3301      	adds	r3, #1
 8017036:	61fb      	str	r3, [r7, #28]
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	2b0f      	cmp	r3, #15
 801703c:	d9e9      	bls.n	8017012 <prvInitialiseNewTask+0x6a>
 801703e:	e000      	b.n	8017042 <prvInitialiseNewTask+0x9a>
			{
				break;
 8017040:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017044:	2200      	movs	r2, #0
 8017046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801704a:	e003      	b.n	8017054 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801704e:	2200      	movs	r2, #0
 8017050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	2b37      	cmp	r3, #55	; 0x37
 8017058:	d901      	bls.n	801705e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801705a:	2337      	movs	r3, #55	; 0x37
 801705c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017062:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017068:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706c:	2200      	movs	r2, #0
 801706e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017072:	3304      	adds	r3, #4
 8017074:	4618      	mov	r0, r3
 8017076:	f7fe fb5b 	bl	8015730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707c:	3318      	adds	r3, #24
 801707e:	4618      	mov	r0, r3
 8017080:	f7fe fb56 	bl	8015730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017088:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017092:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017098:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709c:	2200      	movs	r2, #0
 801709e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80170a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a2:	2200      	movs	r2, #0
 80170a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80170a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170aa:	2200      	movs	r2, #0
 80170ac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	335c      	adds	r3, #92	; 0x5c
 80170b4:	2260      	movs	r2, #96	; 0x60
 80170b6:	2100      	movs	r1, #0
 80170b8:	4618      	mov	r0, r3
 80170ba:	f003 fdfd 	bl	801acb8 <memset>
 80170be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c0:	4a0c      	ldr	r2, [pc, #48]	; (80170f4 <prvInitialiseNewTask+0x14c>)
 80170c2:	661a      	str	r2, [r3, #96]	; 0x60
 80170c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c6:	4a0c      	ldr	r2, [pc, #48]	; (80170f8 <prvInitialiseNewTask+0x150>)
 80170c8:	665a      	str	r2, [r3, #100]	; 0x64
 80170ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170cc:	4a0b      	ldr	r2, [pc, #44]	; (80170fc <prvInitialiseNewTask+0x154>)
 80170ce:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80170d0:	683a      	ldr	r2, [r7, #0]
 80170d2:	68f9      	ldr	r1, [r7, #12]
 80170d4:	69b8      	ldr	r0, [r7, #24]
 80170d6:	f001 fd9f 	bl	8018c18 <pxPortInitialiseStack>
 80170da:	4602      	mov	r2, r0
 80170dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80170e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d002      	beq.n	80170ec <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80170e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80170ec:	bf00      	nop
 80170ee:	3720      	adds	r7, #32
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	0801c7b0 	.word	0x0801c7b0
 80170f8:	0801c7d0 	.word	0x0801c7d0
 80170fc:	0801c790 	.word	0x0801c790

08017100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017108:	f001 feb4 	bl	8018e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801710c:	4b30      	ldr	r3, [pc, #192]	; (80171d0 <prvAddNewTaskToReadyList+0xd0>)
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	3301      	adds	r3, #1
 8017112:	4a2f      	ldr	r2, [pc, #188]	; (80171d0 <prvAddNewTaskToReadyList+0xd0>)
 8017114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017116:	4b2f      	ldr	r3, [pc, #188]	; (80171d4 <prvAddNewTaskToReadyList+0xd4>)
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d109      	bne.n	8017132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801711e:	4a2d      	ldr	r2, [pc, #180]	; (80171d4 <prvAddNewTaskToReadyList+0xd4>)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017124:	4b2a      	ldr	r3, [pc, #168]	; (80171d0 <prvAddNewTaskToReadyList+0xd0>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	2b01      	cmp	r3, #1
 801712a:	d110      	bne.n	801714e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801712c:	f000 fd20 	bl	8017b70 <prvInitialiseTaskLists>
 8017130:	e00d      	b.n	801714e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017132:	4b29      	ldr	r3, [pc, #164]	; (80171d8 <prvAddNewTaskToReadyList+0xd8>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d109      	bne.n	801714e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801713a:	4b26      	ldr	r3, [pc, #152]	; (80171d4 <prvAddNewTaskToReadyList+0xd4>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017144:	429a      	cmp	r2, r3
 8017146:	d802      	bhi.n	801714e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017148:	4a22      	ldr	r2, [pc, #136]	; (80171d4 <prvAddNewTaskToReadyList+0xd4>)
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801714e:	4b23      	ldr	r3, [pc, #140]	; (80171dc <prvAddNewTaskToReadyList+0xdc>)
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	3301      	adds	r3, #1
 8017154:	4a21      	ldr	r2, [pc, #132]	; (80171dc <prvAddNewTaskToReadyList+0xdc>)
 8017156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017158:	4b20      	ldr	r3, [pc, #128]	; (80171dc <prvAddNewTaskToReadyList+0xdc>)
 801715a:	681a      	ldr	r2, [r3, #0]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	3334      	adds	r3, #52	; 0x34
 8017164:	4619      	mov	r1, r3
 8017166:	481e      	ldr	r0, [pc, #120]	; (80171e0 <prvAddNewTaskToReadyList+0xe0>)
 8017168:	f003 fe8e 	bl	801ae88 <iprintf>

		prvAddTaskToReadyList( pxNewTCB );
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017170:	4b1c      	ldr	r3, [pc, #112]	; (80171e4 <prvAddNewTaskToReadyList+0xe4>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	429a      	cmp	r2, r3
 8017176:	d903      	bls.n	8017180 <prvAddNewTaskToReadyList+0x80>
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801717c:	4a19      	ldr	r2, [pc, #100]	; (80171e4 <prvAddNewTaskToReadyList+0xe4>)
 801717e:	6013      	str	r3, [r2, #0]
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017184:	4613      	mov	r3, r2
 8017186:	009b      	lsls	r3, r3, #2
 8017188:	4413      	add	r3, r2
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	4a16      	ldr	r2, [pc, #88]	; (80171e8 <prvAddNewTaskToReadyList+0xe8>)
 801718e:	441a      	add	r2, r3
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	3304      	adds	r3, #4
 8017194:	4619      	mov	r1, r3
 8017196:	4610      	mov	r0, r2
 8017198:	f7fe fad7 	bl	801574a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801719c:	f001 fe9a 	bl	8018ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80171a0:	4b0d      	ldr	r3, [pc, #52]	; (80171d8 <prvAddNewTaskToReadyList+0xd8>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d00e      	beq.n	80171c6 <prvAddNewTaskToReadyList+0xc6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80171a8:	4b0a      	ldr	r3, [pc, #40]	; (80171d4 <prvAddNewTaskToReadyList+0xd4>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d207      	bcs.n	80171c6 <prvAddNewTaskToReadyList+0xc6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80171b6:	4b0d      	ldr	r3, [pc, #52]	; (80171ec <prvAddNewTaskToReadyList+0xec>)
 80171b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171bc:	601a      	str	r2, [r3, #0]
 80171be:	f3bf 8f4f 	dsb	sy
 80171c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171c6:	bf00      	nop
 80171c8:	3708      	adds	r7, #8
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
 80171ce:	bf00      	nop
 80171d0:	20003f08 	.word	0x20003f08
 80171d4:	20003a34 	.word	0x20003a34
 80171d8:	20003f14 	.word	0x20003f14
 80171dc:	20003f24 	.word	0x20003f24
 80171e0:	0801c0fc 	.word	0x0801c0fc
 80171e4:	20003f10 	.word	0x20003f10
 80171e8:	20003a38 	.word	0x20003a38
 80171ec:	e000ed04 	.word	0xe000ed04

080171f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b084      	sub	sp, #16
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80171f8:	2300      	movs	r3, #0
 80171fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d017      	beq.n	8017232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017202:	4b13      	ldr	r3, [pc, #76]	; (8017250 <vTaskDelay+0x60>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d00a      	beq.n	8017220 <vTaskDelay+0x30>
	__asm volatile
 801720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801720e:	f383 8811 	msr	BASEPRI, r3
 8017212:	f3bf 8f6f 	isb	sy
 8017216:	f3bf 8f4f 	dsb	sy
 801721a:	60bb      	str	r3, [r7, #8]
}
 801721c:	bf00      	nop
 801721e:	e7fe      	b.n	801721e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017220:	f000 f92a 	bl	8017478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017224:	2100      	movs	r1, #0
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	f001 f954 	bl	80184d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801722c:	f000 f932 	bl	8017494 <xTaskResumeAll>
 8017230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d107      	bne.n	8017248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017238:	4b06      	ldr	r3, [pc, #24]	; (8017254 <vTaskDelay+0x64>)
 801723a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801723e:	601a      	str	r2, [r3, #0]
 8017240:	f3bf 8f4f 	dsb	sy
 8017244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017248:	bf00      	nop
 801724a:	3710      	adds	r7, #16
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}
 8017250:	20003f30 	.word	0x20003f30
 8017254:	e000ed04 	.word	0xe000ed04

08017258 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8017258:	b580      	push	{r7, lr}
 801725a:	b088      	sub	sp, #32
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8017262:	2300      	movs	r3, #0
 8017264:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	2b37      	cmp	r3, #55	; 0x37
 801726a:	d90a      	bls.n	8017282 <vTaskPrioritySet+0x2a>
	__asm volatile
 801726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017270:	f383 8811 	msr	BASEPRI, r3
 8017274:	f3bf 8f6f 	isb	sy
 8017278:	f3bf 8f4f 	dsb	sy
 801727c:	60fb      	str	r3, [r7, #12]
}
 801727e:	bf00      	nop
 8017280:	e7fe      	b.n	8017280 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017282:	683b      	ldr	r3, [r7, #0]
 8017284:	2b37      	cmp	r3, #55	; 0x37
 8017286:	d901      	bls.n	801728c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017288:	2337      	movs	r3, #55	; 0x37
 801728a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 801728c:	f001 fdf2 	bl	8018e74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d102      	bne.n	801729c <vTaskPrioritySet+0x44>
 8017296:	4b3b      	ldr	r3, [pc, #236]	; (8017384 <vTaskPrioritySet+0x12c>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	e000      	b.n	801729e <vTaskPrioritySet+0x46>
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80172a0:	69bb      	ldr	r3, [r7, #24]
 80172a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172a4:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80172a6:	697a      	ldr	r2, [r7, #20]
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d063      	beq.n	8017376 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80172ae:	683a      	ldr	r2, [r7, #0]
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d90d      	bls.n	80172d2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80172b6:	4b33      	ldr	r3, [pc, #204]	; (8017384 <vTaskPrioritySet+0x12c>)
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	69ba      	ldr	r2, [r7, #24]
 80172bc:	429a      	cmp	r2, r3
 80172be:	d00f      	beq.n	80172e0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80172c0:	4b30      	ldr	r3, [pc, #192]	; (8017384 <vTaskPrioritySet+0x12c>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d309      	bcc.n	80172e0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80172cc:	2301      	movs	r3, #1
 80172ce:	61fb      	str	r3, [r7, #28]
 80172d0:	e006      	b.n	80172e0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80172d2:	4b2c      	ldr	r3, [pc, #176]	; (8017384 <vTaskPrioritySet+0x12c>)
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	69ba      	ldr	r2, [r7, #24]
 80172d8:	429a      	cmp	r2, r3
 80172da:	d101      	bne.n	80172e0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80172dc:	2301      	movs	r3, #1
 80172de:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172e4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80172e6:	69bb      	ldr	r3, [r7, #24]
 80172e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80172ea:	69bb      	ldr	r3, [r7, #24]
 80172ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d102      	bne.n	80172f8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	683a      	ldr	r2, [r7, #0]
 80172f6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80172f8:	69bb      	ldr	r3, [r7, #24]
 80172fa:	683a      	ldr	r2, [r7, #0]
 80172fc:	651a      	str	r2, [r3, #80]	; 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80172fe:	69bb      	ldr	r3, [r7, #24]
 8017300:	699b      	ldr	r3, [r3, #24]
 8017302:	2b00      	cmp	r3, #0
 8017304:	db04      	blt.n	8017310 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801730c:	69bb      	ldr	r3, [r7, #24]
 801730e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017310:	69bb      	ldr	r3, [r7, #24]
 8017312:	6959      	ldr	r1, [r3, #20]
 8017314:	693a      	ldr	r2, [r7, #16]
 8017316:	4613      	mov	r3, r2
 8017318:	009b      	lsls	r3, r3, #2
 801731a:	4413      	add	r3, r2
 801731c:	009b      	lsls	r3, r3, #2
 801731e:	4a1a      	ldr	r2, [pc, #104]	; (8017388 <vTaskPrioritySet+0x130>)
 8017320:	4413      	add	r3, r2
 8017322:	4299      	cmp	r1, r3
 8017324:	d11c      	bne.n	8017360 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017326:	69bb      	ldr	r3, [r7, #24]
 8017328:	3304      	adds	r3, #4
 801732a:	4618      	mov	r0, r3
 801732c:	f7fe fa6a 	bl	8015804 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8017330:	69bb      	ldr	r3, [r7, #24]
 8017332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017334:	4b15      	ldr	r3, [pc, #84]	; (801738c <vTaskPrioritySet+0x134>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	429a      	cmp	r2, r3
 801733a:	d903      	bls.n	8017344 <vTaskPrioritySet+0xec>
 801733c:	69bb      	ldr	r3, [r7, #24]
 801733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017340:	4a12      	ldr	r2, [pc, #72]	; (801738c <vTaskPrioritySet+0x134>)
 8017342:	6013      	str	r3, [r2, #0]
 8017344:	69bb      	ldr	r3, [r7, #24]
 8017346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017348:	4613      	mov	r3, r2
 801734a:	009b      	lsls	r3, r3, #2
 801734c:	4413      	add	r3, r2
 801734e:	009b      	lsls	r3, r3, #2
 8017350:	4a0d      	ldr	r2, [pc, #52]	; (8017388 <vTaskPrioritySet+0x130>)
 8017352:	441a      	add	r2, r3
 8017354:	69bb      	ldr	r3, [r7, #24]
 8017356:	3304      	adds	r3, #4
 8017358:	4619      	mov	r1, r3
 801735a:	4610      	mov	r0, r2
 801735c:	f7fe f9f5 	bl	801574a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d007      	beq.n	8017376 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8017366:	4b0a      	ldr	r3, [pc, #40]	; (8017390 <vTaskPrioritySet+0x138>)
 8017368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801736c:	601a      	str	r2, [r3, #0]
 801736e:	f3bf 8f4f 	dsb	sy
 8017372:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8017376:	f001 fdad 	bl	8018ed4 <vPortExitCritical>
	}
 801737a:	bf00      	nop
 801737c:	3720      	adds	r7, #32
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	20003a34 	.word	0x20003a34
 8017388:	20003a38 	.word	0x20003a38
 801738c:	20003f10 	.word	0x20003f10
 8017390:	e000ed04 	.word	0xe000ed04

08017394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b08a      	sub	sp, #40	; 0x28
 8017398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801739a:	2300      	movs	r3, #0
 801739c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801739e:	2300      	movs	r3, #0
 80173a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80173a2:	463a      	mov	r2, r7
 80173a4:	1d39      	adds	r1, r7, #4
 80173a6:	f107 0308 	add.w	r3, r7, #8
 80173aa:	4618      	mov	r0, r3
 80173ac:	f7fe f96c 	bl	8015688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80173b0:	6839      	ldr	r1, [r7, #0]
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	68ba      	ldr	r2, [r7, #8]
 80173b6:	9202      	str	r2, [sp, #8]
 80173b8:	9301      	str	r3, [sp, #4]
 80173ba:	2300      	movs	r3, #0
 80173bc:	9300      	str	r3, [sp, #0]
 80173be:	2300      	movs	r3, #0
 80173c0:	460a      	mov	r2, r1
 80173c2:	4925      	ldr	r1, [pc, #148]	; (8017458 <vTaskStartScheduler+0xc4>)
 80173c4:	4825      	ldr	r0, [pc, #148]	; (801745c <vTaskStartScheduler+0xc8>)
 80173c6:	f7ff fd4d 	bl	8016e64 <xTaskCreateStatic>
 80173ca:	4603      	mov	r3, r0
 80173cc:	4a24      	ldr	r2, [pc, #144]	; (8017460 <vTaskStartScheduler+0xcc>)
 80173ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80173d0:	4b23      	ldr	r3, [pc, #140]	; (8017460 <vTaskStartScheduler+0xcc>)
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d002      	beq.n	80173de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80173d8:	2301      	movs	r3, #1
 80173da:	617b      	str	r3, [r7, #20]
 80173dc:	e001      	b.n	80173e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80173de:	2300      	movs	r3, #0
 80173e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80173e2:	697b      	ldr	r3, [r7, #20]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d102      	bne.n	80173ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80173e8:	f001 f8c8 	bl	801857c <xTimerCreateTimerTask>
 80173ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80173ee:	697b      	ldr	r3, [r7, #20]
 80173f0:	2b01      	cmp	r3, #1
 80173f2:	d11d      	bne.n	8017430 <vTaskStartScheduler+0x9c>
	__asm volatile
 80173f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173f8:	f383 8811 	msr	BASEPRI, r3
 80173fc:	f3bf 8f6f 	isb	sy
 8017400:	f3bf 8f4f 	dsb	sy
 8017404:	613b      	str	r3, [r7, #16]
}
 8017406:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017408:	4b16      	ldr	r3, [pc, #88]	; (8017464 <vTaskStartScheduler+0xd0>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	335c      	adds	r3, #92	; 0x5c
 801740e:	4a16      	ldr	r2, [pc, #88]	; (8017468 <vTaskStartScheduler+0xd4>)
 8017410:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017412:	4b16      	ldr	r3, [pc, #88]	; (801746c <vTaskStartScheduler+0xd8>)
 8017414:	f04f 32ff 	mov.w	r2, #4294967295
 8017418:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801741a:	4b15      	ldr	r3, [pc, #84]	; (8017470 <vTaskStartScheduler+0xdc>)
 801741c:	2201      	movs	r2, #1
 801741e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017420:	4b14      	ldr	r3, [pc, #80]	; (8017474 <vTaskStartScheduler+0xe0>)
 8017422:	2200      	movs	r2, #0
 8017424:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8017426:	f7f0 f869 	bl	80074fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801742a:	f001 fc81 	bl	8018d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801742e:	e00e      	b.n	801744e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017436:	d10a      	bne.n	801744e <vTaskStartScheduler+0xba>
	__asm volatile
 8017438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801743c:	f383 8811 	msr	BASEPRI, r3
 8017440:	f3bf 8f6f 	isb	sy
 8017444:	f3bf 8f4f 	dsb	sy
 8017448:	60fb      	str	r3, [r7, #12]
}
 801744a:	bf00      	nop
 801744c:	e7fe      	b.n	801744c <vTaskStartScheduler+0xb8>
}
 801744e:	bf00      	nop
 8017450:	3718      	adds	r7, #24
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	0801c110 	.word	0x0801c110
 801745c:	08017b41 	.word	0x08017b41
 8017460:	20003f2c 	.word	0x20003f2c
 8017464:	20003a34 	.word	0x20003a34
 8017468:	20000044 	.word	0x20000044
 801746c:	20003f28 	.word	0x20003f28
 8017470:	20003f14 	.word	0x20003f14
 8017474:	20003f0c 	.word	0x20003f0c

08017478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017478:	b480      	push	{r7}
 801747a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801747c:	4b04      	ldr	r3, [pc, #16]	; (8017490 <vTaskSuspendAll+0x18>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	3301      	adds	r3, #1
 8017482:	4a03      	ldr	r2, [pc, #12]	; (8017490 <vTaskSuspendAll+0x18>)
 8017484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017486:	bf00      	nop
 8017488:	46bd      	mov	sp, r7
 801748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748e:	4770      	bx	lr
 8017490:	20003f30 	.word	0x20003f30

08017494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b084      	sub	sp, #16
 8017498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801749a:	2300      	movs	r3, #0
 801749c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801749e:	2300      	movs	r3, #0
 80174a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80174a2:	4b42      	ldr	r3, [pc, #264]	; (80175ac <xTaskResumeAll+0x118>)
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d10a      	bne.n	80174c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80174aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ae:	f383 8811 	msr	BASEPRI, r3
 80174b2:	f3bf 8f6f 	isb	sy
 80174b6:	f3bf 8f4f 	dsb	sy
 80174ba:	603b      	str	r3, [r7, #0]
}
 80174bc:	bf00      	nop
 80174be:	e7fe      	b.n	80174be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80174c0:	f001 fcd8 	bl	8018e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80174c4:	4b39      	ldr	r3, [pc, #228]	; (80175ac <xTaskResumeAll+0x118>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	3b01      	subs	r3, #1
 80174ca:	4a38      	ldr	r2, [pc, #224]	; (80175ac <xTaskResumeAll+0x118>)
 80174cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80174ce:	4b37      	ldr	r3, [pc, #220]	; (80175ac <xTaskResumeAll+0x118>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d162      	bne.n	801759c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80174d6:	4b36      	ldr	r3, [pc, #216]	; (80175b0 <xTaskResumeAll+0x11c>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d05e      	beq.n	801759c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80174de:	e02f      	b.n	8017540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174e0:	4b34      	ldr	r3, [pc, #208]	; (80175b4 <xTaskResumeAll+0x120>)
 80174e2:	68db      	ldr	r3, [r3, #12]
 80174e4:	68db      	ldr	r3, [r3, #12]
 80174e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	3318      	adds	r3, #24
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7fe f989 	bl	8015804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	3304      	adds	r3, #4
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7fe f984 	bl	8015804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017500:	4b2d      	ldr	r3, [pc, #180]	; (80175b8 <xTaskResumeAll+0x124>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	429a      	cmp	r2, r3
 8017506:	d903      	bls.n	8017510 <xTaskResumeAll+0x7c>
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801750c:	4a2a      	ldr	r2, [pc, #168]	; (80175b8 <xTaskResumeAll+0x124>)
 801750e:	6013      	str	r3, [r2, #0]
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017514:	4613      	mov	r3, r2
 8017516:	009b      	lsls	r3, r3, #2
 8017518:	4413      	add	r3, r2
 801751a:	009b      	lsls	r3, r3, #2
 801751c:	4a27      	ldr	r2, [pc, #156]	; (80175bc <xTaskResumeAll+0x128>)
 801751e:	441a      	add	r2, r3
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	3304      	adds	r3, #4
 8017524:	4619      	mov	r1, r3
 8017526:	4610      	mov	r0, r2
 8017528:	f7fe f90f 	bl	801574a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017530:	4b23      	ldr	r3, [pc, #140]	; (80175c0 <xTaskResumeAll+0x12c>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017536:	429a      	cmp	r2, r3
 8017538:	d302      	bcc.n	8017540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801753a:	4b22      	ldr	r3, [pc, #136]	; (80175c4 <xTaskResumeAll+0x130>)
 801753c:	2201      	movs	r2, #1
 801753e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017540:	4b1c      	ldr	r3, [pc, #112]	; (80175b4 <xTaskResumeAll+0x120>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d1cb      	bne.n	80174e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d001      	beq.n	8017552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801754e:	f000 fbb1 	bl	8017cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017552:	4b1d      	ldr	r3, [pc, #116]	; (80175c8 <xTaskResumeAll+0x134>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d010      	beq.n	8017580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801755e:	f000 f847 	bl	80175f0 <xTaskIncrementTick>
 8017562:	4603      	mov	r3, r0
 8017564:	2b00      	cmp	r3, #0
 8017566:	d002      	beq.n	801756e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017568:	4b16      	ldr	r3, [pc, #88]	; (80175c4 <xTaskResumeAll+0x130>)
 801756a:	2201      	movs	r2, #1
 801756c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	3b01      	subs	r3, #1
 8017572:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d1f1      	bne.n	801755e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801757a:	4b13      	ldr	r3, [pc, #76]	; (80175c8 <xTaskResumeAll+0x134>)
 801757c:	2200      	movs	r2, #0
 801757e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017580:	4b10      	ldr	r3, [pc, #64]	; (80175c4 <xTaskResumeAll+0x130>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d009      	beq.n	801759c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017588:	2301      	movs	r3, #1
 801758a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801758c:	4b0f      	ldr	r3, [pc, #60]	; (80175cc <xTaskResumeAll+0x138>)
 801758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017592:	601a      	str	r2, [r3, #0]
 8017594:	f3bf 8f4f 	dsb	sy
 8017598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801759c:	f001 fc9a 	bl	8018ed4 <vPortExitCritical>

	return xAlreadyYielded;
 80175a0:	68bb      	ldr	r3, [r7, #8]
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3710      	adds	r7, #16
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	20003f30 	.word	0x20003f30
 80175b0:	20003f08 	.word	0x20003f08
 80175b4:	20003ec8 	.word	0x20003ec8
 80175b8:	20003f10 	.word	0x20003f10
 80175bc:	20003a38 	.word	0x20003a38
 80175c0:	20003a34 	.word	0x20003a34
 80175c4:	20003f1c 	.word	0x20003f1c
 80175c8:	20003f18 	.word	0x20003f18
 80175cc:	e000ed04 	.word	0xe000ed04

080175d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80175d0:	b480      	push	{r7}
 80175d2:	b083      	sub	sp, #12
 80175d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80175d6:	4b05      	ldr	r3, [pc, #20]	; (80175ec <xTaskGetTickCount+0x1c>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80175dc:	687b      	ldr	r3, [r7, #4]
}
 80175de:	4618      	mov	r0, r3
 80175e0:	370c      	adds	r7, #12
 80175e2:	46bd      	mov	sp, r7
 80175e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e8:	4770      	bx	lr
 80175ea:	bf00      	nop
 80175ec:	20003f0c 	.word	0x20003f0c

080175f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b086      	sub	sp, #24
 80175f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80175f6:	2300      	movs	r3, #0
 80175f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80175fa:	4b4f      	ldr	r3, [pc, #316]	; (8017738 <xTaskIncrementTick+0x148>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f040 808f 	bne.w	8017722 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017604:	4b4d      	ldr	r3, [pc, #308]	; (801773c <xTaskIncrementTick+0x14c>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	3301      	adds	r3, #1
 801760a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801760c:	4a4b      	ldr	r2, [pc, #300]	; (801773c <xTaskIncrementTick+0x14c>)
 801760e:	693b      	ldr	r3, [r7, #16]
 8017610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017612:	693b      	ldr	r3, [r7, #16]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d120      	bne.n	801765a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017618:	4b49      	ldr	r3, [pc, #292]	; (8017740 <xTaskIncrementTick+0x150>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d00a      	beq.n	8017638 <xTaskIncrementTick+0x48>
	__asm volatile
 8017622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017626:	f383 8811 	msr	BASEPRI, r3
 801762a:	f3bf 8f6f 	isb	sy
 801762e:	f3bf 8f4f 	dsb	sy
 8017632:	603b      	str	r3, [r7, #0]
}
 8017634:	bf00      	nop
 8017636:	e7fe      	b.n	8017636 <xTaskIncrementTick+0x46>
 8017638:	4b41      	ldr	r3, [pc, #260]	; (8017740 <xTaskIncrementTick+0x150>)
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	60fb      	str	r3, [r7, #12]
 801763e:	4b41      	ldr	r3, [pc, #260]	; (8017744 <xTaskIncrementTick+0x154>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	4a3f      	ldr	r2, [pc, #252]	; (8017740 <xTaskIncrementTick+0x150>)
 8017644:	6013      	str	r3, [r2, #0]
 8017646:	4a3f      	ldr	r2, [pc, #252]	; (8017744 <xTaskIncrementTick+0x154>)
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	6013      	str	r3, [r2, #0]
 801764c:	4b3e      	ldr	r3, [pc, #248]	; (8017748 <xTaskIncrementTick+0x158>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	3301      	adds	r3, #1
 8017652:	4a3d      	ldr	r2, [pc, #244]	; (8017748 <xTaskIncrementTick+0x158>)
 8017654:	6013      	str	r3, [r2, #0]
 8017656:	f000 fb2d 	bl	8017cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801765a:	4b3c      	ldr	r3, [pc, #240]	; (801774c <xTaskIncrementTick+0x15c>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	693a      	ldr	r2, [r7, #16]
 8017660:	429a      	cmp	r2, r3
 8017662:	d349      	bcc.n	80176f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017664:	4b36      	ldr	r3, [pc, #216]	; (8017740 <xTaskIncrementTick+0x150>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d104      	bne.n	8017678 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801766e:	4b37      	ldr	r3, [pc, #220]	; (801774c <xTaskIncrementTick+0x15c>)
 8017670:	f04f 32ff 	mov.w	r2, #4294967295
 8017674:	601a      	str	r2, [r3, #0]
					break;
 8017676:	e03f      	b.n	80176f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017678:	4b31      	ldr	r3, [pc, #196]	; (8017740 <xTaskIncrementTick+0x150>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	68db      	ldr	r3, [r3, #12]
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017688:	693a      	ldr	r2, [r7, #16]
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	429a      	cmp	r2, r3
 801768e:	d203      	bcs.n	8017698 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017690:	4a2e      	ldr	r2, [pc, #184]	; (801774c <xTaskIncrementTick+0x15c>)
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017696:	e02f      	b.n	80176f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	3304      	adds	r3, #4
 801769c:	4618      	mov	r0, r3
 801769e:	f7fe f8b1 	bl	8015804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d004      	beq.n	80176b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	3318      	adds	r3, #24
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7fe f8a8 	bl	8015804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b8:	4b25      	ldr	r3, [pc, #148]	; (8017750 <xTaskIncrementTick+0x160>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	429a      	cmp	r2, r3
 80176be:	d903      	bls.n	80176c8 <xTaskIncrementTick+0xd8>
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c4:	4a22      	ldr	r2, [pc, #136]	; (8017750 <xTaskIncrementTick+0x160>)
 80176c6:	6013      	str	r3, [r2, #0]
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176cc:	4613      	mov	r3, r2
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	4413      	add	r3, r2
 80176d2:	009b      	lsls	r3, r3, #2
 80176d4:	4a1f      	ldr	r2, [pc, #124]	; (8017754 <xTaskIncrementTick+0x164>)
 80176d6:	441a      	add	r2, r3
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	3304      	adds	r3, #4
 80176dc:	4619      	mov	r1, r3
 80176de:	4610      	mov	r0, r2
 80176e0:	f7fe f833 	bl	801574a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176e8:	4b1b      	ldr	r3, [pc, #108]	; (8017758 <xTaskIncrementTick+0x168>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d3b8      	bcc.n	8017664 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80176f2:	2301      	movs	r3, #1
 80176f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80176f6:	e7b5      	b.n	8017664 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80176f8:	4b17      	ldr	r3, [pc, #92]	; (8017758 <xTaskIncrementTick+0x168>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176fe:	4915      	ldr	r1, [pc, #84]	; (8017754 <xTaskIncrementTick+0x164>)
 8017700:	4613      	mov	r3, r2
 8017702:	009b      	lsls	r3, r3, #2
 8017704:	4413      	add	r3, r2
 8017706:	009b      	lsls	r3, r3, #2
 8017708:	440b      	add	r3, r1
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2b01      	cmp	r3, #1
 801770e:	d901      	bls.n	8017714 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017710:	2301      	movs	r3, #1
 8017712:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017714:	4b11      	ldr	r3, [pc, #68]	; (801775c <xTaskIncrementTick+0x16c>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d007      	beq.n	801772c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801771c:	2301      	movs	r3, #1
 801771e:	617b      	str	r3, [r7, #20]
 8017720:	e004      	b.n	801772c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017722:	4b0f      	ldr	r3, [pc, #60]	; (8017760 <xTaskIncrementTick+0x170>)
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	3301      	adds	r3, #1
 8017728:	4a0d      	ldr	r2, [pc, #52]	; (8017760 <xTaskIncrementTick+0x170>)
 801772a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801772c:	697b      	ldr	r3, [r7, #20]
}
 801772e:	4618      	mov	r0, r3
 8017730:	3718      	adds	r7, #24
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	20003f30 	.word	0x20003f30
 801773c:	20003f0c 	.word	0x20003f0c
 8017740:	20003ec0 	.word	0x20003ec0
 8017744:	20003ec4 	.word	0x20003ec4
 8017748:	20003f20 	.word	0x20003f20
 801774c:	20003f28 	.word	0x20003f28
 8017750:	20003f10 	.word	0x20003f10
 8017754:	20003a38 	.word	0x20003a38
 8017758:	20003a34 	.word	0x20003a34
 801775c:	20003f1c 	.word	0x20003f1c
 8017760:	20003f18 	.word	0x20003f18

08017764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b084      	sub	sp, #16
 8017768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801776a:	4b3e      	ldr	r3, [pc, #248]	; (8017864 <vTaskSwitchContext+0x100>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d003      	beq.n	801777a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017772:	4b3d      	ldr	r3, [pc, #244]	; (8017868 <vTaskSwitchContext+0x104>)
 8017774:	2201      	movs	r2, #1
 8017776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017778:	e070      	b.n	801785c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801777a:	4b3b      	ldr	r3, [pc, #236]	; (8017868 <vTaskSwitchContext+0x104>)
 801777c:	2200      	movs	r2, #0
 801777e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8017780:	f7f5 fad6 	bl	800cd30 <getRunTimeCounterValue>
 8017784:	4603      	mov	r3, r0
 8017786:	4a39      	ldr	r2, [pc, #228]	; (801786c <vTaskSwitchContext+0x108>)
 8017788:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801778a:	4b38      	ldr	r3, [pc, #224]	; (801786c <vTaskSwitchContext+0x108>)
 801778c:	681a      	ldr	r2, [r3, #0]
 801778e:	4b38      	ldr	r3, [pc, #224]	; (8017870 <vTaskSwitchContext+0x10c>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	429a      	cmp	r2, r3
 8017794:	d909      	bls.n	80177aa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8017796:	4b37      	ldr	r3, [pc, #220]	; (8017874 <vTaskSwitchContext+0x110>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801779c:	4a33      	ldr	r2, [pc, #204]	; (801786c <vTaskSwitchContext+0x108>)
 801779e:	6810      	ldr	r0, [r2, #0]
 80177a0:	4a33      	ldr	r2, [pc, #204]	; (8017870 <vTaskSwitchContext+0x10c>)
 80177a2:	6812      	ldr	r2, [r2, #0]
 80177a4:	1a82      	subs	r2, r0, r2
 80177a6:	440a      	add	r2, r1
 80177a8:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80177aa:	4b30      	ldr	r3, [pc, #192]	; (801786c <vTaskSwitchContext+0x108>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	4a30      	ldr	r2, [pc, #192]	; (8017870 <vTaskSwitchContext+0x10c>)
 80177b0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80177b2:	4b30      	ldr	r3, [pc, #192]	; (8017874 <vTaskSwitchContext+0x110>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	681a      	ldr	r2, [r3, #0]
 80177b8:	4b2e      	ldr	r3, [pc, #184]	; (8017874 <vTaskSwitchContext+0x110>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177be:	429a      	cmp	r2, r3
 80177c0:	d808      	bhi.n	80177d4 <vTaskSwitchContext+0x70>
 80177c2:	4b2c      	ldr	r3, [pc, #176]	; (8017874 <vTaskSwitchContext+0x110>)
 80177c4:	681a      	ldr	r2, [r3, #0]
 80177c6:	4b2b      	ldr	r3, [pc, #172]	; (8017874 <vTaskSwitchContext+0x110>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	3334      	adds	r3, #52	; 0x34
 80177cc:	4619      	mov	r1, r3
 80177ce:	4610      	mov	r0, r2
 80177d0:	f7ef fe9b 	bl	800750a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177d4:	4b28      	ldr	r3, [pc, #160]	; (8017878 <vTaskSwitchContext+0x114>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	60fb      	str	r3, [r7, #12]
 80177da:	e010      	b.n	80177fe <vTaskSwitchContext+0x9a>
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d10a      	bne.n	80177f8 <vTaskSwitchContext+0x94>
	__asm volatile
 80177e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e6:	f383 8811 	msr	BASEPRI, r3
 80177ea:	f3bf 8f6f 	isb	sy
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	607b      	str	r3, [r7, #4]
}
 80177f4:	bf00      	nop
 80177f6:	e7fe      	b.n	80177f6 <vTaskSwitchContext+0x92>
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	3b01      	subs	r3, #1
 80177fc:	60fb      	str	r3, [r7, #12]
 80177fe:	491f      	ldr	r1, [pc, #124]	; (801787c <vTaskSwitchContext+0x118>)
 8017800:	68fa      	ldr	r2, [r7, #12]
 8017802:	4613      	mov	r3, r2
 8017804:	009b      	lsls	r3, r3, #2
 8017806:	4413      	add	r3, r2
 8017808:	009b      	lsls	r3, r3, #2
 801780a:	440b      	add	r3, r1
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d0e4      	beq.n	80177dc <vTaskSwitchContext+0x78>
 8017812:	68fa      	ldr	r2, [r7, #12]
 8017814:	4613      	mov	r3, r2
 8017816:	009b      	lsls	r3, r3, #2
 8017818:	4413      	add	r3, r2
 801781a:	009b      	lsls	r3, r3, #2
 801781c:	4a17      	ldr	r2, [pc, #92]	; (801787c <vTaskSwitchContext+0x118>)
 801781e:	4413      	add	r3, r2
 8017820:	60bb      	str	r3, [r7, #8]
 8017822:	68bb      	ldr	r3, [r7, #8]
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	685a      	ldr	r2, [r3, #4]
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	605a      	str	r2, [r3, #4]
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	685a      	ldr	r2, [r3, #4]
 8017830:	68bb      	ldr	r3, [r7, #8]
 8017832:	3308      	adds	r3, #8
 8017834:	429a      	cmp	r2, r3
 8017836:	d104      	bne.n	8017842 <vTaskSwitchContext+0xde>
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	685a      	ldr	r2, [r3, #4]
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	605a      	str	r2, [r3, #4]
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	68db      	ldr	r3, [r3, #12]
 8017848:	4a0a      	ldr	r2, [pc, #40]	; (8017874 <vTaskSwitchContext+0x110>)
 801784a:	6013      	str	r3, [r2, #0]
 801784c:	4a0a      	ldr	r2, [pc, #40]	; (8017878 <vTaskSwitchContext+0x114>)
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017852:	4b08      	ldr	r3, [pc, #32]	; (8017874 <vTaskSwitchContext+0x110>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	335c      	adds	r3, #92	; 0x5c
 8017858:	4a09      	ldr	r2, [pc, #36]	; (8017880 <vTaskSwitchContext+0x11c>)
 801785a:	6013      	str	r3, [r2, #0]
}
 801785c:	bf00      	nop
 801785e:	3710      	adds	r7, #16
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}
 8017864:	20003f30 	.word	0x20003f30
 8017868:	20003f1c 	.word	0x20003f1c
 801786c:	20003f38 	.word	0x20003f38
 8017870:	20003f34 	.word	0x20003f34
 8017874:	20003a34 	.word	0x20003a34
 8017878:	20003f10 	.word	0x20003f10
 801787c:	20003a38 	.word	0x20003a38
 8017880:	20000044 	.word	0x20000044

08017884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d10a      	bne.n	80178aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017898:	f383 8811 	msr	BASEPRI, r3
 801789c:	f3bf 8f6f 	isb	sy
 80178a0:	f3bf 8f4f 	dsb	sy
 80178a4:	60fb      	str	r3, [r7, #12]
}
 80178a6:	bf00      	nop
 80178a8:	e7fe      	b.n	80178a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80178aa:	4b07      	ldr	r3, [pc, #28]	; (80178c8 <vTaskPlaceOnEventList+0x44>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	3318      	adds	r3, #24
 80178b0:	4619      	mov	r1, r3
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7fd ff6d 	bl	8015792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80178b8:	2101      	movs	r1, #1
 80178ba:	6838      	ldr	r0, [r7, #0]
 80178bc:	f000 fe0a 	bl	80184d4 <prvAddCurrentTaskToDelayedList>
}
 80178c0:	bf00      	nop
 80178c2:	3710      	adds	r7, #16
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	20003a34 	.word	0x20003a34

080178cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b086      	sub	sp, #24
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60f8      	str	r0, [r7, #12]
 80178d4:	60b9      	str	r1, [r7, #8]
 80178d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d10a      	bne.n	80178f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80178de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178e2:	f383 8811 	msr	BASEPRI, r3
 80178e6:	f3bf 8f6f 	isb	sy
 80178ea:	f3bf 8f4f 	dsb	sy
 80178ee:	617b      	str	r3, [r7, #20]
}
 80178f0:	bf00      	nop
 80178f2:	e7fe      	b.n	80178f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80178f4:	4b0a      	ldr	r3, [pc, #40]	; (8017920 <vTaskPlaceOnEventListRestricted+0x54>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	3318      	adds	r3, #24
 80178fa:	4619      	mov	r1, r3
 80178fc:	68f8      	ldr	r0, [r7, #12]
 80178fe:	f7fd ff24 	bl	801574a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d002      	beq.n	801790e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017908:	f04f 33ff 	mov.w	r3, #4294967295
 801790c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801790e:	6879      	ldr	r1, [r7, #4]
 8017910:	68b8      	ldr	r0, [r7, #8]
 8017912:	f000 fddf 	bl	80184d4 <prvAddCurrentTaskToDelayedList>
	}
 8017916:	bf00      	nop
 8017918:	3718      	adds	r7, #24
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
 801791e:	bf00      	nop
 8017920:	20003a34 	.word	0x20003a34

08017924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b086      	sub	sp, #24
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	68db      	ldr	r3, [r3, #12]
 8017930:	68db      	ldr	r3, [r3, #12]
 8017932:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017934:	693b      	ldr	r3, [r7, #16]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d10a      	bne.n	8017950 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793e:	f383 8811 	msr	BASEPRI, r3
 8017942:	f3bf 8f6f 	isb	sy
 8017946:	f3bf 8f4f 	dsb	sy
 801794a:	60fb      	str	r3, [r7, #12]
}
 801794c:	bf00      	nop
 801794e:	e7fe      	b.n	801794e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017950:	693b      	ldr	r3, [r7, #16]
 8017952:	3318      	adds	r3, #24
 8017954:	4618      	mov	r0, r3
 8017956:	f7fd ff55 	bl	8015804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801795a:	4b1e      	ldr	r3, [pc, #120]	; (80179d4 <xTaskRemoveFromEventList+0xb0>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d11d      	bne.n	801799e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017962:	693b      	ldr	r3, [r7, #16]
 8017964:	3304      	adds	r3, #4
 8017966:	4618      	mov	r0, r3
 8017968:	f7fd ff4c 	bl	8015804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017970:	4b19      	ldr	r3, [pc, #100]	; (80179d8 <xTaskRemoveFromEventList+0xb4>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	429a      	cmp	r2, r3
 8017976:	d903      	bls.n	8017980 <xTaskRemoveFromEventList+0x5c>
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801797c:	4a16      	ldr	r2, [pc, #88]	; (80179d8 <xTaskRemoveFromEventList+0xb4>)
 801797e:	6013      	str	r3, [r2, #0]
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017984:	4613      	mov	r3, r2
 8017986:	009b      	lsls	r3, r3, #2
 8017988:	4413      	add	r3, r2
 801798a:	009b      	lsls	r3, r3, #2
 801798c:	4a13      	ldr	r2, [pc, #76]	; (80179dc <xTaskRemoveFromEventList+0xb8>)
 801798e:	441a      	add	r2, r3
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	3304      	adds	r3, #4
 8017994:	4619      	mov	r1, r3
 8017996:	4610      	mov	r0, r2
 8017998:	f7fd fed7 	bl	801574a <vListInsertEnd>
 801799c:	e005      	b.n	80179aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	3318      	adds	r3, #24
 80179a2:	4619      	mov	r1, r3
 80179a4:	480e      	ldr	r0, [pc, #56]	; (80179e0 <xTaskRemoveFromEventList+0xbc>)
 80179a6:	f7fd fed0 	bl	801574a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ae:	4b0d      	ldr	r3, [pc, #52]	; (80179e4 <xTaskRemoveFromEventList+0xc0>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d905      	bls.n	80179c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80179b8:	2301      	movs	r3, #1
 80179ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80179bc:	4b0a      	ldr	r3, [pc, #40]	; (80179e8 <xTaskRemoveFromEventList+0xc4>)
 80179be:	2201      	movs	r2, #1
 80179c0:	601a      	str	r2, [r3, #0]
 80179c2:	e001      	b.n	80179c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80179c4:	2300      	movs	r3, #0
 80179c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80179c8:	697b      	ldr	r3, [r7, #20]
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3718      	adds	r7, #24
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	20003f30 	.word	0x20003f30
 80179d8:	20003f10 	.word	0x20003f10
 80179dc:	20003a38 	.word	0x20003a38
 80179e0:	20003ec8 	.word	0x20003ec8
 80179e4:	20003a34 	.word	0x20003a34
 80179e8:	20003f1c 	.word	0x20003f1c

080179ec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b084      	sub	sp, #16
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d10a      	bne.n	8017a10 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80179fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179fe:	f383 8811 	msr	BASEPRI, r3
 8017a02:	f3bf 8f6f 	isb	sy
 8017a06:	f3bf 8f4f 	dsb	sy
 8017a0a:	60fb      	str	r3, [r7, #12]
}
 8017a0c:	bf00      	nop
 8017a0e:	e7fe      	b.n	8017a0e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8017a10:	f001 fa30 	bl	8018e74 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017a14:	4b06      	ldr	r3, [pc, #24]	; (8017a30 <vTaskSetTimeOutState+0x44>)
 8017a16:	681a      	ldr	r2, [r3, #0]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8017a1c:	4b05      	ldr	r3, [pc, #20]	; (8017a34 <vTaskSetTimeOutState+0x48>)
 8017a1e:	681a      	ldr	r2, [r3, #0]
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8017a24:	f001 fa56 	bl	8018ed4 <vPortExitCritical>
}
 8017a28:	bf00      	nop
 8017a2a:	3710      	adds	r7, #16
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}
 8017a30:	20003f20 	.word	0x20003f20
 8017a34:	20003f0c 	.word	0x20003f0c

08017a38 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017a38:	b480      	push	{r7}
 8017a3a:	b083      	sub	sp, #12
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017a40:	4b06      	ldr	r3, [pc, #24]	; (8017a5c <vTaskInternalSetTimeOutState+0x24>)
 8017a42:	681a      	ldr	r2, [r3, #0]
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017a48:	4b05      	ldr	r3, [pc, #20]	; (8017a60 <vTaskInternalSetTimeOutState+0x28>)
 8017a4a:	681a      	ldr	r2, [r3, #0]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	605a      	str	r2, [r3, #4]
}
 8017a50:	bf00      	nop
 8017a52:	370c      	adds	r7, #12
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr
 8017a5c:	20003f20 	.word	0x20003f20
 8017a60:	20003f0c 	.word	0x20003f0c

08017a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b088      	sub	sp, #32
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d10a      	bne.n	8017a8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a78:	f383 8811 	msr	BASEPRI, r3
 8017a7c:	f3bf 8f6f 	isb	sy
 8017a80:	f3bf 8f4f 	dsb	sy
 8017a84:	613b      	str	r3, [r7, #16]
}
 8017a86:	bf00      	nop
 8017a88:	e7fe      	b.n	8017a88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017a8a:	683b      	ldr	r3, [r7, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d10a      	bne.n	8017aa6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a94:	f383 8811 	msr	BASEPRI, r3
 8017a98:	f3bf 8f6f 	isb	sy
 8017a9c:	f3bf 8f4f 	dsb	sy
 8017aa0:	60fb      	str	r3, [r7, #12]
}
 8017aa2:	bf00      	nop
 8017aa4:	e7fe      	b.n	8017aa4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017aa6:	f001 f9e5 	bl	8018e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017aaa:	4b1d      	ldr	r3, [pc, #116]	; (8017b20 <xTaskCheckForTimeOut+0xbc>)
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	69ba      	ldr	r2, [r7, #24]
 8017ab6:	1ad3      	subs	r3, r2, r3
 8017ab8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ac2:	d102      	bne.n	8017aca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	61fb      	str	r3, [r7, #28]
 8017ac8:	e023      	b.n	8017b12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681a      	ldr	r2, [r3, #0]
 8017ace:	4b15      	ldr	r3, [pc, #84]	; (8017b24 <xTaskCheckForTimeOut+0xc0>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d007      	beq.n	8017ae6 <xTaskCheckForTimeOut+0x82>
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	69ba      	ldr	r2, [r7, #24]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d302      	bcc.n	8017ae6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	61fb      	str	r3, [r7, #28]
 8017ae4:	e015      	b.n	8017b12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	697a      	ldr	r2, [r7, #20]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d20b      	bcs.n	8017b08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	681a      	ldr	r2, [r3, #0]
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	1ad2      	subs	r2, r2, r3
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f7ff ff9b 	bl	8017a38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017b02:	2300      	movs	r3, #0
 8017b04:	61fb      	str	r3, [r7, #28]
 8017b06:	e004      	b.n	8017b12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017b12:	f001 f9df 	bl	8018ed4 <vPortExitCritical>

	return xReturn;
 8017b16:	69fb      	ldr	r3, [r7, #28]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3720      	adds	r7, #32
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	20003f0c 	.word	0x20003f0c
 8017b24:	20003f20 	.word	0x20003f20

08017b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017b28:	b480      	push	{r7}
 8017b2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017b2c:	4b03      	ldr	r3, [pc, #12]	; (8017b3c <vTaskMissedYield+0x14>)
 8017b2e:	2201      	movs	r2, #1
 8017b30:	601a      	str	r2, [r3, #0]
}
 8017b32:	bf00      	nop
 8017b34:	46bd      	mov	sp, r7
 8017b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3a:	4770      	bx	lr
 8017b3c:	20003f1c 	.word	0x20003f1c

08017b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017b48:	f000 f852 	bl	8017bf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017b4c:	4b06      	ldr	r3, [pc, #24]	; (8017b68 <prvIdleTask+0x28>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2b01      	cmp	r3, #1
 8017b52:	d9f9      	bls.n	8017b48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017b54:	4b05      	ldr	r3, [pc, #20]	; (8017b6c <prvIdleTask+0x2c>)
 8017b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b5a:	601a      	str	r2, [r3, #0]
 8017b5c:	f3bf 8f4f 	dsb	sy
 8017b60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017b64:	e7f0      	b.n	8017b48 <prvIdleTask+0x8>
 8017b66:	bf00      	nop
 8017b68:	20003a38 	.word	0x20003a38
 8017b6c:	e000ed04 	.word	0xe000ed04

08017b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017b76:	2300      	movs	r3, #0
 8017b78:	607b      	str	r3, [r7, #4]
 8017b7a:	e00c      	b.n	8017b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017b7c:	687a      	ldr	r2, [r7, #4]
 8017b7e:	4613      	mov	r3, r2
 8017b80:	009b      	lsls	r3, r3, #2
 8017b82:	4413      	add	r3, r2
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	4a12      	ldr	r2, [pc, #72]	; (8017bd0 <prvInitialiseTaskLists+0x60>)
 8017b88:	4413      	add	r3, r2
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7fd fdb0 	bl	80156f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	3301      	adds	r3, #1
 8017b94:	607b      	str	r3, [r7, #4]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2b37      	cmp	r3, #55	; 0x37
 8017b9a:	d9ef      	bls.n	8017b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017b9c:	480d      	ldr	r0, [pc, #52]	; (8017bd4 <prvInitialiseTaskLists+0x64>)
 8017b9e:	f7fd fda7 	bl	80156f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017ba2:	480d      	ldr	r0, [pc, #52]	; (8017bd8 <prvInitialiseTaskLists+0x68>)
 8017ba4:	f7fd fda4 	bl	80156f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017ba8:	480c      	ldr	r0, [pc, #48]	; (8017bdc <prvInitialiseTaskLists+0x6c>)
 8017baa:	f7fd fda1 	bl	80156f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017bae:	480c      	ldr	r0, [pc, #48]	; (8017be0 <prvInitialiseTaskLists+0x70>)
 8017bb0:	f7fd fd9e 	bl	80156f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017bb4:	480b      	ldr	r0, [pc, #44]	; (8017be4 <prvInitialiseTaskLists+0x74>)
 8017bb6:	f7fd fd9b 	bl	80156f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017bba:	4b0b      	ldr	r3, [pc, #44]	; (8017be8 <prvInitialiseTaskLists+0x78>)
 8017bbc:	4a05      	ldr	r2, [pc, #20]	; (8017bd4 <prvInitialiseTaskLists+0x64>)
 8017bbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017bc0:	4b0a      	ldr	r3, [pc, #40]	; (8017bec <prvInitialiseTaskLists+0x7c>)
 8017bc2:	4a05      	ldr	r2, [pc, #20]	; (8017bd8 <prvInitialiseTaskLists+0x68>)
 8017bc4:	601a      	str	r2, [r3, #0]
}
 8017bc6:	bf00      	nop
 8017bc8:	3708      	adds	r7, #8
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	20003a38 	.word	0x20003a38
 8017bd4:	20003e98 	.word	0x20003e98
 8017bd8:	20003eac 	.word	0x20003eac
 8017bdc:	20003ec8 	.word	0x20003ec8
 8017be0:	20003edc 	.word	0x20003edc
 8017be4:	20003ef4 	.word	0x20003ef4
 8017be8:	20003ec0 	.word	0x20003ec0
 8017bec:	20003ec4 	.word	0x20003ec4

08017bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017bf6:	e019      	b.n	8017c2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017bf8:	f001 f93c 	bl	8018e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bfc:	4b10      	ldr	r3, [pc, #64]	; (8017c40 <prvCheckTasksWaitingTermination+0x50>)
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	68db      	ldr	r3, [r3, #12]
 8017c02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	3304      	adds	r3, #4
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7fd fdfb 	bl	8015804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017c0e:	4b0d      	ldr	r3, [pc, #52]	; (8017c44 <prvCheckTasksWaitingTermination+0x54>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	3b01      	subs	r3, #1
 8017c14:	4a0b      	ldr	r2, [pc, #44]	; (8017c44 <prvCheckTasksWaitingTermination+0x54>)
 8017c16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017c18:	4b0b      	ldr	r3, [pc, #44]	; (8017c48 <prvCheckTasksWaitingTermination+0x58>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	3b01      	subs	r3, #1
 8017c1e:	4a0a      	ldr	r2, [pc, #40]	; (8017c48 <prvCheckTasksWaitingTermination+0x58>)
 8017c20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017c22:	f001 f957 	bl	8018ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f000 f810 	bl	8017c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017c2c:	4b06      	ldr	r3, [pc, #24]	; (8017c48 <prvCheckTasksWaitingTermination+0x58>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d1e1      	bne.n	8017bf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017c34:	bf00      	nop
 8017c36:	bf00      	nop
 8017c38:	3708      	adds	r7, #8
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	20003edc 	.word	0x20003edc
 8017c44:	20003f08 	.word	0x20003f08
 8017c48:	20003ef0 	.word	0x20003ef0

08017c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	335c      	adds	r3, #92	; 0x5c
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f003 f9b1 	bl	801afc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d108      	bne.n	8017c7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f001 faf3 	bl	8019258 <vPortFree>
				vPortFree( pxTCB );
 8017c72:	6878      	ldr	r0, [r7, #4]
 8017c74:	f001 faf0 	bl	8019258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017c78:	e018      	b.n	8017cac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d103      	bne.n	8017c8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017c84:	6878      	ldr	r0, [r7, #4]
 8017c86:	f001 fae7 	bl	8019258 <vPortFree>
	}
 8017c8a:	e00f      	b.n	8017cac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8017c92:	2b02      	cmp	r3, #2
 8017c94:	d00a      	beq.n	8017cac <prvDeleteTCB+0x60>
	__asm volatile
 8017c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c9a:	f383 8811 	msr	BASEPRI, r3
 8017c9e:	f3bf 8f6f 	isb	sy
 8017ca2:	f3bf 8f4f 	dsb	sy
 8017ca6:	60fb      	str	r3, [r7, #12]
}
 8017ca8:	bf00      	nop
 8017caa:	e7fe      	b.n	8017caa <prvDeleteTCB+0x5e>
	}
 8017cac:	bf00      	nop
 8017cae:	3710      	adds	r7, #16
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017cb4:	b480      	push	{r7}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017cba:	4b0c      	ldr	r3, [pc, #48]	; (8017cec <prvResetNextTaskUnblockTime+0x38>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d104      	bne.n	8017cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017cc4:	4b0a      	ldr	r3, [pc, #40]	; (8017cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8017cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8017cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017ccc:	e008      	b.n	8017ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017cce:	4b07      	ldr	r3, [pc, #28]	; (8017cec <prvResetNextTaskUnblockTime+0x38>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	68db      	ldr	r3, [r3, #12]
 8017cd4:	68db      	ldr	r3, [r3, #12]
 8017cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	685b      	ldr	r3, [r3, #4]
 8017cdc:	4a04      	ldr	r2, [pc, #16]	; (8017cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8017cde:	6013      	str	r3, [r2, #0]
}
 8017ce0:	bf00      	nop
 8017ce2:	370c      	adds	r7, #12
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cea:	4770      	bx	lr
 8017cec:	20003ec0 	.word	0x20003ec0
 8017cf0:	20003f28 	.word	0x20003f28

08017cf4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017cf4:	b480      	push	{r7}
 8017cf6:	b083      	sub	sp, #12
 8017cf8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017cfa:	4b05      	ldr	r3, [pc, #20]	; (8017d10 <xTaskGetCurrentTaskHandle+0x1c>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017d00:	687b      	ldr	r3, [r7, #4]
	}
 8017d02:	4618      	mov	r0, r3
 8017d04:	370c      	adds	r7, #12
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop
 8017d10:	20003a34 	.word	0x20003a34

08017d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017d14:	b480      	push	{r7}
 8017d16:	b083      	sub	sp, #12
 8017d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017d1a:	4b0b      	ldr	r3, [pc, #44]	; (8017d48 <xTaskGetSchedulerState+0x34>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d102      	bne.n	8017d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017d22:	2301      	movs	r3, #1
 8017d24:	607b      	str	r3, [r7, #4]
 8017d26:	e008      	b.n	8017d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d28:	4b08      	ldr	r3, [pc, #32]	; (8017d4c <xTaskGetSchedulerState+0x38>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d102      	bne.n	8017d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017d30:	2302      	movs	r3, #2
 8017d32:	607b      	str	r3, [r7, #4]
 8017d34:	e001      	b.n	8017d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017d36:	2300      	movs	r3, #0
 8017d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017d3a:	687b      	ldr	r3, [r7, #4]
	}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	370c      	adds	r7, #12
 8017d40:	46bd      	mov	sp, r7
 8017d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d46:	4770      	bx	lr
 8017d48:	20003f14 	.word	0x20003f14
 8017d4c:	20003f30 	.word	0x20003f30

08017d50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b084      	sub	sp, #16
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d051      	beq.n	8017e0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d6a:	4b2a      	ldr	r3, [pc, #168]	; (8017e14 <xTaskPriorityInherit+0xc4>)
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d241      	bcs.n	8017df8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	699b      	ldr	r3, [r3, #24]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	db06      	blt.n	8017d8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d7c:	4b25      	ldr	r3, [pc, #148]	; (8017e14 <xTaskPriorityInherit+0xc4>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	6959      	ldr	r1, [r3, #20]
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d92:	4613      	mov	r3, r2
 8017d94:	009b      	lsls	r3, r3, #2
 8017d96:	4413      	add	r3, r2
 8017d98:	009b      	lsls	r3, r3, #2
 8017d9a:	4a1f      	ldr	r2, [pc, #124]	; (8017e18 <xTaskPriorityInherit+0xc8>)
 8017d9c:	4413      	add	r3, r2
 8017d9e:	4299      	cmp	r1, r3
 8017da0:	d122      	bne.n	8017de8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017da2:	68bb      	ldr	r3, [r7, #8]
 8017da4:	3304      	adds	r3, #4
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fd fd2c 	bl	8015804 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017dac:	4b19      	ldr	r3, [pc, #100]	; (8017e14 <xTaskPriorityInherit+0xc4>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dba:	4b18      	ldr	r3, [pc, #96]	; (8017e1c <xTaskPriorityInherit+0xcc>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d903      	bls.n	8017dca <xTaskPriorityInherit+0x7a>
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc6:	4a15      	ldr	r2, [pc, #84]	; (8017e1c <xTaskPriorityInherit+0xcc>)
 8017dc8:	6013      	str	r3, [r2, #0]
 8017dca:	68bb      	ldr	r3, [r7, #8]
 8017dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dce:	4613      	mov	r3, r2
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	4413      	add	r3, r2
 8017dd4:	009b      	lsls	r3, r3, #2
 8017dd6:	4a10      	ldr	r2, [pc, #64]	; (8017e18 <xTaskPriorityInherit+0xc8>)
 8017dd8:	441a      	add	r2, r3
 8017dda:	68bb      	ldr	r3, [r7, #8]
 8017ddc:	3304      	adds	r3, #4
 8017dde:	4619      	mov	r1, r3
 8017de0:	4610      	mov	r0, r2
 8017de2:	f7fd fcb2 	bl	801574a <vListInsertEnd>
 8017de6:	e004      	b.n	8017df2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017de8:	4b0a      	ldr	r3, [pc, #40]	; (8017e14 <xTaskPriorityInherit+0xc4>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017df2:	2301      	movs	r3, #1
 8017df4:	60fb      	str	r3, [r7, #12]
 8017df6:	e008      	b.n	8017e0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017dfc:	4b05      	ldr	r3, [pc, #20]	; (8017e14 <xTaskPriorityInherit+0xc4>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d201      	bcs.n	8017e0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017e06:	2301      	movs	r3, #1
 8017e08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
	}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3710      	adds	r7, #16
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}
 8017e14:	20003a34 	.word	0x20003a34
 8017e18:	20003a38 	.word	0x20003a38
 8017e1c:	20003f10 	.word	0x20003f10

08017e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b086      	sub	sp, #24
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d056      	beq.n	8017ee4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017e36:	4b2e      	ldr	r3, [pc, #184]	; (8017ef0 <xTaskPriorityDisinherit+0xd0>)
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	693a      	ldr	r2, [r7, #16]
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d00a      	beq.n	8017e56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e44:	f383 8811 	msr	BASEPRI, r3
 8017e48:	f3bf 8f6f 	isb	sy
 8017e4c:	f3bf 8f4f 	dsb	sy
 8017e50:	60fb      	str	r3, [r7, #12]
}
 8017e52:	bf00      	nop
 8017e54:	e7fe      	b.n	8017e54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d10a      	bne.n	8017e74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e62:	f383 8811 	msr	BASEPRI, r3
 8017e66:	f3bf 8f6f 	isb	sy
 8017e6a:	f3bf 8f4f 	dsb	sy
 8017e6e:	60bb      	str	r3, [r7, #8]
}
 8017e70:	bf00      	nop
 8017e72:	e7fe      	b.n	8017e72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017e74:	693b      	ldr	r3, [r7, #16]
 8017e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e78:	1e5a      	subs	r2, r3, #1
 8017e7a:	693b      	ldr	r3, [r7, #16]
 8017e7c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d02c      	beq.n	8017ee4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d128      	bne.n	8017ee4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	3304      	adds	r3, #4
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fd fcb4 	bl	8015804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ea4:	693b      	ldr	r3, [r7, #16]
 8017ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ea8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017eb4:	4b0f      	ldr	r3, [pc, #60]	; (8017ef4 <xTaskPriorityDisinherit+0xd4>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	d903      	bls.n	8017ec4 <xTaskPriorityDisinherit+0xa4>
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ec0:	4a0c      	ldr	r2, [pc, #48]	; (8017ef4 <xTaskPriorityDisinherit+0xd4>)
 8017ec2:	6013      	str	r3, [r2, #0]
 8017ec4:	693b      	ldr	r3, [r7, #16]
 8017ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ec8:	4613      	mov	r3, r2
 8017eca:	009b      	lsls	r3, r3, #2
 8017ecc:	4413      	add	r3, r2
 8017ece:	009b      	lsls	r3, r3, #2
 8017ed0:	4a09      	ldr	r2, [pc, #36]	; (8017ef8 <xTaskPriorityDisinherit+0xd8>)
 8017ed2:	441a      	add	r2, r3
 8017ed4:	693b      	ldr	r3, [r7, #16]
 8017ed6:	3304      	adds	r3, #4
 8017ed8:	4619      	mov	r1, r3
 8017eda:	4610      	mov	r0, r2
 8017edc:	f7fd fc35 	bl	801574a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017ee0:	2301      	movs	r3, #1
 8017ee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017ee4:	697b      	ldr	r3, [r7, #20]
	}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	3718      	adds	r7, #24
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	20003a34 	.word	0x20003a34
 8017ef4:	20003f10 	.word	0x20003f10
 8017ef8:	20003a38 	.word	0x20003a38

08017efc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b088      	sub	sp, #32
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
 8017f04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d06a      	beq.n	8017fea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d10a      	bne.n	8017f32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f20:	f383 8811 	msr	BASEPRI, r3
 8017f24:	f3bf 8f6f 	isb	sy
 8017f28:	f3bf 8f4f 	dsb	sy
 8017f2c:	60fb      	str	r3, [r7, #12]
}
 8017f2e:	bf00      	nop
 8017f30:	e7fe      	b.n	8017f30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f36:	683a      	ldr	r2, [r7, #0]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d902      	bls.n	8017f42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017f3c:	683b      	ldr	r3, [r7, #0]
 8017f3e:	61fb      	str	r3, [r7, #28]
 8017f40:	e002      	b.n	8017f48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017f42:	69bb      	ldr	r3, [r7, #24]
 8017f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f4c:	69fa      	ldr	r2, [r7, #28]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d04b      	beq.n	8017fea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f56:	697a      	ldr	r2, [r7, #20]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d146      	bne.n	8017fea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017f5c:	4b25      	ldr	r3, [pc, #148]	; (8017ff4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	69ba      	ldr	r2, [r7, #24]
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d10a      	bne.n	8017f7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f6a:	f383 8811 	msr	BASEPRI, r3
 8017f6e:	f3bf 8f6f 	isb	sy
 8017f72:	f3bf 8f4f 	dsb	sy
 8017f76:	60bb      	str	r3, [r7, #8]
}
 8017f78:	bf00      	nop
 8017f7a:	e7fe      	b.n	8017f7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017f7c:	69bb      	ldr	r3, [r7, #24]
 8017f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	69fa      	ldr	r2, [r7, #28]
 8017f86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017f88:	69bb      	ldr	r3, [r7, #24]
 8017f8a:	699b      	ldr	r3, [r3, #24]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	db04      	blt.n	8017f9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f90:	69fb      	ldr	r3, [r7, #28]
 8017f92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f96:	69bb      	ldr	r3, [r7, #24]
 8017f98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017f9a:	69bb      	ldr	r3, [r7, #24]
 8017f9c:	6959      	ldr	r1, [r3, #20]
 8017f9e:	693a      	ldr	r2, [r7, #16]
 8017fa0:	4613      	mov	r3, r2
 8017fa2:	009b      	lsls	r3, r3, #2
 8017fa4:	4413      	add	r3, r2
 8017fa6:	009b      	lsls	r3, r3, #2
 8017fa8:	4a13      	ldr	r2, [pc, #76]	; (8017ff8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017faa:	4413      	add	r3, r2
 8017fac:	4299      	cmp	r1, r3
 8017fae:	d11c      	bne.n	8017fea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017fb0:	69bb      	ldr	r3, [r7, #24]
 8017fb2:	3304      	adds	r3, #4
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7fd fc25 	bl	8015804 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017fba:	69bb      	ldr	r3, [r7, #24]
 8017fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fbe:	4b0f      	ldr	r3, [pc, #60]	; (8017ffc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	d903      	bls.n	8017fce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017fc6:	69bb      	ldr	r3, [r7, #24]
 8017fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fca:	4a0c      	ldr	r2, [pc, #48]	; (8017ffc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017fcc:	6013      	str	r3, [r2, #0]
 8017fce:	69bb      	ldr	r3, [r7, #24]
 8017fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	4413      	add	r3, r2
 8017fd8:	009b      	lsls	r3, r3, #2
 8017fda:	4a07      	ldr	r2, [pc, #28]	; (8017ff8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017fdc:	441a      	add	r2, r3
 8017fde:	69bb      	ldr	r3, [r7, #24]
 8017fe0:	3304      	adds	r3, #4
 8017fe2:	4619      	mov	r1, r3
 8017fe4:	4610      	mov	r0, r2
 8017fe6:	f7fd fbb0 	bl	801574a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017fea:	bf00      	nop
 8017fec:	3720      	adds	r7, #32
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}
 8017ff2:	bf00      	nop
 8017ff4:	20003a34 	.word	0x20003a34
 8017ff8:	20003a38 	.word	0x20003a38
 8017ffc:	20003f10 	.word	0x20003f10

08018000 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018000:	b480      	push	{r7}
 8018002:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018004:	4b07      	ldr	r3, [pc, #28]	; (8018024 <pvTaskIncrementMutexHeldCount+0x24>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d004      	beq.n	8018016 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801800c:	4b05      	ldr	r3, [pc, #20]	; (8018024 <pvTaskIncrementMutexHeldCount+0x24>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018012:	3201      	adds	r2, #1
 8018014:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8018016:	4b03      	ldr	r3, [pc, #12]	; (8018024 <pvTaskIncrementMutexHeldCount+0x24>)
 8018018:	681b      	ldr	r3, [r3, #0]
	}
 801801a:	4618      	mov	r0, r3
 801801c:	46bd      	mov	sp, r7
 801801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018022:	4770      	bx	lr
 8018024:	20003a34 	.word	0x20003a34

08018028 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8018028:	b580      	push	{r7, lr}
 801802a:	b084      	sub	sp, #16
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
 8018030:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8018032:	f000 ff1f 	bl	8018e74 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8018036:	4b20      	ldr	r3, [pc, #128]	; (80180b8 <ulTaskNotifyTake+0x90>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801803e:	2b00      	cmp	r3, #0
 8018040:	d113      	bne.n	801806a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8018042:	4b1d      	ldr	r3, [pc, #116]	; (80180b8 <ulTaskNotifyTake+0x90>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2201      	movs	r2, #1
 8018048:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

				if( xTicksToWait > ( TickType_t ) 0 )
 801804c:	683b      	ldr	r3, [r7, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d00b      	beq.n	801806a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018052:	2101      	movs	r1, #1
 8018054:	6838      	ldr	r0, [r7, #0]
 8018056:	f000 fa3d 	bl	80184d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801805a:	4b18      	ldr	r3, [pc, #96]	; (80180bc <ulTaskNotifyTake+0x94>)
 801805c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018060:	601a      	str	r2, [r3, #0]
 8018062:	f3bf 8f4f 	dsb	sy
 8018066:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801806a:	f000 ff33 	bl	8018ed4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801806e:	f000 ff01 	bl	8018e74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8018072:	4b11      	ldr	r3, [pc, #68]	; (80180b8 <ulTaskNotifyTake+0x90>)
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801807a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d00e      	beq.n	80180a0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d005      	beq.n	8018094 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8018088:	4b0b      	ldr	r3, [pc, #44]	; (80180b8 <ulTaskNotifyTake+0x90>)
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2200      	movs	r2, #0
 801808e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8018092:	e005      	b.n	80180a0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8018094:	4b08      	ldr	r3, [pc, #32]	; (80180b8 <ulTaskNotifyTake+0x90>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	68fa      	ldr	r2, [r7, #12]
 801809a:	3a01      	subs	r2, #1
 801809c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80180a0:	4b05      	ldr	r3, [pc, #20]	; (80180b8 <ulTaskNotifyTake+0x90>)
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	2200      	movs	r2, #0
 80180a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		}
		taskEXIT_CRITICAL();
 80180aa:	f000 ff13 	bl	8018ed4 <vPortExitCritical>

		return ulReturn;
 80180ae:	68fb      	ldr	r3, [r7, #12]
	}
 80180b0:	4618      	mov	r0, r3
 80180b2:	3710      	adds	r7, #16
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	20003a34 	.word	0x20003a34
 80180bc:	e000ed04 	.word	0xe000ed04

080180c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b086      	sub	sp, #24
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	60f8      	str	r0, [r7, #12]
 80180c8:	60b9      	str	r1, [r7, #8]
 80180ca:	607a      	str	r2, [r7, #4]
 80180cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80180ce:	f000 fed1 	bl	8018e74 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80180d2:	4b29      	ldr	r3, [pc, #164]	; (8018178 <xTaskNotifyWait+0xb8>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80180da:	b2db      	uxtb	r3, r3
 80180dc:	2b02      	cmp	r3, #2
 80180de:	d01c      	beq.n	801811a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80180e0:	4b25      	ldr	r3, [pc, #148]	; (8018178 <xTaskNotifyWait+0xb8>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 80180e8:	68fa      	ldr	r2, [r7, #12]
 80180ea:	43d2      	mvns	r2, r2
 80180ec:	400a      	ands	r2, r1
 80180ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80180f2:	4b21      	ldr	r3, [pc, #132]	; (8018178 <xTaskNotifyWait+0xb8>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	2201      	movs	r2, #1
 80180f8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

				if( xTicksToWait > ( TickType_t ) 0 )
 80180fc:	683b      	ldr	r3, [r7, #0]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d00b      	beq.n	801811a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018102:	2101      	movs	r1, #1
 8018104:	6838      	ldr	r0, [r7, #0]
 8018106:	f000 f9e5 	bl	80184d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801810a:	4b1c      	ldr	r3, [pc, #112]	; (801817c <xTaskNotifyWait+0xbc>)
 801810c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018110:	601a      	str	r2, [r3, #0]
 8018112:	f3bf 8f4f 	dsb	sy
 8018116:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801811a:	f000 fedb 	bl	8018ed4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801811e:	f000 fea9 	bl	8018e74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d005      	beq.n	8018134 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8018128:	4b13      	ldr	r3, [pc, #76]	; (8018178 <xTaskNotifyWait+0xb8>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8018134:	4b10      	ldr	r3, [pc, #64]	; (8018178 <xTaskNotifyWait+0xb8>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 801813c:	b2db      	uxtb	r3, r3
 801813e:	2b02      	cmp	r3, #2
 8018140:	d002      	beq.n	8018148 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8018142:	2300      	movs	r3, #0
 8018144:	617b      	str	r3, [r7, #20]
 8018146:	e00a      	b.n	801815e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8018148:	4b0b      	ldr	r3, [pc, #44]	; (8018178 <xTaskNotifyWait+0xb8>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8018150:	68ba      	ldr	r2, [r7, #8]
 8018152:	43d2      	mvns	r2, r2
 8018154:	400a      	ands	r2, r1
 8018156:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				xReturn = pdTRUE;
 801815a:	2301      	movs	r3, #1
 801815c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801815e:	4b06      	ldr	r3, [pc, #24]	; (8018178 <xTaskNotifyWait+0xb8>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2200      	movs	r2, #0
 8018164:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		}
		taskEXIT_CRITICAL();
 8018168:	f000 feb4 	bl	8018ed4 <vPortExitCritical>

		return xReturn;
 801816c:	697b      	ldr	r3, [r7, #20]
	}
 801816e:	4618      	mov	r0, r3
 8018170:	3718      	adds	r7, #24
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	20003a34 	.word	0x20003a34
 801817c:	e000ed04 	.word	0xe000ed04

08018180 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8018180:	b580      	push	{r7, lr}
 8018182:	b08a      	sub	sp, #40	; 0x28
 8018184:	af00      	add	r7, sp, #0
 8018186:	60f8      	str	r0, [r7, #12]
 8018188:	60b9      	str	r1, [r7, #8]
 801818a:	603b      	str	r3, [r7, #0]
 801818c:	4613      	mov	r3, r2
 801818e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8018190:	2301      	movs	r3, #1
 8018192:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d10a      	bne.n	80181b0 <xTaskGenericNotify+0x30>
	__asm volatile
 801819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801819e:	f383 8811 	msr	BASEPRI, r3
 80181a2:	f3bf 8f6f 	isb	sy
 80181a6:	f3bf 8f4f 	dsb	sy
 80181aa:	61bb      	str	r3, [r7, #24]
}
 80181ac:	bf00      	nop
 80181ae:	e7fe      	b.n	80181ae <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80181b4:	f000 fe5e 	bl	8018e74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d004      	beq.n	80181c8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80181be:	6a3b      	ldr	r3, [r7, #32]
 80181c0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80181c8:	6a3b      	ldr	r3, [r7, #32]
 80181ca:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80181ce:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80181d0:	6a3b      	ldr	r3, [r7, #32]
 80181d2:	2202      	movs	r2, #2
 80181d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

			switch( eAction )
 80181d8:	79fb      	ldrb	r3, [r7, #7]
 80181da:	2b04      	cmp	r3, #4
 80181dc:	d82d      	bhi.n	801823a <xTaskGenericNotify+0xba>
 80181de:	a201      	add	r2, pc, #4	; (adr r2, 80181e4 <xTaskGenericNotify+0x64>)
 80181e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181e4:	0801825d 	.word	0x0801825d
 80181e8:	080181f9 	.word	0x080181f9
 80181ec:	0801820b 	.word	0x0801820b
 80181f0:	0801821b 	.word	0x0801821b
 80181f4:	08018225 	.word	0x08018225
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80181f8:	6a3b      	ldr	r3, [r7, #32]
 80181fa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	431a      	orrs	r2, r3
 8018202:	6a3b      	ldr	r3, [r7, #32]
 8018204:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					break;
 8018208:	e02b      	b.n	8018262 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801820a:	6a3b      	ldr	r3, [r7, #32]
 801820c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018210:	1c5a      	adds	r2, r3, #1
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					break;
 8018218:	e023      	b.n	8018262 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801821a:	6a3b      	ldr	r3, [r7, #32]
 801821c:	68ba      	ldr	r2, [r7, #8]
 801821e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					break;
 8018222:	e01e      	b.n	8018262 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018224:	7ffb      	ldrb	r3, [r7, #31]
 8018226:	2b02      	cmp	r3, #2
 8018228:	d004      	beq.n	8018234 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801822a:	6a3b      	ldr	r3, [r7, #32]
 801822c:	68ba      	ldr	r2, [r7, #8]
 801822e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018232:	e016      	b.n	8018262 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8018234:	2300      	movs	r3, #0
 8018236:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8018238:	e013      	b.n	8018262 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801823a:	6a3b      	ldr	r3, [r7, #32]
 801823c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018244:	d00c      	beq.n	8018260 <xTaskGenericNotify+0xe0>
	__asm volatile
 8018246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801824a:	f383 8811 	msr	BASEPRI, r3
 801824e:	f3bf 8f6f 	isb	sy
 8018252:	f3bf 8f4f 	dsb	sy
 8018256:	617b      	str	r3, [r7, #20]
}
 8018258:	bf00      	nop
 801825a:	e7fe      	b.n	801825a <xTaskGenericNotify+0xda>
					break;
 801825c:	bf00      	nop
 801825e:	e000      	b.n	8018262 <xTaskGenericNotify+0xe2>

					break;
 8018260:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018262:	7ffb      	ldrb	r3, [r7, #31]
 8018264:	2b01      	cmp	r3, #1
 8018266:	d13a      	bne.n	80182de <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018268:	6a3b      	ldr	r3, [r7, #32]
 801826a:	3304      	adds	r3, #4
 801826c:	4618      	mov	r0, r3
 801826e:	f7fd fac9 	bl	8015804 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8018272:	6a3b      	ldr	r3, [r7, #32]
 8018274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018276:	4b1d      	ldr	r3, [pc, #116]	; (80182ec <xTaskGenericNotify+0x16c>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	429a      	cmp	r2, r3
 801827c:	d903      	bls.n	8018286 <xTaskGenericNotify+0x106>
 801827e:	6a3b      	ldr	r3, [r7, #32]
 8018280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018282:	4a1a      	ldr	r2, [pc, #104]	; (80182ec <xTaskGenericNotify+0x16c>)
 8018284:	6013      	str	r3, [r2, #0]
 8018286:	6a3b      	ldr	r3, [r7, #32]
 8018288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801828a:	4613      	mov	r3, r2
 801828c:	009b      	lsls	r3, r3, #2
 801828e:	4413      	add	r3, r2
 8018290:	009b      	lsls	r3, r3, #2
 8018292:	4a17      	ldr	r2, [pc, #92]	; (80182f0 <xTaskGenericNotify+0x170>)
 8018294:	441a      	add	r2, r3
 8018296:	6a3b      	ldr	r3, [r7, #32]
 8018298:	3304      	adds	r3, #4
 801829a:	4619      	mov	r1, r3
 801829c:	4610      	mov	r0, r2
 801829e:	f7fd fa54 	bl	801574a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80182a2:	6a3b      	ldr	r3, [r7, #32]
 80182a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d00a      	beq.n	80182c0 <xTaskGenericNotify+0x140>
	__asm volatile
 80182aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ae:	f383 8811 	msr	BASEPRI, r3
 80182b2:	f3bf 8f6f 	isb	sy
 80182b6:	f3bf 8f4f 	dsb	sy
 80182ba:	613b      	str	r3, [r7, #16]
}
 80182bc:	bf00      	nop
 80182be:	e7fe      	b.n	80182be <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80182c0:	6a3b      	ldr	r3, [r7, #32]
 80182c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182c4:	4b0b      	ldr	r3, [pc, #44]	; (80182f4 <xTaskGenericNotify+0x174>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d907      	bls.n	80182de <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80182ce:	4b0a      	ldr	r3, [pc, #40]	; (80182f8 <xTaskGenericNotify+0x178>)
 80182d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182d4:	601a      	str	r2, [r3, #0]
 80182d6:	f3bf 8f4f 	dsb	sy
 80182da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80182de:	f000 fdf9 	bl	8018ed4 <vPortExitCritical>

		return xReturn;
 80182e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80182e4:	4618      	mov	r0, r3
 80182e6:	3728      	adds	r7, #40	; 0x28
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}
 80182ec:	20003f10 	.word	0x20003f10
 80182f0:	20003a38 	.word	0x20003a38
 80182f4:	20003a34 	.word	0x20003a34
 80182f8:	e000ed04 	.word	0xe000ed04

080182fc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b08a      	sub	sp, #40	; 0x28
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d10a      	bne.n	8018322 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 801830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018310:	f383 8811 	msr	BASEPRI, r3
 8018314:	f3bf 8f6f 	isb	sy
 8018318:	f3bf 8f4f 	dsb	sy
 801831c:	61bb      	str	r3, [r7, #24]
}
 801831e:	bf00      	nop
 8018320:	e7fe      	b.n	8018320 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018322:	f000 fe89 	bl	8019038 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 801832a:	f3ef 8211 	mrs	r2, BASEPRI
 801832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018332:	f383 8811 	msr	BASEPRI, r3
 8018336:	f3bf 8f6f 	isb	sy
 801833a:	f3bf 8f4f 	dsb	sy
 801833e:	617a      	str	r2, [r7, #20]
 8018340:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018342:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018344:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018348:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 801834c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018350:	2202      	movs	r2, #2
 8018352:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8018356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018358:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801835c:	1c5a      	adds	r2, r3, #1
 801835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018360:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018364:	7ffb      	ldrb	r3, [r7, #31]
 8018366:	2b01      	cmp	r3, #1
 8018368:	d146      	bne.n	80183f8 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801836e:	2b00      	cmp	r3, #0
 8018370:	d00a      	beq.n	8018388 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8018372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018376:	f383 8811 	msr	BASEPRI, r3
 801837a:	f3bf 8f6f 	isb	sy
 801837e:	f3bf 8f4f 	dsb	sy
 8018382:	60fb      	str	r3, [r7, #12]
}
 8018384:	bf00      	nop
 8018386:	e7fe      	b.n	8018386 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018388:	4b20      	ldr	r3, [pc, #128]	; (801840c <vTaskNotifyGiveFromISR+0x110>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d11d      	bne.n	80183cc <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018392:	3304      	adds	r3, #4
 8018394:	4618      	mov	r0, r3
 8018396:	f7fd fa35 	bl	8015804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801839e:	4b1c      	ldr	r3, [pc, #112]	; (8018410 <vTaskNotifyGiveFromISR+0x114>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	429a      	cmp	r2, r3
 80183a4:	d903      	bls.n	80183ae <vTaskNotifyGiveFromISR+0xb2>
 80183a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183aa:	4a19      	ldr	r2, [pc, #100]	; (8018410 <vTaskNotifyGiveFromISR+0x114>)
 80183ac:	6013      	str	r3, [r2, #0]
 80183ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b2:	4613      	mov	r3, r2
 80183b4:	009b      	lsls	r3, r3, #2
 80183b6:	4413      	add	r3, r2
 80183b8:	009b      	lsls	r3, r3, #2
 80183ba:	4a16      	ldr	r2, [pc, #88]	; (8018414 <vTaskNotifyGiveFromISR+0x118>)
 80183bc:	441a      	add	r2, r3
 80183be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c0:	3304      	adds	r3, #4
 80183c2:	4619      	mov	r1, r3
 80183c4:	4610      	mov	r0, r2
 80183c6:	f7fd f9c0 	bl	801574a <vListInsertEnd>
 80183ca:	e005      	b.n	80183d8 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80183cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ce:	3318      	adds	r3, #24
 80183d0:	4619      	mov	r1, r3
 80183d2:	4811      	ldr	r0, [pc, #68]	; (8018418 <vTaskNotifyGiveFromISR+0x11c>)
 80183d4:	f7fd f9b9 	bl	801574a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80183d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183dc:	4b0f      	ldr	r3, [pc, #60]	; (801841c <vTaskNotifyGiveFromISR+0x120>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d908      	bls.n	80183f8 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d002      	beq.n	80183f2 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	2201      	movs	r2, #1
 80183f0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80183f2:	4b0b      	ldr	r3, [pc, #44]	; (8018420 <vTaskNotifyGiveFromISR+0x124>)
 80183f4:	2201      	movs	r2, #1
 80183f6:	601a      	str	r2, [r3, #0]
 80183f8:	6a3b      	ldr	r3, [r7, #32]
 80183fa:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	f383 8811 	msr	BASEPRI, r3
}
 8018402:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8018404:	bf00      	nop
 8018406:	3728      	adds	r7, #40	; 0x28
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}
 801840c:	20003f30 	.word	0x20003f30
 8018410:	20003f10 	.word	0x20003f10
 8018414:	20003a38 	.word	0x20003a38
 8018418:	20003ec8 	.word	0x20003ec8
 801841c:	20003a34 	.word	0x20003a34
 8018420:	20003f1c 	.word	0x20003f1c

08018424 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8018424:	b580      	push	{r7, lr}
 8018426:	b084      	sub	sp, #16
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d102      	bne.n	8018438 <xTaskNotifyStateClear+0x14>
 8018432:	4b0e      	ldr	r3, [pc, #56]	; (801846c <xTaskNotifyStateClear+0x48>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	e000      	b.n	801843a <xTaskNotifyStateClear+0x16>
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 801843c:	f000 fd1a 	bl	8018e74 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8018446:	b2db      	uxtb	r3, r3
 8018448:	2b02      	cmp	r3, #2
 801844a:	d106      	bne.n	801845a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	2200      	movs	r2, #0
 8018450:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				xReturn = pdPASS;
 8018454:	2301      	movs	r3, #1
 8018456:	60fb      	str	r3, [r7, #12]
 8018458:	e001      	b.n	801845e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801845a:	2300      	movs	r3, #0
 801845c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801845e:	f000 fd39 	bl	8018ed4 <vPortExitCritical>

		return xReturn;
 8018462:	68fb      	ldr	r3, [r7, #12]
	}
 8018464:	4618      	mov	r0, r3
 8018466:	3710      	adds	r7, #16
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}
 801846c:	20003a34 	.word	0x20003a34

08018470 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8018470:	b580      	push	{r7, lr}
 8018472:	b084      	sub	sp, #16
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
 8018478:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d102      	bne.n	8018486 <ulTaskNotifyValueClear+0x16>
 8018480:	4b0d      	ldr	r3, [pc, #52]	; (80184b8 <ulTaskNotifyValueClear+0x48>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	e000      	b.n	8018488 <ulTaskNotifyValueClear+0x18>
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 801848a:	f000 fcf3 	bl	8018e74 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801848e:	4b0a      	ldr	r3, [pc, #40]	; (80184b8 <ulTaskNotifyValueClear+0x48>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018496:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 801849e:	683b      	ldr	r3, [r7, #0]
 80184a0:	43db      	mvns	r3, r3
 80184a2:	401a      	ands	r2, r3
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 80184aa:	f000 fd13 	bl	8018ed4 <vPortExitCritical>

		return ulReturn;
 80184ae:	68bb      	ldr	r3, [r7, #8]
	}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3710      	adds	r7, #16
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}
 80184b8:	20003a34 	.word	0x20003a34

080184bc <ulTaskGetIdleRunTimeCounter>:
/*-----------------------------------------------------------*/

#if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )

	uint32_t ulTaskGetIdleRunTimeCounter( void )
	{
 80184bc:	b480      	push	{r7}
 80184be:	af00      	add	r7, sp, #0
		return xIdleTaskHandle->ulRunTimeCounter;
 80184c0:	4b03      	ldr	r3, [pc, #12]	; (80184d0 <ulTaskGetIdleRunTimeCounter+0x14>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	}
 80184c6:	4618      	mov	r0, r3
 80184c8:	46bd      	mov	sp, r7
 80184ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ce:	4770      	bx	lr
 80184d0:	20003f2c 	.word	0x20003f2c

080184d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b084      	sub	sp, #16
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
 80184dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80184de:	4b21      	ldr	r3, [pc, #132]	; (8018564 <prvAddCurrentTaskToDelayedList+0x90>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80184e4:	4b20      	ldr	r3, [pc, #128]	; (8018568 <prvAddCurrentTaskToDelayedList+0x94>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	3304      	adds	r3, #4
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7fd f98a 	bl	8015804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184f6:	d10a      	bne.n	801850e <prvAddCurrentTaskToDelayedList+0x3a>
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d007      	beq.n	801850e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80184fe:	4b1a      	ldr	r3, [pc, #104]	; (8018568 <prvAddCurrentTaskToDelayedList+0x94>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	3304      	adds	r3, #4
 8018504:	4619      	mov	r1, r3
 8018506:	4819      	ldr	r0, [pc, #100]	; (801856c <prvAddCurrentTaskToDelayedList+0x98>)
 8018508:	f7fd f91f 	bl	801574a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801850c:	e026      	b.n	801855c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801850e:	68fa      	ldr	r2, [r7, #12]
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	4413      	add	r3, r2
 8018514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018516:	4b14      	ldr	r3, [pc, #80]	; (8018568 <prvAddCurrentTaskToDelayedList+0x94>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	68ba      	ldr	r2, [r7, #8]
 801851c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801851e:	68ba      	ldr	r2, [r7, #8]
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	429a      	cmp	r2, r3
 8018524:	d209      	bcs.n	801853a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018526:	4b12      	ldr	r3, [pc, #72]	; (8018570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018528:	681a      	ldr	r2, [r3, #0]
 801852a:	4b0f      	ldr	r3, [pc, #60]	; (8018568 <prvAddCurrentTaskToDelayedList+0x94>)
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	3304      	adds	r3, #4
 8018530:	4619      	mov	r1, r3
 8018532:	4610      	mov	r0, r2
 8018534:	f7fd f92d 	bl	8015792 <vListInsert>
}
 8018538:	e010      	b.n	801855c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801853a:	4b0e      	ldr	r3, [pc, #56]	; (8018574 <prvAddCurrentTaskToDelayedList+0xa0>)
 801853c:	681a      	ldr	r2, [r3, #0]
 801853e:	4b0a      	ldr	r3, [pc, #40]	; (8018568 <prvAddCurrentTaskToDelayedList+0x94>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	3304      	adds	r3, #4
 8018544:	4619      	mov	r1, r3
 8018546:	4610      	mov	r0, r2
 8018548:	f7fd f923 	bl	8015792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801854c:	4b0a      	ldr	r3, [pc, #40]	; (8018578 <prvAddCurrentTaskToDelayedList+0xa4>)
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	68ba      	ldr	r2, [r7, #8]
 8018552:	429a      	cmp	r2, r3
 8018554:	d202      	bcs.n	801855c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018556:	4a08      	ldr	r2, [pc, #32]	; (8018578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	6013      	str	r3, [r2, #0]
}
 801855c:	bf00      	nop
 801855e:	3710      	adds	r7, #16
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}
 8018564:	20003f0c 	.word	0x20003f0c
 8018568:	20003a34 	.word	0x20003a34
 801856c:	20003ef4 	.word	0x20003ef4
 8018570:	20003ec4 	.word	0x20003ec4
 8018574:	20003ec0 	.word	0x20003ec0
 8018578:	20003f28 	.word	0x20003f28

0801857c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b08a      	sub	sp, #40	; 0x28
 8018580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018582:	2300      	movs	r3, #0
 8018584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018586:	f000 fb07 	bl	8018b98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801858a:	4b1c      	ldr	r3, [pc, #112]	; (80185fc <xTimerCreateTimerTask+0x80>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d021      	beq.n	80185d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018592:	2300      	movs	r3, #0
 8018594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018596:	2300      	movs	r3, #0
 8018598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801859a:	1d3a      	adds	r2, r7, #4
 801859c:	f107 0108 	add.w	r1, r7, #8
 80185a0:	f107 030c 	add.w	r3, r7, #12
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7fd f889 	bl	80156bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80185aa:	6879      	ldr	r1, [r7, #4]
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	68fa      	ldr	r2, [r7, #12]
 80185b0:	9202      	str	r2, [sp, #8]
 80185b2:	9301      	str	r3, [sp, #4]
 80185b4:	2302      	movs	r3, #2
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	2300      	movs	r3, #0
 80185ba:	460a      	mov	r2, r1
 80185bc:	4910      	ldr	r1, [pc, #64]	; (8018600 <xTimerCreateTimerTask+0x84>)
 80185be:	4811      	ldr	r0, [pc, #68]	; (8018604 <xTimerCreateTimerTask+0x88>)
 80185c0:	f7fe fc50 	bl	8016e64 <xTaskCreateStatic>
 80185c4:	4603      	mov	r3, r0
 80185c6:	4a10      	ldr	r2, [pc, #64]	; (8018608 <xTimerCreateTimerTask+0x8c>)
 80185c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80185ca:	4b0f      	ldr	r3, [pc, #60]	; (8018608 <xTimerCreateTimerTask+0x8c>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d001      	beq.n	80185d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80185d2:	2301      	movs	r3, #1
 80185d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d10a      	bne.n	80185f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80185dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185e0:	f383 8811 	msr	BASEPRI, r3
 80185e4:	f3bf 8f6f 	isb	sy
 80185e8:	f3bf 8f4f 	dsb	sy
 80185ec:	613b      	str	r3, [r7, #16]
}
 80185ee:	bf00      	nop
 80185f0:	e7fe      	b.n	80185f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80185f2:	697b      	ldr	r3, [r7, #20]
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3718      	adds	r7, #24
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}
 80185fc:	20003f6c 	.word	0x20003f6c
 8018600:	0801c140 	.word	0x0801c140
 8018604:	08018741 	.word	0x08018741
 8018608:	20003f70 	.word	0x20003f70

0801860c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b08a      	sub	sp, #40	; 0x28
 8018610:	af00      	add	r7, sp, #0
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
 8018618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801861a:	2300      	movs	r3, #0
 801861c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d10a      	bne.n	801863a <xTimerGenericCommand+0x2e>
	__asm volatile
 8018624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018628:	f383 8811 	msr	BASEPRI, r3
 801862c:	f3bf 8f6f 	isb	sy
 8018630:	f3bf 8f4f 	dsb	sy
 8018634:	623b      	str	r3, [r7, #32]
}
 8018636:	bf00      	nop
 8018638:	e7fe      	b.n	8018638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801863a:	4b1a      	ldr	r3, [pc, #104]	; (80186a4 <xTimerGenericCommand+0x98>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d02a      	beq.n	8018698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	2b05      	cmp	r3, #5
 8018652:	dc18      	bgt.n	8018686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018654:	f7ff fb5e 	bl	8017d14 <xTaskGetSchedulerState>
 8018658:	4603      	mov	r3, r0
 801865a:	2b02      	cmp	r3, #2
 801865c:	d109      	bne.n	8018672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801865e:	4b11      	ldr	r3, [pc, #68]	; (80186a4 <xTimerGenericCommand+0x98>)
 8018660:	6818      	ldr	r0, [r3, #0]
 8018662:	f107 0110 	add.w	r1, r7, #16
 8018666:	2300      	movs	r3, #0
 8018668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801866a:	f7fd fae9 	bl	8015c40 <xQueueGenericSend>
 801866e:	6278      	str	r0, [r7, #36]	; 0x24
 8018670:	e012      	b.n	8018698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018672:	4b0c      	ldr	r3, [pc, #48]	; (80186a4 <xTimerGenericCommand+0x98>)
 8018674:	6818      	ldr	r0, [r3, #0]
 8018676:	f107 0110 	add.w	r1, r7, #16
 801867a:	2300      	movs	r3, #0
 801867c:	2200      	movs	r2, #0
 801867e:	f7fd fadf 	bl	8015c40 <xQueueGenericSend>
 8018682:	6278      	str	r0, [r7, #36]	; 0x24
 8018684:	e008      	b.n	8018698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018686:	4b07      	ldr	r3, [pc, #28]	; (80186a4 <xTimerGenericCommand+0x98>)
 8018688:	6818      	ldr	r0, [r3, #0]
 801868a:	f107 0110 	add.w	r1, r7, #16
 801868e:	2300      	movs	r3, #0
 8018690:	683a      	ldr	r2, [r7, #0]
 8018692:	f7fd fbd3 	bl	8015e3c <xQueueGenericSendFromISR>
 8018696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801869a:	4618      	mov	r0, r3
 801869c:	3728      	adds	r7, #40	; 0x28
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	bf00      	nop
 80186a4:	20003f6c 	.word	0x20003f6c

080186a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b088      	sub	sp, #32
 80186ac:	af02      	add	r7, sp, #8
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186b2:	4b22      	ldr	r3, [pc, #136]	; (801873c <prvProcessExpiredTimer+0x94>)
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	68db      	ldr	r3, [r3, #12]
 80186b8:	68db      	ldr	r3, [r3, #12]
 80186ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	3304      	adds	r3, #4
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7fd f89f 	bl	8015804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80186cc:	f003 0304 	and.w	r3, r3, #4
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d022      	beq.n	801871a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	699a      	ldr	r2, [r3, #24]
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	18d1      	adds	r1, r2, r3
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	683a      	ldr	r2, [r7, #0]
 80186e0:	6978      	ldr	r0, [r7, #20]
 80186e2:	f000 f8d1 	bl	8018888 <prvInsertTimerInActiveList>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d01f      	beq.n	801872c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80186ec:	2300      	movs	r3, #0
 80186ee:	9300      	str	r3, [sp, #0]
 80186f0:	2300      	movs	r3, #0
 80186f2:	687a      	ldr	r2, [r7, #4]
 80186f4:	2100      	movs	r1, #0
 80186f6:	6978      	ldr	r0, [r7, #20]
 80186f8:	f7ff ff88 	bl	801860c <xTimerGenericCommand>
 80186fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80186fe:	693b      	ldr	r3, [r7, #16]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d113      	bne.n	801872c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018708:	f383 8811 	msr	BASEPRI, r3
 801870c:	f3bf 8f6f 	isb	sy
 8018710:	f3bf 8f4f 	dsb	sy
 8018714:	60fb      	str	r3, [r7, #12]
}
 8018716:	bf00      	nop
 8018718:	e7fe      	b.n	8018718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018720:	f023 0301 	bic.w	r3, r3, #1
 8018724:	b2da      	uxtb	r2, r3
 8018726:	697b      	ldr	r3, [r7, #20]
 8018728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801872c:	697b      	ldr	r3, [r7, #20]
 801872e:	6a1b      	ldr	r3, [r3, #32]
 8018730:	6978      	ldr	r0, [r7, #20]
 8018732:	4798      	blx	r3
}
 8018734:	bf00      	nop
 8018736:	3718      	adds	r7, #24
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}
 801873c:	20003f64 	.word	0x20003f64

08018740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018748:	f107 0308 	add.w	r3, r7, #8
 801874c:	4618      	mov	r0, r3
 801874e:	f000 f857 	bl	8018800 <prvGetNextExpireTime>
 8018752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018754:	68bb      	ldr	r3, [r7, #8]
 8018756:	4619      	mov	r1, r3
 8018758:	68f8      	ldr	r0, [r7, #12]
 801875a:	f000 f803 	bl	8018764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801875e:	f000 f8d5 	bl	801890c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018762:	e7f1      	b.n	8018748 <prvTimerTask+0x8>

08018764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b084      	sub	sp, #16
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
 801876c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801876e:	f7fe fe83 	bl	8017478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018772:	f107 0308 	add.w	r3, r7, #8
 8018776:	4618      	mov	r0, r3
 8018778:	f000 f866 	bl	8018848 <prvSampleTimeNow>
 801877c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d130      	bne.n	80187e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018784:	683b      	ldr	r3, [r7, #0]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d10a      	bne.n	80187a0 <prvProcessTimerOrBlockTask+0x3c>
 801878a:	687a      	ldr	r2, [r7, #4]
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	429a      	cmp	r2, r3
 8018790:	d806      	bhi.n	80187a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018792:	f7fe fe7f 	bl	8017494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018796:	68f9      	ldr	r1, [r7, #12]
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	f7ff ff85 	bl	80186a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801879e:	e024      	b.n	80187ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d008      	beq.n	80187b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80187a6:	4b13      	ldr	r3, [pc, #76]	; (80187f4 <prvProcessTimerOrBlockTask+0x90>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d101      	bne.n	80187b4 <prvProcessTimerOrBlockTask+0x50>
 80187b0:	2301      	movs	r3, #1
 80187b2:	e000      	b.n	80187b6 <prvProcessTimerOrBlockTask+0x52>
 80187b4:	2300      	movs	r3, #0
 80187b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80187b8:	4b0f      	ldr	r3, [pc, #60]	; (80187f8 <prvProcessTimerOrBlockTask+0x94>)
 80187ba:	6818      	ldr	r0, [r3, #0]
 80187bc:	687a      	ldr	r2, [r7, #4]
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	1ad3      	subs	r3, r2, r3
 80187c2:	683a      	ldr	r2, [r7, #0]
 80187c4:	4619      	mov	r1, r3
 80187c6:	f7fd ff93 	bl	80166f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80187ca:	f7fe fe63 	bl	8017494 <xTaskResumeAll>
 80187ce:	4603      	mov	r3, r0
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d10a      	bne.n	80187ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80187d4:	4b09      	ldr	r3, [pc, #36]	; (80187fc <prvProcessTimerOrBlockTask+0x98>)
 80187d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187da:	601a      	str	r2, [r3, #0]
 80187dc:	f3bf 8f4f 	dsb	sy
 80187e0:	f3bf 8f6f 	isb	sy
}
 80187e4:	e001      	b.n	80187ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80187e6:	f7fe fe55 	bl	8017494 <xTaskResumeAll>
}
 80187ea:	bf00      	nop
 80187ec:	3710      	adds	r7, #16
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	20003f68 	.word	0x20003f68
 80187f8:	20003f6c 	.word	0x20003f6c
 80187fc:	e000ed04 	.word	0xe000ed04

08018800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018800:	b480      	push	{r7}
 8018802:	b085      	sub	sp, #20
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018808:	4b0e      	ldr	r3, [pc, #56]	; (8018844 <prvGetNextExpireTime+0x44>)
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d101      	bne.n	8018816 <prvGetNextExpireTime+0x16>
 8018812:	2201      	movs	r2, #1
 8018814:	e000      	b.n	8018818 <prvGetNextExpireTime+0x18>
 8018816:	2200      	movs	r2, #0
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d105      	bne.n	8018830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018824:	4b07      	ldr	r3, [pc, #28]	; (8018844 <prvGetNextExpireTime+0x44>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	60fb      	str	r3, [r7, #12]
 801882e:	e001      	b.n	8018834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018830:	2300      	movs	r3, #0
 8018832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018834:	68fb      	ldr	r3, [r7, #12]
}
 8018836:	4618      	mov	r0, r3
 8018838:	3714      	adds	r7, #20
 801883a:	46bd      	mov	sp, r7
 801883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop
 8018844:	20003f64 	.word	0x20003f64

08018848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b084      	sub	sp, #16
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018850:	f7fe febe 	bl	80175d0 <xTaskGetTickCount>
 8018854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018856:	4b0b      	ldr	r3, [pc, #44]	; (8018884 <prvSampleTimeNow+0x3c>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	68fa      	ldr	r2, [r7, #12]
 801885c:	429a      	cmp	r2, r3
 801885e:	d205      	bcs.n	801886c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018860:	f000 f936 	bl	8018ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2201      	movs	r2, #1
 8018868:	601a      	str	r2, [r3, #0]
 801886a:	e002      	b.n	8018872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	2200      	movs	r2, #0
 8018870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018872:	4a04      	ldr	r2, [pc, #16]	; (8018884 <prvSampleTimeNow+0x3c>)
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018878:	68fb      	ldr	r3, [r7, #12]
}
 801887a:	4618      	mov	r0, r3
 801887c:	3710      	adds	r7, #16
 801887e:	46bd      	mov	sp, r7
 8018880:	bd80      	pop	{r7, pc}
 8018882:	bf00      	nop
 8018884:	20003f74 	.word	0x20003f74

08018888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b086      	sub	sp, #24
 801888c:	af00      	add	r7, sp, #0
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	60b9      	str	r1, [r7, #8]
 8018892:	607a      	str	r2, [r7, #4]
 8018894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018896:	2300      	movs	r3, #0
 8018898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	68ba      	ldr	r2, [r7, #8]
 801889e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	68fa      	ldr	r2, [r7, #12]
 80188a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80188a6:	68ba      	ldr	r2, [r7, #8]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	429a      	cmp	r2, r3
 80188ac:	d812      	bhi.n	80188d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	1ad2      	subs	r2, r2, r3
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	699b      	ldr	r3, [r3, #24]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d302      	bcc.n	80188c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80188bc:	2301      	movs	r3, #1
 80188be:	617b      	str	r3, [r7, #20]
 80188c0:	e01b      	b.n	80188fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80188c2:	4b10      	ldr	r3, [pc, #64]	; (8018904 <prvInsertTimerInActiveList+0x7c>)
 80188c4:	681a      	ldr	r2, [r3, #0]
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	3304      	adds	r3, #4
 80188ca:	4619      	mov	r1, r3
 80188cc:	4610      	mov	r0, r2
 80188ce:	f7fc ff60 	bl	8015792 <vListInsert>
 80188d2:	e012      	b.n	80188fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80188d4:	687a      	ldr	r2, [r7, #4]
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	429a      	cmp	r2, r3
 80188da:	d206      	bcs.n	80188ea <prvInsertTimerInActiveList+0x62>
 80188dc:	68ba      	ldr	r2, [r7, #8]
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	429a      	cmp	r2, r3
 80188e2:	d302      	bcc.n	80188ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80188e4:	2301      	movs	r3, #1
 80188e6:	617b      	str	r3, [r7, #20]
 80188e8:	e007      	b.n	80188fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80188ea:	4b07      	ldr	r3, [pc, #28]	; (8018908 <prvInsertTimerInActiveList+0x80>)
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	3304      	adds	r3, #4
 80188f2:	4619      	mov	r1, r3
 80188f4:	4610      	mov	r0, r2
 80188f6:	f7fc ff4c 	bl	8015792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80188fa:	697b      	ldr	r3, [r7, #20]
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	3718      	adds	r7, #24
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}
 8018904:	20003f68 	.word	0x20003f68
 8018908:	20003f64 	.word	0x20003f64

0801890c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b08e      	sub	sp, #56	; 0x38
 8018910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018912:	e0ca      	b.n	8018aaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	2b00      	cmp	r3, #0
 8018918:	da18      	bge.n	801894c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801891a:	1d3b      	adds	r3, r7, #4
 801891c:	3304      	adds	r3, #4
 801891e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018922:	2b00      	cmp	r3, #0
 8018924:	d10a      	bne.n	801893c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801892a:	f383 8811 	msr	BASEPRI, r3
 801892e:	f3bf 8f6f 	isb	sy
 8018932:	f3bf 8f4f 	dsb	sy
 8018936:	61fb      	str	r3, [r7, #28]
}
 8018938:	bf00      	nop
 801893a:	e7fe      	b.n	801893a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018942:	6850      	ldr	r0, [r2, #4]
 8018944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018946:	6892      	ldr	r2, [r2, #8]
 8018948:	4611      	mov	r1, r2
 801894a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	2b00      	cmp	r3, #0
 8018950:	f2c0 80aa 	blt.w	8018aa8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801895a:	695b      	ldr	r3, [r3, #20]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d004      	beq.n	801896a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018962:	3304      	adds	r3, #4
 8018964:	4618      	mov	r0, r3
 8018966:	f7fc ff4d 	bl	8015804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801896a:	463b      	mov	r3, r7
 801896c:	4618      	mov	r0, r3
 801896e:	f7ff ff6b 	bl	8018848 <prvSampleTimeNow>
 8018972:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2b09      	cmp	r3, #9
 8018978:	f200 8097 	bhi.w	8018aaa <prvProcessReceivedCommands+0x19e>
 801897c:	a201      	add	r2, pc, #4	; (adr r2, 8018984 <prvProcessReceivedCommands+0x78>)
 801897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018982:	bf00      	nop
 8018984:	080189ad 	.word	0x080189ad
 8018988:	080189ad 	.word	0x080189ad
 801898c:	080189ad 	.word	0x080189ad
 8018990:	08018a21 	.word	0x08018a21
 8018994:	08018a35 	.word	0x08018a35
 8018998:	08018a7f 	.word	0x08018a7f
 801899c:	080189ad 	.word	0x080189ad
 80189a0:	080189ad 	.word	0x080189ad
 80189a4:	08018a21 	.word	0x08018a21
 80189a8:	08018a35 	.word	0x08018a35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80189ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80189b2:	f043 0301 	orr.w	r3, r3, #1
 80189b6:	b2da      	uxtb	r2, r3
 80189b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80189be:	68ba      	ldr	r2, [r7, #8]
 80189c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c2:	699b      	ldr	r3, [r3, #24]
 80189c4:	18d1      	adds	r1, r2, r3
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189cc:	f7ff ff5c 	bl	8018888 <prvInsertTimerInActiveList>
 80189d0:	4603      	mov	r3, r0
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d069      	beq.n	8018aaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80189d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d8:	6a1b      	ldr	r3, [r3, #32]
 80189da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80189de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80189e4:	f003 0304 	and.w	r3, r3, #4
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d05e      	beq.n	8018aaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80189ec:	68ba      	ldr	r2, [r7, #8]
 80189ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f0:	699b      	ldr	r3, [r3, #24]
 80189f2:	441a      	add	r2, r3
 80189f4:	2300      	movs	r3, #0
 80189f6:	9300      	str	r3, [sp, #0]
 80189f8:	2300      	movs	r3, #0
 80189fa:	2100      	movs	r1, #0
 80189fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189fe:	f7ff fe05 	bl	801860c <xTimerGenericCommand>
 8018a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018a04:	6a3b      	ldr	r3, [r7, #32]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d14f      	bne.n	8018aaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0e:	f383 8811 	msr	BASEPRI, r3
 8018a12:	f3bf 8f6f 	isb	sy
 8018a16:	f3bf 8f4f 	dsb	sy
 8018a1a:	61bb      	str	r3, [r7, #24]
}
 8018a1c:	bf00      	nop
 8018a1e:	e7fe      	b.n	8018a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a26:	f023 0301 	bic.w	r3, r3, #1
 8018a2a:	b2da      	uxtb	r2, r3
 8018a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018a32:	e03a      	b.n	8018aaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a3a:	f043 0301 	orr.w	r3, r3, #1
 8018a3e:	b2da      	uxtb	r2, r3
 8018a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018a46:	68ba      	ldr	r2, [r7, #8]
 8018a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a4e:	699b      	ldr	r3, [r3, #24]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d10a      	bne.n	8018a6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a58:	f383 8811 	msr	BASEPRI, r3
 8018a5c:	f3bf 8f6f 	isb	sy
 8018a60:	f3bf 8f4f 	dsb	sy
 8018a64:	617b      	str	r3, [r7, #20]
}
 8018a66:	bf00      	nop
 8018a68:	e7fe      	b.n	8018a68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6c:	699a      	ldr	r2, [r3, #24]
 8018a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a70:	18d1      	adds	r1, r2, r3
 8018a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a78:	f7ff ff06 	bl	8018888 <prvInsertTimerInActiveList>
					break;
 8018a7c:	e015      	b.n	8018aaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a84:	f003 0302 	and.w	r3, r3, #2
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d103      	bne.n	8018a94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a8e:	f000 fbe3 	bl	8019258 <vPortFree>
 8018a92:	e00a      	b.n	8018aaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a9a:	f023 0301 	bic.w	r3, r3, #1
 8018a9e:	b2da      	uxtb	r2, r3
 8018aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018aa6:	e000      	b.n	8018aaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018aaa:	4b08      	ldr	r3, [pc, #32]	; (8018acc <prvProcessReceivedCommands+0x1c0>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	1d39      	adds	r1, r7, #4
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7fd fa5e 	bl	8015f74 <xQueueReceive>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	f47f af2a 	bne.w	8018914 <prvProcessReceivedCommands+0x8>
	}
}
 8018ac0:	bf00      	nop
 8018ac2:	bf00      	nop
 8018ac4:	3730      	adds	r7, #48	; 0x30
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	bf00      	nop
 8018acc:	20003f6c 	.word	0x20003f6c

08018ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b088      	sub	sp, #32
 8018ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018ad6:	e048      	b.n	8018b6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018ad8:	4b2d      	ldr	r3, [pc, #180]	; (8018b90 <prvSwitchTimerLists+0xc0>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	68db      	ldr	r3, [r3, #12]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ae2:	4b2b      	ldr	r3, [pc, #172]	; (8018b90 <prvSwitchTimerLists+0xc0>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	68db      	ldr	r3, [r3, #12]
 8018ae8:	68db      	ldr	r3, [r3, #12]
 8018aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	3304      	adds	r3, #4
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7fc fe87 	bl	8015804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	6a1b      	ldr	r3, [r3, #32]
 8018afa:	68f8      	ldr	r0, [r7, #12]
 8018afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b04:	f003 0304 	and.w	r3, r3, #4
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d02e      	beq.n	8018b6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	699b      	ldr	r3, [r3, #24]
 8018b10:	693a      	ldr	r2, [r7, #16]
 8018b12:	4413      	add	r3, r2
 8018b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018b16:	68ba      	ldr	r2, [r7, #8]
 8018b18:	693b      	ldr	r3, [r7, #16]
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	d90e      	bls.n	8018b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	68ba      	ldr	r2, [r7, #8]
 8018b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	68fa      	ldr	r2, [r7, #12]
 8018b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018b2a:	4b19      	ldr	r3, [pc, #100]	; (8018b90 <prvSwitchTimerLists+0xc0>)
 8018b2c:	681a      	ldr	r2, [r3, #0]
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	3304      	adds	r3, #4
 8018b32:	4619      	mov	r1, r3
 8018b34:	4610      	mov	r0, r2
 8018b36:	f7fc fe2c 	bl	8015792 <vListInsert>
 8018b3a:	e016      	b.n	8018b6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	9300      	str	r3, [sp, #0]
 8018b40:	2300      	movs	r3, #0
 8018b42:	693a      	ldr	r2, [r7, #16]
 8018b44:	2100      	movs	r1, #0
 8018b46:	68f8      	ldr	r0, [r7, #12]
 8018b48:	f7ff fd60 	bl	801860c <xTimerGenericCommand>
 8018b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d10a      	bne.n	8018b6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b58:	f383 8811 	msr	BASEPRI, r3
 8018b5c:	f3bf 8f6f 	isb	sy
 8018b60:	f3bf 8f4f 	dsb	sy
 8018b64:	603b      	str	r3, [r7, #0]
}
 8018b66:	bf00      	nop
 8018b68:	e7fe      	b.n	8018b68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018b6a:	4b09      	ldr	r3, [pc, #36]	; (8018b90 <prvSwitchTimerLists+0xc0>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d1b1      	bne.n	8018ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018b74:	4b06      	ldr	r3, [pc, #24]	; (8018b90 <prvSwitchTimerLists+0xc0>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018b7a:	4b06      	ldr	r3, [pc, #24]	; (8018b94 <prvSwitchTimerLists+0xc4>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	4a04      	ldr	r2, [pc, #16]	; (8018b90 <prvSwitchTimerLists+0xc0>)
 8018b80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018b82:	4a04      	ldr	r2, [pc, #16]	; (8018b94 <prvSwitchTimerLists+0xc4>)
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	6013      	str	r3, [r2, #0]
}
 8018b88:	bf00      	nop
 8018b8a:	3718      	adds	r7, #24
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}
 8018b90:	20003f64 	.word	0x20003f64
 8018b94:	20003f68 	.word	0x20003f68

08018b98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018b9e:	f000 f969 	bl	8018e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018ba2:	4b15      	ldr	r3, [pc, #84]	; (8018bf8 <prvCheckForValidListAndQueue+0x60>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d120      	bne.n	8018bec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018baa:	4814      	ldr	r0, [pc, #80]	; (8018bfc <prvCheckForValidListAndQueue+0x64>)
 8018bac:	f7fc fda0 	bl	80156f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018bb0:	4813      	ldr	r0, [pc, #76]	; (8018c00 <prvCheckForValidListAndQueue+0x68>)
 8018bb2:	f7fc fd9d 	bl	80156f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018bb6:	4b13      	ldr	r3, [pc, #76]	; (8018c04 <prvCheckForValidListAndQueue+0x6c>)
 8018bb8:	4a10      	ldr	r2, [pc, #64]	; (8018bfc <prvCheckForValidListAndQueue+0x64>)
 8018bba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018bbc:	4b12      	ldr	r3, [pc, #72]	; (8018c08 <prvCheckForValidListAndQueue+0x70>)
 8018bbe:	4a10      	ldr	r2, [pc, #64]	; (8018c00 <prvCheckForValidListAndQueue+0x68>)
 8018bc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	9300      	str	r3, [sp, #0]
 8018bc6:	4b11      	ldr	r3, [pc, #68]	; (8018c0c <prvCheckForValidListAndQueue+0x74>)
 8018bc8:	4a11      	ldr	r2, [pc, #68]	; (8018c10 <prvCheckForValidListAndQueue+0x78>)
 8018bca:	2110      	movs	r1, #16
 8018bcc:	200a      	movs	r0, #10
 8018bce:	f7fc feab 	bl	8015928 <xQueueGenericCreateStatic>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	4a08      	ldr	r2, [pc, #32]	; (8018bf8 <prvCheckForValidListAndQueue+0x60>)
 8018bd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018bd8:	4b07      	ldr	r3, [pc, #28]	; (8018bf8 <prvCheckForValidListAndQueue+0x60>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d005      	beq.n	8018bec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018be0:	4b05      	ldr	r3, [pc, #20]	; (8018bf8 <prvCheckForValidListAndQueue+0x60>)
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	490b      	ldr	r1, [pc, #44]	; (8018c14 <prvCheckForValidListAndQueue+0x7c>)
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7fd fd58 	bl	801669c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018bec:	f000 f972 	bl	8018ed4 <vPortExitCritical>
}
 8018bf0:	bf00      	nop
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
 8018bf6:	bf00      	nop
 8018bf8:	20003f6c 	.word	0x20003f6c
 8018bfc:	20003f3c 	.word	0x20003f3c
 8018c00:	20003f50 	.word	0x20003f50
 8018c04:	20003f64 	.word	0x20003f64
 8018c08:	20003f68 	.word	0x20003f68
 8018c0c:	20004018 	.word	0x20004018
 8018c10:	20003f78 	.word	0x20003f78
 8018c14:	0801c148 	.word	0x0801c148

08018c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b085      	sub	sp, #20
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	60f8      	str	r0, [r7, #12]
 8018c20:	60b9      	str	r1, [r7, #8]
 8018c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	3b04      	subs	r3, #4
 8018c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	3b04      	subs	r3, #4
 8018c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	f023 0201 	bic.w	r2, r3, #1
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	3b04      	subs	r3, #4
 8018c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018c48:	4a0c      	ldr	r2, [pc, #48]	; (8018c7c <pxPortInitialiseStack+0x64>)
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	3b14      	subs	r3, #20
 8018c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018c54:	687a      	ldr	r2, [r7, #4]
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	3b04      	subs	r3, #4
 8018c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	f06f 0202 	mvn.w	r2, #2
 8018c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	3b20      	subs	r3, #32
 8018c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	3714      	adds	r7, #20
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr
 8018c7c:	08018c81 	.word	0x08018c81

08018c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018c80:	b480      	push	{r7}
 8018c82:	b085      	sub	sp, #20
 8018c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018c86:	2300      	movs	r3, #0
 8018c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018c8a:	4b12      	ldr	r3, [pc, #72]	; (8018cd4 <prvTaskExitError+0x54>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c92:	d00a      	beq.n	8018caa <prvTaskExitError+0x2a>
	__asm volatile
 8018c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c98:	f383 8811 	msr	BASEPRI, r3
 8018c9c:	f3bf 8f6f 	isb	sy
 8018ca0:	f3bf 8f4f 	dsb	sy
 8018ca4:	60fb      	str	r3, [r7, #12]
}
 8018ca6:	bf00      	nop
 8018ca8:	e7fe      	b.n	8018ca8 <prvTaskExitError+0x28>
	__asm volatile
 8018caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cae:	f383 8811 	msr	BASEPRI, r3
 8018cb2:	f3bf 8f6f 	isb	sy
 8018cb6:	f3bf 8f4f 	dsb	sy
 8018cba:	60bb      	str	r3, [r7, #8]
}
 8018cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018cbe:	bf00      	nop
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d0fc      	beq.n	8018cc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018cc6:	bf00      	nop
 8018cc8:	bf00      	nop
 8018cca:	3714      	adds	r7, #20
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd2:	4770      	bx	lr
 8018cd4:	20000040 	.word	0x20000040
	...

08018ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018ce0:	4b07      	ldr	r3, [pc, #28]	; (8018d00 <pxCurrentTCBConst2>)
 8018ce2:	6819      	ldr	r1, [r3, #0]
 8018ce4:	6808      	ldr	r0, [r1, #0]
 8018ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cea:	f380 8809 	msr	PSP, r0
 8018cee:	f3bf 8f6f 	isb	sy
 8018cf2:	f04f 0000 	mov.w	r0, #0
 8018cf6:	f380 8811 	msr	BASEPRI, r0
 8018cfa:	4770      	bx	lr
 8018cfc:	f3af 8000 	nop.w

08018d00 <pxCurrentTCBConst2>:
 8018d00:	20003a34 	.word	0x20003a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018d04:	bf00      	nop
 8018d06:	bf00      	nop

08018d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018d08:	4808      	ldr	r0, [pc, #32]	; (8018d2c <prvPortStartFirstTask+0x24>)
 8018d0a:	6800      	ldr	r0, [r0, #0]
 8018d0c:	6800      	ldr	r0, [r0, #0]
 8018d0e:	f380 8808 	msr	MSP, r0
 8018d12:	f04f 0000 	mov.w	r0, #0
 8018d16:	f380 8814 	msr	CONTROL, r0
 8018d1a:	b662      	cpsie	i
 8018d1c:	b661      	cpsie	f
 8018d1e:	f3bf 8f4f 	dsb	sy
 8018d22:	f3bf 8f6f 	isb	sy
 8018d26:	df00      	svc	0
 8018d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018d2a:	bf00      	nop
 8018d2c:	e000ed08 	.word	0xe000ed08

08018d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b086      	sub	sp, #24
 8018d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018d36:	4b46      	ldr	r3, [pc, #280]	; (8018e50 <xPortStartScheduler+0x120>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	4a46      	ldr	r2, [pc, #280]	; (8018e54 <xPortStartScheduler+0x124>)
 8018d3c:	4293      	cmp	r3, r2
 8018d3e:	d10a      	bne.n	8018d56 <xPortStartScheduler+0x26>
	__asm volatile
 8018d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d44:	f383 8811 	msr	BASEPRI, r3
 8018d48:	f3bf 8f6f 	isb	sy
 8018d4c:	f3bf 8f4f 	dsb	sy
 8018d50:	613b      	str	r3, [r7, #16]
}
 8018d52:	bf00      	nop
 8018d54:	e7fe      	b.n	8018d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018d56:	4b3e      	ldr	r3, [pc, #248]	; (8018e50 <xPortStartScheduler+0x120>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	4a3f      	ldr	r2, [pc, #252]	; (8018e58 <xPortStartScheduler+0x128>)
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	d10a      	bne.n	8018d76 <xPortStartScheduler+0x46>
	__asm volatile
 8018d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d64:	f383 8811 	msr	BASEPRI, r3
 8018d68:	f3bf 8f6f 	isb	sy
 8018d6c:	f3bf 8f4f 	dsb	sy
 8018d70:	60fb      	str	r3, [r7, #12]
}
 8018d72:	bf00      	nop
 8018d74:	e7fe      	b.n	8018d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018d76:	4b39      	ldr	r3, [pc, #228]	; (8018e5c <xPortStartScheduler+0x12c>)
 8018d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018d7a:	697b      	ldr	r3, [r7, #20]
 8018d7c:	781b      	ldrb	r3, [r3, #0]
 8018d7e:	b2db      	uxtb	r3, r3
 8018d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018d82:	697b      	ldr	r3, [r7, #20]
 8018d84:	22ff      	movs	r2, #255	; 0xff
 8018d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	b2db      	uxtb	r3, r3
 8018d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018d90:	78fb      	ldrb	r3, [r7, #3]
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018d98:	b2da      	uxtb	r2, r3
 8018d9a:	4b31      	ldr	r3, [pc, #196]	; (8018e60 <xPortStartScheduler+0x130>)
 8018d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018d9e:	4b31      	ldr	r3, [pc, #196]	; (8018e64 <xPortStartScheduler+0x134>)
 8018da0:	2207      	movs	r2, #7
 8018da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018da4:	e009      	b.n	8018dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018da6:	4b2f      	ldr	r3, [pc, #188]	; (8018e64 <xPortStartScheduler+0x134>)
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	3b01      	subs	r3, #1
 8018dac:	4a2d      	ldr	r2, [pc, #180]	; (8018e64 <xPortStartScheduler+0x134>)
 8018dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018db0:	78fb      	ldrb	r3, [r7, #3]
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	005b      	lsls	r3, r3, #1
 8018db6:	b2db      	uxtb	r3, r3
 8018db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018dba:	78fb      	ldrb	r3, [r7, #3]
 8018dbc:	b2db      	uxtb	r3, r3
 8018dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018dc2:	2b80      	cmp	r3, #128	; 0x80
 8018dc4:	d0ef      	beq.n	8018da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018dc6:	4b27      	ldr	r3, [pc, #156]	; (8018e64 <xPortStartScheduler+0x134>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	f1c3 0307 	rsb	r3, r3, #7
 8018dce:	2b04      	cmp	r3, #4
 8018dd0:	d00a      	beq.n	8018de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8018dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dd6:	f383 8811 	msr	BASEPRI, r3
 8018dda:	f3bf 8f6f 	isb	sy
 8018dde:	f3bf 8f4f 	dsb	sy
 8018de2:	60bb      	str	r3, [r7, #8]
}
 8018de4:	bf00      	nop
 8018de6:	e7fe      	b.n	8018de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018de8:	4b1e      	ldr	r3, [pc, #120]	; (8018e64 <xPortStartScheduler+0x134>)
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	021b      	lsls	r3, r3, #8
 8018dee:	4a1d      	ldr	r2, [pc, #116]	; (8018e64 <xPortStartScheduler+0x134>)
 8018df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018df2:	4b1c      	ldr	r3, [pc, #112]	; (8018e64 <xPortStartScheduler+0x134>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018dfa:	4a1a      	ldr	r2, [pc, #104]	; (8018e64 <xPortStartScheduler+0x134>)
 8018dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	b2da      	uxtb	r2, r3
 8018e02:	697b      	ldr	r3, [r7, #20]
 8018e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018e06:	4b18      	ldr	r3, [pc, #96]	; (8018e68 <xPortStartScheduler+0x138>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	4a17      	ldr	r2, [pc, #92]	; (8018e68 <xPortStartScheduler+0x138>)
 8018e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018e12:	4b15      	ldr	r3, [pc, #84]	; (8018e68 <xPortStartScheduler+0x138>)
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	4a14      	ldr	r2, [pc, #80]	; (8018e68 <xPortStartScheduler+0x138>)
 8018e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018e1e:	f000 f8dd 	bl	8018fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018e22:	4b12      	ldr	r3, [pc, #72]	; (8018e6c <xPortStartScheduler+0x13c>)
 8018e24:	2200      	movs	r2, #0
 8018e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018e28:	f000 f8fc 	bl	8019024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018e2c:	4b10      	ldr	r3, [pc, #64]	; (8018e70 <xPortStartScheduler+0x140>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	4a0f      	ldr	r2, [pc, #60]	; (8018e70 <xPortStartScheduler+0x140>)
 8018e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018e38:	f7ff ff66 	bl	8018d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018e3c:	f7fe fc92 	bl	8017764 <vTaskSwitchContext>
	prvTaskExitError();
 8018e40:	f7ff ff1e 	bl	8018c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018e44:	2300      	movs	r3, #0
}
 8018e46:	4618      	mov	r0, r3
 8018e48:	3718      	adds	r7, #24
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}
 8018e4e:	bf00      	nop
 8018e50:	e000ed00 	.word	0xe000ed00
 8018e54:	410fc271 	.word	0x410fc271
 8018e58:	410fc270 	.word	0x410fc270
 8018e5c:	e000e400 	.word	0xe000e400
 8018e60:	20004068 	.word	0x20004068
 8018e64:	2000406c 	.word	0x2000406c
 8018e68:	e000ed20 	.word	0xe000ed20
 8018e6c:	20000040 	.word	0x20000040
 8018e70:	e000ef34 	.word	0xe000ef34

08018e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018e74:	b480      	push	{r7}
 8018e76:	b083      	sub	sp, #12
 8018e78:	af00      	add	r7, sp, #0
	__asm volatile
 8018e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e7e:	f383 8811 	msr	BASEPRI, r3
 8018e82:	f3bf 8f6f 	isb	sy
 8018e86:	f3bf 8f4f 	dsb	sy
 8018e8a:	607b      	str	r3, [r7, #4]
}
 8018e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018e8e:	4b0f      	ldr	r3, [pc, #60]	; (8018ecc <vPortEnterCritical+0x58>)
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	3301      	adds	r3, #1
 8018e94:	4a0d      	ldr	r2, [pc, #52]	; (8018ecc <vPortEnterCritical+0x58>)
 8018e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018e98:	4b0c      	ldr	r3, [pc, #48]	; (8018ecc <vPortEnterCritical+0x58>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	2b01      	cmp	r3, #1
 8018e9e:	d10f      	bne.n	8018ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018ea0:	4b0b      	ldr	r3, [pc, #44]	; (8018ed0 <vPortEnterCritical+0x5c>)
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	b2db      	uxtb	r3, r3
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d00a      	beq.n	8018ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8018eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eae:	f383 8811 	msr	BASEPRI, r3
 8018eb2:	f3bf 8f6f 	isb	sy
 8018eb6:	f3bf 8f4f 	dsb	sy
 8018eba:	603b      	str	r3, [r7, #0]
}
 8018ebc:	bf00      	nop
 8018ebe:	e7fe      	b.n	8018ebe <vPortEnterCritical+0x4a>
	}
}
 8018ec0:	bf00      	nop
 8018ec2:	370c      	adds	r7, #12
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eca:	4770      	bx	lr
 8018ecc:	20000040 	.word	0x20000040
 8018ed0:	e000ed04 	.word	0xe000ed04

08018ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018ed4:	b480      	push	{r7}
 8018ed6:	b083      	sub	sp, #12
 8018ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018eda:	4b12      	ldr	r3, [pc, #72]	; (8018f24 <vPortExitCritical+0x50>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d10a      	bne.n	8018ef8 <vPortExitCritical+0x24>
	__asm volatile
 8018ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee6:	f383 8811 	msr	BASEPRI, r3
 8018eea:	f3bf 8f6f 	isb	sy
 8018eee:	f3bf 8f4f 	dsb	sy
 8018ef2:	607b      	str	r3, [r7, #4]
}
 8018ef4:	bf00      	nop
 8018ef6:	e7fe      	b.n	8018ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018ef8:	4b0a      	ldr	r3, [pc, #40]	; (8018f24 <vPortExitCritical+0x50>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	3b01      	subs	r3, #1
 8018efe:	4a09      	ldr	r2, [pc, #36]	; (8018f24 <vPortExitCritical+0x50>)
 8018f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018f02:	4b08      	ldr	r3, [pc, #32]	; (8018f24 <vPortExitCritical+0x50>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d105      	bne.n	8018f16 <vPortExitCritical+0x42>
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018f0e:	683b      	ldr	r3, [r7, #0]
 8018f10:	f383 8811 	msr	BASEPRI, r3
}
 8018f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018f16:	bf00      	nop
 8018f18:	370c      	adds	r7, #12
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f20:	4770      	bx	lr
 8018f22:	bf00      	nop
 8018f24:	20000040 	.word	0x20000040
	...

08018f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018f30:	f3ef 8009 	mrs	r0, PSP
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	4b15      	ldr	r3, [pc, #84]	; (8018f90 <pxCurrentTCBConst>)
 8018f3a:	681a      	ldr	r2, [r3, #0]
 8018f3c:	f01e 0f10 	tst.w	lr, #16
 8018f40:	bf08      	it	eq
 8018f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4a:	6010      	str	r0, [r2, #0]
 8018f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018f54:	f380 8811 	msr	BASEPRI, r0
 8018f58:	f3bf 8f4f 	dsb	sy
 8018f5c:	f3bf 8f6f 	isb	sy
 8018f60:	f7fe fc00 	bl	8017764 <vTaskSwitchContext>
 8018f64:	f04f 0000 	mov.w	r0, #0
 8018f68:	f380 8811 	msr	BASEPRI, r0
 8018f6c:	bc09      	pop	{r0, r3}
 8018f6e:	6819      	ldr	r1, [r3, #0]
 8018f70:	6808      	ldr	r0, [r1, #0]
 8018f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f76:	f01e 0f10 	tst.w	lr, #16
 8018f7a:	bf08      	it	eq
 8018f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018f80:	f380 8809 	msr	PSP, r0
 8018f84:	f3bf 8f6f 	isb	sy
 8018f88:	4770      	bx	lr
 8018f8a:	bf00      	nop
 8018f8c:	f3af 8000 	nop.w

08018f90 <pxCurrentTCBConst>:
 8018f90:	20003a34 	.word	0x20003a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018f94:	bf00      	nop
 8018f96:	bf00      	nop

08018f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8018f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa2:	f383 8811 	msr	BASEPRI, r3
 8018fa6:	f3bf 8f6f 	isb	sy
 8018faa:	f3bf 8f4f 	dsb	sy
 8018fae:	607b      	str	r3, [r7, #4]
}
 8018fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018fb2:	f7fe fb1d 	bl	80175f0 <xTaskIncrementTick>
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d003      	beq.n	8018fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018fbc:	4b06      	ldr	r3, [pc, #24]	; (8018fd8 <xPortSysTickHandler+0x40>)
 8018fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fc2:	601a      	str	r2, [r3, #0]
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	f383 8811 	msr	BASEPRI, r3
}
 8018fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018fd0:	bf00      	nop
 8018fd2:	3708      	adds	r7, #8
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	e000ed04 	.word	0xe000ed04

08018fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018fdc:	b480      	push	{r7}
 8018fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018fe0:	4b0b      	ldr	r3, [pc, #44]	; (8019010 <vPortSetupTimerInterrupt+0x34>)
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018fe6:	4b0b      	ldr	r3, [pc, #44]	; (8019014 <vPortSetupTimerInterrupt+0x38>)
 8018fe8:	2200      	movs	r2, #0
 8018fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018fec:	4b0a      	ldr	r3, [pc, #40]	; (8019018 <vPortSetupTimerInterrupt+0x3c>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a0a      	ldr	r2, [pc, #40]	; (801901c <vPortSetupTimerInterrupt+0x40>)
 8018ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8018ff6:	099b      	lsrs	r3, r3, #6
 8018ff8:	4a09      	ldr	r2, [pc, #36]	; (8019020 <vPortSetupTimerInterrupt+0x44>)
 8018ffa:	3b01      	subs	r3, #1
 8018ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018ffe:	4b04      	ldr	r3, [pc, #16]	; (8019010 <vPortSetupTimerInterrupt+0x34>)
 8019000:	2207      	movs	r2, #7
 8019002:	601a      	str	r2, [r3, #0]
}
 8019004:	bf00      	nop
 8019006:	46bd      	mov	sp, r7
 8019008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900c:	4770      	bx	lr
 801900e:	bf00      	nop
 8019010:	e000e010 	.word	0xe000e010
 8019014:	e000e018 	.word	0xe000e018
 8019018:	20000034 	.word	0x20000034
 801901c:	10624dd3 	.word	0x10624dd3
 8019020:	e000e014 	.word	0xe000e014

08019024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019034 <vPortEnableVFP+0x10>
 8019028:	6801      	ldr	r1, [r0, #0]
 801902a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801902e:	6001      	str	r1, [r0, #0]
 8019030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019032:	bf00      	nop
 8019034:	e000ed88 	.word	0xe000ed88

08019038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019038:	b480      	push	{r7}
 801903a:	b085      	sub	sp, #20
 801903c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801903e:	f3ef 8305 	mrs	r3, IPSR
 8019042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	2b0f      	cmp	r3, #15
 8019048:	d914      	bls.n	8019074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801904a:	4a17      	ldr	r2, [pc, #92]	; (80190a8 <vPortValidateInterruptPriority+0x70>)
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	4413      	add	r3, r2
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019054:	4b15      	ldr	r3, [pc, #84]	; (80190ac <vPortValidateInterruptPriority+0x74>)
 8019056:	781b      	ldrb	r3, [r3, #0]
 8019058:	7afa      	ldrb	r2, [r7, #11]
 801905a:	429a      	cmp	r2, r3
 801905c:	d20a      	bcs.n	8019074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019062:	f383 8811 	msr	BASEPRI, r3
 8019066:	f3bf 8f6f 	isb	sy
 801906a:	f3bf 8f4f 	dsb	sy
 801906e:	607b      	str	r3, [r7, #4]
}
 8019070:	bf00      	nop
 8019072:	e7fe      	b.n	8019072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019074:	4b0e      	ldr	r3, [pc, #56]	; (80190b0 <vPortValidateInterruptPriority+0x78>)
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801907c:	4b0d      	ldr	r3, [pc, #52]	; (80190b4 <vPortValidateInterruptPriority+0x7c>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	429a      	cmp	r2, r3
 8019082:	d90a      	bls.n	801909a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019088:	f383 8811 	msr	BASEPRI, r3
 801908c:	f3bf 8f6f 	isb	sy
 8019090:	f3bf 8f4f 	dsb	sy
 8019094:	603b      	str	r3, [r7, #0]
}
 8019096:	bf00      	nop
 8019098:	e7fe      	b.n	8019098 <vPortValidateInterruptPriority+0x60>
	}
 801909a:	bf00      	nop
 801909c:	3714      	adds	r7, #20
 801909e:	46bd      	mov	sp, r7
 80190a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a4:	4770      	bx	lr
 80190a6:	bf00      	nop
 80190a8:	e000e3f0 	.word	0xe000e3f0
 80190ac:	20004068 	.word	0x20004068
 80190b0:	e000ed0c 	.word	0xe000ed0c
 80190b4:	2000406c 	.word	0x2000406c

080190b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b08a      	sub	sp, #40	; 0x28
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80190c0:	2300      	movs	r3, #0
 80190c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80190c4:	f7fe f9d8 	bl	8017478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80190c8:	4b5d      	ldr	r3, [pc, #372]	; (8019240 <pvPortMalloc+0x188>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d101      	bne.n	80190d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80190d0:	f000 f930 	bl	8019334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80190d4:	4b5b      	ldr	r3, [pc, #364]	; (8019244 <pvPortMalloc+0x18c>)
 80190d6:	681a      	ldr	r2, [r3, #0]
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	4013      	ands	r3, r2
 80190dc:	2b00      	cmp	r3, #0
 80190de:	f040 8093 	bne.w	8019208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d01d      	beq.n	8019124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80190e8:	2208      	movs	r2, #8
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	4413      	add	r3, r2
 80190ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f003 0307 	and.w	r3, r3, #7
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d014      	beq.n	8019124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	f023 0307 	bic.w	r3, r3, #7
 8019100:	3308      	adds	r3, #8
 8019102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	f003 0307 	and.w	r3, r3, #7
 801910a:	2b00      	cmp	r3, #0
 801910c:	d00a      	beq.n	8019124 <pvPortMalloc+0x6c>
	__asm volatile
 801910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019112:	f383 8811 	msr	BASEPRI, r3
 8019116:	f3bf 8f6f 	isb	sy
 801911a:	f3bf 8f4f 	dsb	sy
 801911e:	617b      	str	r3, [r7, #20]
}
 8019120:	bf00      	nop
 8019122:	e7fe      	b.n	8019122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d06e      	beq.n	8019208 <pvPortMalloc+0x150>
 801912a:	4b47      	ldr	r3, [pc, #284]	; (8019248 <pvPortMalloc+0x190>)
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	687a      	ldr	r2, [r7, #4]
 8019130:	429a      	cmp	r2, r3
 8019132:	d869      	bhi.n	8019208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019134:	4b45      	ldr	r3, [pc, #276]	; (801924c <pvPortMalloc+0x194>)
 8019136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019138:	4b44      	ldr	r3, [pc, #272]	; (801924c <pvPortMalloc+0x194>)
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801913e:	e004      	b.n	801914a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	687a      	ldr	r2, [r7, #4]
 8019150:	429a      	cmp	r2, r3
 8019152:	d903      	bls.n	801915c <pvPortMalloc+0xa4>
 8019154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d1f1      	bne.n	8019140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801915c:	4b38      	ldr	r3, [pc, #224]	; (8019240 <pvPortMalloc+0x188>)
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019162:	429a      	cmp	r2, r3
 8019164:	d050      	beq.n	8019208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019166:	6a3b      	ldr	r3, [r7, #32]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	2208      	movs	r2, #8
 801916c:	4413      	add	r3, r2
 801916e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019172:	681a      	ldr	r2, [r3, #0]
 8019174:	6a3b      	ldr	r3, [r7, #32]
 8019176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917a:	685a      	ldr	r2, [r3, #4]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	1ad2      	subs	r2, r2, r3
 8019180:	2308      	movs	r3, #8
 8019182:	005b      	lsls	r3, r3, #1
 8019184:	429a      	cmp	r2, r3
 8019186:	d91f      	bls.n	80191c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	4413      	add	r3, r2
 801918e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019190:	69bb      	ldr	r3, [r7, #24]
 8019192:	f003 0307 	and.w	r3, r3, #7
 8019196:	2b00      	cmp	r3, #0
 8019198:	d00a      	beq.n	80191b0 <pvPortMalloc+0xf8>
	__asm volatile
 801919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801919e:	f383 8811 	msr	BASEPRI, r3
 80191a2:	f3bf 8f6f 	isb	sy
 80191a6:	f3bf 8f4f 	dsb	sy
 80191aa:	613b      	str	r3, [r7, #16]
}
 80191ac:	bf00      	nop
 80191ae:	e7fe      	b.n	80191ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80191b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b2:	685a      	ldr	r2, [r3, #4]
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	1ad2      	subs	r2, r2, r3
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80191bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80191c2:	69b8      	ldr	r0, [r7, #24]
 80191c4:	f000 f918 	bl	80193f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80191c8:	4b1f      	ldr	r3, [pc, #124]	; (8019248 <pvPortMalloc+0x190>)
 80191ca:	681a      	ldr	r2, [r3, #0]
 80191cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ce:	685b      	ldr	r3, [r3, #4]
 80191d0:	1ad3      	subs	r3, r2, r3
 80191d2:	4a1d      	ldr	r2, [pc, #116]	; (8019248 <pvPortMalloc+0x190>)
 80191d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80191d6:	4b1c      	ldr	r3, [pc, #112]	; (8019248 <pvPortMalloc+0x190>)
 80191d8:	681a      	ldr	r2, [r3, #0]
 80191da:	4b1d      	ldr	r3, [pc, #116]	; (8019250 <pvPortMalloc+0x198>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	429a      	cmp	r2, r3
 80191e0:	d203      	bcs.n	80191ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80191e2:	4b19      	ldr	r3, [pc, #100]	; (8019248 <pvPortMalloc+0x190>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	4a1a      	ldr	r2, [pc, #104]	; (8019250 <pvPortMalloc+0x198>)
 80191e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80191ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ec:	685a      	ldr	r2, [r3, #4]
 80191ee:	4b15      	ldr	r3, [pc, #84]	; (8019244 <pvPortMalloc+0x18c>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	431a      	orrs	r2, r3
 80191f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80191f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191fa:	2200      	movs	r2, #0
 80191fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80191fe:	4b15      	ldr	r3, [pc, #84]	; (8019254 <pvPortMalloc+0x19c>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	3301      	adds	r3, #1
 8019204:	4a13      	ldr	r2, [pc, #76]	; (8019254 <pvPortMalloc+0x19c>)
 8019206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019208:	f7fe f944 	bl	8017494 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801920c:	69fb      	ldr	r3, [r7, #28]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d101      	bne.n	8019216 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8019212:	f7ee f985 	bl	8007520 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019216:	69fb      	ldr	r3, [r7, #28]
 8019218:	f003 0307 	and.w	r3, r3, #7
 801921c:	2b00      	cmp	r3, #0
 801921e:	d00a      	beq.n	8019236 <pvPortMalloc+0x17e>
	__asm volatile
 8019220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019224:	f383 8811 	msr	BASEPRI, r3
 8019228:	f3bf 8f6f 	isb	sy
 801922c:	f3bf 8f4f 	dsb	sy
 8019230:	60fb      	str	r3, [r7, #12]
}
 8019232:	bf00      	nop
 8019234:	e7fe      	b.n	8019234 <pvPortMalloc+0x17c>
	return pvReturn;
 8019236:	69fb      	ldr	r3, [r7, #28]
}
 8019238:	4618      	mov	r0, r3
 801923a:	3728      	adds	r7, #40	; 0x28
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}
 8019240:	20009078 	.word	0x20009078
 8019244:	2000908c 	.word	0x2000908c
 8019248:	2000907c 	.word	0x2000907c
 801924c:	20009070 	.word	0x20009070
 8019250:	20009080 	.word	0x20009080
 8019254:	20009084 	.word	0x20009084

08019258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b086      	sub	sp, #24
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d04d      	beq.n	8019306 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801926a:	2308      	movs	r3, #8
 801926c:	425b      	negs	r3, r3
 801926e:	697a      	ldr	r2, [r7, #20]
 8019270:	4413      	add	r3, r2
 8019272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019278:	693b      	ldr	r3, [r7, #16]
 801927a:	685a      	ldr	r2, [r3, #4]
 801927c:	4b24      	ldr	r3, [pc, #144]	; (8019310 <vPortFree+0xb8>)
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	4013      	ands	r3, r2
 8019282:	2b00      	cmp	r3, #0
 8019284:	d10a      	bne.n	801929c <vPortFree+0x44>
	__asm volatile
 8019286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801928a:	f383 8811 	msr	BASEPRI, r3
 801928e:	f3bf 8f6f 	isb	sy
 8019292:	f3bf 8f4f 	dsb	sy
 8019296:	60fb      	str	r3, [r7, #12]
}
 8019298:	bf00      	nop
 801929a:	e7fe      	b.n	801929a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d00a      	beq.n	80192ba <vPortFree+0x62>
	__asm volatile
 80192a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192a8:	f383 8811 	msr	BASEPRI, r3
 80192ac:	f3bf 8f6f 	isb	sy
 80192b0:	f3bf 8f4f 	dsb	sy
 80192b4:	60bb      	str	r3, [r7, #8]
}
 80192b6:	bf00      	nop
 80192b8:	e7fe      	b.n	80192b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80192ba:	693b      	ldr	r3, [r7, #16]
 80192bc:	685a      	ldr	r2, [r3, #4]
 80192be:	4b14      	ldr	r3, [pc, #80]	; (8019310 <vPortFree+0xb8>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	4013      	ands	r3, r2
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d01e      	beq.n	8019306 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80192c8:	693b      	ldr	r3, [r7, #16]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d11a      	bne.n	8019306 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80192d0:	693b      	ldr	r3, [r7, #16]
 80192d2:	685a      	ldr	r2, [r3, #4]
 80192d4:	4b0e      	ldr	r3, [pc, #56]	; (8019310 <vPortFree+0xb8>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	43db      	mvns	r3, r3
 80192da:	401a      	ands	r2, r3
 80192dc:	693b      	ldr	r3, [r7, #16]
 80192de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80192e0:	f7fe f8ca 	bl	8017478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80192e4:	693b      	ldr	r3, [r7, #16]
 80192e6:	685a      	ldr	r2, [r3, #4]
 80192e8:	4b0a      	ldr	r3, [pc, #40]	; (8019314 <vPortFree+0xbc>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	4413      	add	r3, r2
 80192ee:	4a09      	ldr	r2, [pc, #36]	; (8019314 <vPortFree+0xbc>)
 80192f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80192f2:	6938      	ldr	r0, [r7, #16]
 80192f4:	f000 f880 	bl	80193f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80192f8:	4b07      	ldr	r3, [pc, #28]	; (8019318 <vPortFree+0xc0>)
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	3301      	adds	r3, #1
 80192fe:	4a06      	ldr	r2, [pc, #24]	; (8019318 <vPortFree+0xc0>)
 8019300:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019302:	f7fe f8c7 	bl	8017494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019306:	bf00      	nop
 8019308:	3718      	adds	r7, #24
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}
 801930e:	bf00      	nop
 8019310:	2000908c 	.word	0x2000908c
 8019314:	2000907c 	.word	0x2000907c
 8019318:	20009088 	.word	0x20009088

0801931c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801931c:	b480      	push	{r7}
 801931e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8019320:	4b03      	ldr	r3, [pc, #12]	; (8019330 <xPortGetFreeHeapSize+0x14>)
 8019322:	681b      	ldr	r3, [r3, #0]
}
 8019324:	4618      	mov	r0, r3
 8019326:	46bd      	mov	sp, r7
 8019328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932c:	4770      	bx	lr
 801932e:	bf00      	nop
 8019330:	2000907c 	.word	0x2000907c

08019334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019334:	b480      	push	{r7}
 8019336:	b085      	sub	sp, #20
 8019338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801933a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801933e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019340:	4b27      	ldr	r3, [pc, #156]	; (80193e0 <prvHeapInit+0xac>)
 8019342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	f003 0307 	and.w	r3, r3, #7
 801934a:	2b00      	cmp	r3, #0
 801934c:	d00c      	beq.n	8019368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	3307      	adds	r3, #7
 8019352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	f023 0307 	bic.w	r3, r3, #7
 801935a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801935c:	68ba      	ldr	r2, [r7, #8]
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	1ad3      	subs	r3, r2, r3
 8019362:	4a1f      	ldr	r2, [pc, #124]	; (80193e0 <prvHeapInit+0xac>)
 8019364:	4413      	add	r3, r2
 8019366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801936c:	4a1d      	ldr	r2, [pc, #116]	; (80193e4 <prvHeapInit+0xb0>)
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019372:	4b1c      	ldr	r3, [pc, #112]	; (80193e4 <prvHeapInit+0xb0>)
 8019374:	2200      	movs	r2, #0
 8019376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	68ba      	ldr	r2, [r7, #8]
 801937c:	4413      	add	r3, r2
 801937e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019380:	2208      	movs	r2, #8
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	1a9b      	subs	r3, r3, r2
 8019386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	f023 0307 	bic.w	r3, r3, #7
 801938e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	4a15      	ldr	r2, [pc, #84]	; (80193e8 <prvHeapInit+0xb4>)
 8019394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019396:	4b14      	ldr	r3, [pc, #80]	; (80193e8 <prvHeapInit+0xb4>)
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	2200      	movs	r2, #0
 801939c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801939e:	4b12      	ldr	r3, [pc, #72]	; (80193e8 <prvHeapInit+0xb4>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	2200      	movs	r2, #0
 80193a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	68fa      	ldr	r2, [r7, #12]
 80193ae:	1ad2      	subs	r2, r2, r3
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80193b4:	4b0c      	ldr	r3, [pc, #48]	; (80193e8 <prvHeapInit+0xb4>)
 80193b6:	681a      	ldr	r2, [r3, #0]
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	685b      	ldr	r3, [r3, #4]
 80193c0:	4a0a      	ldr	r2, [pc, #40]	; (80193ec <prvHeapInit+0xb8>)
 80193c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	685b      	ldr	r3, [r3, #4]
 80193c8:	4a09      	ldr	r2, [pc, #36]	; (80193f0 <prvHeapInit+0xbc>)
 80193ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80193cc:	4b09      	ldr	r3, [pc, #36]	; (80193f4 <prvHeapInit+0xc0>)
 80193ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80193d2:	601a      	str	r2, [r3, #0]
}
 80193d4:	bf00      	nop
 80193d6:	3714      	adds	r7, #20
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr
 80193e0:	20004070 	.word	0x20004070
 80193e4:	20009070 	.word	0x20009070
 80193e8:	20009078 	.word	0x20009078
 80193ec:	20009080 	.word	0x20009080
 80193f0:	2000907c 	.word	0x2000907c
 80193f4:	2000908c 	.word	0x2000908c

080193f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80193f8:	b480      	push	{r7}
 80193fa:	b085      	sub	sp, #20
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019400:	4b28      	ldr	r3, [pc, #160]	; (80194a4 <prvInsertBlockIntoFreeList+0xac>)
 8019402:	60fb      	str	r3, [r7, #12]
 8019404:	e002      	b.n	801940c <prvInsertBlockIntoFreeList+0x14>
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	60fb      	str	r3, [r7, #12]
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	687a      	ldr	r2, [r7, #4]
 8019412:	429a      	cmp	r2, r3
 8019414:	d8f7      	bhi.n	8019406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	685b      	ldr	r3, [r3, #4]
 801941e:	68ba      	ldr	r2, [r7, #8]
 8019420:	4413      	add	r3, r2
 8019422:	687a      	ldr	r2, [r7, #4]
 8019424:	429a      	cmp	r2, r3
 8019426:	d108      	bne.n	801943a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	685a      	ldr	r2, [r3, #4]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	441a      	add	r2, r3
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	68ba      	ldr	r2, [r7, #8]
 8019444:	441a      	add	r2, r3
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	429a      	cmp	r2, r3
 801944c:	d118      	bne.n	8019480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	681a      	ldr	r2, [r3, #0]
 8019452:	4b15      	ldr	r3, [pc, #84]	; (80194a8 <prvInsertBlockIntoFreeList+0xb0>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	429a      	cmp	r2, r3
 8019458:	d00d      	beq.n	8019476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	685a      	ldr	r2, [r3, #4]
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	685b      	ldr	r3, [r3, #4]
 8019464:	441a      	add	r2, r3
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	681a      	ldr	r2, [r3, #0]
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	601a      	str	r2, [r3, #0]
 8019474:	e008      	b.n	8019488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019476:	4b0c      	ldr	r3, [pc, #48]	; (80194a8 <prvInsertBlockIntoFreeList+0xb0>)
 8019478:	681a      	ldr	r2, [r3, #0]
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	601a      	str	r2, [r3, #0]
 801947e:	e003      	b.n	8019488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	681a      	ldr	r2, [r3, #0]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019488:	68fa      	ldr	r2, [r7, #12]
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	429a      	cmp	r2, r3
 801948e:	d002      	beq.n	8019496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	687a      	ldr	r2, [r7, #4]
 8019494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019496:	bf00      	nop
 8019498:	3714      	adds	r7, #20
 801949a:	46bd      	mov	sp, r7
 801949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a0:	4770      	bx	lr
 80194a2:	bf00      	nop
 80194a4:	20009070 	.word	0x20009070
 80194a8:	20009078 	.word	0x20009078

080194ac <_ZdlPvj>:
 80194ac:	f000 b811 	b.w	80194d2 <_ZdlPv>

080194b0 <_Znwj>:
 80194b0:	2801      	cmp	r0, #1
 80194b2:	bf38      	it	cc
 80194b4:	2001      	movcc	r0, #1
 80194b6:	b510      	push	{r4, lr}
 80194b8:	4604      	mov	r4, r0
 80194ba:	4620      	mov	r0, r4
 80194bc:	f001 fbde 	bl	801ac7c <malloc>
 80194c0:	b930      	cbnz	r0, 80194d0 <_Znwj+0x20>
 80194c2:	f000 f809 	bl	80194d8 <_ZSt15get_new_handlerv>
 80194c6:	b908      	cbnz	r0, 80194cc <_Znwj+0x1c>
 80194c8:	f001 faac 	bl	801aa24 <abort>
 80194cc:	4780      	blx	r0
 80194ce:	e7f4      	b.n	80194ba <_Znwj+0xa>
 80194d0:	bd10      	pop	{r4, pc}

080194d2 <_ZdlPv>:
 80194d2:	f001 bbdb 	b.w	801ac8c <free>
	...

080194d8 <_ZSt15get_new_handlerv>:
 80194d8:	4b02      	ldr	r3, [pc, #8]	; (80194e4 <_ZSt15get_new_handlerv+0xc>)
 80194da:	6818      	ldr	r0, [r3, #0]
 80194dc:	f3bf 8f5b 	dmb	ish
 80194e0:	4770      	bx	lr
 80194e2:	bf00      	nop
 80194e4:	20009090 	.word	0x20009090

080194e8 <roundf>:
 80194e8:	ee10 0a10 	vmov	r0, s0
 80194ec:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80194f0:	3a7f      	subs	r2, #127	; 0x7f
 80194f2:	2a16      	cmp	r2, #22
 80194f4:	dc15      	bgt.n	8019522 <roundf+0x3a>
 80194f6:	2a00      	cmp	r2, #0
 80194f8:	da08      	bge.n	801950c <roundf+0x24>
 80194fa:	3201      	adds	r2, #1
 80194fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8019500:	d101      	bne.n	8019506 <roundf+0x1e>
 8019502:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8019506:	ee00 3a10 	vmov	s0, r3
 801950a:	4770      	bx	lr
 801950c:	4907      	ldr	r1, [pc, #28]	; (801952c <roundf+0x44>)
 801950e:	4111      	asrs	r1, r2
 8019510:	4208      	tst	r0, r1
 8019512:	d0fa      	beq.n	801950a <roundf+0x22>
 8019514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019518:	4113      	asrs	r3, r2
 801951a:	4403      	add	r3, r0
 801951c:	ea23 0301 	bic.w	r3, r3, r1
 8019520:	e7f1      	b.n	8019506 <roundf+0x1e>
 8019522:	2a80      	cmp	r2, #128	; 0x80
 8019524:	d1f1      	bne.n	801950a <roundf+0x22>
 8019526:	ee30 0a00 	vadd.f32	s0, s0, s0
 801952a:	4770      	bx	lr
 801952c:	007fffff 	.word	0x007fffff

08019530 <sinf>:
 8019530:	ee10 3a10 	vmov	r3, s0
 8019534:	b507      	push	{r0, r1, r2, lr}
 8019536:	4a1f      	ldr	r2, [pc, #124]	; (80195b4 <sinf+0x84>)
 8019538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801953c:	4293      	cmp	r3, r2
 801953e:	dc07      	bgt.n	8019550 <sinf+0x20>
 8019540:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80195b8 <sinf+0x88>
 8019544:	2000      	movs	r0, #0
 8019546:	b003      	add	sp, #12
 8019548:	f85d eb04 	ldr.w	lr, [sp], #4
 801954c:	f001 b932 	b.w	801a7b4 <__kernel_sinf>
 8019550:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019554:	db04      	blt.n	8019560 <sinf+0x30>
 8019556:	ee30 0a40 	vsub.f32	s0, s0, s0
 801955a:	b003      	add	sp, #12
 801955c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019560:	4668      	mov	r0, sp
 8019562:	f000 fd11 	bl	8019f88 <__ieee754_rem_pio2f>
 8019566:	f000 0003 	and.w	r0, r0, #3
 801956a:	2801      	cmp	r0, #1
 801956c:	d00a      	beq.n	8019584 <sinf+0x54>
 801956e:	2802      	cmp	r0, #2
 8019570:	d00f      	beq.n	8019592 <sinf+0x62>
 8019572:	b9c0      	cbnz	r0, 80195a6 <sinf+0x76>
 8019574:	eddd 0a01 	vldr	s1, [sp, #4]
 8019578:	ed9d 0a00 	vldr	s0, [sp]
 801957c:	2001      	movs	r0, #1
 801957e:	f001 f919 	bl	801a7b4 <__kernel_sinf>
 8019582:	e7ea      	b.n	801955a <sinf+0x2a>
 8019584:	eddd 0a01 	vldr	s1, [sp, #4]
 8019588:	ed9d 0a00 	vldr	s0, [sp]
 801958c:	f000 fe3c 	bl	801a208 <__kernel_cosf>
 8019590:	e7e3      	b.n	801955a <sinf+0x2a>
 8019592:	eddd 0a01 	vldr	s1, [sp, #4]
 8019596:	ed9d 0a00 	vldr	s0, [sp]
 801959a:	2001      	movs	r0, #1
 801959c:	f001 f90a 	bl	801a7b4 <__kernel_sinf>
 80195a0:	eeb1 0a40 	vneg.f32	s0, s0
 80195a4:	e7d9      	b.n	801955a <sinf+0x2a>
 80195a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80195aa:	ed9d 0a00 	vldr	s0, [sp]
 80195ae:	f000 fe2b 	bl	801a208 <__kernel_cosf>
 80195b2:	e7f5      	b.n	80195a0 <sinf+0x70>
 80195b4:	3f490fd8 	.word	0x3f490fd8
 80195b8:	00000000 	.word	0x00000000

080195bc <fmodf>:
 80195bc:	b508      	push	{r3, lr}
 80195be:	ed2d 8b02 	vpush	{d8}
 80195c2:	eef0 8a40 	vmov.f32	s17, s0
 80195c6:	eeb0 8a60 	vmov.f32	s16, s1
 80195ca:	f000 f89d 	bl	8019708 <__ieee754_fmodf>
 80195ce:	eef4 8a48 	vcmp.f32	s17, s16
 80195d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195d6:	d60c      	bvs.n	80195f2 <fmodf+0x36>
 80195d8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80195f8 <fmodf+0x3c>
 80195dc:	eeb4 8a68 	vcmp.f32	s16, s17
 80195e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e4:	d105      	bne.n	80195f2 <fmodf+0x36>
 80195e6:	f001 fa25 	bl	801aa34 <__errno>
 80195ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80195ee:	2321      	movs	r3, #33	; 0x21
 80195f0:	6003      	str	r3, [r0, #0]
 80195f2:	ecbd 8b02 	vpop	{d8}
 80195f6:	bd08      	pop	{r3, pc}
 80195f8:	00000000 	.word	0x00000000

080195fc <logf>:
 80195fc:	b508      	push	{r3, lr}
 80195fe:	ed2d 8b02 	vpush	{d8}
 8019602:	eeb0 8a40 	vmov.f32	s16, s0
 8019606:	f000 f901 	bl	801980c <__ieee754_logf>
 801960a:	eeb4 8a48 	vcmp.f32	s16, s16
 801960e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019612:	d60f      	bvs.n	8019634 <logf+0x38>
 8019614:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801961c:	dc0a      	bgt.n	8019634 <logf+0x38>
 801961e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019626:	d108      	bne.n	801963a <logf+0x3e>
 8019628:	f001 fa04 	bl	801aa34 <__errno>
 801962c:	2322      	movs	r3, #34	; 0x22
 801962e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019650 <logf+0x54>
 8019632:	6003      	str	r3, [r0, #0]
 8019634:	ecbd 8b02 	vpop	{d8}
 8019638:	bd08      	pop	{r3, pc}
 801963a:	f001 f9fb 	bl	801aa34 <__errno>
 801963e:	ecbd 8b02 	vpop	{d8}
 8019642:	2321      	movs	r3, #33	; 0x21
 8019644:	6003      	str	r3, [r0, #0]
 8019646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801964a:	4802      	ldr	r0, [pc, #8]	; (8019654 <logf+0x58>)
 801964c:	f001 b972 	b.w	801a934 <nanf>
 8019650:	ff800000 	.word	0xff800000
 8019654:	0801c7f9 	.word	0x0801c7f9

08019658 <powf>:
 8019658:	b508      	push	{r3, lr}
 801965a:	ed2d 8b04 	vpush	{d8-d9}
 801965e:	eeb0 8a60 	vmov.f32	s16, s1
 8019662:	eeb0 9a40 	vmov.f32	s18, s0
 8019666:	f000 f9c1 	bl	80199ec <__ieee754_powf>
 801966a:	eeb4 8a48 	vcmp.f32	s16, s16
 801966e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019672:	eef0 8a40 	vmov.f32	s17, s0
 8019676:	d63e      	bvs.n	80196f6 <powf+0x9e>
 8019678:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019680:	d112      	bne.n	80196a8 <powf+0x50>
 8019682:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801968a:	d039      	beq.n	8019700 <powf+0xa8>
 801968c:	eeb0 0a48 	vmov.f32	s0, s16
 8019690:	f001 f901 	bl	801a896 <finitef>
 8019694:	b378      	cbz	r0, 80196f6 <powf+0x9e>
 8019696:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801969e:	d52a      	bpl.n	80196f6 <powf+0x9e>
 80196a0:	f001 f9c8 	bl	801aa34 <__errno>
 80196a4:	2322      	movs	r3, #34	; 0x22
 80196a6:	e014      	b.n	80196d2 <powf+0x7a>
 80196a8:	f001 f8f5 	bl	801a896 <finitef>
 80196ac:	b998      	cbnz	r0, 80196d6 <powf+0x7e>
 80196ae:	eeb0 0a49 	vmov.f32	s0, s18
 80196b2:	f001 f8f0 	bl	801a896 <finitef>
 80196b6:	b170      	cbz	r0, 80196d6 <powf+0x7e>
 80196b8:	eeb0 0a48 	vmov.f32	s0, s16
 80196bc:	f001 f8eb 	bl	801a896 <finitef>
 80196c0:	b148      	cbz	r0, 80196d6 <powf+0x7e>
 80196c2:	eef4 8a68 	vcmp.f32	s17, s17
 80196c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ca:	d7e9      	bvc.n	80196a0 <powf+0x48>
 80196cc:	f001 f9b2 	bl	801aa34 <__errno>
 80196d0:	2321      	movs	r3, #33	; 0x21
 80196d2:	6003      	str	r3, [r0, #0]
 80196d4:	e00f      	b.n	80196f6 <powf+0x9e>
 80196d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80196da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196de:	d10a      	bne.n	80196f6 <powf+0x9e>
 80196e0:	eeb0 0a49 	vmov.f32	s0, s18
 80196e4:	f001 f8d7 	bl	801a896 <finitef>
 80196e8:	b128      	cbz	r0, 80196f6 <powf+0x9e>
 80196ea:	eeb0 0a48 	vmov.f32	s0, s16
 80196ee:	f001 f8d2 	bl	801a896 <finitef>
 80196f2:	2800      	cmp	r0, #0
 80196f4:	d1d4      	bne.n	80196a0 <powf+0x48>
 80196f6:	eeb0 0a68 	vmov.f32	s0, s17
 80196fa:	ecbd 8b04 	vpop	{d8-d9}
 80196fe:	bd08      	pop	{r3, pc}
 8019700:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019704:	e7f7      	b.n	80196f6 <powf+0x9e>
	...

08019708 <__ieee754_fmodf>:
 8019708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801970a:	ee10 5a90 	vmov	r5, s1
 801970e:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8019712:	d009      	beq.n	8019728 <__ieee754_fmodf+0x20>
 8019714:	ee10 2a10 	vmov	r2, s0
 8019718:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801971c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019720:	da02      	bge.n	8019728 <__ieee754_fmodf+0x20>
 8019722:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019726:	dd04      	ble.n	8019732 <__ieee754_fmodf+0x2a>
 8019728:	ee60 0a20 	vmul.f32	s1, s0, s1
 801972c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8019730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019732:	42a3      	cmp	r3, r4
 8019734:	dbfc      	blt.n	8019730 <__ieee754_fmodf+0x28>
 8019736:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801973a:	d105      	bne.n	8019748 <__ieee754_fmodf+0x40>
 801973c:	4b32      	ldr	r3, [pc, #200]	; (8019808 <__ieee754_fmodf+0x100>)
 801973e:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8019742:	ed93 0a00 	vldr	s0, [r3]
 8019746:	e7f3      	b.n	8019730 <__ieee754_fmodf+0x28>
 8019748:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 801974c:	d13f      	bne.n	80197ce <__ieee754_fmodf+0xc6>
 801974e:	0219      	lsls	r1, r3, #8
 8019750:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8019754:	2900      	cmp	r1, #0
 8019756:	dc37      	bgt.n	80197c8 <__ieee754_fmodf+0xc0>
 8019758:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 801975c:	d13d      	bne.n	80197da <__ieee754_fmodf+0xd2>
 801975e:	0227      	lsls	r7, r4, #8
 8019760:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8019764:	2f00      	cmp	r7, #0
 8019766:	da35      	bge.n	80197d4 <__ieee754_fmodf+0xcc>
 8019768:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801976c:	bfbb      	ittet	lt
 801976e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8019772:	1a12      	sublt	r2, r2, r0
 8019774:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8019778:	4093      	lsllt	r3, r2
 801977a:	bfa8      	it	ge
 801977c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8019780:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8019784:	bfb5      	itete	lt
 8019786:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801978a:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801978e:	1a52      	sublt	r2, r2, r1
 8019790:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8019794:	bfb8      	it	lt
 8019796:	4094      	lsllt	r4, r2
 8019798:	1a40      	subs	r0, r0, r1
 801979a:	1b1a      	subs	r2, r3, r4
 801979c:	bb00      	cbnz	r0, 80197e0 <__ieee754_fmodf+0xd8>
 801979e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80197a2:	bf38      	it	cc
 80197a4:	4613      	movcc	r3, r2
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d0c8      	beq.n	801973c <__ieee754_fmodf+0x34>
 80197aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80197ae:	db1f      	blt.n	80197f0 <__ieee754_fmodf+0xe8>
 80197b0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80197b4:	db1f      	blt.n	80197f6 <__ieee754_fmodf+0xee>
 80197b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80197ba:	317f      	adds	r1, #127	; 0x7f
 80197bc:	4333      	orrs	r3, r6
 80197be:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80197c2:	ee00 3a10 	vmov	s0, r3
 80197c6:	e7b3      	b.n	8019730 <__ieee754_fmodf+0x28>
 80197c8:	3801      	subs	r0, #1
 80197ca:	0049      	lsls	r1, r1, #1
 80197cc:	e7c2      	b.n	8019754 <__ieee754_fmodf+0x4c>
 80197ce:	15d8      	asrs	r0, r3, #23
 80197d0:	387f      	subs	r0, #127	; 0x7f
 80197d2:	e7c1      	b.n	8019758 <__ieee754_fmodf+0x50>
 80197d4:	3901      	subs	r1, #1
 80197d6:	007f      	lsls	r7, r7, #1
 80197d8:	e7c4      	b.n	8019764 <__ieee754_fmodf+0x5c>
 80197da:	15e1      	asrs	r1, r4, #23
 80197dc:	397f      	subs	r1, #127	; 0x7f
 80197de:	e7c3      	b.n	8019768 <__ieee754_fmodf+0x60>
 80197e0:	2a00      	cmp	r2, #0
 80197e2:	da02      	bge.n	80197ea <__ieee754_fmodf+0xe2>
 80197e4:	005b      	lsls	r3, r3, #1
 80197e6:	3801      	subs	r0, #1
 80197e8:	e7d7      	b.n	801979a <__ieee754_fmodf+0x92>
 80197ea:	d0a7      	beq.n	801973c <__ieee754_fmodf+0x34>
 80197ec:	0053      	lsls	r3, r2, #1
 80197ee:	e7fa      	b.n	80197e6 <__ieee754_fmodf+0xde>
 80197f0:	005b      	lsls	r3, r3, #1
 80197f2:	3901      	subs	r1, #1
 80197f4:	e7d9      	b.n	80197aa <__ieee754_fmodf+0xa2>
 80197f6:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80197fa:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80197fe:	3182      	adds	r1, #130	; 0x82
 8019800:	410b      	asrs	r3, r1
 8019802:	4333      	orrs	r3, r6
 8019804:	e7dd      	b.n	80197c2 <__ieee754_fmodf+0xba>
 8019806:	bf00      	nop
 8019808:	0801c3a0 	.word	0x0801c3a0

0801980c <__ieee754_logf>:
 801980c:	ee10 3a10 	vmov	r3, s0
 8019810:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019814:	d106      	bne.n	8019824 <__ieee754_logf+0x18>
 8019816:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80199ac <__ieee754_logf+0x1a0>
 801981a:	eddf 7a65 	vldr	s15, [pc, #404]	; 80199b0 <__ieee754_logf+0x1a4>
 801981e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019822:	4770      	bx	lr
 8019824:	2b00      	cmp	r3, #0
 8019826:	da02      	bge.n	801982e <__ieee754_logf+0x22>
 8019828:	ee30 7a40 	vsub.f32	s14, s0, s0
 801982c:	e7f5      	b.n	801981a <__ieee754_logf+0xe>
 801982e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019832:	db02      	blt.n	801983a <__ieee754_logf+0x2e>
 8019834:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019838:	4770      	bx	lr
 801983a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801983e:	bfb8      	it	lt
 8019840:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80199b4 <__ieee754_logf+0x1a8>
 8019844:	485c      	ldr	r0, [pc, #368]	; (80199b8 <__ieee754_logf+0x1ac>)
 8019846:	bfbe      	ittt	lt
 8019848:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801984c:	f06f 0118 	mvnlt.w	r1, #24
 8019850:	ee17 3a90 	vmovlt	r3, s15
 8019854:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019858:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801985c:	4418      	add	r0, r3
 801985e:	bfa8      	it	ge
 8019860:	2100      	movge	r1, #0
 8019862:	3a7f      	subs	r2, #127	; 0x7f
 8019864:	440a      	add	r2, r1
 8019866:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801986a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801986e:	4319      	orrs	r1, r3
 8019870:	ee00 1a10 	vmov	s0, r1
 8019874:	4951      	ldr	r1, [pc, #324]	; (80199bc <__ieee754_logf+0x1b0>)
 8019876:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801987a:	f103 000f 	add.w	r0, r3, #15
 801987e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019882:	4001      	ands	r1, r0
 8019884:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019888:	bb89      	cbnz	r1, 80198ee <__ieee754_logf+0xe2>
 801988a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801988e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019892:	d10f      	bne.n	80198b4 <__ieee754_logf+0xa8>
 8019894:	2a00      	cmp	r2, #0
 8019896:	f000 8085 	beq.w	80199a4 <__ieee754_logf+0x198>
 801989a:	ee07 2a90 	vmov	s15, r2
 801989e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80199c0 <__ieee754_logf+0x1b4>
 80198a2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80199c4 <__ieee754_logf+0x1b8>
 80198a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80198ae:	eea7 0a87 	vfma.f32	s0, s15, s14
 80198b2:	4770      	bx	lr
 80198b4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80199c8 <__ieee754_logf+0x1bc>
 80198b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80198bc:	eee0 7a66 	vfms.f32	s15, s0, s13
 80198c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80198c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198c8:	b912      	cbnz	r2, 80198d0 <__ieee754_logf+0xc4>
 80198ca:	ee30 0a47 	vsub.f32	s0, s0, s14
 80198ce:	4770      	bx	lr
 80198d0:	ee07 2a90 	vmov	s15, r2
 80198d4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80199c0 <__ieee754_logf+0x1b4>
 80198d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198dc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80198e0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80198e4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80199c4 <__ieee754_logf+0x1b8>
 80198e8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80198ec:	4770      	bx	lr
 80198ee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80198f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80198f6:	eddf 5a35 	vldr	s11, [pc, #212]	; 80199cc <__ieee754_logf+0x1c0>
 80198fa:	eddf 4a35 	vldr	s9, [pc, #212]	; 80199d0 <__ieee754_logf+0x1c4>
 80198fe:	4935      	ldr	r1, [pc, #212]	; (80199d4 <__ieee754_logf+0x1c8>)
 8019900:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8019904:	4419      	add	r1, r3
 8019906:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801990a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801990e:	430b      	orrs	r3, r1
 8019910:	2b00      	cmp	r3, #0
 8019912:	ee07 2a90 	vmov	s15, r2
 8019916:	ee26 5a06 	vmul.f32	s10, s12, s12
 801991a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801991e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8019922:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80199d8 <__ieee754_logf+0x1cc>
 8019926:	eee7 7a25 	vfma.f32	s15, s14, s11
 801992a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80199dc <__ieee754_logf+0x1d0>
 801992e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019932:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80199e0 <__ieee754_logf+0x1d4>
 8019936:	eee7 7a24 	vfma.f32	s15, s14, s9
 801993a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80199e4 <__ieee754_logf+0x1d8>
 801993e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8019942:	eddf 7a29 	vldr	s15, [pc, #164]	; 80199e8 <__ieee754_logf+0x1dc>
 8019946:	eee4 7a87 	vfma.f32	s15, s9, s14
 801994a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801994e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019952:	dd1c      	ble.n	801998e <__ieee754_logf+0x182>
 8019954:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019958:	ee20 7a07 	vmul.f32	s14, s0, s14
 801995c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8019960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019964:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019968:	b922      	cbnz	r2, 8019974 <__ieee754_logf+0x168>
 801996a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801996e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019972:	4770      	bx	lr
 8019974:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80199c0 <__ieee754_logf+0x1b4>
 8019978:	eee6 7a86 	vfma.f32	s15, s13, s12
 801997c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019980:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019984:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80199c4 <__ieee754_logf+0x1b8>
 8019988:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801998c:	4770      	bx	lr
 801998e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019992:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019996:	2a00      	cmp	r2, #0
 8019998:	d0e9      	beq.n	801996e <__ieee754_logf+0x162>
 801999a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80199c0 <__ieee754_logf+0x1b4>
 801999e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80199a2:	e7ed      	b.n	8019980 <__ieee754_logf+0x174>
 80199a4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80199b0 <__ieee754_logf+0x1a4>
 80199a8:	4770      	bx	lr
 80199aa:	bf00      	nop
 80199ac:	cc000000 	.word	0xcc000000
 80199b0:	00000000 	.word	0x00000000
 80199b4:	4c000000 	.word	0x4c000000
 80199b8:	004afb20 	.word	0x004afb20
 80199bc:	007ffff0 	.word	0x007ffff0
 80199c0:	3717f7d1 	.word	0x3717f7d1
 80199c4:	3f317180 	.word	0x3f317180
 80199c8:	3eaaaaab 	.word	0x3eaaaaab
 80199cc:	3e1cd04f 	.word	0x3e1cd04f
 80199d0:	3e178897 	.word	0x3e178897
 80199d4:	ffcf5c30 	.word	0xffcf5c30
 80199d8:	3e638e29 	.word	0x3e638e29
 80199dc:	3ecccccd 	.word	0x3ecccccd
 80199e0:	3e3a3325 	.word	0x3e3a3325
 80199e4:	3e924925 	.word	0x3e924925
 80199e8:	3f2aaaab 	.word	0x3f2aaaab

080199ec <__ieee754_powf>:
 80199ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f0:	ee10 4a90 	vmov	r4, s1
 80199f4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80199f8:	ed2d 8b02 	vpush	{d8}
 80199fc:	ee10 6a10 	vmov	r6, s0
 8019a00:	eeb0 8a40 	vmov.f32	s16, s0
 8019a04:	eef0 8a60 	vmov.f32	s17, s1
 8019a08:	d10c      	bne.n	8019a24 <__ieee754_powf+0x38>
 8019a0a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8019a0e:	0076      	lsls	r6, r6, #1
 8019a10:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8019a14:	f240 8296 	bls.w	8019f44 <__ieee754_powf+0x558>
 8019a18:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019a1c:	ecbd 8b02 	vpop	{d8}
 8019a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019a28:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019a2c:	dcf4      	bgt.n	8019a18 <__ieee754_powf+0x2c>
 8019a2e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8019a32:	dd08      	ble.n	8019a46 <__ieee754_powf+0x5a>
 8019a34:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8019a38:	d1ee      	bne.n	8019a18 <__ieee754_powf+0x2c>
 8019a3a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8019a3e:	0064      	lsls	r4, r4, #1
 8019a40:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8019a44:	e7e6      	b.n	8019a14 <__ieee754_powf+0x28>
 8019a46:	2e00      	cmp	r6, #0
 8019a48:	da20      	bge.n	8019a8c <__ieee754_powf+0xa0>
 8019a4a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8019a4e:	da2d      	bge.n	8019aac <__ieee754_powf+0xc0>
 8019a50:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8019a54:	f2c0 827f 	blt.w	8019f56 <__ieee754_powf+0x56a>
 8019a58:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8019a5c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019a60:	fa48 f703 	asr.w	r7, r8, r3
 8019a64:	fa07 f303 	lsl.w	r3, r7, r3
 8019a68:	4543      	cmp	r3, r8
 8019a6a:	f040 8274 	bne.w	8019f56 <__ieee754_powf+0x56a>
 8019a6e:	f007 0701 	and.w	r7, r7, #1
 8019a72:	f1c7 0702 	rsb	r7, r7, #2
 8019a76:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8019a7a:	d11f      	bne.n	8019abc <__ieee754_powf+0xd0>
 8019a7c:	2c00      	cmp	r4, #0
 8019a7e:	f280 8267 	bge.w	8019f50 <__ieee754_powf+0x564>
 8019a82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019a86:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019a8a:	e7c7      	b.n	8019a1c <__ieee754_powf+0x30>
 8019a8c:	2700      	movs	r7, #0
 8019a8e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8019a92:	d1f0      	bne.n	8019a76 <__ieee754_powf+0x8a>
 8019a94:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8019a98:	f000 8254 	beq.w	8019f44 <__ieee754_powf+0x558>
 8019a9c:	dd08      	ble.n	8019ab0 <__ieee754_powf+0xc4>
 8019a9e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8019da8 <__ieee754_powf+0x3bc>
 8019aa2:	2c00      	cmp	r4, #0
 8019aa4:	bfa8      	it	ge
 8019aa6:	eeb0 0a68 	vmovge.f32	s0, s17
 8019aaa:	e7b7      	b.n	8019a1c <__ieee754_powf+0x30>
 8019aac:	2702      	movs	r7, #2
 8019aae:	e7ee      	b.n	8019a8e <__ieee754_powf+0xa2>
 8019ab0:	2c00      	cmp	r4, #0
 8019ab2:	f280 824a 	bge.w	8019f4a <__ieee754_powf+0x55e>
 8019ab6:	eeb1 0a68 	vneg.f32	s0, s17
 8019aba:	e7af      	b.n	8019a1c <__ieee754_powf+0x30>
 8019abc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8019ac0:	d102      	bne.n	8019ac8 <__ieee754_powf+0xdc>
 8019ac2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019ac6:	e7a9      	b.n	8019a1c <__ieee754_powf+0x30>
 8019ac8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8019acc:	eeb0 0a48 	vmov.f32	s0, s16
 8019ad0:	d107      	bne.n	8019ae2 <__ieee754_powf+0xf6>
 8019ad2:	2e00      	cmp	r6, #0
 8019ad4:	db05      	blt.n	8019ae2 <__ieee754_powf+0xf6>
 8019ad6:	ecbd 8b02 	vpop	{d8}
 8019ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ade:	f000 bb8f 	b.w	801a200 <__ieee754_sqrtf>
 8019ae2:	f000 fed1 	bl	801a888 <fabsf>
 8019ae6:	b125      	cbz	r5, 8019af2 <__ieee754_powf+0x106>
 8019ae8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8019aec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019af0:	d116      	bne.n	8019b20 <__ieee754_powf+0x134>
 8019af2:	2c00      	cmp	r4, #0
 8019af4:	bfbc      	itt	lt
 8019af6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8019afa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019afe:	2e00      	cmp	r6, #0
 8019b00:	da8c      	bge.n	8019a1c <__ieee754_powf+0x30>
 8019b02:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8019b06:	ea55 0307 	orrs.w	r3, r5, r7
 8019b0a:	d104      	bne.n	8019b16 <__ieee754_powf+0x12a>
 8019b0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019b10:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019b14:	e782      	b.n	8019a1c <__ieee754_powf+0x30>
 8019b16:	2f01      	cmp	r7, #1
 8019b18:	d180      	bne.n	8019a1c <__ieee754_powf+0x30>
 8019b1a:	eeb1 0a40 	vneg.f32	s0, s0
 8019b1e:	e77d      	b.n	8019a1c <__ieee754_powf+0x30>
 8019b20:	0ff0      	lsrs	r0, r6, #31
 8019b22:	3801      	subs	r0, #1
 8019b24:	ea57 0300 	orrs.w	r3, r7, r0
 8019b28:	d104      	bne.n	8019b34 <__ieee754_powf+0x148>
 8019b2a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019b2e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019b32:	e773      	b.n	8019a1c <__ieee754_powf+0x30>
 8019b34:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8019b38:	dd74      	ble.n	8019c24 <__ieee754_powf+0x238>
 8019b3a:	4b9c      	ldr	r3, [pc, #624]	; (8019dac <__ieee754_powf+0x3c0>)
 8019b3c:	429d      	cmp	r5, r3
 8019b3e:	dc08      	bgt.n	8019b52 <__ieee754_powf+0x166>
 8019b40:	2c00      	cmp	r4, #0
 8019b42:	da0b      	bge.n	8019b5c <__ieee754_powf+0x170>
 8019b44:	2000      	movs	r0, #0
 8019b46:	ecbd 8b02 	vpop	{d8}
 8019b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b4e:	f000 be95 	b.w	801a87c <__math_oflowf>
 8019b52:	4b97      	ldr	r3, [pc, #604]	; (8019db0 <__ieee754_powf+0x3c4>)
 8019b54:	429d      	cmp	r5, r3
 8019b56:	dd08      	ble.n	8019b6a <__ieee754_powf+0x17e>
 8019b58:	2c00      	cmp	r4, #0
 8019b5a:	dcf3      	bgt.n	8019b44 <__ieee754_powf+0x158>
 8019b5c:	2000      	movs	r0, #0
 8019b5e:	ecbd 8b02 	vpop	{d8}
 8019b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b66:	f000 be83 	b.w	801a870 <__math_uflowf>
 8019b6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019b6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b72:	eddf 6a90 	vldr	s13, [pc, #576]	; 8019db4 <__ieee754_powf+0x3c8>
 8019b76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8019b7a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8019b7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019b82:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019b86:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019b8e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019db8 <__ieee754_powf+0x3cc>
 8019b92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8019b96:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8019dbc <__ieee754_powf+0x3d0>
 8019b9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019b9e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8019dc0 <__ieee754_powf+0x3d4>
 8019ba2:	eef0 6a67 	vmov.f32	s13, s15
 8019ba6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8019baa:	ee16 3a90 	vmov	r3, s13
 8019bae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019bb2:	f023 030f 	bic.w	r3, r3, #15
 8019bb6:	ee00 3a90 	vmov	s1, r3
 8019bba:	eee0 0a47 	vfms.f32	s1, s0, s14
 8019bbe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019bc2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8019bc6:	f024 040f 	bic.w	r4, r4, #15
 8019bca:	ee07 4a10 	vmov	s14, r4
 8019bce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019bd2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8019bd6:	ee07 3a90 	vmov	s15, r3
 8019bda:	eee7 0a27 	vfma.f32	s1, s14, s15
 8019bde:	3f01      	subs	r7, #1
 8019be0:	ea57 0200 	orrs.w	r2, r7, r0
 8019be4:	ee07 4a10 	vmov	s14, r4
 8019be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019bec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8019bf0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019bf4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019bf8:	ee17 4a10 	vmov	r4, s14
 8019bfc:	bf08      	it	eq
 8019bfe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8019c02:	2c00      	cmp	r4, #0
 8019c04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019c08:	f340 817e 	ble.w	8019f08 <__ieee754_powf+0x51c>
 8019c0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8019c10:	f340 80f8 	ble.w	8019e04 <__ieee754_powf+0x418>
 8019c14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c1c:	bf4c      	ite	mi
 8019c1e:	2001      	movmi	r0, #1
 8019c20:	2000      	movpl	r0, #0
 8019c22:	e790      	b.n	8019b46 <__ieee754_powf+0x15a>
 8019c24:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8019c28:	bf01      	itttt	eq
 8019c2a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8019dc4 <__ieee754_powf+0x3d8>
 8019c2e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8019c32:	f06f 0217 	mvneq.w	r2, #23
 8019c36:	ee17 5a90 	vmoveq	r5, s15
 8019c3a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019c3e:	bf18      	it	ne
 8019c40:	2200      	movne	r2, #0
 8019c42:	3b7f      	subs	r3, #127	; 0x7f
 8019c44:	4413      	add	r3, r2
 8019c46:	4a60      	ldr	r2, [pc, #384]	; (8019dc8 <__ieee754_powf+0x3dc>)
 8019c48:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8019c4c:	4295      	cmp	r5, r2
 8019c4e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8019c52:	dd06      	ble.n	8019c62 <__ieee754_powf+0x276>
 8019c54:	4a5d      	ldr	r2, [pc, #372]	; (8019dcc <__ieee754_powf+0x3e0>)
 8019c56:	4295      	cmp	r5, r2
 8019c58:	f340 80a4 	ble.w	8019da4 <__ieee754_powf+0x3b8>
 8019c5c:	3301      	adds	r3, #1
 8019c5e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019c62:	2500      	movs	r5, #0
 8019c64:	4a5a      	ldr	r2, [pc, #360]	; (8019dd0 <__ieee754_powf+0x3e4>)
 8019c66:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8019c6a:	ee07 1a90 	vmov	s15, r1
 8019c6e:	ed92 7a00 	vldr	s14, [r2]
 8019c72:	4a58      	ldr	r2, [pc, #352]	; (8019dd4 <__ieee754_powf+0x3e8>)
 8019c74:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019c78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019c7c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8019c80:	1049      	asrs	r1, r1, #1
 8019c82:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8019c86:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019c8a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8019c8e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8019c92:	ee06 1a10 	vmov	s12, r1
 8019c96:	ee65 4a26 	vmul.f32	s9, s10, s13
 8019c9a:	ee36 7a47 	vsub.f32	s14, s12, s14
 8019c9e:	ee14 6a90 	vmov	r6, s9
 8019ca2:	4016      	ands	r6, r2
 8019ca4:	ee05 6a90 	vmov	s11, r6
 8019ca8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8019cac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cb0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019dd8 <__ieee754_powf+0x3ec>
 8019cb4:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8019cb8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8019cbc:	ee25 6a26 	vmul.f32	s12, s10, s13
 8019cc0:	eddf 6a46 	vldr	s13, [pc, #280]	; 8019ddc <__ieee754_powf+0x3f0>
 8019cc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019cc8:	eddf 6a45 	vldr	s13, [pc, #276]	; 8019de0 <__ieee754_powf+0x3f4>
 8019ccc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019cd0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019db4 <__ieee754_powf+0x3c8>
 8019cd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019cd8:	eddf 6a42 	vldr	s13, [pc, #264]	; 8019de4 <__ieee754_powf+0x3f8>
 8019cdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019ce0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019de8 <__ieee754_powf+0x3fc>
 8019ce4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019ce8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8019cec:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8019cf0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019cf4:	eee5 6a07 	vfma.f32	s13, s10, s14
 8019cf8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8019cfc:	eef0 7a45 	vmov.f32	s15, s10
 8019d00:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8019d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d08:	ee17 1a90 	vmov	r1, s15
 8019d0c:	4011      	ands	r1, r2
 8019d0e:	ee07 1a90 	vmov	s15, r1
 8019d12:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8019d16:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8019d1a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019d1e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019d22:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019d26:	eeb0 6a47 	vmov.f32	s12, s14
 8019d2a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019d2e:	ee16 1a10 	vmov	r1, s12
 8019d32:	4011      	ands	r1, r2
 8019d34:	ee06 1a90 	vmov	s13, r1
 8019d38:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8019d3c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019dec <__ieee754_powf+0x400>
 8019d40:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8019df0 <__ieee754_powf+0x404>
 8019d44:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019d48:	ee06 1a10 	vmov	s12, r1
 8019d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d50:	eddf 7a28 	vldr	s15, [pc, #160]	; 8019df4 <__ieee754_powf+0x408>
 8019d54:	4928      	ldr	r1, [pc, #160]	; (8019df8 <__ieee754_powf+0x40c>)
 8019d56:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019d5a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8019d5e:	edd1 7a00 	vldr	s15, [r1]
 8019d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d66:	ee07 3a90 	vmov	s15, r3
 8019d6a:	4b24      	ldr	r3, [pc, #144]	; (8019dfc <__ieee754_powf+0x410>)
 8019d6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019d70:	eef0 7a47 	vmov.f32	s15, s14
 8019d74:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019d78:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8019d7c:	edd5 0a00 	vldr	s1, [r5]
 8019d80:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d88:	ee17 3a90 	vmov	r3, s15
 8019d8c:	4013      	ands	r3, r2
 8019d8e:	ee07 3a90 	vmov	s15, r3
 8019d92:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8019d96:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8019d9a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8019d9e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8019da2:	e70e      	b.n	8019bc2 <__ieee754_powf+0x1d6>
 8019da4:	2501      	movs	r5, #1
 8019da6:	e75d      	b.n	8019c64 <__ieee754_powf+0x278>
 8019da8:	00000000 	.word	0x00000000
 8019dac:	3f7ffff3 	.word	0x3f7ffff3
 8019db0:	3f800007 	.word	0x3f800007
 8019db4:	3eaaaaab 	.word	0x3eaaaaab
 8019db8:	3fb8aa3b 	.word	0x3fb8aa3b
 8019dbc:	36eca570 	.word	0x36eca570
 8019dc0:	3fb8aa00 	.word	0x3fb8aa00
 8019dc4:	4b800000 	.word	0x4b800000
 8019dc8:	001cc471 	.word	0x001cc471
 8019dcc:	005db3d6 	.word	0x005db3d6
 8019dd0:	0801c3a8 	.word	0x0801c3a8
 8019dd4:	fffff000 	.word	0xfffff000
 8019dd8:	3e6c3255 	.word	0x3e6c3255
 8019ddc:	3e53f142 	.word	0x3e53f142
 8019de0:	3e8ba305 	.word	0x3e8ba305
 8019de4:	3edb6db7 	.word	0x3edb6db7
 8019de8:	3f19999a 	.word	0x3f19999a
 8019dec:	3f76384f 	.word	0x3f76384f
 8019df0:	3f763800 	.word	0x3f763800
 8019df4:	369dc3a0 	.word	0x369dc3a0
 8019df8:	0801c3b8 	.word	0x0801c3b8
 8019dfc:	0801c3b0 	.word	0x0801c3b0
 8019e00:	3338aa3c 	.word	0x3338aa3c
 8019e04:	f040 8095 	bne.w	8019f32 <__ieee754_powf+0x546>
 8019e08:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019e00 <__ieee754_powf+0x414>
 8019e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019e10:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019e14:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e1c:	f73f aefa 	bgt.w	8019c14 <__ieee754_powf+0x228>
 8019e20:	15db      	asrs	r3, r3, #23
 8019e22:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019e26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019e2a:	4103      	asrs	r3, r0
 8019e2c:	4423      	add	r3, r4
 8019e2e:	494b      	ldr	r1, [pc, #300]	; (8019f5c <__ieee754_powf+0x570>)
 8019e30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019e34:	3a7f      	subs	r2, #127	; 0x7f
 8019e36:	4111      	asrs	r1, r2
 8019e38:	ea23 0101 	bic.w	r1, r3, r1
 8019e3c:	ee07 1a10 	vmov	s14, r1
 8019e40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019e48:	f1c2 0217 	rsb	r2, r2, #23
 8019e4c:	4110      	asrs	r0, r2
 8019e4e:	2c00      	cmp	r4, #0
 8019e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e54:	bfb8      	it	lt
 8019e56:	4240      	neglt	r0, r0
 8019e58:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019e5c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8019f60 <__ieee754_powf+0x574>
 8019e60:	eddf 6a40 	vldr	s13, [pc, #256]	; 8019f64 <__ieee754_powf+0x578>
 8019e64:	ee17 3a10 	vmov	r3, s14
 8019e68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019e6c:	f023 030f 	bic.w	r3, r3, #15
 8019e70:	ee07 3a10 	vmov	s14, r3
 8019e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e78:	ee27 0a00 	vmul.f32	s0, s14, s0
 8019e7c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019e80:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019f68 <__ieee754_powf+0x57c>
 8019e84:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8019e88:	eef0 7a40 	vmov.f32	s15, s0
 8019e8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019e90:	eeb0 6a67 	vmov.f32	s12, s15
 8019e94:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019e98:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8019e9c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8019ea0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8019f6c <__ieee754_powf+0x580>
 8019ea4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8019f70 <__ieee754_powf+0x584>
 8019ea8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8019eac:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8019f74 <__ieee754_powf+0x588>
 8019eb0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019eb4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019f78 <__ieee754_powf+0x58c>
 8019eb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019ebc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019f7c <__ieee754_powf+0x590>
 8019ec0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019ec4:	eef0 6a67 	vmov.f32	s13, s15
 8019ec8:	eee6 6a47 	vfms.f32	s13, s12, s14
 8019ecc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019ed0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8019ed4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8019ed8:	eea7 0a80 	vfma.f32	s0, s15, s0
 8019edc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019ee0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019ee4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019ee8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019eec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019ef0:	ee10 3a10 	vmov	r3, s0
 8019ef4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019efc:	da1f      	bge.n	8019f3e <__ieee754_powf+0x552>
 8019efe:	f000 fd1f 	bl	801a940 <scalbnf>
 8019f02:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019f06:	e589      	b.n	8019a1c <__ieee754_powf+0x30>
 8019f08:	4a1d      	ldr	r2, [pc, #116]	; (8019f80 <__ieee754_powf+0x594>)
 8019f0a:	4293      	cmp	r3, r2
 8019f0c:	dd07      	ble.n	8019f1e <__ieee754_powf+0x532>
 8019f0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f16:	bf4c      	ite	mi
 8019f18:	2001      	movmi	r0, #1
 8019f1a:	2000      	movpl	r0, #0
 8019f1c:	e61f      	b.n	8019b5e <__ieee754_powf+0x172>
 8019f1e:	d108      	bne.n	8019f32 <__ieee754_powf+0x546>
 8019f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019f24:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f2c:	f6ff af78 	blt.w	8019e20 <__ieee754_powf+0x434>
 8019f30:	e7ed      	b.n	8019f0e <__ieee754_powf+0x522>
 8019f32:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019f36:	f73f af73 	bgt.w	8019e20 <__ieee754_powf+0x434>
 8019f3a:	2000      	movs	r0, #0
 8019f3c:	e78c      	b.n	8019e58 <__ieee754_powf+0x46c>
 8019f3e:	ee00 3a10 	vmov	s0, r3
 8019f42:	e7de      	b.n	8019f02 <__ieee754_powf+0x516>
 8019f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019f48:	e568      	b.n	8019a1c <__ieee754_powf+0x30>
 8019f4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019f84 <__ieee754_powf+0x598>
 8019f4e:	e565      	b.n	8019a1c <__ieee754_powf+0x30>
 8019f50:	eeb0 0a48 	vmov.f32	s0, s16
 8019f54:	e562      	b.n	8019a1c <__ieee754_powf+0x30>
 8019f56:	2700      	movs	r7, #0
 8019f58:	e58d      	b.n	8019a76 <__ieee754_powf+0x8a>
 8019f5a:	bf00      	nop
 8019f5c:	007fffff 	.word	0x007fffff
 8019f60:	35bfbe8c 	.word	0x35bfbe8c
 8019f64:	3f317200 	.word	0x3f317200
 8019f68:	3f317218 	.word	0x3f317218
 8019f6c:	b5ddea0e 	.word	0xb5ddea0e
 8019f70:	3331bb4c 	.word	0x3331bb4c
 8019f74:	388ab355 	.word	0x388ab355
 8019f78:	bb360b61 	.word	0xbb360b61
 8019f7c:	3e2aaaab 	.word	0x3e2aaaab
 8019f80:	43160000 	.word	0x43160000
 8019f84:	00000000 	.word	0x00000000

08019f88 <__ieee754_rem_pio2f>:
 8019f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f8a:	ee10 6a10 	vmov	r6, s0
 8019f8e:	4b8e      	ldr	r3, [pc, #568]	; (801a1c8 <__ieee754_rem_pio2f+0x240>)
 8019f90:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019f94:	429d      	cmp	r5, r3
 8019f96:	b087      	sub	sp, #28
 8019f98:	eef0 7a40 	vmov.f32	s15, s0
 8019f9c:	4604      	mov	r4, r0
 8019f9e:	dc05      	bgt.n	8019fac <__ieee754_rem_pio2f+0x24>
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	ed80 0a00 	vstr	s0, [r0]
 8019fa6:	6043      	str	r3, [r0, #4]
 8019fa8:	2000      	movs	r0, #0
 8019faa:	e01a      	b.n	8019fe2 <__ieee754_rem_pio2f+0x5a>
 8019fac:	4b87      	ldr	r3, [pc, #540]	; (801a1cc <__ieee754_rem_pio2f+0x244>)
 8019fae:	429d      	cmp	r5, r3
 8019fb0:	dc46      	bgt.n	801a040 <__ieee754_rem_pio2f+0xb8>
 8019fb2:	2e00      	cmp	r6, #0
 8019fb4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801a1d0 <__ieee754_rem_pio2f+0x248>
 8019fb8:	4b86      	ldr	r3, [pc, #536]	; (801a1d4 <__ieee754_rem_pio2f+0x24c>)
 8019fba:	f025 050f 	bic.w	r5, r5, #15
 8019fbe:	dd1f      	ble.n	801a000 <__ieee754_rem_pio2f+0x78>
 8019fc0:	429d      	cmp	r5, r3
 8019fc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019fc6:	d00e      	beq.n	8019fe6 <__ieee754_rem_pio2f+0x5e>
 8019fc8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801a1d8 <__ieee754_rem_pio2f+0x250>
 8019fcc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019fd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019fd4:	ed80 0a00 	vstr	s0, [r0]
 8019fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019fdc:	2001      	movs	r0, #1
 8019fde:	edc4 7a01 	vstr	s15, [r4, #4]
 8019fe2:	b007      	add	sp, #28
 8019fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fe6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801a1dc <__ieee754_rem_pio2f+0x254>
 8019fea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801a1e0 <__ieee754_rem_pio2f+0x258>
 8019fee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019ff2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019ff6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019ffa:	edc0 6a00 	vstr	s13, [r0]
 8019ffe:	e7eb      	b.n	8019fd8 <__ieee754_rem_pio2f+0x50>
 801a000:	429d      	cmp	r5, r3
 801a002:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a006:	d00e      	beq.n	801a026 <__ieee754_rem_pio2f+0x9e>
 801a008:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801a1d8 <__ieee754_rem_pio2f+0x250>
 801a00c:	ee37 0a87 	vadd.f32	s0, s15, s14
 801a010:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a014:	ed80 0a00 	vstr	s0, [r0]
 801a018:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a01c:	f04f 30ff 	mov.w	r0, #4294967295
 801a020:	edc4 7a01 	vstr	s15, [r4, #4]
 801a024:	e7dd      	b.n	8019fe2 <__ieee754_rem_pio2f+0x5a>
 801a026:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801a1dc <__ieee754_rem_pio2f+0x254>
 801a02a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801a1e0 <__ieee754_rem_pio2f+0x258>
 801a02e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a032:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a036:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a03a:	edc0 6a00 	vstr	s13, [r0]
 801a03e:	e7eb      	b.n	801a018 <__ieee754_rem_pio2f+0x90>
 801a040:	4b68      	ldr	r3, [pc, #416]	; (801a1e4 <__ieee754_rem_pio2f+0x25c>)
 801a042:	429d      	cmp	r5, r3
 801a044:	dc72      	bgt.n	801a12c <__ieee754_rem_pio2f+0x1a4>
 801a046:	f000 fc1f 	bl	801a888 <fabsf>
 801a04a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a1e8 <__ieee754_rem_pio2f+0x260>
 801a04e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a052:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a05a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a05e:	ee17 0a90 	vmov	r0, s15
 801a062:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a1d0 <__ieee754_rem_pio2f+0x248>
 801a066:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a06a:	281f      	cmp	r0, #31
 801a06c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801a1d8 <__ieee754_rem_pio2f+0x250>
 801a070:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a074:	eeb1 6a47 	vneg.f32	s12, s14
 801a078:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a07c:	ee16 2a90 	vmov	r2, s13
 801a080:	dc1c      	bgt.n	801a0bc <__ieee754_rem_pio2f+0x134>
 801a082:	495a      	ldr	r1, [pc, #360]	; (801a1ec <__ieee754_rem_pio2f+0x264>)
 801a084:	1e47      	subs	r7, r0, #1
 801a086:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a08a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a08e:	428b      	cmp	r3, r1
 801a090:	d014      	beq.n	801a0bc <__ieee754_rem_pio2f+0x134>
 801a092:	6022      	str	r2, [r4, #0]
 801a094:	ed94 7a00 	vldr	s14, [r4]
 801a098:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a09c:	2e00      	cmp	r6, #0
 801a09e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a0a2:	ed84 0a01 	vstr	s0, [r4, #4]
 801a0a6:	da9c      	bge.n	8019fe2 <__ieee754_rem_pio2f+0x5a>
 801a0a8:	eeb1 7a47 	vneg.f32	s14, s14
 801a0ac:	eeb1 0a40 	vneg.f32	s0, s0
 801a0b0:	ed84 7a00 	vstr	s14, [r4]
 801a0b4:	ed84 0a01 	vstr	s0, [r4, #4]
 801a0b8:	4240      	negs	r0, r0
 801a0ba:	e792      	b.n	8019fe2 <__ieee754_rem_pio2f+0x5a>
 801a0bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a0c0:	15eb      	asrs	r3, r5, #23
 801a0c2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801a0c6:	2d08      	cmp	r5, #8
 801a0c8:	dde3      	ble.n	801a092 <__ieee754_rem_pio2f+0x10a>
 801a0ca:	eddf 7a44 	vldr	s15, [pc, #272]	; 801a1dc <__ieee754_rem_pio2f+0x254>
 801a0ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 801a1e0 <__ieee754_rem_pio2f+0x258>
 801a0d2:	eef0 6a40 	vmov.f32	s13, s0
 801a0d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a0da:	ee30 0a66 	vsub.f32	s0, s0, s13
 801a0de:	eea6 0a27 	vfma.f32	s0, s12, s15
 801a0e2:	eef0 7a40 	vmov.f32	s15, s0
 801a0e6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a0ea:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a0ee:	ee15 2a90 	vmov	r2, s11
 801a0f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a0f6:	1a5b      	subs	r3, r3, r1
 801a0f8:	2b19      	cmp	r3, #25
 801a0fa:	dc04      	bgt.n	801a106 <__ieee754_rem_pio2f+0x17e>
 801a0fc:	edc4 5a00 	vstr	s11, [r4]
 801a100:	eeb0 0a66 	vmov.f32	s0, s13
 801a104:	e7c6      	b.n	801a094 <__ieee754_rem_pio2f+0x10c>
 801a106:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a1f0 <__ieee754_rem_pio2f+0x268>
 801a10a:	eeb0 0a66 	vmov.f32	s0, s13
 801a10e:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a112:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a116:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a1f4 <__ieee754_rem_pio2f+0x26c>
 801a11a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a11e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a122:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a126:	ed84 7a00 	vstr	s14, [r4]
 801a12a:	e7b3      	b.n	801a094 <__ieee754_rem_pio2f+0x10c>
 801a12c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a130:	db06      	blt.n	801a140 <__ieee754_rem_pio2f+0x1b8>
 801a132:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a136:	edc0 7a01 	vstr	s15, [r0, #4]
 801a13a:	edc0 7a00 	vstr	s15, [r0]
 801a13e:	e733      	b.n	8019fa8 <__ieee754_rem_pio2f+0x20>
 801a140:	15ea      	asrs	r2, r5, #23
 801a142:	3a86      	subs	r2, #134	; 0x86
 801a144:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a148:	ee07 3a90 	vmov	s15, r3
 801a14c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a150:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a1f8 <__ieee754_rem_pio2f+0x270>
 801a154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a15c:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a164:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a168:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a170:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a178:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a180:	edcd 7a05 	vstr	s15, [sp, #20]
 801a184:	d11e      	bne.n	801a1c4 <__ieee754_rem_pio2f+0x23c>
 801a186:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a18e:	bf14      	ite	ne
 801a190:	2302      	movne	r3, #2
 801a192:	2301      	moveq	r3, #1
 801a194:	4919      	ldr	r1, [pc, #100]	; (801a1fc <__ieee754_rem_pio2f+0x274>)
 801a196:	9101      	str	r1, [sp, #4]
 801a198:	2102      	movs	r1, #2
 801a19a:	9100      	str	r1, [sp, #0]
 801a19c:	a803      	add	r0, sp, #12
 801a19e:	4621      	mov	r1, r4
 801a1a0:	f000 f892 	bl	801a2c8 <__kernel_rem_pio2f>
 801a1a4:	2e00      	cmp	r6, #0
 801a1a6:	f6bf af1c 	bge.w	8019fe2 <__ieee754_rem_pio2f+0x5a>
 801a1aa:	edd4 7a00 	vldr	s15, [r4]
 801a1ae:	eef1 7a67 	vneg.f32	s15, s15
 801a1b2:	edc4 7a00 	vstr	s15, [r4]
 801a1b6:	edd4 7a01 	vldr	s15, [r4, #4]
 801a1ba:	eef1 7a67 	vneg.f32	s15, s15
 801a1be:	edc4 7a01 	vstr	s15, [r4, #4]
 801a1c2:	e779      	b.n	801a0b8 <__ieee754_rem_pio2f+0x130>
 801a1c4:	2303      	movs	r3, #3
 801a1c6:	e7e5      	b.n	801a194 <__ieee754_rem_pio2f+0x20c>
 801a1c8:	3f490fd8 	.word	0x3f490fd8
 801a1cc:	4016cbe3 	.word	0x4016cbe3
 801a1d0:	3fc90f80 	.word	0x3fc90f80
 801a1d4:	3fc90fd0 	.word	0x3fc90fd0
 801a1d8:	37354443 	.word	0x37354443
 801a1dc:	37354400 	.word	0x37354400
 801a1e0:	2e85a308 	.word	0x2e85a308
 801a1e4:	43490f80 	.word	0x43490f80
 801a1e8:	3f22f984 	.word	0x3f22f984
 801a1ec:	0801c3c0 	.word	0x0801c3c0
 801a1f0:	2e85a300 	.word	0x2e85a300
 801a1f4:	248d3132 	.word	0x248d3132
 801a1f8:	43800000 	.word	0x43800000
 801a1fc:	0801c440 	.word	0x0801c440

0801a200 <__ieee754_sqrtf>:
 801a200:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a204:	4770      	bx	lr
	...

0801a208 <__kernel_cosf>:
 801a208:	ee10 3a10 	vmov	r3, s0
 801a20c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a210:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a214:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a218:	da05      	bge.n	801a226 <__kernel_cosf+0x1e>
 801a21a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a21e:	ee17 2a90 	vmov	r2, s15
 801a222:	2a00      	cmp	r2, #0
 801a224:	d03d      	beq.n	801a2a2 <__kernel_cosf+0x9a>
 801a226:	ee60 5a00 	vmul.f32	s11, s0, s0
 801a22a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a2a8 <__kernel_cosf+0xa0>
 801a22e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801a2ac <__kernel_cosf+0xa4>
 801a232:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801a2b0 <__kernel_cosf+0xa8>
 801a236:	4a1f      	ldr	r2, [pc, #124]	; (801a2b4 <__kernel_cosf+0xac>)
 801a238:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a23c:	4293      	cmp	r3, r2
 801a23e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a2b8 <__kernel_cosf+0xb0>
 801a242:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a246:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801a2bc <__kernel_cosf+0xb4>
 801a24a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a24e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801a2c0 <__kernel_cosf+0xb8>
 801a252:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a256:	eeb0 7a66 	vmov.f32	s14, s13
 801a25a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a25e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a262:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801a266:	ee67 6a25 	vmul.f32	s13, s14, s11
 801a26a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801a26e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a272:	dc04      	bgt.n	801a27e <__kernel_cosf+0x76>
 801a274:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a278:	ee36 0a47 	vsub.f32	s0, s12, s14
 801a27c:	4770      	bx	lr
 801a27e:	4a11      	ldr	r2, [pc, #68]	; (801a2c4 <__kernel_cosf+0xbc>)
 801a280:	4293      	cmp	r3, r2
 801a282:	bfda      	itte	le
 801a284:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a288:	ee06 3a90 	vmovle	s13, r3
 801a28c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801a290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a294:	ee36 0a66 	vsub.f32	s0, s12, s13
 801a298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a29c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a2a0:	4770      	bx	lr
 801a2a2:	eeb0 0a46 	vmov.f32	s0, s12
 801a2a6:	4770      	bx	lr
 801a2a8:	ad47d74e 	.word	0xad47d74e
 801a2ac:	310f74f6 	.word	0x310f74f6
 801a2b0:	3d2aaaab 	.word	0x3d2aaaab
 801a2b4:	3e999999 	.word	0x3e999999
 801a2b8:	b493f27c 	.word	0xb493f27c
 801a2bc:	37d00d01 	.word	0x37d00d01
 801a2c0:	bab60b61 	.word	0xbab60b61
 801a2c4:	3f480000 	.word	0x3f480000

0801a2c8 <__kernel_rem_pio2f>:
 801a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2cc:	ed2d 8b04 	vpush	{d8-d9}
 801a2d0:	b0d9      	sub	sp, #356	; 0x164
 801a2d2:	4688      	mov	r8, r1
 801a2d4:	9002      	str	r0, [sp, #8]
 801a2d6:	49bb      	ldr	r1, [pc, #748]	; (801a5c4 <__kernel_rem_pio2f+0x2fc>)
 801a2d8:	9866      	ldr	r0, [sp, #408]	; 0x198
 801a2da:	9301      	str	r3, [sp, #4]
 801a2dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801a2e0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801a2e4:	1e59      	subs	r1, r3, #1
 801a2e6:	1d13      	adds	r3, r2, #4
 801a2e8:	db27      	blt.n	801a33a <__kernel_rem_pio2f+0x72>
 801a2ea:	f1b2 0b03 	subs.w	fp, r2, #3
 801a2ee:	bf48      	it	mi
 801a2f0:	f102 0b04 	addmi.w	fp, r2, #4
 801a2f4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801a2f8:	1c45      	adds	r5, r0, #1
 801a2fa:	00ec      	lsls	r4, r5, #3
 801a2fc:	1a47      	subs	r7, r0, r1
 801a2fe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a302:	9403      	str	r4, [sp, #12]
 801a304:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a308:	eb0a 0c01 	add.w	ip, sl, r1
 801a30c:	ae1c      	add	r6, sp, #112	; 0x70
 801a30e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801a312:	2400      	movs	r4, #0
 801a314:	4564      	cmp	r4, ip
 801a316:	dd12      	ble.n	801a33e <__kernel_rem_pio2f+0x76>
 801a318:	9b01      	ldr	r3, [sp, #4]
 801a31a:	ac1c      	add	r4, sp, #112	; 0x70
 801a31c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801a320:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801a324:	f04f 0c00 	mov.w	ip, #0
 801a328:	45d4      	cmp	ip, sl
 801a32a:	dc27      	bgt.n	801a37c <__kernel_rem_pio2f+0xb4>
 801a32c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801a330:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a334:	4627      	mov	r7, r4
 801a336:	2600      	movs	r6, #0
 801a338:	e016      	b.n	801a368 <__kernel_rem_pio2f+0xa0>
 801a33a:	2000      	movs	r0, #0
 801a33c:	e7dc      	b.n	801a2f8 <__kernel_rem_pio2f+0x30>
 801a33e:	42e7      	cmn	r7, r4
 801a340:	bf5d      	ittte	pl
 801a342:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801a346:	ee07 3a90 	vmovpl	s15, r3
 801a34a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a34e:	eef0 7a47 	vmovmi.f32	s15, s14
 801a352:	ece6 7a01 	vstmia	r6!, {s15}
 801a356:	3401      	adds	r4, #1
 801a358:	e7dc      	b.n	801a314 <__kernel_rem_pio2f+0x4c>
 801a35a:	ecf9 6a01 	vldmia	r9!, {s13}
 801a35e:	ed97 7a00 	vldr	s14, [r7]
 801a362:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a366:	3601      	adds	r6, #1
 801a368:	428e      	cmp	r6, r1
 801a36a:	f1a7 0704 	sub.w	r7, r7, #4
 801a36e:	ddf4      	ble.n	801a35a <__kernel_rem_pio2f+0x92>
 801a370:	eceb 7a01 	vstmia	fp!, {s15}
 801a374:	f10c 0c01 	add.w	ip, ip, #1
 801a378:	3404      	adds	r4, #4
 801a37a:	e7d5      	b.n	801a328 <__kernel_rem_pio2f+0x60>
 801a37c:	ab08      	add	r3, sp, #32
 801a37e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801a382:	eddf 8a93 	vldr	s17, [pc, #588]	; 801a5d0 <__kernel_rem_pio2f+0x308>
 801a386:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801a5cc <__kernel_rem_pio2f+0x304>
 801a38a:	9304      	str	r3, [sp, #16]
 801a38c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801a390:	4656      	mov	r6, sl
 801a392:	00b3      	lsls	r3, r6, #2
 801a394:	9305      	str	r3, [sp, #20]
 801a396:	ab58      	add	r3, sp, #352	; 0x160
 801a398:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a39c:	ac08      	add	r4, sp, #32
 801a39e:	ab44      	add	r3, sp, #272	; 0x110
 801a3a0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801a3a4:	46a4      	mov	ip, r4
 801a3a6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a3aa:	4637      	mov	r7, r6
 801a3ac:	2f00      	cmp	r7, #0
 801a3ae:	f1a0 0004 	sub.w	r0, r0, #4
 801a3b2:	dc4f      	bgt.n	801a454 <__kernel_rem_pio2f+0x18c>
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801a3ba:	f000 fac1 	bl	801a940 <scalbnf>
 801a3be:	eeb0 8a40 	vmov.f32	s16, s0
 801a3c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a3c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a3ca:	f000 fa71 	bl	801a8b0 <floorf>
 801a3ce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a3d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a3d6:	2d00      	cmp	r5, #0
 801a3d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801a3dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a3e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a3e4:	ee17 9a90 	vmov	r9, s15
 801a3e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a3ec:	dd44      	ble.n	801a478 <__kernel_rem_pio2f+0x1b0>
 801a3ee:	f106 3cff 	add.w	ip, r6, #4294967295
 801a3f2:	ab08      	add	r3, sp, #32
 801a3f4:	f1c5 0e08 	rsb	lr, r5, #8
 801a3f8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801a3fc:	fa47 f00e 	asr.w	r0, r7, lr
 801a400:	4481      	add	r9, r0
 801a402:	fa00 f00e 	lsl.w	r0, r0, lr
 801a406:	1a3f      	subs	r7, r7, r0
 801a408:	f1c5 0007 	rsb	r0, r5, #7
 801a40c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801a410:	4107      	asrs	r7, r0
 801a412:	2f00      	cmp	r7, #0
 801a414:	dd3f      	ble.n	801a496 <__kernel_rem_pio2f+0x1ce>
 801a416:	f04f 0e00 	mov.w	lr, #0
 801a41a:	f109 0901 	add.w	r9, r9, #1
 801a41e:	4673      	mov	r3, lr
 801a420:	4576      	cmp	r6, lr
 801a422:	dc6b      	bgt.n	801a4fc <__kernel_rem_pio2f+0x234>
 801a424:	2d00      	cmp	r5, #0
 801a426:	dd04      	ble.n	801a432 <__kernel_rem_pio2f+0x16a>
 801a428:	2d01      	cmp	r5, #1
 801a42a:	d078      	beq.n	801a51e <__kernel_rem_pio2f+0x256>
 801a42c:	2d02      	cmp	r5, #2
 801a42e:	f000 8081 	beq.w	801a534 <__kernel_rem_pio2f+0x26c>
 801a432:	2f02      	cmp	r7, #2
 801a434:	d12f      	bne.n	801a496 <__kernel_rem_pio2f+0x1ce>
 801a436:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a43a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a43e:	b353      	cbz	r3, 801a496 <__kernel_rem_pio2f+0x1ce>
 801a440:	4628      	mov	r0, r5
 801a442:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801a446:	f000 fa7b 	bl	801a940 <scalbnf>
 801a44a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801a44e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a452:	e020      	b.n	801a496 <__kernel_rem_pio2f+0x1ce>
 801a454:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a458:	3f01      	subs	r7, #1
 801a45a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a45e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a462:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a466:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a46a:	ecac 0a01 	vstmia	ip!, {s0}
 801a46e:	ed90 0a00 	vldr	s0, [r0]
 801a472:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a476:	e799      	b.n	801a3ac <__kernel_rem_pio2f+0xe4>
 801a478:	d105      	bne.n	801a486 <__kernel_rem_pio2f+0x1be>
 801a47a:	1e70      	subs	r0, r6, #1
 801a47c:	ab08      	add	r3, sp, #32
 801a47e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801a482:	11ff      	asrs	r7, r7, #7
 801a484:	e7c5      	b.n	801a412 <__kernel_rem_pio2f+0x14a>
 801a486:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a48a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a492:	da31      	bge.n	801a4f8 <__kernel_rem_pio2f+0x230>
 801a494:	2700      	movs	r7, #0
 801a496:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a49e:	f040 809b 	bne.w	801a5d8 <__kernel_rem_pio2f+0x310>
 801a4a2:	1e74      	subs	r4, r6, #1
 801a4a4:	46a4      	mov	ip, r4
 801a4a6:	2000      	movs	r0, #0
 801a4a8:	45d4      	cmp	ip, sl
 801a4aa:	da4a      	bge.n	801a542 <__kernel_rem_pio2f+0x27a>
 801a4ac:	2800      	cmp	r0, #0
 801a4ae:	d07a      	beq.n	801a5a6 <__kernel_rem_pio2f+0x2de>
 801a4b0:	ab08      	add	r3, sp, #32
 801a4b2:	3d08      	subs	r5, #8
 801a4b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	f000 8081 	beq.w	801a5c0 <__kernel_rem_pio2f+0x2f8>
 801a4be:	4628      	mov	r0, r5
 801a4c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a4c4:	00a5      	lsls	r5, r4, #2
 801a4c6:	f000 fa3b 	bl	801a940 <scalbnf>
 801a4ca:	aa44      	add	r2, sp, #272	; 0x110
 801a4cc:	1d2b      	adds	r3, r5, #4
 801a4ce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801a5d0 <__kernel_rem_pio2f+0x308>
 801a4d2:	18d1      	adds	r1, r2, r3
 801a4d4:	4622      	mov	r2, r4
 801a4d6:	2a00      	cmp	r2, #0
 801a4d8:	f280 80ae 	bge.w	801a638 <__kernel_rem_pio2f+0x370>
 801a4dc:	4622      	mov	r2, r4
 801a4de:	2a00      	cmp	r2, #0
 801a4e0:	f2c0 80cc 	blt.w	801a67c <__kernel_rem_pio2f+0x3b4>
 801a4e4:	a944      	add	r1, sp, #272	; 0x110
 801a4e6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801a4ea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801a5c8 <__kernel_rem_pio2f+0x300>
 801a4ee:	eddf 7a39 	vldr	s15, [pc, #228]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a4f2:	2000      	movs	r0, #0
 801a4f4:	1aa1      	subs	r1, r4, r2
 801a4f6:	e0b6      	b.n	801a666 <__kernel_rem_pio2f+0x39e>
 801a4f8:	2702      	movs	r7, #2
 801a4fa:	e78c      	b.n	801a416 <__kernel_rem_pio2f+0x14e>
 801a4fc:	6820      	ldr	r0, [r4, #0]
 801a4fe:	b94b      	cbnz	r3, 801a514 <__kernel_rem_pio2f+0x24c>
 801a500:	b118      	cbz	r0, 801a50a <__kernel_rem_pio2f+0x242>
 801a502:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a506:	6020      	str	r0, [r4, #0]
 801a508:	2001      	movs	r0, #1
 801a50a:	f10e 0e01 	add.w	lr, lr, #1
 801a50e:	3404      	adds	r4, #4
 801a510:	4603      	mov	r3, r0
 801a512:	e785      	b.n	801a420 <__kernel_rem_pio2f+0x158>
 801a514:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801a518:	6020      	str	r0, [r4, #0]
 801a51a:	4618      	mov	r0, r3
 801a51c:	e7f5      	b.n	801a50a <__kernel_rem_pio2f+0x242>
 801a51e:	1e74      	subs	r4, r6, #1
 801a520:	a808      	add	r0, sp, #32
 801a522:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801a526:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801a52a:	f10d 0c20 	add.w	ip, sp, #32
 801a52e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801a532:	e77e      	b.n	801a432 <__kernel_rem_pio2f+0x16a>
 801a534:	1e74      	subs	r4, r6, #1
 801a536:	a808      	add	r0, sp, #32
 801a538:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801a53c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801a540:	e7f3      	b.n	801a52a <__kernel_rem_pio2f+0x262>
 801a542:	ab08      	add	r3, sp, #32
 801a544:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a548:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a54c:	4318      	orrs	r0, r3
 801a54e:	e7ab      	b.n	801a4a8 <__kernel_rem_pio2f+0x1e0>
 801a550:	f10c 0c01 	add.w	ip, ip, #1
 801a554:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801a558:	2c00      	cmp	r4, #0
 801a55a:	d0f9      	beq.n	801a550 <__kernel_rem_pio2f+0x288>
 801a55c:	9b05      	ldr	r3, [sp, #20]
 801a55e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a562:	eb0d 0003 	add.w	r0, sp, r3
 801a566:	9b01      	ldr	r3, [sp, #4]
 801a568:	18f4      	adds	r4, r6, r3
 801a56a:	ab1c      	add	r3, sp, #112	; 0x70
 801a56c:	1c77      	adds	r7, r6, #1
 801a56e:	384c      	subs	r0, #76	; 0x4c
 801a570:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a574:	4466      	add	r6, ip
 801a576:	42be      	cmp	r6, r7
 801a578:	f6ff af0b 	blt.w	801a392 <__kernel_rem_pio2f+0xca>
 801a57c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801a580:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a584:	ee07 3a90 	vmov	s15, r3
 801a588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a58c:	f04f 0c00 	mov.w	ip, #0
 801a590:	ece4 7a01 	vstmia	r4!, {s15}
 801a594:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a598:	46a1      	mov	r9, r4
 801a59a:	458c      	cmp	ip, r1
 801a59c:	dd07      	ble.n	801a5ae <__kernel_rem_pio2f+0x2e6>
 801a59e:	ece0 7a01 	vstmia	r0!, {s15}
 801a5a2:	3701      	adds	r7, #1
 801a5a4:	e7e7      	b.n	801a576 <__kernel_rem_pio2f+0x2ae>
 801a5a6:	9804      	ldr	r0, [sp, #16]
 801a5a8:	f04f 0c01 	mov.w	ip, #1
 801a5ac:	e7d2      	b.n	801a554 <__kernel_rem_pio2f+0x28c>
 801a5ae:	ecfe 6a01 	vldmia	lr!, {s13}
 801a5b2:	ed39 7a01 	vldmdb	r9!, {s14}
 801a5b6:	f10c 0c01 	add.w	ip, ip, #1
 801a5ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a5be:	e7ec      	b.n	801a59a <__kernel_rem_pio2f+0x2d2>
 801a5c0:	3c01      	subs	r4, #1
 801a5c2:	e775      	b.n	801a4b0 <__kernel_rem_pio2f+0x1e8>
 801a5c4:	0801c784 	.word	0x0801c784
 801a5c8:	0801c758 	.word	0x0801c758
 801a5cc:	43800000 	.word	0x43800000
 801a5d0:	3b800000 	.word	0x3b800000
 801a5d4:	00000000 	.word	0x00000000
 801a5d8:	9b03      	ldr	r3, [sp, #12]
 801a5da:	eeb0 0a48 	vmov.f32	s0, s16
 801a5de:	1a98      	subs	r0, r3, r2
 801a5e0:	f000 f9ae 	bl	801a940 <scalbnf>
 801a5e4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a5cc <__kernel_rem_pio2f+0x304>
 801a5e8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5f0:	db19      	blt.n	801a626 <__kernel_rem_pio2f+0x35e>
 801a5f2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a5d0 <__kernel_rem_pio2f+0x308>
 801a5f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a5fa:	aa08      	add	r2, sp, #32
 801a5fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a600:	1c74      	adds	r4, r6, #1
 801a602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a606:	3508      	adds	r5, #8
 801a608:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a60c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a610:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a614:	ee10 3a10 	vmov	r3, s0
 801a618:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801a61c:	ee17 3a90 	vmov	r3, s15
 801a620:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a624:	e74b      	b.n	801a4be <__kernel_rem_pio2f+0x1f6>
 801a626:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a62a:	aa08      	add	r2, sp, #32
 801a62c:	ee10 3a10 	vmov	r3, s0
 801a630:	4634      	mov	r4, r6
 801a632:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801a636:	e742      	b.n	801a4be <__kernel_rem_pio2f+0x1f6>
 801a638:	a808      	add	r0, sp, #32
 801a63a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a63e:	9001      	str	r0, [sp, #4]
 801a640:	ee07 0a90 	vmov	s15, r0
 801a644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a648:	3a01      	subs	r2, #1
 801a64a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a64e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a652:	ed61 7a01 	vstmdb	r1!, {s15}
 801a656:	e73e      	b.n	801a4d6 <__kernel_rem_pio2f+0x20e>
 801a658:	ecfc 6a01 	vldmia	ip!, {s13}
 801a65c:	ecb6 7a01 	vldmia	r6!, {s14}
 801a660:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a664:	3001      	adds	r0, #1
 801a666:	4550      	cmp	r0, sl
 801a668:	dc01      	bgt.n	801a66e <__kernel_rem_pio2f+0x3a6>
 801a66a:	4288      	cmp	r0, r1
 801a66c:	ddf4      	ble.n	801a658 <__kernel_rem_pio2f+0x390>
 801a66e:	a858      	add	r0, sp, #352	; 0x160
 801a670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a674:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801a678:	3a01      	subs	r2, #1
 801a67a:	e730      	b.n	801a4de <__kernel_rem_pio2f+0x216>
 801a67c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801a67e:	2a02      	cmp	r2, #2
 801a680:	dc09      	bgt.n	801a696 <__kernel_rem_pio2f+0x3ce>
 801a682:	2a00      	cmp	r2, #0
 801a684:	dc2a      	bgt.n	801a6dc <__kernel_rem_pio2f+0x414>
 801a686:	d043      	beq.n	801a710 <__kernel_rem_pio2f+0x448>
 801a688:	f009 0007 	and.w	r0, r9, #7
 801a68c:	b059      	add	sp, #356	; 0x164
 801a68e:	ecbd 8b04 	vpop	{d8-d9}
 801a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a696:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801a698:	2b03      	cmp	r3, #3
 801a69a:	d1f5      	bne.n	801a688 <__kernel_rem_pio2f+0x3c0>
 801a69c:	ab30      	add	r3, sp, #192	; 0xc0
 801a69e:	442b      	add	r3, r5
 801a6a0:	461a      	mov	r2, r3
 801a6a2:	4619      	mov	r1, r3
 801a6a4:	4620      	mov	r0, r4
 801a6a6:	2800      	cmp	r0, #0
 801a6a8:	f1a1 0104 	sub.w	r1, r1, #4
 801a6ac:	dc51      	bgt.n	801a752 <__kernel_rem_pio2f+0x48a>
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	2901      	cmp	r1, #1
 801a6b2:	f1a2 0204 	sub.w	r2, r2, #4
 801a6b6:	dc5c      	bgt.n	801a772 <__kernel_rem_pio2f+0x4aa>
 801a6b8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a6bc:	3304      	adds	r3, #4
 801a6be:	2c01      	cmp	r4, #1
 801a6c0:	dc67      	bgt.n	801a792 <__kernel_rem_pio2f+0x4ca>
 801a6c2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a6c6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801a6ca:	2f00      	cmp	r7, #0
 801a6cc:	d167      	bne.n	801a79e <__kernel_rem_pio2f+0x4d6>
 801a6ce:	edc8 6a00 	vstr	s13, [r8]
 801a6d2:	ed88 7a01 	vstr	s14, [r8, #4]
 801a6d6:	edc8 7a02 	vstr	s15, [r8, #8]
 801a6da:	e7d5      	b.n	801a688 <__kernel_rem_pio2f+0x3c0>
 801a6dc:	aa30      	add	r2, sp, #192	; 0xc0
 801a6de:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a6e2:	4413      	add	r3, r2
 801a6e4:	4622      	mov	r2, r4
 801a6e6:	2a00      	cmp	r2, #0
 801a6e8:	da24      	bge.n	801a734 <__kernel_rem_pio2f+0x46c>
 801a6ea:	b34f      	cbz	r7, 801a740 <__kernel_rem_pio2f+0x478>
 801a6ec:	eef1 7a47 	vneg.f32	s15, s14
 801a6f0:	edc8 7a00 	vstr	s15, [r8]
 801a6f4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801a6f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6fc:	aa31      	add	r2, sp, #196	; 0xc4
 801a6fe:	2301      	movs	r3, #1
 801a700:	429c      	cmp	r4, r3
 801a702:	da20      	bge.n	801a746 <__kernel_rem_pio2f+0x47e>
 801a704:	b10f      	cbz	r7, 801a70a <__kernel_rem_pio2f+0x442>
 801a706:	eef1 7a67 	vneg.f32	s15, s15
 801a70a:	edc8 7a01 	vstr	s15, [r8, #4]
 801a70e:	e7bb      	b.n	801a688 <__kernel_rem_pio2f+0x3c0>
 801a710:	aa30      	add	r2, sp, #192	; 0xc0
 801a712:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801a5d4 <__kernel_rem_pio2f+0x30c>
 801a716:	4413      	add	r3, r2
 801a718:	2c00      	cmp	r4, #0
 801a71a:	da05      	bge.n	801a728 <__kernel_rem_pio2f+0x460>
 801a71c:	b10f      	cbz	r7, 801a722 <__kernel_rem_pio2f+0x45a>
 801a71e:	eef1 7a67 	vneg.f32	s15, s15
 801a722:	edc8 7a00 	vstr	s15, [r8]
 801a726:	e7af      	b.n	801a688 <__kernel_rem_pio2f+0x3c0>
 801a728:	ed33 7a01 	vldmdb	r3!, {s14}
 801a72c:	3c01      	subs	r4, #1
 801a72e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a732:	e7f1      	b.n	801a718 <__kernel_rem_pio2f+0x450>
 801a734:	ed73 7a01 	vldmdb	r3!, {s15}
 801a738:	3a01      	subs	r2, #1
 801a73a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a73e:	e7d2      	b.n	801a6e6 <__kernel_rem_pio2f+0x41e>
 801a740:	eef0 7a47 	vmov.f32	s15, s14
 801a744:	e7d4      	b.n	801a6f0 <__kernel_rem_pio2f+0x428>
 801a746:	ecb2 7a01 	vldmia	r2!, {s14}
 801a74a:	3301      	adds	r3, #1
 801a74c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a750:	e7d6      	b.n	801a700 <__kernel_rem_pio2f+0x438>
 801a752:	edd1 7a00 	vldr	s15, [r1]
 801a756:	edd1 6a01 	vldr	s13, [r1, #4]
 801a75a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a75e:	3801      	subs	r0, #1
 801a760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a764:	ed81 7a00 	vstr	s14, [r1]
 801a768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a76c:	edc1 7a01 	vstr	s15, [r1, #4]
 801a770:	e799      	b.n	801a6a6 <__kernel_rem_pio2f+0x3de>
 801a772:	edd2 7a00 	vldr	s15, [r2]
 801a776:	edd2 6a01 	vldr	s13, [r2, #4]
 801a77a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a77e:	3901      	subs	r1, #1
 801a780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a784:	ed82 7a00 	vstr	s14, [r2]
 801a788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a78c:	edc2 7a01 	vstr	s15, [r2, #4]
 801a790:	e78e      	b.n	801a6b0 <__kernel_rem_pio2f+0x3e8>
 801a792:	ed33 7a01 	vldmdb	r3!, {s14}
 801a796:	3c01      	subs	r4, #1
 801a798:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a79c:	e78f      	b.n	801a6be <__kernel_rem_pio2f+0x3f6>
 801a79e:	eef1 6a66 	vneg.f32	s13, s13
 801a7a2:	eeb1 7a47 	vneg.f32	s14, s14
 801a7a6:	edc8 6a00 	vstr	s13, [r8]
 801a7aa:	ed88 7a01 	vstr	s14, [r8, #4]
 801a7ae:	eef1 7a67 	vneg.f32	s15, s15
 801a7b2:	e790      	b.n	801a6d6 <__kernel_rem_pio2f+0x40e>

0801a7b4 <__kernel_sinf>:
 801a7b4:	ee10 3a10 	vmov	r3, s0
 801a7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a7bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a7c0:	da04      	bge.n	801a7cc <__kernel_sinf+0x18>
 801a7c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a7c6:	ee17 3a90 	vmov	r3, s15
 801a7ca:	b35b      	cbz	r3, 801a824 <__kernel_sinf+0x70>
 801a7cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a7d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a828 <__kernel_sinf+0x74>
 801a7d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a82c <__kernel_sinf+0x78>
 801a7d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a7dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a830 <__kernel_sinf+0x7c>
 801a7e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a7e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a834 <__kernel_sinf+0x80>
 801a7e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a7ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a838 <__kernel_sinf+0x84>
 801a7f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a7f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a7f8:	b930      	cbnz	r0, 801a808 <__kernel_sinf+0x54>
 801a7fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a83c <__kernel_sinf+0x88>
 801a7fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a802:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a806:	4770      	bx	lr
 801a808:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a80c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a810:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a814:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a818:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a840 <__kernel_sinf+0x8c>
 801a81c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a820:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a824:	4770      	bx	lr
 801a826:	bf00      	nop
 801a828:	2f2ec9d3 	.word	0x2f2ec9d3
 801a82c:	b2d72f34 	.word	0xb2d72f34
 801a830:	3638ef1b 	.word	0x3638ef1b
 801a834:	b9500d01 	.word	0xb9500d01
 801a838:	3c088889 	.word	0x3c088889
 801a83c:	be2aaaab 	.word	0xbe2aaaab
 801a840:	3e2aaaab 	.word	0x3e2aaaab

0801a844 <with_errnof>:
 801a844:	b513      	push	{r0, r1, r4, lr}
 801a846:	4604      	mov	r4, r0
 801a848:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a84c:	f000 f8f2 	bl	801aa34 <__errno>
 801a850:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a854:	6004      	str	r4, [r0, #0]
 801a856:	b002      	add	sp, #8
 801a858:	bd10      	pop	{r4, pc}

0801a85a <xflowf>:
 801a85a:	b130      	cbz	r0, 801a86a <xflowf+0x10>
 801a85c:	eef1 7a40 	vneg.f32	s15, s0
 801a860:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a864:	2022      	movs	r0, #34	; 0x22
 801a866:	f7ff bfed 	b.w	801a844 <with_errnof>
 801a86a:	eef0 7a40 	vmov.f32	s15, s0
 801a86e:	e7f7      	b.n	801a860 <xflowf+0x6>

0801a870 <__math_uflowf>:
 801a870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a878 <__math_uflowf+0x8>
 801a874:	f7ff bff1 	b.w	801a85a <xflowf>
 801a878:	10000000 	.word	0x10000000

0801a87c <__math_oflowf>:
 801a87c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a884 <__math_oflowf+0x8>
 801a880:	f7ff bfeb 	b.w	801a85a <xflowf>
 801a884:	70000000 	.word	0x70000000

0801a888 <fabsf>:
 801a888:	ee10 3a10 	vmov	r3, s0
 801a88c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a890:	ee00 3a10 	vmov	s0, r3
 801a894:	4770      	bx	lr

0801a896 <finitef>:
 801a896:	b082      	sub	sp, #8
 801a898:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a89c:	9801      	ldr	r0, [sp, #4]
 801a89e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a8a2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a8a6:	bfac      	ite	ge
 801a8a8:	2000      	movge	r0, #0
 801a8aa:	2001      	movlt	r0, #1
 801a8ac:	b002      	add	sp, #8
 801a8ae:	4770      	bx	lr

0801a8b0 <floorf>:
 801a8b0:	ee10 3a10 	vmov	r3, s0
 801a8b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a8b8:	3a7f      	subs	r2, #127	; 0x7f
 801a8ba:	2a16      	cmp	r2, #22
 801a8bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a8c0:	dc2a      	bgt.n	801a918 <floorf+0x68>
 801a8c2:	2a00      	cmp	r2, #0
 801a8c4:	da11      	bge.n	801a8ea <floorf+0x3a>
 801a8c6:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a928 <floorf+0x78>
 801a8ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a8ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d6:	dd05      	ble.n	801a8e4 <floorf+0x34>
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	da23      	bge.n	801a924 <floorf+0x74>
 801a8dc:	4a13      	ldr	r2, [pc, #76]	; (801a92c <floorf+0x7c>)
 801a8de:	2900      	cmp	r1, #0
 801a8e0:	bf18      	it	ne
 801a8e2:	4613      	movne	r3, r2
 801a8e4:	ee00 3a10 	vmov	s0, r3
 801a8e8:	4770      	bx	lr
 801a8ea:	4911      	ldr	r1, [pc, #68]	; (801a930 <floorf+0x80>)
 801a8ec:	4111      	asrs	r1, r2
 801a8ee:	420b      	tst	r3, r1
 801a8f0:	d0fa      	beq.n	801a8e8 <floorf+0x38>
 801a8f2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a928 <floorf+0x78>
 801a8f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a8fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a902:	ddef      	ble.n	801a8e4 <floorf+0x34>
 801a904:	2b00      	cmp	r3, #0
 801a906:	bfbe      	ittt	lt
 801a908:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a90c:	fa40 f202 	asrlt.w	r2, r0, r2
 801a910:	189b      	addlt	r3, r3, r2
 801a912:	ea23 0301 	bic.w	r3, r3, r1
 801a916:	e7e5      	b.n	801a8e4 <floorf+0x34>
 801a918:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a91c:	d3e4      	bcc.n	801a8e8 <floorf+0x38>
 801a91e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a922:	4770      	bx	lr
 801a924:	2300      	movs	r3, #0
 801a926:	e7dd      	b.n	801a8e4 <floorf+0x34>
 801a928:	7149f2ca 	.word	0x7149f2ca
 801a92c:	bf800000 	.word	0xbf800000
 801a930:	007fffff 	.word	0x007fffff

0801a934 <nanf>:
 801a934:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a93c <nanf+0x8>
 801a938:	4770      	bx	lr
 801a93a:	bf00      	nop
 801a93c:	7fc00000 	.word	0x7fc00000

0801a940 <scalbnf>:
 801a940:	ee10 3a10 	vmov	r3, s0
 801a944:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a948:	d025      	beq.n	801a996 <scalbnf+0x56>
 801a94a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a94e:	d302      	bcc.n	801a956 <scalbnf+0x16>
 801a950:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a954:	4770      	bx	lr
 801a956:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a95a:	d122      	bne.n	801a9a2 <scalbnf+0x62>
 801a95c:	4b2a      	ldr	r3, [pc, #168]	; (801aa08 <scalbnf+0xc8>)
 801a95e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801aa0c <scalbnf+0xcc>
 801a962:	4298      	cmp	r0, r3
 801a964:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a968:	db16      	blt.n	801a998 <scalbnf+0x58>
 801a96a:	ee10 3a10 	vmov	r3, s0
 801a96e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a972:	3a19      	subs	r2, #25
 801a974:	4402      	add	r2, r0
 801a976:	2afe      	cmp	r2, #254	; 0xfe
 801a978:	dd15      	ble.n	801a9a6 <scalbnf+0x66>
 801a97a:	ee10 3a10 	vmov	r3, s0
 801a97e:	eddf 7a24 	vldr	s15, [pc, #144]	; 801aa10 <scalbnf+0xd0>
 801a982:	eddf 6a24 	vldr	s13, [pc, #144]	; 801aa14 <scalbnf+0xd4>
 801a986:	2b00      	cmp	r3, #0
 801a988:	eeb0 7a67 	vmov.f32	s14, s15
 801a98c:	bfb8      	it	lt
 801a98e:	eef0 7a66 	vmovlt.f32	s15, s13
 801a992:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a996:	4770      	bx	lr
 801a998:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801aa18 <scalbnf+0xd8>
 801a99c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a9a0:	4770      	bx	lr
 801a9a2:	0dd2      	lsrs	r2, r2, #23
 801a9a4:	e7e6      	b.n	801a974 <scalbnf+0x34>
 801a9a6:	2a00      	cmp	r2, #0
 801a9a8:	dd06      	ble.n	801a9b8 <scalbnf+0x78>
 801a9aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a9ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a9b2:	ee00 3a10 	vmov	s0, r3
 801a9b6:	4770      	bx	lr
 801a9b8:	f112 0f16 	cmn.w	r2, #22
 801a9bc:	da1a      	bge.n	801a9f4 <scalbnf+0xb4>
 801a9be:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a9c2:	4298      	cmp	r0, r3
 801a9c4:	ee10 3a10 	vmov	r3, s0
 801a9c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a9cc:	dd0a      	ble.n	801a9e4 <scalbnf+0xa4>
 801a9ce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801aa10 <scalbnf+0xd0>
 801a9d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801aa14 <scalbnf+0xd4>
 801a9d6:	eef0 7a40 	vmov.f32	s15, s0
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	bf18      	it	ne
 801a9de:	eeb0 0a47 	vmovne.f32	s0, s14
 801a9e2:	e7db      	b.n	801a99c <scalbnf+0x5c>
 801a9e4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801aa18 <scalbnf+0xd8>
 801a9e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801aa1c <scalbnf+0xdc>
 801a9ec:	eef0 7a40 	vmov.f32	s15, s0
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	e7f3      	b.n	801a9dc <scalbnf+0x9c>
 801a9f4:	3219      	adds	r2, #25
 801a9f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a9fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a9fe:	eddf 7a08 	vldr	s15, [pc, #32]	; 801aa20 <scalbnf+0xe0>
 801aa02:	ee07 3a10 	vmov	s14, r3
 801aa06:	e7c4      	b.n	801a992 <scalbnf+0x52>
 801aa08:	ffff3cb0 	.word	0xffff3cb0
 801aa0c:	4c000000 	.word	0x4c000000
 801aa10:	7149f2ca 	.word	0x7149f2ca
 801aa14:	f149f2ca 	.word	0xf149f2ca
 801aa18:	0da24260 	.word	0x0da24260
 801aa1c:	8da24260 	.word	0x8da24260
 801aa20:	33000000 	.word	0x33000000

0801aa24 <abort>:
 801aa24:	b508      	push	{r3, lr}
 801aa26:	2006      	movs	r0, #6
 801aa28:	f000 fb5e 	bl	801b0e8 <raise>
 801aa2c:	2001      	movs	r0, #1
 801aa2e:	f7f3 feac 	bl	800e78a <_exit>
	...

0801aa34 <__errno>:
 801aa34:	4b01      	ldr	r3, [pc, #4]	; (801aa3c <__errno+0x8>)
 801aa36:	6818      	ldr	r0, [r3, #0]
 801aa38:	4770      	bx	lr
 801aa3a:	bf00      	nop
 801aa3c:	20000044 	.word	0x20000044

0801aa40 <std>:
 801aa40:	2300      	movs	r3, #0
 801aa42:	b510      	push	{r4, lr}
 801aa44:	4604      	mov	r4, r0
 801aa46:	e9c0 3300 	strd	r3, r3, [r0]
 801aa4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aa4e:	6083      	str	r3, [r0, #8]
 801aa50:	8181      	strh	r1, [r0, #12]
 801aa52:	6643      	str	r3, [r0, #100]	; 0x64
 801aa54:	81c2      	strh	r2, [r0, #14]
 801aa56:	6183      	str	r3, [r0, #24]
 801aa58:	4619      	mov	r1, r3
 801aa5a:	2208      	movs	r2, #8
 801aa5c:	305c      	adds	r0, #92	; 0x5c
 801aa5e:	f000 f92b 	bl	801acb8 <memset>
 801aa62:	4b05      	ldr	r3, [pc, #20]	; (801aa78 <std+0x38>)
 801aa64:	6263      	str	r3, [r4, #36]	; 0x24
 801aa66:	4b05      	ldr	r3, [pc, #20]	; (801aa7c <std+0x3c>)
 801aa68:	62a3      	str	r3, [r4, #40]	; 0x28
 801aa6a:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <std+0x40>)
 801aa6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa6e:	4b05      	ldr	r3, [pc, #20]	; (801aa84 <std+0x44>)
 801aa70:	6224      	str	r4, [r4, #32]
 801aa72:	6323      	str	r3, [r4, #48]	; 0x30
 801aa74:	bd10      	pop	{r4, pc}
 801aa76:	bf00      	nop
 801aa78:	0801b121 	.word	0x0801b121
 801aa7c:	0801b143 	.word	0x0801b143
 801aa80:	0801b17b 	.word	0x0801b17b
 801aa84:	0801b19f 	.word	0x0801b19f

0801aa88 <_cleanup_r>:
 801aa88:	4901      	ldr	r1, [pc, #4]	; (801aa90 <_cleanup_r+0x8>)
 801aa8a:	f000 b8af 	b.w	801abec <_fwalk_reent>
 801aa8e:	bf00      	nop
 801aa90:	0801b479 	.word	0x0801b479

0801aa94 <__sfmoreglue>:
 801aa94:	b570      	push	{r4, r5, r6, lr}
 801aa96:	2268      	movs	r2, #104	; 0x68
 801aa98:	1e4d      	subs	r5, r1, #1
 801aa9a:	4355      	muls	r5, r2
 801aa9c:	460e      	mov	r6, r1
 801aa9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aaa2:	f000 f97d 	bl	801ada0 <_malloc_r>
 801aaa6:	4604      	mov	r4, r0
 801aaa8:	b140      	cbz	r0, 801aabc <__sfmoreglue+0x28>
 801aaaa:	2100      	movs	r1, #0
 801aaac:	e9c0 1600 	strd	r1, r6, [r0]
 801aab0:	300c      	adds	r0, #12
 801aab2:	60a0      	str	r0, [r4, #8]
 801aab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aab8:	f000 f8fe 	bl	801acb8 <memset>
 801aabc:	4620      	mov	r0, r4
 801aabe:	bd70      	pop	{r4, r5, r6, pc}

0801aac0 <__sfp_lock_acquire>:
 801aac0:	4801      	ldr	r0, [pc, #4]	; (801aac8 <__sfp_lock_acquire+0x8>)
 801aac2:	f000 b8d8 	b.w	801ac76 <__retarget_lock_acquire_recursive>
 801aac6:	bf00      	nop
 801aac8:	20009095 	.word	0x20009095

0801aacc <__sfp_lock_release>:
 801aacc:	4801      	ldr	r0, [pc, #4]	; (801aad4 <__sfp_lock_release+0x8>)
 801aace:	f000 b8d3 	b.w	801ac78 <__retarget_lock_release_recursive>
 801aad2:	bf00      	nop
 801aad4:	20009095 	.word	0x20009095

0801aad8 <__sinit_lock_acquire>:
 801aad8:	4801      	ldr	r0, [pc, #4]	; (801aae0 <__sinit_lock_acquire+0x8>)
 801aada:	f000 b8cc 	b.w	801ac76 <__retarget_lock_acquire_recursive>
 801aade:	bf00      	nop
 801aae0:	20009096 	.word	0x20009096

0801aae4 <__sinit_lock_release>:
 801aae4:	4801      	ldr	r0, [pc, #4]	; (801aaec <__sinit_lock_release+0x8>)
 801aae6:	f000 b8c7 	b.w	801ac78 <__retarget_lock_release_recursive>
 801aaea:	bf00      	nop
 801aaec:	20009096 	.word	0x20009096

0801aaf0 <__sinit>:
 801aaf0:	b510      	push	{r4, lr}
 801aaf2:	4604      	mov	r4, r0
 801aaf4:	f7ff fff0 	bl	801aad8 <__sinit_lock_acquire>
 801aaf8:	69a3      	ldr	r3, [r4, #24]
 801aafa:	b11b      	cbz	r3, 801ab04 <__sinit+0x14>
 801aafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab00:	f7ff bff0 	b.w	801aae4 <__sinit_lock_release>
 801ab04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ab08:	6523      	str	r3, [r4, #80]	; 0x50
 801ab0a:	4b13      	ldr	r3, [pc, #76]	; (801ab58 <__sinit+0x68>)
 801ab0c:	4a13      	ldr	r2, [pc, #76]	; (801ab5c <__sinit+0x6c>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	62a2      	str	r2, [r4, #40]	; 0x28
 801ab12:	42a3      	cmp	r3, r4
 801ab14:	bf04      	itt	eq
 801ab16:	2301      	moveq	r3, #1
 801ab18:	61a3      	streq	r3, [r4, #24]
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	f000 f820 	bl	801ab60 <__sfp>
 801ab20:	6060      	str	r0, [r4, #4]
 801ab22:	4620      	mov	r0, r4
 801ab24:	f000 f81c 	bl	801ab60 <__sfp>
 801ab28:	60a0      	str	r0, [r4, #8]
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	f000 f818 	bl	801ab60 <__sfp>
 801ab30:	2200      	movs	r2, #0
 801ab32:	60e0      	str	r0, [r4, #12]
 801ab34:	2104      	movs	r1, #4
 801ab36:	6860      	ldr	r0, [r4, #4]
 801ab38:	f7ff ff82 	bl	801aa40 <std>
 801ab3c:	68a0      	ldr	r0, [r4, #8]
 801ab3e:	2201      	movs	r2, #1
 801ab40:	2109      	movs	r1, #9
 801ab42:	f7ff ff7d 	bl	801aa40 <std>
 801ab46:	68e0      	ldr	r0, [r4, #12]
 801ab48:	2202      	movs	r2, #2
 801ab4a:	2112      	movs	r1, #18
 801ab4c:	f7ff ff78 	bl	801aa40 <std>
 801ab50:	2301      	movs	r3, #1
 801ab52:	61a3      	str	r3, [r4, #24]
 801ab54:	e7d2      	b.n	801aafc <__sinit+0xc>
 801ab56:	bf00      	nop
 801ab58:	0801c7f0 	.word	0x0801c7f0
 801ab5c:	0801aa89 	.word	0x0801aa89

0801ab60 <__sfp>:
 801ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab62:	4607      	mov	r7, r0
 801ab64:	f7ff ffac 	bl	801aac0 <__sfp_lock_acquire>
 801ab68:	4b1e      	ldr	r3, [pc, #120]	; (801abe4 <__sfp+0x84>)
 801ab6a:	681e      	ldr	r6, [r3, #0]
 801ab6c:	69b3      	ldr	r3, [r6, #24]
 801ab6e:	b913      	cbnz	r3, 801ab76 <__sfp+0x16>
 801ab70:	4630      	mov	r0, r6
 801ab72:	f7ff ffbd 	bl	801aaf0 <__sinit>
 801ab76:	3648      	adds	r6, #72	; 0x48
 801ab78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab7c:	3b01      	subs	r3, #1
 801ab7e:	d503      	bpl.n	801ab88 <__sfp+0x28>
 801ab80:	6833      	ldr	r3, [r6, #0]
 801ab82:	b30b      	cbz	r3, 801abc8 <__sfp+0x68>
 801ab84:	6836      	ldr	r6, [r6, #0]
 801ab86:	e7f7      	b.n	801ab78 <__sfp+0x18>
 801ab88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab8c:	b9d5      	cbnz	r5, 801abc4 <__sfp+0x64>
 801ab8e:	4b16      	ldr	r3, [pc, #88]	; (801abe8 <__sfp+0x88>)
 801ab90:	60e3      	str	r3, [r4, #12]
 801ab92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab96:	6665      	str	r5, [r4, #100]	; 0x64
 801ab98:	f000 f86c 	bl	801ac74 <__retarget_lock_init_recursive>
 801ab9c:	f7ff ff96 	bl	801aacc <__sfp_lock_release>
 801aba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aba8:	6025      	str	r5, [r4, #0]
 801abaa:	61a5      	str	r5, [r4, #24]
 801abac:	2208      	movs	r2, #8
 801abae:	4629      	mov	r1, r5
 801abb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801abb4:	f000 f880 	bl	801acb8 <memset>
 801abb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801abbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801abc0:	4620      	mov	r0, r4
 801abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abc4:	3468      	adds	r4, #104	; 0x68
 801abc6:	e7d9      	b.n	801ab7c <__sfp+0x1c>
 801abc8:	2104      	movs	r1, #4
 801abca:	4638      	mov	r0, r7
 801abcc:	f7ff ff62 	bl	801aa94 <__sfmoreglue>
 801abd0:	4604      	mov	r4, r0
 801abd2:	6030      	str	r0, [r6, #0]
 801abd4:	2800      	cmp	r0, #0
 801abd6:	d1d5      	bne.n	801ab84 <__sfp+0x24>
 801abd8:	f7ff ff78 	bl	801aacc <__sfp_lock_release>
 801abdc:	230c      	movs	r3, #12
 801abde:	603b      	str	r3, [r7, #0]
 801abe0:	e7ee      	b.n	801abc0 <__sfp+0x60>
 801abe2:	bf00      	nop
 801abe4:	0801c7f0 	.word	0x0801c7f0
 801abe8:	ffff0001 	.word	0xffff0001

0801abec <_fwalk_reent>:
 801abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abf0:	4606      	mov	r6, r0
 801abf2:	4688      	mov	r8, r1
 801abf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801abf8:	2700      	movs	r7, #0
 801abfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801abfe:	f1b9 0901 	subs.w	r9, r9, #1
 801ac02:	d505      	bpl.n	801ac10 <_fwalk_reent+0x24>
 801ac04:	6824      	ldr	r4, [r4, #0]
 801ac06:	2c00      	cmp	r4, #0
 801ac08:	d1f7      	bne.n	801abfa <_fwalk_reent+0xe>
 801ac0a:	4638      	mov	r0, r7
 801ac0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac10:	89ab      	ldrh	r3, [r5, #12]
 801ac12:	2b01      	cmp	r3, #1
 801ac14:	d907      	bls.n	801ac26 <_fwalk_reent+0x3a>
 801ac16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac1a:	3301      	adds	r3, #1
 801ac1c:	d003      	beq.n	801ac26 <_fwalk_reent+0x3a>
 801ac1e:	4629      	mov	r1, r5
 801ac20:	4630      	mov	r0, r6
 801ac22:	47c0      	blx	r8
 801ac24:	4307      	orrs	r7, r0
 801ac26:	3568      	adds	r5, #104	; 0x68
 801ac28:	e7e9      	b.n	801abfe <_fwalk_reent+0x12>
	...

0801ac2c <__libc_init_array>:
 801ac2c:	b570      	push	{r4, r5, r6, lr}
 801ac2e:	4d0d      	ldr	r5, [pc, #52]	; (801ac64 <__libc_init_array+0x38>)
 801ac30:	4c0d      	ldr	r4, [pc, #52]	; (801ac68 <__libc_init_array+0x3c>)
 801ac32:	1b64      	subs	r4, r4, r5
 801ac34:	10a4      	asrs	r4, r4, #2
 801ac36:	2600      	movs	r6, #0
 801ac38:	42a6      	cmp	r6, r4
 801ac3a:	d109      	bne.n	801ac50 <__libc_init_array+0x24>
 801ac3c:	4d0b      	ldr	r5, [pc, #44]	; (801ac6c <__libc_init_array+0x40>)
 801ac3e:	4c0c      	ldr	r4, [pc, #48]	; (801ac70 <__libc_init_array+0x44>)
 801ac40:	f000 fffc 	bl	801bc3c <_init>
 801ac44:	1b64      	subs	r4, r4, r5
 801ac46:	10a4      	asrs	r4, r4, #2
 801ac48:	2600      	movs	r6, #0
 801ac4a:	42a6      	cmp	r6, r4
 801ac4c:	d105      	bne.n	801ac5a <__libc_init_array+0x2e>
 801ac4e:	bd70      	pop	{r4, r5, r6, pc}
 801ac50:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac54:	4798      	blx	r3
 801ac56:	3601      	adds	r6, #1
 801ac58:	e7ee      	b.n	801ac38 <__libc_init_array+0xc>
 801ac5a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac5e:	4798      	blx	r3
 801ac60:	3601      	adds	r6, #1
 801ac62:	e7f2      	b.n	801ac4a <__libc_init_array+0x1e>
 801ac64:	0801c830 	.word	0x0801c830
 801ac68:	0801c830 	.word	0x0801c830
 801ac6c:	0801c830 	.word	0x0801c830
 801ac70:	0801c840 	.word	0x0801c840

0801ac74 <__retarget_lock_init_recursive>:
 801ac74:	4770      	bx	lr

0801ac76 <__retarget_lock_acquire_recursive>:
 801ac76:	4770      	bx	lr

0801ac78 <__retarget_lock_release_recursive>:
 801ac78:	4770      	bx	lr
	...

0801ac7c <malloc>:
 801ac7c:	4b02      	ldr	r3, [pc, #8]	; (801ac88 <malloc+0xc>)
 801ac7e:	4601      	mov	r1, r0
 801ac80:	6818      	ldr	r0, [r3, #0]
 801ac82:	f000 b88d 	b.w	801ada0 <_malloc_r>
 801ac86:	bf00      	nop
 801ac88:	20000044 	.word	0x20000044

0801ac8c <free>:
 801ac8c:	4b02      	ldr	r3, [pc, #8]	; (801ac98 <free+0xc>)
 801ac8e:	4601      	mov	r1, r0
 801ac90:	6818      	ldr	r0, [r3, #0]
 801ac92:	f000 b819 	b.w	801acc8 <_free_r>
 801ac96:	bf00      	nop
 801ac98:	20000044 	.word	0x20000044

0801ac9c <memcpy>:
 801ac9c:	440a      	add	r2, r1
 801ac9e:	4291      	cmp	r1, r2
 801aca0:	f100 33ff 	add.w	r3, r0, #4294967295
 801aca4:	d100      	bne.n	801aca8 <memcpy+0xc>
 801aca6:	4770      	bx	lr
 801aca8:	b510      	push	{r4, lr}
 801acaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801acae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801acb2:	4291      	cmp	r1, r2
 801acb4:	d1f9      	bne.n	801acaa <memcpy+0xe>
 801acb6:	bd10      	pop	{r4, pc}

0801acb8 <memset>:
 801acb8:	4402      	add	r2, r0
 801acba:	4603      	mov	r3, r0
 801acbc:	4293      	cmp	r3, r2
 801acbe:	d100      	bne.n	801acc2 <memset+0xa>
 801acc0:	4770      	bx	lr
 801acc2:	f803 1b01 	strb.w	r1, [r3], #1
 801acc6:	e7f9      	b.n	801acbc <memset+0x4>

0801acc8 <_free_r>:
 801acc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acca:	2900      	cmp	r1, #0
 801accc:	d044      	beq.n	801ad58 <_free_r+0x90>
 801acce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acd2:	9001      	str	r0, [sp, #4]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	f1a1 0404 	sub.w	r4, r1, #4
 801acda:	bfb8      	it	lt
 801acdc:	18e4      	addlt	r4, r4, r3
 801acde:	f000 fc7f 	bl	801b5e0 <__malloc_lock>
 801ace2:	4a1e      	ldr	r2, [pc, #120]	; (801ad5c <_free_r+0x94>)
 801ace4:	9801      	ldr	r0, [sp, #4]
 801ace6:	6813      	ldr	r3, [r2, #0]
 801ace8:	b933      	cbnz	r3, 801acf8 <_free_r+0x30>
 801acea:	6063      	str	r3, [r4, #4]
 801acec:	6014      	str	r4, [r2, #0]
 801acee:	b003      	add	sp, #12
 801acf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acf4:	f000 bc7a 	b.w	801b5ec <__malloc_unlock>
 801acf8:	42a3      	cmp	r3, r4
 801acfa:	d908      	bls.n	801ad0e <_free_r+0x46>
 801acfc:	6825      	ldr	r5, [r4, #0]
 801acfe:	1961      	adds	r1, r4, r5
 801ad00:	428b      	cmp	r3, r1
 801ad02:	bf01      	itttt	eq
 801ad04:	6819      	ldreq	r1, [r3, #0]
 801ad06:	685b      	ldreq	r3, [r3, #4]
 801ad08:	1949      	addeq	r1, r1, r5
 801ad0a:	6021      	streq	r1, [r4, #0]
 801ad0c:	e7ed      	b.n	801acea <_free_r+0x22>
 801ad0e:	461a      	mov	r2, r3
 801ad10:	685b      	ldr	r3, [r3, #4]
 801ad12:	b10b      	cbz	r3, 801ad18 <_free_r+0x50>
 801ad14:	42a3      	cmp	r3, r4
 801ad16:	d9fa      	bls.n	801ad0e <_free_r+0x46>
 801ad18:	6811      	ldr	r1, [r2, #0]
 801ad1a:	1855      	adds	r5, r2, r1
 801ad1c:	42a5      	cmp	r5, r4
 801ad1e:	d10b      	bne.n	801ad38 <_free_r+0x70>
 801ad20:	6824      	ldr	r4, [r4, #0]
 801ad22:	4421      	add	r1, r4
 801ad24:	1854      	adds	r4, r2, r1
 801ad26:	42a3      	cmp	r3, r4
 801ad28:	6011      	str	r1, [r2, #0]
 801ad2a:	d1e0      	bne.n	801acee <_free_r+0x26>
 801ad2c:	681c      	ldr	r4, [r3, #0]
 801ad2e:	685b      	ldr	r3, [r3, #4]
 801ad30:	6053      	str	r3, [r2, #4]
 801ad32:	4421      	add	r1, r4
 801ad34:	6011      	str	r1, [r2, #0]
 801ad36:	e7da      	b.n	801acee <_free_r+0x26>
 801ad38:	d902      	bls.n	801ad40 <_free_r+0x78>
 801ad3a:	230c      	movs	r3, #12
 801ad3c:	6003      	str	r3, [r0, #0]
 801ad3e:	e7d6      	b.n	801acee <_free_r+0x26>
 801ad40:	6825      	ldr	r5, [r4, #0]
 801ad42:	1961      	adds	r1, r4, r5
 801ad44:	428b      	cmp	r3, r1
 801ad46:	bf04      	itt	eq
 801ad48:	6819      	ldreq	r1, [r3, #0]
 801ad4a:	685b      	ldreq	r3, [r3, #4]
 801ad4c:	6063      	str	r3, [r4, #4]
 801ad4e:	bf04      	itt	eq
 801ad50:	1949      	addeq	r1, r1, r5
 801ad52:	6021      	streq	r1, [r4, #0]
 801ad54:	6054      	str	r4, [r2, #4]
 801ad56:	e7ca      	b.n	801acee <_free_r+0x26>
 801ad58:	b003      	add	sp, #12
 801ad5a:	bd30      	pop	{r4, r5, pc}
 801ad5c:	20009098 	.word	0x20009098

0801ad60 <sbrk_aligned>:
 801ad60:	b570      	push	{r4, r5, r6, lr}
 801ad62:	4e0e      	ldr	r6, [pc, #56]	; (801ad9c <sbrk_aligned+0x3c>)
 801ad64:	460c      	mov	r4, r1
 801ad66:	6831      	ldr	r1, [r6, #0]
 801ad68:	4605      	mov	r5, r0
 801ad6a:	b911      	cbnz	r1, 801ad72 <sbrk_aligned+0x12>
 801ad6c:	f000 f984 	bl	801b078 <_sbrk_r>
 801ad70:	6030      	str	r0, [r6, #0]
 801ad72:	4621      	mov	r1, r4
 801ad74:	4628      	mov	r0, r5
 801ad76:	f000 f97f 	bl	801b078 <_sbrk_r>
 801ad7a:	1c43      	adds	r3, r0, #1
 801ad7c:	d00a      	beq.n	801ad94 <sbrk_aligned+0x34>
 801ad7e:	1cc4      	adds	r4, r0, #3
 801ad80:	f024 0403 	bic.w	r4, r4, #3
 801ad84:	42a0      	cmp	r0, r4
 801ad86:	d007      	beq.n	801ad98 <sbrk_aligned+0x38>
 801ad88:	1a21      	subs	r1, r4, r0
 801ad8a:	4628      	mov	r0, r5
 801ad8c:	f000 f974 	bl	801b078 <_sbrk_r>
 801ad90:	3001      	adds	r0, #1
 801ad92:	d101      	bne.n	801ad98 <sbrk_aligned+0x38>
 801ad94:	f04f 34ff 	mov.w	r4, #4294967295
 801ad98:	4620      	mov	r0, r4
 801ad9a:	bd70      	pop	{r4, r5, r6, pc}
 801ad9c:	2000909c 	.word	0x2000909c

0801ada0 <_malloc_r>:
 801ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada4:	1ccd      	adds	r5, r1, #3
 801ada6:	f025 0503 	bic.w	r5, r5, #3
 801adaa:	3508      	adds	r5, #8
 801adac:	2d0c      	cmp	r5, #12
 801adae:	bf38      	it	cc
 801adb0:	250c      	movcc	r5, #12
 801adb2:	2d00      	cmp	r5, #0
 801adb4:	4607      	mov	r7, r0
 801adb6:	db01      	blt.n	801adbc <_malloc_r+0x1c>
 801adb8:	42a9      	cmp	r1, r5
 801adba:	d905      	bls.n	801adc8 <_malloc_r+0x28>
 801adbc:	230c      	movs	r3, #12
 801adbe:	603b      	str	r3, [r7, #0]
 801adc0:	2600      	movs	r6, #0
 801adc2:	4630      	mov	r0, r6
 801adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adc8:	4e2e      	ldr	r6, [pc, #184]	; (801ae84 <_malloc_r+0xe4>)
 801adca:	f000 fc09 	bl	801b5e0 <__malloc_lock>
 801adce:	6833      	ldr	r3, [r6, #0]
 801add0:	461c      	mov	r4, r3
 801add2:	bb34      	cbnz	r4, 801ae22 <_malloc_r+0x82>
 801add4:	4629      	mov	r1, r5
 801add6:	4638      	mov	r0, r7
 801add8:	f7ff ffc2 	bl	801ad60 <sbrk_aligned>
 801addc:	1c43      	adds	r3, r0, #1
 801adde:	4604      	mov	r4, r0
 801ade0:	d14d      	bne.n	801ae7e <_malloc_r+0xde>
 801ade2:	6834      	ldr	r4, [r6, #0]
 801ade4:	4626      	mov	r6, r4
 801ade6:	2e00      	cmp	r6, #0
 801ade8:	d140      	bne.n	801ae6c <_malloc_r+0xcc>
 801adea:	6823      	ldr	r3, [r4, #0]
 801adec:	4631      	mov	r1, r6
 801adee:	4638      	mov	r0, r7
 801adf0:	eb04 0803 	add.w	r8, r4, r3
 801adf4:	f000 f940 	bl	801b078 <_sbrk_r>
 801adf8:	4580      	cmp	r8, r0
 801adfa:	d13a      	bne.n	801ae72 <_malloc_r+0xd2>
 801adfc:	6821      	ldr	r1, [r4, #0]
 801adfe:	3503      	adds	r5, #3
 801ae00:	1a6d      	subs	r5, r5, r1
 801ae02:	f025 0503 	bic.w	r5, r5, #3
 801ae06:	3508      	adds	r5, #8
 801ae08:	2d0c      	cmp	r5, #12
 801ae0a:	bf38      	it	cc
 801ae0c:	250c      	movcc	r5, #12
 801ae0e:	4629      	mov	r1, r5
 801ae10:	4638      	mov	r0, r7
 801ae12:	f7ff ffa5 	bl	801ad60 <sbrk_aligned>
 801ae16:	3001      	adds	r0, #1
 801ae18:	d02b      	beq.n	801ae72 <_malloc_r+0xd2>
 801ae1a:	6823      	ldr	r3, [r4, #0]
 801ae1c:	442b      	add	r3, r5
 801ae1e:	6023      	str	r3, [r4, #0]
 801ae20:	e00e      	b.n	801ae40 <_malloc_r+0xa0>
 801ae22:	6822      	ldr	r2, [r4, #0]
 801ae24:	1b52      	subs	r2, r2, r5
 801ae26:	d41e      	bmi.n	801ae66 <_malloc_r+0xc6>
 801ae28:	2a0b      	cmp	r2, #11
 801ae2a:	d916      	bls.n	801ae5a <_malloc_r+0xba>
 801ae2c:	1961      	adds	r1, r4, r5
 801ae2e:	42a3      	cmp	r3, r4
 801ae30:	6025      	str	r5, [r4, #0]
 801ae32:	bf18      	it	ne
 801ae34:	6059      	strne	r1, [r3, #4]
 801ae36:	6863      	ldr	r3, [r4, #4]
 801ae38:	bf08      	it	eq
 801ae3a:	6031      	streq	r1, [r6, #0]
 801ae3c:	5162      	str	r2, [r4, r5]
 801ae3e:	604b      	str	r3, [r1, #4]
 801ae40:	4638      	mov	r0, r7
 801ae42:	f104 060b 	add.w	r6, r4, #11
 801ae46:	f000 fbd1 	bl	801b5ec <__malloc_unlock>
 801ae4a:	f026 0607 	bic.w	r6, r6, #7
 801ae4e:	1d23      	adds	r3, r4, #4
 801ae50:	1af2      	subs	r2, r6, r3
 801ae52:	d0b6      	beq.n	801adc2 <_malloc_r+0x22>
 801ae54:	1b9b      	subs	r3, r3, r6
 801ae56:	50a3      	str	r3, [r4, r2]
 801ae58:	e7b3      	b.n	801adc2 <_malloc_r+0x22>
 801ae5a:	6862      	ldr	r2, [r4, #4]
 801ae5c:	42a3      	cmp	r3, r4
 801ae5e:	bf0c      	ite	eq
 801ae60:	6032      	streq	r2, [r6, #0]
 801ae62:	605a      	strne	r2, [r3, #4]
 801ae64:	e7ec      	b.n	801ae40 <_malloc_r+0xa0>
 801ae66:	4623      	mov	r3, r4
 801ae68:	6864      	ldr	r4, [r4, #4]
 801ae6a:	e7b2      	b.n	801add2 <_malloc_r+0x32>
 801ae6c:	4634      	mov	r4, r6
 801ae6e:	6876      	ldr	r6, [r6, #4]
 801ae70:	e7b9      	b.n	801ade6 <_malloc_r+0x46>
 801ae72:	230c      	movs	r3, #12
 801ae74:	603b      	str	r3, [r7, #0]
 801ae76:	4638      	mov	r0, r7
 801ae78:	f000 fbb8 	bl	801b5ec <__malloc_unlock>
 801ae7c:	e7a1      	b.n	801adc2 <_malloc_r+0x22>
 801ae7e:	6025      	str	r5, [r4, #0]
 801ae80:	e7de      	b.n	801ae40 <_malloc_r+0xa0>
 801ae82:	bf00      	nop
 801ae84:	20009098 	.word	0x20009098

0801ae88 <iprintf>:
 801ae88:	b40f      	push	{r0, r1, r2, r3}
 801ae8a:	4b0a      	ldr	r3, [pc, #40]	; (801aeb4 <iprintf+0x2c>)
 801ae8c:	b513      	push	{r0, r1, r4, lr}
 801ae8e:	681c      	ldr	r4, [r3, #0]
 801ae90:	b124      	cbz	r4, 801ae9c <iprintf+0x14>
 801ae92:	69a3      	ldr	r3, [r4, #24]
 801ae94:	b913      	cbnz	r3, 801ae9c <iprintf+0x14>
 801ae96:	4620      	mov	r0, r4
 801ae98:	f7ff fe2a 	bl	801aaf0 <__sinit>
 801ae9c:	ab05      	add	r3, sp, #20
 801ae9e:	9a04      	ldr	r2, [sp, #16]
 801aea0:	68a1      	ldr	r1, [r4, #8]
 801aea2:	9301      	str	r3, [sp, #4]
 801aea4:	4620      	mov	r0, r4
 801aea6:	f000 fbd1 	bl	801b64c <_vfiprintf_r>
 801aeaa:	b002      	add	sp, #8
 801aeac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aeb0:	b004      	add	sp, #16
 801aeb2:	4770      	bx	lr
 801aeb4:	20000044 	.word	0x20000044

0801aeb8 <_puts_r>:
 801aeb8:	b570      	push	{r4, r5, r6, lr}
 801aeba:	460e      	mov	r6, r1
 801aebc:	4605      	mov	r5, r0
 801aebe:	b118      	cbz	r0, 801aec8 <_puts_r+0x10>
 801aec0:	6983      	ldr	r3, [r0, #24]
 801aec2:	b90b      	cbnz	r3, 801aec8 <_puts_r+0x10>
 801aec4:	f7ff fe14 	bl	801aaf0 <__sinit>
 801aec8:	69ab      	ldr	r3, [r5, #24]
 801aeca:	68ac      	ldr	r4, [r5, #8]
 801aecc:	b913      	cbnz	r3, 801aed4 <_puts_r+0x1c>
 801aece:	4628      	mov	r0, r5
 801aed0:	f7ff fe0e 	bl	801aaf0 <__sinit>
 801aed4:	4b2c      	ldr	r3, [pc, #176]	; (801af88 <_puts_r+0xd0>)
 801aed6:	429c      	cmp	r4, r3
 801aed8:	d120      	bne.n	801af1c <_puts_r+0x64>
 801aeda:	686c      	ldr	r4, [r5, #4]
 801aedc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aede:	07db      	lsls	r3, r3, #31
 801aee0:	d405      	bmi.n	801aeee <_puts_r+0x36>
 801aee2:	89a3      	ldrh	r3, [r4, #12]
 801aee4:	0598      	lsls	r0, r3, #22
 801aee6:	d402      	bmi.n	801aeee <_puts_r+0x36>
 801aee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aeea:	f7ff fec4 	bl	801ac76 <__retarget_lock_acquire_recursive>
 801aeee:	89a3      	ldrh	r3, [r4, #12]
 801aef0:	0719      	lsls	r1, r3, #28
 801aef2:	d51d      	bpl.n	801af30 <_puts_r+0x78>
 801aef4:	6923      	ldr	r3, [r4, #16]
 801aef6:	b1db      	cbz	r3, 801af30 <_puts_r+0x78>
 801aef8:	3e01      	subs	r6, #1
 801aefa:	68a3      	ldr	r3, [r4, #8]
 801aefc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801af00:	3b01      	subs	r3, #1
 801af02:	60a3      	str	r3, [r4, #8]
 801af04:	bb39      	cbnz	r1, 801af56 <_puts_r+0x9e>
 801af06:	2b00      	cmp	r3, #0
 801af08:	da38      	bge.n	801af7c <_puts_r+0xc4>
 801af0a:	4622      	mov	r2, r4
 801af0c:	210a      	movs	r1, #10
 801af0e:	4628      	mov	r0, r5
 801af10:	f000 f94a 	bl	801b1a8 <__swbuf_r>
 801af14:	3001      	adds	r0, #1
 801af16:	d011      	beq.n	801af3c <_puts_r+0x84>
 801af18:	250a      	movs	r5, #10
 801af1a:	e011      	b.n	801af40 <_puts_r+0x88>
 801af1c:	4b1b      	ldr	r3, [pc, #108]	; (801af8c <_puts_r+0xd4>)
 801af1e:	429c      	cmp	r4, r3
 801af20:	d101      	bne.n	801af26 <_puts_r+0x6e>
 801af22:	68ac      	ldr	r4, [r5, #8]
 801af24:	e7da      	b.n	801aedc <_puts_r+0x24>
 801af26:	4b1a      	ldr	r3, [pc, #104]	; (801af90 <_puts_r+0xd8>)
 801af28:	429c      	cmp	r4, r3
 801af2a:	bf08      	it	eq
 801af2c:	68ec      	ldreq	r4, [r5, #12]
 801af2e:	e7d5      	b.n	801aedc <_puts_r+0x24>
 801af30:	4621      	mov	r1, r4
 801af32:	4628      	mov	r0, r5
 801af34:	f000 f99c 	bl	801b270 <__swsetup_r>
 801af38:	2800      	cmp	r0, #0
 801af3a:	d0dd      	beq.n	801aef8 <_puts_r+0x40>
 801af3c:	f04f 35ff 	mov.w	r5, #4294967295
 801af40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801af42:	07da      	lsls	r2, r3, #31
 801af44:	d405      	bmi.n	801af52 <_puts_r+0x9a>
 801af46:	89a3      	ldrh	r3, [r4, #12]
 801af48:	059b      	lsls	r3, r3, #22
 801af4a:	d402      	bmi.n	801af52 <_puts_r+0x9a>
 801af4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af4e:	f7ff fe93 	bl	801ac78 <__retarget_lock_release_recursive>
 801af52:	4628      	mov	r0, r5
 801af54:	bd70      	pop	{r4, r5, r6, pc}
 801af56:	2b00      	cmp	r3, #0
 801af58:	da04      	bge.n	801af64 <_puts_r+0xac>
 801af5a:	69a2      	ldr	r2, [r4, #24]
 801af5c:	429a      	cmp	r2, r3
 801af5e:	dc06      	bgt.n	801af6e <_puts_r+0xb6>
 801af60:	290a      	cmp	r1, #10
 801af62:	d004      	beq.n	801af6e <_puts_r+0xb6>
 801af64:	6823      	ldr	r3, [r4, #0]
 801af66:	1c5a      	adds	r2, r3, #1
 801af68:	6022      	str	r2, [r4, #0]
 801af6a:	7019      	strb	r1, [r3, #0]
 801af6c:	e7c5      	b.n	801aefa <_puts_r+0x42>
 801af6e:	4622      	mov	r2, r4
 801af70:	4628      	mov	r0, r5
 801af72:	f000 f919 	bl	801b1a8 <__swbuf_r>
 801af76:	3001      	adds	r0, #1
 801af78:	d1bf      	bne.n	801aefa <_puts_r+0x42>
 801af7a:	e7df      	b.n	801af3c <_puts_r+0x84>
 801af7c:	6823      	ldr	r3, [r4, #0]
 801af7e:	250a      	movs	r5, #10
 801af80:	1c5a      	adds	r2, r3, #1
 801af82:	6022      	str	r2, [r4, #0]
 801af84:	701d      	strb	r5, [r3, #0]
 801af86:	e7db      	b.n	801af40 <_puts_r+0x88>
 801af88:	0801c7b0 	.word	0x0801c7b0
 801af8c:	0801c7d0 	.word	0x0801c7d0
 801af90:	0801c790 	.word	0x0801c790

0801af94 <puts>:
 801af94:	4b02      	ldr	r3, [pc, #8]	; (801afa0 <puts+0xc>)
 801af96:	4601      	mov	r1, r0
 801af98:	6818      	ldr	r0, [r3, #0]
 801af9a:	f7ff bf8d 	b.w	801aeb8 <_puts_r>
 801af9e:	bf00      	nop
 801afa0:	20000044 	.word	0x20000044

0801afa4 <cleanup_glue>:
 801afa4:	b538      	push	{r3, r4, r5, lr}
 801afa6:	460c      	mov	r4, r1
 801afa8:	6809      	ldr	r1, [r1, #0]
 801afaa:	4605      	mov	r5, r0
 801afac:	b109      	cbz	r1, 801afb2 <cleanup_glue+0xe>
 801afae:	f7ff fff9 	bl	801afa4 <cleanup_glue>
 801afb2:	4621      	mov	r1, r4
 801afb4:	4628      	mov	r0, r5
 801afb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afba:	f7ff be85 	b.w	801acc8 <_free_r>
	...

0801afc0 <_reclaim_reent>:
 801afc0:	4b2c      	ldr	r3, [pc, #176]	; (801b074 <_reclaim_reent+0xb4>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	4283      	cmp	r3, r0
 801afc6:	b570      	push	{r4, r5, r6, lr}
 801afc8:	4604      	mov	r4, r0
 801afca:	d051      	beq.n	801b070 <_reclaim_reent+0xb0>
 801afcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801afce:	b143      	cbz	r3, 801afe2 <_reclaim_reent+0x22>
 801afd0:	68db      	ldr	r3, [r3, #12]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d14a      	bne.n	801b06c <_reclaim_reent+0xac>
 801afd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afd8:	6819      	ldr	r1, [r3, #0]
 801afda:	b111      	cbz	r1, 801afe2 <_reclaim_reent+0x22>
 801afdc:	4620      	mov	r0, r4
 801afde:	f7ff fe73 	bl	801acc8 <_free_r>
 801afe2:	6961      	ldr	r1, [r4, #20]
 801afe4:	b111      	cbz	r1, 801afec <_reclaim_reent+0x2c>
 801afe6:	4620      	mov	r0, r4
 801afe8:	f7ff fe6e 	bl	801acc8 <_free_r>
 801afec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801afee:	b111      	cbz	r1, 801aff6 <_reclaim_reent+0x36>
 801aff0:	4620      	mov	r0, r4
 801aff2:	f7ff fe69 	bl	801acc8 <_free_r>
 801aff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801aff8:	b111      	cbz	r1, 801b000 <_reclaim_reent+0x40>
 801affa:	4620      	mov	r0, r4
 801affc:	f7ff fe64 	bl	801acc8 <_free_r>
 801b000:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b002:	b111      	cbz	r1, 801b00a <_reclaim_reent+0x4a>
 801b004:	4620      	mov	r0, r4
 801b006:	f7ff fe5f 	bl	801acc8 <_free_r>
 801b00a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b00c:	b111      	cbz	r1, 801b014 <_reclaim_reent+0x54>
 801b00e:	4620      	mov	r0, r4
 801b010:	f7ff fe5a 	bl	801acc8 <_free_r>
 801b014:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b016:	b111      	cbz	r1, 801b01e <_reclaim_reent+0x5e>
 801b018:	4620      	mov	r0, r4
 801b01a:	f7ff fe55 	bl	801acc8 <_free_r>
 801b01e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b020:	b111      	cbz	r1, 801b028 <_reclaim_reent+0x68>
 801b022:	4620      	mov	r0, r4
 801b024:	f7ff fe50 	bl	801acc8 <_free_r>
 801b028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b02a:	b111      	cbz	r1, 801b032 <_reclaim_reent+0x72>
 801b02c:	4620      	mov	r0, r4
 801b02e:	f7ff fe4b 	bl	801acc8 <_free_r>
 801b032:	69a3      	ldr	r3, [r4, #24]
 801b034:	b1e3      	cbz	r3, 801b070 <_reclaim_reent+0xb0>
 801b036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b038:	4620      	mov	r0, r4
 801b03a:	4798      	blx	r3
 801b03c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b03e:	b1b9      	cbz	r1, 801b070 <_reclaim_reent+0xb0>
 801b040:	4620      	mov	r0, r4
 801b042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b046:	f7ff bfad 	b.w	801afa4 <cleanup_glue>
 801b04a:	5949      	ldr	r1, [r1, r5]
 801b04c:	b941      	cbnz	r1, 801b060 <_reclaim_reent+0xa0>
 801b04e:	3504      	adds	r5, #4
 801b050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b052:	2d80      	cmp	r5, #128	; 0x80
 801b054:	68d9      	ldr	r1, [r3, #12]
 801b056:	d1f8      	bne.n	801b04a <_reclaim_reent+0x8a>
 801b058:	4620      	mov	r0, r4
 801b05a:	f7ff fe35 	bl	801acc8 <_free_r>
 801b05e:	e7ba      	b.n	801afd6 <_reclaim_reent+0x16>
 801b060:	680e      	ldr	r6, [r1, #0]
 801b062:	4620      	mov	r0, r4
 801b064:	f7ff fe30 	bl	801acc8 <_free_r>
 801b068:	4631      	mov	r1, r6
 801b06a:	e7ef      	b.n	801b04c <_reclaim_reent+0x8c>
 801b06c:	2500      	movs	r5, #0
 801b06e:	e7ef      	b.n	801b050 <_reclaim_reent+0x90>
 801b070:	bd70      	pop	{r4, r5, r6, pc}
 801b072:	bf00      	nop
 801b074:	20000044 	.word	0x20000044

0801b078 <_sbrk_r>:
 801b078:	b538      	push	{r3, r4, r5, lr}
 801b07a:	4d06      	ldr	r5, [pc, #24]	; (801b094 <_sbrk_r+0x1c>)
 801b07c:	2300      	movs	r3, #0
 801b07e:	4604      	mov	r4, r0
 801b080:	4608      	mov	r0, r1
 801b082:	602b      	str	r3, [r5, #0]
 801b084:	f7f3 fbf8 	bl	800e878 <_sbrk>
 801b088:	1c43      	adds	r3, r0, #1
 801b08a:	d102      	bne.n	801b092 <_sbrk_r+0x1a>
 801b08c:	682b      	ldr	r3, [r5, #0]
 801b08e:	b103      	cbz	r3, 801b092 <_sbrk_r+0x1a>
 801b090:	6023      	str	r3, [r4, #0]
 801b092:	bd38      	pop	{r3, r4, r5, pc}
 801b094:	200090a0 	.word	0x200090a0

0801b098 <_raise_r>:
 801b098:	291f      	cmp	r1, #31
 801b09a:	b538      	push	{r3, r4, r5, lr}
 801b09c:	4604      	mov	r4, r0
 801b09e:	460d      	mov	r5, r1
 801b0a0:	d904      	bls.n	801b0ac <_raise_r+0x14>
 801b0a2:	2316      	movs	r3, #22
 801b0a4:	6003      	str	r3, [r0, #0]
 801b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 801b0aa:	bd38      	pop	{r3, r4, r5, pc}
 801b0ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b0ae:	b112      	cbz	r2, 801b0b6 <_raise_r+0x1e>
 801b0b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b0b4:	b94b      	cbnz	r3, 801b0ca <_raise_r+0x32>
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	f000 f830 	bl	801b11c <_getpid_r>
 801b0bc:	462a      	mov	r2, r5
 801b0be:	4601      	mov	r1, r0
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0c6:	f000 b817 	b.w	801b0f8 <_kill_r>
 801b0ca:	2b01      	cmp	r3, #1
 801b0cc:	d00a      	beq.n	801b0e4 <_raise_r+0x4c>
 801b0ce:	1c59      	adds	r1, r3, #1
 801b0d0:	d103      	bne.n	801b0da <_raise_r+0x42>
 801b0d2:	2316      	movs	r3, #22
 801b0d4:	6003      	str	r3, [r0, #0]
 801b0d6:	2001      	movs	r0, #1
 801b0d8:	e7e7      	b.n	801b0aa <_raise_r+0x12>
 801b0da:	2400      	movs	r4, #0
 801b0dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b0e0:	4628      	mov	r0, r5
 801b0e2:	4798      	blx	r3
 801b0e4:	2000      	movs	r0, #0
 801b0e6:	e7e0      	b.n	801b0aa <_raise_r+0x12>

0801b0e8 <raise>:
 801b0e8:	4b02      	ldr	r3, [pc, #8]	; (801b0f4 <raise+0xc>)
 801b0ea:	4601      	mov	r1, r0
 801b0ec:	6818      	ldr	r0, [r3, #0]
 801b0ee:	f7ff bfd3 	b.w	801b098 <_raise_r>
 801b0f2:	bf00      	nop
 801b0f4:	20000044 	.word	0x20000044

0801b0f8 <_kill_r>:
 801b0f8:	b538      	push	{r3, r4, r5, lr}
 801b0fa:	4d07      	ldr	r5, [pc, #28]	; (801b118 <_kill_r+0x20>)
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	4604      	mov	r4, r0
 801b100:	4608      	mov	r0, r1
 801b102:	4611      	mov	r1, r2
 801b104:	602b      	str	r3, [r5, #0]
 801b106:	f7f3 fb30 	bl	800e76a <_kill>
 801b10a:	1c43      	adds	r3, r0, #1
 801b10c:	d102      	bne.n	801b114 <_kill_r+0x1c>
 801b10e:	682b      	ldr	r3, [r5, #0]
 801b110:	b103      	cbz	r3, 801b114 <_kill_r+0x1c>
 801b112:	6023      	str	r3, [r4, #0]
 801b114:	bd38      	pop	{r3, r4, r5, pc}
 801b116:	bf00      	nop
 801b118:	200090a0 	.word	0x200090a0

0801b11c <_getpid_r>:
 801b11c:	f7f3 bb1d 	b.w	800e75a <_getpid>

0801b120 <__sread>:
 801b120:	b510      	push	{r4, lr}
 801b122:	460c      	mov	r4, r1
 801b124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b128:	f000 fd54 	bl	801bbd4 <_read_r>
 801b12c:	2800      	cmp	r0, #0
 801b12e:	bfab      	itete	ge
 801b130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b132:	89a3      	ldrhlt	r3, [r4, #12]
 801b134:	181b      	addge	r3, r3, r0
 801b136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b13a:	bfac      	ite	ge
 801b13c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b13e:	81a3      	strhlt	r3, [r4, #12]
 801b140:	bd10      	pop	{r4, pc}

0801b142 <__swrite>:
 801b142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b146:	461f      	mov	r7, r3
 801b148:	898b      	ldrh	r3, [r1, #12]
 801b14a:	05db      	lsls	r3, r3, #23
 801b14c:	4605      	mov	r5, r0
 801b14e:	460c      	mov	r4, r1
 801b150:	4616      	mov	r6, r2
 801b152:	d505      	bpl.n	801b160 <__swrite+0x1e>
 801b154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b158:	2302      	movs	r3, #2
 801b15a:	2200      	movs	r2, #0
 801b15c:	f000 f9c8 	bl	801b4f0 <_lseek_r>
 801b160:	89a3      	ldrh	r3, [r4, #12]
 801b162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b16a:	81a3      	strh	r3, [r4, #12]
 801b16c:	4632      	mov	r2, r6
 801b16e:	463b      	mov	r3, r7
 801b170:	4628      	mov	r0, r5
 801b172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b176:	f000 b869 	b.w	801b24c <_write_r>

0801b17a <__sseek>:
 801b17a:	b510      	push	{r4, lr}
 801b17c:	460c      	mov	r4, r1
 801b17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b182:	f000 f9b5 	bl	801b4f0 <_lseek_r>
 801b186:	1c43      	adds	r3, r0, #1
 801b188:	89a3      	ldrh	r3, [r4, #12]
 801b18a:	bf15      	itete	ne
 801b18c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b18e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b196:	81a3      	strheq	r3, [r4, #12]
 801b198:	bf18      	it	ne
 801b19a:	81a3      	strhne	r3, [r4, #12]
 801b19c:	bd10      	pop	{r4, pc}

0801b19e <__sclose>:
 801b19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a2:	f000 b8d3 	b.w	801b34c <_close_r>
	...

0801b1a8 <__swbuf_r>:
 801b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1aa:	460e      	mov	r6, r1
 801b1ac:	4614      	mov	r4, r2
 801b1ae:	4605      	mov	r5, r0
 801b1b0:	b118      	cbz	r0, 801b1ba <__swbuf_r+0x12>
 801b1b2:	6983      	ldr	r3, [r0, #24]
 801b1b4:	b90b      	cbnz	r3, 801b1ba <__swbuf_r+0x12>
 801b1b6:	f7ff fc9b 	bl	801aaf0 <__sinit>
 801b1ba:	4b21      	ldr	r3, [pc, #132]	; (801b240 <__swbuf_r+0x98>)
 801b1bc:	429c      	cmp	r4, r3
 801b1be:	d12b      	bne.n	801b218 <__swbuf_r+0x70>
 801b1c0:	686c      	ldr	r4, [r5, #4]
 801b1c2:	69a3      	ldr	r3, [r4, #24]
 801b1c4:	60a3      	str	r3, [r4, #8]
 801b1c6:	89a3      	ldrh	r3, [r4, #12]
 801b1c8:	071a      	lsls	r2, r3, #28
 801b1ca:	d52f      	bpl.n	801b22c <__swbuf_r+0x84>
 801b1cc:	6923      	ldr	r3, [r4, #16]
 801b1ce:	b36b      	cbz	r3, 801b22c <__swbuf_r+0x84>
 801b1d0:	6923      	ldr	r3, [r4, #16]
 801b1d2:	6820      	ldr	r0, [r4, #0]
 801b1d4:	1ac0      	subs	r0, r0, r3
 801b1d6:	6963      	ldr	r3, [r4, #20]
 801b1d8:	b2f6      	uxtb	r6, r6
 801b1da:	4283      	cmp	r3, r0
 801b1dc:	4637      	mov	r7, r6
 801b1de:	dc04      	bgt.n	801b1ea <__swbuf_r+0x42>
 801b1e0:	4621      	mov	r1, r4
 801b1e2:	4628      	mov	r0, r5
 801b1e4:	f000 f948 	bl	801b478 <_fflush_r>
 801b1e8:	bb30      	cbnz	r0, 801b238 <__swbuf_r+0x90>
 801b1ea:	68a3      	ldr	r3, [r4, #8]
 801b1ec:	3b01      	subs	r3, #1
 801b1ee:	60a3      	str	r3, [r4, #8]
 801b1f0:	6823      	ldr	r3, [r4, #0]
 801b1f2:	1c5a      	adds	r2, r3, #1
 801b1f4:	6022      	str	r2, [r4, #0]
 801b1f6:	701e      	strb	r6, [r3, #0]
 801b1f8:	6963      	ldr	r3, [r4, #20]
 801b1fa:	3001      	adds	r0, #1
 801b1fc:	4283      	cmp	r3, r0
 801b1fe:	d004      	beq.n	801b20a <__swbuf_r+0x62>
 801b200:	89a3      	ldrh	r3, [r4, #12]
 801b202:	07db      	lsls	r3, r3, #31
 801b204:	d506      	bpl.n	801b214 <__swbuf_r+0x6c>
 801b206:	2e0a      	cmp	r6, #10
 801b208:	d104      	bne.n	801b214 <__swbuf_r+0x6c>
 801b20a:	4621      	mov	r1, r4
 801b20c:	4628      	mov	r0, r5
 801b20e:	f000 f933 	bl	801b478 <_fflush_r>
 801b212:	b988      	cbnz	r0, 801b238 <__swbuf_r+0x90>
 801b214:	4638      	mov	r0, r7
 801b216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b218:	4b0a      	ldr	r3, [pc, #40]	; (801b244 <__swbuf_r+0x9c>)
 801b21a:	429c      	cmp	r4, r3
 801b21c:	d101      	bne.n	801b222 <__swbuf_r+0x7a>
 801b21e:	68ac      	ldr	r4, [r5, #8]
 801b220:	e7cf      	b.n	801b1c2 <__swbuf_r+0x1a>
 801b222:	4b09      	ldr	r3, [pc, #36]	; (801b248 <__swbuf_r+0xa0>)
 801b224:	429c      	cmp	r4, r3
 801b226:	bf08      	it	eq
 801b228:	68ec      	ldreq	r4, [r5, #12]
 801b22a:	e7ca      	b.n	801b1c2 <__swbuf_r+0x1a>
 801b22c:	4621      	mov	r1, r4
 801b22e:	4628      	mov	r0, r5
 801b230:	f000 f81e 	bl	801b270 <__swsetup_r>
 801b234:	2800      	cmp	r0, #0
 801b236:	d0cb      	beq.n	801b1d0 <__swbuf_r+0x28>
 801b238:	f04f 37ff 	mov.w	r7, #4294967295
 801b23c:	e7ea      	b.n	801b214 <__swbuf_r+0x6c>
 801b23e:	bf00      	nop
 801b240:	0801c7b0 	.word	0x0801c7b0
 801b244:	0801c7d0 	.word	0x0801c7d0
 801b248:	0801c790 	.word	0x0801c790

0801b24c <_write_r>:
 801b24c:	b538      	push	{r3, r4, r5, lr}
 801b24e:	4d07      	ldr	r5, [pc, #28]	; (801b26c <_write_r+0x20>)
 801b250:	4604      	mov	r4, r0
 801b252:	4608      	mov	r0, r1
 801b254:	4611      	mov	r1, r2
 801b256:	2200      	movs	r2, #0
 801b258:	602a      	str	r2, [r5, #0]
 801b25a:	461a      	mov	r2, r3
 801b25c:	f7f3 fabc 	bl	800e7d8 <_write>
 801b260:	1c43      	adds	r3, r0, #1
 801b262:	d102      	bne.n	801b26a <_write_r+0x1e>
 801b264:	682b      	ldr	r3, [r5, #0]
 801b266:	b103      	cbz	r3, 801b26a <_write_r+0x1e>
 801b268:	6023      	str	r3, [r4, #0]
 801b26a:	bd38      	pop	{r3, r4, r5, pc}
 801b26c:	200090a0 	.word	0x200090a0

0801b270 <__swsetup_r>:
 801b270:	4b32      	ldr	r3, [pc, #200]	; (801b33c <__swsetup_r+0xcc>)
 801b272:	b570      	push	{r4, r5, r6, lr}
 801b274:	681d      	ldr	r5, [r3, #0]
 801b276:	4606      	mov	r6, r0
 801b278:	460c      	mov	r4, r1
 801b27a:	b125      	cbz	r5, 801b286 <__swsetup_r+0x16>
 801b27c:	69ab      	ldr	r3, [r5, #24]
 801b27e:	b913      	cbnz	r3, 801b286 <__swsetup_r+0x16>
 801b280:	4628      	mov	r0, r5
 801b282:	f7ff fc35 	bl	801aaf0 <__sinit>
 801b286:	4b2e      	ldr	r3, [pc, #184]	; (801b340 <__swsetup_r+0xd0>)
 801b288:	429c      	cmp	r4, r3
 801b28a:	d10f      	bne.n	801b2ac <__swsetup_r+0x3c>
 801b28c:	686c      	ldr	r4, [r5, #4]
 801b28e:	89a3      	ldrh	r3, [r4, #12]
 801b290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b294:	0719      	lsls	r1, r3, #28
 801b296:	d42c      	bmi.n	801b2f2 <__swsetup_r+0x82>
 801b298:	06dd      	lsls	r5, r3, #27
 801b29a:	d411      	bmi.n	801b2c0 <__swsetup_r+0x50>
 801b29c:	2309      	movs	r3, #9
 801b29e:	6033      	str	r3, [r6, #0]
 801b2a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b2a4:	81a3      	strh	r3, [r4, #12]
 801b2a6:	f04f 30ff 	mov.w	r0, #4294967295
 801b2aa:	e03e      	b.n	801b32a <__swsetup_r+0xba>
 801b2ac:	4b25      	ldr	r3, [pc, #148]	; (801b344 <__swsetup_r+0xd4>)
 801b2ae:	429c      	cmp	r4, r3
 801b2b0:	d101      	bne.n	801b2b6 <__swsetup_r+0x46>
 801b2b2:	68ac      	ldr	r4, [r5, #8]
 801b2b4:	e7eb      	b.n	801b28e <__swsetup_r+0x1e>
 801b2b6:	4b24      	ldr	r3, [pc, #144]	; (801b348 <__swsetup_r+0xd8>)
 801b2b8:	429c      	cmp	r4, r3
 801b2ba:	bf08      	it	eq
 801b2bc:	68ec      	ldreq	r4, [r5, #12]
 801b2be:	e7e6      	b.n	801b28e <__swsetup_r+0x1e>
 801b2c0:	0758      	lsls	r0, r3, #29
 801b2c2:	d512      	bpl.n	801b2ea <__swsetup_r+0x7a>
 801b2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b2c6:	b141      	cbz	r1, 801b2da <__swsetup_r+0x6a>
 801b2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b2cc:	4299      	cmp	r1, r3
 801b2ce:	d002      	beq.n	801b2d6 <__swsetup_r+0x66>
 801b2d0:	4630      	mov	r0, r6
 801b2d2:	f7ff fcf9 	bl	801acc8 <_free_r>
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	6363      	str	r3, [r4, #52]	; 0x34
 801b2da:	89a3      	ldrh	r3, [r4, #12]
 801b2dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b2e0:	81a3      	strh	r3, [r4, #12]
 801b2e2:	2300      	movs	r3, #0
 801b2e4:	6063      	str	r3, [r4, #4]
 801b2e6:	6923      	ldr	r3, [r4, #16]
 801b2e8:	6023      	str	r3, [r4, #0]
 801b2ea:	89a3      	ldrh	r3, [r4, #12]
 801b2ec:	f043 0308 	orr.w	r3, r3, #8
 801b2f0:	81a3      	strh	r3, [r4, #12]
 801b2f2:	6923      	ldr	r3, [r4, #16]
 801b2f4:	b94b      	cbnz	r3, 801b30a <__swsetup_r+0x9a>
 801b2f6:	89a3      	ldrh	r3, [r4, #12]
 801b2f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b2fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b300:	d003      	beq.n	801b30a <__swsetup_r+0x9a>
 801b302:	4621      	mov	r1, r4
 801b304:	4630      	mov	r0, r6
 801b306:	f000 f92b 	bl	801b560 <__smakebuf_r>
 801b30a:	89a0      	ldrh	r0, [r4, #12]
 801b30c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b310:	f010 0301 	ands.w	r3, r0, #1
 801b314:	d00a      	beq.n	801b32c <__swsetup_r+0xbc>
 801b316:	2300      	movs	r3, #0
 801b318:	60a3      	str	r3, [r4, #8]
 801b31a:	6963      	ldr	r3, [r4, #20]
 801b31c:	425b      	negs	r3, r3
 801b31e:	61a3      	str	r3, [r4, #24]
 801b320:	6923      	ldr	r3, [r4, #16]
 801b322:	b943      	cbnz	r3, 801b336 <__swsetup_r+0xc6>
 801b324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b328:	d1ba      	bne.n	801b2a0 <__swsetup_r+0x30>
 801b32a:	bd70      	pop	{r4, r5, r6, pc}
 801b32c:	0781      	lsls	r1, r0, #30
 801b32e:	bf58      	it	pl
 801b330:	6963      	ldrpl	r3, [r4, #20]
 801b332:	60a3      	str	r3, [r4, #8]
 801b334:	e7f4      	b.n	801b320 <__swsetup_r+0xb0>
 801b336:	2000      	movs	r0, #0
 801b338:	e7f7      	b.n	801b32a <__swsetup_r+0xba>
 801b33a:	bf00      	nop
 801b33c:	20000044 	.word	0x20000044
 801b340:	0801c7b0 	.word	0x0801c7b0
 801b344:	0801c7d0 	.word	0x0801c7d0
 801b348:	0801c790 	.word	0x0801c790

0801b34c <_close_r>:
 801b34c:	b538      	push	{r3, r4, r5, lr}
 801b34e:	4d06      	ldr	r5, [pc, #24]	; (801b368 <_close_r+0x1c>)
 801b350:	2300      	movs	r3, #0
 801b352:	4604      	mov	r4, r0
 801b354:	4608      	mov	r0, r1
 801b356:	602b      	str	r3, [r5, #0]
 801b358:	f7f3 fa5a 	bl	800e810 <_close>
 801b35c:	1c43      	adds	r3, r0, #1
 801b35e:	d102      	bne.n	801b366 <_close_r+0x1a>
 801b360:	682b      	ldr	r3, [r5, #0]
 801b362:	b103      	cbz	r3, 801b366 <_close_r+0x1a>
 801b364:	6023      	str	r3, [r4, #0]
 801b366:	bd38      	pop	{r3, r4, r5, pc}
 801b368:	200090a0 	.word	0x200090a0

0801b36c <__sflush_r>:
 801b36c:	898a      	ldrh	r2, [r1, #12]
 801b36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b372:	4605      	mov	r5, r0
 801b374:	0710      	lsls	r0, r2, #28
 801b376:	460c      	mov	r4, r1
 801b378:	d458      	bmi.n	801b42c <__sflush_r+0xc0>
 801b37a:	684b      	ldr	r3, [r1, #4]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	dc05      	bgt.n	801b38c <__sflush_r+0x20>
 801b380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b382:	2b00      	cmp	r3, #0
 801b384:	dc02      	bgt.n	801b38c <__sflush_r+0x20>
 801b386:	2000      	movs	r0, #0
 801b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b38e:	2e00      	cmp	r6, #0
 801b390:	d0f9      	beq.n	801b386 <__sflush_r+0x1a>
 801b392:	2300      	movs	r3, #0
 801b394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b398:	682f      	ldr	r7, [r5, #0]
 801b39a:	602b      	str	r3, [r5, #0]
 801b39c:	d032      	beq.n	801b404 <__sflush_r+0x98>
 801b39e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b3a0:	89a3      	ldrh	r3, [r4, #12]
 801b3a2:	075a      	lsls	r2, r3, #29
 801b3a4:	d505      	bpl.n	801b3b2 <__sflush_r+0x46>
 801b3a6:	6863      	ldr	r3, [r4, #4]
 801b3a8:	1ac0      	subs	r0, r0, r3
 801b3aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b3ac:	b10b      	cbz	r3, 801b3b2 <__sflush_r+0x46>
 801b3ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b3b0:	1ac0      	subs	r0, r0, r3
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	4602      	mov	r2, r0
 801b3b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b3b8:	6a21      	ldr	r1, [r4, #32]
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	47b0      	blx	r6
 801b3be:	1c43      	adds	r3, r0, #1
 801b3c0:	89a3      	ldrh	r3, [r4, #12]
 801b3c2:	d106      	bne.n	801b3d2 <__sflush_r+0x66>
 801b3c4:	6829      	ldr	r1, [r5, #0]
 801b3c6:	291d      	cmp	r1, #29
 801b3c8:	d82c      	bhi.n	801b424 <__sflush_r+0xb8>
 801b3ca:	4a2a      	ldr	r2, [pc, #168]	; (801b474 <__sflush_r+0x108>)
 801b3cc:	40ca      	lsrs	r2, r1
 801b3ce:	07d6      	lsls	r6, r2, #31
 801b3d0:	d528      	bpl.n	801b424 <__sflush_r+0xb8>
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	6062      	str	r2, [r4, #4]
 801b3d6:	04d9      	lsls	r1, r3, #19
 801b3d8:	6922      	ldr	r2, [r4, #16]
 801b3da:	6022      	str	r2, [r4, #0]
 801b3dc:	d504      	bpl.n	801b3e8 <__sflush_r+0x7c>
 801b3de:	1c42      	adds	r2, r0, #1
 801b3e0:	d101      	bne.n	801b3e6 <__sflush_r+0x7a>
 801b3e2:	682b      	ldr	r3, [r5, #0]
 801b3e4:	b903      	cbnz	r3, 801b3e8 <__sflush_r+0x7c>
 801b3e6:	6560      	str	r0, [r4, #84]	; 0x54
 801b3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3ea:	602f      	str	r7, [r5, #0]
 801b3ec:	2900      	cmp	r1, #0
 801b3ee:	d0ca      	beq.n	801b386 <__sflush_r+0x1a>
 801b3f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3f4:	4299      	cmp	r1, r3
 801b3f6:	d002      	beq.n	801b3fe <__sflush_r+0x92>
 801b3f8:	4628      	mov	r0, r5
 801b3fa:	f7ff fc65 	bl	801acc8 <_free_r>
 801b3fe:	2000      	movs	r0, #0
 801b400:	6360      	str	r0, [r4, #52]	; 0x34
 801b402:	e7c1      	b.n	801b388 <__sflush_r+0x1c>
 801b404:	6a21      	ldr	r1, [r4, #32]
 801b406:	2301      	movs	r3, #1
 801b408:	4628      	mov	r0, r5
 801b40a:	47b0      	blx	r6
 801b40c:	1c41      	adds	r1, r0, #1
 801b40e:	d1c7      	bne.n	801b3a0 <__sflush_r+0x34>
 801b410:	682b      	ldr	r3, [r5, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d0c4      	beq.n	801b3a0 <__sflush_r+0x34>
 801b416:	2b1d      	cmp	r3, #29
 801b418:	d001      	beq.n	801b41e <__sflush_r+0xb2>
 801b41a:	2b16      	cmp	r3, #22
 801b41c:	d101      	bne.n	801b422 <__sflush_r+0xb6>
 801b41e:	602f      	str	r7, [r5, #0]
 801b420:	e7b1      	b.n	801b386 <__sflush_r+0x1a>
 801b422:	89a3      	ldrh	r3, [r4, #12]
 801b424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b428:	81a3      	strh	r3, [r4, #12]
 801b42a:	e7ad      	b.n	801b388 <__sflush_r+0x1c>
 801b42c:	690f      	ldr	r7, [r1, #16]
 801b42e:	2f00      	cmp	r7, #0
 801b430:	d0a9      	beq.n	801b386 <__sflush_r+0x1a>
 801b432:	0793      	lsls	r3, r2, #30
 801b434:	680e      	ldr	r6, [r1, #0]
 801b436:	bf08      	it	eq
 801b438:	694b      	ldreq	r3, [r1, #20]
 801b43a:	600f      	str	r7, [r1, #0]
 801b43c:	bf18      	it	ne
 801b43e:	2300      	movne	r3, #0
 801b440:	eba6 0807 	sub.w	r8, r6, r7
 801b444:	608b      	str	r3, [r1, #8]
 801b446:	f1b8 0f00 	cmp.w	r8, #0
 801b44a:	dd9c      	ble.n	801b386 <__sflush_r+0x1a>
 801b44c:	6a21      	ldr	r1, [r4, #32]
 801b44e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b450:	4643      	mov	r3, r8
 801b452:	463a      	mov	r2, r7
 801b454:	4628      	mov	r0, r5
 801b456:	47b0      	blx	r6
 801b458:	2800      	cmp	r0, #0
 801b45a:	dc06      	bgt.n	801b46a <__sflush_r+0xfe>
 801b45c:	89a3      	ldrh	r3, [r4, #12]
 801b45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b462:	81a3      	strh	r3, [r4, #12]
 801b464:	f04f 30ff 	mov.w	r0, #4294967295
 801b468:	e78e      	b.n	801b388 <__sflush_r+0x1c>
 801b46a:	4407      	add	r7, r0
 801b46c:	eba8 0800 	sub.w	r8, r8, r0
 801b470:	e7e9      	b.n	801b446 <__sflush_r+0xda>
 801b472:	bf00      	nop
 801b474:	20400001 	.word	0x20400001

0801b478 <_fflush_r>:
 801b478:	b538      	push	{r3, r4, r5, lr}
 801b47a:	690b      	ldr	r3, [r1, #16]
 801b47c:	4605      	mov	r5, r0
 801b47e:	460c      	mov	r4, r1
 801b480:	b913      	cbnz	r3, 801b488 <_fflush_r+0x10>
 801b482:	2500      	movs	r5, #0
 801b484:	4628      	mov	r0, r5
 801b486:	bd38      	pop	{r3, r4, r5, pc}
 801b488:	b118      	cbz	r0, 801b492 <_fflush_r+0x1a>
 801b48a:	6983      	ldr	r3, [r0, #24]
 801b48c:	b90b      	cbnz	r3, 801b492 <_fflush_r+0x1a>
 801b48e:	f7ff fb2f 	bl	801aaf0 <__sinit>
 801b492:	4b14      	ldr	r3, [pc, #80]	; (801b4e4 <_fflush_r+0x6c>)
 801b494:	429c      	cmp	r4, r3
 801b496:	d11b      	bne.n	801b4d0 <_fflush_r+0x58>
 801b498:	686c      	ldr	r4, [r5, #4]
 801b49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d0ef      	beq.n	801b482 <_fflush_r+0xa>
 801b4a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b4a4:	07d0      	lsls	r0, r2, #31
 801b4a6:	d404      	bmi.n	801b4b2 <_fflush_r+0x3a>
 801b4a8:	0599      	lsls	r1, r3, #22
 801b4aa:	d402      	bmi.n	801b4b2 <_fflush_r+0x3a>
 801b4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4ae:	f7ff fbe2 	bl	801ac76 <__retarget_lock_acquire_recursive>
 801b4b2:	4628      	mov	r0, r5
 801b4b4:	4621      	mov	r1, r4
 801b4b6:	f7ff ff59 	bl	801b36c <__sflush_r>
 801b4ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b4bc:	07da      	lsls	r2, r3, #31
 801b4be:	4605      	mov	r5, r0
 801b4c0:	d4e0      	bmi.n	801b484 <_fflush_r+0xc>
 801b4c2:	89a3      	ldrh	r3, [r4, #12]
 801b4c4:	059b      	lsls	r3, r3, #22
 801b4c6:	d4dd      	bmi.n	801b484 <_fflush_r+0xc>
 801b4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4ca:	f7ff fbd5 	bl	801ac78 <__retarget_lock_release_recursive>
 801b4ce:	e7d9      	b.n	801b484 <_fflush_r+0xc>
 801b4d0:	4b05      	ldr	r3, [pc, #20]	; (801b4e8 <_fflush_r+0x70>)
 801b4d2:	429c      	cmp	r4, r3
 801b4d4:	d101      	bne.n	801b4da <_fflush_r+0x62>
 801b4d6:	68ac      	ldr	r4, [r5, #8]
 801b4d8:	e7df      	b.n	801b49a <_fflush_r+0x22>
 801b4da:	4b04      	ldr	r3, [pc, #16]	; (801b4ec <_fflush_r+0x74>)
 801b4dc:	429c      	cmp	r4, r3
 801b4de:	bf08      	it	eq
 801b4e0:	68ec      	ldreq	r4, [r5, #12]
 801b4e2:	e7da      	b.n	801b49a <_fflush_r+0x22>
 801b4e4:	0801c7b0 	.word	0x0801c7b0
 801b4e8:	0801c7d0 	.word	0x0801c7d0
 801b4ec:	0801c790 	.word	0x0801c790

0801b4f0 <_lseek_r>:
 801b4f0:	b538      	push	{r3, r4, r5, lr}
 801b4f2:	4d07      	ldr	r5, [pc, #28]	; (801b510 <_lseek_r+0x20>)
 801b4f4:	4604      	mov	r4, r0
 801b4f6:	4608      	mov	r0, r1
 801b4f8:	4611      	mov	r1, r2
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	602a      	str	r2, [r5, #0]
 801b4fe:	461a      	mov	r2, r3
 801b500:	f7f3 f9ad 	bl	800e85e <_lseek>
 801b504:	1c43      	adds	r3, r0, #1
 801b506:	d102      	bne.n	801b50e <_lseek_r+0x1e>
 801b508:	682b      	ldr	r3, [r5, #0]
 801b50a:	b103      	cbz	r3, 801b50e <_lseek_r+0x1e>
 801b50c:	6023      	str	r3, [r4, #0]
 801b50e:	bd38      	pop	{r3, r4, r5, pc}
 801b510:	200090a0 	.word	0x200090a0

0801b514 <__swhatbuf_r>:
 801b514:	b570      	push	{r4, r5, r6, lr}
 801b516:	460e      	mov	r6, r1
 801b518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b51c:	2900      	cmp	r1, #0
 801b51e:	b096      	sub	sp, #88	; 0x58
 801b520:	4614      	mov	r4, r2
 801b522:	461d      	mov	r5, r3
 801b524:	da08      	bge.n	801b538 <__swhatbuf_r+0x24>
 801b526:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b52a:	2200      	movs	r2, #0
 801b52c:	602a      	str	r2, [r5, #0]
 801b52e:	061a      	lsls	r2, r3, #24
 801b530:	d410      	bmi.n	801b554 <__swhatbuf_r+0x40>
 801b532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b536:	e00e      	b.n	801b556 <__swhatbuf_r+0x42>
 801b538:	466a      	mov	r2, sp
 801b53a:	f000 fb5d 	bl	801bbf8 <_fstat_r>
 801b53e:	2800      	cmp	r0, #0
 801b540:	dbf1      	blt.n	801b526 <__swhatbuf_r+0x12>
 801b542:	9a01      	ldr	r2, [sp, #4]
 801b544:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b548:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b54c:	425a      	negs	r2, r3
 801b54e:	415a      	adcs	r2, r3
 801b550:	602a      	str	r2, [r5, #0]
 801b552:	e7ee      	b.n	801b532 <__swhatbuf_r+0x1e>
 801b554:	2340      	movs	r3, #64	; 0x40
 801b556:	2000      	movs	r0, #0
 801b558:	6023      	str	r3, [r4, #0]
 801b55a:	b016      	add	sp, #88	; 0x58
 801b55c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b560 <__smakebuf_r>:
 801b560:	898b      	ldrh	r3, [r1, #12]
 801b562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b564:	079d      	lsls	r5, r3, #30
 801b566:	4606      	mov	r6, r0
 801b568:	460c      	mov	r4, r1
 801b56a:	d507      	bpl.n	801b57c <__smakebuf_r+0x1c>
 801b56c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b570:	6023      	str	r3, [r4, #0]
 801b572:	6123      	str	r3, [r4, #16]
 801b574:	2301      	movs	r3, #1
 801b576:	6163      	str	r3, [r4, #20]
 801b578:	b002      	add	sp, #8
 801b57a:	bd70      	pop	{r4, r5, r6, pc}
 801b57c:	ab01      	add	r3, sp, #4
 801b57e:	466a      	mov	r2, sp
 801b580:	f7ff ffc8 	bl	801b514 <__swhatbuf_r>
 801b584:	9900      	ldr	r1, [sp, #0]
 801b586:	4605      	mov	r5, r0
 801b588:	4630      	mov	r0, r6
 801b58a:	f7ff fc09 	bl	801ada0 <_malloc_r>
 801b58e:	b948      	cbnz	r0, 801b5a4 <__smakebuf_r+0x44>
 801b590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b594:	059a      	lsls	r2, r3, #22
 801b596:	d4ef      	bmi.n	801b578 <__smakebuf_r+0x18>
 801b598:	f023 0303 	bic.w	r3, r3, #3
 801b59c:	f043 0302 	orr.w	r3, r3, #2
 801b5a0:	81a3      	strh	r3, [r4, #12]
 801b5a2:	e7e3      	b.n	801b56c <__smakebuf_r+0xc>
 801b5a4:	4b0d      	ldr	r3, [pc, #52]	; (801b5dc <__smakebuf_r+0x7c>)
 801b5a6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b5a8:	89a3      	ldrh	r3, [r4, #12]
 801b5aa:	6020      	str	r0, [r4, #0]
 801b5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5b0:	81a3      	strh	r3, [r4, #12]
 801b5b2:	9b00      	ldr	r3, [sp, #0]
 801b5b4:	6163      	str	r3, [r4, #20]
 801b5b6:	9b01      	ldr	r3, [sp, #4]
 801b5b8:	6120      	str	r0, [r4, #16]
 801b5ba:	b15b      	cbz	r3, 801b5d4 <__smakebuf_r+0x74>
 801b5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f000 fb2b 	bl	801bc1c <_isatty_r>
 801b5c6:	b128      	cbz	r0, 801b5d4 <__smakebuf_r+0x74>
 801b5c8:	89a3      	ldrh	r3, [r4, #12]
 801b5ca:	f023 0303 	bic.w	r3, r3, #3
 801b5ce:	f043 0301 	orr.w	r3, r3, #1
 801b5d2:	81a3      	strh	r3, [r4, #12]
 801b5d4:	89a0      	ldrh	r0, [r4, #12]
 801b5d6:	4305      	orrs	r5, r0
 801b5d8:	81a5      	strh	r5, [r4, #12]
 801b5da:	e7cd      	b.n	801b578 <__smakebuf_r+0x18>
 801b5dc:	0801aa89 	.word	0x0801aa89

0801b5e0 <__malloc_lock>:
 801b5e0:	4801      	ldr	r0, [pc, #4]	; (801b5e8 <__malloc_lock+0x8>)
 801b5e2:	f7ff bb48 	b.w	801ac76 <__retarget_lock_acquire_recursive>
 801b5e6:	bf00      	nop
 801b5e8:	20009094 	.word	0x20009094

0801b5ec <__malloc_unlock>:
 801b5ec:	4801      	ldr	r0, [pc, #4]	; (801b5f4 <__malloc_unlock+0x8>)
 801b5ee:	f7ff bb43 	b.w	801ac78 <__retarget_lock_release_recursive>
 801b5f2:	bf00      	nop
 801b5f4:	20009094 	.word	0x20009094

0801b5f8 <__sfputc_r>:
 801b5f8:	6893      	ldr	r3, [r2, #8]
 801b5fa:	3b01      	subs	r3, #1
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	b410      	push	{r4}
 801b600:	6093      	str	r3, [r2, #8]
 801b602:	da08      	bge.n	801b616 <__sfputc_r+0x1e>
 801b604:	6994      	ldr	r4, [r2, #24]
 801b606:	42a3      	cmp	r3, r4
 801b608:	db01      	blt.n	801b60e <__sfputc_r+0x16>
 801b60a:	290a      	cmp	r1, #10
 801b60c:	d103      	bne.n	801b616 <__sfputc_r+0x1e>
 801b60e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b612:	f7ff bdc9 	b.w	801b1a8 <__swbuf_r>
 801b616:	6813      	ldr	r3, [r2, #0]
 801b618:	1c58      	adds	r0, r3, #1
 801b61a:	6010      	str	r0, [r2, #0]
 801b61c:	7019      	strb	r1, [r3, #0]
 801b61e:	4608      	mov	r0, r1
 801b620:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b624:	4770      	bx	lr

0801b626 <__sfputs_r>:
 801b626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b628:	4606      	mov	r6, r0
 801b62a:	460f      	mov	r7, r1
 801b62c:	4614      	mov	r4, r2
 801b62e:	18d5      	adds	r5, r2, r3
 801b630:	42ac      	cmp	r4, r5
 801b632:	d101      	bne.n	801b638 <__sfputs_r+0x12>
 801b634:	2000      	movs	r0, #0
 801b636:	e007      	b.n	801b648 <__sfputs_r+0x22>
 801b638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b63c:	463a      	mov	r2, r7
 801b63e:	4630      	mov	r0, r6
 801b640:	f7ff ffda 	bl	801b5f8 <__sfputc_r>
 801b644:	1c43      	adds	r3, r0, #1
 801b646:	d1f3      	bne.n	801b630 <__sfputs_r+0xa>
 801b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b64c <_vfiprintf_r>:
 801b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b650:	460d      	mov	r5, r1
 801b652:	b09d      	sub	sp, #116	; 0x74
 801b654:	4614      	mov	r4, r2
 801b656:	4698      	mov	r8, r3
 801b658:	4606      	mov	r6, r0
 801b65a:	b118      	cbz	r0, 801b664 <_vfiprintf_r+0x18>
 801b65c:	6983      	ldr	r3, [r0, #24]
 801b65e:	b90b      	cbnz	r3, 801b664 <_vfiprintf_r+0x18>
 801b660:	f7ff fa46 	bl	801aaf0 <__sinit>
 801b664:	4b89      	ldr	r3, [pc, #548]	; (801b88c <_vfiprintf_r+0x240>)
 801b666:	429d      	cmp	r5, r3
 801b668:	d11b      	bne.n	801b6a2 <_vfiprintf_r+0x56>
 801b66a:	6875      	ldr	r5, [r6, #4]
 801b66c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b66e:	07d9      	lsls	r1, r3, #31
 801b670:	d405      	bmi.n	801b67e <_vfiprintf_r+0x32>
 801b672:	89ab      	ldrh	r3, [r5, #12]
 801b674:	059a      	lsls	r2, r3, #22
 801b676:	d402      	bmi.n	801b67e <_vfiprintf_r+0x32>
 801b678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b67a:	f7ff fafc 	bl	801ac76 <__retarget_lock_acquire_recursive>
 801b67e:	89ab      	ldrh	r3, [r5, #12]
 801b680:	071b      	lsls	r3, r3, #28
 801b682:	d501      	bpl.n	801b688 <_vfiprintf_r+0x3c>
 801b684:	692b      	ldr	r3, [r5, #16]
 801b686:	b9eb      	cbnz	r3, 801b6c4 <_vfiprintf_r+0x78>
 801b688:	4629      	mov	r1, r5
 801b68a:	4630      	mov	r0, r6
 801b68c:	f7ff fdf0 	bl	801b270 <__swsetup_r>
 801b690:	b1c0      	cbz	r0, 801b6c4 <_vfiprintf_r+0x78>
 801b692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b694:	07dc      	lsls	r4, r3, #31
 801b696:	d50e      	bpl.n	801b6b6 <_vfiprintf_r+0x6a>
 801b698:	f04f 30ff 	mov.w	r0, #4294967295
 801b69c:	b01d      	add	sp, #116	; 0x74
 801b69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6a2:	4b7b      	ldr	r3, [pc, #492]	; (801b890 <_vfiprintf_r+0x244>)
 801b6a4:	429d      	cmp	r5, r3
 801b6a6:	d101      	bne.n	801b6ac <_vfiprintf_r+0x60>
 801b6a8:	68b5      	ldr	r5, [r6, #8]
 801b6aa:	e7df      	b.n	801b66c <_vfiprintf_r+0x20>
 801b6ac:	4b79      	ldr	r3, [pc, #484]	; (801b894 <_vfiprintf_r+0x248>)
 801b6ae:	429d      	cmp	r5, r3
 801b6b0:	bf08      	it	eq
 801b6b2:	68f5      	ldreq	r5, [r6, #12]
 801b6b4:	e7da      	b.n	801b66c <_vfiprintf_r+0x20>
 801b6b6:	89ab      	ldrh	r3, [r5, #12]
 801b6b8:	0598      	lsls	r0, r3, #22
 801b6ba:	d4ed      	bmi.n	801b698 <_vfiprintf_r+0x4c>
 801b6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6be:	f7ff fadb 	bl	801ac78 <__retarget_lock_release_recursive>
 801b6c2:	e7e9      	b.n	801b698 <_vfiprintf_r+0x4c>
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6c8:	2320      	movs	r3, #32
 801b6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801b6d2:	2330      	movs	r3, #48	; 0x30
 801b6d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b898 <_vfiprintf_r+0x24c>
 801b6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b6dc:	f04f 0901 	mov.w	r9, #1
 801b6e0:	4623      	mov	r3, r4
 801b6e2:	469a      	mov	sl, r3
 801b6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6e8:	b10a      	cbz	r2, 801b6ee <_vfiprintf_r+0xa2>
 801b6ea:	2a25      	cmp	r2, #37	; 0x25
 801b6ec:	d1f9      	bne.n	801b6e2 <_vfiprintf_r+0x96>
 801b6ee:	ebba 0b04 	subs.w	fp, sl, r4
 801b6f2:	d00b      	beq.n	801b70c <_vfiprintf_r+0xc0>
 801b6f4:	465b      	mov	r3, fp
 801b6f6:	4622      	mov	r2, r4
 801b6f8:	4629      	mov	r1, r5
 801b6fa:	4630      	mov	r0, r6
 801b6fc:	f7ff ff93 	bl	801b626 <__sfputs_r>
 801b700:	3001      	adds	r0, #1
 801b702:	f000 80aa 	beq.w	801b85a <_vfiprintf_r+0x20e>
 801b706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b708:	445a      	add	r2, fp
 801b70a:	9209      	str	r2, [sp, #36]	; 0x24
 801b70c:	f89a 3000 	ldrb.w	r3, [sl]
 801b710:	2b00      	cmp	r3, #0
 801b712:	f000 80a2 	beq.w	801b85a <_vfiprintf_r+0x20e>
 801b716:	2300      	movs	r3, #0
 801b718:	f04f 32ff 	mov.w	r2, #4294967295
 801b71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b720:	f10a 0a01 	add.w	sl, sl, #1
 801b724:	9304      	str	r3, [sp, #16]
 801b726:	9307      	str	r3, [sp, #28]
 801b728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b72c:	931a      	str	r3, [sp, #104]	; 0x68
 801b72e:	4654      	mov	r4, sl
 801b730:	2205      	movs	r2, #5
 801b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b736:	4858      	ldr	r0, [pc, #352]	; (801b898 <_vfiprintf_r+0x24c>)
 801b738:	f7e4 fd4a 	bl	80001d0 <memchr>
 801b73c:	9a04      	ldr	r2, [sp, #16]
 801b73e:	b9d8      	cbnz	r0, 801b778 <_vfiprintf_r+0x12c>
 801b740:	06d1      	lsls	r1, r2, #27
 801b742:	bf44      	itt	mi
 801b744:	2320      	movmi	r3, #32
 801b746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b74a:	0713      	lsls	r3, r2, #28
 801b74c:	bf44      	itt	mi
 801b74e:	232b      	movmi	r3, #43	; 0x2b
 801b750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b754:	f89a 3000 	ldrb.w	r3, [sl]
 801b758:	2b2a      	cmp	r3, #42	; 0x2a
 801b75a:	d015      	beq.n	801b788 <_vfiprintf_r+0x13c>
 801b75c:	9a07      	ldr	r2, [sp, #28]
 801b75e:	4654      	mov	r4, sl
 801b760:	2000      	movs	r0, #0
 801b762:	f04f 0c0a 	mov.w	ip, #10
 801b766:	4621      	mov	r1, r4
 801b768:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b76c:	3b30      	subs	r3, #48	; 0x30
 801b76e:	2b09      	cmp	r3, #9
 801b770:	d94e      	bls.n	801b810 <_vfiprintf_r+0x1c4>
 801b772:	b1b0      	cbz	r0, 801b7a2 <_vfiprintf_r+0x156>
 801b774:	9207      	str	r2, [sp, #28]
 801b776:	e014      	b.n	801b7a2 <_vfiprintf_r+0x156>
 801b778:	eba0 0308 	sub.w	r3, r0, r8
 801b77c:	fa09 f303 	lsl.w	r3, r9, r3
 801b780:	4313      	orrs	r3, r2
 801b782:	9304      	str	r3, [sp, #16]
 801b784:	46a2      	mov	sl, r4
 801b786:	e7d2      	b.n	801b72e <_vfiprintf_r+0xe2>
 801b788:	9b03      	ldr	r3, [sp, #12]
 801b78a:	1d19      	adds	r1, r3, #4
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	9103      	str	r1, [sp, #12]
 801b790:	2b00      	cmp	r3, #0
 801b792:	bfbb      	ittet	lt
 801b794:	425b      	neglt	r3, r3
 801b796:	f042 0202 	orrlt.w	r2, r2, #2
 801b79a:	9307      	strge	r3, [sp, #28]
 801b79c:	9307      	strlt	r3, [sp, #28]
 801b79e:	bfb8      	it	lt
 801b7a0:	9204      	strlt	r2, [sp, #16]
 801b7a2:	7823      	ldrb	r3, [r4, #0]
 801b7a4:	2b2e      	cmp	r3, #46	; 0x2e
 801b7a6:	d10c      	bne.n	801b7c2 <_vfiprintf_r+0x176>
 801b7a8:	7863      	ldrb	r3, [r4, #1]
 801b7aa:	2b2a      	cmp	r3, #42	; 0x2a
 801b7ac:	d135      	bne.n	801b81a <_vfiprintf_r+0x1ce>
 801b7ae:	9b03      	ldr	r3, [sp, #12]
 801b7b0:	1d1a      	adds	r2, r3, #4
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	9203      	str	r2, [sp, #12]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	bfb8      	it	lt
 801b7ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801b7be:	3402      	adds	r4, #2
 801b7c0:	9305      	str	r3, [sp, #20]
 801b7c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b8a8 <_vfiprintf_r+0x25c>
 801b7c6:	7821      	ldrb	r1, [r4, #0]
 801b7c8:	2203      	movs	r2, #3
 801b7ca:	4650      	mov	r0, sl
 801b7cc:	f7e4 fd00 	bl	80001d0 <memchr>
 801b7d0:	b140      	cbz	r0, 801b7e4 <_vfiprintf_r+0x198>
 801b7d2:	2340      	movs	r3, #64	; 0x40
 801b7d4:	eba0 000a 	sub.w	r0, r0, sl
 801b7d8:	fa03 f000 	lsl.w	r0, r3, r0
 801b7dc:	9b04      	ldr	r3, [sp, #16]
 801b7de:	4303      	orrs	r3, r0
 801b7e0:	3401      	adds	r4, #1
 801b7e2:	9304      	str	r3, [sp, #16]
 801b7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7e8:	482c      	ldr	r0, [pc, #176]	; (801b89c <_vfiprintf_r+0x250>)
 801b7ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b7ee:	2206      	movs	r2, #6
 801b7f0:	f7e4 fcee 	bl	80001d0 <memchr>
 801b7f4:	2800      	cmp	r0, #0
 801b7f6:	d03f      	beq.n	801b878 <_vfiprintf_r+0x22c>
 801b7f8:	4b29      	ldr	r3, [pc, #164]	; (801b8a0 <_vfiprintf_r+0x254>)
 801b7fa:	bb1b      	cbnz	r3, 801b844 <_vfiprintf_r+0x1f8>
 801b7fc:	9b03      	ldr	r3, [sp, #12]
 801b7fe:	3307      	adds	r3, #7
 801b800:	f023 0307 	bic.w	r3, r3, #7
 801b804:	3308      	adds	r3, #8
 801b806:	9303      	str	r3, [sp, #12]
 801b808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b80a:	443b      	add	r3, r7
 801b80c:	9309      	str	r3, [sp, #36]	; 0x24
 801b80e:	e767      	b.n	801b6e0 <_vfiprintf_r+0x94>
 801b810:	fb0c 3202 	mla	r2, ip, r2, r3
 801b814:	460c      	mov	r4, r1
 801b816:	2001      	movs	r0, #1
 801b818:	e7a5      	b.n	801b766 <_vfiprintf_r+0x11a>
 801b81a:	2300      	movs	r3, #0
 801b81c:	3401      	adds	r4, #1
 801b81e:	9305      	str	r3, [sp, #20]
 801b820:	4619      	mov	r1, r3
 801b822:	f04f 0c0a 	mov.w	ip, #10
 801b826:	4620      	mov	r0, r4
 801b828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b82c:	3a30      	subs	r2, #48	; 0x30
 801b82e:	2a09      	cmp	r2, #9
 801b830:	d903      	bls.n	801b83a <_vfiprintf_r+0x1ee>
 801b832:	2b00      	cmp	r3, #0
 801b834:	d0c5      	beq.n	801b7c2 <_vfiprintf_r+0x176>
 801b836:	9105      	str	r1, [sp, #20]
 801b838:	e7c3      	b.n	801b7c2 <_vfiprintf_r+0x176>
 801b83a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b83e:	4604      	mov	r4, r0
 801b840:	2301      	movs	r3, #1
 801b842:	e7f0      	b.n	801b826 <_vfiprintf_r+0x1da>
 801b844:	ab03      	add	r3, sp, #12
 801b846:	9300      	str	r3, [sp, #0]
 801b848:	462a      	mov	r2, r5
 801b84a:	4b16      	ldr	r3, [pc, #88]	; (801b8a4 <_vfiprintf_r+0x258>)
 801b84c:	a904      	add	r1, sp, #16
 801b84e:	4630      	mov	r0, r6
 801b850:	f3af 8000 	nop.w
 801b854:	4607      	mov	r7, r0
 801b856:	1c78      	adds	r0, r7, #1
 801b858:	d1d6      	bne.n	801b808 <_vfiprintf_r+0x1bc>
 801b85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b85c:	07d9      	lsls	r1, r3, #31
 801b85e:	d405      	bmi.n	801b86c <_vfiprintf_r+0x220>
 801b860:	89ab      	ldrh	r3, [r5, #12]
 801b862:	059a      	lsls	r2, r3, #22
 801b864:	d402      	bmi.n	801b86c <_vfiprintf_r+0x220>
 801b866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b868:	f7ff fa06 	bl	801ac78 <__retarget_lock_release_recursive>
 801b86c:	89ab      	ldrh	r3, [r5, #12]
 801b86e:	065b      	lsls	r3, r3, #25
 801b870:	f53f af12 	bmi.w	801b698 <_vfiprintf_r+0x4c>
 801b874:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b876:	e711      	b.n	801b69c <_vfiprintf_r+0x50>
 801b878:	ab03      	add	r3, sp, #12
 801b87a:	9300      	str	r3, [sp, #0]
 801b87c:	462a      	mov	r2, r5
 801b87e:	4b09      	ldr	r3, [pc, #36]	; (801b8a4 <_vfiprintf_r+0x258>)
 801b880:	a904      	add	r1, sp, #16
 801b882:	4630      	mov	r0, r6
 801b884:	f000 f880 	bl	801b988 <_printf_i>
 801b888:	e7e4      	b.n	801b854 <_vfiprintf_r+0x208>
 801b88a:	bf00      	nop
 801b88c:	0801c7b0 	.word	0x0801c7b0
 801b890:	0801c7d0 	.word	0x0801c7d0
 801b894:	0801c790 	.word	0x0801c790
 801b898:	0801c7f4 	.word	0x0801c7f4
 801b89c:	0801c7fe 	.word	0x0801c7fe
 801b8a0:	00000000 	.word	0x00000000
 801b8a4:	0801b627 	.word	0x0801b627
 801b8a8:	0801c7fa 	.word	0x0801c7fa

0801b8ac <_printf_common>:
 801b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8b0:	4616      	mov	r6, r2
 801b8b2:	4699      	mov	r9, r3
 801b8b4:	688a      	ldr	r2, [r1, #8]
 801b8b6:	690b      	ldr	r3, [r1, #16]
 801b8b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b8bc:	4293      	cmp	r3, r2
 801b8be:	bfb8      	it	lt
 801b8c0:	4613      	movlt	r3, r2
 801b8c2:	6033      	str	r3, [r6, #0]
 801b8c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b8c8:	4607      	mov	r7, r0
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	b10a      	cbz	r2, 801b8d2 <_printf_common+0x26>
 801b8ce:	3301      	adds	r3, #1
 801b8d0:	6033      	str	r3, [r6, #0]
 801b8d2:	6823      	ldr	r3, [r4, #0]
 801b8d4:	0699      	lsls	r1, r3, #26
 801b8d6:	bf42      	ittt	mi
 801b8d8:	6833      	ldrmi	r3, [r6, #0]
 801b8da:	3302      	addmi	r3, #2
 801b8dc:	6033      	strmi	r3, [r6, #0]
 801b8de:	6825      	ldr	r5, [r4, #0]
 801b8e0:	f015 0506 	ands.w	r5, r5, #6
 801b8e4:	d106      	bne.n	801b8f4 <_printf_common+0x48>
 801b8e6:	f104 0a19 	add.w	sl, r4, #25
 801b8ea:	68e3      	ldr	r3, [r4, #12]
 801b8ec:	6832      	ldr	r2, [r6, #0]
 801b8ee:	1a9b      	subs	r3, r3, r2
 801b8f0:	42ab      	cmp	r3, r5
 801b8f2:	dc26      	bgt.n	801b942 <_printf_common+0x96>
 801b8f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b8f8:	1e13      	subs	r3, r2, #0
 801b8fa:	6822      	ldr	r2, [r4, #0]
 801b8fc:	bf18      	it	ne
 801b8fe:	2301      	movne	r3, #1
 801b900:	0692      	lsls	r2, r2, #26
 801b902:	d42b      	bmi.n	801b95c <_printf_common+0xb0>
 801b904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b908:	4649      	mov	r1, r9
 801b90a:	4638      	mov	r0, r7
 801b90c:	47c0      	blx	r8
 801b90e:	3001      	adds	r0, #1
 801b910:	d01e      	beq.n	801b950 <_printf_common+0xa4>
 801b912:	6823      	ldr	r3, [r4, #0]
 801b914:	68e5      	ldr	r5, [r4, #12]
 801b916:	6832      	ldr	r2, [r6, #0]
 801b918:	f003 0306 	and.w	r3, r3, #6
 801b91c:	2b04      	cmp	r3, #4
 801b91e:	bf08      	it	eq
 801b920:	1aad      	subeq	r5, r5, r2
 801b922:	68a3      	ldr	r3, [r4, #8]
 801b924:	6922      	ldr	r2, [r4, #16]
 801b926:	bf0c      	ite	eq
 801b928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b92c:	2500      	movne	r5, #0
 801b92e:	4293      	cmp	r3, r2
 801b930:	bfc4      	itt	gt
 801b932:	1a9b      	subgt	r3, r3, r2
 801b934:	18ed      	addgt	r5, r5, r3
 801b936:	2600      	movs	r6, #0
 801b938:	341a      	adds	r4, #26
 801b93a:	42b5      	cmp	r5, r6
 801b93c:	d11a      	bne.n	801b974 <_printf_common+0xc8>
 801b93e:	2000      	movs	r0, #0
 801b940:	e008      	b.n	801b954 <_printf_common+0xa8>
 801b942:	2301      	movs	r3, #1
 801b944:	4652      	mov	r2, sl
 801b946:	4649      	mov	r1, r9
 801b948:	4638      	mov	r0, r7
 801b94a:	47c0      	blx	r8
 801b94c:	3001      	adds	r0, #1
 801b94e:	d103      	bne.n	801b958 <_printf_common+0xac>
 801b950:	f04f 30ff 	mov.w	r0, #4294967295
 801b954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b958:	3501      	adds	r5, #1
 801b95a:	e7c6      	b.n	801b8ea <_printf_common+0x3e>
 801b95c:	18e1      	adds	r1, r4, r3
 801b95e:	1c5a      	adds	r2, r3, #1
 801b960:	2030      	movs	r0, #48	; 0x30
 801b962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b966:	4422      	add	r2, r4
 801b968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b970:	3302      	adds	r3, #2
 801b972:	e7c7      	b.n	801b904 <_printf_common+0x58>
 801b974:	2301      	movs	r3, #1
 801b976:	4622      	mov	r2, r4
 801b978:	4649      	mov	r1, r9
 801b97a:	4638      	mov	r0, r7
 801b97c:	47c0      	blx	r8
 801b97e:	3001      	adds	r0, #1
 801b980:	d0e6      	beq.n	801b950 <_printf_common+0xa4>
 801b982:	3601      	adds	r6, #1
 801b984:	e7d9      	b.n	801b93a <_printf_common+0x8e>
	...

0801b988 <_printf_i>:
 801b988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b98c:	7e0f      	ldrb	r7, [r1, #24]
 801b98e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b990:	2f78      	cmp	r7, #120	; 0x78
 801b992:	4691      	mov	r9, r2
 801b994:	4680      	mov	r8, r0
 801b996:	460c      	mov	r4, r1
 801b998:	469a      	mov	sl, r3
 801b99a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b99e:	d807      	bhi.n	801b9b0 <_printf_i+0x28>
 801b9a0:	2f62      	cmp	r7, #98	; 0x62
 801b9a2:	d80a      	bhi.n	801b9ba <_printf_i+0x32>
 801b9a4:	2f00      	cmp	r7, #0
 801b9a6:	f000 80d8 	beq.w	801bb5a <_printf_i+0x1d2>
 801b9aa:	2f58      	cmp	r7, #88	; 0x58
 801b9ac:	f000 80a3 	beq.w	801baf6 <_printf_i+0x16e>
 801b9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b9b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b9b8:	e03a      	b.n	801ba30 <_printf_i+0xa8>
 801b9ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b9be:	2b15      	cmp	r3, #21
 801b9c0:	d8f6      	bhi.n	801b9b0 <_printf_i+0x28>
 801b9c2:	a101      	add	r1, pc, #4	; (adr r1, 801b9c8 <_printf_i+0x40>)
 801b9c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b9c8:	0801ba21 	.word	0x0801ba21
 801b9cc:	0801ba35 	.word	0x0801ba35
 801b9d0:	0801b9b1 	.word	0x0801b9b1
 801b9d4:	0801b9b1 	.word	0x0801b9b1
 801b9d8:	0801b9b1 	.word	0x0801b9b1
 801b9dc:	0801b9b1 	.word	0x0801b9b1
 801b9e0:	0801ba35 	.word	0x0801ba35
 801b9e4:	0801b9b1 	.word	0x0801b9b1
 801b9e8:	0801b9b1 	.word	0x0801b9b1
 801b9ec:	0801b9b1 	.word	0x0801b9b1
 801b9f0:	0801b9b1 	.word	0x0801b9b1
 801b9f4:	0801bb41 	.word	0x0801bb41
 801b9f8:	0801ba65 	.word	0x0801ba65
 801b9fc:	0801bb23 	.word	0x0801bb23
 801ba00:	0801b9b1 	.word	0x0801b9b1
 801ba04:	0801b9b1 	.word	0x0801b9b1
 801ba08:	0801bb63 	.word	0x0801bb63
 801ba0c:	0801b9b1 	.word	0x0801b9b1
 801ba10:	0801ba65 	.word	0x0801ba65
 801ba14:	0801b9b1 	.word	0x0801b9b1
 801ba18:	0801b9b1 	.word	0x0801b9b1
 801ba1c:	0801bb2b 	.word	0x0801bb2b
 801ba20:	682b      	ldr	r3, [r5, #0]
 801ba22:	1d1a      	adds	r2, r3, #4
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	602a      	str	r2, [r5, #0]
 801ba28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ba30:	2301      	movs	r3, #1
 801ba32:	e0a3      	b.n	801bb7c <_printf_i+0x1f4>
 801ba34:	6820      	ldr	r0, [r4, #0]
 801ba36:	6829      	ldr	r1, [r5, #0]
 801ba38:	0606      	lsls	r6, r0, #24
 801ba3a:	f101 0304 	add.w	r3, r1, #4
 801ba3e:	d50a      	bpl.n	801ba56 <_printf_i+0xce>
 801ba40:	680e      	ldr	r6, [r1, #0]
 801ba42:	602b      	str	r3, [r5, #0]
 801ba44:	2e00      	cmp	r6, #0
 801ba46:	da03      	bge.n	801ba50 <_printf_i+0xc8>
 801ba48:	232d      	movs	r3, #45	; 0x2d
 801ba4a:	4276      	negs	r6, r6
 801ba4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba50:	485e      	ldr	r0, [pc, #376]	; (801bbcc <_printf_i+0x244>)
 801ba52:	230a      	movs	r3, #10
 801ba54:	e019      	b.n	801ba8a <_printf_i+0x102>
 801ba56:	680e      	ldr	r6, [r1, #0]
 801ba58:	602b      	str	r3, [r5, #0]
 801ba5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ba5e:	bf18      	it	ne
 801ba60:	b236      	sxthne	r6, r6
 801ba62:	e7ef      	b.n	801ba44 <_printf_i+0xbc>
 801ba64:	682b      	ldr	r3, [r5, #0]
 801ba66:	6820      	ldr	r0, [r4, #0]
 801ba68:	1d19      	adds	r1, r3, #4
 801ba6a:	6029      	str	r1, [r5, #0]
 801ba6c:	0601      	lsls	r1, r0, #24
 801ba6e:	d501      	bpl.n	801ba74 <_printf_i+0xec>
 801ba70:	681e      	ldr	r6, [r3, #0]
 801ba72:	e002      	b.n	801ba7a <_printf_i+0xf2>
 801ba74:	0646      	lsls	r6, r0, #25
 801ba76:	d5fb      	bpl.n	801ba70 <_printf_i+0xe8>
 801ba78:	881e      	ldrh	r6, [r3, #0]
 801ba7a:	4854      	ldr	r0, [pc, #336]	; (801bbcc <_printf_i+0x244>)
 801ba7c:	2f6f      	cmp	r7, #111	; 0x6f
 801ba7e:	bf0c      	ite	eq
 801ba80:	2308      	moveq	r3, #8
 801ba82:	230a      	movne	r3, #10
 801ba84:	2100      	movs	r1, #0
 801ba86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ba8a:	6865      	ldr	r5, [r4, #4]
 801ba8c:	60a5      	str	r5, [r4, #8]
 801ba8e:	2d00      	cmp	r5, #0
 801ba90:	bfa2      	ittt	ge
 801ba92:	6821      	ldrge	r1, [r4, #0]
 801ba94:	f021 0104 	bicge.w	r1, r1, #4
 801ba98:	6021      	strge	r1, [r4, #0]
 801ba9a:	b90e      	cbnz	r6, 801baa0 <_printf_i+0x118>
 801ba9c:	2d00      	cmp	r5, #0
 801ba9e:	d04d      	beq.n	801bb3c <_printf_i+0x1b4>
 801baa0:	4615      	mov	r5, r2
 801baa2:	fbb6 f1f3 	udiv	r1, r6, r3
 801baa6:	fb03 6711 	mls	r7, r3, r1, r6
 801baaa:	5dc7      	ldrb	r7, [r0, r7]
 801baac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bab0:	4637      	mov	r7, r6
 801bab2:	42bb      	cmp	r3, r7
 801bab4:	460e      	mov	r6, r1
 801bab6:	d9f4      	bls.n	801baa2 <_printf_i+0x11a>
 801bab8:	2b08      	cmp	r3, #8
 801baba:	d10b      	bne.n	801bad4 <_printf_i+0x14c>
 801babc:	6823      	ldr	r3, [r4, #0]
 801babe:	07de      	lsls	r6, r3, #31
 801bac0:	d508      	bpl.n	801bad4 <_printf_i+0x14c>
 801bac2:	6923      	ldr	r3, [r4, #16]
 801bac4:	6861      	ldr	r1, [r4, #4]
 801bac6:	4299      	cmp	r1, r3
 801bac8:	bfde      	ittt	le
 801baca:	2330      	movle	r3, #48	; 0x30
 801bacc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bad0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bad4:	1b52      	subs	r2, r2, r5
 801bad6:	6122      	str	r2, [r4, #16]
 801bad8:	f8cd a000 	str.w	sl, [sp]
 801badc:	464b      	mov	r3, r9
 801bade:	aa03      	add	r2, sp, #12
 801bae0:	4621      	mov	r1, r4
 801bae2:	4640      	mov	r0, r8
 801bae4:	f7ff fee2 	bl	801b8ac <_printf_common>
 801bae8:	3001      	adds	r0, #1
 801baea:	d14c      	bne.n	801bb86 <_printf_i+0x1fe>
 801baec:	f04f 30ff 	mov.w	r0, #4294967295
 801baf0:	b004      	add	sp, #16
 801baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801baf6:	4835      	ldr	r0, [pc, #212]	; (801bbcc <_printf_i+0x244>)
 801baf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bafc:	6829      	ldr	r1, [r5, #0]
 801bafe:	6823      	ldr	r3, [r4, #0]
 801bb00:	f851 6b04 	ldr.w	r6, [r1], #4
 801bb04:	6029      	str	r1, [r5, #0]
 801bb06:	061d      	lsls	r5, r3, #24
 801bb08:	d514      	bpl.n	801bb34 <_printf_i+0x1ac>
 801bb0a:	07df      	lsls	r7, r3, #31
 801bb0c:	bf44      	itt	mi
 801bb0e:	f043 0320 	orrmi.w	r3, r3, #32
 801bb12:	6023      	strmi	r3, [r4, #0]
 801bb14:	b91e      	cbnz	r6, 801bb1e <_printf_i+0x196>
 801bb16:	6823      	ldr	r3, [r4, #0]
 801bb18:	f023 0320 	bic.w	r3, r3, #32
 801bb1c:	6023      	str	r3, [r4, #0]
 801bb1e:	2310      	movs	r3, #16
 801bb20:	e7b0      	b.n	801ba84 <_printf_i+0xfc>
 801bb22:	6823      	ldr	r3, [r4, #0]
 801bb24:	f043 0320 	orr.w	r3, r3, #32
 801bb28:	6023      	str	r3, [r4, #0]
 801bb2a:	2378      	movs	r3, #120	; 0x78
 801bb2c:	4828      	ldr	r0, [pc, #160]	; (801bbd0 <_printf_i+0x248>)
 801bb2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bb32:	e7e3      	b.n	801bafc <_printf_i+0x174>
 801bb34:	0659      	lsls	r1, r3, #25
 801bb36:	bf48      	it	mi
 801bb38:	b2b6      	uxthmi	r6, r6
 801bb3a:	e7e6      	b.n	801bb0a <_printf_i+0x182>
 801bb3c:	4615      	mov	r5, r2
 801bb3e:	e7bb      	b.n	801bab8 <_printf_i+0x130>
 801bb40:	682b      	ldr	r3, [r5, #0]
 801bb42:	6826      	ldr	r6, [r4, #0]
 801bb44:	6961      	ldr	r1, [r4, #20]
 801bb46:	1d18      	adds	r0, r3, #4
 801bb48:	6028      	str	r0, [r5, #0]
 801bb4a:	0635      	lsls	r5, r6, #24
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	d501      	bpl.n	801bb54 <_printf_i+0x1cc>
 801bb50:	6019      	str	r1, [r3, #0]
 801bb52:	e002      	b.n	801bb5a <_printf_i+0x1d2>
 801bb54:	0670      	lsls	r0, r6, #25
 801bb56:	d5fb      	bpl.n	801bb50 <_printf_i+0x1c8>
 801bb58:	8019      	strh	r1, [r3, #0]
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	6123      	str	r3, [r4, #16]
 801bb5e:	4615      	mov	r5, r2
 801bb60:	e7ba      	b.n	801bad8 <_printf_i+0x150>
 801bb62:	682b      	ldr	r3, [r5, #0]
 801bb64:	1d1a      	adds	r2, r3, #4
 801bb66:	602a      	str	r2, [r5, #0]
 801bb68:	681d      	ldr	r5, [r3, #0]
 801bb6a:	6862      	ldr	r2, [r4, #4]
 801bb6c:	2100      	movs	r1, #0
 801bb6e:	4628      	mov	r0, r5
 801bb70:	f7e4 fb2e 	bl	80001d0 <memchr>
 801bb74:	b108      	cbz	r0, 801bb7a <_printf_i+0x1f2>
 801bb76:	1b40      	subs	r0, r0, r5
 801bb78:	6060      	str	r0, [r4, #4]
 801bb7a:	6863      	ldr	r3, [r4, #4]
 801bb7c:	6123      	str	r3, [r4, #16]
 801bb7e:	2300      	movs	r3, #0
 801bb80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb84:	e7a8      	b.n	801bad8 <_printf_i+0x150>
 801bb86:	6923      	ldr	r3, [r4, #16]
 801bb88:	462a      	mov	r2, r5
 801bb8a:	4649      	mov	r1, r9
 801bb8c:	4640      	mov	r0, r8
 801bb8e:	47d0      	blx	sl
 801bb90:	3001      	adds	r0, #1
 801bb92:	d0ab      	beq.n	801baec <_printf_i+0x164>
 801bb94:	6823      	ldr	r3, [r4, #0]
 801bb96:	079b      	lsls	r3, r3, #30
 801bb98:	d413      	bmi.n	801bbc2 <_printf_i+0x23a>
 801bb9a:	68e0      	ldr	r0, [r4, #12]
 801bb9c:	9b03      	ldr	r3, [sp, #12]
 801bb9e:	4298      	cmp	r0, r3
 801bba0:	bfb8      	it	lt
 801bba2:	4618      	movlt	r0, r3
 801bba4:	e7a4      	b.n	801baf0 <_printf_i+0x168>
 801bba6:	2301      	movs	r3, #1
 801bba8:	4632      	mov	r2, r6
 801bbaa:	4649      	mov	r1, r9
 801bbac:	4640      	mov	r0, r8
 801bbae:	47d0      	blx	sl
 801bbb0:	3001      	adds	r0, #1
 801bbb2:	d09b      	beq.n	801baec <_printf_i+0x164>
 801bbb4:	3501      	adds	r5, #1
 801bbb6:	68e3      	ldr	r3, [r4, #12]
 801bbb8:	9903      	ldr	r1, [sp, #12]
 801bbba:	1a5b      	subs	r3, r3, r1
 801bbbc:	42ab      	cmp	r3, r5
 801bbbe:	dcf2      	bgt.n	801bba6 <_printf_i+0x21e>
 801bbc0:	e7eb      	b.n	801bb9a <_printf_i+0x212>
 801bbc2:	2500      	movs	r5, #0
 801bbc4:	f104 0619 	add.w	r6, r4, #25
 801bbc8:	e7f5      	b.n	801bbb6 <_printf_i+0x22e>
 801bbca:	bf00      	nop
 801bbcc:	0801c805 	.word	0x0801c805
 801bbd0:	0801c816 	.word	0x0801c816

0801bbd4 <_read_r>:
 801bbd4:	b538      	push	{r3, r4, r5, lr}
 801bbd6:	4d07      	ldr	r5, [pc, #28]	; (801bbf4 <_read_r+0x20>)
 801bbd8:	4604      	mov	r4, r0
 801bbda:	4608      	mov	r0, r1
 801bbdc:	4611      	mov	r1, r2
 801bbde:	2200      	movs	r2, #0
 801bbe0:	602a      	str	r2, [r5, #0]
 801bbe2:	461a      	mov	r2, r3
 801bbe4:	f7f2 fddb 	bl	800e79e <_read>
 801bbe8:	1c43      	adds	r3, r0, #1
 801bbea:	d102      	bne.n	801bbf2 <_read_r+0x1e>
 801bbec:	682b      	ldr	r3, [r5, #0]
 801bbee:	b103      	cbz	r3, 801bbf2 <_read_r+0x1e>
 801bbf0:	6023      	str	r3, [r4, #0]
 801bbf2:	bd38      	pop	{r3, r4, r5, pc}
 801bbf4:	200090a0 	.word	0x200090a0

0801bbf8 <_fstat_r>:
 801bbf8:	b538      	push	{r3, r4, r5, lr}
 801bbfa:	4d07      	ldr	r5, [pc, #28]	; (801bc18 <_fstat_r+0x20>)
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	4604      	mov	r4, r0
 801bc00:	4608      	mov	r0, r1
 801bc02:	4611      	mov	r1, r2
 801bc04:	602b      	str	r3, [r5, #0]
 801bc06:	f7f2 fe0f 	bl	800e828 <_fstat>
 801bc0a:	1c43      	adds	r3, r0, #1
 801bc0c:	d102      	bne.n	801bc14 <_fstat_r+0x1c>
 801bc0e:	682b      	ldr	r3, [r5, #0]
 801bc10:	b103      	cbz	r3, 801bc14 <_fstat_r+0x1c>
 801bc12:	6023      	str	r3, [r4, #0]
 801bc14:	bd38      	pop	{r3, r4, r5, pc}
 801bc16:	bf00      	nop
 801bc18:	200090a0 	.word	0x200090a0

0801bc1c <_isatty_r>:
 801bc1c:	b538      	push	{r3, r4, r5, lr}
 801bc1e:	4d06      	ldr	r5, [pc, #24]	; (801bc38 <_isatty_r+0x1c>)
 801bc20:	2300      	movs	r3, #0
 801bc22:	4604      	mov	r4, r0
 801bc24:	4608      	mov	r0, r1
 801bc26:	602b      	str	r3, [r5, #0]
 801bc28:	f7f2 fe0e 	bl	800e848 <_isatty>
 801bc2c:	1c43      	adds	r3, r0, #1
 801bc2e:	d102      	bne.n	801bc36 <_isatty_r+0x1a>
 801bc30:	682b      	ldr	r3, [r5, #0]
 801bc32:	b103      	cbz	r3, 801bc36 <_isatty_r+0x1a>
 801bc34:	6023      	str	r3, [r4, #0]
 801bc36:	bd38      	pop	{r3, r4, r5, pc}
 801bc38:	200090a0 	.word	0x200090a0

0801bc3c <_init>:
 801bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc3e:	bf00      	nop
 801bc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc42:	bc08      	pop	{r3}
 801bc44:	469e      	mov	lr, r3
 801bc46:	4770      	bx	lr

0801bc48 <_fini>:
 801bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc4a:	bf00      	nop
 801bc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc4e:	bc08      	pop	{r3}
 801bc50:	469e      	mov	lr, r3
 801bc52:	4770      	bx	lr
